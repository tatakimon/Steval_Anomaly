
IIS3DWB_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bf  08009f28  08009f28  0000af28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1e8  0800a1e8  0000b1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1f0  0800a1f0  0000b1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a1f4  0800a1f4  0000b1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  20000000  0800a1f8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009a8  20000070  0800a268  0000c070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a18  0800a268  0000ca18  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aed0  00000000  00000000  0000c0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029a9  00000000  00000000  00026f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012d8  00000000  00000000  00029920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ea9  00000000  00000000  0002abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b3e6  00000000  00000000  0002baa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000192fa  00000000  00000000  00066e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00184e22  00000000  00000000  00080181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00204fa3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005740  00000000  00000000  00204fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000088  00000000  00000000  0020a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	08009f10 	.word	0x08009f10

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	08009f10 	.word	0x08009f10

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <uart_print>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void uart_print(const char *s)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), HAL_MAX_DELAY);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff fe33 	bl	8000278 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <uart_print+0x28>)
 800061e:	f007 ff2f 	bl	8008480 <HAL_UART_Transmit>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200003ec 	.word	0x200003ec

08000630 <_write>:

/* printf retarget to USART2 */
int _write(int file, char *ptr, int len)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  (void)file;
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, (uint16_t)len, HAL_MAX_DELAY);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b29a      	uxth	r2, r3
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <_write+0x28>)
 8000648:	f007 ff1a 	bl	8008480 <HAL_UART_Transmit>
  return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200003ec 	.word	0x200003ec

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
	  /* USER CODE begin 2 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000662:	f001 fb63 	bl	8001d2c <HAL_Init>

			  /* Configure the System Power */
			  //SystemPower_Config();

			  /* Configure the system clock */
			  SystemClock_Config();
 8000666:	f000 f887 	bl	8000778 <SystemClock_Config>
			  /* USER CODE BEGIN SysInit */

			  /* USER CODE END SysInit */

			  /* Initialize all configured peripherals */
			  MX_GPIO_Init();
 800066a:	f000 f9f1 	bl	8000a50 <MX_GPIO_Init>

			  MX_GPDMA1_Init();
 800066e:	f000 f8e9 	bl	8000844 <MX_GPDMA1_Init>
			  //MX_ICACHE_Init();
			  //MX_RTC_Init();
			  //MX_SAI1_Init();
			  //MX_SDMMC1_SD_Init();
			  //MX_SPI1_Init();
			  MX_SPI2_Init();
 8000672:	f000 f92f 	bl	80008d4 <MX_SPI2_Init>
			  //MX_SPI3_Init();
			  //MX_TAMP_RTC_Init();
			  //MX_TIM3_Init();
			  MX_USART2_UART_Init();
 8000676:	f000 f99d 	bl	80009b4 <MX_USART2_UART_Init>
			  //MX_USART3_UART_Init();
			  //MX_USB_OTG_FS_PCD_Init();

			  (void)iis3dwb_read(0x0F, &dbg_who, 1);  /* WHO_AM_I should be 0x7B */
 800067a:	2201      	movs	r2, #1
 800067c:	4936      	ldr	r1, [pc, #216]	@ (8000758 <main+0xfc>)
 800067e:	200f      	movs	r0, #15
 8000680:	f000 fc10 	bl	8000ea4 <iis3dwb_read>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  uint8_t s = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	72fb      	strb	r3, [r7, #11]
	  (void)iis3dwb_read(0x1E, &s, 1);            /* STATUS_REG (XLDA = bit0) */
 8000688:	f107 030b 	add.w	r3, r7, #11
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	201e      	movs	r0, #30
 8000692:	f000 fc07 	bl	8000ea4 <iis3dwb_read>
	  dbg_status_last = s;
 8000696:	7afa      	ldrb	r2, [r7, #11]
 8000698:	4b30      	ldr	r3, [pc, #192]	@ (800075c <main+0x100>)
 800069a:	701a      	strb	r2, [r3, #0]

	  //dbg_last_st = iis3dwb_read(0x28, dbg_out_burst, 6);  /* OUTX_L..OUTZ_H burst */

	  /* Always snapshot a 6-byte burst from OUTX_L_A (0x28) */
	  dbg_last_st = iis3dwb_read(0x28, dbg_out_burst, 6);
 800069c:	2206      	movs	r2, #6
 800069e:	4930      	ldr	r1, [pc, #192]	@ (8000760 <main+0x104>)
 80006a0:	2028      	movs	r0, #40	@ 0x28
 80006a2:	f000 fbff 	bl	8000ea4 <iis3dwb_read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <main+0x108>)
 80006ac:	701a      	strb	r2, [r3, #0]

	  /* Small delay helps stepping/debug visibility */
	  HAL_Delay(10);
 80006ae:	200a      	movs	r0, #10
 80006b0:	f001 fc02 	bl	8001eb8 <HAL_Delay>

	  /* small delay to make stepping sane */
	  HAL_Delay(10);
 80006b4:	200a      	movs	r0, #10
 80006b6:	f001 fbff 	bl	8001eb8 <HAL_Delay>


	  /* small delay to make stepping sane */
	  HAL_Delay(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f001 fbfc 	bl	8001eb8 <HAL_Delay>

    /* USER CODE BEGIN 3 */
	  int16_t ax, ay, az;
	  if (iis3dwb_data_ready()) {
 80006c0:	f000 fc50 	bl	8000f64 <iis3dwb_data_ready>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d042      	beq.n	8000750 <main+0xf4>
	    if (iis3dwb_read_axes(&ax, &ay, &az) == HAL_OK) {
 80006ca:	1d3a      	adds	r2, r7, #4
 80006cc:	1db9      	adds	r1, r7, #6
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fc5e 	bl	8000f94 <iis3dwb_read_axes>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d135      	bne.n	800074a <main+0xee>
	    	int32_t ugx = (int32_t)ax * ug_per_lsb;
 80006de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <main+0x10c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	617b      	str	r3, [r7, #20]
	    	    int32_t ugy = (int32_t)ay * ug_per_lsb;
 80006ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <main+0x10c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	613b      	str	r3, [r7, #16]
	    	    int32_t ugz = (int32_t)az * ug_per_lsb;
 80006fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000702:	461a      	mov	r2, r3
 8000704:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <main+0x10c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	60fb      	str	r3, [r7, #12]

	    	    printf("RAW: %6d %6d %6d  |  g: ", ax, ay, az);
 800070e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000712:	4619      	mov	r1, r3
 8000714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000718:	461a      	mov	r2, r3
 800071a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800071e:	4813      	ldr	r0, [pc, #76]	@ (800076c <main+0x110>)
 8000720:	f008 fcd2 	bl	80090c8 <iprintf>
	    	    print_g3_from_ug(ugx); printf(" ");
 8000724:	6978      	ldr	r0, [r7, #20]
 8000726:	f000 fc81 	bl	800102c <print_g3_from_ug>
 800072a:	2020      	movs	r0, #32
 800072c:	f008 fcde 	bl	80090ec <putchar>
	    	    print_g3_from_ug(ugy); printf(" ");
 8000730:	6938      	ldr	r0, [r7, #16]
 8000732:	f000 fc7b 	bl	800102c <print_g3_from_ug>
 8000736:	2020      	movs	r0, #32
 8000738:	f008 fcd8 	bl	80090ec <putchar>
	    	    print_g3_from_ug(ugz); printf("\r\n");
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 fc75 	bl	800102c <print_g3_from_ug>
 8000742:	480b      	ldr	r0, [pc, #44]	@ (8000770 <main+0x114>)
 8000744:	f008 fd30 	bl	80091a8 <puts>
 8000748:	e002      	b.n	8000750 <main+0xf4>
	    	  } else {
	    	    uart_print("Read error\r\n");
 800074a:	480a      	ldr	r0, [pc, #40]	@ (8000774 <main+0x118>)
 800074c:	f7ff ff5a 	bl	8000604 <uart_print>
	    	  }
	    	}
	  /* ~50 ms between prints (tweak as you like) */
	  HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	@ 0x64
 8000752:	f001 fbb1 	bl	8001eb8 <HAL_Delay>
  {
 8000756:	e795      	b.n	8000684 <main+0x28>
 8000758:	20000480 	.word	0x20000480
 800075c:	20000481 	.word	0x20000481
 8000760:	20000484 	.word	0x20000484
 8000764:	2000048a 	.word	0x2000048a
 8000768:	20000000 	.word	0x20000000
 800076c:	08009f28 	.word	0x08009f28
 8000770:	08009f44 	.word	0x08009f44
 8000774:	08009f48 	.word	0x08009f48

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09e      	sub	sp, #120	@ 0x78
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2260      	movs	r2, #96	@ 0x60
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 fdee 	bl	8009368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007a0:	f002 fed0 	bl	8003544 <HAL_PWREx_ControlVoltageScaling>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007aa:	f000 fdab 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007ae:	232b      	movs	r3, #43	@ 0x2b
 80007b0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2303      	movs	r3, #3
 80007d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80007f2:	230c      	movs	r3, #12
 80007f4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 ff5c 	bl	80036bc <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080a:	f000 fd7b 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	231f      	movs	r3, #31
 8000810:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	2104      	movs	r1, #4
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fe22 	bl	8004474 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000836:	f000 fd65 	bl	8001304 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3778      	adds	r7, #120	@ 0x78
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800084a:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <MX_GPDMA1_Init+0x8c>)
 800084c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000850:	4a1f      	ldr	r2, [pc, #124]	@ (80008d0 <MX_GPDMA1_Init+0x8c>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_GPDMA1_Init+0x8c>)
 800085c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	201d      	movs	r0, #29
 800086e:	f001 fbff 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000872:	201d      	movs	r0, #29
 8000874:	f001 fc16 	bl	80020a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	201e      	movs	r0, #30
 800087e:	f001 fbf7 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000882:	201e      	movs	r0, #30
 8000884:	f001 fc0e 	bl	80020a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	201f      	movs	r0, #31
 800088e:	f001 fbef 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000892:	201f      	movs	r0, #31
 8000894:	f001 fc06 	bl	80020a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2020      	movs	r0, #32
 800089e:	f001 fbe7 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80008a2:	2020      	movs	r0, #32
 80008a4:	f001 fbfe 	bl	80020a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2021      	movs	r0, #33	@ 0x21
 80008ae:	f001 fbdf 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80008b2:	2021      	movs	r0, #33	@ 0x21
 80008b4:	f001 fbf6 	bl	80020a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2022      	movs	r0, #34	@ 0x22
 80008be:	f001 fbd7 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80008c2:	2022      	movs	r0, #34	@ 0x22
 80008c4:	f001 fbee 	bl	80020a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	46020c00 	.word	0x46020c00

080008d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e4:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 80008e6:	4a31      	ldr	r2, [pc, #196]	@ (80009ac <MX_SPI2_Init+0xd8>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b2f      	ldr	r3, [pc, #188]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 80008ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f2:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 80008fa:	2207      	movs	r2, #7
 80008fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 800090c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000914:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000918:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800092c:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 800092e:	2207      	movs	r2, #7
 8000930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000932:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000934:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000938:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 800093c:	2200      	movs	r2, #0
 800093e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000942:	2200      	movs	r2, #0
 8000944:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000948:	2200      	movs	r2, #0
 800094a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 800094e:	2200      	movs	r2, #0
 8000950:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000954:	2200      	movs	r2, #0
 8000956:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 800095a:	2200      	movs	r2, #0
 800095c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000960:	2200      	movs	r2, #0
 8000962:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000964:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000966:	2200      	movs	r2, #0
 8000968:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 800096c:	2200      	movs	r2, #0
 800096e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000972:	f006 fe2f 	bl	80075d4 <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 800097c:	f000 fcc2 	bl	8001304 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <MX_SPI2_Init+0xdc>)
 8000986:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_SPI2_Init+0xd4>)
 8000992:	f007 fce4 	bl	800835e <HAL_SPIEx_SetConfigAutonomousMode>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 800099c:	f000 fcb2 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000026c 	.word	0x2000026c
 80009ac:	40003800 	.word	0x40003800
 80009b0:	10010000 	.word	0x10010000

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009ba:	4a24      	ldr	r2, [pc, #144]	@ (8000a4c <MX_USART2_UART_Init+0x98>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4812      	ldr	r0, [pc, #72]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 8000a00:	f007 fcee 	bl	80083e0 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a0a:	f000 fc7b 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 8000a12:	f008 f9cd 	bl	8008db0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a1c:	f000 fc72 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 8000a24:	f008 fa02 	bl	8008e2c <HAL_UARTEx_SetRxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a2e:	f000 fc69 	bl	8001304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USART2_UART_Init+0x94>)
 8000a34:	f008 f983 	bl	8008d3e <HAL_UARTEx_DisableFifoMode>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000a3e:	f000 fc61 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200003ec 	.word	0x200003ec
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	@ 0x38
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a66:	4bbf      	ldr	r3, [pc, #764]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a6c:	4abd      	ldr	r2, [pc, #756]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a76:	4bbb      	ldr	r3, [pc, #748]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a84:	4bb7      	ldr	r3, [pc, #732]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8a:	4ab6      	ldr	r2, [pc, #728]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a94:	4bb3      	ldr	r3, [pc, #716]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4bb0      	ldr	r3, [pc, #704]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa8:	4aae      	ldr	r2, [pc, #696]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab2:	4bac      	ldr	r3, [pc, #688]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	4ba8      	ldr	r3, [pc, #672]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac6:	4aa7      	ldr	r2, [pc, #668]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad0:	4ba4      	ldr	r3, [pc, #656]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4ba1      	ldr	r3, [pc, #644]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae4:	4a9f      	ldr	r2, [pc, #636]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aee:	4b9d      	ldr	r3, [pc, #628]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afc:	4b99      	ldr	r3, [pc, #612]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b02:	4a98      	ldr	r2, [pc, #608]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b0c:	4b95      	ldr	r3, [pc, #596]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b92      	ldr	r3, [pc, #584]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b20:	4a90      	ldr	r2, [pc, #576]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b2a:	4b8e      	ldr	r3, [pc, #568]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b38:	4b8a      	ldr	r3, [pc, #552]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b3e:	4a89      	ldr	r2, [pc, #548]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b48:	4b86      	ldr	r3, [pc, #536]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b83      	ldr	r3, [pc, #524]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b5c:	4a81      	ldr	r2, [pc, #516]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b66:	4b7f      	ldr	r3, [pc, #508]	@ (8000d64 <MX_GPIO_Init+0x314>)
 8000b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8000b7a:	487b      	ldr	r0, [pc, #492]	@ (8000d68 <MX_GPIO_Init+0x318>)
 8000b7c:	f002 fc8e 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2181      	movs	r1, #129	@ 0x81
 8000b84:	4879      	ldr	r0, [pc, #484]	@ (8000d6c <MX_GPIO_Init+0x31c>)
 8000b86:	f002 fc89 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000b90:	4875      	ldr	r0, [pc, #468]	@ (8000d68 <MX_GPIO_Init+0x318>)
 8000b92:	f002 fc83 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4875      	ldr	r0, [pc, #468]	@ (8000d70 <MX_GPIO_Init+0x320>)
 8000b9c:	f002 fc7e 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba6:	4873      	ldr	r0, [pc, #460]	@ (8000d74 <MX_GPIO_Init+0x324>)
 8000ba8:	f002 fc78 	bl	800349c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8000bac:	2340      	movs	r3, #64	@ 0x40
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb0:	4b71      	ldr	r3, [pc, #452]	@ (8000d78 <MX_GPIO_Init+0x328>)
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	486b      	ldr	r0, [pc, #428]	@ (8000d6c <MX_GPIO_Init+0x31c>)
 8000bc0:	f002 fa8c 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8000bc4:	f248 0362 	movw	r3, #32866	@ 0x8062
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4868      	ldr	r0, [pc, #416]	@ (8000d7c <MX_GPIO_Init+0x32c>)
 8000bda:	f002 fa7f 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 8000bde:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	485c      	ldr	r0, [pc, #368]	@ (8000d68 <MX_GPIO_Init+0x318>)
 8000bf8:	f002 fa70 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8000bfc:	2324      	movs	r3, #36	@ 0x24
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c00:	2303      	movs	r3, #3
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4857      	ldr	r0, [pc, #348]	@ (8000d6c <MX_GPIO_Init+0x31c>)
 8000c10:	f002 fa64 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8000c14:	f24a 2301 	movw	r3, #41473	@ 0xa201
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4855      	ldr	r0, [pc, #340]	@ (8000d80 <MX_GPIO_Init+0x330>)
 8000c2a:	f002 fa57 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8000c2e:	2381      	movs	r3, #129	@ 0x81
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4849      	ldr	r0, [pc, #292]	@ (8000d6c <MX_GPIO_Init+0x31c>)
 8000c46:	f002 fa49 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4843      	ldr	r0, [pc, #268]	@ (8000d70 <MX_GPIO_Init+0x320>)
 8000c62:	f002 fa3b 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 8000c66:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	483b      	ldr	r0, [pc, #236]	@ (8000d68 <MX_GPIO_Init+0x318>)
 8000c7c:	f002 fa2e 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8000c80:	2381      	movs	r3, #129	@ 0x81
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c84:	4b3c      	ldr	r3, [pc, #240]	@ (8000d78 <MX_GPIO_Init+0x328>)
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4837      	ldr	r0, [pc, #220]	@ (8000d70 <MX_GPIO_Init+0x320>)
 8000c94:	f002 fa22 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8000c98:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	4b36      	ldr	r3, [pc, #216]	@ (8000d78 <MX_GPIO_Init+0x328>)
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4835      	ldr	r0, [pc, #212]	@ (8000d84 <MX_GPIO_Init+0x334>)
 8000cae:	f002 fa15 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8000cb2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	482b      	ldr	r0, [pc, #172]	@ (8000d74 <MX_GPIO_Init+0x324>)
 8000cc8:	f002 fa08 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8000ccc:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <MX_GPIO_Init+0x328>)
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4824      	ldr	r0, [pc, #144]	@ (8000d74 <MX_GPIO_Init+0x324>)
 8000ce2:	f002 f9fb 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 8000ce6:	f240 1301 	movw	r3, #257	@ 0x101
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cec:	2303      	movs	r3, #3
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4823      	ldr	r0, [pc, #140]	@ (8000d88 <MX_GPIO_Init+0x338>)
 8000cfc:	f002 f9ee 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 8000d00:	230c      	movs	r3, #12
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d04:	2303      	movs	r3, #3
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	481e      	ldr	r0, [pc, #120]	@ (8000d8c <MX_GPIO_Init+0x33c>)
 8000d14:	f002 f9e2 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8000d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4810      	ldr	r0, [pc, #64]	@ (8000d74 <MX_GPIO_Init+0x324>)
 8000d32:	f002 f9d3 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_GPIO_Init+0x328>)
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <MX_GPIO_Init+0x330>)
 8000d4c:	f002 f9c6 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8000d50:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d56:	2303      	movs	r3, #3
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d62:	e015      	b.n	8000d90 <MX_GPIO_Init+0x340>
 8000d64:	46020c00 	.word	0x46020c00
 8000d68:	42021c00 	.word	0x42021c00
 8000d6c:	42022000 	.word	0x42022000
 8000d70:	42021000 	.word	0x42021000
 8000d74:	42021400 	.word	0x42021400
 8000d78:	10110000 	.word	0x10110000
 8000d7c:	42021800 	.word	0x42021800
 8000d80:	42020c00 	.word	0x42020c00
 8000d84:	42020400 	.word	0x42020400
 8000d88:	42020000 	.word	0x42020000
 8000d8c:	42020800 	.word	0x42020800
 8000d90:	4619      	mov	r1, r3
 8000d92:	4842      	ldr	r0, [pc, #264]	@ (8000e9c <MX_GPIO_Init+0x44c>)
 8000d94:	f002 f9a2 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8000d98:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	483c      	ldr	r0, [pc, #240]	@ (8000ea0 <MX_GPIO_Init+0x450>)
 8000dae:	f002 f995 	bl	80030dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2107      	movs	r1, #7
 8000db6:	200b      	movs	r0, #11
 8000db8:	f001 f95a 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dbc:	200b      	movs	r0, #11
 8000dbe:	f001 f971 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2107      	movs	r1, #7
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f001 f952 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dcc:	200c      	movs	r0, #12
 8000dce:	f001 f969 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	200d      	movs	r0, #13
 8000dd8:	f001 f94a 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ddc:	200d      	movs	r0, #13
 8000dde:	f001 f961 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2107      	movs	r1, #7
 8000de6:	200e      	movs	r0, #14
 8000de8:	f001 f942 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000dec:	200e      	movs	r0, #14
 8000dee:	f001 f959 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2107      	movs	r1, #7
 8000df6:	200f      	movs	r0, #15
 8000df8:	f001 f93a 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f001 f951 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2107      	movs	r1, #7
 8000e06:	2010      	movs	r0, #16
 8000e08:	f001 f932 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000e0c:	2010      	movs	r0, #16
 8000e0e:	f001 f949 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2107      	movs	r1, #7
 8000e16:	2011      	movs	r0, #17
 8000e18:	f001 f92a 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8000e1c:	2011      	movs	r0, #17
 8000e1e:	f001 f941 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2107      	movs	r1, #7
 8000e26:	2012      	movs	r0, #18
 8000e28:	f001 f922 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8000e2c:	2012      	movs	r0, #18
 8000e2e:	f001 f939 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2107      	movs	r1, #7
 8000e36:	2013      	movs	r0, #19
 8000e38:	f001 f91a 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8000e3c:	2013      	movs	r0, #19
 8000e3e:	f001 f931 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2107      	movs	r1, #7
 8000e46:	2014      	movs	r0, #20
 8000e48:	f001 f912 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8000e4c:	2014      	movs	r0, #20
 8000e4e:	f001 f929 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2107      	movs	r1, #7
 8000e56:	2015      	movs	r0, #21
 8000e58:	f001 f90a 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000e5c:	2015      	movs	r0, #21
 8000e5e:	f001 f921 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2107      	movs	r1, #7
 8000e66:	2016      	movs	r0, #22
 8000e68:	f001 f902 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000e6c:	2016      	movs	r0, #22
 8000e6e:	f001 f919 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2107      	movs	r1, #7
 8000e76:	2018      	movs	r0, #24
 8000e78:	f001 f8fa 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000e7c:	2018      	movs	r0, #24
 8000e7e:	f001 f911 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2107      	movs	r1, #7
 8000e86:	2019      	movs	r0, #25
 8000e88:	f001 f8f2 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000e8c:	2019      	movs	r0, #25
 8000e8e:	f001 f909 	bl	80020a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	@ 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	42020400 	.word	0x42020400
 8000ea0:	42021000 	.word	0x42021000

08000ea4 <iis3dwb_read>:



/* IIS3DWB SPI read via DMA */
static HAL_StatusTypeDef iis3dwb_read(uint8_t reg, uint8_t *dst, uint16_t len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	80bb      	strh	r3, [r7, #4]
  if (len + 1 > SPI_DMA_MAX) return HAL_ERROR;
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eba:	d301      	bcc.n	8000ec0 <iis3dwb_read+0x1c>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e041      	b.n	8000f44 <iis3dwb_read+0xa0>

  uint8_t cmd = (uint8_t)(0x80u | (reg & 0x7Fu));  // ✅ MSB=1 for read, NO bit-6
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ec6:	73fb      	strb	r3, [r7, #15]
  spi_tx_buf[0] = cmd;
 8000ec8:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <iis3dwb_read+0xa8>)
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	7013      	strb	r3, [r2, #0]
  memset(&spi_tx_buf[1], 0xFF, len);
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	21ff      	movs	r1, #255	@ 0xff
 8000ed4:	481e      	ldr	r0, [pc, #120]	@ (8000f50 <iis3dwb_read+0xac>)
 8000ed6:	f008 fa47 	bl	8009368 <memset>

  spi2_dma_done = 0;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <iis3dwb_read+0xb0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
  CS_DWB_Low();
 8000ee0:	f000 f992 	bl	8001208 <CS_DWB_Low>

  dbg_clear_snap();
 8000ee4:	f000 f8da 	bl	800109c <dbg_clear_snap>
  dbg_capture_tx(spi_tx_buf, (uint16_t)(len + 1), reg, spi_tx_buf[0]);  /* DBG */
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b299      	uxth	r1, r3
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <iis3dwb_read+0xa8>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <iis3dwb_read+0xa8>)
 8000ef6:	f000 f90b 	bl	8001110 <dbg_capture_tx>

  HAL_StatusTypeDef st = HAL_SPI_TransmitReceive_DMA(&hspi2, spi_tx_buf, spi_rx_buf, len + 1);
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4a15      	ldr	r2, [pc, #84]	@ (8000f58 <iis3dwb_read+0xb4>)
 8000f02:	4912      	ldr	r1, [pc, #72]	@ (8000f4c <iis3dwb_read+0xa8>)
 8000f04:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <iis3dwb_read+0xb8>)
 8000f06:	f006 fc7b 	bl	8007800 <HAL_SPI_TransmitReceive_DMA>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73bb      	strb	r3, [r7, #14]
  if (st != HAL_OK) { CS_DWB_High(); return st; }
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <iis3dwb_read+0x78>
 8000f14:	f000 f98a 	bl	800122c <CS_DWB_High>
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	e013      	b.n	8000f44 <iis3dwb_read+0xa0>

  while (!spi2_dma_done) { /* wait */ }
 8000f1c:	bf00      	nop
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <iis3dwb_read+0xb0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0fa      	beq.n	8000f1e <iis3dwb_read+0x7a>

  dbg_capture_rx(spi_rx_buf, (uint16_t)(len + 1));                       /* DBG */
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <iis3dwb_read+0xb4>)
 8000f32:	f000 f943 	bl	80011bc <dbg_capture_rx>

  memcpy(dst, &spi_rx_buf[1], len);
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4909      	ldr	r1, [pc, #36]	@ (8000f60 <iis3dwb_read+0xbc>)
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f008 fa8e 	bl	800945e <memcpy>
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000048c 	.word	0x2000048c
 8000f50:	2000048d 	.word	0x2000048d
 8000f54:	2000088c 	.word	0x2000088c
 8000f58:	2000068c 	.word	0x2000068c
 8000f5c:	2000026c 	.word	0x2000026c
 8000f60:	2000068d 	.word	0x2000068d

08000f64 <iis3dwb_data_ready>:



/* Poll data-ready: STATUS_REG bit0 = XLDA */
static uint8_t iis3dwb_data_ready(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  uint8_t st = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if (iis3dwb_read(DWB_REG_STATUS, &st, 1) != HAL_OK) return 0;
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	201e      	movs	r0, #30
 8000f76:	f7ff ff95 	bl	8000ea4 <iis3dwb_read>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <iis3dwb_data_ready+0x20>
 8000f80:	2300      	movs	r3, #0
 8000f82:	e003      	b.n	8000f8c <iis3dwb_data_ready+0x28>
  return (st & 0x01u) ? 1u : 0u;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <iis3dwb_read_axes>:

/* Burst read XYZ (6 bytes) */
static HAL_StatusTypeDef iis3dwb_read_axes(int16_t *ax, int16_t *ay, int16_t *az)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint8_t raw[6];
  HAL_StatusTypeDef st = iis3dwb_read(DWB_REG_OUTX_L_A, raw, sizeof raw);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	2206      	movs	r2, #6
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2028      	movs	r0, #40	@ 0x28
 8000faa:	f7ff ff7b 	bl	8000ea4 <iis3dwb_read>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <iis3dwb_read_axes+0x28>
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	e02d      	b.n	8001018 <iis3dwb_read_axes+0x84>

  *ax = (int16_t)((uint16_t)raw[1] << 8 | raw[0]);
 8000fbc:	7c7b      	ldrb	r3, [r7, #17]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	7c3b      	ldrb	r3, [r7, #16]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	801a      	strh	r2, [r3, #0]
  *ay = (int16_t)((uint16_t)raw[3] << 8 | raw[2]);
 8000fd0:	7cfb      	ldrb	r3, [r7, #19]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7cbb      	ldrb	r3, [r7, #18]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	801a      	strh	r2, [r3, #0]
  *az = (int16_t)((uint16_t)raw[5] << 8 | raw[4]);
 8000fe4:	7d7b      	ldrb	r3, [r7, #21]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7d3b      	ldrb	r3, [r7, #20]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	801a      	strh	r2, [r3, #0]
  dbg_ax = *ax;  dbg_ay = *ay;  dbg_az = *az;                              /* DBG */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <iis3dwb_read_axes+0x8c>)
 8001000:	801a      	strh	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <iis3dwb_read_axes+0x90>)
 800100a:	801a      	strh	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001012:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <iis3dwb_read_axes+0x94>)
 8001014:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200008b4 	.word	0x200008b4
 8001024:	200008b6 	.word	0x200008b6
 8001028:	200008b8 	.word	0x200008b8

0800102c <print_g3_from_ug>:



/* Print ±X.YYY in g units from micro-g (no float) */
static void print_g3_from_ug(int32_t ug)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  char sign = '+';
 8001034:	232b      	movs	r3, #43	@ 0x2b
 8001036:	73fb      	strb	r3, [r7, #15]
  if (ug < 0) { sign = '-'; ug = -ug; }
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da04      	bge.n	8001048 <print_g3_from_ug+0x1c>
 800103e:	232d      	movs	r3, #45	@ 0x2d
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	425b      	negs	r3, r3
 8001046:	607b      	str	r3, [r7, #4]
  /* g with 3 decimals: integer part = ug / 1e6, frac3 = (ug % 1e6)/1e3 */
  printf("%c%ld.%03ld", sign, (long)(ug / 1000000L), (long)((ug % 1000000L) / 1000L));
 8001048:	7bf8      	ldrb	r0, [r7, #15]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <print_g3_from_ug+0x60>)
 800104e:	fb82 1203 	smull	r1, r2, r2, r3
 8001052:	1492      	asrs	r2, r2, #18
 8001054:	17db      	asrs	r3, r3, #31
 8001056:	1ad4      	subs	r4, r2, r3
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <print_g3_from_ug+0x60>)
 800105c:	fb83 1302 	smull	r1, r3, r3, r2
 8001060:	1499      	asrs	r1, r3, #18
 8001062:	17d3      	asrs	r3, r2, #31
 8001064:	1acb      	subs	r3, r1, r3
 8001066:	490a      	ldr	r1, [pc, #40]	@ (8001090 <print_g3_from_ug+0x64>)
 8001068:	fb01 f303 	mul.w	r3, r1, r3
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <print_g3_from_ug+0x68>)
 8001070:	fb82 1203 	smull	r1, r2, r2, r3
 8001074:	1192      	asrs	r2, r2, #6
 8001076:	17db      	asrs	r3, r3, #31
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4622      	mov	r2, r4
 800107c:	4601      	mov	r1, r0
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <print_g3_from_ug+0x6c>)
 8001080:	f008 f822 	bl	80090c8 <iprintf>
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	431bde83 	.word	0x431bde83
 8001090:	000f4240 	.word	0x000f4240
 8001094:	10624dd3 	.word	0x10624dd3
 8001098:	0800a0a8 	.word	0x0800a0a8

0800109c <dbg_clear_snap>:



static void dbg_clear_snap(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  for (int i=0;i<DBG_SNAP_BYTES;i++){ dbg_tx_head[i]=0; dbg_rx_head[i]=0; }
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	e00c      	b.n	80010c2 <dbg_clear_snap+0x26>
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <dbg_clear_snap+0x58>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <dbg_clear_snap+0x5c>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	ddef      	ble.n	80010a8 <dbg_clear_snap+0xc>
  dbg_last_cmd = 0; dbg_last_reg = 0; dbg_last_len = 0;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <dbg_clear_snap+0x60>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <dbg_clear_snap+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <dbg_clear_snap+0x68>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	801a      	strh	r2, [r3, #0]
  dbg_spi2_dma_done_seen = 0; dbg_cmd_ok = 0;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <dbg_clear_snap+0x6c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <dbg_clear_snap+0x70>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000894 	.word	0x20000894
 80010f8:	200008a4 	.word	0x200008a4
 80010fc:	2000088d 	.word	0x2000088d
 8001100:	2000088e 	.word	0x2000088e
 8001104:	20000890 	.word	0x20000890
 8001108:	200008bc 	.word	0x200008bc
 800110c:	200008c0 	.word	0x200008c0

08001110 <dbg_capture_tx>:

static void dbg_capture_tx(const uint8_t *tx, uint16_t n, uint8_t reg, uint8_t cmd)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	460b      	mov	r3, r1
 8001124:	707b      	strb	r3, [r7, #1]
 8001126:	4613      	mov	r3, r2
 8001128:	703b      	strb	r3, [r7, #0]
  uint16_t cpy = (n < DBG_SNAP_BYTES) ? n : DBG_SNAP_BYTES;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	2b10      	cmp	r3, #16
 800112e:	bf28      	it	cs
 8001130:	2310      	movcs	r3, #16
 8001132:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0;i<cpy;i++) dbg_tx_head[i] = tx[i];
 8001134:	2300      	movs	r3, #0
 8001136:	81fb      	strh	r3, [r7, #14]
 8001138:	e009      	b.n	800114e <dbg_capture_tx+0x3e>
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	441a      	add	r2, r3
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	7811      	ldrb	r1, [r2, #0]
 8001144:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <dbg_capture_tx+0x98>)
 8001146:	54d1      	strb	r1, [r2, r3]
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	3301      	adds	r3, #1
 800114c:	81fb      	strh	r3, [r7, #14]
 800114e:	89fa      	ldrh	r2, [r7, #14]
 8001150:	89bb      	ldrh	r3, [r7, #12]
 8001152:	429a      	cmp	r2, r3
 8001154:	d3f1      	bcc.n	800113a <dbg_capture_tx+0x2a>
  dbg_last_reg = reg;
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <dbg_capture_tx+0x9c>)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	7013      	strb	r3, [r2, #0]
  dbg_last_cmd = cmd;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <dbg_capture_tx+0xa0>)
 800115e:	783b      	ldrb	r3, [r7, #0]
 8001160:	7013      	strb	r3, [r2, #0]
  dbg_last_len = (n > 0) ? (n-1) : 0; /* excluding the cmd byte */
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <dbg_capture_tx+0x60>
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	3b01      	subs	r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	e000      	b.n	8001172 <dbg_capture_tx+0x62>
 8001170:	2300      	movs	r3, #0
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <dbg_capture_tx+0xa4>)
 8001174:	8013      	strh	r3, [r2, #0]
  dbg_cmd_ok   = (uint8_t)( (cmd & 0x80u) == 0x80u && ((cmd & 0x7Fu) == (reg & 0x7Fu)) );
 8001176:	f997 3000 	ldrsb.w	r3, [r7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da09      	bge.n	8001192 <dbg_capture_tx+0x82>
 800117e:	783a      	ldrb	r2, [r7, #0]
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	4053      	eors	r3, r2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <dbg_capture_tx+0x82>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <dbg_capture_tx+0x84>
 8001192:	2300      	movs	r3, #0
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <dbg_capture_tx+0xa8>)
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000894 	.word	0x20000894
 80011ac:	2000088e 	.word	0x2000088e
 80011b0:	2000088d 	.word	0x2000088d
 80011b4:	20000890 	.word	0x20000890
 80011b8:	200008c0 	.word	0x200008c0

080011bc <dbg_capture_rx>:

static void dbg_capture_rx(const uint8_t *rx, uint16_t n)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
  uint16_t cpy = (n < DBG_SNAP_BYTES) ? n : DBG_SNAP_BYTES;
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	bf28      	it	cs
 80011ce:	2310      	movcs	r3, #16
 80011d0:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0;i<cpy;i++) dbg_rx_head[i] = rx[i];
 80011d2:	2300      	movs	r3, #0
 80011d4:	81fb      	strh	r3, [r7, #14]
 80011d6:	e009      	b.n	80011ec <dbg_capture_rx+0x30>
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	441a      	add	r2, r3
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	7811      	ldrb	r1, [r2, #0]
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <dbg_capture_rx+0x48>)
 80011e4:	54d1      	strb	r1, [r2, r3]
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	3301      	adds	r3, #1
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	89fa      	ldrh	r2, [r7, #14]
 80011ee:	89bb      	ldrh	r3, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3f1      	bcc.n	80011d8 <dbg_capture_rx+0x1c>
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200008a4 	.word	0x200008a4

08001208 <CS_DWB_Low>:

/* Hook CS helpers to expose level */
static inline void CS_DWB_Low(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001212:	4804      	ldr	r0, [pc, #16]	@ (8001224 <CS_DWB_Low+0x1c>)
 8001214:	f002 f942 	bl	800349c <HAL_GPIO_WritePin>
  dbg_cs_level = 0;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <CS_DWB_Low+0x20>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	42021400 	.word	0x42021400
 8001228:	20000004 	.word	0x20000004

0800122c <CS_DWB_High>:
static inline void CS_DWB_High(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001236:	4804      	ldr	r0, [pc, #16]	@ (8001248 <CS_DWB_High+0x1c>)
 8001238:	f002 f930 	bl	800349c <HAL_GPIO_WritePin>
  dbg_cs_level = 1;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <CS_DWB_High+0x20>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	42021400 	.word	0x42021400
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_SPI_TxRxCpltCallback>:
  for (int i=0;i<6;i++) dbg_rx_head[8+i] = single[i];
}

/* DMA completion callbacks: mark a flag you can watch */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI2) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_SPI_TxRxCpltCallback+0x30>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10a      	bne.n	8001278 <HAL_SPI_TxRxCpltCallback+0x28>
    CS_DWB_High();
 8001262:	f7ff ffe3 	bl	800122c <CS_DWB_High>
    spi2_dma_done = 1;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <HAL_SPI_TxRxCpltCallback+0x34>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
    dbg_spi2_dma_done_seen ^= 1; /* toggle so you see it change */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_SPI_TxRxCpltCallback+0x38>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f083 0301 	eor.w	r3, r3, #1
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_SPI_TxRxCpltCallback+0x38>)
 8001276:	6013      	str	r3, [r2, #0]
  }
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40003800 	.word	0x40003800
 8001284:	2000088c 	.word	0x2000088c
 8001288:	200008bc 	.word	0x200008bc

0800128c <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI2) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_SPI_TxCpltCallback+0x30>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10a      	bne.n	80012b4 <HAL_SPI_TxCpltCallback+0x28>
    CS_DWB_High();
 800129e:	f7ff ffc5 	bl	800122c <CS_DWB_High>
    spi2_dma_done = 1;
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <HAL_SPI_TxCpltCallback+0x34>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
    dbg_spi2_dma_done_seen ^= 1;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_SPI_TxCpltCallback+0x38>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f083 0301 	eor.w	r3, r3, #1
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_SPI_TxCpltCallback+0x38>)
 80012b2:	6013      	str	r3, [r2, #0]
  }
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40003800 	.word	0x40003800
 80012c0:	2000088c 	.word	0x2000088c
 80012c4:	200008bc 	.word	0x200008bc

080012c8 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI2) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_SPI_ErrorCallback+0x30>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10a      	bne.n	80012f0 <HAL_SPI_ErrorCallback+0x28>
    CS_DWB_High();
 80012da:	f7ff ffa7 	bl	800122c <CS_DWB_High>
    spi2_dma_done = 1;
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <HAL_SPI_ErrorCallback+0x34>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
    dbg_spi2_dma_done_seen ^= 1;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_SPI_ErrorCallback+0x38>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f083 0301 	eor.w	r3, r3, #1
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <HAL_SPI_ErrorCallback+0x38>)
 80012ee:	6013      	str	r3, [r2, #0]
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40003800 	.word	0x40003800
 80012fc:	2000088c 	.word	0x2000088c
 8001300:	200008bc 	.word	0x200008bc

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <Error_Handler+0x8>

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_MspInit+0x38>)
 8001318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800131c:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <HAL_MspInit+0x38>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HAL_MspInit+0x38>)
 8001328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001334:	f002 f992 	bl	800365c <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8001338:	f002 f9a0 	bl	800367c <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 800133c:	f002 f9ae 	bl	800369c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	46020c00 	.word	0x46020c00

0800134c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0c4      	sub	sp, #272	@ 0x110
 8001350:	af00      	add	r7, sp, #0
 8001352:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001356:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800135a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001370:	22c8      	movs	r2, #200	@ 0xc8
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f007 fff7 	bl	8009368 <memset>
  if(hspi->Instance==SPI1)
 800137a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800137e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4ab0      	ldr	r2, [pc, #704]	@ (8001648 <HAL_SPI_MspInit+0x2fc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d147      	bne.n	800141c <HAL_SPI_MspInit+0xd0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800138c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001398:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800139c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fc35 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80013b0:	f7ff ffa8 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b4:	4ba5      	ldr	r3, [pc, #660]	@ (800164c <HAL_SPI_MspInit+0x300>)
 80013b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013ba:	4aa4      	ldr	r2, [pc, #656]	@ (800164c <HAL_SPI_MspInit+0x300>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80013c4:	4ba1      	ldr	r3, [pc, #644]	@ (800164c <HAL_SPI_MspInit+0x300>)
 80013c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d2:	4b9e      	ldr	r3, [pc, #632]	@ (800164c <HAL_SPI_MspInit+0x300>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d8:	4a9c      	ldr	r2, [pc, #624]	@ (800164c <HAL_SPI_MspInit+0x300>)
 80013da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013e2:	4b9a      	ldr	r3, [pc, #616]	@ (800164c <HAL_SPI_MspInit+0x300>)
 80013e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 80013f0:	231c      	movs	r3, #28
 80013f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001408:	2305      	movs	r3, #5
 800140a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001412:	4619      	mov	r1, r3
 8001414:	488e      	ldr	r0, [pc, #568]	@ (8001650 <HAL_SPI_MspInit+0x304>)
 8001416:	f001 fe61 	bl	80030dc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800141a:	e1d3      	b.n	80017c4 <HAL_SPI_MspInit+0x478>
  else if(hspi->Instance==SPI2)
 800141c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001420:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a8a      	ldr	r2, [pc, #552]	@ (8001654 <HAL_SPI_MspInit+0x308>)
 800142a:	4293      	cmp	r3, r2
 800142c:	f040 8120 	bne.w	8001670 <HAL_SPI_MspInit+0x324>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001430:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001442:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fbe4 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8001452:	f7ff ff57 	bl	8001304 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001456:	4b7d      	ldr	r3, [pc, #500]	@ (800164c <HAL_SPI_MspInit+0x300>)
 8001458:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800145c:	4a7b      	ldr	r2, [pc, #492]	@ (800164c <HAL_SPI_MspInit+0x300>)
 800145e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001462:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001466:	4b79      	ldr	r3, [pc, #484]	@ (800164c <HAL_SPI_MspInit+0x300>)
 8001468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800146c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001474:	4b75      	ldr	r3, [pc, #468]	@ (800164c <HAL_SPI_MspInit+0x300>)
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147a:	4a74      	ldr	r2, [pc, #464]	@ (800164c <HAL_SPI_MspInit+0x300>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001480:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001484:	4b71      	ldr	r3, [pc, #452]	@ (800164c <HAL_SPI_MspInit+0x300>)
 8001486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	623b      	str	r3, [r7, #32]
 8001490:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001492:	4b6e      	ldr	r3, [pc, #440]	@ (800164c <HAL_SPI_MspInit+0x300>)
 8001494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001498:	4a6c      	ldr	r2, [pc, #432]	@ (800164c <HAL_SPI_MspInit+0x300>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a2:	4b6a      	ldr	r3, [pc, #424]	@ (800164c <HAL_SPI_MspInit+0x300>)
 80014a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80014b0:	230a      	movs	r3, #10
 80014b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c8:	2305      	movs	r3, #5
 80014ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014ce:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80014d2:	4619      	mov	r1, r3
 80014d4:	4860      	ldr	r0, [pc, #384]	@ (8001658 <HAL_SPI_MspInit+0x30c>)
 80014d6:	f001 fe01 	bl	80030dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014da:	2308      	movs	r3, #8
 80014dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f2:	2305      	movs	r3, #5
 80014f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80014fc:	4619      	mov	r1, r3
 80014fe:	4857      	ldr	r0, [pc, #348]	@ (800165c <HAL_SPI_MspInit+0x310>)
 8001500:	f001 fdec 	bl	80030dc <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001504:	4b56      	ldr	r3, [pc, #344]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001506:	4a57      	ldr	r2, [pc, #348]	@ (8001664 <HAL_SPI_MspInit+0x318>)
 8001508:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 800150a:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 800150c:	2209      	movs	r2, #9
 800150e:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001510:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001516:	4b52      	ldr	r3, [pc, #328]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 800151e:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001520:	2208      	movs	r2, #8
 8001522:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8001524:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800152a:	4b4d      	ldr	r3, [pc, #308]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001536:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001538:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800153c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 800153e:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001540:	2201      	movs	r2, #1
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001546:	2201      	movs	r2, #1
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800154a:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 800154c:	2200      	movs	r2, #0
 800154e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001550:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8001556:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800155c:	4840      	ldr	r0, [pc, #256]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 800155e:	f000 fe63 	bl	8002228 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8001568:	f7ff fecc 	bl	8001304 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 800156c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001570:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a3a      	ldr	r2, [pc, #232]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 8001578:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800157c:	4a38      	ldr	r2, [pc, #224]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 800157e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001582:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800158a:	2110      	movs	r1, #16
 800158c:	4834      	ldr	r0, [pc, #208]	@ (8001660 <HAL_SPI_MspInit+0x314>)
 800158e:	f001 f9ff 	bl	8002990 <HAL_DMA_ConfigChannelAttributes>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_SPI_MspInit+0x250>
      Error_Handler();
 8001598:	f7ff feb4 	bl	8001304 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800159c:	4b32      	ldr	r3, [pc, #200]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 800159e:	4a33      	ldr	r2, [pc, #204]	@ (800166c <HAL_SPI_MspInit+0x320>)
 80015a0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80015a2:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80015b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80015ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015c0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80015c8:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80015ce:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015d4:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80015d6:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015d8:	2201      	movs	r2, #1
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80015f4:	481c      	ldr	r0, [pc, #112]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 80015f6:	f000 fe17 	bl	8002228 <HAL_DMA_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_SPI_MspInit+0x2b8>
      Error_Handler();
 8001600:	f7ff fe80 	bl	8001304 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 8001604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001608:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a16      	ldr	r2, [pc, #88]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 8001610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 8001616:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800161a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001622:	2110      	movs	r1, #16
 8001624:	4810      	ldr	r0, [pc, #64]	@ (8001668 <HAL_SPI_MspInit+0x31c>)
 8001626:	f001 f9b3 	bl	8002990 <HAL_DMA_ConfigChannelAttributes>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 8001630:	f7ff fe68 	bl	8001304 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	203c      	movs	r0, #60	@ 0x3c
 800163a:	f000 fd19 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800163e:	203c      	movs	r0, #60	@ 0x3c
 8001640:	f000 fd30 	bl	80020a4 <HAL_NVIC_EnableIRQ>
}
 8001644:	e0be      	b.n	80017c4 <HAL_SPI_MspInit+0x478>
 8001646:	bf00      	nop
 8001648:	40013000 	.word	0x40013000
 800164c:	46020c00 	.word	0x46020c00
 8001650:	42021800 	.word	0x42021800
 8001654:	40003800 	.word	0x40003800
 8001658:	42022000 	.word	0x42022000
 800165c:	42020c00 	.word	0x42020c00
 8001660:	200002fc 	.word	0x200002fc
 8001664:	400200d0 	.word	0x400200d0
 8001668:	20000374 	.word	0x20000374
 800166c:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 8001670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001674:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a54      	ldr	r2, [pc, #336]	@ (80017d0 <HAL_SPI_MspInit+0x484>)
 800167e:	4293      	cmp	r3, r2
 8001680:	f040 80a0 	bne.w	80017c4 <HAL_SPI_MspInit+0x478>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001684:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8001690:	2310      	movs	r3, #16
 8001692:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001696:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800169a:	4618      	mov	r0, r3
 800169c:	f003 faba 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_SPI_MspInit+0x35e>
      Error_Handler();
 80016a6:	f7ff fe2d 	bl	8001304 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016aa:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016b0:	4a48      	ldr	r2, [pc, #288]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80016ba:	4b46      	ldr	r3, [pc, #280]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c8:	4b42      	ldr	r3, [pc, #264]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ce:	4a41      	ldr	r2, [pc, #260]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ec:	4a39      	ldr	r2, [pc, #228]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016f6:	4b37      	ldr	r3, [pc, #220]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fc:	f003 0201 	and.w	r2, r3, #1
 8001700:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001704:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800170e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001712:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 8001716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800171a:	4a2e      	ldr	r2, [pc, #184]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001724:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <HAL_SPI_MspInit+0x488>)
 8001726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800172a:	f003 0202 	and.w	r2, r3, #2
 800172e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800173c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001740:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001742:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001746:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800175c:	2306      	movs	r3, #6
 800175e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001762:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001766:	4619      	mov	r1, r3
 8001768:	481b      	ldr	r0, [pc, #108]	@ (80017d8 <HAL_SPI_MspInit+0x48c>)
 800176a:	f001 fcb7 	bl	80030dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800176e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001772:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001788:	2306      	movs	r3, #6
 800178a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001792:	4619      	mov	r1, r3
 8001794:	4811      	ldr	r0, [pc, #68]	@ (80017dc <HAL_SPI_MspInit+0x490>)
 8001796:	f001 fca1 	bl	80030dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800179a:	2330      	movs	r3, #48	@ 0x30
 800179c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b2:	2306      	movs	r3, #6
 80017b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80017bc:	4619      	mov	r1, r3
 80017be:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <HAL_SPI_MspInit+0x494>)
 80017c0:	f001 fc8c 	bl	80030dc <HAL_GPIO_Init>
}
 80017c4:	bf00      	nop
 80017c6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	46002000 	.word	0x46002000
 80017d4:	46020c00 	.word	0x46020c00
 80017d8:	42021800 	.word	0x42021800
 80017dc:	42020000 	.word	0x42020000
 80017e0:	42020400 	.word	0x42020400

080017e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0c0      	sub	sp, #256	@ 0x100
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	22c8      	movs	r2, #200	@ 0xc8
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f007 fdaf 	bl	8009368 <memset>
  if(huart->Instance==USART2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <HAL_UART_MspInit+0x1a4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d145      	bne.n	80018a0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001814:	f04f 0202 	mov.w	r2, #2
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001820:	2300      	movs	r3, #0
 8001822:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f003 f9f3 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001834:	f7ff fd66 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001838:	4b54      	ldr	r3, [pc, #336]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 800183a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800183e:	4a53      	ldr	r2, [pc, #332]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 8001840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001844:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001848:	4b50      	ldr	r3, [pc, #320]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 800184a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001856:	4b4d      	ldr	r3, [pc, #308]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 8001858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185c:	4a4b      	ldr	r2, [pc, #300]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001866:	4b49      	ldr	r3, [pc, #292]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 8001868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8001874:	2370      	movs	r3, #112	@ 0x70
 8001876:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188c:	2307      	movs	r3, #7
 800188e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001892:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001896:	4619      	mov	r1, r3
 8001898:	483d      	ldr	r0, [pc, #244]	@ (8001990 <HAL_UART_MspInit+0x1ac>)
 800189a:	f001 fc1f 	bl	80030dc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800189e:	e06e      	b.n	800197e <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001994 <HAL_UART_MspInit+0x1b0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d169      	bne.n	800197e <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018aa:	f04f 0204 	mov.w	r2, #4
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 f9a8 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_MspInit+0xea>
      Error_Handler();
 80018ca:	f7ff fd1b 	bl	8001304 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ce:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 80018d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018d4:	4a2d      	ldr	r2, [pc, #180]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 80018d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018da:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 80018e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 80018ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f2:	4a26      	ldr	r2, [pc, #152]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 80018fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 800190c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001910:	4a1e      	ldr	r2, [pc, #120]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800191a:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <HAL_UART_MspInit+0x1a8>)
 800191c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001928:	23a0      	movs	r3, #160	@ 0xa0
 800192a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001940:	2307      	movs	r3, #7
 8001942:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800194a:	4619      	mov	r1, r3
 800194c:	4812      	ldr	r0, [pc, #72]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 800194e:	f001 fbc5 	bl	80030dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001952:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001956:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800196c:	2307      	movs	r3, #7
 800196e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001972:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <HAL_UART_MspInit+0x1ac>)
 800197a:	f001 fbaf 	bl	80030dc <HAL_GPIO_Init>
}
 800197e:	bf00      	nop
 8001980:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40004400 	.word	0x40004400
 800198c:	46020c00 	.word	0x46020c00
 8001990:	42020c00 	.word	0x42020c00
 8001994:	40004800 	.word	0x40004800
 8001998:	42020000 	.word	0x42020000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 fa41 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}

080019fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f001 fd64 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f001 fd5d 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 8001a1a:	2004      	movs	r0, #4
 8001a1c:	f001 fd56 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8001a28:	2008      	movs	r0, #8
 8001a2a:	f001 fd4f 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8001a36:	2010      	movs	r0, #16
 8001a38:	f001 fd48 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8001a44:	2020      	movs	r0, #32
 8001a46:	f001 fd41 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8001a52:	2040      	movs	r0, #64	@ 0x40
 8001a54:	f001 fd3a 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8001a60:	2080      	movs	r0, #128	@ 0x80
 8001a62:	f001 fd33 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 8001a6e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a72:	f001 fd2b 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8001a7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a82:	f001 fd23 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8001a8e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a92:	f001 fd1b 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 8001a9e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001aa2:	f001 fd13 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 8001aae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ab2:	f001 fd0b 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001abe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ac2:	f001 fd03 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <GPDMA1_Channel0_IRQHandler+0x10>)
 8001ad2:	f000 fdf0 	bl	80026b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000374 	.word	0x20000374

08001ae0 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001ae6:	f000 fde6 	bl	80026b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200002fc 	.word	0x200002fc

08001af4 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001afa:	f000 fddc 	bl	80026b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200001f4 	.word	0x200001f4

08001b08 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <GPDMA1_Channel3_IRQHandler+0x10>)
 8001b0e:	f000 fdd2 	bl	80026b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000017c 	.word	0x2000017c

08001b1c <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <GPDMA1_Channel4_IRQHandler+0x10>)
 8001b22:	f000 fdc8 	bl	80026b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000104 	.word	0x20000104

08001b30 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001b36:	f000 fdbe 	bl	80026b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000008c 	.word	0x2000008c

08001b44 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <SPI2_IRQHandler+0x10>)
 8001b4a:	f006 f8e7 	bl	8007d1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000026c 	.word	0x2000026c

08001b58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e00a      	b.n	8001b80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b6a:	f3af 8000 	nop.w
 8001b6e:	4601      	mov	r1, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	b2ca      	uxtb	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf0      	blt.n	8001b6a <_read+0x12>
  }

  return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bba:	605a      	str	r2, [r3, #4]
  return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_isatty>:

int _isatty(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f007 fbea 	bl	8009404 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	@ (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200c0000 	.word	0x200c0000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	200008c4 	.word	0x200008c4
 8001c64:	20000a18 	.word	0x20000a18

08001c68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <SystemInit+0x68>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c72:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <SystemInit+0x68>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <SystemInit+0x6c>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <SystemInit+0x6c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <SystemInit+0x6c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <SystemInit+0x6c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <SystemInit+0x6c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd4 <SystemInit+0x6c>)
 8001c9a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001c9e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ca2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <SystemInit+0x6c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <SystemInit+0x6c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <SystemInit+0x6c>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <SystemInit+0x6c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <SystemInit+0x68>)
 8001cbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cc2:	609a      	str	r2, [r3, #8]
  #endif
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	46020c00 	.word	0x46020c00

08001cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d10 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cdc:	f7ff ffc4 	bl	8001c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ce0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ce2:	e003      	b.n	8001cec <LoopCopyDataInit>

08001ce4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ce6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ce8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cea:	3104      	adds	r1, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cec:	480a      	ldr	r0, [pc, #40]	@ (8001d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cf0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cf2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cf4:	d3f6      	bcc.n	8001ce4 <CopyDataInit>
	ldr	r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cf8:	e002      	b.n	8001d00 <LoopFillZerobss>

08001cfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cfc:	f842 3b04 	str.w	r3, [r2], #4

08001d00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <LoopForever+0x16>)
	cmp	r2, r3
 8001d02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d04:	d3f9      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d06:	f007 fb83 	bl	8009410 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0a:	f7fe fca7 	bl	800065c <main>

08001d0e <LoopForever>:

LoopForever:
    b LoopForever
 8001d0e:	e7fe      	b.n	8001d0e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d10:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d14:	0800a1f8 	.word	0x0800a1f8
	ldr	r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d1c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001d20:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001d24:	20000a18 	.word	0x20000a18

08001d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC1_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_Init+0x50>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <HAL_Init+0x50>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f98c 	bl	800205a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d42:	f002 fd89 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <HAL_Init+0x54>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <HAL_Init+0x58>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <HAL_Init+0x5c>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d5c:	2004      	movs	r0, #4
 8001d5e:	f000 f9d1 	bl	8002104 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d62:	200f      	movs	r0, #15
 8001d64:	f000 f812 	bl	8001d8c <HAL_InitTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e002      	b.n	8001d78 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d72:	f7ff facd 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	46020c00 	.word	0x46020c00
 8001d84:	0800a0b4 	.word	0x0800a0b4
 8001d88:	20000008 	.word	0x20000008

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d98:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <HAL_InitTick+0xdc>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e05c      	b.n	8001e5e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_InitTick+0xe0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d10c      	bne.n	8001dca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001db0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <HAL_InitTick+0xe4>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_InitTick+0xdc>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e037      	b.n	8001e3a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001dca:	f000 f9f3 	bl	80021b4 <HAL_SYSTICK_GetCLKSourceConfig>
 8001dce:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d023      	beq.n	8001e1e <HAL_InitTick+0x92>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d82d      	bhi.n	8001e38 <HAL_InitTick+0xac>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_InitTick+0x5e>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d00d      	beq.n	8001e04 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001de8:	e026      	b.n	8001e38 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_InitTick+0xe4>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <HAL_InitTick+0xdc>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001df8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	60fb      	str	r3, [r7, #12]
        break;
 8001e02:	e01a      	b.n	8001e3a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <HAL_InitTick+0xdc>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e12:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
        break;
 8001e1c:	e00d      	b.n	8001e3a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_InitTick+0xdc>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	60fb      	str	r3, [r7, #12]
        break;
 8001e36:	e000      	b.n	8001e3a <HAL_InitTick+0xae>
        break;
 8001e38:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f940 	bl	80020c0 <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e009      	b.n	8001e5e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e52:	f000 f90d 	bl	8002070 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001e56:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_InitTick+0xe8>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000010 	.word	0x20000010
 8001e6c:	e000e010 	.word	0xe000e010
 8001e70:	20000008 	.word	0x20000008
 8001e74:	2000000c 	.word	0x2000000c

08001e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	200008c8 	.word	0x200008c8

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	200008c8 	.word	0x200008c8

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <HAL_Delay+0x44>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000010 	.word	0x20000010

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4907      	ldr	r1, [pc, #28]	@ (8001f9c <__NVIC_EnableIRQ+0x38>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	@ (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	@ (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	@ 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	@ 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff4c 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800207e:	f7ff ff63 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 8002082:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	6978      	ldr	r0, [r7, #20]
 800208a:	f7ff ffb3 	bl	8001ff4 <NVIC_EncodePriority>
 800208e:	4602      	mov	r2, r0
 8002090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff82 	bl	8001fa0 <__NVIC_SetPriority>
}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff56 	bl	8001f64 <__NVIC_EnableIRQ>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00d      	b.n	80020f2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_SYSTICK_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_SYSTICK_Config+0x40>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_SYSTICK_Config+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <HAL_SYSTICK_Config+0x40>)
 80020ea:	f043 0303 	orr.w	r3, r3, #3
 80020ee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d844      	bhi.n	800219c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002112:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	0800213b 	.word	0x0800213b
 800211c:	08002159 	.word	0x08002159
 8002120:	0800217b 	.word	0x0800217b
 8002124:	0800219d 	.word	0x0800219d
 8002128:	0800212d 	.word	0x0800212d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800212c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6013      	str	r3, [r2, #0]
      break;
 8002138:	e031      	b.n	800219e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800213a:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1b      	ldr	r2, [pc, #108]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002146:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214c:	4a18      	ldr	r2, [pc, #96]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800214e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002152:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002156:	e022      	b.n	800219e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a13      	ldr	r2, [pc, #76]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800216e:	4a10      	ldr	r2, [pc, #64]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002170:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002178:	e011      	b.n	800219e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002190:	4a07      	ldr	r2, [pc, #28]	@ (80021b0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002192:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800219a:	e000      	b.n	800219e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800219c:	bf00      	nop
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010
 80021b0:	46020c00 	.word	0x46020c00

080021b4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80021c6:	2304      	movs	r3, #4
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	e021      	b.n	8002210 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80021d6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021de:	d011      	beq.n	8002204 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021e6:	d810      	bhi.n	800220a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021f4:	d003      	beq.n	80021fe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80021f6:	e008      	b.n	800220a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
        break;
 80021fc:	e008      	b.n	8002210 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80021fe:	2301      	movs	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
        break;
 8002202:	e005      	b.n	8002210 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002204:	2302      	movs	r3, #2
 8002206:	607b      	str	r3, [r7, #4]
        break;
 8002208:	e002      	b.n	8002210 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
        break;
 800220e:	bf00      	nop
    }
  }
  return systick_source;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010
 8002224:	46020c00 	.word	0x46020c00

08002228 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff fe36 	bl	8001ea0 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0f0      	b.n	8002422 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a79      	ldr	r2, [pc, #484]	@ (800242c <HAL_DMA_Init+0x204>)
 8002246:	4293      	cmp	r3, r2
 8002248:	f000 809f 	beq.w	800238a <HAL_DMA_Init+0x162>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a77      	ldr	r2, [pc, #476]	@ (8002430 <HAL_DMA_Init+0x208>)
 8002252:	4293      	cmp	r3, r2
 8002254:	f000 8099 	beq.w	800238a <HAL_DMA_Init+0x162>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a75      	ldr	r2, [pc, #468]	@ (8002434 <HAL_DMA_Init+0x20c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	f000 8093 	beq.w	800238a <HAL_DMA_Init+0x162>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a73      	ldr	r2, [pc, #460]	@ (8002438 <HAL_DMA_Init+0x210>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f000 808d 	beq.w	800238a <HAL_DMA_Init+0x162>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a71      	ldr	r2, [pc, #452]	@ (800243c <HAL_DMA_Init+0x214>)
 8002276:	4293      	cmp	r3, r2
 8002278:	f000 8087 	beq.w	800238a <HAL_DMA_Init+0x162>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6f      	ldr	r2, [pc, #444]	@ (8002440 <HAL_DMA_Init+0x218>)
 8002282:	4293      	cmp	r3, r2
 8002284:	f000 8081 	beq.w	800238a <HAL_DMA_Init+0x162>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6d      	ldr	r2, [pc, #436]	@ (8002444 <HAL_DMA_Init+0x21c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d07b      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6c      	ldr	r2, [pc, #432]	@ (8002448 <HAL_DMA_Init+0x220>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d076      	beq.n	800238a <HAL_DMA_Init+0x162>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6a      	ldr	r2, [pc, #424]	@ (800244c <HAL_DMA_Init+0x224>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d071      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a69      	ldr	r2, [pc, #420]	@ (8002450 <HAL_DMA_Init+0x228>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d06c      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a67      	ldr	r2, [pc, #412]	@ (8002454 <HAL_DMA_Init+0x22c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d067      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a66      	ldr	r2, [pc, #408]	@ (8002458 <HAL_DMA_Init+0x230>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d062      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a64      	ldr	r2, [pc, #400]	@ (800245c <HAL_DMA_Init+0x234>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d05d      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a63      	ldr	r2, [pc, #396]	@ (8002460 <HAL_DMA_Init+0x238>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d058      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a61      	ldr	r2, [pc, #388]	@ (8002464 <HAL_DMA_Init+0x23c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d053      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a60      	ldr	r2, [pc, #384]	@ (8002468 <HAL_DMA_Init+0x240>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d04e      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5e      	ldr	r2, [pc, #376]	@ (800246c <HAL_DMA_Init+0x244>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d049      	beq.n	800238a <HAL_DMA_Init+0x162>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5d      	ldr	r2, [pc, #372]	@ (8002470 <HAL_DMA_Init+0x248>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d044      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5b      	ldr	r2, [pc, #364]	@ (8002474 <HAL_DMA_Init+0x24c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d03f      	beq.n	800238a <HAL_DMA_Init+0x162>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5a      	ldr	r2, [pc, #360]	@ (8002478 <HAL_DMA_Init+0x250>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d03a      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a58      	ldr	r2, [pc, #352]	@ (800247c <HAL_DMA_Init+0x254>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d035      	beq.n	800238a <HAL_DMA_Init+0x162>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a57      	ldr	r2, [pc, #348]	@ (8002480 <HAL_DMA_Init+0x258>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d030      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a55      	ldr	r2, [pc, #340]	@ (8002484 <HAL_DMA_Init+0x25c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a54      	ldr	r2, [pc, #336]	@ (8002488 <HAL_DMA_Init+0x260>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d026      	beq.n	800238a <HAL_DMA_Init+0x162>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a52      	ldr	r2, [pc, #328]	@ (800248c <HAL_DMA_Init+0x264>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d021      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a51      	ldr	r2, [pc, #324]	@ (8002490 <HAL_DMA_Init+0x268>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01c      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_DMA_Init+0x26c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d017      	beq.n	800238a <HAL_DMA_Init+0x162>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_DMA_Init+0x270>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d012      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4c      	ldr	r2, [pc, #304]	@ (800249c <HAL_DMA_Init+0x274>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_DMA_Init+0x162>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4b      	ldr	r2, [pc, #300]	@ (80024a0 <HAL_DMA_Init+0x278>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d008      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a49      	ldr	r2, [pc, #292]	@ (80024a4 <HAL_DMA_Init+0x27c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <HAL_DMA_Init+0x162>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <HAL_DMA_Init+0x280>)
 8002388:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10e      	bne.n	80023bc <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0206 	orr.w	r2, r2, #6
 80023d2:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80023d4:	e00f      	b.n	80023f6 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80023d6:	f7ff fd63 	bl	8001ea0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d908      	bls.n	80023f6 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2210      	movs	r2, #16
 80023e8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2203      	movs	r2, #3
 80023ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e015      	b.n	8002422 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e8      	bne.n	80023d6 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fb25 	bl	8002a54 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020050 	.word	0x40020050
 8002430:	50020050 	.word	0x50020050
 8002434:	400200d0 	.word	0x400200d0
 8002438:	500200d0 	.word	0x500200d0
 800243c:	40020150 	.word	0x40020150
 8002440:	50020150 	.word	0x50020150
 8002444:	400201d0 	.word	0x400201d0
 8002448:	500201d0 	.word	0x500201d0
 800244c:	40020250 	.word	0x40020250
 8002450:	50020250 	.word	0x50020250
 8002454:	400202d0 	.word	0x400202d0
 8002458:	500202d0 	.word	0x500202d0
 800245c:	40020350 	.word	0x40020350
 8002460:	50020350 	.word	0x50020350
 8002464:	400203d0 	.word	0x400203d0
 8002468:	500203d0 	.word	0x500203d0
 800246c:	40020450 	.word	0x40020450
 8002470:	50020450 	.word	0x50020450
 8002474:	400204d0 	.word	0x400204d0
 8002478:	500204d0 	.word	0x500204d0
 800247c:	40020550 	.word	0x40020550
 8002480:	50020550 	.word	0x50020550
 8002484:	400205d0 	.word	0x400205d0
 8002488:	500205d0 	.word	0x500205d0
 800248c:	40020650 	.word	0x40020650
 8002490:	50020650 	.word	0x50020650
 8002494:	400206d0 	.word	0x400206d0
 8002498:	500206d0 	.word	0x500206d0
 800249c:	40020750 	.word	0x40020750
 80024a0:	50020750 	.word	0x50020750
 80024a4:	400207d0 	.word	0x400207d0
 80024a8:	500207d0 	.word	0x500207d0

080024ac <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e04f      	b.n	8002564 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA_Start_IT+0x26>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e048      	b.n	8002564 <HAL_DMA_Start_IT+0xb8>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d136      	bne.n	8002554 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fa84 	bl	8002a08 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800250e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002526:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800253e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e007      	b.n	8002564 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2240      	movs	r2, #64	@ 0x40
 8002558:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002574:	f7ff fc94 	bl	8001ea0 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e06b      	b.n	800265c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e05c      	b.n	800265c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0204 	orr.w	r2, r2, #4
 80025b0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2205      	movs	r2, #5
 80025b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80025ba:	e020      	b.n	80025fe <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80025bc:	f7ff fc70 	bl	8001ea0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d919      	bls.n	80025fe <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	f043 0210 	orr.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ee:	2201      	movs	r2, #1
 80025f0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e02e      	b.n	800265c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0d7      	beq.n	80025bc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0202 	orr.w	r2, r2, #2
 800261a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800262c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	2201      	movs	r2, #1
 8002648:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e019      	b.n	80026aa <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d004      	beq.n	800268c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e00e      	b.n	80026aa <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2204      	movs	r2, #4
 8002690:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80026c6:	f023 030f 	bic.w	r3, r3, #15
 80026ca:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	3b50      	subs	r3, #80	@ 0x50
 80026d6:	09db      	lsrs	r3, r3, #7
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2201      	movs	r2, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 813b 	beq.w	800296c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d011      	beq.n	8002728 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800271a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002732:	2b00      	cmp	r3, #0
 8002734:	d011      	beq.n	800275a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800274c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	f043 0202 	orr.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d011      	beq.n	800278c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800277e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	f043 0204 	orr.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d011      	beq.n	80027be <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027b0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	f043 0208 	orr.w	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04c      	beq.n	800289c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d045      	beq.n	800289c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002818:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b04      	cmp	r3, #4
 8002824:	d12e      	bne.n	8002884 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002834:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0202 	orr.w	r2, r2, #2
 8002844:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285e:	2201      	movs	r2, #1
 8002860:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d07a      	beq.n	8002970 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
        }

        return;
 8002882:	e075      	b.n	8002970 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2205      	movs	r2, #5
 8002888:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d039      	beq.n	800291e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d032      	beq.n	800291e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d012      	beq.n	80028ea <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d111      	bne.n	80028fc <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e4:	2201      	movs	r2, #1
 80028e6:	731a      	strb	r2, [r3, #12]
 80028e8:	e008      	b.n	80028fc <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002904:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	2b00      	cmp	r3, #0
 8002924:	d025      	beq.n	8002972 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0202 	orr.w	r2, r2, #2
 8002934:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294e:	2201      	movs	r2, #1
 8002950:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
 800296a:	e002      	b.n	8002972 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800296c:	bf00      	nop
 800296e:	e000      	b.n	8002972 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002970:	bf00      	nop
    }
  }
}
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e02b      	b.n	80029fc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80029ac:	f023 030f 	bic.w	r3, r3, #15
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ba:	3b50      	subs	r3, #80	@ 0x50
 80029bc:	09db      	lsrs	r3, r3, #7
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2201      	movs	r2, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d012      	beq.n	80029fa <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	f003 0311 	and.w	r3, r3, #17
 80029da:	2b11      	cmp	r3, #17
 80029dc:	d106      	bne.n	80029ec <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e006      	b.n	80029fa <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	401a      	ands	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b291      	uxth	r1, r2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002a34:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a53      	ldr	r2, [pc, #332]	@ (8002be0 <DMA_Init+0x18c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	f000 80a0 	beq.w	8002bda <DMA_Init+0x186>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a51      	ldr	r2, [pc, #324]	@ (8002be4 <DMA_Init+0x190>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f000 809a 	beq.w	8002bda <DMA_Init+0x186>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4f      	ldr	r2, [pc, #316]	@ (8002be8 <DMA_Init+0x194>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	f000 8094 	beq.w	8002bda <DMA_Init+0x186>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a4d      	ldr	r2, [pc, #308]	@ (8002bec <DMA_Init+0x198>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f000 808e 	beq.w	8002bda <DMA_Init+0x186>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf0 <DMA_Init+0x19c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	f000 8088 	beq.w	8002bda <DMA_Init+0x186>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a49      	ldr	r2, [pc, #292]	@ (8002bf4 <DMA_Init+0x1a0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	f000 8082 	beq.w	8002bda <DMA_Init+0x186>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a47      	ldr	r2, [pc, #284]	@ (8002bf8 <DMA_Init+0x1a4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d07c      	beq.n	8002bda <DMA_Init+0x186>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a45      	ldr	r2, [pc, #276]	@ (8002bfc <DMA_Init+0x1a8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d077      	beq.n	8002bda <DMA_Init+0x186>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a44      	ldr	r2, [pc, #272]	@ (8002c00 <DMA_Init+0x1ac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d072      	beq.n	8002bda <DMA_Init+0x186>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a42      	ldr	r2, [pc, #264]	@ (8002c04 <DMA_Init+0x1b0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d06d      	beq.n	8002bda <DMA_Init+0x186>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a41      	ldr	r2, [pc, #260]	@ (8002c08 <DMA_Init+0x1b4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d068      	beq.n	8002bda <DMA_Init+0x186>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c0c <DMA_Init+0x1b8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d063      	beq.n	8002bda <DMA_Init+0x186>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a3e      	ldr	r2, [pc, #248]	@ (8002c10 <DMA_Init+0x1bc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d05e      	beq.n	8002bda <DMA_Init+0x186>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3c      	ldr	r2, [pc, #240]	@ (8002c14 <DMA_Init+0x1c0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d059      	beq.n	8002bda <DMA_Init+0x186>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c18 <DMA_Init+0x1c4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d054      	beq.n	8002bda <DMA_Init+0x186>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a39      	ldr	r2, [pc, #228]	@ (8002c1c <DMA_Init+0x1c8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d04f      	beq.n	8002bda <DMA_Init+0x186>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a38      	ldr	r2, [pc, #224]	@ (8002c20 <DMA_Init+0x1cc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <DMA_Init+0x186>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a36      	ldr	r2, [pc, #216]	@ (8002c24 <DMA_Init+0x1d0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <DMA_Init+0x186>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a35      	ldr	r2, [pc, #212]	@ (8002c28 <DMA_Init+0x1d4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <DMA_Init+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a33      	ldr	r2, [pc, #204]	@ (8002c2c <DMA_Init+0x1d8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <DMA_Init+0x186>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a32      	ldr	r2, [pc, #200]	@ (8002c30 <DMA_Init+0x1dc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <DMA_Init+0x186>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a30      	ldr	r2, [pc, #192]	@ (8002c34 <DMA_Init+0x1e0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <DMA_Init+0x186>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c38 <DMA_Init+0x1e4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <DMA_Init+0x186>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2d      	ldr	r2, [pc, #180]	@ (8002c3c <DMA_Init+0x1e8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <DMA_Init+0x186>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c40 <DMA_Init+0x1ec>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <DMA_Init+0x186>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2a      	ldr	r2, [pc, #168]	@ (8002c44 <DMA_Init+0x1f0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <DMA_Init+0x186>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a29      	ldr	r2, [pc, #164]	@ (8002c48 <DMA_Init+0x1f4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <DMA_Init+0x186>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a27      	ldr	r2, [pc, #156]	@ (8002c4c <DMA_Init+0x1f8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <DMA_Init+0x186>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a26      	ldr	r2, [pc, #152]	@ (8002c50 <DMA_Init+0x1fc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <DMA_Init+0x186>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a24      	ldr	r2, [pc, #144]	@ (8002c54 <DMA_Init+0x200>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <DMA_Init+0x186>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a23      	ldr	r2, [pc, #140]	@ (8002c58 <DMA_Init+0x204>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <DMA_Init+0x186>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a21      	ldr	r2, [pc, #132]	@ (8002c5c <DMA_Init+0x208>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d142      	bne.n	8002c60 <DMA_Init+0x20c>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e041      	b.n	8002c62 <DMA_Init+0x20e>
 8002bde:	bf00      	nop
 8002be0:	40020050 	.word	0x40020050
 8002be4:	50020050 	.word	0x50020050
 8002be8:	400200d0 	.word	0x400200d0
 8002bec:	500200d0 	.word	0x500200d0
 8002bf0:	40020150 	.word	0x40020150
 8002bf4:	50020150 	.word	0x50020150
 8002bf8:	400201d0 	.word	0x400201d0
 8002bfc:	500201d0 	.word	0x500201d0
 8002c00:	40020250 	.word	0x40020250
 8002c04:	50020250 	.word	0x50020250
 8002c08:	400202d0 	.word	0x400202d0
 8002c0c:	500202d0 	.word	0x500202d0
 8002c10:	40020350 	.word	0x40020350
 8002c14:	50020350 	.word	0x50020350
 8002c18:	400203d0 	.word	0x400203d0
 8002c1c:	500203d0 	.word	0x500203d0
 8002c20:	40020450 	.word	0x40020450
 8002c24:	50020450 	.word	0x50020450
 8002c28:	400204d0 	.word	0x400204d0
 8002c2c:	500204d0 	.word	0x500204d0
 8002c30:	40020550 	.word	0x40020550
 8002c34:	50020550 	.word	0x50020550
 8002c38:	400205d0 	.word	0x400205d0
 8002c3c:	500205d0 	.word	0x500205d0
 8002c40:	40020650 	.word	0x40020650
 8002c44:	50020650 	.word	0x50020650
 8002c48:	400206d0 	.word	0x400206d0
 8002c4c:	500206d0 	.word	0x500206d0
 8002c50:	40020750 	.word	0x40020750
 8002c54:	50020750 	.word	0x50020750
 8002c58:	400207d0 	.word	0x400207d0
 8002c5c:	500207d0 	.word	0x500207d0
 8002c60:	2300      	movs	r3, #0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	051b      	lsls	r3, r3, #20
 8002c72:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c76:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002c84:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cbe:	f040 80b0 	bne.w	8002e22 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a82      	ldr	r2, [pc, #520]	@ (8002ed0 <DMA_Init+0x47c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	f000 80a0 	beq.w	8002e0e <DMA_Init+0x3ba>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a80      	ldr	r2, [pc, #512]	@ (8002ed4 <DMA_Init+0x480>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	f000 809a 	beq.w	8002e0e <DMA_Init+0x3ba>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed8 <DMA_Init+0x484>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	f000 8094 	beq.w	8002e0e <DMA_Init+0x3ba>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7c      	ldr	r2, [pc, #496]	@ (8002edc <DMA_Init+0x488>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	f000 808e 	beq.w	8002e0e <DMA_Init+0x3ba>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ee0 <DMA_Init+0x48c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	f000 8088 	beq.w	8002e0e <DMA_Init+0x3ba>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a78      	ldr	r2, [pc, #480]	@ (8002ee4 <DMA_Init+0x490>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	f000 8082 	beq.w	8002e0e <DMA_Init+0x3ba>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a76      	ldr	r2, [pc, #472]	@ (8002ee8 <DMA_Init+0x494>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d07c      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a74      	ldr	r2, [pc, #464]	@ (8002eec <DMA_Init+0x498>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d077      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a73      	ldr	r2, [pc, #460]	@ (8002ef0 <DMA_Init+0x49c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d072      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a71      	ldr	r2, [pc, #452]	@ (8002ef4 <DMA_Init+0x4a0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d06d      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a70      	ldr	r2, [pc, #448]	@ (8002ef8 <DMA_Init+0x4a4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d068      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6e      	ldr	r2, [pc, #440]	@ (8002efc <DMA_Init+0x4a8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d063      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8002f00 <DMA_Init+0x4ac>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d05e      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a6b      	ldr	r2, [pc, #428]	@ (8002f04 <DMA_Init+0x4b0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d059      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6a      	ldr	r2, [pc, #424]	@ (8002f08 <DMA_Init+0x4b4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d054      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a68      	ldr	r2, [pc, #416]	@ (8002f0c <DMA_Init+0x4b8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04f      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a67      	ldr	r2, [pc, #412]	@ (8002f10 <DMA_Init+0x4bc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a65      	ldr	r2, [pc, #404]	@ (8002f14 <DMA_Init+0x4c0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a64      	ldr	r2, [pc, #400]	@ (8002f18 <DMA_Init+0x4c4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a62      	ldr	r2, [pc, #392]	@ (8002f1c <DMA_Init+0x4c8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a61      	ldr	r2, [pc, #388]	@ (8002f20 <DMA_Init+0x4cc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5f      	ldr	r2, [pc, #380]	@ (8002f24 <DMA_Init+0x4d0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5e      	ldr	r2, [pc, #376]	@ (8002f28 <DMA_Init+0x4d4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f2c <DMA_Init+0x4d8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f30 <DMA_Init+0x4dc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a59      	ldr	r2, [pc, #356]	@ (8002f34 <DMA_Init+0x4e0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <DMA_Init+0x4e4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a56      	ldr	r2, [pc, #344]	@ (8002f3c <DMA_Init+0x4e8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a55      	ldr	r2, [pc, #340]	@ (8002f40 <DMA_Init+0x4ec>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a53      	ldr	r2, [pc, #332]	@ (8002f44 <DMA_Init+0x4f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a52      	ldr	r2, [pc, #328]	@ (8002f48 <DMA_Init+0x4f4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <DMA_Init+0x3ba>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a50      	ldr	r2, [pc, #320]	@ (8002f4c <DMA_Init+0x4f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <DMA_Init+0x3be>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <DMA_Init+0x3c0>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e008      	b.n	8002e34 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e2a:	d103      	bne.n	8002e34 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e32:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e3a:	4b45      	ldr	r3, [pc, #276]	@ (8002f50 <DMA_Init+0x4fc>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a36      	ldr	r2, [pc, #216]	@ (8002f30 <DMA_Init+0x4dc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d022      	beq.n	8002ea0 <DMA_Init+0x44c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a35      	ldr	r2, [pc, #212]	@ (8002f34 <DMA_Init+0x4e0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d01d      	beq.n	8002ea0 <DMA_Init+0x44c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <DMA_Init+0x4e4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <DMA_Init+0x44c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a32      	ldr	r2, [pc, #200]	@ (8002f3c <DMA_Init+0x4e8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <DMA_Init+0x44c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a30      	ldr	r2, [pc, #192]	@ (8002f40 <DMA_Init+0x4ec>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <DMA_Init+0x44c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2f      	ldr	r2, [pc, #188]	@ (8002f44 <DMA_Init+0x4f0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <DMA_Init+0x44c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2d      	ldr	r2, [pc, #180]	@ (8002f48 <DMA_Init+0x4f4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <DMA_Init+0x44c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f4c <DMA_Init+0x4f8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <DMA_Init+0x450>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <DMA_Init+0x452>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40020050 	.word	0x40020050
 8002ed4:	50020050 	.word	0x50020050
 8002ed8:	400200d0 	.word	0x400200d0
 8002edc:	500200d0 	.word	0x500200d0
 8002ee0:	40020150 	.word	0x40020150
 8002ee4:	50020150 	.word	0x50020150
 8002ee8:	400201d0 	.word	0x400201d0
 8002eec:	500201d0 	.word	0x500201d0
 8002ef0:	40020250 	.word	0x40020250
 8002ef4:	50020250 	.word	0x50020250
 8002ef8:	400202d0 	.word	0x400202d0
 8002efc:	500202d0 	.word	0x500202d0
 8002f00:	40020350 	.word	0x40020350
 8002f04:	50020350 	.word	0x50020350
 8002f08:	400203d0 	.word	0x400203d0
 8002f0c:	500203d0 	.word	0x500203d0
 8002f10:	40020450 	.word	0x40020450
 8002f14:	50020450 	.word	0x50020450
 8002f18:	400204d0 	.word	0x400204d0
 8002f1c:	500204d0 	.word	0x500204d0
 8002f20:	40020550 	.word	0x40020550
 8002f24:	50020550 	.word	0x50020550
 8002f28:	400205d0 	.word	0x400205d0
 8002f2c:	500205d0 	.word	0x500205d0
 8002f30:	40020650 	.word	0x40020650
 8002f34:	50020650 	.word	0x50020650
 8002f38:	400206d0 	.word	0x400206d0
 8002f3c:	500206d0 	.word	0x500206d0
 8002f40:	40020750 	.word	0x40020750
 8002f44:	50020750 	.word	0x50020750
 8002f48:	400207d0 	.word	0x400207d0
 8002f4c:	500207d0 	.word	0x500207d0
 8002f50:	3cc03180 	.word	0x3cc03180

08002f54 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_DMAEx_List_Start_IT+0x16>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e082      	b.n	8003074 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f74:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f80:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d005      	beq.n	8002f94 <HAL_DMAEx_List_Start_IT+0x40>
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d16a      	bne.n	8003064 <HAL_DMAEx_List_Start_IT+0x110>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d067      	beq.n	8003064 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d157      	bne.n	8003050 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_DMAEx_List_Start_IT+0x5a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e062      	b.n	8003074 <HAL_DMAEx_List_Start_IT+0x120>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002fe2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003012:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f107 010c 	add.w	r1, r7, #12
 800301e:	2200      	movs	r2, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f82b 	bl	800307c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	0c0b      	lsrs	r3, r1, #16
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003044:	4013      	ands	r3, r2
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e007      	b.n	8003074 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2240      	movs	r2, #64	@ 0x40
 8003068:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00c      	beq.n	80030ae <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4a0d      	ldr	r2, [pc, #52]	@ (80030d4 <DMA_List_GetCLLRNodeInfo+0x58>)
 800309e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00f      	beq.n	80030c6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2207      	movs	r2, #7
 80030aa:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80030ac:	e00b      	b.n	80030c6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80030b8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2205      	movs	r2, #5
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	fe010000 	.word	0xfe010000
 80030d8:	f8010000 	.word	0xf8010000

080030dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030ee:	e1c2      	b.n	8003476 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2101      	movs	r1, #1
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	4013      	ands	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 81b2 	beq.w	8003470 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a55      	ldr	r2, [pc, #340]	@ (8003264 <HAL_GPIO_Init+0x188>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d15d      	bne.n	80031d0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800311a:	2201      	movs	r2, #1
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	4013      	ands	r3, r2
 8003128:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	4313      	orrs	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003144:	4a48      	ldr	r2, [pc, #288]	@ (8003268 <HAL_GPIO_Init+0x18c>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800314c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800314e:	4a46      	ldr	r2, [pc, #280]	@ (8003268 <HAL_GPIO_Init+0x18c>)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	08da      	lsrs	r2, r3, #3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	3208      	adds	r2, #8
 8003162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003166:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	4013      	ands	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	220b      	movs	r2, #11
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	4313      	orrs	r3, r2
 8003190:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	08da      	lsrs	r2, r3, #3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3208      	adds	r2, #8
 800319a:	69f9      	ldr	r1, [r7, #28]
 800319c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2202      	movs	r2, #2
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e067      	b.n	80032a0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x104>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b12      	cmp	r3, #18
 80031de:	d145      	bne.n	800326c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	4013      	ands	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	4313      	orrs	r3, r2
 800321c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69f9      	ldr	r1, [r7, #28]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	4013      	ands	r3, r2
 8003242:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e01e      	b.n	80032a0 <HAL_GPIO_Init+0x1c4>
 8003262:	bf00      	nop
 8003264:	46020000 	.word	0x46020000
 8003268:	0800a10c 	.word	0x0800a10c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	4013      	ands	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0203 	and.w	r2, r3, #3
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	4313      	orrs	r3, r2
 8003298:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d00b      	beq.n	80032c0 <HAL_GPIO_Init+0x1e4>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d007      	beq.n	80032c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032b4:	2b11      	cmp	r3, #17
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b12      	cmp	r3, #18
 80032be:	d130      	bne.n	8003322 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80032f6:	2201      	movs	r2, #1
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	4013      	ands	r3, r2
 8003304:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f003 0201 	and.w	r2, r3, #1
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	4313      	orrs	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d107      	bne.n	800333a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800332e:	2b03      	cmp	r3, #3
 8003330:	d11b      	bne.n	800336a <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d017      	beq.n	800336a <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	4013      	ands	r3, r2
 8003350:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	4313      	orrs	r3, r2
 8003362:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d07c      	beq.n	8003470 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003376:	4a47      	ldr	r2, [pc, #284]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3318      	adds	r3, #24
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	4013      	ands	r3, r2
 8003398:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0a9a      	lsrs	r2, r3, #10
 800339e:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <HAL_GPIO_Init+0x3bc>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	f002 0203 	and.w	r2, r2, #3
 80033a8:	00d2      	lsls	r2, r2, #3
 80033aa:	4093      	lsls	r3, r2
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80033b2:	4938      	ldr	r1, [pc, #224]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3318      	adds	r3, #24
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80033c0:	4b34      	ldr	r3, [pc, #208]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80033ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800340e:	4a21      	ldr	r2, [pc, #132]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003414:	4b1f      	ldr	r3, [pc, #124]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	4013      	ands	r3, r2
 8003424:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800343a:	4a16      	ldr	r2, [pc, #88]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003442:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 8003444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003448:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43db      	mvns	r3, r3
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	4013      	ands	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003468:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <HAL_GPIO_Init+0x3b8>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3301      	adds	r3, #1
 8003474:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	f47f ae35 	bne.w	80030f0 <HAL_GPIO_Init+0x14>
  }
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	3724      	adds	r7, #36	@ 0x24
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	46022000 	.word	0x46022000
 8003498:	002f7f7f 	.word	0x002f7f7f

0800349c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
 80034a8:	4613      	mov	r3, r2
 80034aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ac:	787b      	ldrb	r3, [r7, #1]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80034b8:	e002      	b.n	80034c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80034d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80034e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f814 	bl	8003518 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80034f0:	4b08      	ldr	r3, [pc, #32]	@ (8003514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d006      	beq.n	800350a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80034fc:	4a05      	ldr	r2, [pc, #20]	@ (8003514 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f812 	bl	800352e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	46022000 	.word	0x46022000

08003518 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800354c:	4b39      	ldr	r3, [pc, #228]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003554:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d10b      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003564:	d905      	bls.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003566:	4b33      	ldr	r3, [pc, #204]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a32      	ldr	r2, [pc, #200]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003570:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e057      	b.n	8003626 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357c:	d90a      	bls.n	8003594 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800357e:	4b2d      	ldr	r3, [pc, #180]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4313      	orrs	r3, r2
 800358a:	4a2a      	ldr	r2, [pc, #168]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003590:	60d3      	str	r3, [r2, #12]
 8003592:	e007      	b.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003594:	4b27      	ldr	r3, [pc, #156]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800359c:	4925      	ldr	r1, [pc, #148]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035a4:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a24      	ldr	r2, [pc, #144]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	2232      	movs	r2, #50	@ 0x32
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	4a21      	ldr	r2, [pc, #132]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035c2:	e002      	b.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x98>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f3      	bne.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01b      	beq.n	800361a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035e2:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a15      	ldr	r2, [pc, #84]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	2232      	movs	r2, #50	@ 0x32
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	4a11      	ldr	r2, [pc, #68]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003600:	e002      	b.n	8003608 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b01      	subs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003608:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f3      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e000      	b.n	8003626 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	46020800 	.word	0x46020800
 8003638:	20000008 	.word	0x20000008
 800363c:	10624dd3 	.word	0x10624dd3

08003640 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003644:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <HAL_PWREx_GetVoltageRange+0x18>)
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	46020800 	.word	0x46020800

0800365c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366a:	6113      	str	r3, [r2, #16]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	46020800 	.word	0x46020800

0800367c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003686:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800368a:	6113      	str	r3, [r2, #16]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	46020800 	.word	0x46020800

0800369c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_PWREx_EnableVddA+0x1c>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4a04      	ldr	r2, [pc, #16]	@ (80036b8 <HAL_PWREx_EnableVddA+0x1c>)
 80036a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036aa:	6113      	str	r3, [r2, #16]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	46020800 	.word	0x46020800

080036bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08e      	sub	sp, #56	@ 0x38
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f000 bec8 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d6:	4b99      	ldr	r3, [pc, #612]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e0:	4b96      	ldr	r3, [pc, #600]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 816c 	beq.w	80039d0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_RCC_OscConfig+0x52>
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	2b0c      	cmp	r3, #12
 8003702:	f040 80de 	bne.w	80038c2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 80da 	bne.w	80038c2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f000 bea5 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003720:	4b86      	ldr	r3, [pc, #536]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <HAL_RCC_OscConfig+0x7a>
 800372c:	4b83      	ldr	r3, [pc, #524]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003734:	e005      	b.n	8003742 <HAL_RCC_OscConfig+0x86>
 8003736:	4b81      	ldr	r3, [pc, #516]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003742:	4293      	cmp	r3, r2
 8003744:	d255      	bcs.n	80037f2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	4618      	mov	r0, r3
 8003752:	f001 f9d9 	bl	8004b08 <RCC_SetFlashLatencyFromMSIRange>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f000 be82 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003762:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	4a75      	ldr	r2, [pc, #468]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003768:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800376c:	6093      	str	r3, [r2, #8]
 800376e:	4b73      	ldr	r3, [pc, #460]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	4970      	ldr	r1, [pc, #448]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003788:	d309      	bcc.n	800379e <HAL_RCC_OscConfig+0xe2>
 800378a:	4b6c      	ldr	r3, [pc, #432]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f023 021f 	bic.w	r2, r3, #31
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4969      	ldr	r1, [pc, #420]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003798:	4313      	orrs	r3, r2
 800379a:	60cb      	str	r3, [r1, #12]
 800379c:	e07e      	b.n	800389c <HAL_RCC_OscConfig+0x1e0>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da0a      	bge.n	80037bc <HAL_RCC_OscConfig+0x100>
 80037a6:	4b65      	ldr	r3, [pc, #404]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	015b      	lsls	r3, r3, #5
 80037b4:	4961      	ldr	r1, [pc, #388]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60cb      	str	r3, [r1, #12]
 80037ba:	e06f      	b.n	800389c <HAL_RCC_OscConfig+0x1e0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c4:	d30a      	bcc.n	80037dc <HAL_RCC_OscConfig+0x120>
 80037c6:	4b5d      	ldr	r3, [pc, #372]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	029b      	lsls	r3, r3, #10
 80037d4:	4959      	ldr	r1, [pc, #356]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60cb      	str	r3, [r1, #12]
 80037da:	e05f      	b.n	800389c <HAL_RCC_OscConfig+0x1e0>
 80037dc:	4b57      	ldr	r3, [pc, #348]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	03db      	lsls	r3, r3, #15
 80037ea:	4954      	ldr	r1, [pc, #336]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
 80037f0:	e054      	b.n	800389c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80037f2:	4b52      	ldr	r3, [pc, #328]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4a51      	ldr	r2, [pc, #324]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80037f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037fc:	6093      	str	r3, [r2, #8]
 80037fe:	4b4f      	ldr	r3, [pc, #316]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	494c      	ldr	r1, [pc, #304]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003818:	d309      	bcc.n	800382e <HAL_RCC_OscConfig+0x172>
 800381a:	4b48      	ldr	r3, [pc, #288]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f023 021f 	bic.w	r2, r3, #31
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4945      	ldr	r1, [pc, #276]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003828:	4313      	orrs	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
 800382c:	e028      	b.n	8003880 <HAL_RCC_OscConfig+0x1c4>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	da0a      	bge.n	800384c <HAL_RCC_OscConfig+0x190>
 8003836:	4b41      	ldr	r3, [pc, #260]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	015b      	lsls	r3, r3, #5
 8003844:	493d      	ldr	r1, [pc, #244]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003846:	4313      	orrs	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
 800384a:	e019      	b.n	8003880 <HAL_RCC_OscConfig+0x1c4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003854:	d30a      	bcc.n	800386c <HAL_RCC_OscConfig+0x1b0>
 8003856:	4b39      	ldr	r3, [pc, #228]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	4935      	ldr	r1, [pc, #212]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003866:	4313      	orrs	r3, r2
 8003868:	60cb      	str	r3, [r1, #12]
 800386a:	e009      	b.n	8003880 <HAL_RCC_OscConfig+0x1c4>
 800386c:	4b33      	ldr	r3, [pc, #204]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	03db      	lsls	r3, r3, #15
 800387a:	4930      	ldr	r1, [pc, #192]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800387c:	4313      	orrs	r3, r2
 800387e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f93c 	bl	8004b08 <RCC_SetFlashLatencyFromMSIRange>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f000 bde5 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800389c:	f001 f8de 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038a0:	4b27      	ldr	r3, [pc, #156]	@ (8003940 <HAL_RCC_OscConfig+0x284>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fa71 	bl	8001d8c <HAL_InitTick>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80038b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 808a 	beq.w	80039ce <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80038ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038be:	f000 bdd2 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d066      	beq.n	8003998 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80038ca:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038d6:	f7fe fae3 	bl	8001ea0 <HAL_GetTick>
 80038da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038dc:	e009      	b.n	80038f2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038de:	f7fe fadf 	bl	8001ea0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d902      	bls.n	80038f2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	f000 bdba 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ef      	beq.n	80038de <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038fe:	4b0f      	ldr	r3, [pc, #60]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4a0e      	ldr	r2, [pc, #56]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003904:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003908:	6093      	str	r3, [r2, #8]
 800390a:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	4909      	ldr	r1, [pc, #36]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003918:	4313      	orrs	r3, r2
 800391a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003924:	d30e      	bcc.n	8003944 <HAL_RCC_OscConfig+0x288>
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f023 021f 	bic.w	r2, r3, #31
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4902      	ldr	r1, [pc, #8]	@ (800393c <HAL_RCC_OscConfig+0x280>)
 8003934:	4313      	orrs	r3, r2
 8003936:	60cb      	str	r3, [r1, #12]
 8003938:	e04a      	b.n	80039d0 <HAL_RCC_OscConfig+0x314>
 800393a:	bf00      	nop
 800393c:	46020c00 	.word	0x46020c00
 8003940:	2000000c 	.word	0x2000000c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	da0a      	bge.n	8003962 <HAL_RCC_OscConfig+0x2a6>
 800394c:	4b98      	ldr	r3, [pc, #608]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	015b      	lsls	r3, r3, #5
 800395a:	4995      	ldr	r1, [pc, #596]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
 8003960:	e036      	b.n	80039d0 <HAL_RCC_OscConfig+0x314>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396a:	d30a      	bcc.n	8003982 <HAL_RCC_OscConfig+0x2c6>
 800396c:	4b90      	ldr	r3, [pc, #576]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	029b      	lsls	r3, r3, #10
 800397a:	498d      	ldr	r1, [pc, #564]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
 8003980:	e026      	b.n	80039d0 <HAL_RCC_OscConfig+0x314>
 8003982:	4b8b      	ldr	r3, [pc, #556]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	03db      	lsls	r3, r3, #15
 8003990:	4987      	ldr	r1, [pc, #540]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
 8003996:	e01b      	b.n	80039d0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003998:	4b85      	ldr	r3, [pc, #532]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a84      	ldr	r2, [pc, #528]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039a4:	f7fe fa7c 	bl	8001ea0 <HAL_GetTick>
 80039a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80039aa:	e009      	b.n	80039c0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ac:	f7fe fa78 	bl	8001ea0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d902      	bls.n	80039c0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	f000 bd53 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80039c0:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ef      	bne.n	80039ac <HAL_RCC_OscConfig+0x2f0>
 80039cc:	e000      	b.n	80039d0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80039ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 808b 	beq.w	8003af4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_OscConfig+0x334>
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d17d      	bne.n	8003af4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f000 bd34 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x35a>
 8003a08:	4b69      	ldr	r3, [pc, #420]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a68      	ldr	r2, [pc, #416]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e041      	b.n	8003a9a <HAL_RCC_OscConfig+0x3de>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1e:	d112      	bne.n	8003a46 <HAL_RCC_OscConfig+0x38a>
 8003a20:	4b63      	ldr	r3, [pc, #396]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a62      	ldr	r2, [pc, #392]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b60      	ldr	r3, [pc, #384]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e029      	b.n	8003a9a <HAL_RCC_OscConfig+0x3de>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003a4e:	d112      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3ba>
 8003a50:	4b57      	ldr	r3, [pc, #348]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a56      	ldr	r2, [pc, #344]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b54      	ldr	r3, [pc, #336]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a53      	ldr	r2, [pc, #332]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b51      	ldr	r3, [pc, #324]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a50      	ldr	r2, [pc, #320]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e011      	b.n	8003a9a <HAL_RCC_OscConfig+0x3de>
 8003a76:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b48      	ldr	r3, [pc, #288]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a47      	ldr	r2, [pc, #284]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d014      	beq.n	8003acc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003aa2:	f7fe f9fd 	bl	8001ea0 <HAL_GetTick>
 8003aa6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa8:	e009      	b.n	8003abe <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aaa:	f7fe f9f9 	bl	8001ea0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	@ 0x64
 8003ab6:	d902      	bls.n	8003abe <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	f000 bcd4 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003abe:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ef      	beq.n	8003aaa <HAL_RCC_OscConfig+0x3ee>
 8003aca:	e013      	b.n	8003af4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003acc:	f7fe f9e8 	bl	8001ea0 <HAL_GetTick>
 8003ad0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad4:	f7fe f9e4 	bl	8001ea0 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d902      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	f000 bcbf 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae8:	4b31      	ldr	r3, [pc, #196]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ef      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05f      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d005      	beq.n	8003b12 <HAL_RCC_OscConfig+0x456>
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d114      	bne.n	8003b36 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d111      	bne.n	8003b36 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f000 bca3 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b20:	4b23      	ldr	r3, [pc, #140]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	4920      	ldr	r1, [pc, #128]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b34:	e044      	b.n	8003bc0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d024      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b48:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b4a:	f7fe f9a9 	bl	8001ea0 <HAL_GetTick>
 8003b4e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b50:	e009      	b.n	8003b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe f9a5 	bl	8001ea0 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d902      	bls.n	8003b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	f000 bc80 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b66:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ef      	beq.n	8003b52 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b72:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	490b      	ldr	r1, [pc, #44]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
 8003b86:	e01b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003b88:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a08      	ldr	r2, [pc, #32]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f4>)
 8003b8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b94:	f7fe f984 	bl	8001ea0 <HAL_GetTick>
 8003b98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7fe f980 	bl	8001ea0 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d904      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	f000 bc5b 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
 8003bb0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb4:	4baf      	ldr	r3, [pc, #700]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ed      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80c8 	beq.w	8003d5e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd4:	4ba7      	ldr	r3, [pc, #668]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d111      	bne.n	8003c06 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4ba4      	ldr	r3, [pc, #656]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be8:	4aa2      	ldr	r2, [pc, #648]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003bf2:	4ba0      	ldr	r3, [pc, #640]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c06:	4b9c      	ldr	r3, [pc, #624]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d119      	bne.n	8003c46 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c12:	4b99      	ldr	r3, [pc, #612]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c16:	4a98      	ldr	r2, [pc, #608]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe f93f 	bl	8001ea0 <HAL_GetTick>
 8003c22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c24:	e009      	b.n	8003c3a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe f93b 	bl	8001ea0 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d902      	bls.n	8003c3a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	f000 bc16 	b.w	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ef      	beq.n	8003c26 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d05f      	beq.n	8003d0e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003c4e:	4b89      	ldr	r3, [pc, #548]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c54:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d037      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e3f4      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003c86:	4b7b      	ldr	r3, [pc, #492]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c8c:	4a79      	ldr	r2, [pc, #484]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003c8e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003c92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003c96:	f7fe f903 	bl	8001ea0 <HAL_GetTick>
 8003c9a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fe f8ff 	bl	8001ea0 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e3da      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003cb0:	4b70      	ldr	r3, [pc, #448]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ef      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cc4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	4969      	ldr	r1, [pc, #420]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003cd4:	4b67      	ldr	r3, [pc, #412]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cda:	4a66      	ldr	r2, [pc, #408]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003cdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003ce4:	f7fe f8dc 	bl	8001ea0 <HAL_GetTick>
 8003ce8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fe f8d8 	bl	8001ea0 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e3b3      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ef      	beq.n	8003cec <HAL_RCC_OscConfig+0x630>
 8003d0c:	e01b      	b.n	8003d46 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003d0e:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d14:	4a57      	ldr	r2, [pc, #348]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d16:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d1e:	f7fe f8bf 	bl	8001ea0 <HAL_GetTick>
 8003d22:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fe f8bb 	bl	8001ea0 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e396      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d38:	4b4e      	ldr	r3, [pc, #312]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ef      	bne.n	8003d26 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d46:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b49      	ldr	r3, [pc, #292]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d54:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d56:	f023 0304 	bic.w	r3, r3, #4
 8003d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8111 	beq.w	8003f8e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	4b40      	ldr	r3, [pc, #256]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d111      	bne.n	8003da4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b3c      	ldr	r3, [pc, #240]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d86:	4a3b      	ldr	r2, [pc, #236]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d90:	4b38      	ldr	r3, [pc, #224]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003da4:	4b34      	ldr	r3, [pc, #208]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d118      	bne.n	8003de2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003db0:	4b31      	ldr	r3, [pc, #196]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	4a30      	ldr	r2, [pc, #192]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbc:	f7fe f870 	bl	8001ea0 <HAL_GetTick>
 8003dc0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc4:	f7fe f86c 	bl	8001ea0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e347      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dd6:	4b28      	ldr	r3, [pc, #160]	@ (8003e78 <HAL_RCC_OscConfig+0x7bc>)
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01f      	beq.n	8003e2e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d010      	beq.n	8003e1c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e00:	4a1c      	ldr	r2, [pc, #112]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e10:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e1a:	e018      	b.n	8003e4e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e1c:	4b15      	ldr	r3, [pc, #84]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e22:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e2c:	e00f      	b.n	8003e4e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e34:	4a0f      	ldr	r2, [pc, #60]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e44:	4a0b      	ldr	r2, [pc, #44]	@ (8003e74 <HAL_RCC_OscConfig+0x7b8>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d057      	beq.n	8003f06 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003e56:	f7fe f823 	bl	8001ea0 <HAL_GetTick>
 8003e5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fe f81f 	bl	8001ea0 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d905      	bls.n	8003e7c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e2f8      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
 8003e74:	46020c00 	.word	0x46020c00
 8003e78:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0e9      	beq.n	8003e5e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01b      	beq.n	8003ece <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e96:	4b96      	ldr	r3, [pc, #600]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9c:	4a94      	ldr	r2, [pc, #592]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fffa 	bl	8001ea0 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e2d3      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ebe:	4b8c      	ldr	r3, [pc, #560]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ed      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x7ec>
 8003ecc:	e053      	b.n	8003f76 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ece:	4b88      	ldr	r3, [pc, #544]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed4:	4a86      	ldr	r2, [pc, #536]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee0:	f7fd ffde 	bl	8001ea0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e2b7      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ef6:	4b7e      	ldr	r3, [pc, #504]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ed      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x824>
 8003f04:	e037      	b.n	8003f76 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003f06:	f7fd ffcb 	bl	8001ea0 <HAL_GetTick>
 8003f0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fd ffc7 	bl	8001ea0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e2a0      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f24:	4b72      	ldr	r3, [pc, #456]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ed      	bne.n	8003f0e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f32:	4b6f      	ldr	r3, [pc, #444]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01a      	beq.n	8003f76 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f40:	4b6b      	ldr	r3, [pc, #428]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f46:	4a6a      	ldr	r2, [pc, #424]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd ffa5 	bl	8001ea0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e27e      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f68:	4b61      	ldr	r3, [pc, #388]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ed      	bne.n	8003f52 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f84:	4a5a      	ldr	r2, [pc, #360]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003f86:	f023 0304 	bic.w	r3, r3, #4
 8003f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d036      	beq.n	8004008 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d019      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003fa2:	4b53      	ldr	r3, [pc, #332]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a52      	ldr	r2, [pc, #328]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fae:	f7fd ff77 	bl	8001ea0 <HAL_GetTick>
 8003fb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb6:	f7fd ff73 	bl	8001ea0 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e24e      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fc8:	4b49      	ldr	r3, [pc, #292]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x8fa>
 8003fd4:	e018      	b.n	8004008 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003fd6:	4b46      	ldr	r3, [pc, #280]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a45      	ldr	r2, [pc, #276]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fe0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fe2:	f7fd ff5d 	bl	8001ea0 <HAL_GetTick>
 8003fe6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fea:	f7fd ff59 	bl	8001ea0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e234      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d036      	beq.n	8004082 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	2b00      	cmp	r3, #0
 800401a:	d019      	beq.n	8004050 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800401c:	4b34      	ldr	r3, [pc, #208]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a33      	ldr	r2, [pc, #204]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8004022:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004026:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004028:	f7fd ff3a 	bl	8001ea0 <HAL_GetTick>
 800402c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004030:	f7fd ff36 	bl	8001ea0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e211      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004042:	4b2b      	ldr	r3, [pc, #172]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x974>
 800404e:	e018      	b.n	8004082 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004050:	4b27      	ldr	r3, [pc, #156]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8004056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800405a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800405c:	f7fd ff20 	bl	8001ea0 <HAL_GetTick>
 8004060:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004064:	f7fd ff1c 	bl	8001ea0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e1f7      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004076:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d07f      	beq.n	800418e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004092:	2b00      	cmp	r3, #0
 8004094:	d062      	beq.n	800415c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004096:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4a15      	ldr	r2, [pc, #84]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 800409c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040a0:	6093      	str	r3, [r2, #8]
 80040a2:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	4910      	ldr	r1, [pc, #64]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80040bc:	d309      	bcc.n	80040d2 <HAL_RCC_OscConfig+0xa16>
 80040be:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f023 021f 	bic.w	r2, r3, #31
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4909      	ldr	r1, [pc, #36]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
 80040d0:	e02a      	b.n	8004128 <HAL_RCC_OscConfig+0xa6c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da0c      	bge.n	80040f4 <HAL_RCC_OscConfig+0xa38>
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	015b      	lsls	r3, r3, #5
 80040e8:	4901      	ldr	r1, [pc, #4]	@ (80040f0 <HAL_RCC_OscConfig+0xa34>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60cb      	str	r3, [r1, #12]
 80040ee:	e01b      	b.n	8004128 <HAL_RCC_OscConfig+0xa6c>
 80040f0:	46020c00 	.word	0x46020c00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fc:	d30a      	bcc.n	8004114 <HAL_RCC_OscConfig+0xa58>
 80040fe:	4ba1      	ldr	r3, [pc, #644]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	029b      	lsls	r3, r3, #10
 800410c:	499d      	ldr	r1, [pc, #628]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 800410e:	4313      	orrs	r3, r2
 8004110:	60cb      	str	r3, [r1, #12]
 8004112:	e009      	b.n	8004128 <HAL_RCC_OscConfig+0xa6c>
 8004114:	4b9b      	ldr	r3, [pc, #620]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	03db      	lsls	r3, r3, #15
 8004122:	4998      	ldr	r1, [pc, #608]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004124:	4313      	orrs	r3, r2
 8004126:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004128:	4b96      	ldr	r3, [pc, #600]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a95      	ldr	r2, [pc, #596]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 800412e:	f043 0310 	orr.w	r3, r3, #16
 8004132:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004134:	f7fd feb4 	bl	8001ea0 <HAL_GetTick>
 8004138:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800413c:	f7fd feb0 	bl	8001ea0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e18b      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800414e:	4b8d      	ldr	r3, [pc, #564]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xa80>
 800415a:	e018      	b.n	800418e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800415c:	4b89      	ldr	r3, [pc, #548]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a88      	ldr	r2, [pc, #544]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004168:	f7fd fe9a 	bl	8001ea0 <HAL_GetTick>
 800416c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004170:	f7fd fe96 	bl	8001ea0 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e171      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004182:	4b80      	ldr	r3, [pc, #512]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8166 	beq.w	8004464 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419e:	4b79      	ldr	r3, [pc, #484]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	f000 80f2 	beq.w	8004390 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	f040 80c5 	bne.w	8004340 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b73      	ldr	r3, [pc, #460]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a72      	ldr	r2, [pc, #456]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041c2:	f7fd fe6d 	bl	8001ea0 <HAL_GetTick>
 80041c6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fd fe69 	bl	8001ea0 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e144      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041dc:	4b69      	ldr	r3, [pc, #420]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e8:	4b66      	ldr	r3, [pc, #408]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d111      	bne.n	800421a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4b63      	ldr	r3, [pc, #396]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80041f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041fc:	4a61      	ldr	r2, [pc, #388]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80041fe:	f043 0304 	orr.w	r3, r3, #4
 8004202:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004206:	4b5f      	ldr	r3, [pc, #380]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800421a:	4b5b      	ldr	r3, [pc, #364]	@ (8004388 <HAL_RCC_OscConfig+0xccc>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004222:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004226:	d102      	bne.n	800422e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800422e:	4b56      	ldr	r3, [pc, #344]	@ (8004388 <HAL_RCC_OscConfig+0xccc>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4a55      	ldr	r2, [pc, #340]	@ (8004388 <HAL_RCC_OscConfig+0xccc>)
 8004234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004238:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800423a:	4b52      	ldr	r3, [pc, #328]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800424e:	3a01      	subs	r2, #1
 8004250:	0212      	lsls	r2, r2, #8
 8004252:	4311      	orrs	r1, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004258:	430a      	orrs	r2, r1
 800425a:	494a      	ldr	r1, [pc, #296]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 800425c:	4313      	orrs	r3, r2
 800425e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004260:	4b48      	ldr	r3, [pc, #288]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004264:	4b49      	ldr	r3, [pc, #292]	@ (800438c <HAL_RCC_OscConfig+0xcd0>)
 8004266:	4013      	ands	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800426c:	3a01      	subs	r2, #1
 800426e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004276:	3a01      	subs	r2, #1
 8004278:	0252      	lsls	r2, r2, #9
 800427a:	b292      	uxth	r2, r2
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004282:	3a01      	subs	r2, #1
 8004284:	0412      	lsls	r2, r2, #16
 8004286:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004290:	3a01      	subs	r2, #1
 8004292:	0612      	lsls	r2, r2, #24
 8004294:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004298:	430a      	orrs	r2, r1
 800429a:	493a      	ldr	r1, [pc, #232]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80042a0:	4b38      	ldr	r3, [pc, #224]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	4a37      	ldr	r2, [pc, #220]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042a6:	f023 0310 	bic.w	r3, r3, #16
 80042aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	4a34      	ldr	r2, [pc, #208]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80042b6:	4b33      	ldr	r3, [pc, #204]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	4a32      	ldr	r2, [pc, #200]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042bc:	f043 0310 	orr.w	r3, r3, #16
 80042c0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80042c2:	4b30      	ldr	r3, [pc, #192]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	f023 020c 	bic.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ce:	492d      	ldr	r1, [pc, #180]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80042d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004388 <HAL_RCC_OscConfig+0xccc>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a29      	ldr	r2, [pc, #164]	@ (8004388 <HAL_RCC_OscConfig+0xccc>)
 80042e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80042e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80042f0:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f6:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004300:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1f      	ldr	r2, [pc, #124]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800430a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800430c:	f7fd fdc8 	bl	8001ea0 <HAL_GetTick>
 8004310:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7fd fdc4 	bl	8001ea0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e09f      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004326:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004332:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	4a13      	ldr	r2, [pc, #76]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800433c:	6293      	str	r3, [r2, #40]	@ 0x28
 800433e:	e091      	b.n	8004464 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004340:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0f      	ldr	r2, [pc, #60]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800434a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800434c:	f7fd fda8 	bl	8001ea0 <HAL_GetTick>
 8004350:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004354:	f7fd fda4 	bl	8001ea0 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e07f      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004366:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004372:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	4a03      	ldr	r2, [pc, #12]	@ (8004384 <HAL_RCC_OscConfig+0xcc8>)
 8004378:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	6293      	str	r3, [r2, #40]	@ 0x28
 8004382:	e06f      	b.n	8004464 <HAL_RCC_OscConfig+0xda8>
 8004384:	46020c00 	.word	0x46020c00
 8004388:	46020800 	.word	0x46020800
 800438c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004390:	4b37      	ldr	r3, [pc, #220]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004396:	4b36      	ldr	r3, [pc, #216]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 8004398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d039      	beq.n	8004418 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f003 0203 	and.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d132      	bne.n	8004418 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d129      	bne.n	8004418 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d122      	bne.n	8004418 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043dc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d11a      	bne.n	8004418 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d111      	bne.n	8004418 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004400:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d108      	bne.n	8004418 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	0e1b      	lsrs	r3, r3, #24
 800440a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004412:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e024      	b.n	8004466 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800441c:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 800441e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004420:	08db      	lsrs	r3, r3, #3
 8004422:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800442a:	429a      	cmp	r2, r3
 800442c:	d01a      	beq.n	8004464 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 8004430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004432:	4a0f      	ldr	r2, [pc, #60]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd fd31 	bl	8001ea0 <HAL_GetTick>
 800443e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004440:	bf00      	nop
 8004442:	f7fd fd2d 	bl	8001ea0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	4293      	cmp	r3, r2
 800444c:	d0f9      	beq.n	8004442 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	4a07      	ldr	r2, [pc, #28]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 800445a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445c:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <HAL_RCC_OscConfig+0xdb4>)
 800445e:	f043 0310 	orr.w	r3, r3, #16
 8004462:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3738      	adds	r7, #56	@ 0x38
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	46020c00 	.word	0x46020c00

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e1d9      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b9b      	ldr	r3, [pc, #620]	@ (80046f8 <HAL_RCC_ClockConfig+0x284>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d910      	bls.n	80044b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b98      	ldr	r3, [pc, #608]	@ (80046f8 <HAL_RCC_ClockConfig+0x284>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 020f 	bic.w	r2, r3, #15
 800449e:	4996      	ldr	r1, [pc, #600]	@ (80046f8 <HAL_RCC_ClockConfig+0x284>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b94      	ldr	r3, [pc, #592]	@ (80046f8 <HAL_RCC_ClockConfig+0x284>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e1c1      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d010      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	4b8c      	ldr	r3, [pc, #560]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d908      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80044d4:	4b89      	ldr	r3, [pc, #548]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	4986      	ldr	r1, [pc, #536]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	4b81      	ldr	r3, [pc, #516]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004500:	429a      	cmp	r2, r3
 8004502:	d909      	bls.n	8004518 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004504:	4b7d      	ldr	r3, [pc, #500]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	497a      	ldr	r1, [pc, #488]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004514:	4313      	orrs	r3, r2
 8004516:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4b74      	ldr	r3, [pc, #464]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004530:	429a      	cmp	r2, r3
 8004532:	d908      	bls.n	8004546 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004534:	4b71      	ldr	r3, [pc, #452]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	496e      	ldr	r1, [pc, #440]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004542:	4313      	orrs	r3, r2
 8004544:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	4b69      	ldr	r3, [pc, #420]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	429a      	cmp	r2, r3
 8004560:	d908      	bls.n	8004574 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004562:	4b66      	ldr	r3, [pc, #408]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 020f 	bic.w	r2, r3, #15
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4963      	ldr	r1, [pc, #396]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004570:	4313      	orrs	r3, r2
 8004572:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80d2 	beq.w	8004726 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d143      	bne.n	8004616 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b5b      	ldr	r3, [pc, #364]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d110      	bne.n	80045be <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800459c:	4b57      	ldr	r3, [pc, #348]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a2:	4a56      	ldr	r2, [pc, #344]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045ac:	4b53      	ldr	r3, [pc, #332]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80045be:	f7fd fc6f 	bl	8001ea0 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80045c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004700 <HAL_RCC_ClockConfig+0x28c>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00f      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80045d2:	f7fd fc65 	bl	8001ea0 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e12b      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80045e4:	4b46      	ldr	r3, [pc, #280]	@ (8004700 <HAL_RCC_ClockConfig+0x28c>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80045f6:	4b41      	ldr	r3, [pc, #260]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045fc:	4a3f      	ldr	r2, [pc, #252]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80045fe:	f023 0304 	bic.w	r3, r3, #4
 8004602:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004606:	4b3d      	ldr	r3, [pc, #244]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d121      	bne.n	8004656 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e112      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461e:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d115      	bne.n	8004656 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e106      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d107      	bne.n	8004646 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004636:	4b31      	ldr	r3, [pc, #196]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0fa      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004646:	4b2d      	ldr	r3, [pc, #180]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0f2      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004656:	4b29      	ldr	r3, [pc, #164]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f023 0203 	bic.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4926      	ldr	r1, [pc, #152]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004664:	4313      	orrs	r3, r2
 8004666:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004668:	f7fd fc1a 	bl	8001ea0 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d112      	bne.n	800469c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fc12 	bl	8001ea0 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0d6      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800468e:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d1ee      	bne.n	8004678 <HAL_RCC_ClockConfig+0x204>
 800469a:	e044      	b.n	8004726 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d112      	bne.n	80046ca <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a6:	f7fd fbfb 	bl	8001ea0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0bf      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046bc:	4b0f      	ldr	r3, [pc, #60]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d1ee      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x232>
 80046c8:	e02d      	b.n	8004726 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d123      	bne.n	800471a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d4:	f7fd fbe4 	bl	8001ea0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0a8      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046ea:	4b04      	ldr	r3, [pc, #16]	@ (80046fc <HAL_RCC_ClockConfig+0x288>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ee      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x260>
 80046f6:	e016      	b.n	8004726 <HAL_RCC_ClockConfig+0x2b2>
 80046f8:	40022000 	.word	0x40022000
 80046fc:	46020c00 	.word	0x46020c00
 8004700:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fd fbcc 	bl	8001ea0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e090      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800471a:	4b4a      	ldr	r3, [pc, #296]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b04      	cmp	r3, #4
 8004724:	d1ee      	bne.n	8004704 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	4b43      	ldr	r3, [pc, #268]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	429a      	cmp	r2, r3
 8004740:	d208      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004742:	4b40      	ldr	r3, [pc, #256]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f023 020f 	bic.w	r2, r3, #15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	493d      	ldr	r1, [pc, #244]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004754:	4b3c      	ldr	r3, [pc, #240]	@ (8004848 <HAL_RCC_ClockConfig+0x3d4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d210      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b39      	ldr	r3, [pc, #228]	@ (8004848 <HAL_RCC_ClockConfig+0x3d4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 020f 	bic.w	r2, r3, #15
 800476a:	4937      	ldr	r1, [pc, #220]	@ (8004848 <HAL_RCC_ClockConfig+0x3d4>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b35      	ldr	r3, [pc, #212]	@ (8004848 <HAL_RCC_ClockConfig+0x3d4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e05b      	b.n	800483c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d010      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	4b2b      	ldr	r3, [pc, #172]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800479c:	429a      	cmp	r2, r3
 800479e:	d208      	bcs.n	80047b2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80047a0:	4b28      	ldr	r3, [pc, #160]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4925      	ldr	r1, [pc, #148]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d012      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	4b20      	ldr	r3, [pc, #128]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d209      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80047d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	4919      	ldr	r1, [pc, #100]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	4b13      	ldr	r3, [pc, #76]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d208      	bcs.n	8004812 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004800:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	490d      	ldr	r1, [pc, #52]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004812:	f000 f821 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004816:	4602      	mov	r2, r0
 8004818:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <HAL_RCC_ClockConfig+0x3d0>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	490a      	ldr	r1, [pc, #40]	@ (800484c <HAL_RCC_ClockConfig+0x3d8>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	4a09      	ldr	r2, [pc, #36]	@ (8004850 <HAL_RCC_ClockConfig+0x3dc>)
 800482a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800482c:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <HAL_RCC_ClockConfig+0x3e0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fd faab 	bl	8001d8c <HAL_InitTick>
 8004836:	4603      	mov	r3, r0
 8004838:	73fb      	strb	r3, [r7, #15]

  return status;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	46020c00 	.word	0x46020c00
 8004848:	40022000 	.word	0x40022000
 800484c:	0800a0b4 	.word	0x0800a0b4
 8004850:	20000008 	.word	0x20000008
 8004854:	2000000c 	.word	0x2000000c

08004858 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004858:	b480      	push	{r7}
 800485a:	b08b      	sub	sp, #44	@ 0x2c
 800485c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004866:	4b78      	ldr	r3, [pc, #480]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004870:	4b75      	ldr	r3, [pc, #468]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x34>
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d121      	bne.n	80048ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d11e      	bne.n	80048ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800488c:	4b6e      	ldr	r3, [pc, #440]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004898:	4b6b      	ldr	r3, [pc, #428]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800489a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800489e:	0b1b      	lsrs	r3, r3, #12
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a6:	e005      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80048a8:	4b67      	ldr	r3, [pc, #412]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	0f1b      	lsrs	r3, r3, #28
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048b4:	4a65      	ldr	r2, [pc, #404]	@ (8004a4c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d110      	bne.n	80048e6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048c8:	e00d      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d102      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	e004      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80048e4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	f040 80a5 	bne.w	8004a38 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80048ee:	4b56      	ldr	r3, [pc, #344]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80048f8:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004906:	4b50      	ldr	r3, [pc, #320]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	091b      	lsrs	r3, r3, #4
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004912:	4b4d      	ldr	r3, [pc, #308]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	08db      	lsrs	r3, r3, #3
 8004918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d003      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0xe4>
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d022      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x128>
 800493a:	e043      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004a54 <HAL_RCC_GetSysClockFreq+0x1fc>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800495e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004962:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004a58 <HAL_RCC_GetSysClockFreq+0x200>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800496e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497e:	e046      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004a54 <HAL_RCC_GetSysClockFreq+0x1fc>
 800498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004992:	4b2d      	ldr	r3, [pc, #180]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049a2:	ed97 6a01 	vldr	s12, [r7, #4]
 80049a6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004a58 <HAL_RCC_GetSysClockFreq+0x200>
 80049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049c2:	e024      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049ec:	ed97 6a01 	vldr	s12, [r7, #4]
 80049f0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004a58 <HAL_RCC_GetSysClockFreq+0x200>
 80049f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a0c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a12:	0e1b      	lsrs	r3, r3, #24
 8004a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a18:	3301      	adds	r3, #1
 8004a1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a32:	ee17 3a90 	vmov	r3, s15
 8004a36:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004a38:	6a3b      	ldr	r3, [r7, #32]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	372c      	adds	r7, #44	@ 0x2c
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	46020c00 	.word	0x46020c00
 8004a4c:	0800a0cc 	.word	0x0800a0cc
 8004a50:	00f42400 	.word	0x00f42400
 8004a54:	4b742400 	.word	0x4b742400
 8004a58:	46000000 	.word	0x46000000

08004a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a60:	f7ff fefa 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <HAL_RCC_GetHCLKFreq+0x28>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	4906      	ldr	r1, [pc, #24]	@ (8004a88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a05      	ldr	r2, [pc, #20]	@ (8004a8c <HAL_RCC_GetHCLKFreq+0x30>)
 8004a78:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004a7a:	4b04      	ldr	r3, [pc, #16]	@ (8004a8c <HAL_RCC_GetHCLKFreq+0x30>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	46020c00 	.word	0x46020c00
 8004a88:	0800a0b4 	.word	0x0800a0b4
 8004a8c:	20000008 	.word	0x20000008

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004a94:	f7ff ffe2 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	@ (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	46020c00 	.word	0x46020c00
 8004ab4:	0800a0c4 	.word	0x0800a0c4

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004abc:	f7ff ffce 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	@ (8004adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	46020c00 	.word	0x46020c00
 8004adc:	0800a0c4 	.word	0x0800a0c4

08004ae0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004ae4:	f7ff ffba 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4903      	ldr	r1, [pc, #12]	@ (8004b04 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	46020c00 	.word	0x46020c00
 8004b04:	0800a0c4 	.word	0x0800a0c4

08004b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b10:	4b3e      	ldr	r3, [pc, #248]	@ (8004c0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b1e:	f7fe fd8f 	bl	8003640 <HAL_PWREx_GetVoltageRange>
 8004b22:	6178      	str	r0, [r7, #20]
 8004b24:	e019      	b.n	8004b5a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2c:	4a37      	ldr	r2, [pc, #220]	@ (8004c0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b36:	4b35      	ldr	r3, [pc, #212]	@ (8004c0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b44:	f7fe fd7c 	bl	8003640 <HAL_PWREx_GetVoltageRange>
 8004b48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b4a:	4b30      	ldr	r3, [pc, #192]	@ (8004c0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b50:	4a2e      	ldr	r2, [pc, #184]	@ (8004c0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b52:	f023 0304 	bic.w	r3, r3, #4
 8004b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b60:	d003      	beq.n	8004b6a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b68:	d109      	bne.n	8004b7e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b70:	d202      	bcs.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b72:	2301      	movs	r3, #1
 8004b74:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b76:	e033      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b7c:	e030      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b84:	d208      	bcs.n	8004b98 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8c:	d102      	bne.n	8004b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004b8e:	2303      	movs	r3, #3
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e025      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e035      	b.n	8004c04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b9e:	d90f      	bls.n	8004bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bac:	d902      	bls.n	8004bb4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	e015      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e012      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e00f      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bc6:	d109      	bne.n	8004bdc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bce:	d102      	bne.n	8004bd6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	e004      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	e001      	b.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004bdc:	2301      	movs	r3, #1
 8004bde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 020f 	bic.w	r2, r3, #15
 8004be8:	4909      	ldr	r1, [pc, #36]	@ (8004c10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d001      	beq.n	8004c02 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	46020c00 	.word	0x46020c00
 8004c10:	40022000 	.word	0x40022000

08004c14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c18:	b0ba      	sub	sp, #232	@ 0xe8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f002 0401 	and.w	r4, r2, #1
 8004c38:	2500      	movs	r5, #0
 8004c3a:	ea54 0305 	orrs.w	r3, r4, r5
 8004c3e:	d00b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c40:	4bcb      	ldr	r3, [pc, #812]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c46:	f023 0103 	bic.w	r1, r3, #3
 8004c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c50:	4ac7      	ldr	r2, [pc, #796]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c52:	430b      	orrs	r3, r1
 8004c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f002 0802 	and.w	r8, r2, #2
 8004c64:	f04f 0900 	mov.w	r9, #0
 8004c68:	ea58 0309 	orrs.w	r3, r8, r9
 8004c6c:	d00b      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004c6e:	4bc0      	ldr	r3, [pc, #768]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c74:	f023 010c 	bic.w	r1, r3, #12
 8004c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	4abc      	ldr	r2, [pc, #752]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c80:	430b      	orrs	r3, r1
 8004c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f002 0a04 	and.w	sl, r2, #4
 8004c92:	f04f 0b00 	mov.w	fp, #0
 8004c96:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004c9c:	4bb4      	ldr	r3, [pc, #720]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ca2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cac:	4ab0      	ldr	r2, [pc, #704]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f002 0308 	and.w	r3, r2, #8
 8004cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004cd4:	4ba6      	ldr	r3, [pc, #664]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce4:	4aa2      	ldr	r2, [pc, #648]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f002 0310 	and.w	r3, r2, #16
 8004cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d0c:	4b98      	ldr	r3, [pc, #608]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1c:	4a94      	ldr	r2, [pc, #592]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f002 0320 	and.w	r3, r2, #32
 8004d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d34:	2300      	movs	r3, #0
 8004d36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d44:	4b8a      	ldr	r3, [pc, #552]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d4a:	f023 0107 	bic.w	r1, r3, #7
 8004d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d54:	4a86      	ldr	r2, [pc, #536]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d56:	430b      	orrs	r3, r1
 8004d58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d82:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d8c:	4a78      	ldr	r2, [pc, #480]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004daa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dae:	460b      	mov	r3, r1
 8004db0:	4313      	orrs	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004db4:	4b6e      	ldr	r3, [pc, #440]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc4:	4a6a      	ldr	r2, [pc, #424]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004de2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004dec:	4b60      	ldr	r3, [pc, #384]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004df2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfc:	4a5c      	ldr	r2, [pc, #368]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e24:	4b52      	ldr	r3, [pc, #328]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e2a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e34:	4a4e      	ldr	r2, [pc, #312]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004e48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e5c:	4b44      	ldr	r3, [pc, #272]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e62:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e6c:	4a40      	ldr	r2, [pc, #256]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e8a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4313      	orrs	r3, r2
 8004e92:	d00b      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e94:	4b36      	ldr	r3, [pc, #216]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e9a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ea4:	4a32      	ldr	r2, [pc, #200]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ec2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d00c      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004ecc:	4b28      	ldr	r3, [pc, #160]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ed2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ede:	4a24      	ldr	r2, [pc, #144]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ef8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004efc:	460b      	mov	r3, r1
 8004efe:	4313      	orrs	r3, r2
 8004f00:	d04f      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0a:	2b80      	cmp	r3, #128	@ 0x80
 8004f0c:	d02d      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004f0e:	2b80      	cmp	r3, #128	@ 0x80
 8004f10:	d827      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f12:	2b60      	cmp	r3, #96	@ 0x60
 8004f14:	d02e      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004f16:	2b60      	cmp	r3, #96	@ 0x60
 8004f18:	d823      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f1a:	2b40      	cmp	r3, #64	@ 0x40
 8004f1c:	d006      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d81f      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d011      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004f2a:	e01a      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f2c:	4b10      	ldr	r3, [pc, #64]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	4a0f      	ldr	r2, [pc, #60]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f36:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f38:	e01d      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3e:	3308      	adds	r3, #8
 8004f40:	4618      	mov	r0, r3
 8004f42:	f002 fa17 	bl	8007374 <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f4c:	e013      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f52:	332c      	adds	r3, #44	@ 0x2c
 8004f54:	4618      	mov	r0, r3
 8004f56:	f002 faa5 	bl	80074a4 <RCCEx_PLL3_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f60:	e009      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f68:	e005      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004f6a:	bf00      	nop
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004f6e:	bf00      	nop
 8004f70:	46020c00 	.word	0x46020c00
        break;
 8004f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10d      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f7e:	4bb6      	ldr	r3, [pc, #728]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f84:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f90:	4ab1      	ldr	r2, [pc, #708]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f92:	430b      	orrs	r3, r1
 8004f94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f9e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004fae:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	d053      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fca:	d033      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd0:	d82c      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd6:	d02f      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004fd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fdc:	d826      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe8:	d820      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff2:	d011      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004ff4:	e01a      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ff6:	4b98      	ldr	r3, [pc, #608]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	4a97      	ldr	r2, [pc, #604]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005000:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005002:	e01a      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005008:	3308      	adds	r3, #8
 800500a:	4618      	mov	r0, r3
 800500c:	f002 f9b2 	bl	8007374 <RCCEx_PLL2_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005016:	e010      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800501c:	332c      	adds	r3, #44	@ 0x2c
 800501e:	4618      	mov	r0, r3
 8005020:	f002 fa40 	bl	80074a4 <RCCEx_PLL3_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800502a:	e006      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005032:	e002      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005042:	4b85      	ldr	r3, [pc, #532]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005044:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005048:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800504c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005054:	4a80      	ldr	r2, [pc, #512]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005056:	430b      	orrs	r3, r1
 8005058:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800505c:	e003      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005062:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005072:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005074:	2300      	movs	r3, #0
 8005076:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005078:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800507c:	460b      	mov	r3, r1
 800507e:	4313      	orrs	r3, r2
 8005080:	d046      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800508a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800508e:	d028      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005090:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005094:	d821      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800509a:	d022      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800509c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050a0:	d81b      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80050a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050a6:	d01c      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80050a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050ac:	d815      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80050ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b2:	d008      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b8:	d80f      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d011      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c2:	d00e      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80050c4:	e009      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ca:	3308      	adds	r3, #8
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 f951 	bl	8007374 <RCCEx_PLL2_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050d8:	e004      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80050e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10d      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050f2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050fe:	4a56      	ldr	r2, [pc, #344]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005100:	430b      	orrs	r3, r1
 8005102:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800510c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800511c:	663b      	str	r3, [r7, #96]	@ 0x60
 800511e:	2300      	movs	r3, #0
 8005120:	667b      	str	r3, [r7, #100]	@ 0x64
 8005122:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005126:	460b      	mov	r3, r1
 8005128:	4313      	orrs	r3, r2
 800512a:	d03f      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800512c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005134:	2b04      	cmp	r3, #4
 8005136:	d81e      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	0800517f 	.word	0x0800517f
 8005144:	08005155 	.word	0x08005155
 8005148:	08005163 	.word	0x08005163
 800514c:	0800517f 	.word	0x0800517f
 8005150:	0800517f 	.word	0x0800517f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005154:	4b40      	ldr	r3, [pc, #256]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	4a3f      	ldr	r2, [pc, #252]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005160:	e00e      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005166:	332c      	adds	r3, #44	@ 0x2c
 8005168:	4618      	mov	r0, r3
 800516a:	f002 f99b 	bl	80074a4 <RCCEx_PLL3_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800517c:	e000      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800517e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005180:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10d      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005188:	4b33      	ldr	r3, [pc, #204]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800518a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800518e:	f023 0107 	bic.w	r1, r3, #7
 8005192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	4a2f      	ldr	r2, [pc, #188]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800519c:	430b      	orrs	r3, r1
 800519e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051a2:	e003      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80051ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80051b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051ba:	2300      	movs	r3, #0
 80051bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051c2:	460b      	mov	r3, r1
 80051c4:	4313      	orrs	r3, r2
 80051c6:	d04d      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80051c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051d4:	d028      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80051d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051da:	d821      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80051dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051e0:	d024      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x618>
 80051e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051e6:	d81b      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80051e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ec:	d00e      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80051ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051f2:	d815      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051fc:	d110      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051fe:	4b16      	ldr	r3, [pc, #88]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005208:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800520a:	e012      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800520c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005210:	332c      	adds	r3, #44	@ 0x2c
 8005212:	4618      	mov	r0, r3
 8005214:	f002 f946 	bl	80074a4 <RCCEx_PLL3_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800521e:	e008      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005226:	e004      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005230:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005232:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d110      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800523a:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800523c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005240:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800524c:	4a02      	ldr	r2, [pc, #8]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800524e:	430b      	orrs	r3, r1
 8005250:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005256:	bf00      	nop
 8005258:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005260:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005270:	653b      	str	r3, [r7, #80]	@ 0x50
 8005272:	2300      	movs	r3, #0
 8005274:	657b      	str	r3, [r7, #84]	@ 0x54
 8005276:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800527a:	460b      	mov	r3, r1
 800527c:	4313      	orrs	r3, r2
 800527e:	f000 80b5 	beq.w	80053ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005288:	4b9d      	ldr	r3, [pc, #628]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d113      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005296:	4b9a      	ldr	r3, [pc, #616]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529c:	4a98      	ldr	r2, [pc, #608]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80052a6:	4b96      	ldr	r3, [pc, #600]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80052be:	4b91      	ldr	r3, [pc, #580]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	4a90      	ldr	r2, [pc, #576]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ca:	f7fc fde9 	bl	8001ea0 <HAL_GetTick>
 80052ce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052d2:	e00b      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d4:	f7fc fde4 	bl	8001ea0 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d903      	bls.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052ea:	e005      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052ec:	4b85      	ldr	r3, [pc, #532]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ed      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80052f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d165      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005300:	4b7f      	ldr	r3, [pc, #508]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d023      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005322:	4293      	cmp	r3, r2
 8005324:	d01b      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005326:	4b76      	ldr	r3, [pc, #472]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800532c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005330:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005334:	4b72      	ldr	r3, [pc, #456]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800533a:	4a71      	ldr	r2, [pc, #452]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800533c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005340:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005344:	4b6e      	ldr	r3, [pc, #440]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800534a:	4a6d      	ldr	r2, [pc, #436]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800534c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005350:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005354:	4a6a      	ldr	r2, [pc, #424]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d019      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fc fd99 	bl	8001ea0 <HAL_GetTick>
 800536e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005372:	e00d      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005374:	f7fc fd94 	bl	8001ea0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005384:	429a      	cmp	r2, r3
 8005386:	d903      	bls.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800538e:	e006      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005390:	4b5b      	ldr	r3, [pc, #364]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0ea      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800539e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80053a6:	4b56      	ldr	r3, [pc, #344]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80053b8:	4a51      	ldr	r2, [pc, #324]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80053ca:	e003      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053d0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053d4:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b48      	ldr	r3, [pc, #288]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e2:	4a47      	ldr	r2, [pc, #284]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053e4:	f023 0304 	bic.w	r3, r3, #4
 80053e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80053ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80053f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fa:	2300      	movs	r3, #0
 80053fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d042      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800540c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005410:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005414:	d022      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005416:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800541a:	d81b      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800541c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005420:	d011      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005426:	d815      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d019      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800542c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005430:	d110      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005436:	3308      	adds	r3, #8
 8005438:	4618      	mov	r0, r3
 800543a:	f001 ff9b 	bl	8007374 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005444:	e00d      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005446:	4b2e      	ldr	r3, [pc, #184]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	4a2d      	ldr	r2, [pc, #180]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800544c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005450:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005452:	e006      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005460:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005462:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800546a:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800546c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005470:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005478:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800547c:	4a20      	ldr	r2, [pc, #128]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800547e:	430b      	orrs	r3, r1
 8005480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005486:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800548a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800548e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800549a:	643b      	str	r3, [r7, #64]	@ 0x40
 800549c:	2300      	movs	r3, #0
 800549e:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d032      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80054aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054b6:	d00b      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80054b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054bc:	d804      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c6:	d007      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80054d8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054da:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d112      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80054e2:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054f4:	4a02      	ldr	r2, [pc, #8]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054f6:	430b      	orrs	r3, r1
 80054f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80054fe:	bf00      	nop
 8005500:	46020c00 	.word	0x46020c00
 8005504:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800550c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800551c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800551e:	2300      	movs	r3, #0
 8005520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005522:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d00c      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800552c:	4b98      	ldr	r3, [pc, #608]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800552e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005532:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800553e:	4a94      	ldr	r2, [pc, #592]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005540:	430b      	orrs	r3, r1
 8005542:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005552:	633b      	str	r3, [r7, #48]	@ 0x30
 8005554:	2300      	movs	r3, #0
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
 8005558:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800555c:	460b      	mov	r3, r1
 800555e:	4313      	orrs	r3, r2
 8005560:	d019      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800556a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800556e:	d105      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005570:	4b87      	ldr	r3, [pc, #540]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	4a86      	ldr	r2, [pc, #536]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800557a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800557c:	4b84      	ldr	r3, [pc, #528]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800557e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005582:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800558a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800558e:	4a80      	ldr	r2, [pc, #512]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005590:	430b      	orrs	r3, r1
 8005592:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d00c      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80055b2:	4b77      	ldr	r3, [pc, #476]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c4:	4972      	ldr	r1, [pc, #456]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80055cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	d00c      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80055e8:	4b69      	ldr	r3, [pc, #420]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055fa:	4965      	ldr	r1, [pc, #404]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	2300      	movs	r3, #0
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005618:	460b      	mov	r3, r1
 800561a:	4313      	orrs	r3, r2
 800561c:	d00c      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800561e:	4b5c      	ldr	r3, [pc, #368]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005624:	f023 0218 	bic.w	r2, r3, #24
 8005628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800562c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005630:	4957      	ldr	r1, [pc, #348]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d032      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800565c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005660:	d105      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005662:	4b4b      	ldr	r3, [pc, #300]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005666:	4a4a      	ldr	r2, [pc, #296]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800566c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800566e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005672:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005676:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800567a:	d108      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800567c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005680:	3308      	adds	r3, #8
 8005682:	4618      	mov	r0, r3
 8005684:	f001 fe76 	bl	8007374 <RCCEx_PLL2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800568e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10d      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005696:	4b3e      	ldr	r3, [pc, #248]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005698:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800569c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056a8:	4939      	ldr	r1, [pc, #228]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80056b0:	e003      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056b6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d03a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056e2:	d00e      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80056e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056e8:	d815      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d017      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80056ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056f2:	d110      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f4:	4b26      	ldr	r3, [pc, #152]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	4a25      	ldr	r2, [pc, #148]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005700:	e00e      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005706:	3308      	adds	r3, #8
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fe33 	bl	8007374 <RCCEx_PLL2_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005714:	e004      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800571e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005720:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005728:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800572a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800572e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573a:	4915      	ldr	r1, [pc, #84]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005742:	e003      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005748:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800574c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	d00c      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005768:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800576a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800576e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800577a:	4905      	ldr	r1, [pc, #20]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005782:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005786:	4618      	mov	r0, r3
 8005788:	37e8      	adds	r7, #232	@ 0xe8
 800578a:	46bd      	mov	sp, r7
 800578c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005790:	46020c00 	.word	0x46020c00

08005794 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	@ 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800579c:	4ba6      	ldr	r3, [pc, #664]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800579e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80057a6:	4ba4      	ldr	r3, [pc, #656]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80057b0:	4ba1      	ldr	r3, [pc, #644]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	0a1b      	lsrs	r3, r3, #8
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	3301      	adds	r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80057be:	4b9e      	ldr	r3, [pc, #632]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80057ca:	4b9b      	ldr	r3, [pc, #620]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ce:	08db      	lsrs	r3, r3, #3
 80057d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	fb02 f303 	mul.w	r3, r2, r3
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d062      	beq.n	80058b2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	f200 8081 	bhi.w	80058f6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d024      	beq.n	8005844 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d17a      	bne.n	80058f6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b89      	ldr	r3, [pc, #548]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005822:	ed97 6a02 	vldr	s12, [r7, #8]
 8005826:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005842:	e08f      	b.n	8005964 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005844:	4b7c      	ldr	r3, [pc, #496]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005850:	4b79      	ldr	r3, [pc, #484]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	0f1b      	lsrs	r3, r3, #28
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	e006      	b.n	800586a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800585c:	4b76      	ldr	r3, [pc, #472]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800585e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	0f1b      	lsrs	r3, r3, #28
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	4a76      	ldr	r2, [pc, #472]	@ (8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005890:	ed97 6a02 	vldr	s12, [r7, #8]
 8005894:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058b0:	e058      	b.n	8005964 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058bc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80058c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80058d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80058dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80058ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058f4:	e036      	b.n	8005964 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058f6:	4b50      	ldr	r3, [pc, #320]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005902:	4b4d      	ldr	r3, [pc, #308]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	0f1b      	lsrs	r3, r3, #28
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	e006      	b.n	800591c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800590e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	0f1b      	lsrs	r3, r3, #28
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	4a49      	ldr	r2, [pc, #292]	@ (8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800591e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005942:	ed97 6a02 	vldr	s12, [r7, #8]
 8005946:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800594a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005956:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800595a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005962:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005964:	4b34      	ldr	r3, [pc, #208]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005970:	4b31      	ldr	r3, [pc, #196]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005974:	0a5b      	lsrs	r3, r3, #9
 8005976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005986:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800598a:	edd7 6a07 	vldr	s13, [r7, #28]
 800598e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005996:	ee17 2a90 	vmov	r2, s15
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	e002      	b.n	80059a6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80059a6:	4b24      	ldr	r3, [pc, #144]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d017      	beq.n	80059e2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059b2:	4b21      	ldr	r3, [pc, #132]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b6:	0c1b      	lsrs	r3, r3, #16
 80059b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059bc:	ee07 3a90 	vmov	s15, r3
 80059c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80059c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059c8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059d8:	ee17 2a90 	vmov	r2, s15
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80059e8:	4b13      	ldr	r3, [pc, #76]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d017      	beq.n	8005a24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059f4:	4b10      	ldr	r3, [pc, #64]	@ (8005a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f8:	0e1b      	lsrs	r3, r3, #24
 80059fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a1a:	ee17 2a90 	vmov	r2, s15
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a22:	e002      	b.n	8005a2a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	609a      	str	r2, [r3, #8]
}
 8005a2a:	bf00      	nop
 8005a2c:	3724      	adds	r7, #36	@ 0x24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	46020c00 	.word	0x46020c00
 8005a3c:	4b742400 	.word	0x4b742400
 8005a40:	46000000 	.word	0x46000000
 8005a44:	0800a0cc 	.word	0x0800a0cc

08005a48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	@ 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005a50:	4ba6      	ldr	r3, [pc, #664]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a58:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005a5a:	4ba4      	ldr	r3, [pc, #656]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005a64:	4ba1      	ldr	r3, [pc, #644]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3301      	adds	r3, #1
 8005a70:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005a72:	4b9e      	ldr	r3, [pc, #632]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005a7e:	4b9b      	ldr	r3, [pc, #620]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	08db      	lsrs	r3, r3, #3
 8005a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a96:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d062      	beq.n	8005b66 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	f200 8081 	bhi.w	8005baa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d024      	beq.n	8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d17a      	bne.n	8005baa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac6:	4b89      	ldr	r3, [pc, #548]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ada:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005af6:	e08f      	b.n	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005af8:	4b7c      	ldr	r3, [pc, #496]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005b04:	4b79      	ldr	r3, [pc, #484]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	0f1b      	lsrs	r3, r3, #28
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	e006      	b.n	8005b1e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005b10:	4b76      	ldr	r3, [pc, #472]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b16:	041b      	lsls	r3, r3, #16
 8005b18:	0f1b      	lsrs	r3, r3, #28
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	4a76      	ldr	r2, [pc, #472]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b44:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b48:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b64:	e058      	b.n	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b70:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b78:	4b5c      	ldr	r3, [pc, #368]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b80:	ee07 3a90 	vmov	s15, r3
 8005b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b8c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ba8:	e036      	b.n	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005baa:	4b50      	ldr	r3, [pc, #320]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	0f1b      	lsrs	r3, r3, #28
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	e006      	b.n	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	0f1b      	lsrs	r3, r3, #28
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	4a49      	ldr	r2, [pc, #292]	@ (8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bfa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c16:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005c18:	4b34      	ldr	r3, [pc, #208]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c24:	4b31      	ldr	r3, [pc, #196]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c28:	0a5b      	lsrs	r3, r3, #9
 8005c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4a:	ee17 2a90 	vmov	r2, s15
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e002      	b.n	8005c5a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005c5a:	4b24      	ldr	r3, [pc, #144]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d017      	beq.n	8005c96 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c66:	4b21      	ldr	r3, [pc, #132]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005c78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c8c:	ee17 2a90 	vmov	r2, s15
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d017      	beq.n	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ca8:	4b10      	ldr	r3, [pc, #64]	@ (8005cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	0e1b      	lsrs	r3, r3, #24
 8005cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cce:	ee17 2a90 	vmov	r2, s15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cd6:	e002      	b.n	8005cde <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
}
 8005cde:	bf00      	nop
 8005ce0:	3724      	adds	r7, #36	@ 0x24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	46020c00 	.word	0x46020c00
 8005cf0:	4b742400 	.word	0x4b742400
 8005cf4:	46000000 	.word	0x46000000
 8005cf8:	0800a0cc 	.word	0x0800a0cc

08005cfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b089      	sub	sp, #36	@ 0x24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005d04:	4ba6      	ldr	r3, [pc, #664]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005d18:	4ba1      	ldr	r3, [pc, #644]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	3301      	adds	r3, #1
 8005d24:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005d26:	4b9e      	ldr	r3, [pc, #632]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d32:	4b9b      	ldr	r3, [pc, #620]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d36:	08db      	lsrs	r3, r3, #3
 8005d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d062      	beq.n	8005e1a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	f200 8081 	bhi.w	8005e5e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d024      	beq.n	8005dac <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d17a      	bne.n	8005e5e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d72:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7a:	4b89      	ldr	r3, [pc, #548]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d8e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005daa:	e08f      	b.n	8005ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005dac:	4b7c      	ldr	r3, [pc, #496]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005db8:	4b79      	ldr	r3, [pc, #484]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	0f1b      	lsrs	r3, r3, #28
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	e006      	b.n	8005dd2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005dc4:	4b76      	ldr	r3, [pc, #472]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	0f1b      	lsrs	r3, r3, #28
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	4a76      	ldr	r2, [pc, #472]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dfc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e18:	e058      	b.n	8005ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e24:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e40:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e5c:	e036      	b.n	8005ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e5e:	4b50      	ldr	r3, [pc, #320]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	0f1b      	lsrs	r3, r3, #28
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	e006      	b.n	8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005e76:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	0f1b      	lsrs	r3, r3, #28
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	4a49      	ldr	r2, [pc, #292]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eca:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005ecc:	4b34      	ldr	r3, [pc, #208]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d017      	beq.n	8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ed8:	4b31      	ldr	r3, [pc, #196]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005edc:	0a5b      	lsrs	r3, r3, #9
 8005ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efe:	ee17 2a90 	vmov	r2, s15
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e002      	b.n	8005f0e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f0e:	4b24      	ldr	r3, [pc, #144]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d017      	beq.n	8005f4a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f1a:	4b21      	ldr	r3, [pc, #132]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f30:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f40:	ee17 2a90 	vmov	r2, s15
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	e002      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005f50:	4b13      	ldr	r3, [pc, #76]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d017      	beq.n	8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f5c:	4b10      	ldr	r3, [pc, #64]	@ (8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f60:	0e1b      	lsrs	r3, r3, #24
 8005f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f82:	ee17 2a90 	vmov	r2, s15
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f8a:	e002      	b.n	8005f92 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	609a      	str	r2, [r3, #8]
}
 8005f92:	bf00      	nop
 8005f94:	3724      	adds	r7, #36	@ 0x24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	46020c00 	.word	0x46020c00
 8005fa4:	4b742400 	.word	0x4b742400
 8005fa8:	46000000 	.word	0x46000000
 8005fac:	0800a0cc 	.word	0x0800a0cc

08005fb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08e      	sub	sp, #56	@ 0x38
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fbe:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	d145      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005fc6:	4ba7      	ldr	r3, [pc, #668]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005fd2:	4ba4      	ldr	r3, [pc, #656]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d108      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe6:	d104      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fee:	f001 b9b3 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005ff2:	4b9c      	ldr	r3, [pc, #624]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ffc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006000:	d114      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006008:	d110      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800600a:	4b96      	ldr	r3, [pc, #600]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800600c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006018:	d103      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800601a:	23fa      	movs	r3, #250	@ 0xfa
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800601e:	f001 b99b 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006022:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006026:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006028:	f001 b996 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800602c:	4b8d      	ldr	r3, [pc, #564]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006038:	d107      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006040:	d103      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006042:	4b89      	ldr	r3, [pc, #548]	@ (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
 8006046:	f001 b987 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
 800604e:	f001 b983 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006056:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800605a:	430b      	orrs	r3, r1
 800605c:	d151      	bne.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800605e:	4b81      	ldr	r3, [pc, #516]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006060:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006064:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006068:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	2b80      	cmp	r3, #128	@ 0x80
 800606e:	d035      	beq.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006072:	2b80      	cmp	r3, #128	@ 0x80
 8006074:	d841      	bhi.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	2b60      	cmp	r3, #96	@ 0x60
 800607a:	d02a      	beq.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	2b60      	cmp	r3, #96	@ 0x60
 8006080:	d83b      	bhi.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	2b40      	cmp	r3, #64	@ 0x40
 8006086:	d009      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	2b40      	cmp	r3, #64	@ 0x40
 800608c:	d835      	bhi.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00c      	beq.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	2b20      	cmp	r3, #32
 8006098:	d012      	beq.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800609a:	e02e      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800609c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fb77 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060aa:	f001 b955 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ae:	f107 0318 	add.w	r3, r7, #24
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fcc8 	bl	8005a48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060bc:	f001 b94c 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fe19 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060ce:	f001 b943 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80060d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80060d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060d8:	f001 b93e 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060dc:	4b61      	ldr	r3, [pc, #388]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e8:	d103      	bne.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80060ea:	4b60      	ldr	r3, [pc, #384]	@ (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060ee:	f001 b933 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060f6:	f001 b92f 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060fe:	f001 b92b 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006106:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800610a:	430b      	orrs	r3, r1
 800610c:	d158      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800610e:	4b55      	ldr	r3, [pc, #340]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006110:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006114:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006118:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006120:	d03b      	beq.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006128:	d846      	bhi.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006130:	d02e      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006138:	d83e      	bhi.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006140:	d00b      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006148:	d836      	bhi.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00d      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006156:	d012      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006158:	e02e      	b.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800615a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fb18 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006168:	f001 b8f6 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616c:	f107 0318 	add.w	r3, r7, #24
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fc69 	bl	8005a48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800617a:	f001 b8ed 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617e:	f107 030c 	add.w	r3, r7, #12
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fdba 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800618c:	f001 b8e4 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006190:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006196:	f001 b8df 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800619a:	4b32      	ldr	r3, [pc, #200]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a6:	d103      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80061a8:	4b30      	ldr	r3, [pc, #192]	@ (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061ac:	f001 b8d4 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061b4:	f001 b8d0 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061bc:	f001 b8cc 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80061c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80061c8:	430b      	orrs	r3, r1
 80061ca:	d126      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80061cc:	4b25      	ldr	r3, [pc, #148]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80061d8:	4b22      	ldr	r3, [pc, #136]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e4:	d106      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80061ec:	4b1f      	ldr	r3, [pc, #124]	@ (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f0:	f001 b8b2 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80061f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006200:	d107      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006208:	d103      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800620a:	4b19      	ldr	r3, [pc, #100]	@ (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800620c:	637b      	str	r3, [r7, #52]	@ 0x34
 800620e:	f001 b8a3 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
 8006216:	f001 b89f 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800621a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006222:	430b      	orrs	r3, r1
 8006224:	d16e      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006226:	4b0f      	ldr	r3, [pc, #60]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800622c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006230:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006238:	d03d      	beq.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006240:	d85c      	bhi.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006248:	d014      	beq.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006250:	d854      	bhi.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01f      	beq.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800625e:	d012      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006260:	e04c      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006262:	bf00      	nop
 8006264:	46020c00 	.word	0x46020c00
 8006268:	0007a120 	.word	0x0007a120
 800626c:	00f42400 	.word	0x00f42400
 8006270:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fa8b 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006282:	f001 b869 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006286:	f107 0318 	add.w	r3, r7, #24
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fbdc 	bl	8005a48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006294:	f001 b860 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006298:	4ba7      	ldr	r3, [pc, #668]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a4:	d103      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80062a6:	4ba5      	ldr	r3, [pc, #660]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062aa:	f001 b855 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062b2:	f001 b851 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80062b6:	4ba0      	ldr	r3, [pc, #640]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d118      	bne.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062c2:	4b9d      	ldr	r3, [pc, #628]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80062ce:	4b9a      	ldr	r3, [pc, #616]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	0e1b      	lsrs	r3, r3, #24
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	e006      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80062da:	4b97      	ldr	r3, [pc, #604]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	0e1b      	lsrs	r3, r3, #24
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	4a95      	ldr	r2, [pc, #596]	@ (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062f0:	f001 b832 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062f8:	f001 b82e 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006300:	f001 b82a 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006308:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800630c:	430b      	orrs	r3, r1
 800630e:	d17f      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006310:	4b89      	ldr	r3, [pc, #548]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006312:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	2b00      	cmp	r3, #0
 8006320:	d165      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006322:	4b85      	ldr	r3, [pc, #532]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006328:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800632c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006334:	d034      	beq.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800633c:	d853      	bhi.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006344:	d00b      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800634c:	d84b      	bhi.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	2b00      	cmp	r3, #0
 8006352:	d016      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800635a:	d009      	beq.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800635c:	e043      	b.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800635e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fa16 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800636c:	f000 bff4 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006370:	f107 0318 	add.w	r3, r7, #24
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fb67 	bl	8005a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800637e:	f000 bfeb 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006382:	4b6d      	ldr	r3, [pc, #436]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800638e:	d103      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006390:	4b6a      	ldr	r3, [pc, #424]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006392:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006394:	f000 bfe0 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800639c:	f000 bfdc 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063a0:	4b65      	ldr	r3, [pc, #404]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d118      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063ac:	4b62      	ldr	r3, [pc, #392]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80063b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	0e1b      	lsrs	r3, r3, #24
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	e006      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80063c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063ca:	041b      	lsls	r3, r3, #16
 80063cc:	0e1b      	lsrs	r3, r3, #24
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	4a5b      	ldr	r2, [pc, #364]	@ (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80063d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80063da:	f000 bfbd 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063e2:	f000 bfb9 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063ea:	f000 bfb5 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063f4:	d108      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f9ca 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
 8006404:	f000 bfa8 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	637b      	str	r3, [r7, #52]	@ 0x34
 800640c:	f000 bfa4 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006414:	1e51      	subs	r1, r2, #1
 8006416:	430b      	orrs	r3, r1
 8006418:	d136      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800641a:	4b47      	ldr	r3, [pc, #284]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800641c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800642c:	f7fe fb44 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8006430:	6378      	str	r0, [r7, #52]	@ 0x34
 8006432:	f000 bf91 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	2b01      	cmp	r3, #1
 800643a:	d104      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800643c:	f7fe fa0c 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006440:	6378      	str	r0, [r7, #52]	@ 0x34
 8006442:	f000 bf89 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006446:	4b3c      	ldr	r3, [pc, #240]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006452:	d106      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	2b02      	cmp	r3, #2
 8006458:	d103      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800645a:	4b3a      	ldr	r3, [pc, #232]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800645c:	637b      	str	r3, [r7, #52]	@ 0x34
 800645e:	f000 bf7b 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006462:	4b35      	ldr	r3, [pc, #212]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b02      	cmp	r3, #2
 800646e:	d107      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	2b03      	cmp	r3, #3
 8006474:	d104      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647a:	637b      	str	r3, [r7, #52]	@ 0x34
 800647c:	f000 bf6c 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	637b      	str	r3, [r7, #52]	@ 0x34
 8006484:	f000 bf68 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648c:	1e91      	subs	r1, r2, #2
 800648e:	430b      	orrs	r3, r1
 8006490:	d136      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006492:	4b29      	ldr	r3, [pc, #164]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006498:	f003 030c 	and.w	r3, r3, #12
 800649c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064a4:	f7fe faf4 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 80064a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80064aa:	f000 bf55 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d104      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064b4:	f7fe f9d0 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 80064b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80064ba:	f000 bf4d 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80064be:	4b1e      	ldr	r3, [pc, #120]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ca:	d106      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d103      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80064d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80064d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d6:	f000 bf3f 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064da:	4b17      	ldr	r3, [pc, #92]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d107      	bne.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d104      	bne.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80064ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f4:	f000 bf30 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fc:	f000 bf2c 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006504:	1f11      	subs	r1, r2, #4
 8006506:	430b      	orrs	r3, r1
 8006508:	d13f      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800650a:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800650c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006510:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006514:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800651c:	f7fe fab8 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8006520:	6378      	str	r0, [r7, #52]	@ 0x34
 8006522:	f000 bf19 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	2b10      	cmp	r3, #16
 800652a:	d10d      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800652c:	f7fe f994 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006530:	6378      	str	r0, [r7, #52]	@ 0x34
 8006532:	f000 bf11 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006536:	bf00      	nop
 8006538:	46020c00 	.word	0x46020c00
 800653c:	02dc6c00 	.word	0x02dc6c00
 8006540:	0800a0cc 	.word	0x0800a0cc
 8006544:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006548:	4ba6      	ldr	r3, [pc, #664]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	2b20      	cmp	r3, #32
 800655a:	d103      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800655c:	4ba2      	ldr	r3, [pc, #648]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800655e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006560:	f000 befa 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006564:	4b9f      	ldr	r3, [pc, #636]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	2b30      	cmp	r3, #48	@ 0x30
 8006576:	d104      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657c:	637b      	str	r3, [r7, #52]	@ 0x34
 800657e:	f000 beeb 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	@ 0x34
 8006586:	f000 bee7 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800658a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658e:	f1a2 0108 	sub.w	r1, r2, #8
 8006592:	430b      	orrs	r3, r1
 8006594:	d136      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006596:	4b93      	ldr	r3, [pc, #588]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800659c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80065a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065a8:	f7fe fa72 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 80065ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80065ae:	f000 bed3 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	d104      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065b8:	f7fe f94e 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 80065bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80065be:	f000 becb 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80065c2:	4b88      	ldr	r3, [pc, #544]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ce:	d106      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d103      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80065d6:	4b84      	ldr	r3, [pc, #528]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065da:	f000 bebd 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80065de:	4b81      	ldr	r3, [pc, #516]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d107      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80065f0:	d104      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80065f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f8:	f000 beae 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006600:	f000 beaa 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006608:	f1a2 0110 	sub.w	r1, r2, #16
 800660c:	430b      	orrs	r3, r1
 800660e:	d139      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006610:	4b74      	ldr	r3, [pc, #464]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006622:	f7fe fa35 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8006626:	6378      	str	r0, [r7, #52]	@ 0x34
 8006628:	f000 be96 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006632:	d104      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006634:	f7fe f910 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006638:	6378      	str	r0, [r7, #52]	@ 0x34
 800663a:	f000 be8d 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800663e:	4b69      	ldr	r3, [pc, #420]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800664a:	d107      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006652:	d103      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006654:	4b64      	ldr	r3, [pc, #400]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
 8006658:	f000 be7e 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800665c:	4b61      	ldr	r3, [pc, #388]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800665e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d108      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006670:	d104      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
 8006678:	f000 be6e 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006680:	f000 be6a 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006688:	f1a2 0120 	sub.w	r1, r2, #32
 800668c:	430b      	orrs	r3, r1
 800668e:	d158      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006690:	4b54      	ldr	r3, [pc, #336]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800669c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80066a2:	f7fe fa1d 	bl	8004ae0 <HAL_RCC_GetPCLK3Freq>
 80066a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80066a8:	f000 be56 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d104      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066b2:	f7fe f8d1 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 80066b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80066b8:	f000 be4e 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80066bc:	4b49      	ldr	r3, [pc, #292]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c8:	d106      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d103      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80066d0:	4b45      	ldr	r3, [pc, #276]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d4:	f000 be40 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066d8:	4b42      	ldr	r3, [pc, #264]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d107      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d104      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80066ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f2:	f000 be31 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80066f6:	4b3b      	ldr	r3, [pc, #236]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d11b      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	2b04      	cmp	r3, #4
 8006706:	d118      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006708:	4b36      	ldr	r3, [pc, #216]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006714:	4b33      	ldr	r3, [pc, #204]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	0e1b      	lsrs	r3, r3, #24
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	e006      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006720:	4b30      	ldr	r3, [pc, #192]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006726:	041b      	lsls	r3, r3, #16
 8006728:	0e1b      	lsrs	r3, r3, #24
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	4a2f      	ldr	r2, [pc, #188]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
 8006736:	f000 be0f 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	637b      	str	r3, [r7, #52]	@ 0x34
 800673e:	f000 be0b 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006746:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800674a:	430b      	orrs	r3, r1
 800674c:	d172      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800674e:	4b25      	ldr	r3, [pc, #148]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006754:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006758:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006760:	d104      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe f879 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006766:	6378      	str	r0, [r7, #52]	@ 0x34
 8006768:	f000 bdf6 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006772:	d108      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006774:	f107 0318 	add.w	r3, r7, #24
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff f965 	bl	8005a48 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
 8006782:	f000 bde9 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800678c:	f7fe f966 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8006790:	6378      	str	r0, [r7, #52]	@ 0x34
 8006792:	f000 bde1 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800679c:	d128      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800679e:	4b11      	ldr	r3, [pc, #68]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d118      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067aa:	4b0e      	ldr	r3, [pc, #56]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80067b6:	4b0b      	ldr	r3, [pc, #44]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	0e1b      	lsrs	r3, r3, #24
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	e006      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80067c2:	4b08      	ldr	r3, [pc, #32]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067c8:	041b      	lsls	r3, r3, #16
 80067ca:	0e1b      	lsrs	r3, r3, #24
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	4a06      	ldr	r2, [pc, #24]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d8:	f000 bdbe 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e0:	f000 bdba 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80067e4:	46020c00 	.word	0x46020c00
 80067e8:	00f42400 	.word	0x00f42400
 80067ec:	0800a0cc 	.word	0x0800a0cc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067f0:	4baf      	ldr	r3, [pc, #700]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067fc:	d107      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006804:	d103      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8006806:	4bab      	ldr	r3, [pc, #684]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006808:	637b      	str	r3, [r7, #52]	@ 0x34
 800680a:	f000 bda5 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800680e:	4ba8      	ldr	r3, [pc, #672]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800681a:	d107      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800681c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006822:	d103      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8006824:	4ba3      	ldr	r3, [pc, #652]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006826:	637b      	str	r3, [r7, #52]	@ 0x34
 8006828:	f000 bd96 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006830:	f000 bd92 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006838:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800683c:	430b      	orrs	r3, r1
 800683e:	d158      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006840:	4b9b      	ldr	r3, [pc, #620]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006842:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	2b04      	cmp	r3, #4
 8006850:	d84b      	bhi.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8006852:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	08006891 	.word	0x08006891
 800685c:	0800686d 	.word	0x0800686d
 8006860:	0800687f 	.word	0x0800687f
 8006864:	0800689b 	.word	0x0800689b
 8006868:	080068a5 	.word	0x080068a5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800686c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe ff8f 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687a:	f000 bd6d 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800687e:	f107 030c 	add.w	r3, r7, #12
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fa3a 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800688c:	f000 bd64 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006890:	f7fe f8e4 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8006894:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006896:	f000 bd5f 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800689a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068a0:	f000 bd5a 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068a4:	4b82      	ldr	r3, [pc, #520]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d118      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068b0:	4b7f      	ldr	r3, [pc, #508]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80068bc:	4b7c      	ldr	r3, [pc, #496]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	0e1b      	lsrs	r3, r3, #24
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	e006      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80068c8:	4b79      	ldr	r3, [pc, #484]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068ce:	041b      	lsls	r3, r3, #16
 80068d0:	0e1b      	lsrs	r3, r3, #24
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	4a78      	ldr	r2, [pc, #480]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068de:	f000 bd3b 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068e6:	f000 bd37 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ee:	f000 bd33 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80068f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80068fa:	430b      	orrs	r3, r1
 80068fc:	d167      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80068fe:	4b6c      	ldr	r3, [pc, #432]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006904:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006908:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006910:	d036      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006918:	d855      	bhi.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006920:	d029      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006928:	d84d      	bhi.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006930:	d013      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006938:	d845      	bhi.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d015      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006946:	d13e      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800694c:	4618      	mov	r0, r3
 800694e:	f7fe ff21 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006956:	f000 bcff 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800695a:	f107 030c 	add.w	r3, r7, #12
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff f9cc 	bl	8005cfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006968:	f000 bcf6 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800696c:	f7fe f876 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8006970:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006972:	f000 bcf1 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006976:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800697c:	f000 bcec 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006980:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b20      	cmp	r3, #32
 800698a:	d118      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800698c:	4b48      	ldr	r3, [pc, #288]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006998:	4b45      	ldr	r3, [pc, #276]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	0e1b      	lsrs	r3, r3, #24
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	e006      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80069a4:	4b42      	ldr	r3, [pc, #264]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80069a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	0e1b      	lsrs	r3, r3, #24
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	4a41      	ldr	r2, [pc, #260]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069ba:	f000 bccd 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069c2:	f000 bcc9 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ca:	f000 bcc5 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80069ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80069d6:	430b      	orrs	r3, r1
 80069d8:	d14c      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80069da:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80069dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fe f850 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 80069f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80069f2:	f000 bcb1 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069fc:	d104      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069fe:	f7fd ff2b 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006a02:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a04:	f000 bca8 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a08:	4b29      	ldr	r3, [pc, #164]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a14:	d107      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a1c:	d103      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006a1e:	4b25      	ldr	r3, [pc, #148]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a22:	f000 bc99 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006a26:	4b22      	ldr	r3, [pc, #136]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d11c      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a38:	d118      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006a46:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	0e1b      	lsrs	r3, r3, #24
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006a52:	4b17      	ldr	r3, [pc, #92]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	0e1b      	lsrs	r3, r3, #24
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	4a15      	ldr	r2, [pc, #84]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a68:	f000 bc76 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a70:	f000 bc72 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a78:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	d153      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a80:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a86:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a92:	f7fd fffd 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8006a96:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a98:	f000 bc5e 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa2:	d10b      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006aa4:	f7fd fed8 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006aa8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006aaa:	f000 bc55 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006aae:	bf00      	nop
 8006ab0:	46020c00 	.word	0x46020c00
 8006ab4:	00f42400 	.word	0x00f42400
 8006ab8:	0800a0cc 	.word	0x0800a0cc
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006abc:	4ba1      	ldr	r3, [pc, #644]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac8:	d107      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ad0:	d103      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8006ad2:	4b9d      	ldr	r3, [pc, #628]	@ (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad6:	f000 bc3f 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006ada:	4b9a      	ldr	r3, [pc, #616]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d11c      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006aec:	d118      	bne.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aee:	4b95      	ldr	r3, [pc, #596]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006afa:	4b92      	ldr	r3, [pc, #584]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	0e1b      	lsrs	r3, r3, #24
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006b06:	4b8f      	ldr	r3, [pc, #572]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	0e1b      	lsrs	r3, r3, #24
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	4a8d      	ldr	r2, [pc, #564]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b1c:	f000 bc1c 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b24:	f000 bc18 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b30:	430b      	orrs	r3, r1
 8006b32:	d151      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b34:	4b83      	ldr	r3, [pc, #524]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b3e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b44:	d024      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b4a:	d842      	bhi.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	2b80      	cmp	r3, #128	@ 0x80
 8006b50:	d00d      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2b80      	cmp	r3, #128	@ 0x80
 8006b56:	d83c      	bhi.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2b40      	cmp	r3, #64	@ 0x40
 8006b62:	d011      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006b64:	e035      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006b66:	f7fd ffbb 	bl	8004ae0 <HAL_RCC_GetPCLK3Freq>
 8006b6a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b6c:	e3f4      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b6e:	4b75      	ldr	r3, [pc, #468]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8006b7c:	4b72      	ldr	r3, [pc, #456]	@ (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006b7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b80:	e3ea      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b86:	e3e7      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006b88:	f7fd fe66 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006b8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b8e:	e3e3      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b90:	4b6c      	ldr	r3, [pc, #432]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d117      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b9c:	4b69      	ldr	r3, [pc, #420]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8006ba8:	4b66      	ldr	r3, [pc, #408]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	0e1b      	lsrs	r3, r3, #24
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	e006      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006bb4:	4b63      	ldr	r3, [pc, #396]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	0e1b      	lsrs	r3, r3, #24
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	4a62      	ldr	r2, [pc, #392]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bca:	e3c5      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd0:	e3c2      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd6:	e3bf      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bdc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006be0:	430b      	orrs	r3, r1
 8006be2:	d147      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006be4:	4b57      	ldr	r3, [pc, #348]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006bee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bf6:	f7fd ff4b 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8006bfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bfc:	e3ac      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c04:	d103      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fd fe27 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006c0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c0c:	e3a4      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1a:	d106      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c22:	d102      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8006c24:	4b48      	ldr	r3, [pc, #288]	@ (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c28:	e396      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006c2a:	4b46      	ldr	r3, [pc, #280]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0320 	and.w	r3, r3, #32
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d11b      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c3c:	d117      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c3e:	4b41      	ldr	r3, [pc, #260]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	0e1b      	lsrs	r3, r3, #24
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8006c56:	4b3b      	ldr	r3, [pc, #236]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	0e1b      	lsrs	r3, r3, #24
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	4a39      	ldr	r2, [pc, #228]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6c:	e374      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c72:	e371      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c78:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	d16a      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006c80:	4b30      	ldr	r3, [pc, #192]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d120      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c92:	4b2c      	ldr	r3, [pc, #176]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d117      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c9e:	4b29      	ldr	r3, [pc, #164]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8006caa:	4b26      	ldr	r3, [pc, #152]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	0e1b      	lsrs	r3, r3, #24
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	e006      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006cb6:	4b23      	ldr	r3, [pc, #140]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cbc:	041b      	lsls	r3, r3, #16
 8006cbe:	0e1b      	lsrs	r3, r3, #24
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	4a21      	ldr	r2, [pc, #132]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ccc:	e344      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd2:	e341      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ce2:	d112      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cea:	d10e      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cec:	4b15      	ldr	r3, [pc, #84]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8006cfc:	23fa      	movs	r3, #250	@ 0xfa
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d00:	e32a      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d08:	e326      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d16:	d106      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d1e:	d102      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006d20:	4b09      	ldr	r3, [pc, #36]	@ (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d24:	e318      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006d26:	4b07      	ldr	r3, [pc, #28]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d10d      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d3a:	d109      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8006d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d42:	e309      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006d44:	46020c00 	.word	0x46020c00
 8006d48:	00f42400 	.word	0x00f42400
 8006d4c:	0800a0cc 	.word	0x0800a0cc
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d54:	e300      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d5a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	d164      	bne.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006d62:	4ba2      	ldr	r3, [pc, #648]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d120      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d74:	4b9d      	ldr	r3, [pc, #628]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d117      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d80:	4b9a      	ldr	r3, [pc, #616]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8006d8c:	4b97      	ldr	r3, [pc, #604]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	0e1b      	lsrs	r3, r3, #24
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	e006      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006d98:	4b94      	ldr	r3, [pc, #592]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	0e1b      	lsrs	r3, r3, #24
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	4a92      	ldr	r2, [pc, #584]	@ (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dae:	e2d3      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db4:	e2d0      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006db6:	4b8d      	ldr	r3, [pc, #564]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dc4:	d112      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dcc:	d10e      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dce:	4b87      	ldr	r3, [pc, #540]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ddc:	d102      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8006dde:	23fa      	movs	r3, #250	@ 0xfa
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006de2:	e2b9      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006de4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dea:	e2b5      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006dec:	4b7f      	ldr	r3, [pc, #508]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df8:	d106      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e00:	d102      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8006e02:	4b7c      	ldr	r3, [pc, #496]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e06:	e2a7      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006e08:	4b78      	ldr	r3, [pc, #480]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e1c:	d103      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8006e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e24:	e298      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2a:	e295      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e30:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006e34:	430b      	orrs	r3, r1
 8006e36:	d147      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e38:	4b6c      	ldr	r3, [pc, #432]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e3e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006e42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d103      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e4a:	f7fd fe21 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8006e4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e50:	e282      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006e52:	4b66      	ldr	r3, [pc, #408]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e60:	d112      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e68:	d10e      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e6a:	4b60      	ldr	r3, [pc, #384]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e78:	d102      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8006e7a:	23fa      	movs	r3, #250	@ 0xfa
 8006e7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e7e:	e26b      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e86:	e267      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006e88:	4b58      	ldr	r3, [pc, #352]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e94:	d106      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e9c:	d102      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8006e9e:	4b55      	ldr	r3, [pc, #340]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea2:	e259      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006ea4:	4b51      	ldr	r3, [pc, #324]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d107      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006eb8:	d103      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8006eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec0:	e24a      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec6:	e247      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ecc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	d12d      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006ed4:	4b45      	ldr	r3, [pc, #276]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eda:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006ede:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006ee0:	4b42      	ldr	r3, [pc, #264]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eec:	d105      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8006ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef8:	e22e      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f00:	d107      	bne.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fc44 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f10:	e222      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f18:	d107      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f1a:	f107 0318 	add.w	r3, r7, #24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fd92 	bl	8005a48 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f28:	e216      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2e:	e213      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f34:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	d15d      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f46:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f4e:	d028      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f56:	d845      	bhi.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f5e:	d013      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f66:	d83d      	bhi.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f74:	d004      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006f76:	e035      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006f78:	f7fd fd9e 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8006f7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f7e:	e1eb      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f80:	f7fd fc6a 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8006f84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f86:	e1e7      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f88:	4b18      	ldr	r3, [pc, #96]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f94:	d102      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006f96:	4b17      	ldr	r3, [pc, #92]	@ (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f9a:	e1dd      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fa0:	e1da      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fa2:	4b12      	ldr	r3, [pc, #72]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d117      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fae:	4b0f      	ldr	r3, [pc, #60]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8006fba:	4b0c      	ldr	r3, [pc, #48]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	0e1b      	lsrs	r3, r3, #24
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	e006      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8006fc6:	4b09      	ldr	r3, [pc, #36]	@ (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fcc:	041b      	lsls	r3, r3, #16
 8006fce:	0e1b      	lsrs	r3, r3, #24
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	4a06      	ldr	r2, [pc, #24]	@ (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fdc:	e1bc      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fe2:	e1b9      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fe8:	e1b6      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006fea:	bf00      	nop
 8006fec:	46020c00 	.word	0x46020c00
 8006ff0:	0800a0cc 	.word	0x0800a0cc
 8006ff4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007000:	430b      	orrs	r3, r1
 8007002:	d156      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007004:	4ba5      	ldr	r3, [pc, #660]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800700a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800700e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007016:	d028      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800701e:	d845      	bhi.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007026:	d013      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800702e:	d83d      	bhi.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800703c:	d004      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800703e:	e035      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007040:	f7fd fd26 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8007044:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007046:	e187      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007048:	f7fd fc06 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 800704c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800704e:	e183      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007050:	4b92      	ldr	r3, [pc, #584]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800705c:	d102      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800705e:	4b90      	ldr	r3, [pc, #576]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007060:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007062:	e179      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007068:	e176      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800706a:	4b8c      	ldr	r3, [pc, #560]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d117      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007076:	4b89      	ldr	r3, [pc, #548]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007082:	4b86      	ldr	r3, [pc, #536]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	0e1b      	lsrs	r3, r3, #24
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	e006      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800708e:	4b83      	ldr	r3, [pc, #524]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	0e1b      	lsrs	r3, r3, #24
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	4a81      	ldr	r2, [pc, #516]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800709e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070a4:	e158      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070aa:	e155      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b0:	e152      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80070b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80070ba:	430b      	orrs	r3, r1
 80070bc:	d177      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80070be:	4b77      	ldr	r3, [pc, #476]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070c4:	f003 0318 	and.w	r3, r3, #24
 80070c8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	2b18      	cmp	r3, #24
 80070ce:	d86b      	bhi.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80070d0:	a201      	add	r2, pc, #4	@ (adr r2, 80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	0800713d 	.word	0x0800713d
 80070dc:	080071a9 	.word	0x080071a9
 80070e0:	080071a9 	.word	0x080071a9
 80070e4:	080071a9 	.word	0x080071a9
 80070e8:	080071a9 	.word	0x080071a9
 80070ec:	080071a9 	.word	0x080071a9
 80070f0:	080071a9 	.word	0x080071a9
 80070f4:	080071a9 	.word	0x080071a9
 80070f8:	08007145 	.word	0x08007145
 80070fc:	080071a9 	.word	0x080071a9
 8007100:	080071a9 	.word	0x080071a9
 8007104:	080071a9 	.word	0x080071a9
 8007108:	080071a9 	.word	0x080071a9
 800710c:	080071a9 	.word	0x080071a9
 8007110:	080071a9 	.word	0x080071a9
 8007114:	080071a9 	.word	0x080071a9
 8007118:	0800714d 	.word	0x0800714d
 800711c:	080071a9 	.word	0x080071a9
 8007120:	080071a9 	.word	0x080071a9
 8007124:	080071a9 	.word	0x080071a9
 8007128:	080071a9 	.word	0x080071a9
 800712c:	080071a9 	.word	0x080071a9
 8007130:	080071a9 	.word	0x080071a9
 8007134:	080071a9 	.word	0x080071a9
 8007138:	08007167 	.word	0x08007167
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800713c:	f7fd fcd0 	bl	8004ae0 <HAL_RCC_GetPCLK3Freq>
 8007140:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007142:	e109      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007144:	f7fd fb88 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8007148:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800714a:	e105      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800714c:	4b53      	ldr	r3, [pc, #332]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007158:	d102      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800715a:	4b51      	ldr	r3, [pc, #324]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800715e:	e0fb      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007164:	e0f8      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007166:	4b4d      	ldr	r3, [pc, #308]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b20      	cmp	r3, #32
 8007170:	d117      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007172:	4b4a      	ldr	r3, [pc, #296]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d005      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800717e:	4b47      	ldr	r3, [pc, #284]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	0e1b      	lsrs	r3, r3, #24
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	e006      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800718a:	4b44      	ldr	r3, [pc, #272]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800718c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	0e1b      	lsrs	r3, r3, #24
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	4a42      	ldr	r2, [pc, #264]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800719a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071a0:	e0da      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071a6:	e0d7      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ac:	e0d4      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80071ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80071b6:	430b      	orrs	r3, r1
 80071b8:	d155      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80071ba:	4b38      	ldr	r3, [pc, #224]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80071c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071cc:	d013      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071d4:	d844      	bhi.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071dc:	d013      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e4:	d83c      	bhi.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d014      	beq.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f2:	d014      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80071f4:	e034      	b.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f6:	f107 0318 	add.w	r3, r7, #24
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fc24 	bl	8005a48 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007204:	e0a8      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fac2 	bl	8005794 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007214:	e0a0      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007216:	f7fd fb1f 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 800721a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800721c:	e09c      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800721e:	4b1f      	ldr	r3, [pc, #124]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b20      	cmp	r3, #32
 8007228:	d117      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800722a:	4b1c      	ldr	r3, [pc, #112]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007236:	4b19      	ldr	r3, [pc, #100]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0e1b      	lsrs	r3, r3, #24
 800723c:	f003 030f 	and.w	r3, r3, #15
 8007240:	e006      	b.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007242:	4b16      	ldr	r3, [pc, #88]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007248:	041b      	lsls	r3, r3, #16
 800724a:	0e1b      	lsrs	r3, r3, #24
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	4a14      	ldr	r2, [pc, #80]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007258:	e07e      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800725e:	e07b      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007264:	e078      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800726e:	430b      	orrs	r3, r1
 8007270:	d138      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007272:	4b0a      	ldr	r3, [pc, #40]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800727c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800727e:	4b07      	ldr	r3, [pc, #28]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b02      	cmp	r3, #2
 800728a:	d10d      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007296:	637b      	str	r3, [r7, #52]	@ 0x34
 8007298:	e05e      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800729a:	bf00      	nop
 800729c:	46020c00 	.word	0x46020c00
 80072a0:	00f42400 	.word	0x00f42400
 80072a4:	0800a0cc 	.word	0x0800a0cc
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80072a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80072aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072b6:	d112      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072be:	d10e      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072c0:	4b28      	ldr	r3, [pc, #160]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80072c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ce:	d102      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 80072d0:	23fa      	movs	r3, #250	@ 0xfa
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072d4:	e040      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80072d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072dc:	e03c      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e2:	e039      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80072e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80072ec:	430b      	orrs	r3, r1
 80072ee:	d131      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80072f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80072f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80072fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80072fc:	4b19      	ldr	r3, [pc, #100]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007308:	d105      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007310:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007312:	637b      	str	r3, [r7, #52]	@ 0x34
 8007314:	e020      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007316:	4b13      	ldr	r3, [pc, #76]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007322:	d106      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732a:	d102      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800732c:	4b0f      	ldr	r3, [pc, #60]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	e012      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007332:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733e:	d106      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007346:	d102      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
 800734c:	e004      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
 8007352:	e001      	b.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800735a:	4618      	mov	r0, r3
 800735c:	3738      	adds	r7, #56	@ 0x38
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	46020c00 	.word	0x46020c00
 8007368:	02dc6c00 	.word	0x02dc6c00
 800736c:	016e3600 	.word	0x016e3600
 8007370:	00f42400 	.word	0x00f42400

08007374 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800737c:	4b47      	ldr	r3, [pc, #284]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a46      	ldr	r2, [pc, #280]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007382:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007386:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007388:	f7fa fd8a 	bl	8001ea0 <HAL_GetTick>
 800738c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800738e:	e008      	b.n	80073a2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007390:	f7fa fd86 	bl	8001ea0 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e077      	b.n	8007492 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073a2:	4b3e      	ldr	r3, [pc, #248]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80073ae:	4b3b      	ldr	r3, [pc, #236]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6811      	ldr	r1, [r2, #0]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6852      	ldr	r2, [r2, #4]
 80073c2:	3a01      	subs	r2, #1
 80073c4:	0212      	lsls	r2, r2, #8
 80073c6:	430a      	orrs	r2, r1
 80073c8:	4934      	ldr	r1, [pc, #208]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80073ce:	4b33      	ldr	r3, [pc, #204]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 80073d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073d2:	4b33      	ldr	r3, [pc, #204]	@ (80074a0 <RCCEx_PLL2_Config+0x12c>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6892      	ldr	r2, [r2, #8]
 80073da:	3a01      	subs	r2, #1
 80073dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68d2      	ldr	r2, [r2, #12]
 80073e4:	3a01      	subs	r2, #1
 80073e6:	0252      	lsls	r2, r2, #9
 80073e8:	b292      	uxth	r2, r2
 80073ea:	4311      	orrs	r1, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6912      	ldr	r2, [r2, #16]
 80073f0:	3a01      	subs	r2, #1
 80073f2:	0412      	lsls	r2, r2, #16
 80073f4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80073f8:	4311      	orrs	r1, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6952      	ldr	r2, [r2, #20]
 80073fe:	3a01      	subs	r2, #1
 8007400:	0612      	lsls	r2, r2, #24
 8007402:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007406:	430a      	orrs	r2, r1
 8007408:	4924      	ldr	r1, [pc, #144]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 800740a:	4313      	orrs	r3, r2
 800740c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800740e:	4b23      	ldr	r3, [pc, #140]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	f023 020c 	bic.w	r2, r3, #12
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	4920      	ldr	r1, [pc, #128]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 800741c:	4313      	orrs	r3, r2
 800741e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007420:	4b1e      	ldr	r3, [pc, #120]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	491c      	ldr	r1, [pc, #112]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 800742a:	4313      	orrs	r3, r2
 800742c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800742e:	4b1b      	ldr	r3, [pc, #108]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	4a1a      	ldr	r2, [pc, #104]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007434:	f023 0310 	bic.w	r3, r3, #16
 8007438:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800743a:	4b18      	ldr	r3, [pc, #96]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007442:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	69d2      	ldr	r2, [r2, #28]
 800744a:	00d2      	lsls	r2, r2, #3
 800744c:	4913      	ldr	r1, [pc, #76]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 800744e:	4313      	orrs	r3, r2
 8007450:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007452:	4b12      	ldr	r3, [pc, #72]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007456:	4a11      	ldr	r2, [pc, #68]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007458:	f043 0310 	orr.w	r3, r3, #16
 800745c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800745e:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a0e      	ldr	r2, [pc, #56]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007464:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007468:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800746a:	f7fa fd19 	bl	8001ea0 <HAL_GetTick>
 800746e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007470:	e008      	b.n	8007484 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007472:	f7fa fd15 	bl	8001ea0 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e006      	b.n	8007492 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007484:	4b05      	ldr	r3, [pc, #20]	@ (800749c <RCCEx_PLL2_Config+0x128>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f0      	beq.n	8007472 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0

}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	46020c00 	.word	0x46020c00
 80074a0:	80800000 	.word	0x80800000

080074a4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80074ac:	4b47      	ldr	r3, [pc, #284]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a46      	ldr	r2, [pc, #280]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 80074b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074b8:	f7fa fcf2 	bl	8001ea0 <HAL_GetTick>
 80074bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074be:	e008      	b.n	80074d2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074c0:	f7fa fcee 	bl	8001ea0 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e077      	b.n	80075c2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d2:	4b3e      	ldr	r3, [pc, #248]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f0      	bne.n	80074c0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80074de:	4b3b      	ldr	r3, [pc, #236]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6811      	ldr	r1, [r2, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6852      	ldr	r2, [r2, #4]
 80074f2:	3a01      	subs	r2, #1
 80074f4:	0212      	lsls	r2, r2, #8
 80074f6:	430a      	orrs	r2, r1
 80074f8:	4934      	ldr	r1, [pc, #208]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	630b      	str	r3, [r1, #48]	@ 0x30
 80074fe:	4b33      	ldr	r3, [pc, #204]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007502:	4b33      	ldr	r3, [pc, #204]	@ (80075d0 <RCCEx_PLL3_Config+0x12c>)
 8007504:	4013      	ands	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6892      	ldr	r2, [r2, #8]
 800750a:	3a01      	subs	r2, #1
 800750c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	68d2      	ldr	r2, [r2, #12]
 8007514:	3a01      	subs	r2, #1
 8007516:	0252      	lsls	r2, r2, #9
 8007518:	b292      	uxth	r2, r2
 800751a:	4311      	orrs	r1, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6912      	ldr	r2, [r2, #16]
 8007520:	3a01      	subs	r2, #1
 8007522:	0412      	lsls	r2, r2, #16
 8007524:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007528:	4311      	orrs	r1, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6952      	ldr	r2, [r2, #20]
 800752e:	3a01      	subs	r2, #1
 8007530:	0612      	lsls	r2, r2, #24
 8007532:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007536:	430a      	orrs	r2, r1
 8007538:	4924      	ldr	r1, [pc, #144]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 800753a:	4313      	orrs	r3, r2
 800753c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800753e:	4b23      	ldr	r3, [pc, #140]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	f023 020c 	bic.w	r2, r3, #12
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	4920      	ldr	r1, [pc, #128]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 800754c:	4313      	orrs	r3, r2
 800754e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007550:	4b1e      	ldr	r3, [pc, #120]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	491c      	ldr	r1, [pc, #112]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 800755a:	4313      	orrs	r3, r2
 800755c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800755e:	4b1b      	ldr	r3, [pc, #108]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007562:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007564:	f023 0310 	bic.w	r3, r3, #16
 8007568:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800756a:	4b18      	ldr	r3, [pc, #96]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 800756c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007572:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	69d2      	ldr	r2, [r2, #28]
 800757a:	00d2      	lsls	r2, r2, #3
 800757c:	4913      	ldr	r1, [pc, #76]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 800757e:	4313      	orrs	r3, r2
 8007580:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007582:	4b12      	ldr	r3, [pc, #72]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007586:	4a11      	ldr	r2, [pc, #68]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007588:	f043 0310 	orr.w	r3, r3, #16
 800758c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800758e:	4b0f      	ldr	r3, [pc, #60]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a0e      	ldr	r2, [pc, #56]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 8007594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007598:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800759a:	f7fa fc81 	bl	8001ea0 <HAL_GetTick>
 800759e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075a0:	e008      	b.n	80075b4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075a2:	f7fa fc7d 	bl	8001ea0 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075b4:	4b05      	ldr	r3, [pc, #20]	@ (80075cc <RCCEx_PLL3_Config+0x128>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	46020c00 	.word	0x46020c00
 80075d0:	80800000 	.word	0x80800000

080075d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e0fb      	b.n	80077de <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a7f      	ldr	r2, [pc, #508]	@ (80077e8 <HAL_SPI_Init+0x214>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_SPI_Init+0x26>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a7d      	ldr	r2, [pc, #500]	@ (80077ec <HAL_SPI_Init+0x218>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	e000      	b.n	80075fc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80075fa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a78      	ldr	r2, [pc, #480]	@ (80077e8 <HAL_SPI_Init+0x214>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d004      	beq.n	8007616 <HAL_SPI_Init+0x42>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a76      	ldr	r2, [pc, #472]	@ (80077ec <HAL_SPI_Init+0x218>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d105      	bne.n	8007622 <HAL_SPI_Init+0x4e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b0f      	cmp	r3, #15
 800761c:	d901      	bls.n	8007622 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0dd      	b.n	80077de <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fe80 	bl	8008328 <SPI_GetPacketSize>
 8007628:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a6e      	ldr	r2, [pc, #440]	@ (80077e8 <HAL_SPI_Init+0x214>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d004      	beq.n	800763e <HAL_SPI_Init+0x6a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a6c      	ldr	r2, [pc, #432]	@ (80077ec <HAL_SPI_Init+0x218>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d102      	bne.n	8007644 <HAL_SPI_Init+0x70>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d816      	bhi.n	8007672 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007648:	4a69      	ldr	r2, [pc, #420]	@ (80077f0 <HAL_SPI_Init+0x21c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a68      	ldr	r2, [pc, #416]	@ (80077f4 <HAL_SPI_Init+0x220>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_SPI_Init+0x98>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a66      	ldr	r2, [pc, #408]	@ (80077f8 <HAL_SPI_Init+0x224>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_SPI_Init+0x98>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a65      	ldr	r2, [pc, #404]	@ (80077fc <HAL_SPI_Init+0x228>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d104      	bne.n	8007676 <HAL_SPI_Init+0xa2>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b10      	cmp	r3, #16
 8007670:	d901      	bls.n	8007676 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0b3      	b.n	80077de <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7f9 fe5e 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0201 	bic.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80076b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076bc:	d119      	bne.n	80076f2 <HAL_SPI_Init+0x11e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076c6:	d103      	bne.n	80076d0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d008      	beq.n	80076e2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10c      	bne.n	80076f2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80076dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076e0:	d107      	bne.n	80076f2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00f      	beq.n	800771e <HAL_SPI_Init+0x14a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b06      	cmp	r3, #6
 8007704:	d90b      	bls.n	800771e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e007      	b.n	800772e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800772c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69da      	ldr	r2, [r3, #28]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	431a      	orrs	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007740:	ea42 0103 	orr.w	r1, r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	431a      	orrs	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	431a      	orrs	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800779a:	ea42 0103 	orr.w	r1, r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	46002000 	.word	0x46002000
 80077ec:	56002000 	.word	0x56002000
 80077f0:	40013000 	.word	0x40013000
 80077f4:	50013000 	.word	0x50013000
 80077f8:	40003800 	.word	0x40003800
 80077fc:	50003800 	.word	0x50003800

08007800 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a91      	ldr	r2, [pc, #580]	@ (8007a58 <HAL_SPI_TransmitReceive_DMA+0x258>)
 8007814:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b01      	cmp	r3, #1
 8007820:	d001      	beq.n	8007826 <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8007822:	2302      	movs	r3, #2
 8007824:	e274      	b.n	8007d10 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_SPI_TransmitReceive_DMA+0x38>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e269      	b.n	8007d10 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_SPI_TransmitReceive_DMA+0x4a>
 8007846:	2302      	movs	r3, #2
 8007848:	e262      	b.n	8007d10 <HAL_SPI_TransmitReceive_DMA+0x510>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2205      	movs	r2, #5
 8007856:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	887a      	ldrh	r2, [r7, #2]
 800786c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	887a      	ldrh	r2, [r7, #2]
 8007874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	887a      	ldrh	r2, [r7, #2]
 8007882:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	887a      	ldrh	r2, [r7, #2]
 800788a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80078a8:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80078b8:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	d920      	bls.n	8007904 <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078c8:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 80078ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ce:	d105      	bne.n	80078dc <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d6:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d013      	beq.n	8007904 <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 80078e0:	4a5e      	ldr	r2, [pc, #376]	@ (8007a5c <HAL_SPI_TransmitReceive_DMA+0x25c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01e      	beq.n	8007924 <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a5d      	ldr	r2, [pc, #372]	@ (8007a60 <HAL_SPI_TransmitReceive_DMA+0x260>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d019      	beq.n	8007924 <HAL_SPI_TransmitReceive_DMA+0x124>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a5b      	ldr	r2, [pc, #364]	@ (8007a64 <HAL_SPI_TransmitReceive_DMA+0x264>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d014      	beq.n	8007924 <HAL_SPI_TransmitReceive_DMA+0x124>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a5a      	ldr	r2, [pc, #360]	@ (8007a68 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00f      	beq.n	8007924 <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007908:	2b07      	cmp	r3, #7
 800790a:	d911      	bls.n	8007930 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007912:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800791e:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e1ef      	b.n	8007d10 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	2b07      	cmp	r3, #7
 8007936:	d842      	bhi.n	80079be <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d109      	bne.n	8007958 <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3301      	adds	r3, #1
 800794e:	105b      	asrs	r3, r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d109      	bne.n	8007978 <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800796a:	b29b      	uxth	r3, r3
 800796c:	3303      	adds	r3, #3
 800796e:	109b      	asrs	r3, r3, #2
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007984:	d109      	bne.n	800799a <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800798c:	b29b      	uxth	r3, r3
 800798e:	3301      	adds	r3, #1
 8007990:	105b      	asrs	r3, r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079a6:	d12f      	bne.n	8007a08 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3303      	adds	r3, #3
 80079b2:	109b      	asrs	r3, r3, #2
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80079bc:	e024      	b.n	8007a08 <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	2b0f      	cmp	r3, #15
 80079c4:	d820      	bhi.n	8007a08 <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d109      	bne.n	80079e6 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3301      	adds	r3, #1
 80079dc:	105b      	asrs	r3, r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079f2:	d109      	bne.n	8007a08 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3301      	adds	r3, #1
 80079fe:	105b      	asrs	r3, r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a0e:	4a17      	ldr	r2, [pc, #92]	@ (8007a6c <HAL_SPI_TransmitReceive_DMA+0x26c>)
 8007a10:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a18:	4a15      	ldr	r2, [pc, #84]	@ (8007a70 <HAL_SPI_TransmitReceive_DMA+0x270>)
 8007a1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a22:	4a14      	ldr	r2, [pc, #80]	@ (8007a74 <HAL_SPI_TransmitReceive_DMA+0x274>)
 8007a24:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b07      	cmp	r3, #7
 8007a36:	d804      	bhi.n	8007a42 <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	887a      	ldrh	r2, [r7, #2]
 8007a3c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007a40:	e020      	b.n	8007a84 <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	2b0f      	cmp	r3, #15
 8007a48:	d816      	bhi.n	8007a78 <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 8007a4a:	887b      	ldrh	r3, [r7, #2]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007a56:	e015      	b.n	8007a84 <HAL_SPI_TransmitReceive_DMA+0x284>
 8007a58:	46002000 	.word	0x46002000
 8007a5c:	40013000 	.word	0x40013000
 8007a60:	50013000 	.word	0x50013000
 8007a64:	40003800 	.word	0x40003800
 8007a68:	50003800 	.word	0x50003800
 8007a6c:	08008153 	.word	0x08008153
 8007a70:	08008101 	.word	0x08008101
 8007a74:	0800816f 	.word	0x0800816f
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 8007a78:	887b      	ldrh	r3, [r7, #2]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d02d      	beq.n	8007af0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d024      	beq.n	8007aea <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fb fa38 	bl	8002f54 <HAL_DMAEx_List_Start_IT>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]
 8007ae8:	e014      	b.n	8007b14 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
 8007aee:	e011      	b.n	8007b14 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3330      	adds	r3, #48	@ 0x30
 8007afc:	4619      	mov	r1, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b02:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007b0a:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007b0c:	f7fa fcce 	bl	80024ac <HAL_DMA_Start_IT>
 8007b10:	4603      	mov	r3, r0
 8007b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d011      	beq.n	8007b3e <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b20:	f043 0210 	orr.w	r2, r3, #16
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e0e8      	b.n	8007d10 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b4c:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b54:	2200      	movs	r2, #0
 8007b56:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5e:	2200      	movs	r2, #0
 8007b60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b68:	2200      	movs	r2, #0
 8007b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b72:	4a69      	ldr	r2, [pc, #420]	@ (8007d18 <HAL_SPI_TransmitReceive_DMA+0x518>)
 8007b74:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2b07      	cmp	r3, #7
 8007b7c:	d804      	bhi.n	8007b88 <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	887a      	ldrh	r2, [r7, #2]
 8007b82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b86:	e010      	b.n	8007baa <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b0f      	cmp	r3, #15
 8007b8e:	d806      	bhi.n	8007b9e <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 8007b90:	887b      	ldrh	r3, [r7, #2]
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b9c:	e005      	b.n	8007baa <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8007b9e:	887b      	ldrh	r3, [r7, #2]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d02d      	beq.n	8007c16 <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d024      	beq.n	8007c10 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f103 0220 	add.w	r2, r3, #32
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fb f9a5 	bl	8002f54 <HAL_DMAEx_List_Start_IT>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	75fb      	strb	r3, [r7, #23]
 8007c0e:	e014      	b.n	8007c3a <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]
 8007c14:	e011      	b.n	8007c3a <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c20:	4619      	mov	r1, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3320      	adds	r3, #32
 8007c28:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c30:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007c32:	f7fa fc3b 	bl	80024ac <HAL_DMA_Start_IT>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d017      	beq.n	8007c70 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fa fc90 	bl	800256c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c52:	f043 0210 	orr.w	r2, r3, #16
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e04f      	b.n	8007d10 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	2b81      	cmp	r3, #129	@ 0x81
 8007c7a:	d10e      	bne.n	8007c9a <HAL_SPI_TransmitReceive_DMA+0x49a>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c84:	2b81      	cmp	r3, #129	@ 0x81
 8007c86:	d108      	bne.n	8007c9a <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	041b      	lsls	r3, r3, #16
 8007c96:	6053      	str	r3, [r2, #4]
 8007c98:	e009      	b.n	8007cae <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	041b      	lsls	r3, r3, #16
 8007ca4:	8879      	ldrh	r1, [r7, #2]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	430b      	orrs	r3, r1
 8007cac:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cbc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8007ccc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10c      	bne.n	8007d06 <HAL_SPI_TransmitReceive_DMA+0x506>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cf4:	d107      	bne.n	8007d06 <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d04:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	0800816f 	.word	0x0800816f

08007d1c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	@ 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007d34:	6a3a      	ldr	r2, [r7, #32]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d4e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3330      	adds	r3, #48	@ 0x30
 8007d56:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d010      	beq.n	8007d84 <HAL_SPI_IRQHandler+0x68>
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f003 0308 	and.w	r3, r3, #8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d7a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9b5 	bl	80080ec <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007d82:	e19a      	b.n	80080ba <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d113      	bne.n	8007db6 <HAL_SPI_IRQHandler+0x9a>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10e      	bne.n	8007db6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
    handled = 1UL;
 8007db2:	2301      	movs	r3, #1
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10f      	bne.n	8007de0 <HAL_SPI_IRQHandler+0xc4>
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d105      	bne.n	8007de0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
    handled = 1UL;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10f      	bne.n	8007e0a <HAL_SPI_IRQHandler+0xee>
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
    handled = 1UL;
 8007e06:	2301      	movs	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f040 814f 	bne.w	80080b0 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 808b 	beq.w	8007f34 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0208 	orr.w	r2, r2, #8
 8007e2c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0210 	orr.w	r2, r2, #16
 8007e3c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e4c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0208 	bic.w	r2, r2, #8
 8007e5c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d13d      	bne.n	8007ee8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007e6c:	e036      	b.n	8007edc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d90b      	bls.n	8007e8e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e7e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e80:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e86:	1d1a      	adds	r2, r3, #4
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007e8c:	e01d      	b.n	8007eca <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d90b      	bls.n	8007eae <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	8812      	ldrh	r2, [r2, #0]
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ea6:	1c9a      	adds	r2, r3, #2
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007eac:	e00d      	b.n	8007eca <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eba:	7812      	ldrb	r2, [r2, #0]
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1c2      	bne.n	8007e6e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f97d 	bl	80081e8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7f9 f9e1 	bl	80012c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f06:	e0d8      	b.n	80080ba <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007f08:	7cfb      	ldrb	r3, [r7, #19]
 8007f0a:	2b05      	cmp	r3, #5
 8007f0c:	d103      	bne.n	8007f16 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7f9 f99e 	bl	8001250 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007f14:	e0ce      	b.n	80080b4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007f16:	7cfb      	ldrb	r3, [r7, #19]
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d103      	bne.n	8007f24 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f8d1 	bl	80080c4 <HAL_SPI_RxCpltCallback>
    return;
 8007f22:	e0c7      	b.n	80080b4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007f24:	7cfb      	ldrb	r3, [r7, #19]
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	f040 80c4 	bne.w	80080b4 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7f9 f9ad 	bl	800128c <HAL_SPI_TxCpltCallback>
    return;
 8007f32:	e0bf      	b.n	80080b4 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 80bd 	beq.w	80080ba <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00f      	beq.n	8007f6a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f50:	f043 0204 	orr.w	r2, r3, #4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f68:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00f      	beq.n	8007f94 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f7a:	f043 0201 	orr.w	r2, r3, #1
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f92:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00f      	beq.n	8007fbe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fa4:	f043 0208 	orr.w	r2, r3, #8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fbc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00f      	beq.n	8007fe8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0220 	orr.w	r2, r2, #32
 8007fe6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d062      	beq.n	80080b8 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0201 	bic.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008010:	f023 0303 	bic.w	r3, r3, #3
 8008014:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800801c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008020:	d13e      	bne.n	80080a0 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008030:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008038:	2b00      	cmp	r3, #0
 800803a:	d015      	beq.n	8008068 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008042:	4a1f      	ldr	r2, [pc, #124]	@ (80080c0 <HAL_SPI_IRQHandler+0x3a4>)
 8008044:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800804c:	4618      	mov	r0, r3
 800804e:	f7fa fb09 	bl	8002664 <HAL_DMA_Abort_IT>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800805e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800806e:	2b00      	cmp	r3, #0
 8008070:	d022      	beq.n	80080b8 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008078:	4a11      	ldr	r2, [pc, #68]	@ (80080c0 <HAL_SPI_IRQHandler+0x3a4>)
 800807a:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008082:	4618      	mov	r0, r3
 8008084:	f7fa faee 	bl	8002664 <HAL_DMA_Abort_IT>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d014      	beq.n	80080b8 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008094:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800809e:	e00b      	b.n	80080b8 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f9 f90d 	bl	80012c8 <HAL_SPI_ErrorCallback>
    return;
 80080ae:	e003      	b.n	80080b8 <HAL_SPI_IRQHandler+0x39c>
    return;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <HAL_SPI_IRQHandler+0x39e>
    return;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <HAL_SPI_IRQHandler+0x39e>
    return;
 80080b8:	bf00      	nop
  }
}
 80080ba:	3728      	adds	r7, #40	@ 0x28
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	080081b5 	.word	0x080081b5

080080c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800810c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b07      	cmp	r3, #7
 8008118:	d017      	beq.n	800814a <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008122:	2b81      	cmp	r3, #129	@ 0x81
 8008124:	d109      	bne.n	800813a <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800812c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800812e:	2b81      	cmp	r3, #129	@ 0x81
 8008130:	d103      	bne.n	800813a <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7f9 f88c 	bl	8001250 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008138:	e007      	b.n	800814a <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0208 	orr.w	r2, r2, #8
 8008148:	611a      	str	r2, [r3, #16]
}
 800814a:	bf00      	nop
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800815e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7ff ffb9 	bl	80080d8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800817a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7fa fbfb 	bl	8002978 <HAL_DMA_GetError>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d011      	beq.n	80081ac <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f82d 	bl	80081e8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008194:	f043 0210 	orr.w	r2, r3, #16
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7f9 f88e 	bl	80012c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7f9 f874 	bl	80012c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0208 	orr.w	r2, r2, #8
 8008206:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0210 	orr.w	r2, r2, #16
 8008216:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800824a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b04      	cmp	r3, #4
 8008256:	d014      	beq.n	8008282 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00f      	beq.n	8008282 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008268:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0220 	orr.w	r2, r2, #32
 8008280:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b03      	cmp	r3, #3
 800828c:	d014      	beq.n	80082b8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00f      	beq.n	80082b8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800829e:	f043 0204 	orr.w	r2, r3, #4
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00f      	beq.n	80082e2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c8:	f043 0201 	orr.w	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00f      	beq.n	800830c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f2:	f043 0208 	orr.w	r2, r3, #8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800830a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	3307      	adds	r3, #7
 8008346:	08db      	lsrs	r3, r3, #3
 8008348:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b01      	cmp	r3, #1
 8008372:	d12e      	bne.n	80083d2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800837e:	2302      	movs	r3, #2
 8008380:	e028      	b.n	80083d4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 0201 	bic.w	r2, r2, #1
 80083a0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80083ae:	ea42 0103 	orr.w	r1, r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	689a      	ldr	r2, [r3, #8]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	e000      	b.n	80083d4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
  }
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e042      	b.n	8008478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7f9 f9ed 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2224      	movs	r2, #36	@ 0x24
 800840e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa68 	bl	8008900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8c3 	bl	80085bc <UART_SetConfig>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e01b      	b.n	8008478 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800844e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800845e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fae7 	bl	8008a44 <UART_CheckIdleState>
 8008476:	4603      	mov	r3, r0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	@ 0x28
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	4613      	mov	r3, r2
 800848e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008496:	2b20      	cmp	r3, #32
 8008498:	f040 808b 	bne.w	80085b2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_UART_Transmit+0x28>
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e083      	b.n	80085b4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b6:	2b80      	cmp	r3, #128	@ 0x80
 80084b8:	d107      	bne.n	80084ca <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084c8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2221      	movs	r2, #33	@ 0x21
 80084d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084da:	f7f9 fce1 	bl	8001ea0 <HAL_GetTick>
 80084de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	88fa      	ldrh	r2, [r7, #6]
 80084e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f8:	d108      	bne.n	800850c <HAL_UART_Transmit+0x8c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e003      	b.n	8008514 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008514:	e030      	b.n	8008578 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2200      	movs	r2, #0
 800851e:	2180      	movs	r1, #128	@ 0x80
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fb39 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e03d      	b.n	80085b4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	3302      	adds	r3, #2
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e007      	b.n	8008566 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	3301      	adds	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1c8      	bne.n	8008516 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2200      	movs	r2, #0
 800858c:	2140      	movs	r1, #64	@ 0x40
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fb02 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e006      	b.n	80085b4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80085b2:	2302      	movs	r3, #2
  }
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085c0:	b094      	sub	sp, #80	@ 0x50
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80085cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	4b7e      	ldr	r3, [pc, #504]	@ (80087cc <UART_SetConfig+0x210>)
 80085d2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	431a      	orrs	r2, r3
 80085de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4977      	ldr	r1, [pc, #476]	@ (80087d0 <UART_SetConfig+0x214>)
 80085f4:	4019      	ands	r1, r3
 80085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	68d9      	ldr	r1, [r3, #12]
 800860e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	ea40 0301 	orr.w	r3, r0, r1
 8008616:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800861e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b6a      	ldr	r3, [pc, #424]	@ (80087cc <UART_SetConfig+0x210>)
 8008624:	429a      	cmp	r2, r3
 8008626:	d009      	beq.n	800863c <UART_SetConfig+0x80>
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	4b69      	ldr	r3, [pc, #420]	@ (80087d4 <UART_SetConfig+0x218>)
 800862e:	429a      	cmp	r2, r3
 8008630:	d004      	beq.n	800863c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008634:	6a1a      	ldr	r2, [r3, #32]
 8008636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008638:	4313      	orrs	r3, r2
 800863a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800863c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008646:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800864a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008650:	430b      	orrs	r3, r1
 8008652:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865a:	f023 000f 	bic.w	r0, r3, #15
 800865e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008660:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	ea40 0301 	orr.w	r3, r0, r1
 800866a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800866c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	4b59      	ldr	r3, [pc, #356]	@ (80087d8 <UART_SetConfig+0x21c>)
 8008672:	429a      	cmp	r2, r3
 8008674:	d102      	bne.n	800867c <UART_SetConfig+0xc0>
 8008676:	2301      	movs	r3, #1
 8008678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800867a:	e029      	b.n	80086d0 <UART_SetConfig+0x114>
 800867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	4b56      	ldr	r3, [pc, #344]	@ (80087dc <UART_SetConfig+0x220>)
 8008682:	429a      	cmp	r2, r3
 8008684:	d102      	bne.n	800868c <UART_SetConfig+0xd0>
 8008686:	2302      	movs	r3, #2
 8008688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800868a:	e021      	b.n	80086d0 <UART_SetConfig+0x114>
 800868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	4b53      	ldr	r3, [pc, #332]	@ (80087e0 <UART_SetConfig+0x224>)
 8008692:	429a      	cmp	r2, r3
 8008694:	d102      	bne.n	800869c <UART_SetConfig+0xe0>
 8008696:	2304      	movs	r3, #4
 8008698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800869a:	e019      	b.n	80086d0 <UART_SetConfig+0x114>
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	4b50      	ldr	r3, [pc, #320]	@ (80087e4 <UART_SetConfig+0x228>)
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d102      	bne.n	80086ac <UART_SetConfig+0xf0>
 80086a6:	2308      	movs	r3, #8
 80086a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086aa:	e011      	b.n	80086d0 <UART_SetConfig+0x114>
 80086ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	4b4d      	ldr	r3, [pc, #308]	@ (80087e8 <UART_SetConfig+0x22c>)
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d102      	bne.n	80086bc <UART_SetConfig+0x100>
 80086b6:	2310      	movs	r3, #16
 80086b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ba:	e009      	b.n	80086d0 <UART_SetConfig+0x114>
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	4b42      	ldr	r3, [pc, #264]	@ (80087cc <UART_SetConfig+0x210>)
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d102      	bne.n	80086cc <UART_SetConfig+0x110>
 80086c6:	2320      	movs	r3, #32
 80086c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ca:	e001      	b.n	80086d0 <UART_SetConfig+0x114>
 80086cc:	2300      	movs	r3, #0
 80086ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	4b3d      	ldr	r3, [pc, #244]	@ (80087cc <UART_SetConfig+0x210>)
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d005      	beq.n	80086e6 <UART_SetConfig+0x12a>
 80086da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b3d      	ldr	r3, [pc, #244]	@ (80087d4 <UART_SetConfig+0x218>)
 80086e0:	429a      	cmp	r2, r3
 80086e2:	f040 8085 	bne.w	80087f0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80086e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e8:	2200      	movs	r2, #0
 80086ea:	623b      	str	r3, [r7, #32]
 80086ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80086ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80086f2:	f7fd fc5d 	bl	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 80086f6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80086f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 80e8 	beq.w	80088d0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008704:	4a39      	ldr	r2, [pc, #228]	@ (80087ec <UART_SetConfig+0x230>)
 8008706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800870a:	461a      	mov	r2, r3
 800870c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800870e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008712:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	4613      	mov	r3, r2
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	4413      	add	r3, r2
 800871e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008720:	429a      	cmp	r2, r3
 8008722:	d305      	bcc.n	8008730 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800872a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872c:	429a      	cmp	r2, r3
 800872e:	d903      	bls.n	8008738 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008736:	e048      	b.n	80087ca <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800873a:	2200      	movs	r2, #0
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	61fa      	str	r2, [r7, #28]
 8008740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008744:	4a29      	ldr	r2, [pc, #164]	@ (80087ec <UART_SetConfig+0x230>)
 8008746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800874a:	b29b      	uxth	r3, r3
 800874c:	2200      	movs	r2, #0
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	617a      	str	r2, [r7, #20]
 8008752:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008756:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800875a:	f7f7 fd95 	bl	8000288 <__aeabi_uldivmod>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4610      	mov	r0, r2
 8008764:	4619      	mov	r1, r3
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	020b      	lsls	r3, r1, #8
 8008770:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008774:	0202      	lsls	r2, r0, #8
 8008776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008778:	6849      	ldr	r1, [r1, #4]
 800877a:	0849      	lsrs	r1, r1, #1
 800877c:	2000      	movs	r0, #0
 800877e:	460c      	mov	r4, r1
 8008780:	4605      	mov	r5, r0
 8008782:	eb12 0804 	adds.w	r8, r2, r4
 8008786:	eb43 0905 	adc.w	r9, r3, r5
 800878a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	60fa      	str	r2, [r7, #12]
 8008794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008798:	4640      	mov	r0, r8
 800879a:	4649      	mov	r1, r9
 800879c:	f7f7 fd74 	bl	8000288 <__aeabi_uldivmod>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4613      	mov	r3, r2
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087ae:	d308      	bcc.n	80087c2 <UART_SetConfig+0x206>
 80087b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b6:	d204      	bcs.n	80087c2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087be:	60da      	str	r2, [r3, #12]
 80087c0:	e003      	b.n	80087ca <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80087c8:	e082      	b.n	80088d0 <UART_SetConfig+0x314>
 80087ca:	e081      	b.n	80088d0 <UART_SetConfig+0x314>
 80087cc:	46002400 	.word	0x46002400
 80087d0:	cfff69f3 	.word	0xcfff69f3
 80087d4:	56002400 	.word	0x56002400
 80087d8:	40013800 	.word	0x40013800
 80087dc:	40004400 	.word	0x40004400
 80087e0:	40004800 	.word	0x40004800
 80087e4:	40004c00 	.word	0x40004c00
 80087e8:	40005000 	.word	0x40005000
 80087ec:	0800a18c 	.word	0x0800a18c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f8:	d13c      	bne.n	8008874 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087fc:	2200      	movs	r2, #0
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	607a      	str	r2, [r7, #4]
 8008802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008806:	f7fd fbd3 	bl	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 800880a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800880c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d05e      	beq.n	80088d0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008816:	4a39      	ldr	r2, [pc, #228]	@ (80088fc <UART_SetConfig+0x340>)
 8008818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800881c:	461a      	mov	r2, r3
 800881e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008820:	fbb3 f3f2 	udiv	r3, r3, r2
 8008824:	005a      	lsls	r2, r3, #1
 8008826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	441a      	add	r2, r3
 800882e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	fbb2 f3f3 	udiv	r3, r2, r3
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d916      	bls.n	800886c <UART_SetConfig+0x2b0>
 800883e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008844:	d212      	bcs.n	800886c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008848:	b29b      	uxth	r3, r3
 800884a:	f023 030f 	bic.w	r3, r3, #15
 800884e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008852:	085b      	lsrs	r3, r3, #1
 8008854:	b29b      	uxth	r3, r3
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	b29a      	uxth	r2, r3
 800885c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800885e:	4313      	orrs	r3, r2
 8008860:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	e031      	b.n	80088d0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008872:	e02d      	b.n	80088d0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008876:	2200      	movs	r2, #0
 8008878:	469a      	mov	sl, r3
 800887a:	4693      	mov	fp, r2
 800887c:	4650      	mov	r0, sl
 800887e:	4659      	mov	r1, fp
 8008880:	f7fd fb96 	bl	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008884:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d021      	beq.n	80088d0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	4a1a      	ldr	r2, [pc, #104]	@ (80088fc <UART_SetConfig+0x340>)
 8008892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008896:	461a      	mov	r2, r3
 8008898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800889a:	fbb3 f2f2 	udiv	r2, r3, r2
 800889e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	441a      	add	r2, r3
 80088a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	d909      	bls.n	80088ca <UART_SetConfig+0x30e>
 80088b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088bc:	d205      	bcs.n	80088ca <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60da      	str	r2, [r3, #12]
 80088c8:	e002      	b.n	80088d0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d2:	2201      	movs	r2, #1
 80088d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088da:	2201      	movs	r2, #1
 80088dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	2200      	movs	r2, #0
 80088e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e8:	2200      	movs	r2, #0
 80088ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3750      	adds	r7, #80	@ 0x50
 80088f4:	46bd      	mov	sp, r7
 80088f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088fa:	bf00      	nop
 80088fc:	0800a18c 	.word	0x0800a18c

08008900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890c:	f003 0308 	and.w	r3, r3, #8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01a      	beq.n	8008a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089fe:	d10a      	bne.n	8008a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	605a      	str	r2, [r3, #4]
  }
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b098      	sub	sp, #96	@ 0x60
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a54:	f7f9 fa24 	bl	8001ea0 <HAL_GetTick>
 8008a58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d12f      	bne.n	8008ac8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a70:	2200      	movs	r2, #0
 8008a72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f88e 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d022      	beq.n	8008ac8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008aa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e6      	bne.n	8008a82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e063      	b.n	8008b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d149      	bne.n	8008b6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f857 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d03c      	beq.n	8008b6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	623b      	str	r3, [r7, #32]
   return(result);
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e6      	bne.n	8008af0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3308      	adds	r3, #8
 8008b40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b42:	61fa      	str	r2, [r7, #28]
 8008b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	69b9      	ldr	r1, [r7, #24]
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e5      	bne.n	8008b22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e012      	b.n	8008b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3758      	adds	r7, #88	@ 0x58
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba8:	e04f      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb0:	d04b      	beq.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb2:	f7f9 f975 	bl	8001ea0 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d302      	bcc.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e04e      	b.n	8008c6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d037      	beq.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b80      	cmp	r3, #128	@ 0x80
 8008bde:	d034      	beq.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b40      	cmp	r3, #64	@ 0x40
 8008be4:	d031      	beq.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d110      	bne.n	8008c16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f838 	bl	8008c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2208      	movs	r2, #8
 8008c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e029      	b.n	8008c6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c24:	d111      	bne.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f81e 	bl	8008c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e00f      	b.n	8008c6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69da      	ldr	r2, [r3, #28]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	4013      	ands	r3, r2
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	bf0c      	ite	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	2300      	movne	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d0a0      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b095      	sub	sp, #84	@ 0x54
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e6      	bne.n	8008c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e3      	bne.n	8008cac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d118      	bne.n	8008d1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	e853 3f00 	ldrex	r3, [r3]
 8008cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f023 0310 	bic.w	r3, r3, #16
 8008d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6979      	ldr	r1, [r7, #20]
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	613b      	str	r3, [r7, #16]
   return(result);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e6      	bne.n	8008cec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d32:	bf00      	nop
 8008d34:	3754      	adds	r7, #84	@ 0x54
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e027      	b.n	8008da4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2224      	movs	r2, #36	@ 0x24
 8008d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e02d      	b.n	8008e24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2224      	movs	r2, #36	@ 0x24
 8008dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 0201 	bic.w	r2, r2, #1
 8008dee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f84f 	bl	8008ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d101      	bne.n	8008e44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e40:	2302      	movs	r3, #2
 8008e42:	e02d      	b.n	8008ea0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2224      	movs	r2, #36	@ 0x24
 8008e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0201 	bic.w	r2, r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f811 	bl	8008ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d108      	bne.n	8008eca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ec8:	e031      	b.n	8008f2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008eca:	2308      	movs	r3, #8
 8008ecc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ece:	2308      	movs	r3, #8
 8008ed0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	0e5b      	lsrs	r3, r3, #25
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	0f5b      	lsrs	r3, r3, #29
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	7b3a      	ldrb	r2, [r7, #12]
 8008ef6:	4911      	ldr	r1, [pc, #68]	@ (8008f3c <UARTEx_SetNbDataToProcess+0x94>)
 8008ef8:	5c8a      	ldrb	r2, [r1, r2]
 8008efa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008efe:	7b3a      	ldrb	r2, [r7, #12]
 8008f00:	490f      	ldr	r1, [pc, #60]	@ (8008f40 <UARTEx_SetNbDataToProcess+0x98>)
 8008f02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	7b7a      	ldrb	r2, [r7, #13]
 8008f14:	4909      	ldr	r1, [pc, #36]	@ (8008f3c <UARTEx_SetNbDataToProcess+0x94>)
 8008f16:	5c8a      	ldrb	r2, [r1, r2]
 8008f18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f1c:	7b7a      	ldrb	r2, [r7, #13]
 8008f1e:	4908      	ldr	r1, [pc, #32]	@ (8008f40 <UARTEx_SetNbDataToProcess+0x98>)
 8008f20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f22:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	0800a1a4 	.word	0x0800a1a4
 8008f40:	0800a1ac 	.word	0x0800a1ac

08008f44 <std>:
 8008f44:	2300      	movs	r3, #0
 8008f46:	b510      	push	{r4, lr}
 8008f48:	4604      	mov	r4, r0
 8008f4a:	6083      	str	r3, [r0, #8]
 8008f4c:	8181      	strh	r1, [r0, #12]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f52:	81c2      	strh	r2, [r0, #14]
 8008f54:	2208      	movs	r2, #8
 8008f56:	6183      	str	r3, [r0, #24]
 8008f58:	e9c0 3300 	strd	r3, r3, [r0]
 8008f5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f60:	305c      	adds	r0, #92	@ 0x5c
 8008f62:	f000 fa01 	bl	8009368 <memset>
 8008f66:	4b0d      	ldr	r3, [pc, #52]	@ (8008f9c <std+0x58>)
 8008f68:	6224      	str	r4, [r4, #32]
 8008f6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa0 <std+0x5c>)
 8008f6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f70:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa4 <std+0x60>)
 8008f72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f74:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa8 <std+0x64>)
 8008f76:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f78:	4b0c      	ldr	r3, [pc, #48]	@ (8008fac <std+0x68>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d006      	beq.n	8008f8c <std+0x48>
 8008f7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f82:	4294      	cmp	r4, r2
 8008f84:	d002      	beq.n	8008f8c <std+0x48>
 8008f86:	33d0      	adds	r3, #208	@ 0xd0
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d105      	bne.n	8008f98 <std+0x54>
 8008f8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f94:	f000 ba60 	b.w	8009458 <__retarget_lock_init_recursive>
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	bf00      	nop
 8008f9c:	080091b9 	.word	0x080091b9
 8008fa0:	080091db 	.word	0x080091db
 8008fa4:	08009213 	.word	0x08009213
 8008fa8:	08009237 	.word	0x08009237
 8008fac:	200008cc 	.word	0x200008cc

08008fb0 <stdio_exit_handler>:
 8008fb0:	4a02      	ldr	r2, [pc, #8]	@ (8008fbc <stdio_exit_handler+0xc>)
 8008fb2:	4903      	ldr	r1, [pc, #12]	@ (8008fc0 <stdio_exit_handler+0x10>)
 8008fb4:	4803      	ldr	r0, [pc, #12]	@ (8008fc4 <stdio_exit_handler+0x14>)
 8008fb6:	f000 b869 	b.w	800908c <_fwalk_sglue>
 8008fba:	bf00      	nop
 8008fbc:	20000014 	.word	0x20000014
 8008fc0:	08009d15 	.word	0x08009d15
 8008fc4:	20000024 	.word	0x20000024

08008fc8 <cleanup_stdio>:
 8008fc8:	6841      	ldr	r1, [r0, #4]
 8008fca:	4b0c      	ldr	r3, [pc, #48]	@ (8008ffc <cleanup_stdio+0x34>)
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	b510      	push	{r4, lr}
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	d001      	beq.n	8008fd8 <cleanup_stdio+0x10>
 8008fd4:	f000 fe9e 	bl	8009d14 <_fflush_r>
 8008fd8:	68a1      	ldr	r1, [r4, #8]
 8008fda:	4b09      	ldr	r3, [pc, #36]	@ (8009000 <cleanup_stdio+0x38>)
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	d002      	beq.n	8008fe6 <cleanup_stdio+0x1e>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fe97 	bl	8009d14 <_fflush_r>
 8008fe6:	68e1      	ldr	r1, [r4, #12]
 8008fe8:	4b06      	ldr	r3, [pc, #24]	@ (8009004 <cleanup_stdio+0x3c>)
 8008fea:	4299      	cmp	r1, r3
 8008fec:	d004      	beq.n	8008ff8 <cleanup_stdio+0x30>
 8008fee:	4620      	mov	r0, r4
 8008ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff4:	f000 be8e 	b.w	8009d14 <_fflush_r>
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	bf00      	nop
 8008ffc:	200008cc 	.word	0x200008cc
 8009000:	20000934 	.word	0x20000934
 8009004:	2000099c 	.word	0x2000099c

08009008 <global_stdio_init.part.0>:
 8009008:	b510      	push	{r4, lr}
 800900a:	4b0b      	ldr	r3, [pc, #44]	@ (8009038 <global_stdio_init.part.0+0x30>)
 800900c:	2104      	movs	r1, #4
 800900e:	4c0b      	ldr	r4, [pc, #44]	@ (800903c <global_stdio_init.part.0+0x34>)
 8009010:	4a0b      	ldr	r2, [pc, #44]	@ (8009040 <global_stdio_init.part.0+0x38>)
 8009012:	4620      	mov	r0, r4
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	2200      	movs	r2, #0
 8009018:	f7ff ff94 	bl	8008f44 <std>
 800901c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009020:	2201      	movs	r2, #1
 8009022:	2109      	movs	r1, #9
 8009024:	f7ff ff8e 	bl	8008f44 <std>
 8009028:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800902c:	2202      	movs	r2, #2
 800902e:	2112      	movs	r1, #18
 8009030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009034:	f7ff bf86 	b.w	8008f44 <std>
 8009038:	20000a04 	.word	0x20000a04
 800903c:	200008cc 	.word	0x200008cc
 8009040:	08008fb1 	.word	0x08008fb1

08009044 <__sfp_lock_acquire>:
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <__sfp_lock_acquire+0x8>)
 8009046:	f000 ba08 	b.w	800945a <__retarget_lock_acquire_recursive>
 800904a:	bf00      	nop
 800904c:	20000a0d 	.word	0x20000a0d

08009050 <__sfp_lock_release>:
 8009050:	4801      	ldr	r0, [pc, #4]	@ (8009058 <__sfp_lock_release+0x8>)
 8009052:	f000 ba03 	b.w	800945c <__retarget_lock_release_recursive>
 8009056:	bf00      	nop
 8009058:	20000a0d 	.word	0x20000a0d

0800905c <__sinit>:
 800905c:	b510      	push	{r4, lr}
 800905e:	4604      	mov	r4, r0
 8009060:	f7ff fff0 	bl	8009044 <__sfp_lock_acquire>
 8009064:	6a23      	ldr	r3, [r4, #32]
 8009066:	b11b      	cbz	r3, 8009070 <__sinit+0x14>
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906c:	f7ff bff0 	b.w	8009050 <__sfp_lock_release>
 8009070:	4b04      	ldr	r3, [pc, #16]	@ (8009084 <__sinit+0x28>)
 8009072:	6223      	str	r3, [r4, #32]
 8009074:	4b04      	ldr	r3, [pc, #16]	@ (8009088 <__sinit+0x2c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1f5      	bne.n	8009068 <__sinit+0xc>
 800907c:	f7ff ffc4 	bl	8009008 <global_stdio_init.part.0>
 8009080:	e7f2      	b.n	8009068 <__sinit+0xc>
 8009082:	bf00      	nop
 8009084:	08008fc9 	.word	0x08008fc9
 8009088:	20000a04 	.word	0x20000a04

0800908c <_fwalk_sglue>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	4607      	mov	r7, r0
 8009092:	4688      	mov	r8, r1
 8009094:	4614      	mov	r4, r2
 8009096:	2600      	movs	r6, #0
 8009098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800909c:	f1b9 0901 	subs.w	r9, r9, #1
 80090a0:	d505      	bpl.n	80090ae <_fwalk_sglue+0x22>
 80090a2:	6824      	ldr	r4, [r4, #0]
 80090a4:	2c00      	cmp	r4, #0
 80090a6:	d1f7      	bne.n	8009098 <_fwalk_sglue+0xc>
 80090a8:	4630      	mov	r0, r6
 80090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d907      	bls.n	80090c4 <_fwalk_sglue+0x38>
 80090b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090b8:	3301      	adds	r3, #1
 80090ba:	d003      	beq.n	80090c4 <_fwalk_sglue+0x38>
 80090bc:	4629      	mov	r1, r5
 80090be:	4638      	mov	r0, r7
 80090c0:	47c0      	blx	r8
 80090c2:	4306      	orrs	r6, r0
 80090c4:	3568      	adds	r5, #104	@ 0x68
 80090c6:	e7e9      	b.n	800909c <_fwalk_sglue+0x10>

080090c8 <iprintf>:
 80090c8:	b40f      	push	{r0, r1, r2, r3}
 80090ca:	b507      	push	{r0, r1, r2, lr}
 80090cc:	4906      	ldr	r1, [pc, #24]	@ (80090e8 <iprintf+0x20>)
 80090ce:	ab04      	add	r3, sp, #16
 80090d0:	6808      	ldr	r0, [r1, #0]
 80090d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d6:	6881      	ldr	r1, [r0, #8]
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	f000 faef 	bl	80096bc <_vfiprintf_r>
 80090de:	b003      	add	sp, #12
 80090e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090e4:	b004      	add	sp, #16
 80090e6:	4770      	bx	lr
 80090e8:	20000020 	.word	0x20000020

080090ec <putchar>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	@ (80090f8 <putchar+0xc>)
 80090ee:	4601      	mov	r1, r0
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	6882      	ldr	r2, [r0, #8]
 80090f4:	f000 be97 	b.w	8009e26 <_putc_r>
 80090f8:	20000020 	.word	0x20000020

080090fc <_puts_r>:
 80090fc:	6a03      	ldr	r3, [r0, #32]
 80090fe:	b570      	push	{r4, r5, r6, lr}
 8009100:	4605      	mov	r5, r0
 8009102:	460e      	mov	r6, r1
 8009104:	6884      	ldr	r4, [r0, #8]
 8009106:	b90b      	cbnz	r3, 800910c <_puts_r+0x10>
 8009108:	f7ff ffa8 	bl	800905c <__sinit>
 800910c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800910e:	07db      	lsls	r3, r3, #31
 8009110:	d405      	bmi.n	800911e <_puts_r+0x22>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	0598      	lsls	r0, r3, #22
 8009116:	d402      	bmi.n	800911e <_puts_r+0x22>
 8009118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800911a:	f000 f99e 	bl	800945a <__retarget_lock_acquire_recursive>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	0719      	lsls	r1, r3, #28
 8009122:	d502      	bpl.n	800912a <_puts_r+0x2e>
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d135      	bne.n	8009196 <_puts_r+0x9a>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f000 f8c5 	bl	80092bc <__swsetup_r>
 8009132:	b380      	cbz	r0, 8009196 <_puts_r+0x9a>
 8009134:	f04f 35ff 	mov.w	r5, #4294967295
 8009138:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800913a:	07da      	lsls	r2, r3, #31
 800913c:	d405      	bmi.n	800914a <_puts_r+0x4e>
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	059b      	lsls	r3, r3, #22
 8009142:	d402      	bmi.n	800914a <_puts_r+0x4e>
 8009144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009146:	f000 f989 	bl	800945c <__retarget_lock_release_recursive>
 800914a:	4628      	mov	r0, r5
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	2b00      	cmp	r3, #0
 8009150:	da04      	bge.n	800915c <_puts_r+0x60>
 8009152:	69a2      	ldr	r2, [r4, #24]
 8009154:	429a      	cmp	r2, r3
 8009156:	dc17      	bgt.n	8009188 <_puts_r+0x8c>
 8009158:	290a      	cmp	r1, #10
 800915a:	d015      	beq.n	8009188 <_puts_r+0x8c>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	6022      	str	r2, [r4, #0]
 8009162:	7019      	strb	r1, [r3, #0]
 8009164:	68a3      	ldr	r3, [r4, #8]
 8009166:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800916a:	3b01      	subs	r3, #1
 800916c:	60a3      	str	r3, [r4, #8]
 800916e:	2900      	cmp	r1, #0
 8009170:	d1ed      	bne.n	800914e <_puts_r+0x52>
 8009172:	2b00      	cmp	r3, #0
 8009174:	da11      	bge.n	800919a <_puts_r+0x9e>
 8009176:	4622      	mov	r2, r4
 8009178:	210a      	movs	r1, #10
 800917a:	4628      	mov	r0, r5
 800917c:	f000 f85f 	bl	800923e <__swbuf_r>
 8009180:	3001      	adds	r0, #1
 8009182:	d0d7      	beq.n	8009134 <_puts_r+0x38>
 8009184:	250a      	movs	r5, #10
 8009186:	e7d7      	b.n	8009138 <_puts_r+0x3c>
 8009188:	4622      	mov	r2, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f857 	bl	800923e <__swbuf_r>
 8009190:	3001      	adds	r0, #1
 8009192:	d1e7      	bne.n	8009164 <_puts_r+0x68>
 8009194:	e7ce      	b.n	8009134 <_puts_r+0x38>
 8009196:	3e01      	subs	r6, #1
 8009198:	e7e4      	b.n	8009164 <_puts_r+0x68>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	6022      	str	r2, [r4, #0]
 80091a0:	220a      	movs	r2, #10
 80091a2:	701a      	strb	r2, [r3, #0]
 80091a4:	e7ee      	b.n	8009184 <_puts_r+0x88>
	...

080091a8 <puts>:
 80091a8:	4b02      	ldr	r3, [pc, #8]	@ (80091b4 <puts+0xc>)
 80091aa:	4601      	mov	r1, r0
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	f7ff bfa5 	b.w	80090fc <_puts_r>
 80091b2:	bf00      	nop
 80091b4:	20000020 	.word	0x20000020

080091b8 <__sread>:
 80091b8:	b510      	push	{r4, lr}
 80091ba:	460c      	mov	r4, r1
 80091bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c0:	f000 f8fc 	bl	80093bc <_read_r>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	bfab      	itete	ge
 80091c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091ca:	89a3      	ldrhlt	r3, [r4, #12]
 80091cc:	181b      	addge	r3, r3, r0
 80091ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091d2:	bfac      	ite	ge
 80091d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091d6:	81a3      	strhlt	r3, [r4, #12]
 80091d8:	bd10      	pop	{r4, pc}

080091da <__swrite>:
 80091da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	461f      	mov	r7, r3
 80091e0:	898b      	ldrh	r3, [r1, #12]
 80091e2:	4605      	mov	r5, r0
 80091e4:	460c      	mov	r4, r1
 80091e6:	05db      	lsls	r3, r3, #23
 80091e8:	4616      	mov	r6, r2
 80091ea:	d505      	bpl.n	80091f8 <__swrite+0x1e>
 80091ec:	2302      	movs	r3, #2
 80091ee:	2200      	movs	r2, #0
 80091f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f4:	f000 f8d0 	bl	8009398 <_lseek_r>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	4632      	mov	r2, r6
 80091fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009200:	4628      	mov	r0, r5
 8009202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009206:	81a3      	strh	r3, [r4, #12]
 8009208:	463b      	mov	r3, r7
 800920a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800920e:	f000 b8e7 	b.w	80093e0 <_write_r>

08009212 <__sseek>:
 8009212:	b510      	push	{r4, lr}
 8009214:	460c      	mov	r4, r1
 8009216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921a:	f000 f8bd 	bl	8009398 <_lseek_r>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	bf15      	itete	ne
 8009224:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009226:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800922a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800922e:	81a3      	strheq	r3, [r4, #12]
 8009230:	bf18      	it	ne
 8009232:	81a3      	strhne	r3, [r4, #12]
 8009234:	bd10      	pop	{r4, pc}

08009236 <__sclose>:
 8009236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923a:	f000 b89d 	b.w	8009378 <_close_r>

0800923e <__swbuf_r>:
 800923e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009240:	460e      	mov	r6, r1
 8009242:	4614      	mov	r4, r2
 8009244:	4605      	mov	r5, r0
 8009246:	b118      	cbz	r0, 8009250 <__swbuf_r+0x12>
 8009248:	6a03      	ldr	r3, [r0, #32]
 800924a:	b90b      	cbnz	r3, 8009250 <__swbuf_r+0x12>
 800924c:	f7ff ff06 	bl	800905c <__sinit>
 8009250:	69a3      	ldr	r3, [r4, #24]
 8009252:	60a3      	str	r3, [r4, #8]
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	071a      	lsls	r2, r3, #28
 8009258:	d501      	bpl.n	800925e <__swbuf_r+0x20>
 800925a:	6923      	ldr	r3, [r4, #16]
 800925c:	b943      	cbnz	r3, 8009270 <__swbuf_r+0x32>
 800925e:	4621      	mov	r1, r4
 8009260:	4628      	mov	r0, r5
 8009262:	f000 f82b 	bl	80092bc <__swsetup_r>
 8009266:	b118      	cbz	r0, 8009270 <__swbuf_r+0x32>
 8009268:	f04f 37ff 	mov.w	r7, #4294967295
 800926c:	4638      	mov	r0, r7
 800926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	b2f6      	uxtb	r6, r6
 8009274:	6922      	ldr	r2, [r4, #16]
 8009276:	4637      	mov	r7, r6
 8009278:	1a98      	subs	r0, r3, r2
 800927a:	6963      	ldr	r3, [r4, #20]
 800927c:	4283      	cmp	r3, r0
 800927e:	dc05      	bgt.n	800928c <__swbuf_r+0x4e>
 8009280:	4621      	mov	r1, r4
 8009282:	4628      	mov	r0, r5
 8009284:	f000 fd46 	bl	8009d14 <_fflush_r>
 8009288:	2800      	cmp	r0, #0
 800928a:	d1ed      	bne.n	8009268 <__swbuf_r+0x2a>
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	3b01      	subs	r3, #1
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	6022      	str	r2, [r4, #0]
 8009298:	701e      	strb	r6, [r3, #0]
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	6962      	ldr	r2, [r4, #20]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d004      	beq.n	80092ac <__swbuf_r+0x6e>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	07db      	lsls	r3, r3, #31
 80092a6:	d5e1      	bpl.n	800926c <__swbuf_r+0x2e>
 80092a8:	2e0a      	cmp	r6, #10
 80092aa:	d1df      	bne.n	800926c <__swbuf_r+0x2e>
 80092ac:	4621      	mov	r1, r4
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 fd30 	bl	8009d14 <_fflush_r>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d0d9      	beq.n	800926c <__swbuf_r+0x2e>
 80092b8:	e7d6      	b.n	8009268 <__swbuf_r+0x2a>
	...

080092bc <__swsetup_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4b29      	ldr	r3, [pc, #164]	@ (8009364 <__swsetup_r+0xa8>)
 80092c0:	4605      	mov	r5, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	b118      	cbz	r0, 80092d0 <__swsetup_r+0x14>
 80092c8:	6a03      	ldr	r3, [r0, #32]
 80092ca:	b90b      	cbnz	r3, 80092d0 <__swsetup_r+0x14>
 80092cc:	f7ff fec6 	bl	800905c <__sinit>
 80092d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d4:	0719      	lsls	r1, r3, #28
 80092d6:	d422      	bmi.n	800931e <__swsetup_r+0x62>
 80092d8:	06da      	lsls	r2, r3, #27
 80092da:	d407      	bmi.n	80092ec <__swsetup_r+0x30>
 80092dc:	2209      	movs	r2, #9
 80092de:	602a      	str	r2, [r5, #0]
 80092e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	e033      	b.n	8009354 <__swsetup_r+0x98>
 80092ec:	0758      	lsls	r0, r3, #29
 80092ee:	d512      	bpl.n	8009316 <__swsetup_r+0x5a>
 80092f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092f2:	b141      	cbz	r1, 8009306 <__swsetup_r+0x4a>
 80092f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092f8:	4299      	cmp	r1, r3
 80092fa:	d002      	beq.n	8009302 <__swsetup_r+0x46>
 80092fc:	4628      	mov	r0, r5
 80092fe:	f000 f8bb 	bl	8009478 <_free_r>
 8009302:	2300      	movs	r3, #0
 8009304:	6363      	str	r3, [r4, #52]	@ 0x34
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	2300      	movs	r3, #0
 8009310:	6063      	str	r3, [r4, #4]
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f043 0308 	orr.w	r3, r3, #8
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	6923      	ldr	r3, [r4, #16]
 8009320:	b94b      	cbnz	r3, 8009336 <__swsetup_r+0x7a>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800932c:	d003      	beq.n	8009336 <__swsetup_r+0x7a>
 800932e:	4621      	mov	r1, r4
 8009330:	4628      	mov	r0, r5
 8009332:	f000 fd3c 	bl	8009dae <__smakebuf_r>
 8009336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933a:	f013 0201 	ands.w	r2, r3, #1
 800933e:	d00a      	beq.n	8009356 <__swsetup_r+0x9a>
 8009340:	2200      	movs	r2, #0
 8009342:	60a2      	str	r2, [r4, #8]
 8009344:	6962      	ldr	r2, [r4, #20]
 8009346:	4252      	negs	r2, r2
 8009348:	61a2      	str	r2, [r4, #24]
 800934a:	6922      	ldr	r2, [r4, #16]
 800934c:	b942      	cbnz	r2, 8009360 <__swsetup_r+0xa4>
 800934e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009352:	d1c5      	bne.n	80092e0 <__swsetup_r+0x24>
 8009354:	bd38      	pop	{r3, r4, r5, pc}
 8009356:	0799      	lsls	r1, r3, #30
 8009358:	bf58      	it	pl
 800935a:	6962      	ldrpl	r2, [r4, #20]
 800935c:	60a2      	str	r2, [r4, #8]
 800935e:	e7f4      	b.n	800934a <__swsetup_r+0x8e>
 8009360:	2000      	movs	r0, #0
 8009362:	e7f7      	b.n	8009354 <__swsetup_r+0x98>
 8009364:	20000020 	.word	0x20000020

08009368 <memset>:
 8009368:	4402      	add	r2, r0
 800936a:	4603      	mov	r3, r0
 800936c:	4293      	cmp	r3, r2
 800936e:	d100      	bne.n	8009372 <memset+0xa>
 8009370:	4770      	bx	lr
 8009372:	f803 1b01 	strb.w	r1, [r3], #1
 8009376:	e7f9      	b.n	800936c <memset+0x4>

08009378 <_close_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	2300      	movs	r3, #0
 800937c:	4d05      	ldr	r5, [pc, #20]	@ (8009394 <_close_r+0x1c>)
 800937e:	4604      	mov	r4, r0
 8009380:	4608      	mov	r0, r1
 8009382:	602b      	str	r3, [r5, #0]
 8009384:	f7f8 fc05 	bl	8001b92 <_close>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_close_r+0x1a>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_close_r+0x1a>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	20000a08 	.word	0x20000a08

08009398 <_lseek_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	4604      	mov	r4, r0
 800939c:	4d06      	ldr	r5, [pc, #24]	@ (80093b8 <_lseek_r+0x20>)
 800939e:	4608      	mov	r0, r1
 80093a0:	4611      	mov	r1, r2
 80093a2:	2200      	movs	r2, #0
 80093a4:	602a      	str	r2, [r5, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f7f8 fc1a 	bl	8001be0 <_lseek>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d102      	bne.n	80093b6 <_lseek_r+0x1e>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	b103      	cbz	r3, 80093b6 <_lseek_r+0x1e>
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	20000a08 	.word	0x20000a08

080093bc <_read_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4604      	mov	r4, r0
 80093c0:	4d06      	ldr	r5, [pc, #24]	@ (80093dc <_read_r+0x20>)
 80093c2:	4608      	mov	r0, r1
 80093c4:	4611      	mov	r1, r2
 80093c6:	2200      	movs	r2, #0
 80093c8:	602a      	str	r2, [r5, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f7f8 fbc4 	bl	8001b58 <_read>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_read_r+0x1e>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_read_r+0x1e>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20000a08 	.word	0x20000a08

080093e0 <_write_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4604      	mov	r4, r0
 80093e4:	4d06      	ldr	r5, [pc, #24]	@ (8009400 <_write_r+0x20>)
 80093e6:	4608      	mov	r0, r1
 80093e8:	4611      	mov	r1, r2
 80093ea:	2200      	movs	r2, #0
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f7f7 f91e 	bl	8000630 <_write>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_write_r+0x1e>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_write_r+0x1e>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20000a08 	.word	0x20000a08

08009404 <__errno>:
 8009404:	4b01      	ldr	r3, [pc, #4]	@ (800940c <__errno+0x8>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20000020 	.word	0x20000020

08009410 <__libc_init_array>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	4d0d      	ldr	r5, [pc, #52]	@ (8009448 <__libc_init_array+0x38>)
 8009414:	2600      	movs	r6, #0
 8009416:	4c0d      	ldr	r4, [pc, #52]	@ (800944c <__libc_init_array+0x3c>)
 8009418:	1b64      	subs	r4, r4, r5
 800941a:	10a4      	asrs	r4, r4, #2
 800941c:	42a6      	cmp	r6, r4
 800941e:	d109      	bne.n	8009434 <__libc_init_array+0x24>
 8009420:	4d0b      	ldr	r5, [pc, #44]	@ (8009450 <__libc_init_array+0x40>)
 8009422:	2600      	movs	r6, #0
 8009424:	4c0b      	ldr	r4, [pc, #44]	@ (8009454 <__libc_init_array+0x44>)
 8009426:	f000 fd73 	bl	8009f10 <_init>
 800942a:	1b64      	subs	r4, r4, r5
 800942c:	10a4      	asrs	r4, r4, #2
 800942e:	42a6      	cmp	r6, r4
 8009430:	d105      	bne.n	800943e <__libc_init_array+0x2e>
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	f855 3b04 	ldr.w	r3, [r5], #4
 8009438:	3601      	adds	r6, #1
 800943a:	4798      	blx	r3
 800943c:	e7ee      	b.n	800941c <__libc_init_array+0xc>
 800943e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009442:	3601      	adds	r6, #1
 8009444:	4798      	blx	r3
 8009446:	e7f2      	b.n	800942e <__libc_init_array+0x1e>
 8009448:	0800a1f0 	.word	0x0800a1f0
 800944c:	0800a1f0 	.word	0x0800a1f0
 8009450:	0800a1f0 	.word	0x0800a1f0
 8009454:	0800a1f4 	.word	0x0800a1f4

08009458 <__retarget_lock_init_recursive>:
 8009458:	4770      	bx	lr

0800945a <__retarget_lock_acquire_recursive>:
 800945a:	4770      	bx	lr

0800945c <__retarget_lock_release_recursive>:
 800945c:	4770      	bx	lr

0800945e <memcpy>:
 800945e:	440a      	add	r2, r1
 8009460:	1e43      	subs	r3, r0, #1
 8009462:	4291      	cmp	r1, r2
 8009464:	d100      	bne.n	8009468 <memcpy+0xa>
 8009466:	4770      	bx	lr
 8009468:	b510      	push	{r4, lr}
 800946a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800946e:	4291      	cmp	r1, r2
 8009470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009474:	d1f9      	bne.n	800946a <memcpy+0xc>
 8009476:	bd10      	pop	{r4, pc}

08009478 <_free_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4605      	mov	r5, r0
 800947c:	2900      	cmp	r1, #0
 800947e:	d041      	beq.n	8009504 <_free_r+0x8c>
 8009480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009484:	1f0c      	subs	r4, r1, #4
 8009486:	2b00      	cmp	r3, #0
 8009488:	bfb8      	it	lt
 800948a:	18e4      	addlt	r4, r4, r3
 800948c:	f000 f8e0 	bl	8009650 <__malloc_lock>
 8009490:	4a1d      	ldr	r2, [pc, #116]	@ (8009508 <_free_r+0x90>)
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	b933      	cbnz	r3, 80094a4 <_free_r+0x2c>
 8009496:	6063      	str	r3, [r4, #4]
 8009498:	6014      	str	r4, [r2, #0]
 800949a:	4628      	mov	r0, r5
 800949c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a0:	f000 b8dc 	b.w	800965c <__malloc_unlock>
 80094a4:	42a3      	cmp	r3, r4
 80094a6:	d908      	bls.n	80094ba <_free_r+0x42>
 80094a8:	6820      	ldr	r0, [r4, #0]
 80094aa:	1821      	adds	r1, r4, r0
 80094ac:	428b      	cmp	r3, r1
 80094ae:	bf01      	itttt	eq
 80094b0:	6819      	ldreq	r1, [r3, #0]
 80094b2:	685b      	ldreq	r3, [r3, #4]
 80094b4:	1809      	addeq	r1, r1, r0
 80094b6:	6021      	streq	r1, [r4, #0]
 80094b8:	e7ed      	b.n	8009496 <_free_r+0x1e>
 80094ba:	461a      	mov	r2, r3
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	b10b      	cbz	r3, 80094c4 <_free_r+0x4c>
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d9fa      	bls.n	80094ba <_free_r+0x42>
 80094c4:	6811      	ldr	r1, [r2, #0]
 80094c6:	1850      	adds	r0, r2, r1
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d10b      	bne.n	80094e4 <_free_r+0x6c>
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	4401      	add	r1, r0
 80094d0:	1850      	adds	r0, r2, r1
 80094d2:	6011      	str	r1, [r2, #0]
 80094d4:	4283      	cmp	r3, r0
 80094d6:	d1e0      	bne.n	800949a <_free_r+0x22>
 80094d8:	6818      	ldr	r0, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	4408      	add	r0, r1
 80094de:	6053      	str	r3, [r2, #4]
 80094e0:	6010      	str	r0, [r2, #0]
 80094e2:	e7da      	b.n	800949a <_free_r+0x22>
 80094e4:	d902      	bls.n	80094ec <_free_r+0x74>
 80094e6:	230c      	movs	r3, #12
 80094e8:	602b      	str	r3, [r5, #0]
 80094ea:	e7d6      	b.n	800949a <_free_r+0x22>
 80094ec:	6820      	ldr	r0, [r4, #0]
 80094ee:	1821      	adds	r1, r4, r0
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf02      	ittt	eq
 80094f4:	6819      	ldreq	r1, [r3, #0]
 80094f6:	685b      	ldreq	r3, [r3, #4]
 80094f8:	1809      	addeq	r1, r1, r0
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	bf08      	it	eq
 80094fe:	6021      	streq	r1, [r4, #0]
 8009500:	6054      	str	r4, [r2, #4]
 8009502:	e7ca      	b.n	800949a <_free_r+0x22>
 8009504:	bd38      	pop	{r3, r4, r5, pc}
 8009506:	bf00      	nop
 8009508:	20000a14 	.word	0x20000a14

0800950c <sbrk_aligned>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4e0f      	ldr	r6, [pc, #60]	@ (800954c <sbrk_aligned+0x40>)
 8009510:	460c      	mov	r4, r1
 8009512:	4605      	mov	r5, r0
 8009514:	6831      	ldr	r1, [r6, #0]
 8009516:	b911      	cbnz	r1, 800951e <sbrk_aligned+0x12>
 8009518:	f000 fcdc 	bl	8009ed4 <_sbrk_r>
 800951c:	6030      	str	r0, [r6, #0]
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 fcd7 	bl	8009ed4 <_sbrk_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d103      	bne.n	8009532 <sbrk_aligned+0x26>
 800952a:	f04f 34ff 	mov.w	r4, #4294967295
 800952e:	4620      	mov	r0, r4
 8009530:	bd70      	pop	{r4, r5, r6, pc}
 8009532:	1cc4      	adds	r4, r0, #3
 8009534:	f024 0403 	bic.w	r4, r4, #3
 8009538:	42a0      	cmp	r0, r4
 800953a:	d0f8      	beq.n	800952e <sbrk_aligned+0x22>
 800953c:	1a21      	subs	r1, r4, r0
 800953e:	4628      	mov	r0, r5
 8009540:	f000 fcc8 	bl	8009ed4 <_sbrk_r>
 8009544:	3001      	adds	r0, #1
 8009546:	d1f2      	bne.n	800952e <sbrk_aligned+0x22>
 8009548:	e7ef      	b.n	800952a <sbrk_aligned+0x1e>
 800954a:	bf00      	nop
 800954c:	20000a10 	.word	0x20000a10

08009550 <_malloc_r>:
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	1ccd      	adds	r5, r1, #3
 8009556:	4606      	mov	r6, r0
 8009558:	f025 0503 	bic.w	r5, r5, #3
 800955c:	3508      	adds	r5, #8
 800955e:	2d0c      	cmp	r5, #12
 8009560:	bf38      	it	cc
 8009562:	250c      	movcc	r5, #12
 8009564:	2d00      	cmp	r5, #0
 8009566:	db01      	blt.n	800956c <_malloc_r+0x1c>
 8009568:	42a9      	cmp	r1, r5
 800956a:	d904      	bls.n	8009576 <_malloc_r+0x26>
 800956c:	230c      	movs	r3, #12
 800956e:	6033      	str	r3, [r6, #0]
 8009570:	2000      	movs	r0, #0
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800964c <_malloc_r+0xfc>
 800957a:	f000 f869 	bl	8009650 <__malloc_lock>
 800957e:	f8d8 3000 	ldr.w	r3, [r8]
 8009582:	461c      	mov	r4, r3
 8009584:	bb44      	cbnz	r4, 80095d8 <_malloc_r+0x88>
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff ffbf 	bl	800950c <sbrk_aligned>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	4604      	mov	r4, r0
 8009592:	d158      	bne.n	8009646 <_malloc_r+0xf6>
 8009594:	f8d8 4000 	ldr.w	r4, [r8]
 8009598:	4627      	mov	r7, r4
 800959a:	2f00      	cmp	r7, #0
 800959c:	d143      	bne.n	8009626 <_malloc_r+0xd6>
 800959e:	2c00      	cmp	r4, #0
 80095a0:	d04b      	beq.n	800963a <_malloc_r+0xea>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	4639      	mov	r1, r7
 80095a6:	4630      	mov	r0, r6
 80095a8:	eb04 0903 	add.w	r9, r4, r3
 80095ac:	f000 fc92 	bl	8009ed4 <_sbrk_r>
 80095b0:	4581      	cmp	r9, r0
 80095b2:	d142      	bne.n	800963a <_malloc_r+0xea>
 80095b4:	6821      	ldr	r1, [r4, #0]
 80095b6:	4630      	mov	r0, r6
 80095b8:	1a6d      	subs	r5, r5, r1
 80095ba:	4629      	mov	r1, r5
 80095bc:	f7ff ffa6 	bl	800950c <sbrk_aligned>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d03a      	beq.n	800963a <_malloc_r+0xea>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	442b      	add	r3, r5
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	f8d8 3000 	ldr.w	r3, [r8]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	bb62      	cbnz	r2, 800962c <_malloc_r+0xdc>
 80095d2:	f8c8 7000 	str.w	r7, [r8]
 80095d6:	e00f      	b.n	80095f8 <_malloc_r+0xa8>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	1b52      	subs	r2, r2, r5
 80095dc:	d420      	bmi.n	8009620 <_malloc_r+0xd0>
 80095de:	2a0b      	cmp	r2, #11
 80095e0:	d917      	bls.n	8009612 <_malloc_r+0xc2>
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	6025      	str	r5, [r4, #0]
 80095e8:	bf18      	it	ne
 80095ea:	6059      	strne	r1, [r3, #4]
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	bf08      	it	eq
 80095f0:	f8c8 1000 	streq.w	r1, [r8]
 80095f4:	5162      	str	r2, [r4, r5]
 80095f6:	604b      	str	r3, [r1, #4]
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 f82f 	bl	800965c <__malloc_unlock>
 80095fe:	f104 000b 	add.w	r0, r4, #11
 8009602:	1d23      	adds	r3, r4, #4
 8009604:	f020 0007 	bic.w	r0, r0, #7
 8009608:	1ac2      	subs	r2, r0, r3
 800960a:	bf1c      	itt	ne
 800960c:	1a1b      	subne	r3, r3, r0
 800960e:	50a3      	strne	r3, [r4, r2]
 8009610:	e7af      	b.n	8009572 <_malloc_r+0x22>
 8009612:	6862      	ldr	r2, [r4, #4]
 8009614:	42a3      	cmp	r3, r4
 8009616:	bf0c      	ite	eq
 8009618:	f8c8 2000 	streq.w	r2, [r8]
 800961c:	605a      	strne	r2, [r3, #4]
 800961e:	e7eb      	b.n	80095f8 <_malloc_r+0xa8>
 8009620:	4623      	mov	r3, r4
 8009622:	6864      	ldr	r4, [r4, #4]
 8009624:	e7ae      	b.n	8009584 <_malloc_r+0x34>
 8009626:	463c      	mov	r4, r7
 8009628:	687f      	ldr	r7, [r7, #4]
 800962a:	e7b6      	b.n	800959a <_malloc_r+0x4a>
 800962c:	461a      	mov	r2, r3
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	42a3      	cmp	r3, r4
 8009632:	d1fb      	bne.n	800962c <_malloc_r+0xdc>
 8009634:	2300      	movs	r3, #0
 8009636:	6053      	str	r3, [r2, #4]
 8009638:	e7de      	b.n	80095f8 <_malloc_r+0xa8>
 800963a:	230c      	movs	r3, #12
 800963c:	4630      	mov	r0, r6
 800963e:	6033      	str	r3, [r6, #0]
 8009640:	f000 f80c 	bl	800965c <__malloc_unlock>
 8009644:	e794      	b.n	8009570 <_malloc_r+0x20>
 8009646:	6005      	str	r5, [r0, #0]
 8009648:	e7d6      	b.n	80095f8 <_malloc_r+0xa8>
 800964a:	bf00      	nop
 800964c:	20000a14 	.word	0x20000a14

08009650 <__malloc_lock>:
 8009650:	4801      	ldr	r0, [pc, #4]	@ (8009658 <__malloc_lock+0x8>)
 8009652:	f7ff bf02 	b.w	800945a <__retarget_lock_acquire_recursive>
 8009656:	bf00      	nop
 8009658:	20000a0c 	.word	0x20000a0c

0800965c <__malloc_unlock>:
 800965c:	4801      	ldr	r0, [pc, #4]	@ (8009664 <__malloc_unlock+0x8>)
 800965e:	f7ff befd 	b.w	800945c <__retarget_lock_release_recursive>
 8009662:	bf00      	nop
 8009664:	20000a0c 	.word	0x20000a0c

08009668 <__sfputc_r>:
 8009668:	6893      	ldr	r3, [r2, #8]
 800966a:	3b01      	subs	r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	b410      	push	{r4}
 8009670:	6093      	str	r3, [r2, #8]
 8009672:	da08      	bge.n	8009686 <__sfputc_r+0x1e>
 8009674:	6994      	ldr	r4, [r2, #24]
 8009676:	42a3      	cmp	r3, r4
 8009678:	db01      	blt.n	800967e <__sfputc_r+0x16>
 800967a:	290a      	cmp	r1, #10
 800967c:	d103      	bne.n	8009686 <__sfputc_r+0x1e>
 800967e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009682:	f7ff bddc 	b.w	800923e <__swbuf_r>
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	1c58      	adds	r0, r3, #1
 800968a:	6010      	str	r0, [r2, #0]
 800968c:	4608      	mov	r0, r1
 800968e:	7019      	strb	r1, [r3, #0]
 8009690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009694:	4770      	bx	lr

08009696 <__sfputs_r>:
 8009696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009698:	4606      	mov	r6, r0
 800969a:	460f      	mov	r7, r1
 800969c:	4614      	mov	r4, r2
 800969e:	18d5      	adds	r5, r2, r3
 80096a0:	42ac      	cmp	r4, r5
 80096a2:	d101      	bne.n	80096a8 <__sfputs_r+0x12>
 80096a4:	2000      	movs	r0, #0
 80096a6:	e007      	b.n	80096b8 <__sfputs_r+0x22>
 80096a8:	463a      	mov	r2, r7
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff ffda 	bl	8009668 <__sfputc_r>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d1f3      	bne.n	80096a0 <__sfputs_r+0xa>
 80096b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096bc <_vfiprintf_r>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	460d      	mov	r5, r1
 80096c2:	b09d      	sub	sp, #116	@ 0x74
 80096c4:	4614      	mov	r4, r2
 80096c6:	4698      	mov	r8, r3
 80096c8:	4606      	mov	r6, r0
 80096ca:	b118      	cbz	r0, 80096d4 <_vfiprintf_r+0x18>
 80096cc:	6a03      	ldr	r3, [r0, #32]
 80096ce:	b90b      	cbnz	r3, 80096d4 <_vfiprintf_r+0x18>
 80096d0:	f7ff fcc4 	bl	800905c <__sinit>
 80096d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096d6:	07d9      	lsls	r1, r3, #31
 80096d8:	d405      	bmi.n	80096e6 <_vfiprintf_r+0x2a>
 80096da:	89ab      	ldrh	r3, [r5, #12]
 80096dc:	059a      	lsls	r2, r3, #22
 80096de:	d402      	bmi.n	80096e6 <_vfiprintf_r+0x2a>
 80096e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096e2:	f7ff feba 	bl	800945a <__retarget_lock_acquire_recursive>
 80096e6:	89ab      	ldrh	r3, [r5, #12]
 80096e8:	071b      	lsls	r3, r3, #28
 80096ea:	d501      	bpl.n	80096f0 <_vfiprintf_r+0x34>
 80096ec:	692b      	ldr	r3, [r5, #16]
 80096ee:	b99b      	cbnz	r3, 8009718 <_vfiprintf_r+0x5c>
 80096f0:	4629      	mov	r1, r5
 80096f2:	4630      	mov	r0, r6
 80096f4:	f7ff fde2 	bl	80092bc <__swsetup_r>
 80096f8:	b170      	cbz	r0, 8009718 <_vfiprintf_r+0x5c>
 80096fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096fc:	07dc      	lsls	r4, r3, #31
 80096fe:	d504      	bpl.n	800970a <_vfiprintf_r+0x4e>
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	b01d      	add	sp, #116	@ 0x74
 8009706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970a:	89ab      	ldrh	r3, [r5, #12]
 800970c:	0598      	lsls	r0, r3, #22
 800970e:	d4f7      	bmi.n	8009700 <_vfiprintf_r+0x44>
 8009710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009712:	f7ff fea3 	bl	800945c <__retarget_lock_release_recursive>
 8009716:	e7f3      	b.n	8009700 <_vfiprintf_r+0x44>
 8009718:	2300      	movs	r3, #0
 800971a:	f8cd 800c 	str.w	r8, [sp, #12]
 800971e:	f04f 0901 	mov.w	r9, #1
 8009722:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80098d8 <_vfiprintf_r+0x21c>
 8009726:	9309      	str	r3, [sp, #36]	@ 0x24
 8009728:	2320      	movs	r3, #32
 800972a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800972e:	2330      	movs	r3, #48	@ 0x30
 8009730:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009734:	4623      	mov	r3, r4
 8009736:	469a      	mov	sl, r3
 8009738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973c:	b10a      	cbz	r2, 8009742 <_vfiprintf_r+0x86>
 800973e:	2a25      	cmp	r2, #37	@ 0x25
 8009740:	d1f9      	bne.n	8009736 <_vfiprintf_r+0x7a>
 8009742:	ebba 0b04 	subs.w	fp, sl, r4
 8009746:	d00b      	beq.n	8009760 <_vfiprintf_r+0xa4>
 8009748:	465b      	mov	r3, fp
 800974a:	4622      	mov	r2, r4
 800974c:	4629      	mov	r1, r5
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff ffa1 	bl	8009696 <__sfputs_r>
 8009754:	3001      	adds	r0, #1
 8009756:	f000 80a7 	beq.w	80098a8 <_vfiprintf_r+0x1ec>
 800975a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800975c:	445a      	add	r2, fp
 800975e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009760:	f89a 3000 	ldrb.w	r3, [sl]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 809f 	beq.w	80098a8 <_vfiprintf_r+0x1ec>
 800976a:	2300      	movs	r3, #0
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	f10a 0a01 	add.w	sl, sl, #1
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800977c:	931a      	str	r3, [sp, #104]	@ 0x68
 800977e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009782:	4654      	mov	r4, sl
 8009784:	2205      	movs	r2, #5
 8009786:	4854      	ldr	r0, [pc, #336]	@ (80098d8 <_vfiprintf_r+0x21c>)
 8009788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978c:	f000 fbb2 	bl	8009ef4 <memchr>
 8009790:	9a04      	ldr	r2, [sp, #16]
 8009792:	b9d8      	cbnz	r0, 80097cc <_vfiprintf_r+0x110>
 8009794:	06d1      	lsls	r1, r2, #27
 8009796:	bf44      	itt	mi
 8009798:	2320      	movmi	r3, #32
 800979a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800979e:	0713      	lsls	r3, r2, #28
 80097a0:	bf44      	itt	mi
 80097a2:	232b      	movmi	r3, #43	@ 0x2b
 80097a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097a8:	f89a 3000 	ldrb.w	r3, [sl]
 80097ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ae:	d015      	beq.n	80097dc <_vfiprintf_r+0x120>
 80097b0:	9a07      	ldr	r2, [sp, #28]
 80097b2:	4654      	mov	r4, sl
 80097b4:	2000      	movs	r0, #0
 80097b6:	f04f 0c0a 	mov.w	ip, #10
 80097ba:	4621      	mov	r1, r4
 80097bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c0:	3b30      	subs	r3, #48	@ 0x30
 80097c2:	2b09      	cmp	r3, #9
 80097c4:	d94b      	bls.n	800985e <_vfiprintf_r+0x1a2>
 80097c6:	b1b0      	cbz	r0, 80097f6 <_vfiprintf_r+0x13a>
 80097c8:	9207      	str	r2, [sp, #28]
 80097ca:	e014      	b.n	80097f6 <_vfiprintf_r+0x13a>
 80097cc:	eba0 0308 	sub.w	r3, r0, r8
 80097d0:	46a2      	mov	sl, r4
 80097d2:	fa09 f303 	lsl.w	r3, r9, r3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	e7d2      	b.n	8009782 <_vfiprintf_r+0xc6>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	1d19      	adds	r1, r3, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	9103      	str	r1, [sp, #12]
 80097e6:	bfbb      	ittet	lt
 80097e8:	425b      	neglt	r3, r3
 80097ea:	f042 0202 	orrlt.w	r2, r2, #2
 80097ee:	9307      	strge	r3, [sp, #28]
 80097f0:	9307      	strlt	r3, [sp, #28]
 80097f2:	bfb8      	it	lt
 80097f4:	9204      	strlt	r2, [sp, #16]
 80097f6:	7823      	ldrb	r3, [r4, #0]
 80097f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80097fa:	d10a      	bne.n	8009812 <_vfiprintf_r+0x156>
 80097fc:	7863      	ldrb	r3, [r4, #1]
 80097fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009800:	d132      	bne.n	8009868 <_vfiprintf_r+0x1ac>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	3402      	adds	r4, #2
 8009806:	1d1a      	adds	r2, r3, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800980e:	9203      	str	r2, [sp, #12]
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80098e8 <_vfiprintf_r+0x22c>
 8009816:	2203      	movs	r2, #3
 8009818:	7821      	ldrb	r1, [r4, #0]
 800981a:	4650      	mov	r0, sl
 800981c:	f000 fb6a 	bl	8009ef4 <memchr>
 8009820:	b138      	cbz	r0, 8009832 <_vfiprintf_r+0x176>
 8009822:	eba0 000a 	sub.w	r0, r0, sl
 8009826:	2240      	movs	r2, #64	@ 0x40
 8009828:	9b04      	ldr	r3, [sp, #16]
 800982a:	3401      	adds	r4, #1
 800982c:	4082      	lsls	r2, r0
 800982e:	4313      	orrs	r3, r2
 8009830:	9304      	str	r3, [sp, #16]
 8009832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009836:	2206      	movs	r2, #6
 8009838:	4828      	ldr	r0, [pc, #160]	@ (80098dc <_vfiprintf_r+0x220>)
 800983a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800983e:	f000 fb59 	bl	8009ef4 <memchr>
 8009842:	2800      	cmp	r0, #0
 8009844:	d03f      	beq.n	80098c6 <_vfiprintf_r+0x20a>
 8009846:	4b26      	ldr	r3, [pc, #152]	@ (80098e0 <_vfiprintf_r+0x224>)
 8009848:	bb1b      	cbnz	r3, 8009892 <_vfiprintf_r+0x1d6>
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	3307      	adds	r3, #7
 800984e:	f023 0307 	bic.w	r3, r3, #7
 8009852:	3308      	adds	r3, #8
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009858:	443b      	add	r3, r7
 800985a:	9309      	str	r3, [sp, #36]	@ 0x24
 800985c:	e76a      	b.n	8009734 <_vfiprintf_r+0x78>
 800985e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009862:	460c      	mov	r4, r1
 8009864:	2001      	movs	r0, #1
 8009866:	e7a8      	b.n	80097ba <_vfiprintf_r+0xfe>
 8009868:	2300      	movs	r3, #0
 800986a:	3401      	adds	r4, #1
 800986c:	f04f 0c0a 	mov.w	ip, #10
 8009870:	4619      	mov	r1, r3
 8009872:	9305      	str	r3, [sp, #20]
 8009874:	4620      	mov	r0, r4
 8009876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800987a:	3a30      	subs	r2, #48	@ 0x30
 800987c:	2a09      	cmp	r2, #9
 800987e:	d903      	bls.n	8009888 <_vfiprintf_r+0x1cc>
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0c6      	beq.n	8009812 <_vfiprintf_r+0x156>
 8009884:	9105      	str	r1, [sp, #20]
 8009886:	e7c4      	b.n	8009812 <_vfiprintf_r+0x156>
 8009888:	fb0c 2101 	mla	r1, ip, r1, r2
 800988c:	4604      	mov	r4, r0
 800988e:	2301      	movs	r3, #1
 8009890:	e7f0      	b.n	8009874 <_vfiprintf_r+0x1b8>
 8009892:	ab03      	add	r3, sp, #12
 8009894:	462a      	mov	r2, r5
 8009896:	a904      	add	r1, sp, #16
 8009898:	4630      	mov	r0, r6
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4b11      	ldr	r3, [pc, #68]	@ (80098e4 <_vfiprintf_r+0x228>)
 800989e:	f3af 8000 	nop.w
 80098a2:	4607      	mov	r7, r0
 80098a4:	1c78      	adds	r0, r7, #1
 80098a6:	d1d6      	bne.n	8009856 <_vfiprintf_r+0x19a>
 80098a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098aa:	07d9      	lsls	r1, r3, #31
 80098ac:	d405      	bmi.n	80098ba <_vfiprintf_r+0x1fe>
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	059a      	lsls	r2, r3, #22
 80098b2:	d402      	bmi.n	80098ba <_vfiprintf_r+0x1fe>
 80098b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098b6:	f7ff fdd1 	bl	800945c <__retarget_lock_release_recursive>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	065b      	lsls	r3, r3, #25
 80098be:	f53f af1f 	bmi.w	8009700 <_vfiprintf_r+0x44>
 80098c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098c4:	e71e      	b.n	8009704 <_vfiprintf_r+0x48>
 80098c6:	ab03      	add	r3, sp, #12
 80098c8:	462a      	mov	r2, r5
 80098ca:	a904      	add	r1, sp, #16
 80098cc:	4630      	mov	r0, r6
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	4b04      	ldr	r3, [pc, #16]	@ (80098e4 <_vfiprintf_r+0x228>)
 80098d2:	f000 f87d 	bl	80099d0 <_printf_i>
 80098d6:	e7e4      	b.n	80098a2 <_vfiprintf_r+0x1e6>
 80098d8:	0800a1b4 	.word	0x0800a1b4
 80098dc:	0800a1be 	.word	0x0800a1be
 80098e0:	00000000 	.word	0x00000000
 80098e4:	08009697 	.word	0x08009697
 80098e8:	0800a1ba 	.word	0x0800a1ba

080098ec <_printf_common>:
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	4616      	mov	r6, r2
 80098f2:	4698      	mov	r8, r3
 80098f4:	688a      	ldr	r2, [r1, #8]
 80098f6:	4607      	mov	r7, r0
 80098f8:	690b      	ldr	r3, [r1, #16]
 80098fa:	460c      	mov	r4, r1
 80098fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009900:	4293      	cmp	r3, r2
 8009902:	bfb8      	it	lt
 8009904:	4613      	movlt	r3, r2
 8009906:	6033      	str	r3, [r6, #0]
 8009908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800990c:	b10a      	cbz	r2, 8009912 <_printf_common+0x26>
 800990e:	3301      	adds	r3, #1
 8009910:	6033      	str	r3, [r6, #0]
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	0699      	lsls	r1, r3, #26
 8009916:	bf42      	ittt	mi
 8009918:	6833      	ldrmi	r3, [r6, #0]
 800991a:	3302      	addmi	r3, #2
 800991c:	6033      	strmi	r3, [r6, #0]
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	f015 0506 	ands.w	r5, r5, #6
 8009924:	d106      	bne.n	8009934 <_printf_common+0x48>
 8009926:	f104 0a19 	add.w	sl, r4, #25
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	6832      	ldr	r2, [r6, #0]
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	42ab      	cmp	r3, r5
 8009932:	dc2b      	bgt.n	800998c <_printf_common+0xa0>
 8009934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	3b00      	subs	r3, #0
 800993c:	bf18      	it	ne
 800993e:	2301      	movne	r3, #1
 8009940:	0692      	lsls	r2, r2, #26
 8009942:	d430      	bmi.n	80099a6 <_printf_common+0xba>
 8009944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009948:	4641      	mov	r1, r8
 800994a:	4638      	mov	r0, r7
 800994c:	47c8      	blx	r9
 800994e:	3001      	adds	r0, #1
 8009950:	d023      	beq.n	800999a <_printf_common+0xae>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	341a      	adds	r4, #26
 8009956:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800995a:	f003 0306 	and.w	r3, r3, #6
 800995e:	2b04      	cmp	r3, #4
 8009960:	bf0a      	itet	eq
 8009962:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009966:	2500      	movne	r5, #0
 8009968:	6833      	ldreq	r3, [r6, #0]
 800996a:	f04f 0600 	mov.w	r6, #0
 800996e:	bf08      	it	eq
 8009970:	1aed      	subeq	r5, r5, r3
 8009972:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009976:	bf08      	it	eq
 8009978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800997c:	4293      	cmp	r3, r2
 800997e:	bfc4      	itt	gt
 8009980:	1a9b      	subgt	r3, r3, r2
 8009982:	18ed      	addgt	r5, r5, r3
 8009984:	42b5      	cmp	r5, r6
 8009986:	d11a      	bne.n	80099be <_printf_common+0xd2>
 8009988:	2000      	movs	r0, #0
 800998a:	e008      	b.n	800999e <_printf_common+0xb2>
 800998c:	2301      	movs	r3, #1
 800998e:	4652      	mov	r2, sl
 8009990:	4641      	mov	r1, r8
 8009992:	4638      	mov	r0, r7
 8009994:	47c8      	blx	r9
 8009996:	3001      	adds	r0, #1
 8009998:	d103      	bne.n	80099a2 <_printf_common+0xb6>
 800999a:	f04f 30ff 	mov.w	r0, #4294967295
 800999e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a2:	3501      	adds	r5, #1
 80099a4:	e7c1      	b.n	800992a <_printf_common+0x3e>
 80099a6:	18e1      	adds	r1, r4, r3
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	2030      	movs	r0, #48	@ 0x30
 80099ac:	3302      	adds	r3, #2
 80099ae:	4422      	add	r2, r4
 80099b0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099bc:	e7c2      	b.n	8009944 <_printf_common+0x58>
 80099be:	2301      	movs	r3, #1
 80099c0:	4622      	mov	r2, r4
 80099c2:	4641      	mov	r1, r8
 80099c4:	4638      	mov	r0, r7
 80099c6:	47c8      	blx	r9
 80099c8:	3001      	adds	r0, #1
 80099ca:	d0e6      	beq.n	800999a <_printf_common+0xae>
 80099cc:	3601      	adds	r6, #1
 80099ce:	e7d9      	b.n	8009984 <_printf_common+0x98>

080099d0 <_printf_i>:
 80099d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	7e0f      	ldrb	r7, [r1, #24]
 80099d6:	4691      	mov	r9, r2
 80099d8:	4680      	mov	r8, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	2f78      	cmp	r7, #120	@ 0x78
 80099de:	469a      	mov	sl, r3
 80099e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099e6:	d807      	bhi.n	80099f8 <_printf_i+0x28>
 80099e8:	2f62      	cmp	r7, #98	@ 0x62
 80099ea:	d80a      	bhi.n	8009a02 <_printf_i+0x32>
 80099ec:	2f00      	cmp	r7, #0
 80099ee:	f000 80d1 	beq.w	8009b94 <_printf_i+0x1c4>
 80099f2:	2f58      	cmp	r7, #88	@ 0x58
 80099f4:	f000 80b8 	beq.w	8009b68 <_printf_i+0x198>
 80099f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a00:	e03a      	b.n	8009a78 <_printf_i+0xa8>
 8009a02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a06:	2b15      	cmp	r3, #21
 8009a08:	d8f6      	bhi.n	80099f8 <_printf_i+0x28>
 8009a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8009a10 <_printf_i+0x40>)
 8009a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	080099f9 	.word	0x080099f9
 8009a1c:	080099f9 	.word	0x080099f9
 8009a20:	080099f9 	.word	0x080099f9
 8009a24:	080099f9 	.word	0x080099f9
 8009a28:	08009a7d 	.word	0x08009a7d
 8009a2c:	080099f9 	.word	0x080099f9
 8009a30:	080099f9 	.word	0x080099f9
 8009a34:	080099f9 	.word	0x080099f9
 8009a38:	080099f9 	.word	0x080099f9
 8009a3c:	08009b7b 	.word	0x08009b7b
 8009a40:	08009aa7 	.word	0x08009aa7
 8009a44:	08009b35 	.word	0x08009b35
 8009a48:	080099f9 	.word	0x080099f9
 8009a4c:	080099f9 	.word	0x080099f9
 8009a50:	08009b9d 	.word	0x08009b9d
 8009a54:	080099f9 	.word	0x080099f9
 8009a58:	08009aa7 	.word	0x08009aa7
 8009a5c:	080099f9 	.word	0x080099f9
 8009a60:	080099f9 	.word	0x080099f9
 8009a64:	08009b3d 	.word	0x08009b3d
 8009a68:	6833      	ldr	r3, [r6, #0]
 8009a6a:	1d1a      	adds	r2, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6032      	str	r2, [r6, #0]
 8009a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e09c      	b.n	8009bb6 <_printf_i+0x1e6>
 8009a7c:	6833      	ldr	r3, [r6, #0]
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	1d19      	adds	r1, r3, #4
 8009a82:	6031      	str	r1, [r6, #0]
 8009a84:	0606      	lsls	r6, r0, #24
 8009a86:	d501      	bpl.n	8009a8c <_printf_i+0xbc>
 8009a88:	681d      	ldr	r5, [r3, #0]
 8009a8a:	e003      	b.n	8009a94 <_printf_i+0xc4>
 8009a8c:	0645      	lsls	r5, r0, #25
 8009a8e:	d5fb      	bpl.n	8009a88 <_printf_i+0xb8>
 8009a90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a94:	2d00      	cmp	r5, #0
 8009a96:	da03      	bge.n	8009aa0 <_printf_i+0xd0>
 8009a98:	232d      	movs	r3, #45	@ 0x2d
 8009a9a:	426d      	negs	r5, r5
 8009a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aa0:	4858      	ldr	r0, [pc, #352]	@ (8009c04 <_printf_i+0x234>)
 8009aa2:	230a      	movs	r3, #10
 8009aa4:	e011      	b.n	8009aca <_printf_i+0xfa>
 8009aa6:	6821      	ldr	r1, [r4, #0]
 8009aa8:	6833      	ldr	r3, [r6, #0]
 8009aaa:	0608      	lsls	r0, r1, #24
 8009aac:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ab0:	d402      	bmi.n	8009ab8 <_printf_i+0xe8>
 8009ab2:	0649      	lsls	r1, r1, #25
 8009ab4:	bf48      	it	mi
 8009ab6:	b2ad      	uxthmi	r5, r5
 8009ab8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009aba:	6033      	str	r3, [r6, #0]
 8009abc:	4851      	ldr	r0, [pc, #324]	@ (8009c04 <_printf_i+0x234>)
 8009abe:	bf14      	ite	ne
 8009ac0:	230a      	movne	r3, #10
 8009ac2:	2308      	moveq	r3, #8
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aca:	6866      	ldr	r6, [r4, #4]
 8009acc:	2e00      	cmp	r6, #0
 8009ace:	60a6      	str	r6, [r4, #8]
 8009ad0:	db05      	blt.n	8009ade <_printf_i+0x10e>
 8009ad2:	6821      	ldr	r1, [r4, #0]
 8009ad4:	432e      	orrs	r6, r5
 8009ad6:	f021 0104 	bic.w	r1, r1, #4
 8009ada:	6021      	str	r1, [r4, #0]
 8009adc:	d04b      	beq.n	8009b76 <_printf_i+0x1a6>
 8009ade:	4616      	mov	r6, r2
 8009ae0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ae4:	fb03 5711 	mls	r7, r3, r1, r5
 8009ae8:	5dc7      	ldrb	r7, [r0, r7]
 8009aea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aee:	462f      	mov	r7, r5
 8009af0:	460d      	mov	r5, r1
 8009af2:	42bb      	cmp	r3, r7
 8009af4:	d9f4      	bls.n	8009ae0 <_printf_i+0x110>
 8009af6:	2b08      	cmp	r3, #8
 8009af8:	d10b      	bne.n	8009b12 <_printf_i+0x142>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	07df      	lsls	r7, r3, #31
 8009afe:	d508      	bpl.n	8009b12 <_printf_i+0x142>
 8009b00:	6923      	ldr	r3, [r4, #16]
 8009b02:	6861      	ldr	r1, [r4, #4]
 8009b04:	4299      	cmp	r1, r3
 8009b06:	bfde      	ittt	le
 8009b08:	2330      	movle	r3, #48	@ 0x30
 8009b0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b12:	1b92      	subs	r2, r2, r6
 8009b14:	6122      	str	r2, [r4, #16]
 8009b16:	464b      	mov	r3, r9
 8009b18:	aa03      	add	r2, sp, #12
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	f8cd a000 	str.w	sl, [sp]
 8009b22:	f7ff fee3 	bl	80098ec <_printf_common>
 8009b26:	3001      	adds	r0, #1
 8009b28:	d14a      	bne.n	8009bc0 <_printf_i+0x1f0>
 8009b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2e:	b004      	add	sp, #16
 8009b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	f043 0320 	orr.w	r3, r3, #32
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	2778      	movs	r7, #120	@ 0x78
 8009b3e:	4832      	ldr	r0, [pc, #200]	@ (8009c08 <_printf_i+0x238>)
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b46:	061f      	lsls	r7, r3, #24
 8009b48:	6831      	ldr	r1, [r6, #0]
 8009b4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b4e:	d402      	bmi.n	8009b56 <_printf_i+0x186>
 8009b50:	065f      	lsls	r7, r3, #25
 8009b52:	bf48      	it	mi
 8009b54:	b2ad      	uxthmi	r5, r5
 8009b56:	6031      	str	r1, [r6, #0]
 8009b58:	07d9      	lsls	r1, r3, #31
 8009b5a:	bf44      	itt	mi
 8009b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8009b60:	6023      	strmi	r3, [r4, #0]
 8009b62:	b11d      	cbz	r5, 8009b6c <_printf_i+0x19c>
 8009b64:	2310      	movs	r3, #16
 8009b66:	e7ad      	b.n	8009ac4 <_printf_i+0xf4>
 8009b68:	4826      	ldr	r0, [pc, #152]	@ (8009c04 <_printf_i+0x234>)
 8009b6a:	e7e9      	b.n	8009b40 <_printf_i+0x170>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	f023 0320 	bic.w	r3, r3, #32
 8009b72:	6023      	str	r3, [r4, #0]
 8009b74:	e7f6      	b.n	8009b64 <_printf_i+0x194>
 8009b76:	4616      	mov	r6, r2
 8009b78:	e7bd      	b.n	8009af6 <_printf_i+0x126>
 8009b7a:	6833      	ldr	r3, [r6, #0]
 8009b7c:	6825      	ldr	r5, [r4, #0]
 8009b7e:	1d18      	adds	r0, r3, #4
 8009b80:	6961      	ldr	r1, [r4, #20]
 8009b82:	6030      	str	r0, [r6, #0]
 8009b84:	062e      	lsls	r6, r5, #24
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	d501      	bpl.n	8009b8e <_printf_i+0x1be>
 8009b8a:	6019      	str	r1, [r3, #0]
 8009b8c:	e002      	b.n	8009b94 <_printf_i+0x1c4>
 8009b8e:	0668      	lsls	r0, r5, #25
 8009b90:	d5fb      	bpl.n	8009b8a <_printf_i+0x1ba>
 8009b92:	8019      	strh	r1, [r3, #0]
 8009b94:	2300      	movs	r3, #0
 8009b96:	4616      	mov	r6, r2
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	e7bc      	b.n	8009b16 <_printf_i+0x146>
 8009b9c:	6833      	ldr	r3, [r6, #0]
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	1d1a      	adds	r2, r3, #4
 8009ba2:	6032      	str	r2, [r6, #0]
 8009ba4:	681e      	ldr	r6, [r3, #0]
 8009ba6:	6862      	ldr	r2, [r4, #4]
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f000 f9a3 	bl	8009ef4 <memchr>
 8009bae:	b108      	cbz	r0, 8009bb4 <_printf_i+0x1e4>
 8009bb0:	1b80      	subs	r0, r0, r6
 8009bb2:	6060      	str	r0, [r4, #4]
 8009bb4:	6863      	ldr	r3, [r4, #4]
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bbe:	e7aa      	b.n	8009b16 <_printf_i+0x146>
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	47d0      	blx	sl
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d0ad      	beq.n	8009b2a <_printf_i+0x15a>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	079b      	lsls	r3, r3, #30
 8009bd2:	d413      	bmi.n	8009bfc <_printf_i+0x22c>
 8009bd4:	68e0      	ldr	r0, [r4, #12]
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	4298      	cmp	r0, r3
 8009bda:	bfb8      	it	lt
 8009bdc:	4618      	movlt	r0, r3
 8009bde:	e7a6      	b.n	8009b2e <_printf_i+0x15e>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4632      	mov	r2, r6
 8009be4:	4649      	mov	r1, r9
 8009be6:	4640      	mov	r0, r8
 8009be8:	47d0      	blx	sl
 8009bea:	3001      	adds	r0, #1
 8009bec:	d09d      	beq.n	8009b2a <_printf_i+0x15a>
 8009bee:	3501      	adds	r5, #1
 8009bf0:	68e3      	ldr	r3, [r4, #12]
 8009bf2:	9903      	ldr	r1, [sp, #12]
 8009bf4:	1a5b      	subs	r3, r3, r1
 8009bf6:	42ab      	cmp	r3, r5
 8009bf8:	dcf2      	bgt.n	8009be0 <_printf_i+0x210>
 8009bfa:	e7eb      	b.n	8009bd4 <_printf_i+0x204>
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	f104 0619 	add.w	r6, r4, #25
 8009c02:	e7f5      	b.n	8009bf0 <_printf_i+0x220>
 8009c04:	0800a1c5 	.word	0x0800a1c5
 8009c08:	0800a1d6 	.word	0x0800a1d6

08009c0c <__sflush_r>:
 8009c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	0716      	lsls	r6, r2, #28
 8009c16:	4605      	mov	r5, r0
 8009c18:	460c      	mov	r4, r1
 8009c1a:	d454      	bmi.n	8009cc6 <__sflush_r+0xba>
 8009c1c:	684b      	ldr	r3, [r1, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	dc02      	bgt.n	8009c28 <__sflush_r+0x1c>
 8009c22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dd48      	ble.n	8009cba <__sflush_r+0xae>
 8009c28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d045      	beq.n	8009cba <__sflush_r+0xae>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c34:	682f      	ldr	r7, [r5, #0]
 8009c36:	6a21      	ldr	r1, [r4, #32]
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	d030      	beq.n	8009c9e <__sflush_r+0x92>
 8009c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	0759      	lsls	r1, r3, #29
 8009c42:	d505      	bpl.n	8009c50 <__sflush_r+0x44>
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	1ad2      	subs	r2, r2, r3
 8009c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c4a:	b10b      	cbz	r3, 8009c50 <__sflush_r+0x44>
 8009c4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c4e:	1ad2      	subs	r2, r2, r3
 8009c50:	2300      	movs	r3, #0
 8009c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c54:	6a21      	ldr	r1, [r4, #32]
 8009c56:	4628      	mov	r0, r5
 8009c58:	47b0      	blx	r6
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	d106      	bne.n	8009c6e <__sflush_r+0x62>
 8009c60:	6829      	ldr	r1, [r5, #0]
 8009c62:	291d      	cmp	r1, #29
 8009c64:	d82b      	bhi.n	8009cbe <__sflush_r+0xb2>
 8009c66:	4a2a      	ldr	r2, [pc, #168]	@ (8009d10 <__sflush_r+0x104>)
 8009c68:	40ca      	lsrs	r2, r1
 8009c6a:	07d6      	lsls	r6, r2, #31
 8009c6c:	d527      	bpl.n	8009cbe <__sflush_r+0xb2>
 8009c6e:	2200      	movs	r2, #0
 8009c70:	04d9      	lsls	r1, r3, #19
 8009c72:	6062      	str	r2, [r4, #4]
 8009c74:	6922      	ldr	r2, [r4, #16]
 8009c76:	6022      	str	r2, [r4, #0]
 8009c78:	d504      	bpl.n	8009c84 <__sflush_r+0x78>
 8009c7a:	1c42      	adds	r2, r0, #1
 8009c7c:	d101      	bne.n	8009c82 <__sflush_r+0x76>
 8009c7e:	682b      	ldr	r3, [r5, #0]
 8009c80:	b903      	cbnz	r3, 8009c84 <__sflush_r+0x78>
 8009c82:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c86:	602f      	str	r7, [r5, #0]
 8009c88:	b1b9      	cbz	r1, 8009cba <__sflush_r+0xae>
 8009c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	d002      	beq.n	8009c98 <__sflush_r+0x8c>
 8009c92:	4628      	mov	r0, r5
 8009c94:	f7ff fbf0 	bl	8009478 <_free_r>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c9c:	e00d      	b.n	8009cba <__sflush_r+0xae>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b0      	blx	r6
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	1c50      	adds	r0, r2, #1
 8009ca8:	d1c9      	bne.n	8009c3e <__sflush_r+0x32>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0c6      	beq.n	8009c3e <__sflush_r+0x32>
 8009cb0:	2b1d      	cmp	r3, #29
 8009cb2:	d001      	beq.n	8009cb8 <__sflush_r+0xac>
 8009cb4:	2b16      	cmp	r3, #22
 8009cb6:	d11d      	bne.n	8009cf4 <__sflush_r+0xe8>
 8009cb8:	602f      	str	r7, [r5, #0]
 8009cba:	2000      	movs	r0, #0
 8009cbc:	e021      	b.n	8009d02 <__sflush_r+0xf6>
 8009cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cc2:	b21b      	sxth	r3, r3
 8009cc4:	e01a      	b.n	8009cfc <__sflush_r+0xf0>
 8009cc6:	690f      	ldr	r7, [r1, #16]
 8009cc8:	2f00      	cmp	r7, #0
 8009cca:	d0f6      	beq.n	8009cba <__sflush_r+0xae>
 8009ccc:	0793      	lsls	r3, r2, #30
 8009cce:	680e      	ldr	r6, [r1, #0]
 8009cd0:	600f      	str	r7, [r1, #0]
 8009cd2:	bf0c      	ite	eq
 8009cd4:	694b      	ldreq	r3, [r1, #20]
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	eba6 0807 	sub.w	r8, r6, r7
 8009cdc:	608b      	str	r3, [r1, #8]
 8009cde:	f1b8 0f00 	cmp.w	r8, #0
 8009ce2:	ddea      	ble.n	8009cba <__sflush_r+0xae>
 8009ce4:	4643      	mov	r3, r8
 8009ce6:	463a      	mov	r2, r7
 8009ce8:	6a21      	ldr	r1, [r4, #32]
 8009cea:	4628      	mov	r0, r5
 8009cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cee:	47b0      	blx	r6
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	dc08      	bgt.n	8009d06 <__sflush_r+0xfa>
 8009cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d06:	4407      	add	r7, r0
 8009d08:	eba8 0800 	sub.w	r8, r8, r0
 8009d0c:	e7e7      	b.n	8009cde <__sflush_r+0xd2>
 8009d0e:	bf00      	nop
 8009d10:	20400001 	.word	0x20400001

08009d14 <_fflush_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	690b      	ldr	r3, [r1, #16]
 8009d18:	4605      	mov	r5, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	b913      	cbnz	r3, 8009d24 <_fflush_r+0x10>
 8009d1e:	2500      	movs	r5, #0
 8009d20:	4628      	mov	r0, r5
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	b118      	cbz	r0, 8009d2e <_fflush_r+0x1a>
 8009d26:	6a03      	ldr	r3, [r0, #32]
 8009d28:	b90b      	cbnz	r3, 8009d2e <_fflush_r+0x1a>
 8009d2a:	f7ff f997 	bl	800905c <__sinit>
 8009d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0f3      	beq.n	8009d1e <_fflush_r+0xa>
 8009d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d38:	07d0      	lsls	r0, r2, #31
 8009d3a:	d404      	bmi.n	8009d46 <_fflush_r+0x32>
 8009d3c:	0599      	lsls	r1, r3, #22
 8009d3e:	d402      	bmi.n	8009d46 <_fflush_r+0x32>
 8009d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d42:	f7ff fb8a 	bl	800945a <__retarget_lock_acquire_recursive>
 8009d46:	4628      	mov	r0, r5
 8009d48:	4621      	mov	r1, r4
 8009d4a:	f7ff ff5f 	bl	8009c0c <__sflush_r>
 8009d4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d50:	4605      	mov	r5, r0
 8009d52:	07da      	lsls	r2, r3, #31
 8009d54:	d4e4      	bmi.n	8009d20 <_fflush_r+0xc>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	059b      	lsls	r3, r3, #22
 8009d5a:	d4e1      	bmi.n	8009d20 <_fflush_r+0xc>
 8009d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d5e:	f7ff fb7d 	bl	800945c <__retarget_lock_release_recursive>
 8009d62:	e7dd      	b.n	8009d20 <_fflush_r+0xc>

08009d64 <__swhatbuf_r>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	460c      	mov	r4, r1
 8009d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6c:	b096      	sub	sp, #88	@ 0x58
 8009d6e:	4615      	mov	r5, r2
 8009d70:	2900      	cmp	r1, #0
 8009d72:	461e      	mov	r6, r3
 8009d74:	da0c      	bge.n	8009d90 <__swhatbuf_r+0x2c>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d7e:	bf14      	ite	ne
 8009d80:	2340      	movne	r3, #64	@ 0x40
 8009d82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d86:	2000      	movs	r0, #0
 8009d88:	6031      	str	r1, [r6, #0]
 8009d8a:	602b      	str	r3, [r5, #0]
 8009d8c:	b016      	add	sp, #88	@ 0x58
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	466a      	mov	r2, sp
 8009d92:	f000 f87d 	bl	8009e90 <_fstat_r>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	dbed      	blt.n	8009d76 <__swhatbuf_r+0x12>
 8009d9a:	9901      	ldr	r1, [sp, #4]
 8009d9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009da0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009da4:	4259      	negs	r1, r3
 8009da6:	4159      	adcs	r1, r3
 8009da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dac:	e7eb      	b.n	8009d86 <__swhatbuf_r+0x22>

08009dae <__smakebuf_r>:
 8009dae:	898b      	ldrh	r3, [r1, #12]
 8009db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009db2:	079d      	lsls	r5, r3, #30
 8009db4:	4606      	mov	r6, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	d507      	bpl.n	8009dca <__smakebuf_r+0x1c>
 8009dba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	6163      	str	r3, [r4, #20]
 8009dc6:	b003      	add	sp, #12
 8009dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dca:	ab01      	add	r3, sp, #4
 8009dcc:	466a      	mov	r2, sp
 8009dce:	f7ff ffc9 	bl	8009d64 <__swhatbuf_r>
 8009dd2:	9f00      	ldr	r7, [sp, #0]
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	4639      	mov	r1, r7
 8009dda:	f7ff fbb9 	bl	8009550 <_malloc_r>
 8009dde:	b948      	cbnz	r0, 8009df4 <__smakebuf_r+0x46>
 8009de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de4:	059a      	lsls	r2, r3, #22
 8009de6:	d4ee      	bmi.n	8009dc6 <__smakebuf_r+0x18>
 8009de8:	f023 0303 	bic.w	r3, r3, #3
 8009dec:	f043 0302 	orr.w	r3, r3, #2
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	e7e2      	b.n	8009dba <__smakebuf_r+0xc>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e04:	b15b      	cbz	r3, 8009e1e <__smakebuf_r+0x70>
 8009e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f000 f852 	bl	8009eb4 <_isatty_r>
 8009e10:	b128      	cbz	r0, 8009e1e <__smakebuf_r+0x70>
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	f023 0303 	bic.w	r3, r3, #3
 8009e18:	f043 0301 	orr.w	r3, r3, #1
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	431d      	orrs	r5, r3
 8009e22:	81a5      	strh	r5, [r4, #12]
 8009e24:	e7cf      	b.n	8009dc6 <__smakebuf_r+0x18>

08009e26 <_putc_r>:
 8009e26:	b570      	push	{r4, r5, r6, lr}
 8009e28:	460d      	mov	r5, r1
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	b118      	cbz	r0, 8009e38 <_putc_r+0x12>
 8009e30:	6a03      	ldr	r3, [r0, #32]
 8009e32:	b90b      	cbnz	r3, 8009e38 <_putc_r+0x12>
 8009e34:	f7ff f912 	bl	800905c <__sinit>
 8009e38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e3a:	07d8      	lsls	r0, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_putc_r+0x24>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	0599      	lsls	r1, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_putc_r+0x24>
 8009e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e46:	f7ff fb08 	bl	800945a <__retarget_lock_acquire_recursive>
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	da05      	bge.n	8009e60 <_putc_r+0x3a>
 8009e54:	69a2      	ldr	r2, [r4, #24]
 8009e56:	4293      	cmp	r3, r2
 8009e58:	db12      	blt.n	8009e80 <_putc_r+0x5a>
 8009e5a:	b2eb      	uxtb	r3, r5
 8009e5c:	2b0a      	cmp	r3, #10
 8009e5e:	d00f      	beq.n	8009e80 <_putc_r+0x5a>
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	6022      	str	r2, [r4, #0]
 8009e66:	701d      	strb	r5, [r3, #0]
 8009e68:	b2ed      	uxtb	r5, r5
 8009e6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e6c:	07da      	lsls	r2, r3, #31
 8009e6e:	d405      	bmi.n	8009e7c <_putc_r+0x56>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	059b      	lsls	r3, r3, #22
 8009e74:	d402      	bmi.n	8009e7c <_putc_r+0x56>
 8009e76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e78:	f7ff faf0 	bl	800945c <__retarget_lock_release_recursive>
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	4629      	mov	r1, r5
 8009e82:	4622      	mov	r2, r4
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7ff f9da 	bl	800923e <__swbuf_r>
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	e7ed      	b.n	8009e6a <_putc_r+0x44>
	...

08009e90 <_fstat_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	2300      	movs	r3, #0
 8009e94:	4d06      	ldr	r5, [pc, #24]	@ (8009eb0 <_fstat_r+0x20>)
 8009e96:	4604      	mov	r4, r0
 8009e98:	4608      	mov	r0, r1
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	f7f7 fe84 	bl	8001baa <_fstat>
 8009ea2:	1c43      	adds	r3, r0, #1
 8009ea4:	d102      	bne.n	8009eac <_fstat_r+0x1c>
 8009ea6:	682b      	ldr	r3, [r5, #0]
 8009ea8:	b103      	cbz	r3, 8009eac <_fstat_r+0x1c>
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	bd38      	pop	{r3, r4, r5, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000a08 	.word	0x20000a08

08009eb4 <_isatty_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4d05      	ldr	r5, [pc, #20]	@ (8009ed0 <_isatty_r+0x1c>)
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	602b      	str	r3, [r5, #0]
 8009ec0:	f7f7 fe83 	bl	8001bca <_isatty>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_isatty_r+0x1a>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_isatty_r+0x1a>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	20000a08 	.word	0x20000a08

08009ed4 <_sbrk_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4d05      	ldr	r5, [pc, #20]	@ (8009ef0 <_sbrk_r+0x1c>)
 8009eda:	4604      	mov	r4, r0
 8009edc:	4608      	mov	r0, r1
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	f7f7 fe8c 	bl	8001bfc <_sbrk>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_sbrk_r+0x1a>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_sbrk_r+0x1a>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	20000a08 	.word	0x20000a08

08009ef4 <memchr>:
 8009ef4:	b2c9      	uxtb	r1, r1
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4402      	add	r2, r0
 8009efa:	b510      	push	{r4, lr}
 8009efc:	4293      	cmp	r3, r2
 8009efe:	4618      	mov	r0, r3
 8009f00:	d101      	bne.n	8009f06 <memchr+0x12>
 8009f02:	2000      	movs	r0, #0
 8009f04:	e003      	b.n	8009f0e <memchr+0x1a>
 8009f06:	7804      	ldrb	r4, [r0, #0]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	428c      	cmp	r4, r1
 8009f0c:	d1f6      	bne.n	8009efc <memchr+0x8>
 8009f0e:	bd10      	pop	{r4, pc}

08009f10 <_init>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	bf00      	nop
 8009f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f16:	bc08      	pop	{r3}
 8009f18:	469e      	mov	lr, r3
 8009f1a:	4770      	bx	lr

08009f1c <_fini>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr
