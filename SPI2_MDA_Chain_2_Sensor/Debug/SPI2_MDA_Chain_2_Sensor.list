
SPI2_MDA_Chain_2_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a080  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000233  0800a2b8  0800a2b8  0000b2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a4ec  0800a4ec  0000b4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a4f4  0800a4f4  0000b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a4f8  0800a4f8  0000b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800a4fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005ac  2000005c  0800a558  0000c05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000608  0800a558  0000c608  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019817  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002776  00000000  00000000  000258a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e8  00000000  00000000  00028020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d26  00000000  00000000  00029108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6fd  00000000  00000000  00029e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017f7b  00000000  00000000  0006452b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001828d0  00000000  00000000  0007c4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fed76  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c20  00000000  00000000  001fedbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000093  00000000  00000000  002039dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a2a0 	.word	0x0800a2a0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800a2a0 	.word	0x0800a2a0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000608:	b0c0      	sub	sp, #256	@ 0x100
 800060a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060c:	f001 fad4 	bl	8001bb8 <HAL_Init>

							  /* Configure the System Power */
							  //SystemPower_Config();

							  /* Configure the system clock */
							  SystemClock_Config();
 8000610:	f000 f8c2 	bl	8000798 <SystemClock_Config>
							  /* USER CODE BEGIN SysInit */

							  /* USER CODE END SysInit */

							  /* Initialize all configured peripherals */
							  MX_GPIO_Init();
 8000614:	f000 fa2c 	bl	8000a70 <MX_GPIO_Init>
							  //MX_IWDG_Init();
							  MX_GPDMA1_Init();
 8000618:	f000 f924 	bl	8000864 <MX_GPDMA1_Init>
							  //MX_ICACHE_Init();
							  //MX_RTC_Init();
							  //MX_SAI1_Init();
							  //MX_SDMMC1_SD_Init();
							  //MX_SPI1_Init();
							  MX_SPI2_Init();
 800061c:	f000 f96a 	bl	80008f4 <MX_SPI2_Init>
							  //MX_SPI3_Init();
							  //MX_TAMP_RTC_Init();
							  //MX_TIM3_Init();
							  MX_USART2_UART_Init();
 8000620:	f000 f9d8 	bl	80009d4 <MX_USART2_UART_Init>
							  //MX_USART3_UART_Init();
							  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */
							  Initialize_Sensors();
 8000624:	f000 fc4e 	bl	8000ec4 <Initialize_Sensors>
							  start_sensor_read_chain();
 8000628:	f000 fd80 	bl	800112c <start_sensor_read_chain>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Check if the DMA chain has completed and new data is ready

	      if (g_data_ready) {
 800062c:	4b55      	ldr	r3, [pc, #340]	@ (8000784 <main+0x180>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0fa      	beq.n	800062c <main+0x28>
	          g_data_ready = 0; // Clear the flag immediately to wait for the next set
 8000636:	4b53      	ldr	r3, [pc, #332]	@ (8000784 <main+0x180>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	          int16_t iis3dwb_accel[3];     // X, Y, Z
	          int16_t ism330_gyro[3];       // X, Y, Z
	          int16_t ism330_accel[3];      // X, Y, Z

	          // Parse IIS3DWB: (MSB << 8) | LSB
	          iis3dwb_accel[0] = (int16_t)((iis3dwb_rx_buffer[1] << 8) | iis3dwb_rx_buffer[0]);
 800063c:	4b52      	ldr	r3, [pc, #328]	@ (8000788 <main+0x184>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	b21b      	sxth	r3, r3
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21a      	sxth	r2, r3
 8000646:	4b50      	ldr	r3, [pc, #320]	@ (8000788 <main+0x184>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
 8000650:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
	          iis3dwb_accel[1] = (int16_t)((iis3dwb_rx_buffer[3] << 8) | iis3dwb_rx_buffer[2]);
 8000654:	4b4c      	ldr	r3, [pc, #304]	@ (8000788 <main+0x184>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	b21b      	sxth	r3, r3
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21a      	sxth	r2, r3
 800065e:	4b4a      	ldr	r3, [pc, #296]	@ (8000788 <main+0x184>)
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	b21b      	sxth	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b21b      	sxth	r3, r3
 8000668:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
	          iis3dwb_accel[2] = (int16_t)((iis3dwb_rx_buffer[5] << 8) | iis3dwb_rx_buffer[4]);
 800066c:	4b46      	ldr	r3, [pc, #280]	@ (8000788 <main+0x184>)
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	b21b      	sxth	r3, r3
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	b21a      	sxth	r2, r3
 8000676:	4b44      	ldr	r3, [pc, #272]	@ (8000788 <main+0x184>)
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	b21b      	sxth	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b21b      	sxth	r3, r3
 8000680:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc

	          // Parse ISM330DHCX: (MSB << 8) | LSB
	          ism330_gyro[0] = (int16_t)((ism330dhcx_rx_buffer[1] << 8) | ism330dhcx_rx_buffer[0]);
 8000684:	4b41      	ldr	r3, [pc, #260]	@ (800078c <main+0x188>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	b21b      	sxth	r3, r3
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	4b3f      	ldr	r3, [pc, #252]	@ (800078c <main+0x188>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b21b      	sxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b21b      	sxth	r3, r3
 8000698:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
	          ism330_gyro[1] = (int16_t)((ism330dhcx_rx_buffer[3] << 8) | ism330dhcx_rx_buffer[2]);
 800069c:	4b3b      	ldr	r3, [pc, #236]	@ (800078c <main+0x188>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	4b39      	ldr	r3, [pc, #228]	@ (800078c <main+0x188>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	          ism330_gyro[2] = (int16_t)((ism330dhcx_rx_buffer[5] << 8) | ism330dhcx_rx_buffer[4]);
 80006b4:	4b35      	ldr	r3, [pc, #212]	@ (800078c <main+0x188>)
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b21a      	sxth	r2, r3
 80006be:	4b33      	ldr	r3, [pc, #204]	@ (800078c <main+0x188>)
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	          ism330_accel[0] = (int16_t)((ism330dhcx_rx_buffer[7] << 8) | ism330dhcx_rx_buffer[6]);
 80006cc:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <main+0x188>)
 80006ce:	79db      	ldrb	r3, [r3, #7]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <main+0x188>)
 80006d8:	799b      	ldrb	r3, [r3, #6]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21b      	sxth	r3, r3
 80006e0:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
	          ism330_accel[1] = (int16_t)((ism330dhcx_rx_buffer[9] << 8) | ism330dhcx_rx_buffer[8]);
 80006e4:	4b29      	ldr	r3, [pc, #164]	@ (800078c <main+0x188>)
 80006e6:	7a5b      	ldrb	r3, [r3, #9]
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	b21a      	sxth	r2, r3
 80006ee:	4b27      	ldr	r3, [pc, #156]	@ (800078c <main+0x188>)
 80006f0:	7a1b      	ldrb	r3, [r3, #8]
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
	          ism330_accel[2] = (int16_t)((ism330dhcx_rx_buffer[11] << 8) | ism330dhcx_rx_buffer[10]);
 80006fc:	4b23      	ldr	r3, [pc, #140]	@ (800078c <main+0x188>)
 80006fe:	7adb      	ldrb	r3, [r3, #11]
 8000700:	b21b      	sxth	r3, r3
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	b21a      	sxth	r2, r3
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <main+0x188>)
 8000708:	7a9b      	ldrb	r3, [r3, #10]
 800070a:	b21b      	sxth	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b21b      	sxth	r3, r3
 8000710:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
	          char uart_buf[200];
	          sprintf(uart_buf,
	                  "IIS3DWB Accel [X,Y,Z]: %d, %d, %d\r\n"
	                  "ISM330 Gyro [X,Y,Z]: %d, %d, %d\r\n"
	                  "ISM330 Accel [X,Y,Z]: %d, %d, %d\r\n---\r\n",
	                  iis3dwb_accel[0], iis3dwb_accel[1], iis3dwb_accel[2],
 8000714:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
	          sprintf(uart_buf,
 8000718:	469c      	mov	ip, r3
	                  iis3dwb_accel[0], iis3dwb_accel[1], iis3dwb_accel[2],
 800071a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	@ 0xda
	          sprintf(uart_buf,
 800071e:	469e      	mov	lr, r3
	                  iis3dwb_accel[0], iis3dwb_accel[1], iis3dwb_accel[2],
 8000720:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
	                  ism330_gyro[0], ism330_gyro[1], ism330_gyro[2],
 8000724:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	@ 0xd0
 8000728:	f9b7 10d2 	ldrsh.w	r1, [r7, #210]	@ 0xd2
 800072c:	f9b7 00d4 	ldrsh.w	r0, [r7, #212]	@ 0xd4
	          sprintf(uart_buf,
 8000730:	4604      	mov	r4, r0
	                  ism330_accel[0], ism330_accel[1], ism330_accel[2]);
 8000732:	f9b7 00c8 	ldrsh.w	r0, [r7, #200]	@ 0xc8
	          sprintf(uart_buf,
 8000736:	4605      	mov	r5, r0
	                  ism330_accel[0], ism330_accel[1], ism330_accel[2]);
 8000738:	f9b7 00ca 	ldrsh.w	r0, [r7, #202]	@ 0xca
	          sprintf(uart_buf,
 800073c:	4606      	mov	r6, r0
	                  ism330_accel[0], ism330_accel[1], ism330_accel[2]);
 800073e:	f9b7 00cc 	ldrsh.w	r0, [r7, #204]	@ 0xcc
	          sprintf(uart_buf,
 8000742:	46b8      	mov	r8, r7
 8000744:	9006      	str	r0, [sp, #24]
 8000746:	9605      	str	r6, [sp, #20]
 8000748:	9504      	str	r5, [sp, #16]
 800074a:	9403      	str	r4, [sp, #12]
 800074c:	9102      	str	r1, [sp, #8]
 800074e:	9201      	str	r2, [sp, #4]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	4673      	mov	r3, lr
 8000754:	4662      	mov	r2, ip
 8000756:	490e      	ldr	r1, [pc, #56]	@ (8000790 <main+0x18c>)
 8000758:	4640      	mov	r0, r8
 800075a:	f009 f8ef 	bl	800993c <siprintf>

	          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 800075e:	463b      	mov	r3, r7
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd89 	bl	8000278 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	4639      	mov	r1, r7
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <main+0x190>)
 8000772:	f008 fb81 	bl	8008e78 <HAL_UART_Transmit>

	          // --- 3. Prepare for Next Read ---
	          HAL_Delay(100); // Wait 100ms before starting the next read cycle
 8000776:	2064      	movs	r0, #100	@ 0x64
 8000778:	f001 fae4 	bl	8001d44 <HAL_Delay>
	          start_sensor_read_chain();
 800077c:	f000 fcd6 	bl	800112c <start_sensor_read_chain>
	      if (g_data_ready) {
 8000780:	e754      	b.n	800062c <main+0x28>
 8000782:	bf00      	nop
 8000784:	200004b0 	.word	0x200004b0
 8000788:	2000049c 	.word	0x2000049c
 800078c:	200004a4 	.word	0x200004a4
 8000790:	0800a2b8 	.word	0x0800a2b8
 8000794:	200003d8 	.word	0x200003d8

08000798 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09e      	sub	sp, #120	@ 0x78
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2260      	movs	r2, #96	@ 0x60
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 f8ea 	bl	8009980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
 80007ba:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007bc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007c0:	f002 fe06 	bl	80033d0 <HAL_PWREx_ControlVoltageScaling>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007ca:	f000 fd33 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007ce:	232b      	movs	r3, #43	@ 0x2b
 80007d0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	2303      	movs	r3, #3
 80007f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000802:	230a      	movs	r3, #10
 8000804:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800080e:	2301      	movs	r3, #1
 8000810:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000812:	230c      	movs	r3, #12
 8000814:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fe92 	bl	8003548 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800082a:	f000 fd03 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	231f      	movs	r3, #31
 8000830:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	2104      	movs	r1, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fd58 	bl	8004300 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000856:	f000 fced 	bl	8001234 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3778      	adds	r7, #120	@ 0x78
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <MX_GPDMA1_Init>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <MX_GPDMA1_Init+0x8c>)
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <MX_GPDMA1_Init+0x8c>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800087a:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <MX_GPDMA1_Init+0x8c>)
 800087c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	201d      	movs	r0, #29
 800088e:	f001 fb35 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000892:	201d      	movs	r0, #29
 8000894:	f001 fb4c 	bl	8001f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	201e      	movs	r0, #30
 800089e:	f001 fb2d 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80008a2:	201e      	movs	r0, #30
 80008a4:	f001 fb44 	bl	8001f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	201f      	movs	r0, #31
 80008ae:	f001 fb25 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80008b2:	201f      	movs	r0, #31
 80008b4:	f001 fb3c 	bl	8001f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2020      	movs	r0, #32
 80008be:	f001 fb1d 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80008c2:	2020      	movs	r0, #32
 80008c4:	f001 fb34 	bl	8001f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2021      	movs	r0, #33	@ 0x21
 80008ce:	f001 fb15 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80008d2:	2021      	movs	r0, #33	@ 0x21
 80008d4:	f001 fb2c 	bl	8001f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2022      	movs	r0, #34	@ 0x22
 80008de:	f001 fb0d 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80008e2:	2022      	movs	r0, #34	@ 0x22
 80008e4:	f001 fb24 	bl	8001f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	46020c00 	.word	0x46020c00

080008f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000904:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000906:	4a31      	ldr	r2, [pc, #196]	@ (80009cc <MX_SPI2_Init+0xd8>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b2f      	ldr	r3, [pc, #188]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800090c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800091a:	2207      	movs	r2, #7
 800091c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800092c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000930:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000932:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000934:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000938:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800094e:	2207      	movs	r2, #7
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800095c:	2200      	movs	r2, #0
 800095e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000962:	2200      	movs	r2, #0
 8000964:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000968:	2200      	movs	r2, #0
 800096a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800096e:	2200      	movs	r2, #0
 8000970:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000974:	2200      	movs	r2, #0
 8000976:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800097a:	2200      	movs	r2, #0
 800097c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000980:	2200      	movs	r2, #0
 8000982:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000986:	2200      	movs	r2, #0
 8000988:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 800098c:	2200      	movs	r2, #0
 800098e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 8000992:	f006 fd65 	bl	8007460 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 800099c:	f000 fc4a 	bl	8001234 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <MX_SPI2_Init+0xdc>)
 80009a6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_SPI2_Init+0xd4>)
 80009b2:	f008 f9d0 	bl	8008d56 <HAL_SPIEx_SetConfigAutonomousMode>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80009bc:	f000 fc3a 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000258 	.word	0x20000258
 80009cc:	40003800 	.word	0x40003800
 80009d0:	10010000 	.word	0x10010000

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 80009da:	4a24      	ldr	r2, [pc, #144]	@ (8000a6c <MX_USART2_UART_Init+0x98>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a04:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4812      	ldr	r0, [pc, #72]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a20:	f008 f9da 	bl	8008dd8 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000a2a:	f000 fc03 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a32:	f008 feb9 	bl	80097a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a3c:	f000 fbfa 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4809      	ldr	r0, [pc, #36]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a44:	f008 feee 	bl	8009824 <HAL_UARTEx_SetRxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a4e:	f000 fbf1 	bl	8001234 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 8000a54:	f008 fe6f 	bl	8009736 <HAL_UARTEx_DisableFifoMode>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000a5e:	f000 fbe9 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200003d8 	.word	0x200003d8
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	@ 0x38
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4bbf      	ldr	r3, [pc, #764]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8c:	4abd      	ldr	r2, [pc, #756]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a96:	4bbb      	ldr	r3, [pc, #748]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	623b      	str	r3, [r7, #32]
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aa4:	4bb7      	ldr	r3, [pc, #732]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aaa:	4ab6      	ldr	r2, [pc, #728]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab4:	4bb3      	ldr	r3, [pc, #716]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4bb0      	ldr	r3, [pc, #704]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac8:	4aae      	ldr	r2, [pc, #696]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ace:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad2:	4bac      	ldr	r3, [pc, #688]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	4ba8      	ldr	r3, [pc, #672]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ae6:	4aa7      	ldr	r2, [pc, #668]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000af0:	4ba4      	ldr	r3, [pc, #656]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4ba1      	ldr	r3, [pc, #644]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b04:	4a9f      	ldr	r2, [pc, #636]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b0e:	4b9d      	ldr	r3, [pc, #628]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1c:	4b99      	ldr	r3, [pc, #612]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b22:	4a98      	ldr	r2, [pc, #608]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b2c:	4b95      	ldr	r3, [pc, #596]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b92      	ldr	r3, [pc, #584]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b40:	4a90      	ldr	r2, [pc, #576]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b58:	4b8a      	ldr	r3, [pc, #552]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b5e:	4a89      	ldr	r2, [pc, #548]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b68:	4b86      	ldr	r3, [pc, #536]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b83      	ldr	r3, [pc, #524]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7c:	4a81      	ldr	r2, [pc, #516]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b86:	4b7f      	ldr	r3, [pc, #508]	@ (8000d84 <MX_GPIO_Init+0x314>)
 8000b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8000b9a:	487b      	ldr	r0, [pc, #492]	@ (8000d88 <MX_GPIO_Init+0x318>)
 8000b9c:	f002 fbc4 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2181      	movs	r1, #129	@ 0x81
 8000ba4:	4879      	ldr	r0, [pc, #484]	@ (8000d8c <MX_GPIO_Init+0x31c>)
 8000ba6:	f002 fbbf 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000bb0:	4875      	ldr	r0, [pc, #468]	@ (8000d88 <MX_GPIO_Init+0x318>)
 8000bb2:	f002 fbb9 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4875      	ldr	r0, [pc, #468]	@ (8000d90 <MX_GPIO_Init+0x320>)
 8000bbc:	f002 fbb4 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc6:	4873      	ldr	r0, [pc, #460]	@ (8000d94 <MX_GPIO_Init+0x324>)
 8000bc8:	f002 fbae 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8000bcc:	2340      	movs	r3, #64	@ 0x40
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd0:	4b71      	ldr	r3, [pc, #452]	@ (8000d98 <MX_GPIO_Init+0x328>)
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	486b      	ldr	r0, [pc, #428]	@ (8000d8c <MX_GPIO_Init+0x31c>)
 8000be0:	f002 f9c2 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8000be4:	f248 0362 	movw	r3, #32866	@ 0x8062
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bea:	2303      	movs	r3, #3
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4868      	ldr	r0, [pc, #416]	@ (8000d9c <MX_GPIO_Init+0x32c>)
 8000bfa:	f002 f9b5 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 8000bfe:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	485c      	ldr	r0, [pc, #368]	@ (8000d88 <MX_GPIO_Init+0x318>)
 8000c18:	f002 f9a6 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8000c1c:	2324      	movs	r3, #36	@ 0x24
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4857      	ldr	r0, [pc, #348]	@ (8000d8c <MX_GPIO_Init+0x31c>)
 8000c30:	f002 f99a 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8000c34:	f24a 2301 	movw	r3, #41473	@ 0xa201
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4855      	ldr	r0, [pc, #340]	@ (8000da0 <MX_GPIO_Init+0x330>)
 8000c4a:	f002 f98d 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8000c4e:	2381      	movs	r3, #129	@ 0x81
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4849      	ldr	r0, [pc, #292]	@ (8000d8c <MX_GPIO_Init+0x31c>)
 8000c66:	f002 f97f 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4843      	ldr	r0, [pc, #268]	@ (8000d90 <MX_GPIO_Init+0x320>)
 8000c82:	f002 f971 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 8000c86:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	483b      	ldr	r0, [pc, #236]	@ (8000d88 <MX_GPIO_Init+0x318>)
 8000c9c:	f002 f964 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8000ca0:	2381      	movs	r3, #129	@ 0x81
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8000d98 <MX_GPIO_Init+0x328>)
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4837      	ldr	r0, [pc, #220]	@ (8000d90 <MX_GPIO_Init+0x320>)
 8000cb4:	f002 f958 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8000cb8:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <MX_GPIO_Init+0x328>)
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4835      	ldr	r0, [pc, #212]	@ (8000da4 <MX_GPIO_Init+0x334>)
 8000cce:	f002 f94b 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8000cd2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482b      	ldr	r0, [pc, #172]	@ (8000d94 <MX_GPIO_Init+0x324>)
 8000ce8:	f002 f93e 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8000cec:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <MX_GPIO_Init+0x328>)
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4824      	ldr	r0, [pc, #144]	@ (8000d94 <MX_GPIO_Init+0x324>)
 8000d02:	f002 f931 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 8000d06:	f240 1301 	movw	r3, #257	@ 0x101
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4823      	ldr	r0, [pc, #140]	@ (8000da8 <MX_GPIO_Init+0x338>)
 8000d1c:	f002 f924 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 8000d20:	230c      	movs	r3, #12
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481e      	ldr	r0, [pc, #120]	@ (8000dac <MX_GPIO_Init+0x33c>)
 8000d34:	f002 f918 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4810      	ldr	r0, [pc, #64]	@ (8000d94 <MX_GPIO_Init+0x324>)
 8000d52:	f002 f909 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_GPIO_Init+0x328>)
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <MX_GPIO_Init+0x330>)
 8000d6c:	f002 f8fc 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8000d70:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d76:	2303      	movs	r3, #3
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	e015      	b.n	8000db0 <MX_GPIO_Init+0x340>
 8000d84:	46020c00 	.word	0x46020c00
 8000d88:	42021c00 	.word	0x42021c00
 8000d8c:	42022000 	.word	0x42022000
 8000d90:	42021000 	.word	0x42021000
 8000d94:	42021400 	.word	0x42021400
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	42021800 	.word	0x42021800
 8000da0:	42020c00 	.word	0x42020c00
 8000da4:	42020400 	.word	0x42020400
 8000da8:	42020000 	.word	0x42020000
 8000dac:	42020800 	.word	0x42020800
 8000db0:	4619      	mov	r1, r3
 8000db2:	4842      	ldr	r0, [pc, #264]	@ (8000ebc <MX_GPIO_Init+0x44c>)
 8000db4:	f002 f8d8 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8000db8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	483c      	ldr	r0, [pc, #240]	@ (8000ec0 <MX_GPIO_Init+0x450>)
 8000dce:	f002 f8cb 	bl	8002f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	200b      	movs	r0, #11
 8000dd8:	f001 f890 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ddc:	200b      	movs	r0, #11
 8000dde:	f001 f8a7 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2107      	movs	r1, #7
 8000de6:	200c      	movs	r0, #12
 8000de8:	f001 f888 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dec:	200c      	movs	r0, #12
 8000dee:	f001 f89f 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2107      	movs	r1, #7
 8000df6:	200d      	movs	r0, #13
 8000df8:	f001 f880 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dfc:	200d      	movs	r0, #13
 8000dfe:	f001 f897 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2107      	movs	r1, #7
 8000e06:	200e      	movs	r0, #14
 8000e08:	f001 f878 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e0c:	200e      	movs	r0, #14
 8000e0e:	f001 f88f 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2107      	movs	r1, #7
 8000e16:	200f      	movs	r0, #15
 8000e18:	f001 f870 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e1c:	200f      	movs	r0, #15
 8000e1e:	f001 f887 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2107      	movs	r1, #7
 8000e26:	2010      	movs	r0, #16
 8000e28:	f001 f868 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000e2c:	2010      	movs	r0, #16
 8000e2e:	f001 f87f 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2107      	movs	r1, #7
 8000e36:	2011      	movs	r0, #17
 8000e38:	f001 f860 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8000e3c:	2011      	movs	r0, #17
 8000e3e:	f001 f877 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2107      	movs	r1, #7
 8000e46:	2012      	movs	r0, #18
 8000e48:	f001 f858 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8000e4c:	2012      	movs	r0, #18
 8000e4e:	f001 f86f 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2107      	movs	r1, #7
 8000e56:	2013      	movs	r0, #19
 8000e58:	f001 f850 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8000e5c:	2013      	movs	r0, #19
 8000e5e:	f001 f867 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2107      	movs	r1, #7
 8000e66:	2014      	movs	r0, #20
 8000e68:	f001 f848 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8000e6c:	2014      	movs	r0, #20
 8000e6e:	f001 f85f 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2107      	movs	r1, #7
 8000e76:	2015      	movs	r0, #21
 8000e78:	f001 f840 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f001 f857 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2107      	movs	r1, #7
 8000e86:	2016      	movs	r0, #22
 8000e88:	f001 f838 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000e8c:	2016      	movs	r0, #22
 8000e8e:	f001 f84f 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2107      	movs	r1, #7
 8000e96:	2018      	movs	r0, #24
 8000e98:	f001 f830 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000e9c:	2018      	movs	r0, #24
 8000e9e:	f001 f847 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	2019      	movs	r0, #25
 8000ea8:	f001 f828 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000eac:	2019      	movs	r0, #25
 8000eae:	f001 f83f 	bl	8001f30 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3738      	adds	r7, #56	@ 0x38
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	42020400 	.word	0x42020400
 8000ec0:	42021000 	.word	0x42021000

08000ec4 <Initialize_Sensors>:

/* USER CODE BEGIN 4 */

void Initialize_Sensors(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0a0      	sub	sp, #128	@ 0x80
 8000ec8:	af02      	add	r7, sp, #8
    char uart_buf[100];
    uint8_t tx_data[2];

    uint8_t who_am_i_val = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    // Buffers for the 2-byte SPI read transaction
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];


    tx_buf[0] = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit
 8000ed0:	238f      	movs	r3, #143	@ 0x8f
 8000ed2:	723b      	strb	r3, [r7, #8]
    tx_buf[1] = 0x00;        // Dummy byte to clock in the data
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	727b      	strb	r3, [r7, #9]
    // First, check WHO_AM_I to confirm communication
    // Note: The custom iis3dwb_read_reg() is replaced with direct HAL calls for clarity.
    //uint8_t read_cmd = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit


    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ede:	488b      	ldr	r0, [pc, #556]	@ (800110c <Initialize_Sensors+0x248>)
 8000ee0:	f002 fa22 	bl	8003328 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, tx_buf, rx_buf, 2, HAL_MAX_DELAY);
 8000ee4:	1d3a      	adds	r2, r7, #4
 8000ee6:	f107 0108 	add.w	r1, r7, #8
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	4887      	ldr	r0, [pc, #540]	@ (8001110 <Initialize_Sensors+0x24c>)
 8000ef4:	f006 fdde 	bl	8007ab4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efe:	4883      	ldr	r0, [pc, #524]	@ (800110c <Initialize_Sensors+0x248>)
 8000f00:	f002 fa12 	bl	8003328 <HAL_GPIO_WritePin>

    who_am_i_val = rx_buf[1]; // The actual data is in the second byte received
 8000f04:	797b      	ldrb	r3, [r7, #5]
 8000f06:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    if (who_am_i_val == 0x7B) {
 8000f0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000f0e:	2b7b      	cmp	r3, #123	@ 0x7b
 8000f10:	d146      	bne.n	8000fa0 <Initialize_Sensors+0xdc>
        sprintf(uart_buf, "IIS3DWB WHO_AM_I: OK (0x%X)\r\n", who_am_i_val);
 8000f12:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	497e      	ldr	r1, [pc, #504]	@ (8001114 <Initialize_Sensors+0x250>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f008 fd0d 	bl	800993c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f9a6 	bl	8000278 <strlen>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f107 0110 	add.w	r1, r7, #16
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	4877      	ldr	r0, [pc, #476]	@ (8001118 <Initialize_Sensors+0x254>)
 8000f3a:	f007 ff9d 	bl	8008e78 <HAL_UART_Transmit>

        // CRITICAL: Enable Address Auto-Increment for multi-byte reads
        tx_data[0] = 0x12; // CTRL3_C Register Address
 8000f3e:	2312      	movs	r3, #18
 8000f40:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x04; // Set IF_INC bit (Bit 2) to 1
 8000f42:	2304      	movs	r3, #4
 8000f44:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f4c:	486f      	ldr	r0, [pc, #444]	@ (800110c <Initialize_Sensors+0x248>)
 8000f4e:	f002 f9eb 	bl	8003328 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	486c      	ldr	r0, [pc, #432]	@ (8001110 <Initialize_Sensors+0x24c>)
 8000f5e:	f006 fb95 	bl	800768c <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f68:	4868      	ldr	r0, [pc, #416]	@ (800110c <Initialize_Sensors+0x248>)
 8000f6a:	f002 f9dd 	bl	8003328 <HAL_GPIO_WritePin>

        // WAKE UP SENSOR: Set ODR to 416 Hz (as per your 0xA0 value)
        tx_data[0] = 0x10; // CTRL1_XL Register Address
 8000f6e:	2310      	movs	r3, #16
 8000f70:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x60; // Using 0x60 for 416Hz as a common value. Your 0xA0 is also fine.
 8000f72:	2360      	movs	r3, #96	@ 0x60
 8000f74:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7c:	4863      	ldr	r0, [pc, #396]	@ (800110c <Initialize_Sensors+0x248>)
 8000f7e:	f002 f9d3 	bl	8003328 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 8000f82:	f107 010c 	add.w	r1, r7, #12
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4860      	ldr	r0, [pc, #384]	@ (8001110 <Initialize_Sensors+0x24c>)
 8000f8e:	f006 fb7d 	bl	800768c <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f98:	485c      	ldr	r0, [pc, #368]	@ (800110c <Initialize_Sensors+0x248>)
 8000f9a:	f002 f9c5 	bl	8003328 <HAL_GPIO_WritePin>
 8000f9e:	e017      	b.n	8000fd0 <Initialize_Sensors+0x10c>

    } else {
        sprintf(uart_buf, "IIS3DWB WHO_AM_I: FAILED! Got 0x%X\r\n", who_am_i_val);
 8000fa0:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	495c      	ldr	r1, [pc, #368]	@ (800111c <Initialize_Sensors+0x258>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f008 fcc6 	bl	800993c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff f95f 	bl	8000278 <strlen>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f107 0110 	add.w	r1, r7, #16
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	4854      	ldr	r0, [pc, #336]	@ (8001118 <Initialize_Sensors+0x254>)
 8000fc8:	f007 ff56 	bl	8008e78 <HAL_UART_Transmit>
        Error_Handler();
 8000fcc:	f000 f932 	bl	8001234 <Error_Handler>

    // --- 2. VERIFY AND CONFIGURE ISM330DHCX ---

    // Check WHO_AM_I

    tx_buf[0] = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit
 8000fd0:	238f      	movs	r3, #143	@ 0x8f
 8000fd2:	723b      	strb	r3, [r7, #8]
    tx_buf[1] = 0x00;        // Dummy byte
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	727b      	strb	r3, [r7, #9]


    //read_cmd = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit
    HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fde:	4850      	ldr	r0, [pc, #320]	@ (8001120 <Initialize_Sensors+0x25c>)
 8000fe0:	f002 f9a2 	bl	8003328 <HAL_GPIO_WritePin>
    // Corrected 2-byte transaction
    HAL_SPI_TransmitReceive(&hspi2, tx_buf,rx_buf, 2, HAL_MAX_DELAY);
 8000fe4:	1d3a      	adds	r2, r7, #4
 8000fe6:	f107 0108 	add.w	r1, r7, #8
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	4847      	ldr	r0, [pc, #284]	@ (8001110 <Initialize_Sensors+0x24c>)
 8000ff4:	f006 fd5e 	bl	8007ab4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ffe:	4848      	ldr	r0, [pc, #288]	@ (8001120 <Initialize_Sensors+0x25c>)
 8001000:	f002 f992 	bl	8003328 <HAL_GPIO_WritePin>

    who_am_i_val = rx_buf[1]; // The actual data is in the second byte received
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    if (who_am_i_val == 0x6B) {
 800100a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800100e:	2b6b      	cmp	r3, #107	@ 0x6b
 8001010:	d15d      	bne.n	80010ce <Initialize_Sensors+0x20a>
        sprintf(uart_buf, "ISM330DHCX WHO_AM_I: OK (0x%X)\r\n", who_am_i_val);
 8001012:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4942      	ldr	r1, [pc, #264]	@ (8001124 <Initialize_Sensors+0x260>)
 800101c:	4618      	mov	r0, r3
 800101e:	f008 fc8d 	bl	800993c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f926 	bl	8000278 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f107 0110 	add.w	r1, r7, #16
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	4837      	ldr	r0, [pc, #220]	@ (8001118 <Initialize_Sensors+0x254>)
 800103a:	f007 ff1d 	bl	8008e78 <HAL_UART_Transmit>



        // CRITICAL: Enable BDU and Address Auto-Increment
        uint8_t config_tx[2];
        config_tx[0] = 0x12; // CTRL3_C Register Address
 800103e:	2312      	movs	r3, #18
 8001040:	703b      	strb	r3, [r7, #0]
        config_tx[1] = 0x44; // Set BDU bit (Bit 6) and IF_INC bit (Bit 2)
 8001042:	2344      	movs	r3, #68	@ 0x44
 8001044:	707b      	strb	r3, [r7, #1]

        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800104c:	4834      	ldr	r0, [pc, #208]	@ (8001120 <Initialize_Sensors+0x25c>)
 800104e:	f002 f96b 	bl	8003328 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, config_tx, 2, HAL_MAX_DELAY);
 8001052:	4639      	mov	r1, r7
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	2202      	movs	r2, #2
 800105a:	482d      	ldr	r0, [pc, #180]	@ (8001110 <Initialize_Sensors+0x24c>)
 800105c:	f006 fb16 	bl	800768c <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001066:	482e      	ldr	r0, [pc, #184]	@ (8001120 <Initialize_Sensors+0x25c>)
 8001068:	f002 f95e 	bl	8003328 <HAL_GPIO_WritePin>

        // WAKE UP SENSOR: Set ODR for Accelerometer and Gyroscope
        tx_data[0] = 0x10; // CTRL1_XL (Accel)
 800106c:	2310      	movs	r3, #16
 800106e:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x40; // 104 Hz
 8001070:	2340      	movs	r3, #64	@ 0x40
 8001072:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107a:	4829      	ldr	r0, [pc, #164]	@ (8001120 <Initialize_Sensors+0x25c>)
 800107c:	f002 f954 	bl	8003328 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 8001080:	f107 010c 	add.w	r1, r7, #12
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2202      	movs	r2, #2
 800108a:	4821      	ldr	r0, [pc, #132]	@ (8001110 <Initialize_Sensors+0x24c>)
 800108c:	f006 fafe 	bl	800768c <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001096:	4822      	ldr	r0, [pc, #136]	@ (8001120 <Initialize_Sensors+0x25c>)
 8001098:	f002 f946 	bl	8003328 <HAL_GPIO_WritePin>

        tx_data[0] = 0x11; // CTRL2_G (Gyro)
 800109c:	2311      	movs	r3, #17
 800109e:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x40; // 104 Hz
 80010a0:	2340      	movs	r3, #64	@ 0x40
 80010a2:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010aa:	481d      	ldr	r0, [pc, #116]	@ (8001120 <Initialize_Sensors+0x25c>)
 80010ac:	f002 f93c 	bl	8003328 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 80010b0:	f107 010c 	add.w	r1, r7, #12
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	2202      	movs	r2, #2
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <Initialize_Sensors+0x24c>)
 80010bc:	f006 fae6 	bl	800768c <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010c6:	4816      	ldr	r0, [pc, #88]	@ (8001120 <Initialize_Sensors+0x25c>)
 80010c8:	f002 f92e 	bl	8003328 <HAL_GPIO_WritePin>
 80010cc:	e017      	b.n	80010fe <Initialize_Sensors+0x23a>

    } else {
        sprintf(uart_buf, "ISM330DHCX WHO_AM_I: FAILED! Got 0x%X\r\n", who_am_i_val);
 80010ce:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4914      	ldr	r1, [pc, #80]	@ (8001128 <Initialize_Sensors+0x264>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f008 fc2f 	bl	800993c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f8c8 	bl	8000278 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f107 0110 	add.w	r1, r7, #16
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	4808      	ldr	r0, [pc, #32]	@ (8001118 <Initialize_Sensors+0x254>)
 80010f6:	f007 febf 	bl	8008e78 <HAL_UART_Transmit>
        Error_Handler();
 80010fa:	f000 f89b 	bl	8001234 <Error_Handler>
    }

    HAL_Delay(100); // Wait for sensors to stabilize after configuration
 80010fe:	2064      	movs	r0, #100	@ 0x64
 8001100:	f000 fe20 	bl	8001d44 <HAL_Delay>
}
 8001104:	bf00      	nop
 8001106:	3778      	adds	r7, #120	@ 0x78
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	42021400 	.word	0x42021400
 8001110:	20000258 	.word	0x20000258
 8001114:	0800a324 	.word	0x0800a324
 8001118:	200003d8 	.word	0x200003d8
 800111c:	0800a344 	.word	0x0800a344
 8001120:	42021c00 	.word	0x42021c00
 8001124:	0800a36c 	.word	0x0800a36c
 8001128:	0800a390 	.word	0x0800a390

0800112c <start_sensor_read_chain>:


 */


    void start_sensor_read_chain(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
        // Prepare the TX buffer: command byte first, then dummy bytes
        iis3dwb_tx_dma_buf[0] = 0x28 | 0x80; // OUTX_L_A (0x28) + Read Bit
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <start_sensor_read_chain+0x30>)
 8001132:	22a8      	movs	r2, #168	@ 0xa8
 8001134:	701a      	strb	r2, [r3, #0]

        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113c:	4808      	ldr	r0, [pc, #32]	@ (8001160 <start_sensor_read_chain+0x34>)
 800113e:	f002 f8f3 	bl	8003328 <HAL_GPIO_WritePin>

        // Start a single, non-blocking Transmit-Receive operation
        if (HAL_SPI_TransmitReceive_DMA(&hspi2, iis3dwb_tx_dma_buf, iis3dwb_rx_dma_buf, IIS3DWB_DMA_LEN) != HAL_OK) {
 8001142:	2307      	movs	r3, #7
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <start_sensor_read_chain+0x38>)
 8001146:	4905      	ldr	r1, [pc, #20]	@ (800115c <start_sensor_read_chain+0x30>)
 8001148:	4807      	ldr	r0, [pc, #28]	@ (8001168 <start_sensor_read_chain+0x3c>)
 800114a:	f007 f813 	bl	8008174 <HAL_SPI_TransmitReceive_DMA>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <start_sensor_read_chain+0x2c>
            Error_Handler();
 8001154:	f000 f86e 	bl	8001234 <Error_Handler>
        }
    }
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000046c 	.word	0x2000046c
 8001160:	42021400 	.word	0x42021400
 8001164:	20000474 	.word	0x20000474
 8001168:	20000258 	.word	0x20000258

0800116c <HAL_SPI_TxRxCpltCallback>:
/**
  * @brief  SPI Transfer completed callback. This is the core of the "chain reaction".
  * @param  hspi: SPI handle
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    // Use a static variable to create a simple state machine
    static int read_step = 0;

    if (hspi->Instance == SPI2) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a23      	ldr	r2, [pc, #140]	@ (8001208 <HAL_SPI_TxRxCpltCallback+0x9c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d13f      	bne.n	80011fe <HAL_SPI_TxRxCpltCallback+0x92>
          if (read_step == 0) {
 800117e:	4b23      	ldr	r3, [pc, #140]	@ (800120c <HAL_SPI_TxRxCpltCallback+0xa0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d124      	bne.n	80011d0 <HAL_SPI_TxRxCpltCallback+0x64>
              // First DMA is complete, de-select sensor
              HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	4820      	ldr	r0, [pc, #128]	@ (8001210 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800118e:	f002 f8cb 	bl	8003328 <HAL_GPIO_WritePin>

              // The first received byte is garbage. Copy the real sensor data.
              memcpy(iis3dwb_rx_buffer, &iis3dwb_rx_dma_buf[1], IIS3DWB_DATA_SIZE);
 8001192:	4a20      	ldr	r2, [pc, #128]	@ (8001214 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001194:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <HAL_SPI_TxRxCpltCallback+0xac>)
 8001196:	3301      	adds	r3, #1
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	6010      	str	r0, [r2, #0]
 800119c:	889b      	ldrh	r3, [r3, #4]
 800119e:	8093      	strh	r3, [r2, #4]

              // Prepare the next command
              ism330dhcx_tx_dma_buf[0] = 0x22 | 0x80; // OUTX_L_G (0x22) + Read Bit
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <HAL_SPI_TxRxCpltCallback+0xb0>)
 80011a2:	22a2      	movs	r2, #162	@ 0xa2
 80011a4:	701a      	strb	r2, [r3, #0]
              HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ac:	481c      	ldr	r0, [pc, #112]	@ (8001220 <HAL_SPI_TxRxCpltCallback+0xb4>)
 80011ae:	f002 f8bb 	bl	8003328 <HAL_GPIO_WritePin>

            // 3. Start the second DMA read
            if (HAL_SPI_TransmitReceive_DMA(&hspi2, ism330dhcx_tx_dma_buf, ism330dhcx_rx_dma_buf, ISM330DHCX_DMA_LEN) != HAL_OK) {
 80011b2:	230d      	movs	r3, #13
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <HAL_SPI_TxRxCpltCallback+0xb8>)
 80011b6:	4919      	ldr	r1, [pc, #100]	@ (800121c <HAL_SPI_TxRxCpltCallback+0xb0>)
 80011b8:	481b      	ldr	r0, [pc, #108]	@ (8001228 <HAL_SPI_TxRxCpltCallback+0xbc>)
 80011ba:	f006 ffdb 	bl	8008174 <HAL_SPI_TransmitReceive_DMA>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_SPI_TxRxCpltCallback+0x5c>
                          Error_Handler();
 80011c4:	f000 f836 	bl	8001234 <Error_Handler>
                      }

            // 4. Update the state to indicate we're waiting for the second sensor
            read_step = 1;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_SPI_TxRxCpltCallback+0xa0>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

            // 3. Reset the state machine for the next full chain
            read_step = 0;
        }
    }
}
 80011ce:	e016      	b.n	80011fe <HAL_SPI_TxRxCpltCallback+0x92>
        } else if (read_step == 1) {
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_SPI_TxRxCpltCallback+0xa0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d112      	bne.n	80011fe <HAL_SPI_TxRxCpltCallback+0x92>
            HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011de:	4810      	ldr	r0, [pc, #64]	@ (8001220 <HAL_SPI_TxRxCpltCallback+0xb4>)
 80011e0:	f002 f8a2 	bl	8003328 <HAL_GPIO_WritePin>
            memcpy(ism330dhcx_rx_buffer, &ism330dhcx_rx_dma_buf[1], ISM330DHCX_DATA_SIZE);
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_SPI_TxRxCpltCallback+0xc0>)
 80011e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001224 <HAL_SPI_TxRxCpltCallback+0xb8>)
 80011e8:	3201      	adds	r2, #1
 80011ea:	6810      	ldr	r0, [r2, #0]
 80011ec:	6851      	ldr	r1, [r2, #4]
 80011ee:	6892      	ldr	r2, [r2, #8]
 80011f0:	c307      	stmia	r3!, {r0, r1, r2}
            g_data_ready = 1;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_SPI_TxRxCpltCallback+0xc4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
            read_step = 0;
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <HAL_SPI_TxRxCpltCallback+0xa0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40003800 	.word	0x40003800
 800120c:	200004b4 	.word	0x200004b4
 8001210:	42021400 	.word	0x42021400
 8001214:	2000049c 	.word	0x2000049c
 8001218:	20000474 	.word	0x20000474
 800121c:	2000047c 	.word	0x2000047c
 8001220:	42021c00 	.word	0x42021c00
 8001224:	2000048c 	.word	0x2000048c
 8001228:	20000258 	.word	0x20000258
 800122c:	200004a4 	.word	0x200004a4
 8001230:	200004b0 	.word	0x200004b0

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <Error_Handler+0x8>

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_MspInit+0x38>)
 8001248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800124c:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <HAL_MspInit+0x38>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_MspInit+0x38>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001264:	f002 f940 	bl	80034e8 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8001268:	f002 f94e 	bl	8003508 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 800126c:	f002 f95c 	bl	8003528 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	46020c00 	.word	0x46020c00

0800127c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0c4      	sub	sp, #272	@ 0x110
 8001280:	af00      	add	r7, sp, #0
 8001282:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001286:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800128a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012a0:	22c8      	movs	r2, #200	@ 0xc8
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f008 fb6b 	bl	8009980 <memset>
  if(hspi->Instance==SPI1)
 80012aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4ab0      	ldr	r2, [pc, #704]	@ (8001578 <HAL_SPI_MspInit+0x2fc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d147      	bne.n	800134c <HAL_SPI_MspInit+0xd0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80012c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fbe3 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80012e0:	f7ff ffa8 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e4:	4ba5      	ldr	r3, [pc, #660]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80012e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012ea:	4aa4      	ldr	r2, [pc, #656]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80012ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012f0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80012f4:	4ba1      	ldr	r3, [pc, #644]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80012f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001302:	4b9e      	ldr	r3, [pc, #632]	@ (800157c <HAL_SPI_MspInit+0x300>)
 8001304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001308:	4a9c      	ldr	r2, [pc, #624]	@ (800157c <HAL_SPI_MspInit+0x300>)
 800130a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800130e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001312:	4b9a      	ldr	r3, [pc, #616]	@ (800157c <HAL_SPI_MspInit+0x300>)
 8001314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8001320:	231c      	movs	r3, #28
 8001322:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001338:	2305      	movs	r3, #5
 800133a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001342:	4619      	mov	r1, r3
 8001344:	488e      	ldr	r0, [pc, #568]	@ (8001580 <HAL_SPI_MspInit+0x304>)
 8001346:	f001 fe0f 	bl	8002f68 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800134a:	e1d3      	b.n	80016f4 <HAL_SPI_MspInit+0x478>
  else if(hspi->Instance==SPI2)
 800134c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001350:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a8a      	ldr	r2, [pc, #552]	@ (8001584 <HAL_SPI_MspInit+0x308>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f040 8120 	bne.w	80015a0 <HAL_SPI_MspInit+0x324>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001360:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fb92 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8001382:	f7ff ff57 	bl	8001234 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001386:	4b7d      	ldr	r3, [pc, #500]	@ (800157c <HAL_SPI_MspInit+0x300>)
 8001388:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800138c:	4a7b      	ldr	r2, [pc, #492]	@ (800157c <HAL_SPI_MspInit+0x300>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001392:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001396:	4b79      	ldr	r3, [pc, #484]	@ (800157c <HAL_SPI_MspInit+0x300>)
 8001398:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800139c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013a4:	4b75      	ldr	r3, [pc, #468]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80013a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013aa:	4a74      	ldr	r2, [pc, #464]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013b4:	4b71      	ldr	r3, [pc, #452]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80013b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013be:	623b      	str	r3, [r7, #32]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	4b6e      	ldr	r3, [pc, #440]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c8:	4a6c      	ldr	r2, [pc, #432]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d2:	4b6a      	ldr	r3, [pc, #424]	@ (800157c <HAL_SPI_MspInit+0x300>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80013e0:	230a      	movs	r3, #10
 80013e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013f8:	2305      	movs	r3, #5
 80013fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013fe:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001402:	4619      	mov	r1, r3
 8001404:	4860      	ldr	r0, [pc, #384]	@ (8001588 <HAL_SPI_MspInit+0x30c>)
 8001406:	f001 fdaf 	bl	8002f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800140a:	2308      	movs	r3, #8
 800140c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001422:	2305      	movs	r3, #5
 8001424:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800142c:	4619      	mov	r1, r3
 800142e:	4857      	ldr	r0, [pc, #348]	@ (800158c <HAL_SPI_MspInit+0x310>)
 8001430:	f001 fd9a 	bl	8002f68 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001434:	4b56      	ldr	r3, [pc, #344]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001436:	4a57      	ldr	r2, [pc, #348]	@ (8001594 <HAL_SPI_MspInit+0x318>)
 8001438:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 800143a:	4b55      	ldr	r3, [pc, #340]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 800143c:	2209      	movs	r2, #9
 800143e:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001440:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001446:	4b52      	ldr	r3, [pc, #328]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 800144e:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001450:	2208      	movs	r2, #8
 8001452:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8001454:	4b4e      	ldr	r3, [pc, #312]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800145a:	4b4d      	ldr	r3, [pc, #308]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001460:	4b4b      	ldr	r3, [pc, #300]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001466:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001468:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800146c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 800146e:	4b48      	ldr	r3, [pc, #288]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001470:	2201      	movs	r2, #1
 8001472:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8001474:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001476:	2201      	movs	r2, #1
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800147a:	4b45      	ldr	r3, [pc, #276]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 800147c:	2200      	movs	r2, #0
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001480:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001482:	2200      	movs	r2, #0
 8001484:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8001486:	4b42      	ldr	r3, [pc, #264]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800148c:	4840      	ldr	r0, [pc, #256]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 800148e:	f000 fe11 	bl	80020b4 <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8001498:	f7ff fecc 	bl	8001234 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 800149c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 80014a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80014ac:	4a38      	ldr	r2, [pc, #224]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 80014ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014ba:	2110      	movs	r1, #16
 80014bc:	4834      	ldr	r0, [pc, #208]	@ (8001590 <HAL_SPI_MspInit+0x314>)
 80014be:	f001 f9ad 	bl	800281c <HAL_DMA_ConfigChannelAttributes>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_SPI_MspInit+0x250>
      Error_Handler();
 80014c8:	f7ff feb4 	bl	8001234 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014ce:	4a33      	ldr	r2, [pc, #204]	@ (800159c <HAL_SPI_MspInit+0x320>)
 80014d0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014d4:	2208      	movs	r2, #8
 80014d6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80014d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80014e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014f0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001500:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001504:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001506:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001508:	2201      	movs	r2, #1
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 800150e:	2201      	movs	r2, #1
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001514:	2200      	movs	r2, #0
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001524:	481c      	ldr	r0, [pc, #112]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001526:	f000 fdc5 	bl	80020b4 <HAL_DMA_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_SPI_MspInit+0x2b8>
      Error_Handler();
 8001530:	f7ff fe80 	bl	8001234 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 8001534:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001538:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a16      	ldr	r2, [pc, #88]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001546:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800154a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001552:	2110      	movs	r1, #16
 8001554:	4810      	ldr	r0, [pc, #64]	@ (8001598 <HAL_SPI_MspInit+0x31c>)
 8001556:	f001 f961 	bl	800281c <HAL_DMA_ConfigChannelAttributes>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 8001560:	f7ff fe68 	bl	8001234 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	203c      	movs	r0, #60	@ 0x3c
 800156a:	f000 fcc7 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800156e:	203c      	movs	r0, #60	@ 0x3c
 8001570:	f000 fcde 	bl	8001f30 <HAL_NVIC_EnableIRQ>
}
 8001574:	e0be      	b.n	80016f4 <HAL_SPI_MspInit+0x478>
 8001576:	bf00      	nop
 8001578:	40013000 	.word	0x40013000
 800157c:	46020c00 	.word	0x46020c00
 8001580:	42021800 	.word	0x42021800
 8001584:	40003800 	.word	0x40003800
 8001588:	42022000 	.word	0x42022000
 800158c:	42020c00 	.word	0x42020c00
 8001590:	200002e8 	.word	0x200002e8
 8001594:	400200d0 	.word	0x400200d0
 8001598:	20000360 	.word	0x20000360
 800159c:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 80015a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a54      	ldr	r2, [pc, #336]	@ (8001700 <HAL_SPI_MspInit+0x484>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	f040 80a0 	bne.w	80016f4 <HAL_SPI_MspInit+0x478>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80015b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 80015c0:	2310      	movs	r3, #16
 80015c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fa68 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_SPI_MspInit+0x35e>
      Error_Handler();
 80015d6:	f7ff fe2d 	bl	8001234 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015da:	4b4a      	ldr	r3, [pc, #296]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 80015dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80015e0:	4a48      	ldr	r2, [pc, #288]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80015ea:	4b46      	ldr	r3, [pc, #280]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 80015ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015f8:	4b42      	ldr	r3, [pc, #264]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 80015fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015fe:	4a41      	ldr	r2, [pc, #260]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 8001600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001604:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001608:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 800160a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800160e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 8001618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161c:	4a39      	ldr	r2, [pc, #228]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001626:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 8001628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800162c:	f003 0201 	and.w	r2, r3, #1
 8001630:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001634:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800163e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001642:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 8001646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164a:	4a2e      	ldr	r2, [pc, #184]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001654:	4b2b      	ldr	r3, [pc, #172]	@ (8001704 <HAL_SPI_MspInit+0x488>)
 8001656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165a:	f003 0202 	and.w	r2, r3, #2
 800165e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001670:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001676:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800168c:	2306      	movs	r3, #6
 800168e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001696:	4619      	mov	r1, r3
 8001698:	481b      	ldr	r0, [pc, #108]	@ (8001708 <HAL_SPI_MspInit+0x48c>)
 800169a:	f001 fc65 	bl	8002f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800169e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016b8:	2306      	movs	r3, #6
 80016ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016c2:	4619      	mov	r1, r3
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <HAL_SPI_MspInit+0x490>)
 80016c6:	f001 fc4f 	bl	8002f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ca:	2330      	movs	r3, #48	@ 0x30
 80016cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e2:	2306      	movs	r3, #6
 80016e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <HAL_SPI_MspInit+0x494>)
 80016f0:	f001 fc3a 	bl	8002f68 <HAL_GPIO_Init>
}
 80016f4:	bf00      	nop
 80016f6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	46002000 	.word	0x46002000
 8001704:	46020c00 	.word	0x46020c00
 8001708:	42021800 	.word	0x42021800
 800170c:	42020000 	.word	0x42020000
 8001710:	42020400 	.word	0x42020400

08001714 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0c0      	sub	sp, #256	@ 0x100
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	22c8      	movs	r2, #200	@ 0xc8
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f008 f923 	bl	8009980 <memset>
  if(huart->Instance==USART2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a5e      	ldr	r2, [pc, #376]	@ (80018b8 <HAL_UART_MspInit+0x1a4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d145      	bne.n	80017d0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001744:	f04f 0202 	mov.w	r2, #2
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001750:	2300      	movs	r3, #0
 8001752:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f9a1 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001764:	f7ff fd66 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001768:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 800176a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800176e:	4a53      	ldr	r2, [pc, #332]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001778:	4b50      	ldr	r3, [pc, #320]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 800177a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001786:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178c:	4a4b      	ldr	r2, [pc, #300]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001796:	4b49      	ldr	r3, [pc, #292]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 80017a4:	2370      	movs	r3, #112	@ 0x70
 80017a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017bc:	2307      	movs	r3, #7
 80017be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80017c6:	4619      	mov	r1, r3
 80017c8:	483d      	ldr	r0, [pc, #244]	@ (80018c0 <HAL_UART_MspInit+0x1ac>)
 80017ca:	f001 fbcd 	bl	8002f68 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ce:	e06e      	b.n	80018ae <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3b      	ldr	r2, [pc, #236]	@ (80018c4 <HAL_UART_MspInit+0x1b0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d169      	bne.n	80018ae <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017da:	f04f 0204 	mov.w	r2, #4
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 f956 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_UART_MspInit+0xea>
      Error_Handler();
 80017fa:	f7ff fd1b 	bl	8001234 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017fe:	4b2f      	ldr	r3, [pc, #188]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001800:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001804:	4a2d      	ldr	r2, [pc, #180]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800180e:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 800181e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001822:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 800183c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001840:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <HAL_UART_MspInit+0x1a8>)
 800184c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001858:	23a0      	movs	r3, #160	@ 0xa0
 800185a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001870:	2307      	movs	r3, #7
 8001872:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800187a:	4619      	mov	r1, r3
 800187c:	4812      	ldr	r0, [pc, #72]	@ (80018c8 <HAL_UART_MspInit+0x1b4>)
 800187e:	f001 fb73 	bl	8002f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001882:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001886:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800189c:	2307      	movs	r3, #7
 800189e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <HAL_UART_MspInit+0x1ac>)
 80018aa:	f001 fb5d 	bl	8002f68 <HAL_GPIO_Init>
}
 80018ae:	bf00      	nop
 80018b0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40004400 	.word	0x40004400
 80018bc:	46020c00 	.word	0x46020c00
 80018c0:	42020c00 	.word	0x42020c00
 80018c4:	40004800 	.word	0x40004800
 80018c8:	42020000 	.word	0x42020000

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <MemManage_Handler+0x4>

080018e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001922:	f000 f9ef 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}

0800192a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 800192e:	2001      	movs	r0, #1
 8001930:	f001 fd12 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 800193c:	2002      	movs	r0, #2
 800193e:	f001 fd0b 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 800194a:	2004      	movs	r0, #4
 800194c:	f001 fd04 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8001958:	2008      	movs	r0, #8
 800195a:	f001 fcfd 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}

08001962 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8001966:	2010      	movs	r0, #16
 8001968:	f001 fcf6 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8001974:	2020      	movs	r0, #32
 8001976:	f001 fcef 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8001982:	2040      	movs	r0, #64	@ 0x40
 8001984:	f001 fce8 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8001990:	2080      	movs	r0, #128	@ 0x80
 8001992:	f001 fce1 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 800199e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019a2:	f001 fcd9 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 80019ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019b2:	f001 fcd1 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}

080019ba <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 80019be:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019c2:	f001 fcc9 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 80019ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019d2:	f001 fcc1 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}

080019da <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 80019de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019e2:	f001 fcb9 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}

080019ea <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80019ee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019f2:	f001 fcb1 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001a02:	f000 fd9e 	bl	8002542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000360 	.word	0x20000360

08001a10 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001a16:	f000 fd94 	bl	8002542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002e8 	.word	0x200002e8

08001a24 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001a2a:	f000 fd8a 	bl	8002542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001e0 	.word	0x200001e0

08001a38 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <GPDMA1_Channel3_IRQHandler+0x10>)
 8001a3e:	f000 fd80 	bl	8002542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000168 	.word	0x20000168

08001a4c <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <GPDMA1_Channel4_IRQHandler+0x10>)
 8001a52:	f000 fd76 	bl	8002542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200000f0 	.word	0x200000f0

08001a60 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001a66:	f000 fd6c 	bl	8002542 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000078 	.word	0x20000078

08001a74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <SPI2_IRQHandler+0x10>)
 8001a7a:	f006 fe09 	bl	8008690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000258 	.word	0x20000258

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	@ (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f007 ff6a 	bl	8009990 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200c0000 	.word	0x200c0000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	200004b8 	.word	0x200004b8
 8001af0:	20000608 	.word	0x20000608

08001af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001af8:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <SystemInit+0x68>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afe:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <SystemInit+0x68>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <SystemInit+0x6c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <SystemInit+0x6c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <SystemInit+0x6c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <SystemInit+0x6c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <SystemInit+0x6c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <SystemInit+0x6c>)
 8001b26:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b2a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <SystemInit+0x6c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <SystemInit+0x6c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <SystemInit+0x6c>)
 8001b3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <SystemInit+0x6c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <SystemInit+0x68>)
 8001b4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b4e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	46020c00 	.word	0x46020c00

08001b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b9c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b68:	f7ff ffc4 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b6e:	e003      	b.n	8001b78 <LoopCopyDataInit>

08001b70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b76:	3104      	adds	r1, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b78:	480a      	ldr	r0, [pc, #40]	@ (8001ba4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b80:	d3f6      	bcc.n	8001b70 <CopyDataInit>
	ldr	r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b84:	e002      	b.n	8001b8c <LoopFillZerobss>

08001b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b88:	f842 3b04 	str.w	r3, [r2], #4

08001b8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b90:	d3f9      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b92:	f007 ff03 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b96:	f7fe fd35 	bl	8000604 <main>

08001b9a <LoopForever>:

LoopForever:
    b LoopForever
 8001b9a:	e7fe      	b.n	8001b9a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b9c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001ba0:	0800a4fc 	.word	0x0800a4fc
	ldr	r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ba8:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001bac:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001bb0:	20000608 	.word	0x20000608

08001bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_Init+0x50>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a11      	ldr	r2, [pc, #68]	@ (8001c08 <HAL_Init+0x50>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f98c 	bl	8001ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bce:	f002 fd89 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <HAL_Init+0x54>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <HAL_Init+0x58>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
 8001be4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c14 <HAL_Init+0x5c>)
 8001be6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001be8:	2004      	movs	r0, #4
 8001bea:	f000 f9d1 	bl	8001f90 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f812 	bl	8001c18 <HAL_InitTick>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e002      	b.n	8001c04 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfe:	f7ff fb1f 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	46020c00 	.word	0x46020c00
 8001c10:	0800a3b8 	.word	0x0800a3b8
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c24:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_InitTick+0xdc>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e05c      	b.n	8001cea <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c30:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <HAL_InitTick+0xe0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d10c      	bne.n	8001c56 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <HAL_InitTick+0xe4>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <HAL_InitTick+0xdc>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e037      	b.n	8001cc6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c56:	f000 f9f3 	bl	8002040 <HAL_SYSTICK_GetCLKSourceConfig>
 8001c5a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d023      	beq.n	8001caa <HAL_InitTick+0x92>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d82d      	bhi.n	8001cc4 <HAL_InitTick+0xac>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_InitTick+0x5e>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d00d      	beq.n	8001c90 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001c74:	e026      	b.n	8001cc4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_InitTick+0xe4>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_InitTick+0xdc>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001c84:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	60fb      	str	r3, [r7, #12]
        break;
 8001c8e:	e01a      	b.n	8001cc6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_InitTick+0xdc>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c9e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	60fb      	str	r3, [r7, #12]
        break;
 8001ca8:	e00d      	b.n	8001cc6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001caa:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_InitTick+0xdc>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	60fb      	str	r3, [r7, #12]
        break;
 8001cc2:	e000      	b.n	8001cc6 <HAL_InitTick+0xae>
        break;
 8001cc4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f940 	bl	8001f4c <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e009      	b.n	8001cea <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295
 8001cde:	f000 f90d 	bl	8001efc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001ce2:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_InitTick+0xe8>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	e000e010 	.word	0xe000e010
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	200004bc 	.word	0x200004bc

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200004bc 	.word	0x200004bc

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	@ (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	@ (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	@ (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff4c 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0a:	f7ff ff63 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	6978      	ldr	r0, [r7, #20]
 8001f16:	f7ff ffb3 	bl	8001e80 <NVIC_EncodePriority>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff82 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff56 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00d      	b.n	8001f7e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a05      	ldr	r2, [pc, #20]	@ (8001f8c <HAL_SYSTICK_Config+0x40>)
 8001f76:	f043 0303 	orr.w	r3, r3, #3
 8001f7a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d844      	bhi.n	8002028 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fc7 	.word	0x08001fc7
 8001fa8:	08001fe5 	.word	0x08001fe5
 8001fac:	08002007 	.word	0x08002007
 8001fb0:	08002029 	.word	0x08002029
 8001fb4:	08001fb9 	.word	0x08001fb9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6013      	str	r3, [r2, #0]
      break;
 8001fc4:	e031      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1b      	ldr	r2, [pc, #108]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd8:	4a18      	ldr	r2, [pc, #96]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fda:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001fe2:	e022      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001fe4:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fea:	f023 0304 	bic.w	r3, r3, #4
 8001fee:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ffa:	4a10      	ldr	r2, [pc, #64]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ffc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002004:	e011      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a0b      	ldr	r2, [pc, #44]	@ (8002038 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800201c:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800201e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002026:	e000      	b.n	800202a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002028:	bf00      	nop
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010
 800203c:	46020c00 	.word	0x46020c00

08002040 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002046:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002052:	2304      	movs	r3, #4
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e021      	b.n	800209c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002058:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002062:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800206a:	d011      	beq.n	8002090 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002072:	d810      	bhi.n	8002096 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002080:	d003      	beq.n	800208a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002082:	e008      	b.n	8002096 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
        break;
 8002088:	e008      	b.n	800209c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800208a:	2301      	movs	r3, #1
 800208c:	607b      	str	r3, [r7, #4]
        break;
 800208e:	e005      	b.n	800209c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002090:	2302      	movs	r3, #2
 8002092:	607b      	str	r3, [r7, #4]
        break;
 8002094:	e002      	b.n	800209c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
        break;
 800209a:	bf00      	nop
    }
  }
  return systick_source;
 800209c:	687b      	ldr	r3, [r7, #4]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010
 80020b0:	46020c00 	.word	0x46020c00

080020b4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fe36 	bl	8001d2c <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0f0      	b.n	80022ae <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a79      	ldr	r2, [pc, #484]	@ (80022b8 <HAL_DMA_Init+0x204>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f000 809f 	beq.w	8002216 <HAL_DMA_Init+0x162>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a77      	ldr	r2, [pc, #476]	@ (80022bc <HAL_DMA_Init+0x208>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	f000 8099 	beq.w	8002216 <HAL_DMA_Init+0x162>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a75      	ldr	r2, [pc, #468]	@ (80022c0 <HAL_DMA_Init+0x20c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f000 8093 	beq.w	8002216 <HAL_DMA_Init+0x162>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a73      	ldr	r2, [pc, #460]	@ (80022c4 <HAL_DMA_Init+0x210>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	f000 808d 	beq.w	8002216 <HAL_DMA_Init+0x162>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a71      	ldr	r2, [pc, #452]	@ (80022c8 <HAL_DMA_Init+0x214>)
 8002102:	4293      	cmp	r3, r2
 8002104:	f000 8087 	beq.w	8002216 <HAL_DMA_Init+0x162>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6f      	ldr	r2, [pc, #444]	@ (80022cc <HAL_DMA_Init+0x218>)
 800210e:	4293      	cmp	r3, r2
 8002110:	f000 8081 	beq.w	8002216 <HAL_DMA_Init+0x162>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6d      	ldr	r2, [pc, #436]	@ (80022d0 <HAL_DMA_Init+0x21c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d07b      	beq.n	8002216 <HAL_DMA_Init+0x162>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6c      	ldr	r2, [pc, #432]	@ (80022d4 <HAL_DMA_Init+0x220>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d076      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a6a      	ldr	r2, [pc, #424]	@ (80022d8 <HAL_DMA_Init+0x224>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d071      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a69      	ldr	r2, [pc, #420]	@ (80022dc <HAL_DMA_Init+0x228>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d06c      	beq.n	8002216 <HAL_DMA_Init+0x162>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a67      	ldr	r2, [pc, #412]	@ (80022e0 <HAL_DMA_Init+0x22c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d067      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a66      	ldr	r2, [pc, #408]	@ (80022e4 <HAL_DMA_Init+0x230>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d062      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a64      	ldr	r2, [pc, #400]	@ (80022e8 <HAL_DMA_Init+0x234>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d05d      	beq.n	8002216 <HAL_DMA_Init+0x162>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a63      	ldr	r2, [pc, #396]	@ (80022ec <HAL_DMA_Init+0x238>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d058      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a61      	ldr	r2, [pc, #388]	@ (80022f0 <HAL_DMA_Init+0x23c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d053      	beq.n	8002216 <HAL_DMA_Init+0x162>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a60      	ldr	r2, [pc, #384]	@ (80022f4 <HAL_DMA_Init+0x240>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d04e      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5e      	ldr	r2, [pc, #376]	@ (80022f8 <HAL_DMA_Init+0x244>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d049      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5d      	ldr	r2, [pc, #372]	@ (80022fc <HAL_DMA_Init+0x248>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d044      	beq.n	8002216 <HAL_DMA_Init+0x162>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5b      	ldr	r2, [pc, #364]	@ (8002300 <HAL_DMA_Init+0x24c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d03f      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5a      	ldr	r2, [pc, #360]	@ (8002304 <HAL_DMA_Init+0x250>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d03a      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a58      	ldr	r2, [pc, #352]	@ (8002308 <HAL_DMA_Init+0x254>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d035      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a57      	ldr	r2, [pc, #348]	@ (800230c <HAL_DMA_Init+0x258>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d030      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a55      	ldr	r2, [pc, #340]	@ (8002310 <HAL_DMA_Init+0x25c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02b      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a54      	ldr	r2, [pc, #336]	@ (8002314 <HAL_DMA_Init+0x260>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d026      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a52      	ldr	r2, [pc, #328]	@ (8002318 <HAL_DMA_Init+0x264>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d021      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a51      	ldr	r2, [pc, #324]	@ (800231c <HAL_DMA_Init+0x268>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01c      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002320 <HAL_DMA_Init+0x26c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d017      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002324 <HAL_DMA_Init+0x270>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d012      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002328 <HAL_DMA_Init+0x274>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_DMA_Init+0x162>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a4b      	ldr	r2, [pc, #300]	@ (800232c <HAL_DMA_Init+0x278>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d008      	beq.n	8002216 <HAL_DMA_Init+0x162>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a49      	ldr	r2, [pc, #292]	@ (8002330 <HAL_DMA_Init+0x27c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <HAL_DMA_Init+0x162>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a48      	ldr	r2, [pc, #288]	@ (8002334 <HAL_DMA_Init+0x280>)
 8002214:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0206 	orr.w	r2, r2, #6
 800225e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002260:	e00f      	b.n	8002282 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002262:	f7ff fd63 	bl	8001d2c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b05      	cmp	r3, #5
 800226e:	d908      	bls.n	8002282 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2210      	movs	r2, #16
 8002274:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e015      	b.n	80022ae <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e8      	bne.n	8002262 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fb25 	bl	80028e0 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40020050 	.word	0x40020050
 80022bc:	50020050 	.word	0x50020050
 80022c0:	400200d0 	.word	0x400200d0
 80022c4:	500200d0 	.word	0x500200d0
 80022c8:	40020150 	.word	0x40020150
 80022cc:	50020150 	.word	0x50020150
 80022d0:	400201d0 	.word	0x400201d0
 80022d4:	500201d0 	.word	0x500201d0
 80022d8:	40020250 	.word	0x40020250
 80022dc:	50020250 	.word	0x50020250
 80022e0:	400202d0 	.word	0x400202d0
 80022e4:	500202d0 	.word	0x500202d0
 80022e8:	40020350 	.word	0x40020350
 80022ec:	50020350 	.word	0x50020350
 80022f0:	400203d0 	.word	0x400203d0
 80022f4:	500203d0 	.word	0x500203d0
 80022f8:	40020450 	.word	0x40020450
 80022fc:	50020450 	.word	0x50020450
 8002300:	400204d0 	.word	0x400204d0
 8002304:	500204d0 	.word	0x500204d0
 8002308:	40020550 	.word	0x40020550
 800230c:	50020550 	.word	0x50020550
 8002310:	400205d0 	.word	0x400205d0
 8002314:	500205d0 	.word	0x500205d0
 8002318:	40020650 	.word	0x40020650
 800231c:	50020650 	.word	0x50020650
 8002320:	400206d0 	.word	0x400206d0
 8002324:	500206d0 	.word	0x500206d0
 8002328:	40020750 	.word	0x40020750
 800232c:	50020750 	.word	0x50020750
 8002330:	400207d0 	.word	0x400207d0
 8002334:	500207d0 	.word	0x500207d0

08002338 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e04f      	b.n	80023f0 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_DMA_Start_IT+0x26>
 800235a:	2302      	movs	r3, #2
 800235c:	e048      	b.n	80023f0 <HAL_DMA_Start_IT+0xb8>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d136      	bne.n	80023e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fa84 	bl	8002894 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800239a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023ca:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e007      	b.n	80023f0 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002400:	f7ff fc94 	bl	8001d2c <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e06b      	b.n	80024e8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d008      	beq.n	800242e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e05c      	b.n	80024e8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0204 	orr.w	r2, r2, #4
 800243c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2205      	movs	r2, #5
 8002442:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002446:	e020      	b.n	800248a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002448:	f7ff fc70 	bl	8001d2c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b05      	cmp	r3, #5
 8002454:	d919      	bls.n	800248a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247a:	2201      	movs	r2, #1
 800247c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e02e      	b.n	80024e8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0d7      	beq.n	8002448 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0202 	orr.w	r2, r2, #2
 80024a6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2204      	movs	r2, #4
 80024ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80024b8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d2:	2201      	movs	r2, #1
 80024d4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e019      	b.n	8002536 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d004      	beq.n	8002518 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e00e      	b.n	8002536 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002552:	f023 030f 	bic.w	r3, r3, #15
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	3b50      	subs	r3, #80	@ 0x50
 8002562:	09db      	lsrs	r3, r3, #7
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2201      	movs	r2, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 813b 	beq.w	80027f8 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d011      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d011      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025d8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	f043 0202 	orr.w	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d011      	beq.n	8002618 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800260a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d011      	beq.n	800264a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800263c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	f043 0208 	orr.w	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04c      	beq.n	8002728 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d045      	beq.n	8002728 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026a4:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d12e      	bne.n	8002710 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026c0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0202 	orr.w	r2, r2, #2
 80026d0:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ea:	2201      	movs	r2, #1
 80026ec:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d07a      	beq.n	80027fc <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
        }

        return;
 800270e:	e075      	b.n	80027fc <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2205      	movs	r2, #5
 8002714:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d039      	beq.n	80027aa <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d032      	beq.n	80027aa <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	2b00      	cmp	r3, #0
 8002762:	d111      	bne.n	8002788 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002770:	2201      	movs	r2, #1
 8002772:	731a      	strb	r2, [r3, #12]
 8002774:	e008      	b.n	8002788 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002790:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d025      	beq.n	80027fe <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0202 	orr.w	r2, r2, #2
 80027c0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027da:	2201      	movs	r2, #1
 80027dc:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
 80027f6:	e002      	b.n	80027fe <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80027f8:	bf00      	nop
 80027fa:	e000      	b.n	80027fe <HAL_DMA_IRQHandler+0x2bc>
        return;
 80027fc:	bf00      	nop
    }
  }
}
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e02b      	b.n	8002888 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002838:	f023 030f 	bic.w	r3, r3, #15
 800283c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002846:	3b50      	subs	r3, #80	@ 0x50
 8002848:	09db      	lsrs	r3, r3, #7
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2201      	movs	r2, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f003 0311 	and.w	r3, r3, #17
 8002866:	2b11      	cmp	r3, #17
 8002868:	d106      	bne.n	8002878 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e006      	b.n	8002886 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	43db      	mvns	r3, r3
 8002880:	401a      	ands	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	b291      	uxth	r1, r2
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80028c0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	430a      	orrs	r2, r1
 8002900:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a53      	ldr	r2, [pc, #332]	@ (8002a6c <DMA_Init+0x18c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	f000 80a0 	beq.w	8002a66 <DMA_Init+0x186>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a51      	ldr	r2, [pc, #324]	@ (8002a70 <DMA_Init+0x190>)
 800292c:	4293      	cmp	r3, r2
 800292e:	f000 809a 	beq.w	8002a66 <DMA_Init+0x186>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4f      	ldr	r2, [pc, #316]	@ (8002a74 <DMA_Init+0x194>)
 8002938:	4293      	cmp	r3, r2
 800293a:	f000 8094 	beq.w	8002a66 <DMA_Init+0x186>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4d      	ldr	r2, [pc, #308]	@ (8002a78 <DMA_Init+0x198>)
 8002944:	4293      	cmp	r3, r2
 8002946:	f000 808e 	beq.w	8002a66 <DMA_Init+0x186>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a7c <DMA_Init+0x19c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	f000 8088 	beq.w	8002a66 <DMA_Init+0x186>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a49      	ldr	r2, [pc, #292]	@ (8002a80 <DMA_Init+0x1a0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	f000 8082 	beq.w	8002a66 <DMA_Init+0x186>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a47      	ldr	r2, [pc, #284]	@ (8002a84 <DMA_Init+0x1a4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d07c      	beq.n	8002a66 <DMA_Init+0x186>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a45      	ldr	r2, [pc, #276]	@ (8002a88 <DMA_Init+0x1a8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d077      	beq.n	8002a66 <DMA_Init+0x186>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a44      	ldr	r2, [pc, #272]	@ (8002a8c <DMA_Init+0x1ac>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d072      	beq.n	8002a66 <DMA_Init+0x186>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a42      	ldr	r2, [pc, #264]	@ (8002a90 <DMA_Init+0x1b0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d06d      	beq.n	8002a66 <DMA_Init+0x186>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a41      	ldr	r2, [pc, #260]	@ (8002a94 <DMA_Init+0x1b4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d068      	beq.n	8002a66 <DMA_Init+0x186>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3f      	ldr	r2, [pc, #252]	@ (8002a98 <DMA_Init+0x1b8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d063      	beq.n	8002a66 <DMA_Init+0x186>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a3e      	ldr	r2, [pc, #248]	@ (8002a9c <DMA_Init+0x1bc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d05e      	beq.n	8002a66 <DMA_Init+0x186>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a3c      	ldr	r2, [pc, #240]	@ (8002aa0 <DMA_Init+0x1c0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d059      	beq.n	8002a66 <DMA_Init+0x186>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa4 <DMA_Init+0x1c4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d054      	beq.n	8002a66 <DMA_Init+0x186>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a39      	ldr	r2, [pc, #228]	@ (8002aa8 <DMA_Init+0x1c8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d04f      	beq.n	8002a66 <DMA_Init+0x186>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a38      	ldr	r2, [pc, #224]	@ (8002aac <DMA_Init+0x1cc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d04a      	beq.n	8002a66 <DMA_Init+0x186>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a36      	ldr	r2, [pc, #216]	@ (8002ab0 <DMA_Init+0x1d0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d045      	beq.n	8002a66 <DMA_Init+0x186>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a35      	ldr	r2, [pc, #212]	@ (8002ab4 <DMA_Init+0x1d4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d040      	beq.n	8002a66 <DMA_Init+0x186>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a33      	ldr	r2, [pc, #204]	@ (8002ab8 <DMA_Init+0x1d8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d03b      	beq.n	8002a66 <DMA_Init+0x186>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a32      	ldr	r2, [pc, #200]	@ (8002abc <DMA_Init+0x1dc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d036      	beq.n	8002a66 <DMA_Init+0x186>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a30      	ldr	r2, [pc, #192]	@ (8002ac0 <DMA_Init+0x1e0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <DMA_Init+0x186>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2f      	ldr	r2, [pc, #188]	@ (8002ac4 <DMA_Init+0x1e4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d02c      	beq.n	8002a66 <DMA_Init+0x186>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac8 <DMA_Init+0x1e8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d027      	beq.n	8002a66 <DMA_Init+0x186>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002acc <DMA_Init+0x1ec>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <DMA_Init+0x186>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad0 <DMA_Init+0x1f0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01d      	beq.n	8002a66 <DMA_Init+0x186>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a29      	ldr	r2, [pc, #164]	@ (8002ad4 <DMA_Init+0x1f4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d018      	beq.n	8002a66 <DMA_Init+0x186>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a27      	ldr	r2, [pc, #156]	@ (8002ad8 <DMA_Init+0x1f8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <DMA_Init+0x186>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a26      	ldr	r2, [pc, #152]	@ (8002adc <DMA_Init+0x1fc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <DMA_Init+0x186>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a24      	ldr	r2, [pc, #144]	@ (8002ae0 <DMA_Init+0x200>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <DMA_Init+0x186>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a23      	ldr	r2, [pc, #140]	@ (8002ae4 <DMA_Init+0x204>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <DMA_Init+0x186>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a21      	ldr	r2, [pc, #132]	@ (8002ae8 <DMA_Init+0x208>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d142      	bne.n	8002aec <DMA_Init+0x20c>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e041      	b.n	8002aee <DMA_Init+0x20e>
 8002a6a:	bf00      	nop
 8002a6c:	40020050 	.word	0x40020050
 8002a70:	50020050 	.word	0x50020050
 8002a74:	400200d0 	.word	0x400200d0
 8002a78:	500200d0 	.word	0x500200d0
 8002a7c:	40020150 	.word	0x40020150
 8002a80:	50020150 	.word	0x50020150
 8002a84:	400201d0 	.word	0x400201d0
 8002a88:	500201d0 	.word	0x500201d0
 8002a8c:	40020250 	.word	0x40020250
 8002a90:	50020250 	.word	0x50020250
 8002a94:	400202d0 	.word	0x400202d0
 8002a98:	500202d0 	.word	0x500202d0
 8002a9c:	40020350 	.word	0x40020350
 8002aa0:	50020350 	.word	0x50020350
 8002aa4:	400203d0 	.word	0x400203d0
 8002aa8:	500203d0 	.word	0x500203d0
 8002aac:	40020450 	.word	0x40020450
 8002ab0:	50020450 	.word	0x50020450
 8002ab4:	400204d0 	.word	0x400204d0
 8002ab8:	500204d0 	.word	0x500204d0
 8002abc:	40020550 	.word	0x40020550
 8002ac0:	50020550 	.word	0x50020550
 8002ac4:	400205d0 	.word	0x400205d0
 8002ac8:	500205d0 	.word	0x500205d0
 8002acc:	40020650 	.word	0x40020650
 8002ad0:	50020650 	.word	0x50020650
 8002ad4:	400206d0 	.word	0x400206d0
 8002ad8:	500206d0 	.word	0x500206d0
 8002adc:	40020750 	.word	0x40020750
 8002ae0:	50020750 	.word	0x50020750
 8002ae4:	400207d0 	.word	0x400207d0
 8002ae8:	500207d0 	.word	0x500207d0
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d012      	beq.n	8002b18 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afa:	3b01      	subs	r3, #1
 8002afc:	051b      	lsls	r3, r3, #20
 8002afe:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002b02:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002b10:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4a:	f040 80b0 	bne.w	8002cae <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a82      	ldr	r2, [pc, #520]	@ (8002d5c <DMA_Init+0x47c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	f000 80a0 	beq.w	8002c9a <DMA_Init+0x3ba>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a80      	ldr	r2, [pc, #512]	@ (8002d60 <DMA_Init+0x480>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f000 809a 	beq.w	8002c9a <DMA_Init+0x3ba>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d64 <DMA_Init+0x484>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f000 8094 	beq.w	8002c9a <DMA_Init+0x3ba>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7c      	ldr	r2, [pc, #496]	@ (8002d68 <DMA_Init+0x488>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f000 808e 	beq.w	8002c9a <DMA_Init+0x3ba>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7a      	ldr	r2, [pc, #488]	@ (8002d6c <DMA_Init+0x48c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	f000 8088 	beq.w	8002c9a <DMA_Init+0x3ba>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a78      	ldr	r2, [pc, #480]	@ (8002d70 <DMA_Init+0x490>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	f000 8082 	beq.w	8002c9a <DMA_Init+0x3ba>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a76      	ldr	r2, [pc, #472]	@ (8002d74 <DMA_Init+0x494>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d07c      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a74      	ldr	r2, [pc, #464]	@ (8002d78 <DMA_Init+0x498>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d077      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	@ (8002d7c <DMA_Init+0x49c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d072      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a71      	ldr	r2, [pc, #452]	@ (8002d80 <DMA_Init+0x4a0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d06d      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a70      	ldr	r2, [pc, #448]	@ (8002d84 <DMA_Init+0x4a4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d068      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8002d88 <DMA_Init+0x4a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d063      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6d      	ldr	r2, [pc, #436]	@ (8002d8c <DMA_Init+0x4ac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d05e      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6b      	ldr	r2, [pc, #428]	@ (8002d90 <DMA_Init+0x4b0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d059      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6a      	ldr	r2, [pc, #424]	@ (8002d94 <DMA_Init+0x4b4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d054      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a68      	ldr	r2, [pc, #416]	@ (8002d98 <DMA_Init+0x4b8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d04f      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a67      	ldr	r2, [pc, #412]	@ (8002d9c <DMA_Init+0x4bc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04a      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a65      	ldr	r2, [pc, #404]	@ (8002da0 <DMA_Init+0x4c0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d045      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a64      	ldr	r2, [pc, #400]	@ (8002da4 <DMA_Init+0x4c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d040      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a62      	ldr	r2, [pc, #392]	@ (8002da8 <DMA_Init+0x4c8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d03b      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a61      	ldr	r2, [pc, #388]	@ (8002dac <DMA_Init+0x4cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d036      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5f      	ldr	r2, [pc, #380]	@ (8002db0 <DMA_Init+0x4d0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d031      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002db4 <DMA_Init+0x4d4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d02c      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5c      	ldr	r2, [pc, #368]	@ (8002db8 <DMA_Init+0x4d8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d027      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dbc <DMA_Init+0x4dc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a59      	ldr	r2, [pc, #356]	@ (8002dc0 <DMA_Init+0x4e0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01d      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a58      	ldr	r2, [pc, #352]	@ (8002dc4 <DMA_Init+0x4e4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d018      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a56      	ldr	r2, [pc, #344]	@ (8002dc8 <DMA_Init+0x4e8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a55      	ldr	r2, [pc, #340]	@ (8002dcc <DMA_Init+0x4ec>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a53      	ldr	r2, [pc, #332]	@ (8002dd0 <DMA_Init+0x4f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a52      	ldr	r2, [pc, #328]	@ (8002dd4 <DMA_Init+0x4f4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <DMA_Init+0x3ba>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a50      	ldr	r2, [pc, #320]	@ (8002dd8 <DMA_Init+0x4f8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <DMA_Init+0x3be>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <DMA_Init+0x3c0>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e008      	b.n	8002cc0 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb6:	d103      	bne.n	8002cc0 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cbe:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cc6:	4b45      	ldr	r3, [pc, #276]	@ (8002ddc <DMA_Init+0x4fc>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a36      	ldr	r2, [pc, #216]	@ (8002dbc <DMA_Init+0x4dc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d022      	beq.n	8002d2c <DMA_Init+0x44c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a35      	ldr	r2, [pc, #212]	@ (8002dc0 <DMA_Init+0x4e0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d01d      	beq.n	8002d2c <DMA_Init+0x44c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a33      	ldr	r2, [pc, #204]	@ (8002dc4 <DMA_Init+0x4e4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d018      	beq.n	8002d2c <DMA_Init+0x44c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a32      	ldr	r2, [pc, #200]	@ (8002dc8 <DMA_Init+0x4e8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <DMA_Init+0x44c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a30      	ldr	r2, [pc, #192]	@ (8002dcc <DMA_Init+0x4ec>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00e      	beq.n	8002d2c <DMA_Init+0x44c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd0 <DMA_Init+0x4f0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <DMA_Init+0x44c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd4 <DMA_Init+0x4f4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <DMA_Init+0x44c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <DMA_Init+0x4f8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d101      	bne.n	8002d30 <DMA_Init+0x450>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <DMA_Init+0x452>
 8002d30:	2300      	movs	r3, #0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40020050 	.word	0x40020050
 8002d60:	50020050 	.word	0x50020050
 8002d64:	400200d0 	.word	0x400200d0
 8002d68:	500200d0 	.word	0x500200d0
 8002d6c:	40020150 	.word	0x40020150
 8002d70:	50020150 	.word	0x50020150
 8002d74:	400201d0 	.word	0x400201d0
 8002d78:	500201d0 	.word	0x500201d0
 8002d7c:	40020250 	.word	0x40020250
 8002d80:	50020250 	.word	0x50020250
 8002d84:	400202d0 	.word	0x400202d0
 8002d88:	500202d0 	.word	0x500202d0
 8002d8c:	40020350 	.word	0x40020350
 8002d90:	50020350 	.word	0x50020350
 8002d94:	400203d0 	.word	0x400203d0
 8002d98:	500203d0 	.word	0x500203d0
 8002d9c:	40020450 	.word	0x40020450
 8002da0:	50020450 	.word	0x50020450
 8002da4:	400204d0 	.word	0x400204d0
 8002da8:	500204d0 	.word	0x500204d0
 8002dac:	40020550 	.word	0x40020550
 8002db0:	50020550 	.word	0x50020550
 8002db4:	400205d0 	.word	0x400205d0
 8002db8:	500205d0 	.word	0x500205d0
 8002dbc:	40020650 	.word	0x40020650
 8002dc0:	50020650 	.word	0x50020650
 8002dc4:	400206d0 	.word	0x400206d0
 8002dc8:	500206d0 	.word	0x500206d0
 8002dcc:	40020750 	.word	0x40020750
 8002dd0:	50020750 	.word	0x50020750
 8002dd4:	400207d0 	.word	0x400207d0
 8002dd8:	500207d0 	.word	0x500207d0
 8002ddc:	3cc03180 	.word	0x3cc03180

08002de0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_DMAEx_List_Start_IT+0x16>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e082      	b.n	8002f00 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e00:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d005      	beq.n	8002e20 <HAL_DMAEx_List_Start_IT+0x40>
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d16a      	bne.n	8002ef0 <HAL_DMAEx_List_Start_IT+0x110>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d067      	beq.n	8002ef0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d157      	bne.n	8002edc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_DMAEx_List_Start_IT+0x5a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e062      	b.n	8002f00 <HAL_DMAEx_List_Start_IT+0x120>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4e:	2202      	movs	r2, #2
 8002e50:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002e6e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e9e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f107 010c 	add.w	r1, r7, #12
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f82b 	bl	8002f08 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	0c0b      	lsrs	r3, r1, #16
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e007      	b.n	8002f00 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00c      	beq.n	8002f3a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <DMA_List_GetCLLRNodeInfo+0x58>)
 8002f2a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00f      	beq.n	8002f52 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002f38:	e00b      	b.n	8002f52 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002f44:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2205      	movs	r2, #5
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	fe010000 	.word	0xfe010000
 8002f64:	f8010000 	.word	0xf8010000

08002f68 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f7a:	e1c2      	b.n	8003302 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 81b2 	beq.w	80032fc <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a55      	ldr	r2, [pc, #340]	@ (80030f0 <HAL_GPIO_Init+0x188>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d15d      	bne.n	800305c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002fd0:	4a48      	ldr	r2, [pc, #288]	@ (80030f4 <HAL_GPIO_Init+0x18c>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fd8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002fda:	4a46      	ldr	r2, [pc, #280]	@ (80030f4 <HAL_GPIO_Init+0x18c>)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	3208      	adds	r2, #8
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	4013      	ands	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220b      	movs	r2, #11
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	4313      	orrs	r3, r2
 800301c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3208      	adds	r2, #8
 8003026:	69f9      	ldr	r1, [r7, #28]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	4013      	ands	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2202      	movs	r2, #2
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	4313      	orrs	r3, r2
 8003052:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e067      	b.n	800312c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x104>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d145      	bne.n	80030f8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	4013      	ands	r3, r2
 800308e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69f9      	ldr	r1, [r7, #28]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e01e      	b.n	800312c <HAL_GPIO_Init+0x1c4>
 80030ee:	bf00      	nop
 80030f0:	46020000 	.word	0x46020000
 80030f4:	0800a410 	.word	0x0800a410
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	4013      	ands	r3, r2
 800310e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0203 	and.w	r2, r3, #3
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	4313      	orrs	r3, r2
 8003124:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d00b      	beq.n	800314c <HAL_GPIO_Init+0x1e4>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d007      	beq.n	800314c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003140:	2b11      	cmp	r3, #17
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b12      	cmp	r3, #18
 800314a:	d130      	bne.n	80031ae <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	4013      	ands	r3, r2
 8003162:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	4313      	orrs	r3, r2
 8003174:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003182:	2201      	movs	r2, #1
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	4013      	ands	r3, r2
 8003190:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 0201 	and.w	r2, r3, #1
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d107      	bne.n	80031c6 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d11b      	bne.n	80031f6 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d017      	beq.n	80031f6 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	4013      	ands	r3, r2
 80031dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d07c      	beq.n	80032fc <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003202:	4a47      	ldr	r2, [pc, #284]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	3318      	adds	r3, #24
 800320a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	220f      	movs	r2, #15
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	4013      	ands	r3, r2
 8003224:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0a9a      	lsrs	r2, r3, #10
 800322a:	4b3e      	ldr	r3, [pc, #248]	@ (8003324 <HAL_GPIO_Init+0x3bc>)
 800322c:	4013      	ands	r3, r2
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	f002 0203 	and.w	r2, r2, #3
 8003234:	00d2      	lsls	r2, r2, #3
 8003236:	4093      	lsls	r3, r2
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	4313      	orrs	r3, r2
 800323c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800323e:	4938      	ldr	r1, [pc, #224]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3318      	adds	r3, #24
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800324c:	4b34      	ldr	r3, [pc, #208]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	4013      	ands	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003270:	4a2b      	ldr	r2, [pc, #172]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003276:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43db      	mvns	r3, r3
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	4013      	ands	r3, r2
 8003284:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800329a:	4a21      	ldr	r2, [pc, #132]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80032a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 80032a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80032c6:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80032ce:	4b14      	ldr	r3, [pc, #80]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 80032d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	4013      	ands	r3, r2
 80032de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80032f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <HAL_GPIO_Init+0x3b8>)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	f47f ae35 	bne.w	8002f7c <HAL_GPIO_Init+0x14>
  }
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	3724      	adds	r7, #36	@ 0x24
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	46022000 	.word	0x46022000
 8003324:	002f7f7f 	.word	0x002f7f7f

08003328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
 8003334:	4613      	mov	r3, r2
 8003336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003344:	e002      	b.n	800334c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003362:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800336e:	4a0c      	ldr	r2, [pc, #48]	@ (80033a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f814 	bl	80033a4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800337c:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003388:	4a05      	ldr	r2, [pc, #20]	@ (80033a0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f812 	bl	80033ba <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	46022000 	.word	0x46022000

080033a4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033e0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d10b      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f0:	d905      	bls.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	4a32      	ldr	r2, [pc, #200]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033fc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e057      	b.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003408:	d90a      	bls.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800340a:	4b2d      	ldr	r3, [pc, #180]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4313      	orrs	r3, r2
 8003416:	4a2a      	ldr	r2, [pc, #168]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800341c:	60d3      	str	r3, [r2, #12]
 800341e:	e007      	b.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003420:	4b27      	ldr	r3, [pc, #156]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003428:	4925      	ldr	r1, [pc, #148]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4313      	orrs	r3, r2
 800342e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003430:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a24      	ldr	r2, [pc, #144]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	2232      	movs	r2, #50	@ 0x32
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a21      	ldr	r2, [pc, #132]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800344e:	e002      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3b01      	subs	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003456:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f3      	bne.n	8003450 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01b      	beq.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800346e:	4b15      	ldr	r3, [pc, #84]	@ (80034c4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a15      	ldr	r2, [pc, #84]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	2232      	movs	r2, #50	@ 0x32
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	3301      	adds	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800348c:	e002      	b.n	8003494 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f3      	bne.n	800348e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e000      	b.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	46020800 	.word	0x46020800
 80034c4:	20000000 	.word	0x20000000
 80034c8:	10624dd3 	.word	0x10624dd3

080034cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	46020800 	.word	0x46020800

080034e8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	4a04      	ldr	r2, [pc, #16]	@ (8003504 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	6113      	str	r3, [r2, #16]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	46020800 	.word	0x46020800

08003508 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800350c:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <HAL_PWREx_EnableVddIO2+0x1c>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003512:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003516:	6113      	str	r3, [r2, #16]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	46020800 	.word	0x46020800

08003528 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_PWREx_EnableVddA+0x1c>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <HAL_PWREx_EnableVddA+0x1c>)
 8003532:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003536:	6113      	str	r3, [r2, #16]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	46020800 	.word	0x46020800

08003548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08e      	sub	sp, #56	@ 0x38
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f000 bec8 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003562:	4b99      	ldr	r3, [pc, #612]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	4b96      	ldr	r3, [pc, #600]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 816c 	beq.w	800385c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_RCC_OscConfig+0x52>
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	2b0c      	cmp	r3, #12
 800358e:	f040 80de 	bne.w	800374e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003594:	2b01      	cmp	r3, #1
 8003596:	f040 80da 	bne.w	800374e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f000 bea5 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035ac:	4b86      	ldr	r3, [pc, #536]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <HAL_RCC_OscConfig+0x7a>
 80035b8:	4b83      	ldr	r3, [pc, #524]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80035c0:	e005      	b.n	80035ce <HAL_RCC_OscConfig+0x86>
 80035c2:	4b81      	ldr	r3, [pc, #516]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d255      	bcs.n	800367e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 f9d9 	bl	8004994 <RCC_SetFlashLatencyFromMSIRange>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f000 be82 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035ee:	4b76      	ldr	r3, [pc, #472]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a75      	ldr	r2, [pc, #468]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035f8:	6093      	str	r3, [r2, #8]
 80035fa:	4b73      	ldr	r3, [pc, #460]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	4970      	ldr	r1, [pc, #448]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003614:	d309      	bcc.n	800362a <HAL_RCC_OscConfig+0xe2>
 8003616:	4b6c      	ldr	r3, [pc, #432]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 021f 	bic.w	r2, r3, #31
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4969      	ldr	r1, [pc, #420]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003624:	4313      	orrs	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
 8003628:	e07e      	b.n	8003728 <HAL_RCC_OscConfig+0x1e0>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	da0a      	bge.n	8003648 <HAL_RCC_OscConfig+0x100>
 8003632:	4b65      	ldr	r3, [pc, #404]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	015b      	lsls	r3, r3, #5
 8003640:	4961      	ldr	r1, [pc, #388]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]
 8003646:	e06f      	b.n	8003728 <HAL_RCC_OscConfig+0x1e0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003650:	d30a      	bcc.n	8003668 <HAL_RCC_OscConfig+0x120>
 8003652:	4b5d      	ldr	r3, [pc, #372]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	4959      	ldr	r1, [pc, #356]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003662:	4313      	orrs	r3, r2
 8003664:	60cb      	str	r3, [r1, #12]
 8003666:	e05f      	b.n	8003728 <HAL_RCC_OscConfig+0x1e0>
 8003668:	4b57      	ldr	r3, [pc, #348]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	03db      	lsls	r3, r3, #15
 8003676:	4954      	ldr	r1, [pc, #336]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
 800367c:	e054      	b.n	8003728 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800367e:	4b52      	ldr	r3, [pc, #328]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4a51      	ldr	r2, [pc, #324]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003684:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003688:	6093      	str	r3, [r2, #8]
 800368a:	4b4f      	ldr	r3, [pc, #316]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	494c      	ldr	r1, [pc, #304]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80036a4:	d309      	bcc.n	80036ba <HAL_RCC_OscConfig+0x172>
 80036a6:	4b48      	ldr	r3, [pc, #288]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 021f 	bic.w	r2, r3, #31
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4945      	ldr	r1, [pc, #276]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60cb      	str	r3, [r1, #12]
 80036b8:	e028      	b.n	800370c <HAL_RCC_OscConfig+0x1c4>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	da0a      	bge.n	80036d8 <HAL_RCC_OscConfig+0x190>
 80036c2:	4b41      	ldr	r3, [pc, #260]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	015b      	lsls	r3, r3, #5
 80036d0:	493d      	ldr	r1, [pc, #244]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60cb      	str	r3, [r1, #12]
 80036d6:	e019      	b.n	800370c <HAL_RCC_OscConfig+0x1c4>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e0:	d30a      	bcc.n	80036f8 <HAL_RCC_OscConfig+0x1b0>
 80036e2:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	4935      	ldr	r1, [pc, #212]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60cb      	str	r3, [r1, #12]
 80036f6:	e009      	b.n	800370c <HAL_RCC_OscConfig+0x1c4>
 80036f8:	4b33      	ldr	r3, [pc, #204]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	03db      	lsls	r3, r3, #15
 8003706:	4930      	ldr	r1, [pc, #192]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f93c 	bl	8004994 <RCC_SetFlashLatencyFromMSIRange>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f000 bde5 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003728:	f001 f8de 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800372c:	4b27      	ldr	r3, [pc, #156]	@ (80037cc <HAL_RCC_OscConfig+0x284>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fa71 	bl	8001c18 <HAL_InitTick>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800373c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808a 	beq.w	800385a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003746:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800374a:	f000 bdd2 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d066      	beq.n	8003824 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1b      	ldr	r2, [pc, #108]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003762:	f7fe fae3 	bl	8001d2c <HAL_GetTick>
 8003766:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003768:	e009      	b.n	800377e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376a:	f7fe fadf 	bl	8001d2c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d902      	bls.n	800377e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	f000 bdba 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800377e:	4b12      	ldr	r3, [pc, #72]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ef      	beq.n	800376a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800378a:	4b0f      	ldr	r3, [pc, #60]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a0e      	ldr	r2, [pc, #56]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003790:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003794:	6093      	str	r3, [r2, #8]
 8003796:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	4909      	ldr	r1, [pc, #36]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037b0:	d30e      	bcc.n	80037d0 <HAL_RCC_OscConfig+0x288>
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 021f 	bic.w	r2, r3, #31
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4902      	ldr	r1, [pc, #8]	@ (80037c8 <HAL_RCC_OscConfig+0x280>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60cb      	str	r3, [r1, #12]
 80037c4:	e04a      	b.n	800385c <HAL_RCC_OscConfig+0x314>
 80037c6:	bf00      	nop
 80037c8:	46020c00 	.word	0x46020c00
 80037cc:	20000004 	.word	0x20000004
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da0a      	bge.n	80037ee <HAL_RCC_OscConfig+0x2a6>
 80037d8:	4b98      	ldr	r3, [pc, #608]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	4995      	ldr	r1, [pc, #596]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
 80037ec:	e036      	b.n	800385c <HAL_RCC_OscConfig+0x314>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f6:	d30a      	bcc.n	800380e <HAL_RCC_OscConfig+0x2c6>
 80037f8:	4b90      	ldr	r3, [pc, #576]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	498d      	ldr	r1, [pc, #564]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
 800380c:	e026      	b.n	800385c <HAL_RCC_OscConfig+0x314>
 800380e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	03db      	lsls	r3, r3, #15
 800381c:	4987      	ldr	r1, [pc, #540]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	60cb      	str	r3, [r1, #12]
 8003822:	e01b      	b.n	800385c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003824:	4b85      	ldr	r3, [pc, #532]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a84      	ldr	r2, [pc, #528]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003830:	f7fe fa7c 	bl	8001d2c <HAL_GetTick>
 8003834:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003836:	e009      	b.n	800384c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003838:	f7fe fa78 	bl	8001d2c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	f000 bd53 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800384c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <HAL_RCC_OscConfig+0x2f0>
 8003858:	e000      	b.n	800385c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800385a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 808b 	beq.w	8003980 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	2b08      	cmp	r3, #8
 800386e:	d005      	beq.n	800387c <HAL_RCC_OscConfig+0x334>
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d109      	bne.n	800388a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003878:	2b03      	cmp	r3, #3
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d17d      	bne.n	8003980 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f000 bd34 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x35a>
 8003894:	4b69      	ldr	r3, [pc, #420]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a68      	ldr	r2, [pc, #416]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 800389a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e041      	b.n	8003926 <HAL_RCC_OscConfig+0x3de>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038aa:	d112      	bne.n	80038d2 <HAL_RCC_OscConfig+0x38a>
 80038ac:	4b63      	ldr	r3, [pc, #396]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a62      	ldr	r2, [pc, #392]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b60      	ldr	r3, [pc, #384]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5f      	ldr	r2, [pc, #380]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b5d      	ldr	r3, [pc, #372]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e029      	b.n	8003926 <HAL_RCC_OscConfig+0x3de>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80038da:	d112      	bne.n	8003902 <HAL_RCC_OscConfig+0x3ba>
 80038dc:	4b57      	ldr	r3, [pc, #348]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a56      	ldr	r2, [pc, #344]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b54      	ldr	r3, [pc, #336]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a53      	ldr	r2, [pc, #332]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b51      	ldr	r3, [pc, #324]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a50      	ldr	r2, [pc, #320]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e011      	b.n	8003926 <HAL_RCC_OscConfig+0x3de>
 8003902:	4b4e      	ldr	r3, [pc, #312]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a4d      	ldr	r2, [pc, #308]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b48      	ldr	r3, [pc, #288]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a47      	ldr	r2, [pc, #284]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003920:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003924:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d014      	beq.n	8003958 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800392e:	f7fe f9fd 	bl	8001d2c <HAL_GetTick>
 8003932:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003934:	e009      	b.n	800394a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003936:	f7fe f9f9 	bl	8001d2c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b64      	cmp	r3, #100	@ 0x64
 8003942:	d902      	bls.n	800394a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	f000 bcd4 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0ef      	beq.n	8003936 <HAL_RCC_OscConfig+0x3ee>
 8003956:	e013      	b.n	8003980 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003958:	f7fe f9e8 	bl	8001d2c <HAL_GetTick>
 800395c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800395e:	e009      	b.n	8003974 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fe f9e4 	bl	8001d2c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d902      	bls.n	8003974 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	f000 bcbf 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003974:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ef      	bne.n	8003960 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05f      	beq.n	8003a4c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	2b04      	cmp	r3, #4
 8003990:	d005      	beq.n	800399e <HAL_RCC_OscConfig+0x456>
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d114      	bne.n	80039c2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399a:	2b02      	cmp	r3, #2
 800399c:	d111      	bne.n	80039c2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f000 bca3 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80039ac:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	4920      	ldr	r1, [pc, #128]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80039c0:	e044      	b.n	8003a4c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d024      	beq.n	8003a14 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80039ca:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039d6:	f7fe f9a9 	bl	8001d2c <HAL_GetTick>
 80039da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039dc:	e009      	b.n	80039f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039de:	f7fe f9a5 	bl	8001d2c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d902      	bls.n	80039f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	f000 bc80 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ef      	beq.n	80039de <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	041b      	lsls	r3, r3, #16
 8003a0c:	490b      	ldr	r1, [pc, #44]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	610b      	str	r3, [r1, #16]
 8003a12:	e01b      	b.n	8003a4c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a08      	ldr	r2, [pc, #32]	@ (8003a3c <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a20:	f7fe f984 	bl	8001d2c <HAL_GetTick>
 8003a24:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe f980 	bl	8001d2c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d904      	bls.n	8003a40 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	f000 bc5b 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
 8003a3c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a40:	4baf      	ldr	r3, [pc, #700]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ed      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80c8 	beq.w	8003bea <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a60:	4ba7      	ldr	r3, [pc, #668]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d111      	bne.n	8003a92 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4ba4      	ldr	r3, [pc, #656]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a74:	4aa2      	ldr	r2, [pc, #648]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003a7e:	4ba0      	ldr	r3, [pc, #640]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a92:	4b9c      	ldr	r3, [pc, #624]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d119      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003a9e:	4b99      	ldr	r3, [pc, #612]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	4a98      	ldr	r2, [pc, #608]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe f93f 	bl	8001d2c <HAL_GetTick>
 8003aae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ab0:	e009      	b.n	8003ac6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fe f93b 	bl	8001d2c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d902      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	f000 bc16 	b.w	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0ef      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d05f      	beq.n	8003b9a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003ada:	4b89      	ldr	r3, [pc, #548]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ae0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d037      	beq.n	8003b60 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e3f4      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b12:	4b7b      	ldr	r3, [pc, #492]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b18:	4a79      	ldr	r2, [pc, #484]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b1a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003b22:	f7fe f903 	bl	8001d2c <HAL_GetTick>
 8003b26:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2a:	f7fe f8ff 	bl	8001d2c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e3da      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b3c:	4b70      	ldr	r3, [pc, #448]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ef      	bne.n	8003b2a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4969      	ldr	r1, [pc, #420]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003b60:	4b67      	ldr	r3, [pc, #412]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b66:	4a66      	ldr	r2, [pc, #408]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003b70:	f7fe f8dc 	bl	8001d2c <HAL_GetTick>
 8003b74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fe f8d8 	bl	8001d2c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e3b3      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCC_OscConfig+0x630>
 8003b98:	e01b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b59      	ldr	r3, [pc, #356]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ba0:	4a57      	ldr	r2, [pc, #348]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003ba2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003ba6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003baa:	f7fe f8bf 	bl	8001d2c <HAL_GetTick>
 8003bae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fe f8bb 	bl	8001d2c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e396      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ef      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be0:	4a47      	ldr	r2, [pc, #284]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8111 	beq.w	8003e1a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b40      	ldr	r3, [pc, #256]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d111      	bne.n	8003c30 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c12:	4a3b      	ldr	r2, [pc, #236]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c1c:	4b38      	ldr	r3, [pc, #224]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c30:	4b34      	ldr	r3, [pc, #208]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d118      	bne.n	8003c6e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c3c:	4b31      	ldr	r3, [pc, #196]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	4a30      	ldr	r2, [pc, #192]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c48:	f7fe f870 	bl	8001d2c <HAL_GetTick>
 8003c4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c50:	f7fe f86c 	bl	8001d2c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e347      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c62:	4b28      	ldr	r3, [pc, #160]	@ (8003d04 <HAL_RCC_OscConfig+0x7bc>)
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01f      	beq.n	8003cba <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c86:	4b1e      	ldr	r3, [pc, #120]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ca6:	e018      	b.n	8003cda <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ca8:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cae:	4a14      	ldr	r2, [pc, #80]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cb8:	e00f      	b.n	8003cda <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cba:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cca:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003d00 <HAL_RCC_OscConfig+0x7b8>)
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d057      	beq.n	8003d92 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003ce2:	f7fe f823 	bl	8001d2c <HAL_GetTick>
 8003ce6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fe f81f 	bl	8001d2c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d905      	bls.n	8003d08 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e2f8      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
 8003d00:	46020c00 	.word	0x46020c00
 8003d04:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d08:	4b9c      	ldr	r3, [pc, #624]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0e9      	beq.n	8003cea <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01b      	beq.n	8003d5a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d22:	4b96      	ldr	r3, [pc, #600]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d28:	4a94      	ldr	r2, [pc, #592]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd fffa 	bl	8001d2c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e2d3      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d4a:	4b8c      	ldr	r3, [pc, #560]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ed      	beq.n	8003d34 <HAL_RCC_OscConfig+0x7ec>
 8003d58:	e053      	b.n	8003e02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d5a:	4b88      	ldr	r3, [pc, #544]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d60:	4a86      	ldr	r2, [pc, #536]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fd ffde 	bl	8001d2c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e2b7      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d82:	4b7e      	ldr	r3, [pc, #504]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ed      	bne.n	8003d6c <HAL_RCC_OscConfig+0x824>
 8003d90:	e037      	b.n	8003e02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003d92:	f7fd ffcb 	bl	8001d2c <HAL_GetTick>
 8003d96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fd ffc7 	bl	8001d2c <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e2a0      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db0:	4b72      	ldr	r3, [pc, #456]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ed      	bne.n	8003d9a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003dbe:	4b6f      	ldr	r3, [pc, #444]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01a      	beq.n	8003e02 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003dd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd ffa5 	bl	8001d2c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e27e      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003df4:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ed      	bne.n	8003dde <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e02:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e10:	4a5a      	ldr	r2, [pc, #360]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e12:	f023 0304 	bic.w	r3, r3, #4
 8003e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d036      	beq.n	8003e94 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d019      	beq.n	8003e62 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003e2e:	4b53      	ldr	r3, [pc, #332]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a52      	ldr	r2, [pc, #328]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e3a:	f7fd ff77 	bl	8001d2c <HAL_GetTick>
 8003e3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e42:	f7fd ff73 	bl	8001d2c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e24e      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e54:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x8fa>
 8003e60:	e018      	b.n	8003e94 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003e62:	4b46      	ldr	r3, [pc, #280]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a45      	ldr	r2, [pc, #276]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e6c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e6e:	f7fd ff5d 	bl	8001d2c <HAL_GetTick>
 8003e72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e76:	f7fd ff59 	bl	8001d2c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e234      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e88:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d036      	beq.n	8003f0e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d019      	beq.n	8003edc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003ea8:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a33      	ldr	r2, [pc, #204]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003eb4:	f7fd ff3a 	bl	8001d2c <HAL_GetTick>
 8003eb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003ebc:	f7fd ff36 	bl	8001d2c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e211      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003ece:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x974>
 8003eda:	e018      	b.n	8003f0e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003edc:	4b27      	ldr	r3, [pc, #156]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a26      	ldr	r2, [pc, #152]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ee8:	f7fd ff20 	bl	8001d2c <HAL_GetTick>
 8003eec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003ef0:	f7fd ff1c 	bl	8001d2c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e1f7      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d07f      	beq.n	800401a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d062      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003f22:	4b16      	ldr	r3, [pc, #88]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a15      	ldr	r2, [pc, #84]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f2c:	6093      	str	r3, [r2, #8]
 8003f2e:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	4910      	ldr	r1, [pc, #64]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003f48:	d309      	bcc.n	8003f5e <HAL_RCC_OscConfig+0xa16>
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 021f 	bic.w	r2, r3, #31
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4909      	ldr	r1, [pc, #36]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60cb      	str	r3, [r1, #12]
 8003f5c:	e02a      	b.n	8003fb4 <HAL_RCC_OscConfig+0xa6c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	da0c      	bge.n	8003f80 <HAL_RCC_OscConfig+0xa38>
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	4901      	ldr	r1, [pc, #4]	@ (8003f7c <HAL_RCC_OscConfig+0xa34>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60cb      	str	r3, [r1, #12]
 8003f7a:	e01b      	b.n	8003fb4 <HAL_RCC_OscConfig+0xa6c>
 8003f7c:	46020c00 	.word	0x46020c00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f88:	d30a      	bcc.n	8003fa0 <HAL_RCC_OscConfig+0xa58>
 8003f8a:	4ba1      	ldr	r3, [pc, #644]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	029b      	lsls	r3, r3, #10
 8003f98:	499d      	ldr	r1, [pc, #628]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60cb      	str	r3, [r1, #12]
 8003f9e:	e009      	b.n	8003fb4 <HAL_RCC_OscConfig+0xa6c>
 8003fa0:	4b9b      	ldr	r3, [pc, #620]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	03db      	lsls	r3, r3, #15
 8003fae:	4998      	ldr	r1, [pc, #608]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003fb4:	4b96      	ldr	r3, [pc, #600]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a95      	ldr	r2, [pc, #596]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003fba:	f043 0310 	orr.w	r3, r3, #16
 8003fbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fc0:	f7fd feb4 	bl	8001d2c <HAL_GetTick>
 8003fc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003fc8:	f7fd feb0 	bl	8001d2c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e18b      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003fda:	4b8d      	ldr	r3, [pc, #564]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xa80>
 8003fe6:	e018      	b.n	800401a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003fe8:	4b89      	ldr	r3, [pc, #548]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a88      	ldr	r2, [pc, #544]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8003fee:	f023 0310 	bic.w	r3, r3, #16
 8003ff2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ff4:	f7fd fe9a 	bl	8001d2c <HAL_GetTick>
 8003ff8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003ffc:	f7fd fe96 	bl	8001d2c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e171      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800400e:	4b80      	ldr	r3, [pc, #512]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8166 	beq.w	80042f0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402a:	4b79      	ldr	r3, [pc, #484]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b0c      	cmp	r3, #12
 8004034:	f000 80f2 	beq.w	800421c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	2b02      	cmp	r3, #2
 800403e:	f040 80c5 	bne.w	80041cc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b73      	ldr	r3, [pc, #460]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a72      	ldr	r2, [pc, #456]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800404e:	f7fd fe6d 	bl	8001d2c <HAL_GetTick>
 8004052:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004056:	f7fd fe69 	bl	8001d2c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e144      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004068:	4b69      	ldr	r3, [pc, #420]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f0      	bne.n	8004056 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004074:	4b66      	ldr	r3, [pc, #408]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d111      	bne.n	80040a6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	4b63      	ldr	r3, [pc, #396]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004088:	4a61      	ldr	r2, [pc, #388]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004092:	4b5f      	ldr	r3, [pc, #380]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80040a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004214 <HAL_RCC_OscConfig+0xccc>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040b2:	d102      	bne.n	80040ba <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80040ba:	4b56      	ldr	r3, [pc, #344]	@ (8004214 <HAL_RCC_OscConfig+0xccc>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4a55      	ldr	r2, [pc, #340]	@ (8004214 <HAL_RCC_OscConfig+0xccc>)
 80040c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80040c6:	4b52      	ldr	r3, [pc, #328]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040da:	3a01      	subs	r2, #1
 80040dc:	0212      	lsls	r2, r2, #8
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040e4:	430a      	orrs	r2, r1
 80040e6:	494a      	ldr	r1, [pc, #296]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80040ec:	4b48      	ldr	r3, [pc, #288]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80040ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040f0:	4b49      	ldr	r3, [pc, #292]	@ (8004218 <HAL_RCC_OscConfig+0xcd0>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040f8:	3a01      	subs	r2, #1
 80040fa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004102:	3a01      	subs	r2, #1
 8004104:	0252      	lsls	r2, r2, #9
 8004106:	b292      	uxth	r2, r2
 8004108:	4311      	orrs	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800410e:	3a01      	subs	r2, #1
 8004110:	0412      	lsls	r2, r2, #16
 8004112:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004116:	4311      	orrs	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800411c:	3a01      	subs	r2, #1
 800411e:	0612      	lsls	r2, r2, #24
 8004120:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004124:	430a      	orrs	r2, r1
 8004126:	493a      	ldr	r1, [pc, #232]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004128:	4313      	orrs	r3, r2
 800412a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800412c:	4b38      	ldr	r3, [pc, #224]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	4a37      	ldr	r2, [pc, #220]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004132:	f023 0310 	bic.w	r3, r3, #16
 8004136:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	4a34      	ldr	r2, [pc, #208]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004142:	4b33      	ldr	r3, [pc, #204]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	4a32      	ldr	r2, [pc, #200]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004148:	f043 0310 	orr.w	r3, r3, #16
 800414c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800414e:	4b30      	ldr	r3, [pc, #192]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	f023 020c 	bic.w	r2, r3, #12
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	492d      	ldr	r1, [pc, #180]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800415c:	4313      	orrs	r3, r2
 800415e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004160:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004164:	2b01      	cmp	r3, #1
 8004166:	d105      	bne.n	8004174 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004168:	4b2a      	ldr	r3, [pc, #168]	@ (8004214 <HAL_RCC_OscConfig+0xccc>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a29      	ldr	r2, [pc, #164]	@ (8004214 <HAL_RCC_OscConfig+0xccc>)
 800416e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004172:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004174:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004178:	2b01      	cmp	r3, #1
 800417a:	d107      	bne.n	800418c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800417c:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004182:	4a23      	ldr	r2, [pc, #140]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1f      	ldr	r2, [pc, #124]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004198:	f7fd fdc8 	bl	8001d2c <HAL_GetTick>
 800419c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd fdc4 	bl	8001d2c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e09f      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041b2:	4b17      	ldr	r3, [pc, #92]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041be:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c8:	6293      	str	r3, [r2, #40]	@ 0x28
 80041ca:	e091      	b.n	80042f0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041cc:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80041d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041d8:	f7fd fda8 	bl	8001d2c <HAL_GetTick>
 80041dc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fd fda4 	bl	8001d2c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e07f      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80041fe:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	4a03      	ldr	r2, [pc, #12]	@ (8004210 <HAL_RCC_OscConfig+0xcc8>)
 8004204:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004208:	f023 0303 	bic.w	r3, r3, #3
 800420c:	6293      	str	r3, [r2, #40]	@ 0x28
 800420e:	e06f      	b.n	80042f0 <HAL_RCC_OscConfig+0xda8>
 8004210:	46020c00 	.word	0x46020c00
 8004214:	46020800 	.word	0x46020800
 8004218:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800421c:	4b37      	ldr	r3, [pc, #220]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004222:	4b36      	ldr	r3, [pc, #216]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 8004224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004226:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	2b01      	cmp	r3, #1
 800422e:	d039      	beq.n	80042a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0203 	and.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d132      	bne.n	80042a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d129      	bne.n	80042a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d122      	bne.n	80042a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004268:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d11a      	bne.n	80042a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	0a5b      	lsrs	r3, r3, #9
 8004272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d111      	bne.n	80042a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	0e1b      	lsrs	r3, r3, #24
 8004296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e024      	b.n	80042f2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042a8:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d01a      	beq.n	80042f0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80042ba:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042be:	4a0f      	ldr	r2, [pc, #60]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fd31 	bl	8001d2c <HAL_GetTick>
 80042ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80042cc:	bf00      	nop
 80042ce:	f7fd fd2d 	bl	8001d2c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d0f9      	beq.n	80042ce <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	4a07      	ldr	r2, [pc, #28]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <HAL_RCC_OscConfig+0xdb4>)
 80042ea:	f043 0310 	orr.w	r3, r3, #16
 80042ee:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3738      	adds	r7, #56	@ 0x38
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	46020c00 	.word	0x46020c00

08004300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e1d9      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004314:	4b9b      	ldr	r3, [pc, #620]	@ (8004584 <HAL_RCC_ClockConfig+0x284>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d910      	bls.n	8004344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b98      	ldr	r3, [pc, #608]	@ (8004584 <HAL_RCC_ClockConfig+0x284>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 020f 	bic.w	r2, r3, #15
 800432a:	4996      	ldr	r1, [pc, #600]	@ (8004584 <HAL_RCC_ClockConfig+0x284>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b94      	ldr	r3, [pc, #592]	@ (8004584 <HAL_RCC_ClockConfig+0x284>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e1c1      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d010      	beq.n	8004372 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	4b8c      	ldr	r3, [pc, #560]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800435c:	429a      	cmp	r2, r3
 800435e:	d908      	bls.n	8004372 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004360:	4b89      	ldr	r3, [pc, #548]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4986      	ldr	r1, [pc, #536]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 800436e:	4313      	orrs	r3, r2
 8004370:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	4b81      	ldr	r3, [pc, #516]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800438c:	429a      	cmp	r2, r3
 800438e:	d909      	bls.n	80043a4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004390:	4b7d      	ldr	r3, [pc, #500]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	497a      	ldr	r1, [pc, #488]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4b74      	ldr	r3, [pc, #464]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043bc:	429a      	cmp	r2, r3
 80043be:	d908      	bls.n	80043d2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b71      	ldr	r3, [pc, #452]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	496e      	ldr	r1, [pc, #440]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	4b69      	ldr	r3, [pc, #420]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d908      	bls.n	8004400 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80043ee:	4b66      	ldr	r3, [pc, #408]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 020f 	bic.w	r2, r3, #15
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4963      	ldr	r1, [pc, #396]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80d2 	beq.w	80045b2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d143      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441a:	4b5b      	ldr	r3, [pc, #364]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 800441c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d110      	bne.n	800444a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004428:	4b57      	ldr	r3, [pc, #348]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 800442a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442e:	4a56      	ldr	r2, [pc, #344]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004430:	f043 0304 	orr.w	r3, r3, #4
 8004434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004438:	4b53      	ldr	r3, [pc, #332]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800444a:	f7fd fc6f 	bl	8001d2c <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004450:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <HAL_RCC_ClockConfig+0x28c>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00f      	beq.n	800447c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800445e:	f7fd fc65 	bl	8001d2c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e12b      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004470:	4b46      	ldr	r3, [pc, #280]	@ (800458c <HAL_RCC_ClockConfig+0x28c>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004482:	4b41      	ldr	r3, [pc, #260]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004488:	4a3f      	ldr	r2, [pc, #252]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 800448a:	f023 0304 	bic.w	r3, r3, #4
 800448e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004492:	4b3d      	ldr	r3, [pc, #244]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d121      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e112      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044aa:	4b37      	ldr	r3, [pc, #220]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d115      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e106      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80044c2:	4b31      	ldr	r3, [pc, #196]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0fa      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0f2      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80044e2:	4b29      	ldr	r3, [pc, #164]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4926      	ldr	r1, [pc, #152]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80044f4:	f7fd fc1a 	bl	8001d2c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d112      	bne.n	8004528 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004502:	e00a      	b.n	800451a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004504:	f7fd fc12 	bl	8001d2c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0d6      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800451a:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d1ee      	bne.n	8004504 <HAL_RCC_ClockConfig+0x204>
 8004526:	e044      	b.n	80045b2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d112      	bne.n	8004556 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004532:	f7fd fbfb 	bl	8001d2c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0bf      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004548:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 030c 	and.w	r3, r3, #12
 8004550:	2b08      	cmp	r3, #8
 8004552:	d1ee      	bne.n	8004532 <HAL_RCC_ClockConfig+0x232>
 8004554:	e02d      	b.n	80045b2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d123      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800455e:	e00a      	b.n	8004576 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fd fbe4 	bl	8001d2c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0a8      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004576:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <HAL_RCC_ClockConfig+0x288>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ee      	bne.n	8004560 <HAL_RCC_ClockConfig+0x260>
 8004582:	e016      	b.n	80045b2 <HAL_RCC_ClockConfig+0x2b2>
 8004584:	40022000 	.word	0x40022000
 8004588:	46020c00 	.word	0x46020c00
 800458c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004590:	f7fd fbcc 	bl	8001d2c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e090      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a6:	4b4a      	ldr	r3, [pc, #296]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d1ee      	bne.n	8004590 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	4b43      	ldr	r3, [pc, #268]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d208      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045ce:	4b40      	ldr	r3, [pc, #256]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 020f 	bic.w	r2, r3, #15
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	493d      	ldr	r1, [pc, #244]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e0:	4b3c      	ldr	r3, [pc, #240]	@ (80046d4 <HAL_RCC_ClockConfig+0x3d4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d210      	bcs.n	8004610 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b39      	ldr	r3, [pc, #228]	@ (80046d4 <HAL_RCC_ClockConfig+0x3d4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 020f 	bic.w	r2, r3, #15
 80045f6:	4937      	ldr	r1, [pc, #220]	@ (80046d4 <HAL_RCC_ClockConfig+0x3d4>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b35      	ldr	r3, [pc, #212]	@ (80046d4 <HAL_RCC_ClockConfig+0x3d4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e05b      	b.n	80046c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004628:	429a      	cmp	r2, r3
 800462a:	d208      	bcs.n	800463e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800462c:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4925      	ldr	r1, [pc, #148]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d012      	beq.n	8004670 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004658:	429a      	cmp	r2, r3
 800465a:	d209      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800465c:	4b1c      	ldr	r3, [pc, #112]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	4919      	ldr	r1, [pc, #100]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	4b13      	ldr	r3, [pc, #76]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004688:	429a      	cmp	r2, r3
 800468a:	d208      	bcs.n	800469e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800468c:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	490d      	ldr	r1, [pc, #52]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800469e:	f000 f821 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80046a2:	4602      	mov	r2, r0
 80046a4:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <HAL_RCC_ClockConfig+0x3d0>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	490a      	ldr	r1, [pc, #40]	@ (80046d8 <HAL_RCC_ClockConfig+0x3d8>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
 80046b4:	4a09      	ldr	r2, [pc, #36]	@ (80046dc <HAL_RCC_ClockConfig+0x3dc>)
 80046b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <HAL_RCC_ClockConfig+0x3e0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd faab 	bl	8001c18 <HAL_InitTick>
 80046c2:	4603      	mov	r3, r0
 80046c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	46020c00 	.word	0x46020c00
 80046d4:	40022000 	.word	0x40022000
 80046d8:	0800a3b8 	.word	0x0800a3b8
 80046dc:	20000000 	.word	0x20000000
 80046e0:	20000004 	.word	0x20000004

080046e4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b08b      	sub	sp, #44	@ 0x2c
 80046e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f2:	4b78      	ldr	r3, [pc, #480]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046fc:	4b75      	ldr	r3, [pc, #468]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x34>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d121      	bne.n	8004756 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d11e      	bne.n	8004756 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004718:	4b6e      	ldr	r3, [pc, #440]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004724:	4b6b      	ldr	r3, [pc, #428]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800472a:	0b1b      	lsrs	r3, r3, #12
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
 8004732:	e005      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004734:	4b67      	ldr	r3, [pc, #412]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	0f1b      	lsrs	r3, r3, #28
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004740:	4a65      	ldr	r2, [pc, #404]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d110      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004754:	e00d      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004756:	4b5f      	ldr	r3, [pc, #380]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b04      	cmp	r3, #4
 8004760:	d102      	bne.n	8004768 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004762:	4b5e      	ldr	r3, [pc, #376]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	e004      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b08      	cmp	r3, #8
 800476c:	d101      	bne.n	8004772 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800476e:	4b5b      	ldr	r3, [pc, #364]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004770:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	f040 80a5 	bne.w	80048c4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800477a:	4b56      	ldr	r3, [pc, #344]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004784:	4b53      	ldr	r3, [pc, #332]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	3301      	adds	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004792:	4b50      	ldr	r3, [pc, #320]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800479e:	4b4d      	ldr	r3, [pc, #308]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	08db      	lsrs	r3, r3, #3
 80047a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d003      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d022      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x128>
 80047c6:	e043      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80048e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b3e      	ldr	r3, [pc, #248]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80047ee:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80048e4 <HAL_RCC_GetSysClockFreq+0x200>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800480a:	e046      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80048e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b2d      	ldr	r3, [pc, #180]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800482e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004832:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80048e4 <HAL_RCC_GetSysClockFreq+0x200>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800483e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484e:	e024      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004868:	4b1a      	ldr	r3, [pc, #104]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800486a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004878:	ed97 6a01 	vldr	s12, [r7, #4]
 800487c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80048e4 <HAL_RCC_GetSysClockFreq+0x200>
 8004880:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004884:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004898:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800489a:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800489c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489e:	0e1b      	lsrs	r3, r3, #24
 80048a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048a4:	3301      	adds	r3, #1
 80048a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048be:	ee17 3a90 	vmov	r3, s15
 80048c2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80048c4:	6a3b      	ldr	r3, [r7, #32]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	372c      	adds	r7, #44	@ 0x2c
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	46020c00 	.word	0x46020c00
 80048d8:	0800a3d0 	.word	0x0800a3d0
 80048dc:	00f42400 	.word	0x00f42400
 80048e0:	4b742400 	.word	0x4b742400
 80048e4:	46000000 	.word	0x46000000

080048e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048ec:	f7ff fefa 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b07      	ldr	r3, [pc, #28]	@ (8004910 <HAL_RCC_GetHCLKFreq+0x28>)
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	4906      	ldr	r1, [pc, #24]	@ (8004914 <HAL_RCC_GetHCLKFreq+0x2c>)
 80048fc:	5ccb      	ldrb	r3, [r1, r3]
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	4a05      	ldr	r2, [pc, #20]	@ (8004918 <HAL_RCC_GetHCLKFreq+0x30>)
 8004904:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004906:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <HAL_RCC_GetHCLKFreq+0x30>)
 8004908:	681b      	ldr	r3, [r3, #0]
}
 800490a:	4618      	mov	r0, r3
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	46020c00 	.word	0x46020c00
 8004914:	0800a3b8 	.word	0x0800a3b8
 8004918:	20000000 	.word	0x20000000

0800491c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004920:	f7ff ffe2 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4903      	ldr	r1, [pc, #12]	@ (8004940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	46020c00 	.word	0x46020c00
 8004940:	0800a3c8 	.word	0x0800a3c8

08004944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004948:	f7ff ffce 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b05      	ldr	r3, [pc, #20]	@ (8004964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4903      	ldr	r1, [pc, #12]	@ (8004968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	46020c00 	.word	0x46020c00
 8004968:	0800a3c8 	.word	0x0800a3c8

0800496c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004970:	f7ff ffba 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b05      	ldr	r3, [pc, #20]	@ (800498c <HAL_RCC_GetPCLK3Freq+0x20>)
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4903      	ldr	r1, [pc, #12]	@ (8004990 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	46020c00 	.word	0x46020c00
 8004990:	0800a3c8 	.word	0x0800a3c8

08004994 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800499c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049aa:	f7fe fd8f 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 80049ae:	6178      	str	r0, [r7, #20]
 80049b0:	e019      	b.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	4b39      	ldr	r3, [pc, #228]	@ (8004a98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b8:	4a37      	ldr	r2, [pc, #220]	@ (8004a98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80049c2:	4b35      	ldr	r3, [pc, #212]	@ (8004a98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049d0:	f7fe fd7c 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 80049d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049d6:	4b30      	ldr	r3, [pc, #192]	@ (8004a98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004a98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049ec:	d003      	beq.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f4:	d109      	bne.n	8004a0a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049fc:	d202      	bcs.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80049fe:	2301      	movs	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004a02:	e033      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004a04:	2300      	movs	r3, #0
 8004a06:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004a08:	e030      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a10:	d208      	bcs.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a18:	d102      	bne.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	e025      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e035      	b.n	8004a90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a2a:	d90f      	bls.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a38:	d902      	bls.n	8004a40 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	e015      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004a40:	2301      	movs	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	e012      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	e00f      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a52:	d109      	bne.n	8004a68 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a5a:	d102      	bne.n	8004a62 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e004      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004a62:	2302      	movs	r3, #2
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e001      	b.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004a68:	2301      	movs	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f023 020f 	bic.w	r2, r3, #15
 8004a74:	4909      	ldr	r1, [pc, #36]	@ (8004a9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d001      	beq.n	8004a8e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	46020c00 	.word	0x46020c00
 8004a9c:	40022000 	.word	0x40022000

08004aa0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b0ba      	sub	sp, #232	@ 0xe8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 0401 	and.w	r4, r2, #1
 8004ac4:	2500      	movs	r5, #0
 8004ac6:	ea54 0305 	orrs.w	r3, r4, r5
 8004aca:	d00b      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004acc:	4bcb      	ldr	r3, [pc, #812]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ad2:	f023 0103 	bic.w	r1, r3, #3
 8004ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004adc:	4ac7      	ldr	r2, [pc, #796]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f002 0802 	and.w	r8, r2, #2
 8004af0:	f04f 0900 	mov.w	r9, #0
 8004af4:	ea58 0309 	orrs.w	r3, r8, r9
 8004af8:	d00b      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004afa:	4bc0      	ldr	r3, [pc, #768]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b00:	f023 010c 	bic.w	r1, r3, #12
 8004b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0a:	4abc      	ldr	r2, [pc, #752]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f002 0a04 	and.w	sl, r2, #4
 8004b1e:	f04f 0b00 	mov.w	fp, #0
 8004b22:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b26:	d00b      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004b28:	4bb4      	ldr	r3, [pc, #720]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b2e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b38:	4ab0      	ldr	r2, [pc, #704]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f002 0308 	and.w	r3, r2, #8
 8004b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b50:	2300      	movs	r3, #0
 8004b52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004b60:	4ba6      	ldr	r3, [pc, #664]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b70:	4aa2      	ldr	r2, [pc, #648]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f002 0310 	and.w	r3, r2, #16
 8004b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004b98:	4b98      	ldr	r3, [pc, #608]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba8:	4a94      	ldr	r2, [pc, #592]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f002 0320 	and.w	r3, r2, #32
 8004bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004bc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004bd0:	4b8a      	ldr	r3, [pc, #552]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bd6:	f023 0107 	bic.w	r1, r3, #7
 8004bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004be0:	4a86      	ldr	r2, [pc, #536]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be2:	430b      	orrs	r3, r1
 8004be4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004c08:	4b7c      	ldr	r3, [pc, #496]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c0e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c18:	4a78      	ldr	r2, [pc, #480]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004c40:	4b6e      	ldr	r3, [pc, #440]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c50:	4a6a      	ldr	r2, [pc, #424]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c52:	430b      	orrs	r3, r1
 8004c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004c64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004c6e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004c78:	4b60      	ldr	r3, [pc, #384]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c88:	4a5c      	ldr	r2, [pc, #368]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ca6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004caa:	460b      	mov	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004cb0:	4b52      	ldr	r3, [pc, #328]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc0:	4a4e      	ldr	r2, [pc, #312]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004cd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cde:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ce8:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cee:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cf8:	4a40      	ldr	r2, [pc, #256]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d10:	2300      	movs	r3, #0
 8004d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004d20:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d26:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d30:	4a32      	ldr	r2, [pc, #200]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d00c      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004d58:	4b28      	ldr	r3, [pc, #160]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6a:	4a24      	ldr	r2, [pc, #144]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d80:	2300      	movs	r3, #0
 8004d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	d04f      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d96:	2b80      	cmp	r3, #128	@ 0x80
 8004d98:	d02d      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004d9a:	2b80      	cmp	r3, #128	@ 0x80
 8004d9c:	d827      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d9e:	2b60      	cmp	r3, #96	@ 0x60
 8004da0:	d02e      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004da2:	2b60      	cmp	r3, #96	@ 0x60
 8004da4:	d823      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004da6:	2b40      	cmp	r3, #64	@ 0x40
 8004da8:	d006      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d81f      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d011      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004db6:	e01a      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004db8:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dc4:	e01d      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dca:	3308      	adds	r3, #8
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f002 fa17 	bl	8007200 <RCCEx_PLL2_Config>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dd8:	e013      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dde:	332c      	adds	r3, #44	@ 0x2c
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 faa5 	bl	8007330 <RCCEx_PLL3_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dec:	e009      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004df4:	e005      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004df6:	bf00      	nop
 8004df8:	e003      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004dfa:	bf00      	nop
 8004dfc:	46020c00 	.word	0x46020c00
        break;
 8004e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10d      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004e0a:	4bb6      	ldr	r3, [pc, #728]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e10:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	4ab1      	ldr	r2, [pc, #708]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e24:	e003      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e2a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d053      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e56:	d033      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5c:	d82c      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e62:	d02f      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e68:	d826      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e74:	d820      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7e:	d011      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004e80:	e01a      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e82:	4b98      	ldr	r3, [pc, #608]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	4a97      	ldr	r2, [pc, #604]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e8c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e8e:	e01a      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e94:	3308      	adds	r3, #8
 8004e96:	4618      	mov	r0, r3
 8004e98:	f002 f9b2 	bl	8007200 <RCCEx_PLL2_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ea2:	e010      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea8:	332c      	adds	r3, #44	@ 0x2c
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f002 fa40 	bl	8007330 <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004eb6:	e006      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004ec0:	bf00      	nop
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10d      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004ece:	4b85      	ldr	r3, [pc, #532]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ed4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee0:	4a80      	ldr	r2, [pc, #512]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ee8:	e003      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eee:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004efe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f00:	2300      	movs	r3, #0
 8004f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d046      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f1a:	d028      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f1c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004f20:	d821      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f26:	d022      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f2c:	d81b      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f32:	d01c      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f38:	d815      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f44:	d80f      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d011      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4e:	d00e      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f50:	e009      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f56:	3308      	adds	r3, #8
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 f951 	bl	8007200 <RCCEx_PLL2_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f64:	e004      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f6c:	e000      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004f78:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f7e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f8a:	4a56      	ldr	r2, [pc, #344]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004fa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004faa:	2300      	movs	r3, #0
 8004fac:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d03f      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004fb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d81e      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	0800500b 	.word	0x0800500b
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004fef 	.word	0x08004fef
 8004fd8:	0800500b 	.word	0x0800500b
 8004fdc:	0800500b 	.word	0x0800500b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fe0:	4b40      	ldr	r3, [pc, #256]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fea:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004fec:	e00e      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff2:	332c      	adds	r3, #44	@ 0x2c
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 f99b 	bl	8007330 <RCCEx_PLL3_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005000:	e004      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800500a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800500c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005014:	4b33      	ldr	r3, [pc, #204]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005016:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800501a:	f023 0107 	bic.w	r1, r3, #7
 800501e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	4a2f      	ldr	r2, [pc, #188]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005028:	430b      	orrs	r3, r1
 800502a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800502e:	e003      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005034:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005044:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005046:	2300      	movs	r3, #0
 8005048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800504a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d04d      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005054:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800505c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005060:	d028      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005062:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005066:	d821      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800506c:	d024      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800506e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005072:	d81b      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005078:	d00e      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800507a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800507e:	d815      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005088:	d110      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800508a:	4b16      	ldr	r3, [pc, #88]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	4a15      	ldr	r2, [pc, #84]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005096:	e012      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800509c:	332c      	adds	r3, #44	@ 0x2c
 800509e:	4618      	mov	r0, r3
 80050a0:	f002 f946 	bl	8007330 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050aa:	e008      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050b2:	e004      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80050b4:	bf00      	nop
 80050b6:	e002      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80050b8:	bf00      	nop
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80050bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d110      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80050c6:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80050d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050d8:	4a02      	ldr	r2, [pc, #8]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050e0:	e006      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80050e2:	bf00      	nop
 80050e4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050ec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80050fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80050fe:	2300      	movs	r3, #0
 8005100:	657b      	str	r3, [r7, #84]	@ 0x54
 8005102:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	f000 80b5 	beq.w	8005278 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005114:	4b9d      	ldr	r3, [pc, #628]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d113      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005122:	4b9a      	ldr	r3, [pc, #616]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005128:	4a98      	ldr	r2, [pc, #608]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005132:	4b96      	ldr	r3, [pc, #600]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800514a:	4b91      	ldr	r3, [pc, #580]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	4a90      	ldr	r2, [pc, #576]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005156:	f7fc fde9 	bl	8001d2c <HAL_GetTick>
 800515a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800515e:	e00b      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005160:	f7fc fde4 	bl	8001d2c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d903      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005176:	e005      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005178:	4b85      	ldr	r3, [pc, #532]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ed      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005184:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d165      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800518c:	4b7f      	ldr	r3, [pc, #508]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800518e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d023      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80051a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051b2:	4b76      	ldr	r3, [pc, #472]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051c0:	4b72      	ldr	r3, [pc, #456]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051c6:	4a71      	ldr	r2, [pc, #452]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051d0:	4b6e      	ldr	r3, [pc, #440]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051d6:	4a6d      	ldr	r2, [pc, #436]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051e0:	4a6a      	ldr	r2, [pc, #424]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d019      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fc fd99 	bl	8001d2c <HAL_GetTick>
 80051fa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051fe:	e00d      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005200:	f7fc fd94 	bl	8001d2c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800521a:	e006      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521c:	4b5b      	ldr	r3, [pc, #364]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800521e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ea      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800522a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005232:	4b56      	ldr	r3, [pc, #344]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005238:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800523c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005240:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005244:	4a51      	ldr	r2, [pc, #324]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005246:	430b      	orrs	r3, r1
 8005248:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800524e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005252:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005256:	e003      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800525c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005260:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d107      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005268:	4b48      	ldr	r3, [pc, #288]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800526e:	4a47      	ldr	r2, [pc, #284]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005284:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005286:	2300      	movs	r3, #0
 8005288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800528a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d042      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800529c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80052a0:	d022      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80052a2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80052a6:	d81b      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80052a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052ac:	d011      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80052ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052b2:	d815      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d019      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80052b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052bc:	d110      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c2:	3308      	adds	r3, #8
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 ff9b 	bl	8007200 <RCCEx_PLL2_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052d0:	e00d      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d2:	4b2e      	ldr	r3, [pc, #184]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	4a2d      	ldr	r2, [pc, #180]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052dc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80052de:	e006      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80052ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80052f6:	4b25      	ldr	r3, [pc, #148]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052fc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005308:	4a20      	ldr	r2, [pc, #128]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005316:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800531a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005326:	643b      	str	r3, [r7, #64]	@ 0x40
 8005328:	2300      	movs	r3, #0
 800532a:	647b      	str	r3, [r7, #68]	@ 0x44
 800532c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	d032      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800533a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005342:	d00b      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005348:	d804      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005352:	d007      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800535a:	e004      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800535c:	bf00      	nop
 800535e:	e002      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005364:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005366:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d112      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800536e:	4b07      	ldr	r3, [pc, #28]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005374:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800537c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005380:	4a02      	ldr	r2, [pc, #8]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005382:	430b      	orrs	r3, r1
 8005384:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005388:	e008      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800538a:	bf00      	nop
 800538c:	46020c00 	.word	0x46020c00
 8005390:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005398:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800539c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80053a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053aa:	2300      	movs	r3, #0
 80053ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d00c      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80053b8:	4b98      	ldr	r3, [pc, #608]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053be:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80053c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053ca:	4a94      	ldr	r2, [pc, #592]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053cc:	430b      	orrs	r3, r1
 80053ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80053d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80053de:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e0:	2300      	movs	r3, #0
 80053e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80053e8:	460b      	mov	r3, r1
 80053ea:	4313      	orrs	r3, r2
 80053ec:	d019      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80053ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053fa:	d105      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053fc:	4b87      	ldr	r3, [pc, #540]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	4a86      	ldr	r2, [pc, #536]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005406:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005408:	4b84      	ldr	r3, [pc, #528]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800540a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800540e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800541a:	4a80      	ldr	r2, [pc, #512]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800541c:	430b      	orrs	r3, r1
 800541e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005430:	2300      	movs	r3, #0
 8005432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005434:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d00c      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800543e:	4b77      	ldr	r3, [pc, #476]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005444:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005450:	4972      	ldr	r1, [pc, #456]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
 800546a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800546e:	460b      	mov	r3, r1
 8005470:	4313      	orrs	r3, r2
 8005472:	d00c      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005474:	4b69      	ldr	r3, [pc, #420]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800547a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800547e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005482:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005486:	4965      	ldr	r1, [pc, #404]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800548e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800549a:	61bb      	str	r3, [r7, #24]
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80054a4:	460b      	mov	r3, r1
 80054a6:	4313      	orrs	r3, r2
 80054a8:	d00c      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80054aa:	4b5c      	ldr	r3, [pc, #368]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054b0:	f023 0218 	bic.w	r2, r3, #24
 80054b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054bc:	4957      	ldr	r1, [pc, #348]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054da:	460b      	mov	r3, r1
 80054dc:	4313      	orrs	r3, r2
 80054de:	d032      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80054e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ec:	d105      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ee:	4b4b      	ldr	r3, [pc, #300]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f2:	4a4a      	ldr	r2, [pc, #296]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054f8:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80054fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005502:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005506:	d108      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005508:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800550c:	3308      	adds	r3, #8
 800550e:	4618      	mov	r0, r3
 8005510:	f001 fe76 	bl	8007200 <RCCEx_PLL2_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800551a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005522:	4b3e      	ldr	r3, [pc, #248]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005524:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005528:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800552c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005534:	4939      	ldr	r1, [pc, #228]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800553c:	e003      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005542:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800555c:	460b      	mov	r3, r1
 800555e:	4313      	orrs	r3, r2
 8005560:	d03a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800556a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800556e:	d00e      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005574:	d815      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d017      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800557a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800557e:	d110      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005580:	4b26      	ldr	r3, [pc, #152]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	4a25      	ldr	r2, [pc, #148]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800558a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800558c:	e00e      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005592:	3308      	adds	r3, #8
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fe33 	bl	8007200 <RCCEx_PLL2_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80055aa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10d      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80055b4:	4b19      	ldr	r3, [pc, #100]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055c6:	4915      	ldr	r1, [pc, #84]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80055ce:	e003      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80055d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	2300      	movs	r3, #0
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d00c      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80055f4:	4b09      	ldr	r3, [pc, #36]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055fa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80055fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005606:	4905      	ldr	r1, [pc, #20]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800560e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005612:	4618      	mov	r0, r3
 8005614:	37e8      	adds	r7, #232	@ 0xe8
 8005616:	46bd      	mov	sp, r7
 8005618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561c:	46020c00 	.word	0x46020c00

08005620 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005620:	b480      	push	{r7}
 8005622:	b089      	sub	sp, #36	@ 0x24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005628:	4ba6      	ldr	r3, [pc, #664]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800562a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005630:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005632:	4ba4      	ldr	r3, [pc, #656]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800563c:	4ba1      	ldr	r3, [pc, #644]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800563e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	3301      	adds	r3, #1
 8005648:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800564a:	4b9e      	ldr	r3, [pc, #632]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800564c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005656:	4b9b      	ldr	r3, [pc, #620]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	08db      	lsrs	r3, r3, #3
 800565c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d062      	beq.n	800573e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b03      	cmp	r3, #3
 800567c:	f200 8081 	bhi.w	8005782 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d024      	beq.n	80056d0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d17a      	bne.n	8005782 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800569a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569e:	4b89      	ldr	r3, [pc, #548]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ce:	e08f      	b.n	80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056d0:	4b7c      	ldr	r3, [pc, #496]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80056dc:	4b79      	ldr	r3, [pc, #484]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	0f1b      	lsrs	r3, r3, #28
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	e006      	b.n	80056f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80056e8:	4b76      	ldr	r3, [pc, #472]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	0f1b      	lsrs	r3, r3, #28
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	4a76      	ldr	r2, [pc, #472]	@ (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80056f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fc:	ee07 3a90 	vmov	s15, r3
 8005700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005720:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005730:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005738:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800573c:	e058      	b.n	80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005748:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800574c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005750:	4b5c      	ldr	r3, [pc, #368]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005760:	ed97 6a02 	vldr	s12, [r7, #8]
 8005764:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005768:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800576c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005774:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005780:	e036      	b.n	80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005782:	4b50      	ldr	r3, [pc, #320]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800578e:	4b4d      	ldr	r3, [pc, #308]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0f1b      	lsrs	r3, r3, #28
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	e006      	b.n	80057a8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800579a:	4b4a      	ldr	r3, [pc, #296]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800579c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	0f1b      	lsrs	r3, r3, #28
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	4a49      	ldr	r2, [pc, #292]	@ (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80057aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80057f0:	4b34      	ldr	r3, [pc, #208]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057fc:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	0a5b      	lsrs	r3, r3, #9
 8005802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800580e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005812:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005816:	edd7 6a07 	vldr	s13, [r7, #28]
 800581a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005822:	ee17 2a90 	vmov	r2, s15
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	e002      	b.n	8005832 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005832:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d017      	beq.n	800586e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800583e:	4b21      	ldr	r3, [pc, #132]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	0c1b      	lsrs	r3, r3, #16
 8005844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005850:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005854:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005858:	edd7 6a07 	vldr	s13, [r7, #28]
 800585c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005864:	ee17 2a90 	vmov	r2, s15
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	605a      	str	r2, [r3, #4]
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005874:	4b13      	ldr	r3, [pc, #76]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005878:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d017      	beq.n	80058b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005880:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005884:	0e1b      	lsrs	r3, r3, #24
 8005886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005892:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005896:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800589a:	edd7 6a07 	vldr	s13, [r7, #28]
 800589e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a6:	ee17 2a90 	vmov	r2, s15
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80058ae:	e002      	b.n	80058b6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	609a      	str	r2, [r3, #8]
}
 80058b6:	bf00      	nop
 80058b8:	3724      	adds	r7, #36	@ 0x24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	46020c00 	.word	0x46020c00
 80058c8:	4b742400 	.word	0x4b742400
 80058cc:	46000000 	.word	0x46000000
 80058d0:	0800a3d0 	.word	0x0800a3d0

080058d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	@ 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80058dc:	4ba6      	ldr	r3, [pc, #664]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80058e6:	4ba4      	ldr	r3, [pc, #656]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80058f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	3301      	adds	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80058fe:	4b9e      	ldr	r3, [pc, #632]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800590a:	4b9b      	ldr	r3, [pc, #620]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	08db      	lsrs	r3, r3, #3
 8005910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d062      	beq.n	80059f2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b03      	cmp	r3, #3
 8005930:	f200 8081 	bhi.w	8005a36 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d024      	beq.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d17a      	bne.n	8005a36 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b89      	ldr	r3, [pc, #548]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005962:	ed97 6a02 	vldr	s12, [r7, #8]
 8005966:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005982:	e08f      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005984:	4b7c      	ldr	r3, [pc, #496]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005990:	4b79      	ldr	r3, [pc, #484]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	0f1b      	lsrs	r3, r3, #28
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	e006      	b.n	80059aa <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800599c:	4b76      	ldr	r3, [pc, #472]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800599e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	0f1b      	lsrs	r3, r3, #28
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	4a76      	ldr	r2, [pc, #472]	@ (8005b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80059ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80059d4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80059e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059f0:	e058      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a04:	4b5c      	ldr	r3, [pc, #368]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a14:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a18:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a34:	e036      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005a36:	4b50      	ldr	r3, [pc, #320]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005a42:	4b4d      	ldr	r3, [pc, #308]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	0f1b      	lsrs	r3, r3, #28
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	e006      	b.n	8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a54:	041b      	lsls	r3, r3, #16
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	4a49      	ldr	r2, [pc, #292]	@ (8005b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	ee07 3a90 	vmov	s15, r3
 8005a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005aa4:	4b34      	ldr	r3, [pc, #208]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d017      	beq.n	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ab0:	4b31      	ldr	r3, [pc, #196]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	0a5b      	lsrs	r3, r3, #9
 8005ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad6:	ee17 2a90 	vmov	r2, s15
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e002      	b.n	8005ae6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005ae6:	4b24      	ldr	r3, [pc, #144]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d017      	beq.n	8005b22 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005af2:	4b21      	ldr	r3, [pc, #132]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005b04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b08:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b18:	ee17 2a90 	vmov	r2, s15
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005b28:	4b13      	ldr	r3, [pc, #76]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d017      	beq.n	8005b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b34:	4b10      	ldr	r3, [pc, #64]	@ (8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b38:	0e1b      	lsrs	r3, r3, #24
 8005b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b5a:	ee17 2a90 	vmov	r2, s15
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b62:	e002      	b.n	8005b6a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	609a      	str	r2, [r3, #8]
}
 8005b6a:	bf00      	nop
 8005b6c:	3724      	adds	r7, #36	@ 0x24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	46020c00 	.word	0x46020c00
 8005b7c:	4b742400 	.word	0x4b742400
 8005b80:	46000000 	.word	0x46000000
 8005b84:	0800a3d0 	.word	0x0800a3d0

08005b88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b089      	sub	sp, #36	@ 0x24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005b90:	4ba6      	ldr	r3, [pc, #664]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b98:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005b9a:	4ba4      	ldr	r3, [pc, #656]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	3301      	adds	r3, #1
 8005bb0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005bbe:	4b9b      	ldr	r3, [pc, #620]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc2:	08db      	lsrs	r3, r3, #3
 8005bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d062      	beq.n	8005ca6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	f200 8081 	bhi.w	8005cea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d024      	beq.n	8005c38 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d17a      	bne.n	8005cea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b89      	ldr	r3, [pc, #548]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005c36:	e08f      	b.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c38:	4b7c      	ldr	r3, [pc, #496]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005c44:	4b79      	ldr	r3, [pc, #484]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	0f1b      	lsrs	r3, r3, #28
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	e006      	b.n	8005c5e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005c50:	4b76      	ldr	r3, [pc, #472]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	0f1b      	lsrs	r3, r3, #28
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	4a76      	ldr	r2, [pc, #472]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c84:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c88:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ca4:	e058      	b.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	ee07 3a90 	vmov	s15, r3
 8005cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ccc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ce8:	e036      	b.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005cea:	4b50      	ldr	r3, [pc, #320]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0f1b      	lsrs	r3, r3, #28
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	e006      	b.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005d02:	4b4a      	ldr	r3, [pc, #296]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d08:	041b      	lsls	r3, r3, #16
 8005d0a:	0f1b      	lsrs	r3, r3, #28
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	4a49      	ldr	r2, [pc, #292]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d3a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d56:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005d58:	4b34      	ldr	r3, [pc, #208]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d017      	beq.n	8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d64:	4b31      	ldr	r3, [pc, #196]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	0a5b      	lsrs	r3, r3, #9
 8005d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8a:	ee17 2a90 	vmov	r2, s15
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005d9a:	4b24      	ldr	r3, [pc, #144]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d017      	beq.n	8005dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005da6:	4b21      	ldr	r3, [pc, #132]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dcc:	ee17 2a90 	vmov	r2, s15
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	e002      	b.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005ddc:	4b13      	ldr	r3, [pc, #76]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d017      	beq.n	8005e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005de8:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dec:	0e1b      	lsrs	r3, r3, #24
 8005dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 2a90 	vmov	r2, s15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e16:	e002      	b.n	8005e1e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
}
 8005e1e:	bf00      	nop
 8005e20:	3724      	adds	r7, #36	@ 0x24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	46020c00 	.word	0x46020c00
 8005e30:	4b742400 	.word	0x4b742400
 8005e34:	46000000 	.word	0x46000000
 8005e38:	0800a3d0 	.word	0x0800a3d0

08005e3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	@ 0x38
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	d145      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e52:	4ba7      	ldr	r3, [pc, #668]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005e5e:	4ba4      	ldr	r3, [pc, #656]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d108      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e72:	d104      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005e74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e7a:	f001 b9b3 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005e7e:	4b9c      	ldr	r3, [pc, #624]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e8c:	d114      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e94:	d110      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e96:	4b96      	ldr	r3, [pc, #600]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ea4:	d103      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005ea6:	23fa      	movs	r3, #250	@ 0xfa
 8005ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005eaa:	f001 b99b 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005eae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005eb4:	f001 b996 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005eb8:	4b8d      	ldr	r3, [pc, #564]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ecc:	d103      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005ece:	4b89      	ldr	r3, [pc, #548]	@ (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed2:	f001 b987 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eda:	f001 b983 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	d151      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005eea:	4b81      	ldr	r3, [pc, #516]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005eec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ef0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005ef4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef8:	2b80      	cmp	r3, #128	@ 0x80
 8005efa:	d035      	beq.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	2b80      	cmp	r3, #128	@ 0x80
 8005f00:	d841      	bhi.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	2b60      	cmp	r3, #96	@ 0x60
 8005f06:	d02a      	beq.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	2b60      	cmp	r3, #96	@ 0x60
 8005f0c:	d83b      	bhi.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	d009      	beq.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d835      	bhi.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d012      	beq.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005f26:	e02e      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fb77 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f36:	f001 b955 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fcc8 	bl	80058d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f48:	f001 b94c 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f4c:	f107 030c 	add.w	r3, r7, #12
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fe19 	bl	8005b88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f5a:	f001 b943 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f5e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f64:	f001 b93e 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f68:	4b61      	ldr	r3, [pc, #388]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f74:	d103      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005f76:	4b60      	ldr	r3, [pc, #384]	@ (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f7a:	f001 b933 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f82:	f001 b92f 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f8a:	f001 b92b 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f92:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005f96:	430b      	orrs	r3, r1
 8005f98:	d158      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005f9a:	4b55      	ldr	r3, [pc, #340]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fa4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fac:	d03b      	beq.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb4:	d846      	bhi.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fbc:	d02e      	beq.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc4:	d83e      	bhi.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fcc:	d00b      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fd4:	d836      	bhi.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe2:	d012      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005fe4:	e02e      	b.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fb18 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ff4:	f001 b8f6 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ff8:	f107 0318 	add.w	r3, r7, #24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fc69 	bl	80058d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006006:	f001 b8ed 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fdba 	bl	8005b88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006018:	f001 b8e4 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800601c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006022:	f001 b8df 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006026:	4b32      	ldr	r3, [pc, #200]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006032:	d103      	bne.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006034:	4b30      	ldr	r3, [pc, #192]	@ (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006038:	f001 b8d4 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006040:	f001 b8d0 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006048:	f001 b8cc 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800604c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006050:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006054:	430b      	orrs	r3, r1
 8006056:	d126      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006058:	4b25      	ldr	r3, [pc, #148]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800605a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800605e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006062:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006064:	4b22      	ldr	r3, [pc, #136]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800606c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006070:	d106      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d103      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006078:	4b1f      	ldr	r3, [pc, #124]	@ (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
 800607c:	f001 b8b2 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006080:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800608c:	d107      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006094:	d103      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006096:	4b19      	ldr	r3, [pc, #100]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006098:	637b      	str	r3, [r7, #52]	@ 0x34
 800609a:	f001 b8a3 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a2:	f001 b89f 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80060a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060aa:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80060ae:	430b      	orrs	r3, r1
 80060b0:	d16e      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060b2:	4b0f      	ldr	r3, [pc, #60]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060b8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80060bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060c4:	d03d      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060cc:	d85c      	bhi.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060d4:	d014      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060dc:	d854      	bhi.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01f      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060ea:	d012      	beq.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80060ec:	e04c      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80060ee:	bf00      	nop
 80060f0:	46020c00 	.word	0x46020c00
 80060f4:	0007a120 	.word	0x0007a120
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fa8b 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800610e:	f001 b869 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006112:	f107 0318 	add.w	r3, r7, #24
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fbdc 	bl	80058d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006120:	f001 b860 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006124:	4ba7      	ldr	r3, [pc, #668]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006130:	d103      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006132:	4ba5      	ldr	r3, [pc, #660]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006134:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006136:	f001 b855 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800613e:	f001 b851 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006142:	4ba0      	ldr	r3, [pc, #640]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b20      	cmp	r3, #32
 800614c:	d118      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800614e:	4b9d      	ldr	r3, [pc, #628]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800615a:	4b9a      	ldr	r3, [pc, #616]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	0e1b      	lsrs	r3, r3, #24
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	e006      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006166:	4b97      	ldr	r3, [pc, #604]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	0e1b      	lsrs	r3, r3, #24
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	4a95      	ldr	r2, [pc, #596]	@ (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800617c:	f001 b832 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006184:	f001 b82e 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800618c:	f001 b82a 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006194:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006198:	430b      	orrs	r3, r1
 800619a:	d17f      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800619c:	4b89      	ldr	r3, [pc, #548]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800619e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d165      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80061ae:	4b85      	ldr	r3, [pc, #532]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061b4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80061c0:	d034      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80061c8:	d853      	bhi.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061d0:	d00b      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061d8:	d84b      	bhi.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d016      	beq.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061e6:	d009      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80061e8:	e043      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fa16 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061f8:	f000 bff4 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061fc:	f107 0318 	add.w	r3, r7, #24
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fb67 	bl	80058d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800620a:	f000 bfeb 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800620e:	4b6d      	ldr	r3, [pc, #436]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621a:	d103      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800621c:	4b6a      	ldr	r3, [pc, #424]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800621e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006220:	f000 bfe0 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006228:	f000 bfdc 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800622c:	4b65      	ldr	r3, [pc, #404]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b20      	cmp	r3, #32
 8006236:	d118      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006238:	4b62      	ldr	r3, [pc, #392]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006244:	4b5f      	ldr	r3, [pc, #380]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	0e1b      	lsrs	r3, r3, #24
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	e006      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006250:	4b5c      	ldr	r3, [pc, #368]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	0e1b      	lsrs	r3, r3, #24
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	4a5b      	ldr	r2, [pc, #364]	@ (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006264:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006266:	f000 bfbd 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800626e:	f000 bfb9 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006276:	f000 bfb5 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006280:	d108      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff f9ca 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006290:	f000 bfa8 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	637b      	str	r3, [r7, #52]	@ 0x34
 8006298:	f000 bfa4 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800629c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a0:	1e51      	subs	r1, r2, #1
 80062a2:	430b      	orrs	r3, r1
 80062a4:	d136      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062a6:	4b47      	ldr	r3, [pc, #284]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fe fb44 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 80062bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80062be:	f000 bf91 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d104      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062c8:	f7fe fa0c 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80062cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80062ce:	f000 bf89 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80062d2:	4b3c      	ldr	r3, [pc, #240]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062de:	d106      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d103      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80062e6:	4b3a      	ldr	r3, [pc, #232]	@ (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ea:	f000 bf7b 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80062ee:	4b35      	ldr	r3, [pc, #212]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d107      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d104      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006306:	637b      	str	r3, [r7, #52]	@ 0x34
 8006308:	f000 bf6c 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006310:	f000 bf68 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006318:	1e91      	subs	r1, r2, #2
 800631a:	430b      	orrs	r3, r1
 800631c:	d136      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800631e:	4b29      	ldr	r3, [pc, #164]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006330:	f7fe faf4 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8006334:	6378      	str	r0, [r7, #52]	@ 0x34
 8006336:	f000 bf55 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	2b04      	cmp	r3, #4
 800633e:	d104      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006340:	f7fe f9d0 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006344:	6378      	str	r0, [r7, #52]	@ 0x34
 8006346:	f000 bf4d 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800634a:	4b1e      	ldr	r3, [pc, #120]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006356:	d106      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635a:	2b08      	cmp	r3, #8
 800635c:	d103      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800635e:	4b1c      	ldr	r3, [pc, #112]	@ (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
 8006362:	f000 bf3f 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006366:	4b17      	ldr	r3, [pc, #92]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b02      	cmp	r3, #2
 8006372:	d107      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	2b0c      	cmp	r3, #12
 8006378:	d104      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800637a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800637e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006380:	f000 bf30 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
 8006388:	f000 bf2c 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800638c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006390:	1f11      	subs	r1, r2, #4
 8006392:	430b      	orrs	r3, r1
 8006394:	d13f      	bne.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800639c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063a8:	f7fe fab8 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 80063ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80063ae:	f000 bf19 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d10d      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063b8:	f7fe f994 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80063bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80063be:	f000 bf11 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80063c2:	bf00      	nop
 80063c4:	46020c00 	.word	0x46020c00
 80063c8:	02dc6c00 	.word	0x02dc6c00
 80063cc:	0800a3d0 	.word	0x0800a3d0
 80063d0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80063d4:	4ba6      	ldr	r3, [pc, #664]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d106      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d103      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80063e8:	4ba2      	ldr	r3, [pc, #648]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ec:	f000 befa 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80063f0:	4b9f      	ldr	r3, [pc, #636]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d107      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	2b30      	cmp	r3, #48	@ 0x30
 8006402:	d104      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34
 800640a:	f000 beeb 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
 8006412:	f000 bee7 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641a:	f1a2 0108 	sub.w	r1, r2, #8
 800641e:	430b      	orrs	r3, r1
 8006420:	d136      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006422:	4b93      	ldr	r3, [pc, #588]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006428:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800642c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006434:	f7fe fa72 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8006438:	6378      	str	r0, [r7, #52]	@ 0x34
 800643a:	f000 bed3 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	2b40      	cmp	r3, #64	@ 0x40
 8006442:	d104      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006444:	f7fe f94e 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006448:	6378      	str	r0, [r7, #52]	@ 0x34
 800644a:	f000 becb 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800644e:	4b88      	ldr	r3, [pc, #544]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645a:	d106      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	2b80      	cmp	r3, #128	@ 0x80
 8006460:	d103      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006462:	4b84      	ldr	r3, [pc, #528]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006464:	637b      	str	r3, [r7, #52]	@ 0x34
 8006466:	f000 bebd 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800646a:	4b81      	ldr	r3, [pc, #516]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800646c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d107      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647a:	2bc0      	cmp	r3, #192	@ 0xc0
 800647c:	d104      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006482:	637b      	str	r3, [r7, #52]	@ 0x34
 8006484:	f000 beae 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	637b      	str	r3, [r7, #52]	@ 0x34
 800648c:	f000 beaa 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006494:	f1a2 0110 	sub.w	r1, r2, #16
 8006498:	430b      	orrs	r3, r1
 800649a:	d139      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800649c:	4b74      	ldr	r3, [pc, #464]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800649e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064ae:	f7fe fa35 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 80064b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80064b4:	f000 be96 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80064b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064be:	d104      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064c0:	f7fe f910 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80064c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80064c6:	f000 be8d 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80064ca:	4b69      	ldr	r3, [pc, #420]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d6:	d107      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064de:	d103      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80064e0:	4b64      	ldr	r3, [pc, #400]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e4:	f000 be7e 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80064e8:	4b61      	ldr	r3, [pc, #388]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d108      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80064f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064fc:	d104      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006502:	637b      	str	r3, [r7, #52]	@ 0x34
 8006504:	f000 be6e 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	637b      	str	r3, [r7, #52]	@ 0x34
 800650c:	f000 be6a 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006514:	f1a2 0120 	sub.w	r1, r2, #32
 8006518:	430b      	orrs	r3, r1
 800651a:	d158      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800651c:	4b54      	ldr	r3, [pc, #336]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800651e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800652e:	f7fe fa1d 	bl	800496c <HAL_RCC_GetPCLK3Freq>
 8006532:	6378      	str	r0, [r7, #52]	@ 0x34
 8006534:	f000 be56 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	2b01      	cmp	r3, #1
 800653c:	d104      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800653e:	f7fe f8d1 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006542:	6378      	str	r0, [r7, #52]	@ 0x34
 8006544:	f000 be4e 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006548:	4b49      	ldr	r3, [pc, #292]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	2b02      	cmp	r3, #2
 800655a:	d103      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800655c:	4b45      	ldr	r3, [pc, #276]	@ (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800655e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006560:	f000 be40 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006564:	4b42      	ldr	r3, [pc, #264]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	2b03      	cmp	r3, #3
 8006576:	d104      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8006578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657c:	637b      	str	r3, [r7, #52]	@ 0x34
 800657e:	f000 be31 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006582:	4b3b      	ldr	r3, [pc, #236]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b20      	cmp	r3, #32
 800658c:	d11b      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	2b04      	cmp	r3, #4
 8006592:	d118      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006594:	4b36      	ldr	r3, [pc, #216]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80065a0:	4b33      	ldr	r3, [pc, #204]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	0e1b      	lsrs	r3, r3, #24
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	e006      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80065ac:	4b30      	ldr	r3, [pc, #192]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c2:	f000 be0f 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ca:	f000 be0b 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80065ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80065d6:	430b      	orrs	r3, r1
 80065d8:	d172      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80065da:	4b25      	ldr	r3, [pc, #148]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80065e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ec:	d104      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065ee:	f7fe f879 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80065f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80065f4:	f000 bdf6 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80065f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fe:	d108      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006600:	f107 0318 	add.w	r3, r7, #24
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff f965 	bl	80058d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
 800660e:	f000 bde9 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006618:	f7fe f966 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 800661c:	6378      	str	r0, [r7, #52]	@ 0x34
 800661e:	f000 bde1 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006628:	d128      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800662a:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b20      	cmp	r3, #32
 8006634:	d118      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006636:	4b0e      	ldr	r3, [pc, #56]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006642:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	e006      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800664e:	4b08      	ldr	r3, [pc, #32]	@ (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	0e1b      	lsrs	r3, r3, #24
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	4a06      	ldr	r2, [pc, #24]	@ (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800665e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
 8006664:	f000 bdbe 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
 800666c:	f000 bdba 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006670:	46020c00 	.word	0x46020c00
 8006674:	00f42400 	.word	0x00f42400
 8006678:	0800a3d0 	.word	0x0800a3d0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800667c:	4baf      	ldr	r3, [pc, #700]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006688:	d107      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006690:	d103      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8006692:	4bab      	ldr	r3, [pc, #684]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006694:	637b      	str	r3, [r7, #52]	@ 0x34
 8006696:	f000 bda5 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800669a:	4ba8      	ldr	r3, [pc, #672]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a6:	d107      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ae:	d103      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80066b0:	4ba3      	ldr	r3, [pc, #652]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80066b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b4:	f000 bd96 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80066bc:	f000 bd92 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80066c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80066c8:	430b      	orrs	r3, r1
 80066ca:	d158      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80066cc:	4b9b      	ldr	r3, [pc, #620]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d84b      	bhi.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80066de:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	0800670b 	.word	0x0800670b
 80066f0:	08006727 	.word	0x08006727
 80066f4:	08006731 	.word	0x08006731
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe ff8f 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006706:	f000 bd6d 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800670a:	f107 030c 	add.w	r3, r7, #12
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fa3a 	bl	8005b88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006718:	f000 bd64 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800671c:	f7fe f8e4 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8006720:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006722:	f000 bd5f 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006726:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800672c:	f000 bd5a 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006730:	4b82      	ldr	r3, [pc, #520]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b20      	cmp	r3, #32
 800673a:	d118      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800673c:	4b7f      	ldr	r3, [pc, #508]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006748:	4b7c      	ldr	r3, [pc, #496]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	0e1b      	lsrs	r3, r3, #24
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	e006      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006754:	4b79      	ldr	r3, [pc, #484]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800675a:	041b      	lsls	r3, r3, #16
 800675c:	0e1b      	lsrs	r3, r3, #24
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	4a78      	ldr	r2, [pc, #480]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800676a:	f000 bd3b 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006772:	f000 bd37 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800677a:	f000 bd33 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800677e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006782:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006786:	430b      	orrs	r3, r1
 8006788:	d167      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800678a:	4b6c      	ldr	r3, [pc, #432]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800678c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006790:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006794:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800679c:	d036      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067a4:	d855      	bhi.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067ac:	d029      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067b4:	d84d      	bhi.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067bc:	d013      	beq.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c4:	d845      	bhi.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d015      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d2:	d13e      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe ff21 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067e2:	f000 bcff 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff f9cc 	bl	8005b88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f4:	f000 bcf6 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80067f8:	f7fe f876 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 80067fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067fe:	f000 bcf1 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006802:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006808:	f000 bcec 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800680c:	4b4b      	ldr	r3, [pc, #300]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b20      	cmp	r3, #32
 8006816:	d118      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006818:	4b48      	ldr	r3, [pc, #288]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006824:	4b45      	ldr	r3, [pc, #276]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	0e1b      	lsrs	r3, r3, #24
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	e006      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006830:	4b42      	ldr	r3, [pc, #264]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	0e1b      	lsrs	r3, r3, #24
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	4a41      	ldr	r2, [pc, #260]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006844:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006846:	f000 bccd 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800684e:	f000 bcc9 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006856:	f000 bcc5 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800685a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006862:	430b      	orrs	r3, r1
 8006864:	d14c      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006866:	4b35      	ldr	r3, [pc, #212]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800686c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006870:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006878:	f7fe f850 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 800687c:	6378      	str	r0, [r7, #52]	@ 0x34
 800687e:	f000 bcb1 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006888:	d104      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800688a:	f7fd ff2b 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 800688e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006890:	f000 bca8 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006894:	4b29      	ldr	r3, [pc, #164]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800689c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a0:	d107      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068a8:	d103      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80068aa:	4b25      	ldr	r3, [pc, #148]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80068ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ae:	f000 bc99 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80068b2:	4b22      	ldr	r3, [pc, #136]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d11c      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068c4:	d118      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068c6:	4b1d      	ldr	r3, [pc, #116]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80068d2:	4b1a      	ldr	r3, [pc, #104]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	0e1b      	lsrs	r3, r3, #24
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80068de:	4b17      	ldr	r3, [pc, #92]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	0e1b      	lsrs	r3, r3, #24
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80068ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f4:	f000 bc76 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fc:	f000 bc72 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006908:	430b      	orrs	r3, r1
 800690a:	d153      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800690c:	4b0b      	ldr	r3, [pc, #44]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800690e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006912:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006916:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fd fffd 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8006922:	6378      	str	r0, [r7, #52]	@ 0x34
 8006924:	f000 bc5e 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692e:	d10b      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006930:	f7fd fed8 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006934:	6378      	str	r0, [r7, #52]	@ 0x34
 8006936:	f000 bc55 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800693a:	bf00      	nop
 800693c:	46020c00 	.word	0x46020c00
 8006940:	00f42400 	.word	0x00f42400
 8006944:	0800a3d0 	.word	0x0800a3d0
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006948:	4ba1      	ldr	r3, [pc, #644]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006954:	d107      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800695c:	d103      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800695e:	4b9d      	ldr	r3, [pc, #628]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006960:	637b      	str	r3, [r7, #52]	@ 0x34
 8006962:	f000 bc3f 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006966:	4b9a      	ldr	r3, [pc, #616]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b20      	cmp	r3, #32
 8006970:	d11c      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006978:	d118      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800697a:	4b95      	ldr	r3, [pc, #596]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006986:	4b92      	ldr	r3, [pc, #584]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	0e1b      	lsrs	r3, r3, #24
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	e006      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006992:	4b8f      	ldr	r3, [pc, #572]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	0e1b      	lsrs	r3, r3, #24
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	4a8d      	ldr	r2, [pc, #564]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80069a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a8:	f000 bc1c 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b0:	f000 bc18 	b.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80069b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b8:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80069bc:	430b      	orrs	r3, r1
 80069be:	d151      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80069c0:	4b83      	ldr	r3, [pc, #524]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d0:	d024      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d6:	d842      	bhi.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	2b80      	cmp	r3, #128	@ 0x80
 80069dc:	d00d      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	2b80      	cmp	r3, #128	@ 0x80
 80069e2:	d83c      	bhi.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	2b40      	cmp	r3, #64	@ 0x40
 80069ee:	d011      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80069f0:	e035      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80069f2:	f7fd ffbb 	bl	800496c <HAL_RCC_GetPCLK3Freq>
 80069f6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069f8:	e3f4      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069fa:	4b75      	ldr	r3, [pc, #468]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a06:	d102      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8006a08:	4b72      	ldr	r3, [pc, #456]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a0c:	e3ea      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a12:	e3e7      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006a14:	f7fd fe66 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006a18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006a1a:	e3e3      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d117      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a28:	4b69      	ldr	r3, [pc, #420]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8006a34:	4b66      	ldr	r3, [pc, #408]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	0e1b      	lsrs	r3, r3, #24
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	e006      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006a40:	4b63      	ldr	r3, [pc, #396]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a46:	041b      	lsls	r3, r3, #16
 8006a48:	0e1b      	lsrs	r3, r3, #24
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	4a62      	ldr	r2, [pc, #392]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a56:	e3c5      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a5c:	e3c2      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a62:	e3bf      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a68:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	d147      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006a70:	4b57      	ldr	r3, [pc, #348]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006a7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a82:	f7fd ff4b 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8006a86:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a88:	e3ac      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a90:	d103      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fd fe27 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006a96:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a98:	e3a4      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa6:	d106      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aae:	d102      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8006ab0:	4b48      	ldr	r3, [pc, #288]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab4:	e396      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006ab6:	4b46      	ldr	r3, [pc, #280]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d11b      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006ac8:	d117      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aca:	4b41      	ldr	r3, [pc, #260]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	0e1b      	lsrs	r3, r3, #24
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	e006      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8006ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ae8:	041b      	lsls	r3, r3, #16
 8006aea:	0e1b      	lsrs	r3, r3, #24
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	4a39      	ldr	r2, [pc, #228]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af8:	e374      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afe:	e371      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b04:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	d16a      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006b0c:	4b30      	ldr	r3, [pc, #192]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b16:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d120      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d117      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b2a:	4b29      	ldr	r3, [pc, #164]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8006b36:	4b26      	ldr	r3, [pc, #152]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	0e1b      	lsrs	r3, r3, #24
 8006b3c:	f003 030f 	and.w	r3, r3, #15
 8006b40:	e006      	b.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006b42:	4b23      	ldr	r3, [pc, #140]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b48:	041b      	lsls	r3, r3, #16
 8006b4a:	0e1b      	lsrs	r3, r3, #24
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	4a21      	ldr	r2, [pc, #132]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b58:	e344      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5e:	e341      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006b60:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b6e:	d112      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b76:	d10e      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b78:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b86:	d102      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8006b88:	23fa      	movs	r3, #250	@ 0xfa
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b8c:	e32a      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b8e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b94:	e326      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006b96:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba2:	d106      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006baa:	d102      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006bac:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb0:	e318      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006bb2:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d10d      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bc6:	d109      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8006bc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bce:	e309      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006bd0:	46020c00 	.word	0x46020c00
 8006bd4:	00f42400 	.word	0x00f42400
 8006bd8:	0800a3d0 	.word	0x0800a3d0
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	e300      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be6:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006bea:	430b      	orrs	r3, r1
 8006bec:	d164      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006bee:	4ba2      	ldr	r3, [pc, #648]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d120      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c00:	4b9d      	ldr	r3, [pc, #628]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d117      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c0c:	4b9a      	ldr	r3, [pc, #616]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8006c18:	4b97      	ldr	r3, [pc, #604]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	e006      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006c24:	4b94      	ldr	r3, [pc, #592]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	0e1b      	lsrs	r3, r3, #24
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a92      	ldr	r2, [pc, #584]	@ (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3a:	e2d3      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c40:	e2d0      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006c42:	4b8d      	ldr	r3, [pc, #564]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c50:	d112      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c58:	d10e      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c5a:	4b87      	ldr	r3, [pc, #540]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c68:	d102      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8006c6a:	23fa      	movs	r3, #250	@ 0xfa
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c6e:	e2b9      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c70:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c76:	e2b5      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006c78:	4b7f      	ldr	r3, [pc, #508]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c84:	d106      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c8c:	d102      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8006c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c92:	e2a7      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006c94:	4b78      	ldr	r3, [pc, #480]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d107      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca8:	d103      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8006caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	e298      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb6:	e295      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cbc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	d147      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cca:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006cce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006cd6:	f7fd fe21 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8006cda:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cdc:	e282      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006cde:	4b66      	ldr	r3, [pc, #408]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ce8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cec:	d112      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cf4:	d10e      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cf6:	4b60      	ldr	r3, [pc, #384]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d04:	d102      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8006d06:	23fa      	movs	r3, #250	@ 0xfa
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d0a:	e26b      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d12:	e267      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006d14:	4b58      	ldr	r3, [pc, #352]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d20:	d106      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d28:	d102      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8006d2a:	4b55      	ldr	r3, [pc, #340]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2e:	e259      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006d30:	4b51      	ldr	r3, [pc, #324]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d107      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006d44:	d103      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4c:	e24a      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d52:	e247      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d58:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	d12d      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006d60:	4b45      	ldr	r3, [pc, #276]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d66:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006d6a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006d6c:	4b42      	ldr	r3, [pc, #264]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d78:	d105      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8006d80:	4b3f      	ldr	r3, [pc, #252]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d84:	e22e      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d8c:	d107      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fe fc44 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9c:	e222      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006da4:	d107      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da6:	f107 0318 	add.w	r3, r7, #24
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fd92 	bl	80058d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db4:	e216      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dba:	e213      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	d15d      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006dd2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dda:	d028      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006de2:	d845      	bhi.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dea:	d013      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006df2:	d83d      	bhi.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e00:	d004      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006e02:	e035      	b.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7fd fd9e 	bl	8004944 <HAL_RCC_GetPCLK2Freq>
 8006e08:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e0a:	e1eb      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e0c:	f7fd fc6a 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006e10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e12:	e1e7      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e14:	4b18      	ldr	r3, [pc, #96]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e20:	d102      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006e22:	4b17      	ldr	r3, [pc, #92]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e26:	e1dd      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e2c:	e1da      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e2e:	4b12      	ldr	r3, [pc, #72]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d117      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8006e46:	4b0c      	ldr	r3, [pc, #48]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	0e1b      	lsrs	r3, r3, #24
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	e006      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8006e52:	4b09      	ldr	r3, [pc, #36]	@ (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e58:	041b      	lsls	r3, r3, #16
 8006e5a:	0e1b      	lsrs	r3, r3, #24
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	4a06      	ldr	r2, [pc, #24]	@ (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e68:	e1bc      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e6e:	e1b9      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e74:	e1b6      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006e76:	bf00      	nop
 8006e78:	46020c00 	.word	0x46020c00
 8006e7c:	0800a3d0 	.word	0x0800a3d0
 8006e80:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e88:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	d156      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e90:	4ba5      	ldr	r3, [pc, #660]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ea2:	d028      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006eaa:	d845      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb2:	d013      	beq.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eba:	d83d      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec8:	d004      	beq.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8006eca:	e035      	b.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fd fd26 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 8006ed0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ed2:	e187      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ed4:	f7fd fc06 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006eda:	e183      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006edc:	4b92      	ldr	r3, [pc, #584]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee8:	d102      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8006eea:	4b90      	ldr	r3, [pc, #576]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eee:	e179      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef4:	e176      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ef6:	4b8c      	ldr	r3, [pc, #560]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d117      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f02:	4b89      	ldr	r3, [pc, #548]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8006f0e:	4b86      	ldr	r3, [pc, #536]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0e1b      	lsrs	r3, r3, #24
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	e006      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8006f1a:	4b83      	ldr	r3, [pc, #524]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	0e1b      	lsrs	r3, r3, #24
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	4a81      	ldr	r2, [pc, #516]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f30:	e158      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f36:	e155      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f3c:	e152      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f42:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006f46:	430b      	orrs	r3, r1
 8006f48:	d177      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006f4a:	4b77      	ldr	r3, [pc, #476]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f50:	f003 0318 	and.w	r3, r3, #24
 8006f54:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	2b18      	cmp	r3, #24
 8006f5a:	d86b      	bhi.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8006f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	08007035 	.word	0x08007035
 8006f6c:	08007035 	.word	0x08007035
 8006f70:	08007035 	.word	0x08007035
 8006f74:	08007035 	.word	0x08007035
 8006f78:	08007035 	.word	0x08007035
 8006f7c:	08007035 	.word	0x08007035
 8006f80:	08007035 	.word	0x08007035
 8006f84:	08006fd1 	.word	0x08006fd1
 8006f88:	08007035 	.word	0x08007035
 8006f8c:	08007035 	.word	0x08007035
 8006f90:	08007035 	.word	0x08007035
 8006f94:	08007035 	.word	0x08007035
 8006f98:	08007035 	.word	0x08007035
 8006f9c:	08007035 	.word	0x08007035
 8006fa0:	08007035 	.word	0x08007035
 8006fa4:	08006fd9 	.word	0x08006fd9
 8006fa8:	08007035 	.word	0x08007035
 8006fac:	08007035 	.word	0x08007035
 8006fb0:	08007035 	.word	0x08007035
 8006fb4:	08007035 	.word	0x08007035
 8006fb8:	08007035 	.word	0x08007035
 8006fbc:	08007035 	.word	0x08007035
 8006fc0:	08007035 	.word	0x08007035
 8006fc4:	08006ff3 	.word	0x08006ff3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006fc8:	f7fd fcd0 	bl	800496c <HAL_RCC_GetPCLK3Freq>
 8006fcc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fce:	e109      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006fd0:	f7fd fb88 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006fd4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fd6:	e105      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fd8:	4b53      	ldr	r3, [pc, #332]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe4:	d102      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8006fe6:	4b51      	ldr	r3, [pc, #324]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fea:	e0fb      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff0:	e0f8      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d117      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800700a:	4b47      	ldr	r3, [pc, #284]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0e1b      	lsrs	r3, r3, #24
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	e006      	b.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007016:	4b44      	ldr	r3, [pc, #272]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	0e1b      	lsrs	r3, r3, #24
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	4a42      	ldr	r2, [pc, #264]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800702c:	e0da      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007032:	e0d7      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007038:	e0d4      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800703a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007042:	430b      	orrs	r3, r1
 8007044:	d155      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007046:	4b38      	ldr	r3, [pc, #224]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007048:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800704c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007050:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007058:	d013      	beq.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007060:	d844      	bhi.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007068:	d013      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800706a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007070:	d83c      	bhi.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	2b00      	cmp	r3, #0
 8007076:	d014      	beq.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800707e:	d014      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007080:	e034      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007082:	f107 0318 	add.w	r3, r7, #24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fc24 	bl	80058d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007090:	e0a8      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fac2 	bl	8005620 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800709c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070a0:	e0a0      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80070a2:	f7fd fb1f 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80070a6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070a8:	e09c      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d117      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 80070c2:	4b19      	ldr	r3, [pc, #100]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	0e1b      	lsrs	r3, r3, #24
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	e006      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80070ce:	4b16      	ldr	r3, [pc, #88]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070d4:	041b      	lsls	r3, r3, #16
 80070d6:	0e1b      	lsrs	r3, r3, #24
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	4a14      	ldr	r2, [pc, #80]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80070de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070e4:	e07e      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070ea:	e07b      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070f0:	e078      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80070f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80070fa:	430b      	orrs	r3, r1
 80070fc:	d138      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80070fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007108:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800710a:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800710c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b02      	cmp	r3, #2
 8007116:	d10d      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800711e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
 8007124:	e05e      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007126:	bf00      	nop
 8007128:	46020c00 	.word	0x46020c00
 800712c:	00f42400 	.word	0x00f42400
 8007130:	0800a3d0 	.word	0x0800a3d0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007134:	4b2e      	ldr	r3, [pc, #184]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800713a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800713e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007142:	d112      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714a:	d10e      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800714c:	4b28      	ldr	r3, [pc, #160]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800714e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715a:	d102      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800715c:	23fa      	movs	r3, #250	@ 0xfa
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007160:	e040      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007162:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007168:	e03c      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
 800716e:	e039      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007174:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007178:	430b      	orrs	r3, r1
 800717a:	d131      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800717c:	4b1c      	ldr	r3, [pc, #112]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800717e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007182:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007186:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007188:	4b19      	ldr	r3, [pc, #100]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007194:	d105      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800719c:	4b15      	ldr	r3, [pc, #84]	@ (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800719e:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a0:	e020      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80071a2:	4b13      	ldr	r3, [pc, #76]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ae:	d106      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b6:	d102      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 80071b8:	4b0f      	ldr	r3, [pc, #60]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80071ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80071bc:	e012      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80071be:	4b0c      	ldr	r3, [pc, #48]	@ (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ca:	d106      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80071d4:	4b09      	ldr	r3, [pc, #36]	@ (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d8:	e004      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80071e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3738      	adds	r7, #56	@ 0x38
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	46020c00 	.word	0x46020c00
 80071f4:	02dc6c00 	.word	0x02dc6c00
 80071f8:	016e3600 	.word	0x016e3600
 80071fc:	00f42400 	.word	0x00f42400

08007200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007208:	4b47      	ldr	r3, [pc, #284]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a46      	ldr	r2, [pc, #280]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 800720e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007212:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007214:	f7fa fd8a 	bl	8001d2c <HAL_GetTick>
 8007218:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800721a:	e008      	b.n	800722e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800721c:	f7fa fd86 	bl	8001d2c <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e077      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800722e:	4b3e      	ldr	r3, [pc, #248]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800723a:	4b3b      	ldr	r3, [pc, #236]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007242:	f023 0303 	bic.w	r3, r3, #3
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6811      	ldr	r1, [r2, #0]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6852      	ldr	r2, [r2, #4]
 800724e:	3a01      	subs	r2, #1
 8007250:	0212      	lsls	r2, r2, #8
 8007252:	430a      	orrs	r2, r1
 8007254:	4934      	ldr	r1, [pc, #208]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 8007256:	4313      	orrs	r3, r2
 8007258:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800725a:	4b33      	ldr	r3, [pc, #204]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 800725c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800725e:	4b33      	ldr	r3, [pc, #204]	@ (800732c <RCCEx_PLL2_Config+0x12c>)
 8007260:	4013      	ands	r3, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6892      	ldr	r2, [r2, #8]
 8007266:	3a01      	subs	r2, #1
 8007268:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68d2      	ldr	r2, [r2, #12]
 8007270:	3a01      	subs	r2, #1
 8007272:	0252      	lsls	r2, r2, #9
 8007274:	b292      	uxth	r2, r2
 8007276:	4311      	orrs	r1, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6912      	ldr	r2, [r2, #16]
 800727c:	3a01      	subs	r2, #1
 800727e:	0412      	lsls	r2, r2, #16
 8007280:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007284:	4311      	orrs	r1, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6952      	ldr	r2, [r2, #20]
 800728a:	3a01      	subs	r2, #1
 800728c:	0612      	lsls	r2, r2, #24
 800728e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007292:	430a      	orrs	r2, r1
 8007294:	4924      	ldr	r1, [pc, #144]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 8007296:	4313      	orrs	r3, r2
 8007298:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800729a:	4b23      	ldr	r3, [pc, #140]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	f023 020c 	bic.w	r2, r3, #12
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	4920      	ldr	r1, [pc, #128]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80072ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	491c      	ldr	r1, [pc, #112]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80072ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	4a1a      	ldr	r2, [pc, #104]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072c0:	f023 0310 	bic.w	r3, r3, #16
 80072c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072c6:	4b18      	ldr	r3, [pc, #96]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	69d2      	ldr	r2, [r2, #28]
 80072d6:	00d2      	lsls	r2, r2, #3
 80072d8:	4913      	ldr	r1, [pc, #76]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80072de:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a11      	ldr	r2, [pc, #68]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072e4:	f043 0310 	orr.w	r3, r3, #16
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80072ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 80072f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072f4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072f6:	f7fa fd19 	bl	8001d2c <HAL_GetTick>
 80072fa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072fc:	e008      	b.n	8007310 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072fe:	f7fa fd15 	bl	8001d2c <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <RCCEx_PLL2_Config+0x128>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0

}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	46020c00 	.word	0x46020c00
 800732c:	80800000 	.word	0x80800000

08007330 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007338:	4b47      	ldr	r3, [pc, #284]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a46      	ldr	r2, [pc, #280]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 800733e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007342:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007344:	f7fa fcf2 	bl	8001d2c <HAL_GetTick>
 8007348:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800734a:	e008      	b.n	800735e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800734c:	f7fa fcee 	bl	8001d2c <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e077      	b.n	800744e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800735e:	4b3e      	ldr	r3, [pc, #248]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800736a:	4b3b      	ldr	r3, [pc, #236]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007372:	f023 0303 	bic.w	r3, r3, #3
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	6811      	ldr	r1, [r2, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6852      	ldr	r2, [r2, #4]
 800737e:	3a01      	subs	r2, #1
 8007380:	0212      	lsls	r2, r2, #8
 8007382:	430a      	orrs	r2, r1
 8007384:	4934      	ldr	r1, [pc, #208]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 8007386:	4313      	orrs	r3, r2
 8007388:	630b      	str	r3, [r1, #48]	@ 0x30
 800738a:	4b33      	ldr	r3, [pc, #204]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 800738c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800738e:	4b33      	ldr	r3, [pc, #204]	@ (800745c <RCCEx_PLL3_Config+0x12c>)
 8007390:	4013      	ands	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6892      	ldr	r2, [r2, #8]
 8007396:	3a01      	subs	r2, #1
 8007398:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68d2      	ldr	r2, [r2, #12]
 80073a0:	3a01      	subs	r2, #1
 80073a2:	0252      	lsls	r2, r2, #9
 80073a4:	b292      	uxth	r2, r2
 80073a6:	4311      	orrs	r1, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6912      	ldr	r2, [r2, #16]
 80073ac:	3a01      	subs	r2, #1
 80073ae:	0412      	lsls	r2, r2, #16
 80073b0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80073b4:	4311      	orrs	r1, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6952      	ldr	r2, [r2, #20]
 80073ba:	3a01      	subs	r2, #1
 80073bc:	0612      	lsls	r2, r2, #24
 80073be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80073c2:	430a      	orrs	r2, r1
 80073c4:	4924      	ldr	r1, [pc, #144]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80073ca:	4b23      	ldr	r3, [pc, #140]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ce:	f023 020c 	bic.w	r2, r3, #12
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	4920      	ldr	r1, [pc, #128]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80073dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	491c      	ldr	r1, [pc, #112]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80073ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073f0:	f023 0310 	bic.w	r3, r3, #16
 80073f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073f6:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 80073f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	69d2      	ldr	r2, [r2, #28]
 8007406:	00d2      	lsls	r2, r2, #3
 8007408:	4913      	ldr	r1, [pc, #76]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 800740a:	4313      	orrs	r3, r2
 800740c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800740e:	4b12      	ldr	r3, [pc, #72]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007412:	4a11      	ldr	r2, [pc, #68]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 8007414:	f043 0310 	orr.w	r3, r3, #16
 8007418:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800741a:	4b0f      	ldr	r3, [pc, #60]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a0e      	ldr	r2, [pc, #56]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 8007420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007424:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007426:	f7fa fc81 	bl	8001d2c <HAL_GetTick>
 800742a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800742c:	e008      	b.n	8007440 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800742e:	f7fa fc7d 	bl	8001d2c <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d901      	bls.n	8007440 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e006      	b.n	800744e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007440:	4b05      	ldr	r3, [pc, #20]	@ (8007458 <RCCEx_PLL3_Config+0x128>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0f0      	beq.n	800742e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	46020c00 	.word	0x46020c00
 800745c:	80800000 	.word	0x80800000

08007460 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e0fb      	b.n	800766a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a7f      	ldr	r2, [pc, #508]	@ (8007674 <HAL_SPI_Init+0x214>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d004      	beq.n	8007486 <HAL_SPI_Init+0x26>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a7d      	ldr	r2, [pc, #500]	@ (8007678 <HAL_SPI_Init+0x218>)
 8007482:	4293      	cmp	r3, r2
 8007484:	e000      	b.n	8007488 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007486:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a78      	ldr	r2, [pc, #480]	@ (8007674 <HAL_SPI_Init+0x214>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_SPI_Init+0x42>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a76      	ldr	r2, [pc, #472]	@ (8007678 <HAL_SPI_Init+0x218>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d105      	bne.n	80074ae <HAL_SPI_Init+0x4e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b0f      	cmp	r3, #15
 80074a8:	d901      	bls.n	80074ae <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e0dd      	b.n	800766a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 fc36 	bl	8008d20 <SPI_GetPacketSize>
 80074b4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007674 <HAL_SPI_Init+0x214>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d004      	beq.n	80074ca <HAL_SPI_Init+0x6a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a6c      	ldr	r2, [pc, #432]	@ (8007678 <HAL_SPI_Init+0x218>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d102      	bne.n	80074d0 <HAL_SPI_Init+0x70>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d816      	bhi.n	80074fe <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074d4:	4a69      	ldr	r2, [pc, #420]	@ (800767c <HAL_SPI_Init+0x21c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00e      	beq.n	80074f8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a68      	ldr	r2, [pc, #416]	@ (8007680 <HAL_SPI_Init+0x220>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d009      	beq.n	80074f8 <HAL_SPI_Init+0x98>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a66      	ldr	r2, [pc, #408]	@ (8007684 <HAL_SPI_Init+0x224>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d004      	beq.n	80074f8 <HAL_SPI_Init+0x98>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a65      	ldr	r2, [pc, #404]	@ (8007688 <HAL_SPI_Init+0x228>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d104      	bne.n	8007502 <HAL_SPI_Init+0xa2>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d901      	bls.n	8007502 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e0b3      	b.n	800766a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7f9 feb0 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800753e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007548:	d119      	bne.n	800757e <HAL_SPI_Init+0x11e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007552:	d103      	bne.n	800755c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10c      	bne.n	800757e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800756c:	d107      	bne.n	800757e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800757c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00f      	beq.n	80075aa <HAL_SPI_Init+0x14a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	2b06      	cmp	r3, #6
 8007590:	d90b      	bls.n	80075aa <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	e007      	b.n	80075ba <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69da      	ldr	r2, [r3, #28]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c2:	431a      	orrs	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007620:	431a      	orrs	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007626:	ea42 0103 	orr.w	r1, r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	46002000 	.word	0x46002000
 8007678:	56002000 	.word	0x56002000
 800767c:	40013000 	.word	0x40013000
 8007680:	50013000 	.word	0x50013000
 8007684:	40003800 	.word	0x40003800
 8007688:	50003800 	.word	0x50003800

0800768c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af02      	add	r7, sp, #8
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	4613      	mov	r3, r2
 800769a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3320      	adds	r3, #32
 80076a2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a90      	ldr	r2, [pc, #576]	@ (80078ec <HAL_SPI_Transmit+0x260>)
 80076aa:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ac:	f7fa fb3e 	bl	8001d2c <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d001      	beq.n	80076c2 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80076be:	2302      	movs	r3, #2
 80076c0:	e1f4      	b.n	8007aac <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <HAL_SPI_Transmit+0x42>
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e1ec      	b.n	8007aac <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_SPI_Transmit+0x54>
 80076dc:	2302      	movs	r3, #2
 80076de:	e1e5      	b.n	8007aac <HAL_SPI_Transmit+0x420>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2203      	movs	r2, #3
 80076ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007738:	d108      	bne.n	800774c <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	e009      	b.n	8007760 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800775e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	0c1b      	lsrs	r3, r3, #16
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	88f9      	ldrh	r1, [r7, #6]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	430b      	orrs	r3, r1
 8007772:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10c      	bne.n	80077ac <HAL_SPI_Transmit+0x120>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800779a:	d107      	bne.n	80077ac <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b0f      	cmp	r3, #15
 80077b2:	d95b      	bls.n	800786c <HAL_SPI_Transmit+0x1e0>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a4d      	ldr	r2, [pc, #308]	@ (80078f0 <HAL_SPI_Transmit+0x264>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d04f      	beq.n	800785e <HAL_SPI_Transmit+0x1d2>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a4c      	ldr	r2, [pc, #304]	@ (80078f4 <HAL_SPI_Transmit+0x268>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d04a      	beq.n	800785e <HAL_SPI_Transmit+0x1d2>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a4a      	ldr	r2, [pc, #296]	@ (80078f8 <HAL_SPI_Transmit+0x26c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d045      	beq.n	800785e <HAL_SPI_Transmit+0x1d2>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a49      	ldr	r2, [pc, #292]	@ (80078fc <HAL_SPI_Transmit+0x270>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d147      	bne.n	800786c <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80077dc:	e03f      	b.n	800785e <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d114      	bne.n	8007816 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007814:	e023      	b.n	800785e <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007816:	f7fa fa89 	bl	8001d2c <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d803      	bhi.n	800782e <HAL_SPI_Transmit+0x1a2>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d102      	bne.n	8007834 <HAL_SPI_Transmit+0x1a8>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d114      	bne.n	800785e <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f001 f9a5 	bl	8008b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007840:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e126      	b.n	8007aac <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1b9      	bne.n	80077de <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800786a:	e0f9      	b.n	8007a60 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b07      	cmp	r3, #7
 8007872:	f240 80ee 	bls.w	8007a52 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007876:	e067      	b.n	8007948 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d13c      	bne.n	8007900 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d918      	bls.n	80078c4 <HAL_SPI_Transmit+0x238>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d014      	beq.n	80078c4 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078aa:	1d1a      	adds	r2, r3, #4
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b02      	subs	r3, #2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078c2:	e041      	b.n	8007948 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c8:	881a      	ldrh	r2, [r3, #0]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078d2:	1c9a      	adds	r2, r3, #2
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078ea:	e02d      	b.n	8007948 <HAL_SPI_Transmit+0x2bc>
 80078ec:	46002000 	.word	0x46002000
 80078f0:	40013000 	.word	0x40013000
 80078f4:	50013000 	.word	0x50013000
 80078f8:	40003800 	.word	0x40003800
 80078fc:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007900:	f7fa fa14 	bl	8001d2c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d803      	bhi.n	8007918 <HAL_SPI_Transmit+0x28c>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d102      	bne.n	800791e <HAL_SPI_Transmit+0x292>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d114      	bne.n	8007948 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f001 f930 	bl	8008b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800792a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e0b1      	b.n	8007aac <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d191      	bne.n	8007878 <HAL_SPI_Transmit+0x1ec>
 8007954:	e084      	b.n	8007a60 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b02      	cmp	r3, #2
 8007962:	d152      	bne.n	8007a0a <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b03      	cmp	r3, #3
 800796e:	d918      	bls.n	80079a2 <HAL_SPI_Transmit+0x316>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007974:	2b40      	cmp	r3, #64	@ 0x40
 8007976:	d914      	bls.n	80079a2 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007988:	1d1a      	adds	r2, r3, #4
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b04      	subs	r3, #4
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079a0:	e057      	b.n	8007a52 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d917      	bls.n	80079de <HAL_SPI_Transmit+0x352>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d013      	beq.n	80079de <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ba:	881a      	ldrh	r2, [r3, #0]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c4:	1c9a      	adds	r2, r3, #2
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b02      	subs	r3, #2
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079dc:	e039      	b.n	8007a52 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3320      	adds	r3, #32
 80079e8:	7812      	ldrb	r2, [r2, #0]
 80079ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a08:	e023      	b.n	8007a52 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a0a:	f7fa f98f 	bl	8001d2c <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d803      	bhi.n	8007a22 <HAL_SPI_Transmit+0x396>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d102      	bne.n	8007a28 <HAL_SPI_Transmit+0x39c>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d114      	bne.n	8007a52 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f001 f8ab 	bl	8008b84 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e02c      	b.n	8007aac <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f47f af7b 	bne.w	8007956 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	2108      	movs	r1, #8
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f001 f92a 	bl	8008cc4 <SPI_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d007      	beq.n	8007a86 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7c:	f043 0220 	orr.w	r2, r3, #32
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f001 f87c 	bl	8008b84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
  }
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08e      	sub	sp, #56	@ 0x38
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3320      	adds	r3, #32
 8007ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3330      	adds	r3, #48	@ 0x30
 8007ad0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3301      	adds	r3, #1
 8007adc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a90      	ldr	r2, [pc, #576]	@ (8007d24 <HAL_SPI_TransmitReceive+0x270>)
 8007ae4:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ae6:	f7fa f921 	bl	8001d2c <HAL_GetTick>
 8007aea:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007aec:	887b      	ldrh	r3, [r7, #2]
 8007aee:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8007af0:	887b      	ldrh	r3, [r7, #2]
 8007af2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d001      	beq.n	8007b04 <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
 8007b02:	e332      	b.n	800816a <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <HAL_SPI_TransmitReceive+0x62>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_SPI_TransmitReceive+0x62>
 8007b10:	887b      	ldrh	r3, [r7, #2]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e327      	b.n	800816a <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_SPI_TransmitReceive+0x74>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e320      	b.n	800816a <HAL_SPI_TransmitReceive+0x6b6>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2205      	movs	r2, #5
 8007b34:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	887a      	ldrh	r2, [r7, #2]
 8007b4a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	887a      	ldrh	r2, [r7, #2]
 8007b52:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	887a      	ldrh	r2, [r7, #2]
 8007b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	887a      	ldrh	r2, [r7, #2]
 8007b68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007b86:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a66      	ldr	r2, [pc, #408]	@ (8007d28 <HAL_SPI_TransmitReceive+0x274>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00e      	beq.n	8007bb0 <HAL_SPI_TransmitReceive+0xfc>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a65      	ldr	r2, [pc, #404]	@ (8007d2c <HAL_SPI_TransmitReceive+0x278>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d009      	beq.n	8007bb0 <HAL_SPI_TransmitReceive+0xfc>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a63      	ldr	r2, [pc, #396]	@ (8007d30 <HAL_SPI_TransmitReceive+0x27c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d004      	beq.n	8007bb0 <HAL_SPI_TransmitReceive+0xfc>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a62      	ldr	r2, [pc, #392]	@ (8007d34 <HAL_SPI_TransmitReceive+0x280>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d102      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bb4:	e001      	b.n	8007bba <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	041b      	lsls	r3, r3, #16
 8007bc4:	8879      	ldrh	r1, [r7, #2]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0201 	orr.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10c      	bne.n	8007c06 <HAL_SPI_TransmitReceive+0x152>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bf4:	d107      	bne.n	8007c06 <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	f240 80c1 	bls.w	8007d92 <HAL_SPI_TransmitReceive+0x2de>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a44      	ldr	r2, [pc, #272]	@ (8007d28 <HAL_SPI_TransmitReceive+0x274>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00f      	beq.n	8007c3a <HAL_SPI_TransmitReceive+0x186>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a43      	ldr	r2, [pc, #268]	@ (8007d2c <HAL_SPI_TransmitReceive+0x278>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00a      	beq.n	8007c3a <HAL_SPI_TransmitReceive+0x186>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a41      	ldr	r2, [pc, #260]	@ (8007d30 <HAL_SPI_TransmitReceive+0x27c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d005      	beq.n	8007c3a <HAL_SPI_TransmitReceive+0x186>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a40      	ldr	r2, [pc, #256]	@ (8007d34 <HAL_SPI_TransmitReceive+0x280>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	f040 80ac 	bne.w	8007d92 <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3c:	089b      	lsrs	r3, r3, #2
 8007c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007c40:	e09e      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d120      	bne.n	8007c92 <HAL_SPI_TransmitReceive+0x1de>
 8007c50:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01d      	beq.n	8007c92 <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007c56:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c58:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5c:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d217      	bcs.n	8007c92 <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c90:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007c9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d06f      	beq.n	8007d80 <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d118      	bne.n	8007ce0 <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cb6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007cb8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007cdc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007cde:	e04f      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007ce0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007ce2:	8bfb      	ldrh	r3, [r7, #30]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d227      	bcs.n	8007d38 <HAL_SPI_TransmitReceive+0x284>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d022      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007cfc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d02:	1d1a      	adds	r2, r3, #4
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007d20:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d22:	e02d      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x2cc>
 8007d24:	46002000 	.word	0x46002000
 8007d28:	40013000 	.word	0x40013000
 8007d2c:	50013000 	.word	0x50013000
 8007d30:	40003800 	.word	0x40003800
 8007d34:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d38:	f7f9 fff8 	bl	8001d2c <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d803      	bhi.n	8007d50 <HAL_SPI_TransmitReceive+0x29c>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d102      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x2a2>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d114      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 ff14 	bl	8008b84 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e1f4      	b.n	800816a <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f47f af5d 	bne.w	8007c42 <HAL_SPI_TransmitReceive+0x18e>
 8007d88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f47f af59 	bne.w	8007c42 <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007d90:	e1c5      	b.n	800811e <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b07      	cmp	r3, #7
 8007d98:	f240 81b9 	bls.w	800810e <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007da2:	e0c0      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d11f      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x33e>
 8007db2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01c      	beq.n	8007df2 <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007db8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007dba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dbe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d216      	bcs.n	8007df2 <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dc8:	881a      	ldrh	r2, [r3, #0]
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dd2:	1c9a      	adds	r2, r3, #2
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007df0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007dfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8092 	beq.w	8007f26 <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d118      	bne.n	8007e42 <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e14:	6a3a      	ldr	r2, [r7, #32]
 8007e16:	8812      	ldrh	r2, [r2, #0]
 8007e18:	b292      	uxth	r2, r2
 8007e1a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e20:	1c9a      	adds	r2, r3, #2
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e40:	e071      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e42:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007e44:	8bfb      	ldrh	r3, [r7, #30]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d228      	bcs.n	8007e9c <HAL_SPI_TransmitReceive+0x3e8>
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d023      	beq.n	8007e9c <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e58:	6a3a      	ldr	r2, [r7, #32]
 8007e5a:	8812      	ldrh	r2, [r2, #0]
 8007e5c:	b292      	uxth	r2, r2
 8007e5e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e64:	1c9a      	adds	r2, r3, #2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e6e:	6a3a      	ldr	r2, [r7, #32]
 8007e70:	8812      	ldrh	r2, [r2, #0]
 8007e72:	b292      	uxth	r2, r2
 8007e74:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e7a:	1c9a      	adds	r2, r3, #2
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b02      	subs	r3, #2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e98:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007e9a:	e044      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007e9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d11d      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x42a>
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d018      	beq.n	8007ede <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb0:	6a3a      	ldr	r2, [r7, #32]
 8007eb2:	8812      	ldrh	r2, [r2, #0]
 8007eb4:	b292      	uxth	r2, r2
 8007eb6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ebc:	1c9a      	adds	r2, r3, #2
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007eda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007edc:	e023      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ede:	f7f9 ff25 	bl	8001d2c <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d803      	bhi.n	8007ef6 <HAL_SPI_TransmitReceive+0x442>
 8007eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef4:	d102      	bne.n	8007efc <HAL_SPI_TransmitReceive+0x448>
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d114      	bne.n	8007f26 <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fe41 	bl	8008b84 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e121      	b.n	800816a <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f47f af3b 	bne.w	8007da4 <HAL_SPI_TransmitReceive+0x2f0>
 8007f2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f47f af37 	bne.w	8007da4 <HAL_SPI_TransmitReceive+0x2f0>
 8007f36:	e0f2      	b.n	800811e <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d121      	bne.n	8007f8a <HAL_SPI_TransmitReceive+0x4d6>
 8007f46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01e      	beq.n	8007f8a <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007f4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007f4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f52:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d218      	bcs.n	8007f8a <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3320      	adds	r3, #32
 8007f62:	7812      	ldrb	r2, [r2, #0]
 8007f64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f88:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007f92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80ba 	beq.w	800810e <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d11b      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007fdc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007fde:	e096      	b.n	800810e <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007fe0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007fe2:	8bfb      	ldrh	r3, [r7, #30]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d24a      	bcs.n	800807e <HAL_SPI_TransmitReceive+0x5ca>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d045      	beq.n	800807e <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ffe:	7812      	ldrb	r2, [r2, #0]
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800801a:	7812      	ldrb	r2, [r2, #0]
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008052:	7812      	ldrb	r2, [r2, #0]
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b04      	subs	r3, #4
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800807a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800807c:	e047      	b.n	800810e <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800807e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008080:	2b03      	cmp	r3, #3
 8008082:	d820      	bhi.n	80080c6 <HAL_SPI_TransmitReceive+0x612>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01b      	beq.n	80080c6 <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80080c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80080c4:	e023      	b.n	800810e <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c6:	f7f9 fe31 	bl	8001d2c <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d803      	bhi.n	80080de <HAL_SPI_TransmitReceive+0x62a>
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d102      	bne.n	80080e4 <HAL_SPI_TransmitReceive+0x630>
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d114      	bne.n	800810e <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fd4d 	bl	8008b84 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e02d      	b.n	800816a <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800810e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f af11 	bne.w	8007f38 <HAL_SPI_TransmitReceive+0x484>
 8008116:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	f47f af0d 	bne.w	8007f38 <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	2200      	movs	r2, #0
 8008126:	2108      	movs	r1, #8
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fdcb 	bl	8008cc4 <SPI_WaitOnFlagUntilTimeout>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d007      	beq.n	8008144 <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800813a:	f043 0220 	orr.w	r2, r3, #32
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fd1d 	bl	8008b84 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e000      	b.n	800816a <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 8008168:	2300      	movs	r3, #0
  }
}
 800816a:	4618      	mov	r0, r3
 800816c:	3730      	adds	r7, #48	@ 0x30
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop

08008174 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a91      	ldr	r2, [pc, #580]	@ (80083cc <HAL_SPI_TransmitReceive_DMA+0x258>)
 8008188:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b01      	cmp	r3, #1
 8008194:	d001      	beq.n	800819a <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8008196:	2302      	movs	r3, #2
 8008198:	e274      	b.n	8008684 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_SPI_TransmitReceive_DMA+0x38>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <HAL_SPI_TransmitReceive_DMA+0x38>
 80081a6:	887b      	ldrh	r3, [r7, #2]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e269      	b.n	8008684 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_SPI_TransmitReceive_DMA+0x4a>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e262      	b.n	8008684 <HAL_SPI_TransmitReceive_DMA+0x510>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2205      	movs	r2, #5
 80081ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	887a      	ldrh	r2, [r7, #2]
 80081e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	887a      	ldrh	r2, [r7, #2]
 80081e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	887a      	ldrh	r2, [r7, #2]
 80081f6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	887a      	ldrh	r2, [r7, #2]
 80081fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800821c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800822c:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2b0f      	cmp	r3, #15
 8008234:	d920      	bls.n	8008278 <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800823c:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800823e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008242:	d105      	bne.n	8008250 <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824a:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800824c:	2b02      	cmp	r3, #2
 800824e:	d013      	beq.n	8008278 <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8008254:	4a5e      	ldr	r2, [pc, #376]	@ (80083d0 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01e      	beq.n	8008298 <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a5d      	ldr	r2, [pc, #372]	@ (80083d4 <HAL_SPI_TransmitReceive_DMA+0x260>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d019      	beq.n	8008298 <HAL_SPI_TransmitReceive_DMA+0x124>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a5b      	ldr	r2, [pc, #364]	@ (80083d8 <HAL_SPI_TransmitReceive_DMA+0x264>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d014      	beq.n	8008298 <HAL_SPI_TransmitReceive_DMA+0x124>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a5a      	ldr	r2, [pc, #360]	@ (80083dc <HAL_SPI_TransmitReceive_DMA+0x268>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800827c:	2b07      	cmp	r3, #7
 800827e:	d911      	bls.n	80082a4 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008286:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008292:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e1ef      	b.n	8008684 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	2b07      	cmp	r3, #7
 80082aa:	d842      	bhi.n	8008332 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d109      	bne.n	80082cc <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3301      	adds	r3, #1
 80082c2:	105b      	asrs	r3, r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d109      	bne.n	80082ec <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3303      	adds	r3, #3
 80082e2:	109b      	asrs	r3, r3, #2
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082f8:	d109      	bne.n	800830e <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008300:	b29b      	uxth	r3, r3
 8008302:	3301      	adds	r3, #1
 8008304:	105b      	asrs	r3, r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800831a:	d12f      	bne.n	800837c <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008322:	b29b      	uxth	r3, r3
 8008324:	3303      	adds	r3, #3
 8008326:	109b      	asrs	r3, r3, #2
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008330:	e024      	b.n	800837c <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	2b0f      	cmp	r3, #15
 8008338:	d820      	bhi.n	800837c <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d109      	bne.n	800835a <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800834c:	b29b      	uxth	r3, r3
 800834e:	3301      	adds	r3, #1
 8008350:	105b      	asrs	r3, r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008366:	d109      	bne.n	800837c <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800836e:	b29b      	uxth	r3, r3
 8008370:	3301      	adds	r3, #1
 8008372:	105b      	asrs	r3, r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008382:	4a17      	ldr	r2, [pc, #92]	@ (80083e0 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 8008384:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800838c:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <HAL_SPI_TransmitReceive_DMA+0x270>)
 800838e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008396:	4a14      	ldr	r2, [pc, #80]	@ (80083e8 <HAL_SPI_TransmitReceive_DMA+0x274>)
 8008398:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a0:	2200      	movs	r2, #0
 80083a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	2b07      	cmp	r3, #7
 80083aa:	d804      	bhi.n	80083b6 <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	887a      	ldrh	r2, [r7, #2]
 80083b0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80083b4:	e020      	b.n	80083f8 <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2b0f      	cmp	r3, #15
 80083bc:	d816      	bhi.n	80083ec <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80083ca:	e015      	b.n	80083f8 <HAL_SPI_TransmitReceive_DMA+0x284>
 80083cc:	46002000 	.word	0x46002000
 80083d0:	40013000 	.word	0x40013000
 80083d4:	50013000 	.word	0x50013000
 80083d8:	40003800 	.word	0x40003800
 80083dc:	50003800 	.word	0x50003800
 80083e0:	08008aef 	.word	0x08008aef
 80083e4:	08008a9d 	.word	0x08008a9d
 80083e8:	08008b0b 	.word	0x08008b0b
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 80083ec:	887b      	ldrh	r3, [r7, #2]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008404:	2b00      	cmp	r3, #0
 8008406:	d02d      	beq.n	8008464 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800840e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008410:	2b00      	cmp	r3, #0
 8008412:	d024      	beq.n	800845e <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008452:	4618      	mov	r0, r3
 8008454:	f7fa fcc4 	bl	8002de0 <HAL_DMAEx_List_Start_IT>
 8008458:	4603      	mov	r3, r0
 800845a:	75fb      	strb	r3, [r7, #23]
 800845c:	e014      	b.n	8008488 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	75fb      	strb	r3, [r7, #23]
 8008462:	e011      	b.n	8008488 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3330      	adds	r3, #48	@ 0x30
 8008470:	4619      	mov	r1, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008476:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800847e:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008480:	f7f9 ff5a 	bl	8002338 <HAL_DMA_Start_IT>
 8008484:	4603      	mov	r3, r0
 8008486:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d011      	beq.n	80084b2 <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008494:	f043 0210 	orr.w	r2, r3, #16
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e0e8      	b.n	8008684 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084c0:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c8:	2200      	movs	r2, #0
 80084ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d2:	2200      	movs	r2, #0
 80084d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084dc:	2200      	movs	r2, #0
 80084de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084e6:	4a69      	ldr	r2, [pc, #420]	@ (800868c <HAL_SPI_TransmitReceive_DMA+0x518>)
 80084e8:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	2b07      	cmp	r3, #7
 80084f0:	d804      	bhi.n	80084fc <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	887a      	ldrh	r2, [r7, #2]
 80084f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80084fa:	e010      	b.n	800851e <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b0f      	cmp	r3, #15
 8008502:	d806      	bhi.n	8008512 <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 8008504:	887b      	ldrh	r3, [r7, #2]
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008510:	e005      	b.n	800851e <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8008512:	887b      	ldrh	r3, [r7, #2]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800852a:	2b00      	cmp	r3, #0
 800852c:	d02d      	beq.n	800858a <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008536:	2b00      	cmp	r3, #0
 8008538:	d024      	beq.n	8008584 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f103 0220 	add.w	r2, r3, #32
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008578:	4618      	mov	r0, r3
 800857a:	f7fa fc31 	bl	8002de0 <HAL_DMAEx_List_Start_IT>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]
 8008582:	e014      	b.n	80085ae <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]
 8008588:	e011      	b.n	80085ae <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008594:	4619      	mov	r1, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3320      	adds	r3, #32
 800859c:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085a4:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80085a6:	f7f9 fec7 	bl	8002338 <HAL_DMA_Start_IT>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d017      	beq.n	80085e4 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7f9 ff1c 	bl	80023f8 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c6:	f043 0210 	orr.w	r2, r3, #16
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e04f      	b.n	8008684 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ec:	2b81      	cmp	r3, #129	@ 0x81
 80085ee:	d10e      	bne.n	800860e <HAL_SPI_TransmitReceive_DMA+0x49a>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f8:	2b81      	cmp	r3, #129	@ 0x81
 80085fa:	d108      	bne.n	800860e <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	6812      	ldr	r2, [r2, #0]
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	041b      	lsls	r3, r3, #16
 800860a:	6053      	str	r3, [r2, #4]
 800860c:	e009      	b.n	8008622 <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	0c1b      	lsrs	r3, r3, #16
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	8879      	ldrh	r1, [r7, #2]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	430b      	orrs	r3, r1
 8008620:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008630:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8008640:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f042 0201 	orr.w	r2, r2, #1
 8008650:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10c      	bne.n	800867a <HAL_SPI_TransmitReceive_DMA+0x506>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008668:	d107      	bne.n	800867a <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008678:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	08008b0b 	.word	0x08008b0b

08008690 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	@ 0x28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80086a8:	6a3a      	ldr	r2, [r7, #32]
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	4013      	ands	r3, r2
 80086ae:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80086c2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3330      	adds	r3, #48	@ 0x30
 80086ca:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d010      	beq.n	80086f8 <HAL_SPI_IRQHandler+0x68>
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086ee:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f9c9 	bl	8008a88 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80086f6:	e19a      	b.n	8008a2e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d113      	bne.n	800872a <HAL_SPI_IRQHandler+0x9a>
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10e      	bne.n	800872a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
    handled = 1UL;
 8008726:	2301      	movs	r3, #1
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10f      	bne.n	8008754 <HAL_SPI_IRQHandler+0xc4>
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008744:	2b00      	cmp	r3, #0
 8008746:	d105      	bne.n	8008754 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
    handled = 1UL;
 8008750:	2301      	movs	r3, #1
 8008752:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10f      	bne.n	800877e <HAL_SPI_IRQHandler+0xee>
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800876e:	2b00      	cmp	r3, #0
 8008770:	d105      	bne.n	800877e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
    handled = 1UL;
 800877a:	2301      	movs	r3, #1
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	f040 814f 	bne.w	8008a24 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	f003 0308 	and.w	r3, r3, #8
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 808b 	beq.w	80088a8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0208 	orr.w	r2, r2, #8
 80087a0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699a      	ldr	r2, [r3, #24]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0210 	orr.w	r2, r2, #16
 80087b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	699a      	ldr	r2, [r3, #24]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087c0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	691a      	ldr	r2, [r3, #16]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0208 	bic.w	r2, r2, #8
 80087d0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d13d      	bne.n	800885c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80087e0:	e036      	b.n	8008850 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d90b      	bls.n	8008802 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087f4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087fa:	1d1a      	adds	r2, r3, #4
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008800:	e01d      	b.n	800883e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	2b07      	cmp	r3, #7
 8008808:	d90b      	bls.n	8008822 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	8812      	ldrh	r2, [r2, #0]
 8008812:	b292      	uxth	r2, r2
 8008814:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800881a:	1c9a      	adds	r2, r3, #2
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008820:	e00d      	b.n	800883e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1c2      	bne.n	80087e2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f991 	bl	8008b84 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f8fd 	bl	8008a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800887a:	e0d8      	b.n	8008a2e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800887c:	7cfb      	ldrb	r3, [r7, #19]
 800887e:	2b05      	cmp	r3, #5
 8008880:	d103      	bne.n	800888a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7f8 fc72 	bl	800116c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008888:	e0ce      	b.n	8008a28 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800888a:	7cfb      	ldrb	r3, [r7, #19]
 800888c:	2b04      	cmp	r3, #4
 800888e:	d103      	bne.n	8008898 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f8db 	bl	8008a4c <HAL_SPI_RxCpltCallback>
    return;
 8008896:	e0c7      	b.n	8008a28 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008898:	7cfb      	ldrb	r3, [r7, #19]
 800889a:	2b03      	cmp	r3, #3
 800889c:	f040 80c4 	bne.w	8008a28 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f8c9 	bl	8008a38 <HAL_SPI_TxCpltCallback>
    return;
 80088a6:	e0bf      	b.n	8008a28 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 80bd 	beq.w	8008a2e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088c4:	f043 0204 	orr.w	r2, r3, #4
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	699a      	ldr	r2, [r3, #24]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00f      	beq.n	8008908 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ee:	f043 0201 	orr.w	r2, r3, #1
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008906:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00f      	beq.n	8008932 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008918:	f043 0208 	orr.w	r2, r3, #8
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008930:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00f      	beq.n	800895c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008942:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0220 	orr.w	r2, r2, #32
 800895a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d062      	beq.n	8008a2c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0201 	bic.w	r2, r2, #1
 8008974:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	6812      	ldr	r2, [r2, #0]
 8008980:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008984:	f023 0303 	bic.w	r3, r3, #3
 8008988:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008990:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008994:	d13e      	bne.n	8008a14 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80089a4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d015      	beq.n	80089dc <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a34 <HAL_SPI_IRQHandler+0x3a4>)
 80089b8:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7f9 fd95 	bl	80024f0 <HAL_DMA_Abort_IT>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d022      	beq.n	8008a2c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ec:	4a11      	ldr	r2, [pc, #68]	@ (8008a34 <HAL_SPI_IRQHandler+0x3a4>)
 80089ee:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7f9 fd7a 	bl	80024f0 <HAL_DMA_Abort_IT>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d014      	beq.n	8008a2c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008a12:	e00b      	b.n	8008a2c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f829 	bl	8008a74 <HAL_SPI_ErrorCallback>
    return;
 8008a22:	e003      	b.n	8008a2c <HAL_SPI_IRQHandler+0x39c>
    return;
 8008a24:	bf00      	nop
 8008a26:	e002      	b.n	8008a2e <HAL_SPI_IRQHandler+0x39e>
    return;
 8008a28:	bf00      	nop
 8008a2a:	e000      	b.n	8008a2e <HAL_SPI_IRQHandler+0x39e>
    return;
 8008a2c:	bf00      	nop
  }
}
 8008a2e:	3728      	adds	r7, #40	@ 0x28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	08008b51 	.word	0x08008b51

08008a38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b07      	cmp	r3, #7
 8008ab4:	d017      	beq.n	8008ae6 <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008abe:	2b81      	cmp	r3, #129	@ 0x81
 8008ac0:	d109      	bne.n	8008ad6 <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8008aca:	2b81      	cmp	r3, #129	@ 0x81
 8008acc:	d103      	bne.n	8008ad6 <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7f8 fb4c 	bl	800116c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008ad4:	e007      	b.n	8008ae6 <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0208 	orr.w	r2, r2, #8
 8008ae4:	611a      	str	r2, [r3, #16]
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008afa:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff ffaf 	bl	8008a60 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b16:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7f9 fe73 	bl	8002804 <HAL_DMA_GetError>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d011      	beq.n	8008b48 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f82d 	bl	8008b84 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b30:	f043 0210 	orr.w	r2, r3, #16
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff ff96 	bl	8008a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff ff7c 	bl	8008a74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699a      	ldr	r2, [r3, #24]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0208 	orr.w	r2, r2, #8
 8008ba2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699a      	ldr	r2, [r3, #24]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0210 	orr.w	r2, r2, #16
 8008bb2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0201 	bic.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008be6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d014      	beq.n	8008c1e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00f      	beq.n	8008c1e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f042 0220 	orr.w	r2, r2, #32
 8008c1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d014      	beq.n	8008c54 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00f      	beq.n	8008c54 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c3a:	f043 0204 	orr.w	r2, r3, #4
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00f      	beq.n	8008c7e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c64:	f043 0201 	orr.w	r2, r3, #1
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c8e:	f043 0208 	orr.w	r2, r3, #8
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ca6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008cb8:	bf00      	nop
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cd4:	e010      	b.n	8008cf8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd6:	f7f9 f829 	bl	8001d2c <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d803      	bhi.n	8008cee <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cec:	d102      	bne.n	8008cf4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e00f      	b.n	8008d18 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695a      	ldr	r2, [r3, #20]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	4013      	ands	r3, r2
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	bf0c      	ite	eq
 8008d08:	2301      	moveq	r3, #1
 8008d0a:	2300      	movne	r3, #0
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d0df      	beq.n	8008cd6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	3307      	adds	r3, #7
 8008d3e:	08db      	lsrs	r3, r3, #3
 8008d40:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d12e      	bne.n	8008dca <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e028      	b.n	8008dcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 0201 	bic.w	r2, r2, #1
 8008d98:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008da6:	ea42 0103 	orr.w	r1, r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e000      	b.n	8008dcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
  }
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e042      	b.n	8008e70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7f8 fc89 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2224      	movs	r2, #36	@ 0x24
 8008e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0201 	bic.w	r2, r2, #1
 8008e18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fa68 	bl	80092f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f8c3 	bl	8008fb4 <UART_SetConfig>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d101      	bne.n	8008e38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e01b      	b.n	8008e70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fae7 	bl	800943c <UART_CheckIdleState>
 8008e6e:	4603      	mov	r3, r0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	@ 0x28
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e8e:	2b20      	cmp	r3, #32
 8008e90:	f040 808b 	bne.w	8008faa <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <HAL_UART_Transmit+0x28>
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e083      	b.n	8008fac <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eae:	2b80      	cmp	r3, #128	@ 0x80
 8008eb0:	d107      	bne.n	8008ec2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ec0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2221      	movs	r2, #33	@ 0x21
 8008ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ed2:	f7f8 ff2b 	bl	8001d2c <HAL_GetTick>
 8008ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	88fa      	ldrh	r2, [r7, #6]
 8008edc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	88fa      	ldrh	r2, [r7, #6]
 8008ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ef0:	d108      	bne.n	8008f04 <HAL_UART_Transmit+0x8c>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	61bb      	str	r3, [r7, #24]
 8008f02:	e003      	b.n	8008f0c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f0c:	e030      	b.n	8008f70 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2200      	movs	r2, #0
 8008f16:	2180      	movs	r1, #128	@ 0x80
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fb39 	bl	8009590 <UART_WaitOnFlagUntilTimeout>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e03d      	b.n	8008fac <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10b      	bne.n	8008f4e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	3302      	adds	r3, #2
 8008f4a:	61bb      	str	r3, [r7, #24]
 8008f4c:	e007      	b.n	8008f5e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1c8      	bne.n	8008f0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	2200      	movs	r2, #0
 8008f84:	2140      	movs	r1, #64	@ 0x40
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 fb02 	bl	8009590 <UART_WaitOnFlagUntilTimeout>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e006      	b.n	8008fac <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e000      	b.n	8008fac <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008faa:	2302      	movs	r3, #2
  }
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fb8:	b094      	sub	sp, #80	@ 0x50
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80091c4 <UART_SetConfig+0x210>)
 8008fca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4977      	ldr	r1, [pc, #476]	@ (80091c8 <UART_SetConfig+0x214>)
 8008fec:	4019      	ands	r1, r3
 8008fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009004:	68d9      	ldr	r1, [r3, #12]
 8009006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	ea40 0301 	orr.w	r3, r0, r1
 800900e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b6a      	ldr	r3, [pc, #424]	@ (80091c4 <UART_SetConfig+0x210>)
 800901c:	429a      	cmp	r2, r3
 800901e:	d009      	beq.n	8009034 <UART_SetConfig+0x80>
 8009020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4b69      	ldr	r3, [pc, #420]	@ (80091cc <UART_SetConfig+0x218>)
 8009026:	429a      	cmp	r2, r3
 8009028:	d004      	beq.n	8009034 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	6a1a      	ldr	r2, [r3, #32]
 800902e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009030:	4313      	orrs	r3, r2
 8009032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800903e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009048:	430b      	orrs	r3, r1
 800904a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009052:	f023 000f 	bic.w	r0, r3, #15
 8009056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009058:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800905a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	ea40 0301 	orr.w	r3, r0, r1
 8009062:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	4b59      	ldr	r3, [pc, #356]	@ (80091d0 <UART_SetConfig+0x21c>)
 800906a:	429a      	cmp	r2, r3
 800906c:	d102      	bne.n	8009074 <UART_SetConfig+0xc0>
 800906e:	2301      	movs	r3, #1
 8009070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009072:	e029      	b.n	80090c8 <UART_SetConfig+0x114>
 8009074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b56      	ldr	r3, [pc, #344]	@ (80091d4 <UART_SetConfig+0x220>)
 800907a:	429a      	cmp	r2, r3
 800907c:	d102      	bne.n	8009084 <UART_SetConfig+0xd0>
 800907e:	2302      	movs	r3, #2
 8009080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009082:	e021      	b.n	80090c8 <UART_SetConfig+0x114>
 8009084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	4b53      	ldr	r3, [pc, #332]	@ (80091d8 <UART_SetConfig+0x224>)
 800908a:	429a      	cmp	r2, r3
 800908c:	d102      	bne.n	8009094 <UART_SetConfig+0xe0>
 800908e:	2304      	movs	r3, #4
 8009090:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009092:	e019      	b.n	80090c8 <UART_SetConfig+0x114>
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	4b50      	ldr	r3, [pc, #320]	@ (80091dc <UART_SetConfig+0x228>)
 800909a:	429a      	cmp	r2, r3
 800909c:	d102      	bne.n	80090a4 <UART_SetConfig+0xf0>
 800909e:	2308      	movs	r3, #8
 80090a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090a2:	e011      	b.n	80090c8 <UART_SetConfig+0x114>
 80090a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	4b4d      	ldr	r3, [pc, #308]	@ (80091e0 <UART_SetConfig+0x22c>)
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d102      	bne.n	80090b4 <UART_SetConfig+0x100>
 80090ae:	2310      	movs	r3, #16
 80090b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090b2:	e009      	b.n	80090c8 <UART_SetConfig+0x114>
 80090b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	4b42      	ldr	r3, [pc, #264]	@ (80091c4 <UART_SetConfig+0x210>)
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d102      	bne.n	80090c4 <UART_SetConfig+0x110>
 80090be:	2320      	movs	r3, #32
 80090c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090c2:	e001      	b.n	80090c8 <UART_SetConfig+0x114>
 80090c4:	2300      	movs	r3, #0
 80090c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	4b3d      	ldr	r3, [pc, #244]	@ (80091c4 <UART_SetConfig+0x210>)
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d005      	beq.n	80090de <UART_SetConfig+0x12a>
 80090d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	4b3d      	ldr	r3, [pc, #244]	@ (80091cc <UART_SetConfig+0x218>)
 80090d8:	429a      	cmp	r2, r3
 80090da:	f040 8085 	bne.w	80091e8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090e0:	2200      	movs	r2, #0
 80090e2:	623b      	str	r3, [r7, #32]
 80090e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80090e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090ea:	f7fc fea7 	bl	8005e3c <HAL_RCCEx_GetPeriphCLKFreq>
 80090ee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80090f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 80e8 	beq.w	80092c8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fc:	4a39      	ldr	r2, [pc, #228]	@ (80091e4 <UART_SetConfig+0x230>)
 80090fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009102:	461a      	mov	r2, r3
 8009104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009106:	fbb3 f3f2 	udiv	r3, r3, r2
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	4613      	mov	r3, r2
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	4413      	add	r3, r2
 8009116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009118:	429a      	cmp	r2, r3
 800911a:	d305      	bcc.n	8009128 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009124:	429a      	cmp	r2, r3
 8009126:	d903      	bls.n	8009130 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800912e:	e048      	b.n	80091c2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009132:	2200      	movs	r2, #0
 8009134:	61bb      	str	r3, [r7, #24]
 8009136:	61fa      	str	r2, [r7, #28]
 8009138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913c:	4a29      	ldr	r2, [pc, #164]	@ (80091e4 <UART_SetConfig+0x230>)
 800913e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009142:	b29b      	uxth	r3, r3
 8009144:	2200      	movs	r2, #0
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	617a      	str	r2, [r7, #20]
 800914a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800914e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009152:	f7f7 f899 	bl	8000288 <__aeabi_uldivmod>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4610      	mov	r0, r2
 800915c:	4619      	mov	r1, r3
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	020b      	lsls	r3, r1, #8
 8009168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800916c:	0202      	lsls	r2, r0, #8
 800916e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009170:	6849      	ldr	r1, [r1, #4]
 8009172:	0849      	lsrs	r1, r1, #1
 8009174:	2000      	movs	r0, #0
 8009176:	460c      	mov	r4, r1
 8009178:	4605      	mov	r5, r0
 800917a:	eb12 0804 	adds.w	r8, r2, r4
 800917e:	eb43 0905 	adc.w	r9, r3, r5
 8009182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	60bb      	str	r3, [r7, #8]
 800918a:	60fa      	str	r2, [r7, #12]
 800918c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009190:	4640      	mov	r0, r8
 8009192:	4649      	mov	r1, r9
 8009194:	f7f7 f878 	bl	8000288 <__aeabi_uldivmod>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4613      	mov	r3, r2
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a6:	d308      	bcc.n	80091ba <UART_SetConfig+0x206>
 80091a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091ae:	d204      	bcs.n	80091ba <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80091b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80091b6:	60da      	str	r2, [r3, #12]
 80091b8:	e003      	b.n	80091c2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80091c0:	e082      	b.n	80092c8 <UART_SetConfig+0x314>
 80091c2:	e081      	b.n	80092c8 <UART_SetConfig+0x314>
 80091c4:	46002400 	.word	0x46002400
 80091c8:	cfff69f3 	.word	0xcfff69f3
 80091cc:	56002400 	.word	0x56002400
 80091d0:	40013800 	.word	0x40013800
 80091d4:	40004400 	.word	0x40004400
 80091d8:	40004800 	.word	0x40004800
 80091dc:	40004c00 	.word	0x40004c00
 80091e0:	40005000 	.word	0x40005000
 80091e4:	0800a490 	.word	0x0800a490
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091f0:	d13c      	bne.n	800926c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091f4:	2200      	movs	r2, #0
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	607a      	str	r2, [r7, #4]
 80091fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091fe:	f7fc fe1d 	bl	8005e3c <HAL_RCCEx_GetPeriphCLKFreq>
 8009202:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	d05e      	beq.n	80092c8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	4a39      	ldr	r2, [pc, #228]	@ (80092f4 <UART_SetConfig+0x340>)
 8009210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009214:	461a      	mov	r2, r3
 8009216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009218:	fbb3 f3f2 	udiv	r3, r3, r2
 800921c:	005a      	lsls	r2, r3, #1
 800921e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	441a      	add	r2, r3
 8009226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	fbb2 f3f3 	udiv	r3, r2, r3
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009232:	2b0f      	cmp	r3, #15
 8009234:	d916      	bls.n	8009264 <UART_SetConfig+0x2b0>
 8009236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800923c:	d212      	bcs.n	8009264 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800923e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009240:	b29b      	uxth	r3, r3
 8009242:	f023 030f 	bic.w	r3, r3, #15
 8009246:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	b29b      	uxth	r3, r3
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	b29a      	uxth	r2, r3
 8009254:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009256:	4313      	orrs	r3, r2
 8009258:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800925a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009260:	60da      	str	r2, [r3, #12]
 8009262:	e031      	b.n	80092c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800926a:	e02d      	b.n	80092c8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800926c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800926e:	2200      	movs	r2, #0
 8009270:	469a      	mov	sl, r3
 8009272:	4693      	mov	fp, r2
 8009274:	4650      	mov	r0, sl
 8009276:	4659      	mov	r1, fp
 8009278:	f7fc fde0 	bl	8005e3c <HAL_RCCEx_GetPeriphCLKFreq>
 800927c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800927e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	d021      	beq.n	80092c8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009288:	4a1a      	ldr	r2, [pc, #104]	@ (80092f4 <UART_SetConfig+0x340>)
 800928a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928e:	461a      	mov	r2, r3
 8009290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009292:	fbb3 f2f2 	udiv	r2, r3, r2
 8009296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	085b      	lsrs	r3, r3, #1
 800929c:	441a      	add	r2, r3
 800929e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092aa:	2b0f      	cmp	r3, #15
 80092ac:	d909      	bls.n	80092c2 <UART_SetConfig+0x30e>
 80092ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b4:	d205      	bcs.n	80092c2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	60da      	str	r2, [r3, #12]
 80092c0:	e002      	b.n	80092c8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ca:	2201      	movs	r2, #1
 80092cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80092d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d2:	2201      	movs	r2, #1
 80092d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092da:	2200      	movs	r2, #0
 80092dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80092de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e0:	2200      	movs	r2, #0
 80092e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80092e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3750      	adds	r7, #80	@ 0x50
 80092ec:	46bd      	mov	sp, r7
 80092ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092f2:	bf00      	nop
 80092f4:	0800a490 	.word	0x0800a490

080092f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009348:	f003 0302 	and.w	r3, r3, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ae:	f003 0320 	and.w	r3, r3, #32
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01a      	beq.n	800940e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093f6:	d10a      	bne.n	800940e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	430a      	orrs	r2, r1
 800940c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	605a      	str	r2, [r3, #4]
  }
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b098      	sub	sp, #96	@ 0x60
 8009440:	af02      	add	r7, sp, #8
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800944c:	f7f8 fc6e 	bl	8001d2c <HAL_GetTick>
 8009450:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0308 	and.w	r3, r3, #8
 800945c:	2b08      	cmp	r3, #8
 800945e:	d12f      	bne.n	80094c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009468:	2200      	movs	r2, #0
 800946a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f88e 	bl	8009590 <UART_WaitOnFlagUntilTimeout>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d022      	beq.n	80094c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800948e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009498:	647b      	str	r3, [r7, #68]	@ 0x44
 800949a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800949e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e6      	bne.n	800947a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e063      	b.n	8009588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0304 	and.w	r3, r3, #4
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d149      	bne.n	8009562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094d6:	2200      	movs	r2, #0
 80094d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f857 	bl	8009590 <UART_WaitOnFlagUntilTimeout>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d03c      	beq.n	8009562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	623b      	str	r3, [r7, #32]
   return(result);
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009506:	633b      	str	r3, [r7, #48]	@ 0x30
 8009508:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800950c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e6      	bne.n	80094e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	60fb      	str	r3, [r7, #12]
   return(result);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f023 0301 	bic.w	r3, r3, #1
 8009530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800953a:	61fa      	str	r2, [r7, #28]
 800953c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	69b9      	ldr	r1, [r7, #24]
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	617b      	str	r3, [r7, #20]
   return(result);
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e5      	bne.n	800951a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e012      	b.n	8009588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3758      	adds	r7, #88	@ 0x58
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	4613      	mov	r3, r2
 800959e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a0:	e04f      	b.n	8009642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a8:	d04b      	beq.n	8009642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095aa:	f7f8 fbbf 	bl	8001d2c <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d302      	bcc.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095c0:	2303      	movs	r3, #3
 80095c2:	e04e      	b.n	8009662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0304 	and.w	r3, r3, #4
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d037      	beq.n	8009642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b80      	cmp	r3, #128	@ 0x80
 80095d6:	d034      	beq.n	8009642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2b40      	cmp	r3, #64	@ 0x40
 80095dc:	d031      	beq.n	8009642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	f003 0308 	and.w	r3, r3, #8
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d110      	bne.n	800960e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2208      	movs	r2, #8
 80095f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f838 	bl	800966a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2208      	movs	r2, #8
 80095fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e029      	b.n	8009662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800961c:	d111      	bne.n	8009642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 f81e 	bl	800966a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2220      	movs	r2, #32
 8009632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e00f      	b.n	8009662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	69da      	ldr	r2, [r3, #28]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4013      	ands	r3, r2
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	429a      	cmp	r2, r3
 8009650:	bf0c      	ite	eq
 8009652:	2301      	moveq	r3, #1
 8009654:	2300      	movne	r3, #0
 8009656:	b2db      	uxtb	r3, r3
 8009658:	461a      	mov	r2, r3
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	429a      	cmp	r2, r3
 800965e:	d0a0      	beq.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800966a:	b480      	push	{r7}
 800966c:	b095      	sub	sp, #84	@ 0x54
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009690:	643b      	str	r3, [r7, #64]	@ 0x40
 8009692:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009696:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e6      	bne.n	8009672 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3308      	adds	r3, #8
 80096aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096ba:	f023 0301 	bic.w	r3, r3, #1
 80096be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3308      	adds	r3, #8
 80096c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e3      	bne.n	80096a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d118      	bne.n	8009716 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f023 0310 	bic.w	r3, r3, #16
 80096f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009702:	61bb      	str	r3, [r7, #24]
 8009704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6979      	ldr	r1, [r7, #20]
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	613b      	str	r3, [r7, #16]
   return(result);
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e6      	bne.n	80096e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800972a:	bf00      	nop
 800972c:	3754      	adds	r7, #84	@ 0x54
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_UARTEx_DisableFifoMode+0x16>
 8009748:	2302      	movs	r3, #2
 800974a:	e027      	b.n	800979c <HAL_UARTEx_DisableFifoMode+0x66>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2224      	movs	r2, #36	@ 0x24
 8009758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800977a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2220      	movs	r2, #32
 800978e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d101      	bne.n	80097c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097bc:	2302      	movs	r3, #2
 80097be:	e02d      	b.n	800981c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2224      	movs	r2, #36	@ 0x24
 80097cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0201 	bic.w	r2, r2, #1
 80097e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f84f 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009834:	2b01      	cmp	r3, #1
 8009836:	d101      	bne.n	800983c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009838:	2302      	movs	r3, #2
 800983a:	e02d      	b.n	8009898 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2224      	movs	r2, #36	@ 0x24
 8009848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0201 	bic.w	r2, r2, #1
 8009862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f811 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d108      	bne.n	80098c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098c0:	e031      	b.n	8009926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098c2:	2308      	movs	r3, #8
 80098c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098c6:	2308      	movs	r3, #8
 80098c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	0e5b      	lsrs	r3, r3, #25
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	0f5b      	lsrs	r3, r3, #29
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 0307 	and.w	r3, r3, #7
 80098e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	7b3a      	ldrb	r2, [r7, #12]
 80098ee:	4911      	ldr	r1, [pc, #68]	@ (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 80098f0:	5c8a      	ldrb	r2, [r1, r2]
 80098f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098f6:	7b3a      	ldrb	r2, [r7, #12]
 80098f8:	490f      	ldr	r1, [pc, #60]	@ (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 80098fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	7b7a      	ldrb	r2, [r7, #13]
 800990c:	4909      	ldr	r1, [pc, #36]	@ (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 800990e:	5c8a      	ldrb	r2, [r1, r2]
 8009910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009914:	7b7a      	ldrb	r2, [r7, #13]
 8009916:	4908      	ldr	r1, [pc, #32]	@ (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 8009918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800991a:	fb93 f3f2 	sdiv	r3, r3, r2
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	0800a4a8 	.word	0x0800a4a8
 8009938:	0800a4b0 	.word	0x0800a4b0

0800993c <siprintf>:
 800993c:	b40e      	push	{r1, r2, r3}
 800993e:	b510      	push	{r4, lr}
 8009940:	b09d      	sub	sp, #116	@ 0x74
 8009942:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009946:	2400      	movs	r4, #0
 8009948:	ab1f      	add	r3, sp, #124	@ 0x7c
 800994a:	9002      	str	r0, [sp, #8]
 800994c:	9006      	str	r0, [sp, #24]
 800994e:	9107      	str	r1, [sp, #28]
 8009950:	9104      	str	r1, [sp, #16]
 8009952:	4809      	ldr	r0, [pc, #36]	@ (8009978 <siprintf+0x3c>)
 8009954:	4909      	ldr	r1, [pc, #36]	@ (800997c <siprintf+0x40>)
 8009956:	f853 2b04 	ldr.w	r2, [r3], #4
 800995a:	9105      	str	r1, [sp, #20]
 800995c:	a902      	add	r1, sp, #8
 800995e:	6800      	ldr	r0, [r0, #0]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009964:	f000 f994 	bl	8009c90 <_svfiprintf_r>
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	701c      	strb	r4, [r3, #0]
 800996c:	b01d      	add	sp, #116	@ 0x74
 800996e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009972:	b003      	add	sp, #12
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	2000000c 	.word	0x2000000c
 800997c:	ffff0208 	.word	0xffff0208

08009980 <memset>:
 8009980:	4402      	add	r2, r0
 8009982:	4603      	mov	r3, r0
 8009984:	4293      	cmp	r3, r2
 8009986:	d100      	bne.n	800998a <memset+0xa>
 8009988:	4770      	bx	lr
 800998a:	f803 1b01 	strb.w	r1, [r3], #1
 800998e:	e7f9      	b.n	8009984 <memset+0x4>

08009990 <__errno>:
 8009990:	4b01      	ldr	r3, [pc, #4]	@ (8009998 <__errno+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	2000000c 	.word	0x2000000c

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4d0d      	ldr	r5, [pc, #52]	@ (80099d4 <__libc_init_array+0x38>)
 80099a0:	2600      	movs	r6, #0
 80099a2:	4c0d      	ldr	r4, [pc, #52]	@ (80099d8 <__libc_init_array+0x3c>)
 80099a4:	1b64      	subs	r4, r4, r5
 80099a6:	10a4      	asrs	r4, r4, #2
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	4d0b      	ldr	r5, [pc, #44]	@ (80099dc <__libc_init_array+0x40>)
 80099ae:	2600      	movs	r6, #0
 80099b0:	4c0b      	ldr	r4, [pc, #44]	@ (80099e0 <__libc_init_array+0x44>)
 80099b2:	f000 fc75 	bl	800a2a0 <_init>
 80099b6:	1b64      	subs	r4, r4, r5
 80099b8:	10a4      	asrs	r4, r4, #2
 80099ba:	42a6      	cmp	r6, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c4:	3601      	adds	r6, #1
 80099c6:	4798      	blx	r3
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ce:	3601      	adds	r6, #1
 80099d0:	4798      	blx	r3
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	0800a4f4 	.word	0x0800a4f4
 80099d8:	0800a4f4 	.word	0x0800a4f4
 80099dc:	0800a4f4 	.word	0x0800a4f4
 80099e0:	0800a4f8 	.word	0x0800a4f8

080099e4 <__retarget_lock_acquire_recursive>:
 80099e4:	4770      	bx	lr

080099e6 <__retarget_lock_release_recursive>:
 80099e6:	4770      	bx	lr

080099e8 <_free_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d041      	beq.n	8009a74 <_free_r+0x8c>
 80099f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f4:	1f0c      	subs	r4, r1, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfb8      	it	lt
 80099fa:	18e4      	addlt	r4, r4, r3
 80099fc:	f000 f8e0 	bl	8009bc0 <__malloc_lock>
 8009a00:	4a1d      	ldr	r2, [pc, #116]	@ (8009a78 <_free_r+0x90>)
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	b933      	cbnz	r3, 8009a14 <_free_r+0x2c>
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a10:	f000 b8dc 	b.w	8009bcc <__malloc_unlock>
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d908      	bls.n	8009a2a <_free_r+0x42>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	1821      	adds	r1, r4, r0
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf01      	itttt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	1809      	addeq	r1, r1, r0
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	e7ed      	b.n	8009a06 <_free_r+0x1e>
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b10b      	cbz	r3, 8009a34 <_free_r+0x4c>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x42>
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	1850      	adds	r0, r2, r1
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x6c>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	4401      	add	r1, r0
 8009a40:	1850      	adds	r0, r2, r1
 8009a42:	6011      	str	r1, [r2, #0]
 8009a44:	4283      	cmp	r3, r0
 8009a46:	d1e0      	bne.n	8009a0a <_free_r+0x22>
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4408      	add	r0, r1
 8009a4e:	6053      	str	r3, [r2, #4]
 8009a50:	6010      	str	r0, [r2, #0]
 8009a52:	e7da      	b.n	8009a0a <_free_r+0x22>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x74>
 8009a56:	230c      	movs	r3, #12
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	e7d6      	b.n	8009a0a <_free_r+0x22>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	1821      	adds	r1, r4, r0
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf02      	ittt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6063      	str	r3, [r4, #4]
 8009a6c:	bf08      	it	eq
 8009a6e:	6021      	streq	r1, [r4, #0]
 8009a70:	6054      	str	r4, [r2, #4]
 8009a72:	e7ca      	b.n	8009a0a <_free_r+0x22>
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	20000604 	.word	0x20000604

08009a7c <sbrk_aligned>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8009abc <sbrk_aligned+0x40>)
 8009a80:	460c      	mov	r4, r1
 8009a82:	4605      	mov	r5, r0
 8009a84:	6831      	ldr	r1, [r6, #0]
 8009a86:	b911      	cbnz	r1, 8009a8e <sbrk_aligned+0x12>
 8009a88:	f000 fba8 	bl	800a1dc <_sbrk_r>
 8009a8c:	6030      	str	r0, [r6, #0]
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	f000 fba3 	bl	800a1dc <_sbrk_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d103      	bne.n	8009aa2 <sbrk_aligned+0x26>
 8009a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	bd70      	pop	{r4, r5, r6, pc}
 8009aa2:	1cc4      	adds	r4, r0, #3
 8009aa4:	f024 0403 	bic.w	r4, r4, #3
 8009aa8:	42a0      	cmp	r0, r4
 8009aaa:	d0f8      	beq.n	8009a9e <sbrk_aligned+0x22>
 8009aac:	1a21      	subs	r1, r4, r0
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 fb94 	bl	800a1dc <_sbrk_r>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d1f2      	bne.n	8009a9e <sbrk_aligned+0x22>
 8009ab8:	e7ef      	b.n	8009a9a <sbrk_aligned+0x1e>
 8009aba:	bf00      	nop
 8009abc:	20000600 	.word	0x20000600

08009ac0 <_malloc_r>:
 8009ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	1ccd      	adds	r5, r1, #3
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	f025 0503 	bic.w	r5, r5, #3
 8009acc:	3508      	adds	r5, #8
 8009ace:	2d0c      	cmp	r5, #12
 8009ad0:	bf38      	it	cc
 8009ad2:	250c      	movcc	r5, #12
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	db01      	blt.n	8009adc <_malloc_r+0x1c>
 8009ad8:	42a9      	cmp	r1, r5
 8009ada:	d904      	bls.n	8009ae6 <_malloc_r+0x26>
 8009adc:	230c      	movs	r3, #12
 8009ade:	6033      	str	r3, [r6, #0]
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bbc <_malloc_r+0xfc>
 8009aea:	f000 f869 	bl	8009bc0 <__malloc_lock>
 8009aee:	f8d8 3000 	ldr.w	r3, [r8]
 8009af2:	461c      	mov	r4, r3
 8009af4:	bb44      	cbnz	r4, 8009b48 <_malloc_r+0x88>
 8009af6:	4629      	mov	r1, r5
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7ff ffbf 	bl	8009a7c <sbrk_aligned>
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	4604      	mov	r4, r0
 8009b02:	d158      	bne.n	8009bb6 <_malloc_r+0xf6>
 8009b04:	f8d8 4000 	ldr.w	r4, [r8]
 8009b08:	4627      	mov	r7, r4
 8009b0a:	2f00      	cmp	r7, #0
 8009b0c:	d143      	bne.n	8009b96 <_malloc_r+0xd6>
 8009b0e:	2c00      	cmp	r4, #0
 8009b10:	d04b      	beq.n	8009baa <_malloc_r+0xea>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	4639      	mov	r1, r7
 8009b16:	4630      	mov	r0, r6
 8009b18:	eb04 0903 	add.w	r9, r4, r3
 8009b1c:	f000 fb5e 	bl	800a1dc <_sbrk_r>
 8009b20:	4581      	cmp	r9, r0
 8009b22:	d142      	bne.n	8009baa <_malloc_r+0xea>
 8009b24:	6821      	ldr	r1, [r4, #0]
 8009b26:	4630      	mov	r0, r6
 8009b28:	1a6d      	subs	r5, r5, r1
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	f7ff ffa6 	bl	8009a7c <sbrk_aligned>
 8009b30:	3001      	adds	r0, #1
 8009b32:	d03a      	beq.n	8009baa <_malloc_r+0xea>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	442b      	add	r3, r5
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	bb62      	cbnz	r2, 8009b9c <_malloc_r+0xdc>
 8009b42:	f8c8 7000 	str.w	r7, [r8]
 8009b46:	e00f      	b.n	8009b68 <_malloc_r+0xa8>
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	1b52      	subs	r2, r2, r5
 8009b4c:	d420      	bmi.n	8009b90 <_malloc_r+0xd0>
 8009b4e:	2a0b      	cmp	r2, #11
 8009b50:	d917      	bls.n	8009b82 <_malloc_r+0xc2>
 8009b52:	1961      	adds	r1, r4, r5
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	6025      	str	r5, [r4, #0]
 8009b58:	bf18      	it	ne
 8009b5a:	6059      	strne	r1, [r3, #4]
 8009b5c:	6863      	ldr	r3, [r4, #4]
 8009b5e:	bf08      	it	eq
 8009b60:	f8c8 1000 	streq.w	r1, [r8]
 8009b64:	5162      	str	r2, [r4, r5]
 8009b66:	604b      	str	r3, [r1, #4]
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 f82f 	bl	8009bcc <__malloc_unlock>
 8009b6e:	f104 000b 	add.w	r0, r4, #11
 8009b72:	1d23      	adds	r3, r4, #4
 8009b74:	f020 0007 	bic.w	r0, r0, #7
 8009b78:	1ac2      	subs	r2, r0, r3
 8009b7a:	bf1c      	itt	ne
 8009b7c:	1a1b      	subne	r3, r3, r0
 8009b7e:	50a3      	strne	r3, [r4, r2]
 8009b80:	e7af      	b.n	8009ae2 <_malloc_r+0x22>
 8009b82:	6862      	ldr	r2, [r4, #4]
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	bf0c      	ite	eq
 8009b88:	f8c8 2000 	streq.w	r2, [r8]
 8009b8c:	605a      	strne	r2, [r3, #4]
 8009b8e:	e7eb      	b.n	8009b68 <_malloc_r+0xa8>
 8009b90:	4623      	mov	r3, r4
 8009b92:	6864      	ldr	r4, [r4, #4]
 8009b94:	e7ae      	b.n	8009af4 <_malloc_r+0x34>
 8009b96:	463c      	mov	r4, r7
 8009b98:	687f      	ldr	r7, [r7, #4]
 8009b9a:	e7b6      	b.n	8009b0a <_malloc_r+0x4a>
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d1fb      	bne.n	8009b9c <_malloc_r+0xdc>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6053      	str	r3, [r2, #4]
 8009ba8:	e7de      	b.n	8009b68 <_malloc_r+0xa8>
 8009baa:	230c      	movs	r3, #12
 8009bac:	4630      	mov	r0, r6
 8009bae:	6033      	str	r3, [r6, #0]
 8009bb0:	f000 f80c 	bl	8009bcc <__malloc_unlock>
 8009bb4:	e794      	b.n	8009ae0 <_malloc_r+0x20>
 8009bb6:	6005      	str	r5, [r0, #0]
 8009bb8:	e7d6      	b.n	8009b68 <_malloc_r+0xa8>
 8009bba:	bf00      	nop
 8009bbc:	20000604 	.word	0x20000604

08009bc0 <__malloc_lock>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	@ (8009bc8 <__malloc_lock+0x8>)
 8009bc2:	f7ff bf0f 	b.w	80099e4 <__retarget_lock_acquire_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	200005fc 	.word	0x200005fc

08009bcc <__malloc_unlock>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	@ (8009bd4 <__malloc_unlock+0x8>)
 8009bce:	f7ff bf0a 	b.w	80099e6 <__retarget_lock_release_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	200005fc 	.word	0x200005fc

08009bd8 <__ssputs_r>:
 8009bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	461f      	mov	r7, r3
 8009bde:	688e      	ldr	r6, [r1, #8]
 8009be0:	4682      	mov	sl, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	42be      	cmp	r6, r7
 8009be6:	4690      	mov	r8, r2
 8009be8:	680b      	ldr	r3, [r1, #0]
 8009bea:	d82d      	bhi.n	8009c48 <__ssputs_r+0x70>
 8009bec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009bf4:	d026      	beq.n	8009c44 <__ssputs_r+0x6c>
 8009bf6:	6965      	ldr	r5, [r4, #20]
 8009bf8:	6909      	ldr	r1, [r1, #16]
 8009bfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bfe:	eba3 0901 	sub.w	r9, r3, r1
 8009c02:	1c7b      	adds	r3, r7, #1
 8009c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c08:	444b      	add	r3, r9
 8009c0a:	106d      	asrs	r5, r5, #1
 8009c0c:	429d      	cmp	r5, r3
 8009c0e:	bf38      	it	cc
 8009c10:	461d      	movcc	r5, r3
 8009c12:	0553      	lsls	r3, r2, #21
 8009c14:	d527      	bpl.n	8009c66 <__ssputs_r+0x8e>
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7ff ff52 	bl	8009ac0 <_malloc_r>
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	b360      	cbz	r0, 8009c7a <__ssputs_r+0xa2>
 8009c20:	464a      	mov	r2, r9
 8009c22:	6921      	ldr	r1, [r4, #16]
 8009c24:	f000 faf8 	bl	800a218 <memcpy>
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c32:	81a3      	strh	r3, [r4, #12]
 8009c34:	6126      	str	r6, [r4, #16]
 8009c36:	444e      	add	r6, r9
 8009c38:	6165      	str	r5, [r4, #20]
 8009c3a:	eba5 0509 	sub.w	r5, r5, r9
 8009c3e:	6026      	str	r6, [r4, #0]
 8009c40:	463e      	mov	r6, r7
 8009c42:	60a5      	str	r5, [r4, #8]
 8009c44:	42be      	cmp	r6, r7
 8009c46:	d900      	bls.n	8009c4a <__ssputs_r+0x72>
 8009c48:	463e      	mov	r6, r7
 8009c4a:	4632      	mov	r2, r6
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	6820      	ldr	r0, [r4, #0]
 8009c50:	f000 faaa 	bl	800a1a8 <memmove>
 8009c54:	68a3      	ldr	r3, [r4, #8]
 8009c56:	2000      	movs	r0, #0
 8009c58:	1b9b      	subs	r3, r3, r6
 8009c5a:	60a3      	str	r3, [r4, #8]
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	4433      	add	r3, r6
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c66:	462a      	mov	r2, r5
 8009c68:	f000 fae3 	bl	800a232 <_realloc_r>
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d1e0      	bne.n	8009c34 <__ssputs_r+0x5c>
 8009c72:	6921      	ldr	r1, [r4, #16]
 8009c74:	4650      	mov	r0, sl
 8009c76:	f7ff feb7 	bl	80099e8 <_free_r>
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	f8ca 3000 	str.w	r3, [sl]
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	e7e9      	b.n	8009c62 <__ssputs_r+0x8a>
	...

08009c90 <_svfiprintf_r>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	4698      	mov	r8, r3
 8009c96:	898b      	ldrh	r3, [r1, #12]
 8009c98:	b09d      	sub	sp, #116	@ 0x74
 8009c9a:	4607      	mov	r7, r0
 8009c9c:	061b      	lsls	r3, r3, #24
 8009c9e:	460d      	mov	r5, r1
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	d510      	bpl.n	8009cc6 <_svfiprintf_r+0x36>
 8009ca4:	690b      	ldr	r3, [r1, #16]
 8009ca6:	b973      	cbnz	r3, 8009cc6 <_svfiprintf_r+0x36>
 8009ca8:	2140      	movs	r1, #64	@ 0x40
 8009caa:	f7ff ff09 	bl	8009ac0 <_malloc_r>
 8009cae:	6028      	str	r0, [r5, #0]
 8009cb0:	6128      	str	r0, [r5, #16]
 8009cb2:	b930      	cbnz	r0, 8009cc2 <_svfiprintf_r+0x32>
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	b01d      	add	sp, #116	@ 0x74
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	2340      	movs	r3, #64	@ 0x40
 8009cc4:	616b      	str	r3, [r5, #20]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ccc:	f04f 0901 	mov.w	r9, #1
 8009cd0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009e74 <_svfiprintf_r+0x1e4>
 8009cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cd6:	2320      	movs	r3, #32
 8009cd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cdc:	2330      	movs	r3, #48	@ 0x30
 8009cde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	469a      	mov	sl, r3
 8009ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cea:	b10a      	cbz	r2, 8009cf0 <_svfiprintf_r+0x60>
 8009cec:	2a25      	cmp	r2, #37	@ 0x25
 8009cee:	d1f9      	bne.n	8009ce4 <_svfiprintf_r+0x54>
 8009cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf4:	d00b      	beq.n	8009d0e <_svfiprintf_r+0x7e>
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff ff6b 	bl	8009bd8 <__ssputs_r>
 8009d02:	3001      	adds	r0, #1
 8009d04:	f000 80a7 	beq.w	8009e56 <_svfiprintf_r+0x1c6>
 8009d08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d0a:	445a      	add	r2, fp
 8009d0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 809f 	beq.w	8009e56 <_svfiprintf_r+0x1c6>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1e:	f10a 0a01 	add.w	sl, sl, #1
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	9307      	str	r3, [sp, #28]
 8009d26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d30:	4654      	mov	r4, sl
 8009d32:	2205      	movs	r2, #5
 8009d34:	484f      	ldr	r0, [pc, #316]	@ (8009e74 <_svfiprintf_r+0x1e4>)
 8009d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3a:	f000 fa5f 	bl	800a1fc <memchr>
 8009d3e:	9a04      	ldr	r2, [sp, #16]
 8009d40:	b9d8      	cbnz	r0, 8009d7a <_svfiprintf_r+0xea>
 8009d42:	06d0      	lsls	r0, r2, #27
 8009d44:	bf44      	itt	mi
 8009d46:	2320      	movmi	r3, #32
 8009d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d4c:	0711      	lsls	r1, r2, #28
 8009d4e:	bf44      	itt	mi
 8009d50:	232b      	movmi	r3, #43	@ 0x2b
 8009d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d5c:	d015      	beq.n	8009d8a <_svfiprintf_r+0xfa>
 8009d5e:	9a07      	ldr	r2, [sp, #28]
 8009d60:	4654      	mov	r4, sl
 8009d62:	2000      	movs	r0, #0
 8009d64:	f04f 0c0a 	mov.w	ip, #10
 8009d68:	4621      	mov	r1, r4
 8009d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6e:	3b30      	subs	r3, #48	@ 0x30
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d94b      	bls.n	8009e0c <_svfiprintf_r+0x17c>
 8009d74:	b1b0      	cbz	r0, 8009da4 <_svfiprintf_r+0x114>
 8009d76:	9207      	str	r2, [sp, #28]
 8009d78:	e014      	b.n	8009da4 <_svfiprintf_r+0x114>
 8009d7a:	eba0 0308 	sub.w	r3, r0, r8
 8009d7e:	46a2      	mov	sl, r4
 8009d80:	fa09 f303 	lsl.w	r3, r9, r3
 8009d84:	4313      	orrs	r3, r2
 8009d86:	9304      	str	r3, [sp, #16]
 8009d88:	e7d2      	b.n	8009d30 <_svfiprintf_r+0xa0>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	1d19      	adds	r1, r3, #4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	9103      	str	r1, [sp, #12]
 8009d94:	bfbb      	ittet	lt
 8009d96:	425b      	neglt	r3, r3
 8009d98:	f042 0202 	orrlt.w	r2, r2, #2
 8009d9c:	9307      	strge	r3, [sp, #28]
 8009d9e:	9307      	strlt	r3, [sp, #28]
 8009da0:	bfb8      	it	lt
 8009da2:	9204      	strlt	r2, [sp, #16]
 8009da4:	7823      	ldrb	r3, [r4, #0]
 8009da6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009da8:	d10a      	bne.n	8009dc0 <_svfiprintf_r+0x130>
 8009daa:	7863      	ldrb	r3, [r4, #1]
 8009dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dae:	d132      	bne.n	8009e16 <_svfiprintf_r+0x186>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	3402      	adds	r4, #2
 8009db4:	1d1a      	adds	r2, r3, #4
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dbc:	9203      	str	r2, [sp, #12]
 8009dbe:	9305      	str	r3, [sp, #20]
 8009dc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e84 <_svfiprintf_r+0x1f4>
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	7821      	ldrb	r1, [r4, #0]
 8009dc8:	4650      	mov	r0, sl
 8009dca:	f000 fa17 	bl	800a1fc <memchr>
 8009dce:	b138      	cbz	r0, 8009de0 <_svfiprintf_r+0x150>
 8009dd0:	eba0 000a 	sub.w	r0, r0, sl
 8009dd4:	2240      	movs	r2, #64	@ 0x40
 8009dd6:	9b04      	ldr	r3, [sp, #16]
 8009dd8:	3401      	adds	r4, #1
 8009dda:	4082      	lsls	r2, r0
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	2206      	movs	r2, #6
 8009de6:	4824      	ldr	r0, [pc, #144]	@ (8009e78 <_svfiprintf_r+0x1e8>)
 8009de8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dec:	f000 fa06 	bl	800a1fc <memchr>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d036      	beq.n	8009e62 <_svfiprintf_r+0x1d2>
 8009df4:	4b21      	ldr	r3, [pc, #132]	@ (8009e7c <_svfiprintf_r+0x1ec>)
 8009df6:	bb1b      	cbnz	r3, 8009e40 <_svfiprintf_r+0x1b0>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	3307      	adds	r3, #7
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	3308      	adds	r3, #8
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e06:	4433      	add	r3, r6
 8009e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0a:	e76a      	b.n	8009ce2 <_svfiprintf_r+0x52>
 8009e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e10:	460c      	mov	r4, r1
 8009e12:	2001      	movs	r0, #1
 8009e14:	e7a8      	b.n	8009d68 <_svfiprintf_r+0xd8>
 8009e16:	2300      	movs	r3, #0
 8009e18:	3401      	adds	r4, #1
 8009e1a:	f04f 0c0a 	mov.w	ip, #10
 8009e1e:	4619      	mov	r1, r3
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	4620      	mov	r0, r4
 8009e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e28:	3a30      	subs	r2, #48	@ 0x30
 8009e2a:	2a09      	cmp	r2, #9
 8009e2c:	d903      	bls.n	8009e36 <_svfiprintf_r+0x1a6>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0c6      	beq.n	8009dc0 <_svfiprintf_r+0x130>
 8009e32:	9105      	str	r1, [sp, #20]
 8009e34:	e7c4      	b.n	8009dc0 <_svfiprintf_r+0x130>
 8009e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e7f0      	b.n	8009e22 <_svfiprintf_r+0x192>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	462a      	mov	r2, r5
 8009e44:	a904      	add	r1, sp, #16
 8009e46:	4638      	mov	r0, r7
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <_svfiprintf_r+0x1f0>)
 8009e4c:	f3af 8000 	nop.w
 8009e50:	1c42      	adds	r2, r0, #1
 8009e52:	4606      	mov	r6, r0
 8009e54:	d1d6      	bne.n	8009e04 <_svfiprintf_r+0x174>
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	065b      	lsls	r3, r3, #25
 8009e5a:	f53f af2d 	bmi.w	8009cb8 <_svfiprintf_r+0x28>
 8009e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e60:	e72c      	b.n	8009cbc <_svfiprintf_r+0x2c>
 8009e62:	ab03      	add	r3, sp, #12
 8009e64:	462a      	mov	r2, r5
 8009e66:	a904      	add	r1, sp, #16
 8009e68:	4638      	mov	r0, r7
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	4b04      	ldr	r3, [pc, #16]	@ (8009e80 <_svfiprintf_r+0x1f0>)
 8009e6e:	f000 f87d 	bl	8009f6c <_printf_i>
 8009e72:	e7ed      	b.n	8009e50 <_svfiprintf_r+0x1c0>
 8009e74:	0800a4b8 	.word	0x0800a4b8
 8009e78:	0800a4c2 	.word	0x0800a4c2
 8009e7c:	00000000 	.word	0x00000000
 8009e80:	08009bd9 	.word	0x08009bd9
 8009e84:	0800a4be 	.word	0x0800a4be

08009e88 <_printf_common>:
 8009e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e8c:	4616      	mov	r6, r2
 8009e8e:	4698      	mov	r8, r3
 8009e90:	688a      	ldr	r2, [r1, #8]
 8009e92:	4607      	mov	r7, r0
 8009e94:	690b      	ldr	r3, [r1, #16]
 8009e96:	460c      	mov	r4, r1
 8009e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	bfb8      	it	lt
 8009ea0:	4613      	movlt	r3, r2
 8009ea2:	6033      	str	r3, [r6, #0]
 8009ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ea8:	b10a      	cbz	r2, 8009eae <_printf_common+0x26>
 8009eaa:	3301      	adds	r3, #1
 8009eac:	6033      	str	r3, [r6, #0]
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	0699      	lsls	r1, r3, #26
 8009eb2:	bf42      	ittt	mi
 8009eb4:	6833      	ldrmi	r3, [r6, #0]
 8009eb6:	3302      	addmi	r3, #2
 8009eb8:	6033      	strmi	r3, [r6, #0]
 8009eba:	6825      	ldr	r5, [r4, #0]
 8009ebc:	f015 0506 	ands.w	r5, r5, #6
 8009ec0:	d106      	bne.n	8009ed0 <_printf_common+0x48>
 8009ec2:	f104 0a19 	add.w	sl, r4, #25
 8009ec6:	68e3      	ldr	r3, [r4, #12]
 8009ec8:	6832      	ldr	r2, [r6, #0]
 8009eca:	1a9b      	subs	r3, r3, r2
 8009ecc:	42ab      	cmp	r3, r5
 8009ece:	dc2b      	bgt.n	8009f28 <_printf_common+0xa0>
 8009ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ed4:	6822      	ldr	r2, [r4, #0]
 8009ed6:	3b00      	subs	r3, #0
 8009ed8:	bf18      	it	ne
 8009eda:	2301      	movne	r3, #1
 8009edc:	0692      	lsls	r2, r2, #26
 8009ede:	d430      	bmi.n	8009f42 <_printf_common+0xba>
 8009ee0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ee4:	4641      	mov	r1, r8
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	47c8      	blx	r9
 8009eea:	3001      	adds	r0, #1
 8009eec:	d023      	beq.n	8009f36 <_printf_common+0xae>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	341a      	adds	r4, #26
 8009ef2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009ef6:	f003 0306 	and.w	r3, r3, #6
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	bf0a      	itet	eq
 8009efe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009f02:	2500      	movne	r5, #0
 8009f04:	6833      	ldreq	r3, [r6, #0]
 8009f06:	f04f 0600 	mov.w	r6, #0
 8009f0a:	bf08      	it	eq
 8009f0c:	1aed      	subeq	r5, r5, r3
 8009f0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009f12:	bf08      	it	eq
 8009f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	bfc4      	itt	gt
 8009f1c:	1a9b      	subgt	r3, r3, r2
 8009f1e:	18ed      	addgt	r5, r5, r3
 8009f20:	42b5      	cmp	r5, r6
 8009f22:	d11a      	bne.n	8009f5a <_printf_common+0xd2>
 8009f24:	2000      	movs	r0, #0
 8009f26:	e008      	b.n	8009f3a <_printf_common+0xb2>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	4638      	mov	r0, r7
 8009f30:	47c8      	blx	r9
 8009f32:	3001      	adds	r0, #1
 8009f34:	d103      	bne.n	8009f3e <_printf_common+0xb6>
 8009f36:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3e:	3501      	adds	r5, #1
 8009f40:	e7c1      	b.n	8009ec6 <_printf_common+0x3e>
 8009f42:	18e1      	adds	r1, r4, r3
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	2030      	movs	r0, #48	@ 0x30
 8009f48:	3302      	adds	r3, #2
 8009f4a:	4422      	add	r2, r4
 8009f4c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f58:	e7c2      	b.n	8009ee0 <_printf_common+0x58>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	4641      	mov	r1, r8
 8009f60:	4638      	mov	r0, r7
 8009f62:	47c8      	blx	r9
 8009f64:	3001      	adds	r0, #1
 8009f66:	d0e6      	beq.n	8009f36 <_printf_common+0xae>
 8009f68:	3601      	adds	r6, #1
 8009f6a:	e7d9      	b.n	8009f20 <_printf_common+0x98>

08009f6c <_printf_i>:
 8009f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	7e0f      	ldrb	r7, [r1, #24]
 8009f72:	4691      	mov	r9, r2
 8009f74:	4680      	mov	r8, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	2f78      	cmp	r7, #120	@ 0x78
 8009f7a:	469a      	mov	sl, r3
 8009f7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f82:	d807      	bhi.n	8009f94 <_printf_i+0x28>
 8009f84:	2f62      	cmp	r7, #98	@ 0x62
 8009f86:	d80a      	bhi.n	8009f9e <_printf_i+0x32>
 8009f88:	2f00      	cmp	r7, #0
 8009f8a:	f000 80d1 	beq.w	800a130 <_printf_i+0x1c4>
 8009f8e:	2f58      	cmp	r7, #88	@ 0x58
 8009f90:	f000 80b8 	beq.w	800a104 <_printf_i+0x198>
 8009f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f9c:	e03a      	b.n	800a014 <_printf_i+0xa8>
 8009f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fa2:	2b15      	cmp	r3, #21
 8009fa4:	d8f6      	bhi.n	8009f94 <_printf_i+0x28>
 8009fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8009fac <_printf_i+0x40>)
 8009fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fac:	0800a005 	.word	0x0800a005
 8009fb0:	0800a019 	.word	0x0800a019
 8009fb4:	08009f95 	.word	0x08009f95
 8009fb8:	08009f95 	.word	0x08009f95
 8009fbc:	08009f95 	.word	0x08009f95
 8009fc0:	08009f95 	.word	0x08009f95
 8009fc4:	0800a019 	.word	0x0800a019
 8009fc8:	08009f95 	.word	0x08009f95
 8009fcc:	08009f95 	.word	0x08009f95
 8009fd0:	08009f95 	.word	0x08009f95
 8009fd4:	08009f95 	.word	0x08009f95
 8009fd8:	0800a117 	.word	0x0800a117
 8009fdc:	0800a043 	.word	0x0800a043
 8009fe0:	0800a0d1 	.word	0x0800a0d1
 8009fe4:	08009f95 	.word	0x08009f95
 8009fe8:	08009f95 	.word	0x08009f95
 8009fec:	0800a139 	.word	0x0800a139
 8009ff0:	08009f95 	.word	0x08009f95
 8009ff4:	0800a043 	.word	0x0800a043
 8009ff8:	08009f95 	.word	0x08009f95
 8009ffc:	08009f95 	.word	0x08009f95
 800a000:	0800a0d9 	.word	0x0800a0d9
 800a004:	6833      	ldr	r3, [r6, #0]
 800a006:	1d1a      	adds	r2, r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6032      	str	r2, [r6, #0]
 800a00c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a014:	2301      	movs	r3, #1
 800a016:	e09c      	b.n	800a152 <_printf_i+0x1e6>
 800a018:	6833      	ldr	r3, [r6, #0]
 800a01a:	6820      	ldr	r0, [r4, #0]
 800a01c:	1d19      	adds	r1, r3, #4
 800a01e:	6031      	str	r1, [r6, #0]
 800a020:	0606      	lsls	r6, r0, #24
 800a022:	d501      	bpl.n	800a028 <_printf_i+0xbc>
 800a024:	681d      	ldr	r5, [r3, #0]
 800a026:	e003      	b.n	800a030 <_printf_i+0xc4>
 800a028:	0645      	lsls	r5, r0, #25
 800a02a:	d5fb      	bpl.n	800a024 <_printf_i+0xb8>
 800a02c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a030:	2d00      	cmp	r5, #0
 800a032:	da03      	bge.n	800a03c <_printf_i+0xd0>
 800a034:	232d      	movs	r3, #45	@ 0x2d
 800a036:	426d      	negs	r5, r5
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a03c:	4858      	ldr	r0, [pc, #352]	@ (800a1a0 <_printf_i+0x234>)
 800a03e:	230a      	movs	r3, #10
 800a040:	e011      	b.n	800a066 <_printf_i+0xfa>
 800a042:	6821      	ldr	r1, [r4, #0]
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	0608      	lsls	r0, r1, #24
 800a048:	f853 5b04 	ldr.w	r5, [r3], #4
 800a04c:	d402      	bmi.n	800a054 <_printf_i+0xe8>
 800a04e:	0649      	lsls	r1, r1, #25
 800a050:	bf48      	it	mi
 800a052:	b2ad      	uxthmi	r5, r5
 800a054:	2f6f      	cmp	r7, #111	@ 0x6f
 800a056:	6033      	str	r3, [r6, #0]
 800a058:	4851      	ldr	r0, [pc, #324]	@ (800a1a0 <_printf_i+0x234>)
 800a05a:	bf14      	ite	ne
 800a05c:	230a      	movne	r3, #10
 800a05e:	2308      	moveq	r3, #8
 800a060:	2100      	movs	r1, #0
 800a062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a066:	6866      	ldr	r6, [r4, #4]
 800a068:	2e00      	cmp	r6, #0
 800a06a:	60a6      	str	r6, [r4, #8]
 800a06c:	db05      	blt.n	800a07a <_printf_i+0x10e>
 800a06e:	6821      	ldr	r1, [r4, #0]
 800a070:	432e      	orrs	r6, r5
 800a072:	f021 0104 	bic.w	r1, r1, #4
 800a076:	6021      	str	r1, [r4, #0]
 800a078:	d04b      	beq.n	800a112 <_printf_i+0x1a6>
 800a07a:	4616      	mov	r6, r2
 800a07c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a080:	fb03 5711 	mls	r7, r3, r1, r5
 800a084:	5dc7      	ldrb	r7, [r0, r7]
 800a086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a08a:	462f      	mov	r7, r5
 800a08c:	460d      	mov	r5, r1
 800a08e:	42bb      	cmp	r3, r7
 800a090:	d9f4      	bls.n	800a07c <_printf_i+0x110>
 800a092:	2b08      	cmp	r3, #8
 800a094:	d10b      	bne.n	800a0ae <_printf_i+0x142>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	07df      	lsls	r7, r3, #31
 800a09a:	d508      	bpl.n	800a0ae <_printf_i+0x142>
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	6861      	ldr	r1, [r4, #4]
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	bfde      	ittt	le
 800a0a4:	2330      	movle	r3, #48	@ 0x30
 800a0a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0ae:	1b92      	subs	r2, r2, r6
 800a0b0:	6122      	str	r2, [r4, #16]
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	aa03      	add	r2, sp, #12
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	f8cd a000 	str.w	sl, [sp]
 800a0be:	f7ff fee3 	bl	8009e88 <_printf_common>
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d14a      	bne.n	800a15c <_printf_i+0x1f0>
 800a0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ca:	b004      	add	sp, #16
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	f043 0320 	orr.w	r3, r3, #32
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	2778      	movs	r7, #120	@ 0x78
 800a0da:	4832      	ldr	r0, [pc, #200]	@ (800a1a4 <_printf_i+0x238>)
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0e2:	061f      	lsls	r7, r3, #24
 800a0e4:	6831      	ldr	r1, [r6, #0]
 800a0e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0ea:	d402      	bmi.n	800a0f2 <_printf_i+0x186>
 800a0ec:	065f      	lsls	r7, r3, #25
 800a0ee:	bf48      	it	mi
 800a0f0:	b2ad      	uxthmi	r5, r5
 800a0f2:	6031      	str	r1, [r6, #0]
 800a0f4:	07d9      	lsls	r1, r3, #31
 800a0f6:	bf44      	itt	mi
 800a0f8:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fc:	6023      	strmi	r3, [r4, #0]
 800a0fe:	b11d      	cbz	r5, 800a108 <_printf_i+0x19c>
 800a100:	2310      	movs	r3, #16
 800a102:	e7ad      	b.n	800a060 <_printf_i+0xf4>
 800a104:	4826      	ldr	r0, [pc, #152]	@ (800a1a0 <_printf_i+0x234>)
 800a106:	e7e9      	b.n	800a0dc <_printf_i+0x170>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	f023 0320 	bic.w	r3, r3, #32
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	e7f6      	b.n	800a100 <_printf_i+0x194>
 800a112:	4616      	mov	r6, r2
 800a114:	e7bd      	b.n	800a092 <_printf_i+0x126>
 800a116:	6833      	ldr	r3, [r6, #0]
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1d18      	adds	r0, r3, #4
 800a11c:	6961      	ldr	r1, [r4, #20]
 800a11e:	6030      	str	r0, [r6, #0]
 800a120:	062e      	lsls	r6, r5, #24
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	d501      	bpl.n	800a12a <_printf_i+0x1be>
 800a126:	6019      	str	r1, [r3, #0]
 800a128:	e002      	b.n	800a130 <_printf_i+0x1c4>
 800a12a:	0668      	lsls	r0, r5, #25
 800a12c:	d5fb      	bpl.n	800a126 <_printf_i+0x1ba>
 800a12e:	8019      	strh	r1, [r3, #0]
 800a130:	2300      	movs	r3, #0
 800a132:	4616      	mov	r6, r2
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	e7bc      	b.n	800a0b2 <_printf_i+0x146>
 800a138:	6833      	ldr	r3, [r6, #0]
 800a13a:	2100      	movs	r1, #0
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	6032      	str	r2, [r6, #0]
 800a140:	681e      	ldr	r6, [r3, #0]
 800a142:	6862      	ldr	r2, [r4, #4]
 800a144:	4630      	mov	r0, r6
 800a146:	f000 f859 	bl	800a1fc <memchr>
 800a14a:	b108      	cbz	r0, 800a150 <_printf_i+0x1e4>
 800a14c:	1b80      	subs	r0, r0, r6
 800a14e:	6060      	str	r0, [r4, #4]
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	2300      	movs	r3, #0
 800a156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a15a:	e7aa      	b.n	800a0b2 <_printf_i+0x146>
 800a15c:	6923      	ldr	r3, [r4, #16]
 800a15e:	4632      	mov	r2, r6
 800a160:	4649      	mov	r1, r9
 800a162:	4640      	mov	r0, r8
 800a164:	47d0      	blx	sl
 800a166:	3001      	adds	r0, #1
 800a168:	d0ad      	beq.n	800a0c6 <_printf_i+0x15a>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	079b      	lsls	r3, r3, #30
 800a16e:	d413      	bmi.n	800a198 <_printf_i+0x22c>
 800a170:	68e0      	ldr	r0, [r4, #12]
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	4298      	cmp	r0, r3
 800a176:	bfb8      	it	lt
 800a178:	4618      	movlt	r0, r3
 800a17a:	e7a6      	b.n	800a0ca <_printf_i+0x15e>
 800a17c:	2301      	movs	r3, #1
 800a17e:	4632      	mov	r2, r6
 800a180:	4649      	mov	r1, r9
 800a182:	4640      	mov	r0, r8
 800a184:	47d0      	blx	sl
 800a186:	3001      	adds	r0, #1
 800a188:	d09d      	beq.n	800a0c6 <_printf_i+0x15a>
 800a18a:	3501      	adds	r5, #1
 800a18c:	68e3      	ldr	r3, [r4, #12]
 800a18e:	9903      	ldr	r1, [sp, #12]
 800a190:	1a5b      	subs	r3, r3, r1
 800a192:	42ab      	cmp	r3, r5
 800a194:	dcf2      	bgt.n	800a17c <_printf_i+0x210>
 800a196:	e7eb      	b.n	800a170 <_printf_i+0x204>
 800a198:	2500      	movs	r5, #0
 800a19a:	f104 0619 	add.w	r6, r4, #25
 800a19e:	e7f5      	b.n	800a18c <_printf_i+0x220>
 800a1a0:	0800a4c9 	.word	0x0800a4c9
 800a1a4:	0800a4da 	.word	0x0800a4da

0800a1a8 <memmove>:
 800a1a8:	4288      	cmp	r0, r1
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	eb01 0402 	add.w	r4, r1, r2
 800a1b0:	d902      	bls.n	800a1b8 <memmove+0x10>
 800a1b2:	4284      	cmp	r4, r0
 800a1b4:	4623      	mov	r3, r4
 800a1b6:	d807      	bhi.n	800a1c8 <memmove+0x20>
 800a1b8:	1e43      	subs	r3, r0, #1
 800a1ba:	42a1      	cmp	r1, r4
 800a1bc:	d008      	beq.n	800a1d0 <memmove+0x28>
 800a1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1c6:	e7f8      	b.n	800a1ba <memmove+0x12>
 800a1c8:	4402      	add	r2, r0
 800a1ca:	4601      	mov	r1, r0
 800a1cc:	428a      	cmp	r2, r1
 800a1ce:	d100      	bne.n	800a1d2 <memmove+0x2a>
 800a1d0:	bd10      	pop	{r4, pc}
 800a1d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1da:	e7f7      	b.n	800a1cc <memmove+0x24>

0800a1dc <_sbrk_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4d05      	ldr	r5, [pc, #20]	@ (800a1f8 <_sbrk_r+0x1c>)
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	602b      	str	r3, [r5, #0]
 800a1e8:	f7f7 fc4e 	bl	8001a88 <_sbrk>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d102      	bne.n	800a1f6 <_sbrk_r+0x1a>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	b103      	cbz	r3, 800a1f6 <_sbrk_r+0x1a>
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	200005f8 	.word	0x200005f8

0800a1fc <memchr>:
 800a1fc:	b2c9      	uxtb	r1, r1
 800a1fe:	4603      	mov	r3, r0
 800a200:	4402      	add	r2, r0
 800a202:	b510      	push	{r4, lr}
 800a204:	4293      	cmp	r3, r2
 800a206:	4618      	mov	r0, r3
 800a208:	d101      	bne.n	800a20e <memchr+0x12>
 800a20a:	2000      	movs	r0, #0
 800a20c:	e003      	b.n	800a216 <memchr+0x1a>
 800a20e:	7804      	ldrb	r4, [r0, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	428c      	cmp	r4, r1
 800a214:	d1f6      	bne.n	800a204 <memchr+0x8>
 800a216:	bd10      	pop	{r4, pc}

0800a218 <memcpy>:
 800a218:	440a      	add	r2, r1
 800a21a:	1e43      	subs	r3, r0, #1
 800a21c:	4291      	cmp	r1, r2
 800a21e:	d100      	bne.n	800a222 <memcpy+0xa>
 800a220:	4770      	bx	lr
 800a222:	b510      	push	{r4, lr}
 800a224:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a228:	4291      	cmp	r1, r2
 800a22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a22e:	d1f9      	bne.n	800a224 <memcpy+0xc>
 800a230:	bd10      	pop	{r4, pc}

0800a232 <_realloc_r>:
 800a232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a236:	4607      	mov	r7, r0
 800a238:	4614      	mov	r4, r2
 800a23a:	460d      	mov	r5, r1
 800a23c:	b921      	cbnz	r1, 800a248 <_realloc_r+0x16>
 800a23e:	4611      	mov	r1, r2
 800a240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a244:	f7ff bc3c 	b.w	8009ac0 <_malloc_r>
 800a248:	b92a      	cbnz	r2, 800a256 <_realloc_r+0x24>
 800a24a:	4625      	mov	r5, r4
 800a24c:	f7ff fbcc 	bl	80099e8 <_free_r>
 800a250:	4628      	mov	r0, r5
 800a252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a256:	f000 f81a 	bl	800a28e <_malloc_usable_size_r>
 800a25a:	4284      	cmp	r4, r0
 800a25c:	4606      	mov	r6, r0
 800a25e:	d802      	bhi.n	800a266 <_realloc_r+0x34>
 800a260:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a264:	d8f4      	bhi.n	800a250 <_realloc_r+0x1e>
 800a266:	4621      	mov	r1, r4
 800a268:	4638      	mov	r0, r7
 800a26a:	f7ff fc29 	bl	8009ac0 <_malloc_r>
 800a26e:	4680      	mov	r8, r0
 800a270:	b908      	cbnz	r0, 800a276 <_realloc_r+0x44>
 800a272:	4645      	mov	r5, r8
 800a274:	e7ec      	b.n	800a250 <_realloc_r+0x1e>
 800a276:	42b4      	cmp	r4, r6
 800a278:	4622      	mov	r2, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	bf28      	it	cs
 800a27e:	4632      	movcs	r2, r6
 800a280:	f7ff ffca 	bl	800a218 <memcpy>
 800a284:	4629      	mov	r1, r5
 800a286:	4638      	mov	r0, r7
 800a288:	f7ff fbae 	bl	80099e8 <_free_r>
 800a28c:	e7f1      	b.n	800a272 <_realloc_r+0x40>

0800a28e <_malloc_usable_size_r>:
 800a28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a292:	1f18      	subs	r0, r3, #4
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfbc      	itt	lt
 800a298:	580b      	ldrlt	r3, [r1, r0]
 800a29a:	18c0      	addlt	r0, r0, r3
 800a29c:	4770      	bx	lr
	...

0800a2a0 <_init>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	bf00      	nop
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr

0800a2ac <_fini>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr
