
SPI2_MDA_Chain_2_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a254  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000257  0800a48c  0800a48c  0000b48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6e4  0800a6e4  0000b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6ec  0800a6ec  0000b6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a6f0  0800a6f0  0000b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800a6f4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f14  2000005c  0800a750  0000c05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000f70  0800a750  0000cf70  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019909  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002788  00000000  00000000  0002599b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e8  00000000  00000000  00028128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d26  00000000  00000000  00029210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a703  00000000  00000000  00029f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017fea  00000000  00000000  00064639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182947  00000000  00000000  0007c623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fef6a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c20  00000000  00000000  001fefb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000093  00000000  00000000  00203bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a474 	.word	0x0800a474

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800a474 	.word	0x0800a474

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	b0d3      	sub	sp, #332	@ 0x14c
 8000608:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060a:	f001 fbbf 	bl	8001d8c <HAL_Init>

							  /* Configure the System Power */
							  //SystemPower_Config();

							  /* Configure the system clock */
							  SystemClock_Config();
 800060e:	f000 f9ad 	bl	800096c <SystemClock_Config>
							  /* USER CODE BEGIN SysInit */

							  /* USER CODE END SysInit */

							  /* Initialize all configured peripherals */
							  MX_GPIO_Init();
 8000612:	f000 fb17 	bl	8000c44 <MX_GPIO_Init>
							  //MX_IWDG_Init();
							  MX_GPDMA1_Init();
 8000616:	f000 fa0f 	bl	8000a38 <MX_GPDMA1_Init>
							  //MX_ICACHE_Init();
							  //MX_RTC_Init();
							  //MX_SAI1_Init();
							  //MX_SDMMC1_SD_Init();
							  //MX_SPI1_Init();
							  MX_SPI2_Init();
 800061a:	f000 fa55 	bl	8000ac8 <MX_SPI2_Init>
							  //MX_SPI3_Init();
							  //MX_TAMP_RTC_Init();
							  //MX_TIM3_Init();
							  MX_USART2_UART_Init();
 800061e:	f000 fac3 	bl	8000ba8 <MX_USART2_UART_Init>
							  //MX_USART3_UART_Init();
							  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */
							  Initialize_Sensors();
 8000622:	f000 fd39 	bl	8001098 <Initialize_Sensors>
							  start_sensor_read_chain();
 8000626:	f000 fe6b 	bl	8001300 <start_sensor_read_chain>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Check if the DMA chain has completed and new data is ready

	      if (g_data_ready) {
 800062a:	4b60      	ldr	r3, [pc, #384]	@ (80007ac <main+0x1a8>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0fa      	beq.n	800062a <main+0x26>
	          g_data_ready = 0; // Clear the flag immediately to wait for the next set
 8000634:	4b5d      	ldr	r3, [pc, #372]	@ (80007ac <main+0x1a8>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]

	          start_sensor_read_chain(); // START THE NEXT READ IMMEDIATELY
 800063a:	f000 fe61 	bl	8001300 <start_sensor_read_chain>


	          // --- 1. Create a new sample and get the timestamp ---
	                  SensorSample_t current_sample;
	                  current_sample.timestamp_ms = HAL_GetTick(); // Get current system time in ms
 800063e:	f001 fc5f 	bl	8001f00 <HAL_GetTick>
 8000642:	4603      	mov	r3, r0
 8000644:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c


	                  // --- 2. Parse raw DMA data directly into the new structure ---
	                          current_sample.iis3dwb_accel.x = (int16_t)((iis3dwb_rx_buffer[1] << 8) | iis3dwb_rx_buffer[0]);
 8000648:	4b59      	ldr	r3, [pc, #356]	@ (80007b0 <main+0x1ac>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	b21b      	sxth	r3, r3
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	b21a      	sxth	r2, r3
 8000652:	4b57      	ldr	r3, [pc, #348]	@ (80007b0 <main+0x1ac>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b21b      	sxth	r3, r3
 8000658:	4313      	orrs	r3, r2
 800065a:	b21b      	sxth	r3, r3
 800065c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
	                          current_sample.iis3dwb_accel.y = (int16_t)((iis3dwb_rx_buffer[3] << 8) | iis3dwb_rx_buffer[2]);
 8000660:	4b53      	ldr	r3, [pc, #332]	@ (80007b0 <main+0x1ac>)
 8000662:	78db      	ldrb	r3, [r3, #3]
 8000664:	b21b      	sxth	r3, r3
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b21a      	sxth	r2, r3
 800066a:	4b51      	ldr	r3, [pc, #324]	@ (80007b0 <main+0x1ac>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	b21b      	sxth	r3, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	b21b      	sxth	r3, r3
 8000674:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
	                          current_sample.iis3dwb_accel.z = (int16_t)((iis3dwb_rx_buffer[5] << 8) | iis3dwb_rx_buffer[4]);
 8000678:	4b4d      	ldr	r3, [pc, #308]	@ (80007b0 <main+0x1ac>)
 800067a:	795b      	ldrb	r3, [r3, #5]
 800067c:	b21b      	sxth	r3, r3
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	4b4b      	ldr	r3, [pc, #300]	@ (80007b0 <main+0x1ac>)
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	b21b      	sxth	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114

	                          current_sample.ism330_gyro.x = (int16_t)((ism330dhcx_rx_buffer[1] << 8) | ism330dhcx_rx_buffer[0]);
 8000690:	4b48      	ldr	r3, [pc, #288]	@ (80007b4 <main+0x1b0>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	b21b      	sxth	r3, r3
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21a      	sxth	r2, r3
 800069a:	4b46      	ldr	r3, [pc, #280]	@ (80007b4 <main+0x1b0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
	                          current_sample.ism330_gyro.y = (int16_t)((ism330dhcx_rx_buffer[3] << 8) | ism330dhcx_rx_buffer[2]);
 80006a8:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <main+0x1b0>)
 80006aa:	78db      	ldrb	r3, [r3, #3]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	4b40      	ldr	r3, [pc, #256]	@ (80007b4 <main+0x1b0>)
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
	                          current_sample.ism330_gyro.z = (int16_t)((ism330dhcx_rx_buffer[5] << 8) | ism330dhcx_rx_buffer[4]);
 80006c0:	4b3c      	ldr	r3, [pc, #240]	@ (80007b4 <main+0x1b0>)
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <main+0x1b0>)
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120

	                          current_sample.ism330_accel.x = (int16_t)((ism330dhcx_rx_buffer[7] << 8) | ism330dhcx_rx_buffer[6]);
 80006d8:	4b36      	ldr	r3, [pc, #216]	@ (80007b4 <main+0x1b0>)
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	b21b      	sxth	r3, r3
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	4b34      	ldr	r3, [pc, #208]	@ (80007b4 <main+0x1b0>)
 80006e4:	799b      	ldrb	r3, [r3, #6]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
	                          current_sample.ism330_accel.y = (int16_t)((ism330dhcx_rx_buffer[9] << 8) | ism330dhcx_rx_buffer[8]);
 80006f0:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <main+0x1b0>)
 80006f2:	7a5b      	ldrb	r3, [r3, #9]
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <main+0x1b0>)
 80006fc:	7a1b      	ldrb	r3, [r3, #8]
 80006fe:	b21b      	sxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b21b      	sxth	r3, r3
 8000704:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	                          current_sample.ism330_accel.z = (int16_t)((ism330dhcx_rx_buffer[11] << 8) | ism330dhcx_rx_buffer[10]);
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <main+0x1b0>)
 800070a:	7adb      	ldrb	r3, [r3, #11]
 800070c:	b21b      	sxth	r3, r3
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <main+0x1b0>)
 8000714:	7a9b      	ldrb	r3, [r3, #10]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b21b      	sxth	r3, r3
 800071c:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a



	                          // --- 3. Add the new sample to the circular buffer ---
									  circular_buffer[buffer_head] = current_sample;
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <main+0x1b4>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4925      	ldr	r1, [pc, #148]	@ (80007bc <main+0x1b8>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	440b      	add	r3, r1
 8000730:	461d      	mov	r5, r3
 8000732:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8000736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800073e:	e885 0003 	stmia.w	r5, {r0, r1}
									  buffer_head = (buffer_head + 1) % CIRCULAR_BUFFER_SIZE;
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <main+0x1b4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <main+0x1bc>)
 800074a:	fba3 1302 	umull	r1, r3, r3, r2
 800074e:	095b      	lsrs	r3, r3, #5
 8000750:	2164      	movs	r1, #100	@ 0x64
 8000752:	fb01 f303 	mul.w	r3, r1, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <main+0x1b4>)
 800075a:	6013      	str	r3, [r2, #0]
									  if (buffer_count < CIRCULAR_BUFFER_SIZE) {
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <main+0x1c0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b63      	cmp	r3, #99	@ 0x63
 8000762:	d804      	bhi.n	800076e <main+0x16a>
										  buffer_count++;
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <main+0x1c0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <main+0x1c0>)
 800076c:	6013      	str	r3, [r2, #0]
									  }


									  // --- 4. Log the new structured data to UART ---
									  // Check if the buffer is full
									      if (buffer_count >= CIRCULAR_BUFFER_SIZE) {
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <main+0x1c0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b63      	cmp	r3, #99	@ 0x63
 8000774:	f240 80ce 	bls.w	8000914 <main+0x310>
									          char uart_buf[250];

									          // Signal that a full window is ready for processing/inference
									          sprintf(uart_buf, "--- BUFFER FULL: Logging %d samples ---\r\n", CIRCULAR_BUFFER_SIZE);
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2264      	movs	r2, #100	@ 0x64
 800077e:	4912      	ldr	r1, [pc, #72]	@ (80007c8 <main+0x1c4>)
 8000780:	4618      	mov	r0, r3
 8000782:	f009 f9c5 	bl	8009b10 <siprintf>
									          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd74 	bl	8000278 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	b29a      	uxth	r2, r3
 8000794:	f107 0110 	add.w	r1, r7, #16
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <main+0x1c8>)
 800079e:	f008 fc55 	bl	800904c <HAL_UART_Transmit>

									          // Loop through the buffer and print all the collected data
									             for (int i = 0; i < CIRCULAR_BUFFER_SIZE; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80007a8:	e0ac      	b.n	8000904 <main+0x300>
 80007aa:	bf00      	nop
 80007ac:	20000e18 	.word	0x20000e18
 80007b0:	20000e04 	.word	0x20000e04
 80007b4:	20000e0c 	.word	0x20000e0c
 80007b8:	20000dcc 	.word	0x20000dcc
 80007bc:	2000046c 	.word	0x2000046c
 80007c0:	51eb851f 	.word	0x51eb851f
 80007c4:	20000dd0 	.word	0x20000dd0
 80007c8:	0800a48c 	.word	0x0800a48c
 80007cc:	200003d8 	.word	0x200003d8
									                 // This reuses the same parsing logic to format each sample for printing
									                 sprintf(uart_buf,
 80007d0:	4961      	ldr	r1, [pc, #388]	@ (8000958 <main+0x354>)
 80007d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	440b      	add	r3, r1
 80007e0:	6819      	ldr	r1, [r3, #0]
									                         "T:%lu | DWB_A:%d,%d,%d | DHCX_G:%d,%d,%d | DHCX_A:%d,%d,%d\r\n",
									                         circular_buffer[i].timestamp_ms,
									                         circular_buffer[i].iis3dwb_accel.x, circular_buffer[i].iis3dwb_accel.y, circular_buffer[i].iis3dwb_accel.z,
 80007e2:	485d      	ldr	r0, [pc, #372]	@ (8000958 <main+0x354>)
 80007e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4403      	add	r3, r0
 80007f2:	3304      	adds	r3, #4
 80007f4:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 80007f8:	469c      	mov	ip, r3
									                         circular_buffer[i].iis3dwb_accel.x, circular_buffer[i].iis3dwb_accel.y, circular_buffer[i].iis3dwb_accel.z,
 80007fa:	4857      	ldr	r0, [pc, #348]	@ (8000958 <main+0x354>)
 80007fc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4403      	add	r3, r0
 800080a:	3306      	adds	r3, #6
 800080c:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 8000810:	461c      	mov	r4, r3
									                         circular_buffer[i].iis3dwb_accel.x, circular_buffer[i].iis3dwb_accel.y, circular_buffer[i].iis3dwb_accel.z,
 8000812:	4851      	ldr	r0, [pc, #324]	@ (8000958 <main+0x354>)
 8000814:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	4403      	add	r3, r0
 8000822:	3308      	adds	r3, #8
 8000824:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 8000828:	461d      	mov	r5, r3
									                         circular_buffer[i].ism330_gyro.x, circular_buffer[i].ism330_gyro.y, circular_buffer[i].ism330_gyro.z,
 800082a:	484b      	ldr	r0, [pc, #300]	@ (8000958 <main+0x354>)
 800082c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4403      	add	r3, r0
 800083a:	3310      	adds	r3, #16
 800083c:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 8000840:	461e      	mov	r6, r3
									                         circular_buffer[i].ism330_gyro.x, circular_buffer[i].ism330_gyro.y, circular_buffer[i].ism330_gyro.z,
 8000842:	4845      	ldr	r0, [pc, #276]	@ (8000958 <main+0x354>)
 8000844:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4403      	add	r3, r0
 8000852:	3312      	adds	r3, #18
 8000854:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 8000858:	60fb      	str	r3, [r7, #12]
									                         circular_buffer[i].ism330_gyro.x, circular_buffer[i].ism330_gyro.y, circular_buffer[i].ism330_gyro.z,
 800085a:	483f      	ldr	r0, [pc, #252]	@ (8000958 <main+0x354>)
 800085c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	4403      	add	r3, r0
 800086a:	3314      	adds	r3, #20
 800086c:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 8000870:	60bb      	str	r3, [r7, #8]
									                         circular_buffer[i].ism330_accel.x, circular_buffer[i].ism330_accel.y, circular_buffer[i].ism330_accel.z);
 8000872:	4839      	ldr	r0, [pc, #228]	@ (8000958 <main+0x354>)
 8000874:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4403      	add	r3, r0
 8000882:	330a      	adds	r3, #10
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 8000888:	607b      	str	r3, [r7, #4]
									                         circular_buffer[i].ism330_accel.x, circular_buffer[i].ism330_accel.y, circular_buffer[i].ism330_accel.z);
 800088a:	4833      	ldr	r0, [pc, #204]	@ (8000958 <main+0x354>)
 800088c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	4403      	add	r3, r0
 800089a:	330c      	adds	r3, #12
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 80008a0:	603b      	str	r3, [r7, #0]
									                         circular_buffer[i].ism330_accel.x, circular_buffer[i].ism330_accel.y, circular_buffer[i].ism330_accel.z);
 80008a2:	482d      	ldr	r0, [pc, #180]	@ (8000958 <main+0x354>)
 80008a4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	4403      	add	r3, r0
 80008b2:	330e      	adds	r3, #14
 80008b4:	f9b3 3000 	ldrsh.w	r3, [r3]
									                 sprintf(uart_buf,
 80008b8:	f107 0010 	add.w	r0, r7, #16
 80008bc:	9307      	str	r3, [sp, #28]
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	9206      	str	r2, [sp, #24]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	9205      	str	r2, [sp, #20]
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	9204      	str	r2, [sp, #16]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	9303      	str	r3, [sp, #12]
 80008ce:	9602      	str	r6, [sp, #8]
 80008d0:	9501      	str	r5, [sp, #4]
 80008d2:	9400      	str	r4, [sp, #0]
 80008d4:	4663      	mov	r3, ip
 80008d6:	460a      	mov	r2, r1
 80008d8:	4920      	ldr	r1, [pc, #128]	@ (800095c <main+0x358>)
 80008da:	f009 f919 	bl	8009b10 <siprintf>
									                 HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fcc8 	bl	8000278 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f107 0110 	add.w	r1, r7, #16
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
 80008f4:	481a      	ldr	r0, [pc, #104]	@ (8000960 <main+0x35c>)
 80008f6:	f008 fba9 	bl	800904c <HAL_UART_Transmit>
									             for (int i = 0; i < CIRCULAR_BUFFER_SIZE; i++) {
 80008fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80008fe:	3301      	adds	r3, #1
 8000900:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000904:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000908:	2b63      	cmp	r3, #99	@ 0x63
 800090a:	f77f af61 	ble.w	80007d0 <main+0x1cc>
									             }

									             // Reset the count to start collecting the next window of data
									             buffer_count = 0;
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <main+0x360>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
									         }

									          // --- 5. Check if the buffer is full (ready for inference) ---
									                 if (buffer_count >= CIRCULAR_BUFFER_SIZE) {
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <main+0x360>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b63      	cmp	r3, #99	@ 0x63
 800091a:	f67f ae86 	bls.w	800062a <main+0x26>
									                     // This is where you would trigger the model inference.
									                     // For now, we'll just print a message and you can decide how to handle it.
									                     char msg[] = "BUFFER FULL: Ready for inference.\r\n";
 800091e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000922:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <main+0x364>)
 8000928:	461c      	mov	r4, r3
 800092a:	4615      	mov	r5, r2
 800092c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	6023      	str	r3, [r4, #0]
									                     HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc9b 	bl	8000278 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0110 	add.w	r1, r7, #16
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <main+0x35c>)
 8000950:	f008 fb7c 	bl	800904c <HAL_UART_Transmit>
	      if (g_data_ready) {
 8000954:	e669      	b.n	800062a <main+0x26>
 8000956:	bf00      	nop
 8000958:	2000046c 	.word	0x2000046c
 800095c:	0800a4b8 	.word	0x0800a4b8
 8000960:	200003d8 	.word	0x200003d8
 8000964:	20000dd0 	.word	0x20000dd0
 8000968:	0800a4f8 	.word	0x0800a4f8

0800096c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b09e      	sub	sp, #120	@ 0x78
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	2260      	movs	r2, #96	@ 0x60
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f009 f8ea 	bl	8009b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000990:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000994:	f002 fe06 	bl	80035a4 <HAL_PWREx_ControlVoltageScaling>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800099e:	f000 fd33 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80009a2:	232b      	movs	r3, #43	@ 0x2b
 80009a4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	2303      	movs	r3, #3
 80009cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009d6:	230a      	movs	r3, #10
 80009d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009da:	2302      	movs	r3, #2
 80009dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80009e6:	230c      	movs	r3, #12
 80009e8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fe92 	bl	800371c <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009fe:	f000 fd03 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	231f      	movs	r3, #31
 8000a04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2303      	movs	r3, #3
 8000a08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fd58 	bl	80044d4 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a2a:	f000 fced 	bl	8001408 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3778      	adds	r7, #120	@ 0x78
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <MX_GPDMA1_Init>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <MX_GPDMA1_Init+0x8c>)
 8000a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a44:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <MX_GPDMA1_Init+0x8c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_GPDMA1_Init+0x8c>)
 8000a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	201d      	movs	r0, #29
 8000a62:	f001 fb35 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000a66:	201d      	movs	r0, #29
 8000a68:	f001 fb4c 	bl	8002104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	201e      	movs	r0, #30
 8000a72:	f001 fb2d 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000a76:	201e      	movs	r0, #30
 8000a78:	f001 fb44 	bl	8002104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	201f      	movs	r0, #31
 8000a82:	f001 fb25 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000a86:	201f      	movs	r0, #31
 8000a88:	f001 fb3c 	bl	8002104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2020      	movs	r0, #32
 8000a92:	f001 fb1d 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000a96:	2020      	movs	r0, #32
 8000a98:	f001 fb34 	bl	8002104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2021      	movs	r0, #33	@ 0x21
 8000aa2:	f001 fb15 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8000aa6:	2021      	movs	r0, #33	@ 0x21
 8000aa8:	f001 fb2c 	bl	8002104 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2022      	movs	r0, #34	@ 0x22
 8000ab2:	f001 fb0d 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8000ab6:	2022      	movs	r0, #34	@ 0x22
 8000ab8:	f001 fb24 	bl	8002104 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	46020c00 	.word	0x46020c00

08000ac8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000ada:	4a31      	ldr	r2, [pc, #196]	@ (8000ba0 <MX_SPI2_Init+0xd8>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000ae0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000aee:	2207      	movs	r2, #7
 8000af0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af8:	4b28      	ldr	r3, [pc, #160]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b00:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b06:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b08:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b66:	f006 fd65 	bl	8007634 <HAL_SPI_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000b70:	f000 fc4a 	bl	8001408 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_SPI2_Init+0xdc>)
 8000b7a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_SPI2_Init+0xd4>)
 8000b86:	f008 f9d0 	bl	8008f2a <HAL_SPIEx_SetConfigAutonomousMode>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000b90:	f000 fc3a 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000258 	.word	0x20000258
 8000ba0:	40003800 	.word	0x40003800
 8000ba4:	10010000 	.word	0x10010000

08000ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b23      	ldr	r3, [pc, #140]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bae:	4a24      	ldr	r2, [pc, #144]	@ (8000c40 <MX_USART2_UART_Init+0x98>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4812      	ldr	r0, [pc, #72]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000bf4:	f008 f9da 	bl	8008fac <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000bfe:	f000 fc03 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000c06:	f008 feb9 	bl	800997c <HAL_UARTEx_SetTxFifoThreshold>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c10:	f000 fbfa 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000c18:	f008 feee 	bl	80099f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c22:	f000 fbf1 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USART2_UART_Init+0x94>)
 8000c28:	f008 fe6f 	bl	800990a <HAL_UARTEx_DisableFifoMode>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c32:	f000 fbe9 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200003d8 	.word	0x200003d8
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	@ 0x38
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	4bbf      	ldr	r3, [pc, #764]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c60:	4abd      	ldr	r2, [pc, #756]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c6a:	4bbb      	ldr	r3, [pc, #748]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c78:	4bb7      	ldr	r3, [pc, #732]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c7e:	4ab6      	ldr	r2, [pc, #728]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c88:	4bb3      	ldr	r3, [pc, #716]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	4bb0      	ldr	r3, [pc, #704]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9c:	4aae      	ldr	r2, [pc, #696]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ca6:	4bac      	ldr	r3, [pc, #688]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4ba8      	ldr	r3, [pc, #672]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cba:	4aa7      	ldr	r2, [pc, #668]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cc4:	4ba4      	ldr	r3, [pc, #656]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4ba1      	ldr	r3, [pc, #644]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd8:	4a9f      	ldr	r2, [pc, #636]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ce2:	4b9d      	ldr	r3, [pc, #628]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf0:	4b99      	ldr	r3, [pc, #612]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf6:	4a98      	ldr	r2, [pc, #608]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d00:	4b95      	ldr	r3, [pc, #596]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b92      	ldr	r3, [pc, #584]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d14:	4a90      	ldr	r2, [pc, #576]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d1e:	4b8e      	ldr	r3, [pc, #568]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b8a      	ldr	r3, [pc, #552]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d32:	4a89      	ldr	r2, [pc, #548]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d3c:	4b86      	ldr	r3, [pc, #536]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b83      	ldr	r3, [pc, #524]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d50:	4a81      	ldr	r2, [pc, #516]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f58 <MX_GPIO_Init+0x314>)
 8000d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d60:	f003 0320 	and.w	r3, r3, #32
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8000d6e:	487b      	ldr	r0, [pc, #492]	@ (8000f5c <MX_GPIO_Init+0x318>)
 8000d70:	f002 fbc4 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2181      	movs	r1, #129	@ 0x81
 8000d78:	4879      	ldr	r0, [pc, #484]	@ (8000f60 <MX_GPIO_Init+0x31c>)
 8000d7a:	f002 fbbf 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000d84:	4875      	ldr	r0, [pc, #468]	@ (8000f5c <MX_GPIO_Init+0x318>)
 8000d86:	f002 fbb9 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4875      	ldr	r0, [pc, #468]	@ (8000f64 <MX_GPIO_Init+0x320>)
 8000d90:	f002 fbb4 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d9a:	4873      	ldr	r0, [pc, #460]	@ (8000f68 <MX_GPIO_Init+0x324>)
 8000d9c:	f002 fbae 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8000da0:	2340      	movs	r3, #64	@ 0x40
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	4b71      	ldr	r3, [pc, #452]	@ (8000f6c <MX_GPIO_Init+0x328>)
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	486b      	ldr	r0, [pc, #428]	@ (8000f60 <MX_GPIO_Init+0x31c>)
 8000db4:	f002 f9c2 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8000db8:	f248 0362 	movw	r3, #32866	@ 0x8062
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4868      	ldr	r0, [pc, #416]	@ (8000f70 <MX_GPIO_Init+0x32c>)
 8000dce:	f002 f9b5 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 8000dd2:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	485c      	ldr	r0, [pc, #368]	@ (8000f5c <MX_GPIO_Init+0x318>)
 8000dec:	f002 f9a6 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8000df0:	2324      	movs	r3, #36	@ 0x24
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df4:	2303      	movs	r3, #3
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4857      	ldr	r0, [pc, #348]	@ (8000f60 <MX_GPIO_Init+0x31c>)
 8000e04:	f002 f99a 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8000e08:	f24a 2301 	movw	r3, #41473	@ 0xa201
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4855      	ldr	r0, [pc, #340]	@ (8000f74 <MX_GPIO_Init+0x330>)
 8000e1e:	f002 f98d 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8000e22:	2381      	movs	r3, #129	@ 0x81
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4849      	ldr	r0, [pc, #292]	@ (8000f60 <MX_GPIO_Init+0x31c>)
 8000e3a:	f002 f97f 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	4843      	ldr	r0, [pc, #268]	@ (8000f64 <MX_GPIO_Init+0x320>)
 8000e56:	f002 f971 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 8000e5a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	483b      	ldr	r0, [pc, #236]	@ (8000f5c <MX_GPIO_Init+0x318>)
 8000e70:	f002 f964 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8000e74:	2381      	movs	r3, #129	@ 0x81
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e78:	4b3c      	ldr	r3, [pc, #240]	@ (8000f6c <MX_GPIO_Init+0x328>)
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4837      	ldr	r0, [pc, #220]	@ (8000f64 <MX_GPIO_Init+0x320>)
 8000e88:	f002 f958 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8000e8c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e92:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <MX_GPIO_Init+0x328>)
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4835      	ldr	r0, [pc, #212]	@ (8000f78 <MX_GPIO_Init+0x334>)
 8000ea2:	f002 f94b 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8000ea6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eac:	2303      	movs	r3, #3
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	482b      	ldr	r0, [pc, #172]	@ (8000f68 <MX_GPIO_Init+0x324>)
 8000ebc:	f002 f93e 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8000ec0:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec6:	4b29      	ldr	r3, [pc, #164]	@ (8000f6c <MX_GPIO_Init+0x328>)
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4824      	ldr	r0, [pc, #144]	@ (8000f68 <MX_GPIO_Init+0x324>)
 8000ed6:	f002 f931 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 8000eda:	f240 1301 	movw	r3, #257	@ 0x101
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4823      	ldr	r0, [pc, #140]	@ (8000f7c <MX_GPIO_Init+0x338>)
 8000ef0:	f002 f924 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	481e      	ldr	r0, [pc, #120]	@ (8000f80 <MX_GPIO_Init+0x33c>)
 8000f08:	f002 f918 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4810      	ldr	r0, [pc, #64]	@ (8000f68 <MX_GPIO_Init+0x324>)
 8000f26:	f002 f909 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <MX_GPIO_Init+0x328>)
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_GPIO_Init+0x330>)
 8000f40:	f002 f8fc 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8000f44:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f56:	e015      	b.n	8000f84 <MX_GPIO_Init+0x340>
 8000f58:	46020c00 	.word	0x46020c00
 8000f5c:	42021c00 	.word	0x42021c00
 8000f60:	42022000 	.word	0x42022000
 8000f64:	42021000 	.word	0x42021000
 8000f68:	42021400 	.word	0x42021400
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	42021800 	.word	0x42021800
 8000f74:	42020c00 	.word	0x42020c00
 8000f78:	42020400 	.word	0x42020400
 8000f7c:	42020000 	.word	0x42020000
 8000f80:	42020800 	.word	0x42020800
 8000f84:	4619      	mov	r1, r3
 8000f86:	4842      	ldr	r0, [pc, #264]	@ (8001090 <MX_GPIO_Init+0x44c>)
 8000f88:	f002 f8d8 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8000f8c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483c      	ldr	r0, [pc, #240]	@ (8001094 <MX_GPIO_Init+0x450>)
 8000fa2:	f002 f8cb 	bl	800313c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2107      	movs	r1, #7
 8000faa:	200b      	movs	r0, #11
 8000fac:	f001 f890 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fb0:	200b      	movs	r0, #11
 8000fb2:	f001 f8a7 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2107      	movs	r1, #7
 8000fba:	200c      	movs	r0, #12
 8000fbc:	f001 f888 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fc0:	200c      	movs	r0, #12
 8000fc2:	f001 f89f 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2107      	movs	r1, #7
 8000fca:	200d      	movs	r0, #13
 8000fcc:	f001 f880 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fd0:	200d      	movs	r0, #13
 8000fd2:	f001 f897 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2107      	movs	r1, #7
 8000fda:	200e      	movs	r0, #14
 8000fdc:	f001 f878 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fe0:	200e      	movs	r0, #14
 8000fe2:	f001 f88f 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2107      	movs	r1, #7
 8000fea:	200f      	movs	r0, #15
 8000fec:	f001 f870 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f001 f887 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	2010      	movs	r0, #16
 8000ffc:	f001 f868 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001000:	2010      	movs	r0, #16
 8001002:	f001 f87f 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2107      	movs	r1, #7
 800100a:	2011      	movs	r0, #17
 800100c:	f001 f860 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8001010:	2011      	movs	r0, #17
 8001012:	f001 f877 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2107      	movs	r1, #7
 800101a:	2012      	movs	r0, #18
 800101c:	f001 f858 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8001020:	2012      	movs	r0, #18
 8001022:	f001 f86f 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2107      	movs	r1, #7
 800102a:	2013      	movs	r0, #19
 800102c:	f001 f850 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001030:	2013      	movs	r0, #19
 8001032:	f001 f867 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2107      	movs	r1, #7
 800103a:	2014      	movs	r0, #20
 800103c:	f001 f848 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8001040:	2014      	movs	r0, #20
 8001042:	f001 f85f 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2107      	movs	r1, #7
 800104a:	2015      	movs	r0, #21
 800104c:	f001 f840 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001050:	2015      	movs	r0, #21
 8001052:	f001 f857 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2107      	movs	r1, #7
 800105a:	2016      	movs	r0, #22
 800105c:	f001 f838 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001060:	2016      	movs	r0, #22
 8001062:	f001 f84f 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2107      	movs	r1, #7
 800106a:	2018      	movs	r0, #24
 800106c:	f001 f830 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001070:	2018      	movs	r0, #24
 8001072:	f001 f847 	bl	8002104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2107      	movs	r1, #7
 800107a:	2019      	movs	r0, #25
 800107c:	f001 f828 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8001080:	2019      	movs	r0, #25
 8001082:	f001 f83f 	bl	8002104 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3738      	adds	r7, #56	@ 0x38
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	42020400 	.word	0x42020400
 8001094:	42021000 	.word	0x42021000

08001098 <Initialize_Sensors>:

/* USER CODE BEGIN 4 */

void Initialize_Sensors(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b0a0      	sub	sp, #128	@ 0x80
 800109c:	af02      	add	r7, sp, #8
    char uart_buf[100];
    uint8_t tx_data[2];

    uint8_t who_am_i_val = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    // Buffers for the 2-byte SPI read transaction
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];


    tx_buf[0] = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit
 80010a4:	238f      	movs	r3, #143	@ 0x8f
 80010a6:	723b      	strb	r3, [r7, #8]
    tx_buf[1] = 0x00;        // Dummy byte to clock in the data
 80010a8:	2300      	movs	r3, #0
 80010aa:	727b      	strb	r3, [r7, #9]
    // First, check WHO_AM_I to confirm communication
    // Note: The custom iis3dwb_read_reg() is replaced with direct HAL calls for clarity.
    //uint8_t read_cmd = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit


    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010b2:	488b      	ldr	r0, [pc, #556]	@ (80012e0 <Initialize_Sensors+0x248>)
 80010b4:	f002 fa22 	bl	80034fc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, tx_buf, rx_buf, 2, HAL_MAX_DELAY);
 80010b8:	1d3a      	adds	r2, r7, #4
 80010ba:	f107 0108 	add.w	r1, r7, #8
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2302      	movs	r3, #2
 80010c6:	4887      	ldr	r0, [pc, #540]	@ (80012e4 <Initialize_Sensors+0x24c>)
 80010c8:	f006 fdde 	bl	8007c88 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010d2:	4883      	ldr	r0, [pc, #524]	@ (80012e0 <Initialize_Sensors+0x248>)
 80010d4:	f002 fa12 	bl	80034fc <HAL_GPIO_WritePin>

    who_am_i_val = rx_buf[1]; // The actual data is in the second byte received
 80010d8:	797b      	ldrb	r3, [r7, #5]
 80010da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    if (who_am_i_val == 0x7B) {
 80010de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80010e2:	2b7b      	cmp	r3, #123	@ 0x7b
 80010e4:	d146      	bne.n	8001174 <Initialize_Sensors+0xdc>
        sprintf(uart_buf, "IIS3DWB WHO_AM_I: OK (0x%X)\r\n", who_am_i_val);
 80010e6:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	497e      	ldr	r1, [pc, #504]	@ (80012e8 <Initialize_Sensors+0x250>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f008 fd0d 	bl	8009b10 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f8bc 	bl	8000278 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	f107 0110 	add.w	r1, r7, #16
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	4877      	ldr	r0, [pc, #476]	@ (80012ec <Initialize_Sensors+0x254>)
 800110e:	f007 ff9d 	bl	800904c <HAL_UART_Transmit>

        // CRITICAL: Enable Address Auto-Increment for multi-byte reads
        tx_data[0] = 0x12; // CTRL3_C Register Address
 8001112:	2312      	movs	r3, #18
 8001114:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x04; // Set IF_INC bit (Bit 2) to 1
 8001116:	2304      	movs	r3, #4
 8001118:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001120:	486f      	ldr	r0, [pc, #444]	@ (80012e0 <Initialize_Sensors+0x248>)
 8001122:	f002 f9eb 	bl	80034fc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 8001126:	f107 010c 	add.w	r1, r7, #12
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2202      	movs	r2, #2
 8001130:	486c      	ldr	r0, [pc, #432]	@ (80012e4 <Initialize_Sensors+0x24c>)
 8001132:	f006 fb95 	bl	8007860 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113c:	4868      	ldr	r0, [pc, #416]	@ (80012e0 <Initialize_Sensors+0x248>)
 800113e:	f002 f9dd 	bl	80034fc <HAL_GPIO_WritePin>

        // WAKE UP SENSOR: Set ODR to 416 Hz (as per your 0xA0 value)
        tx_data[0] = 0x10; // CTRL1_XL Register Address
 8001142:	2310      	movs	r3, #16
 8001144:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x60; // Using 0x60 for 416Hz as a common value. Your 0xA0 is also fine.
 8001146:	2360      	movs	r3, #96	@ 0x60
 8001148:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001150:	4863      	ldr	r0, [pc, #396]	@ (80012e0 <Initialize_Sensors+0x248>)
 8001152:	f002 f9d3 	bl	80034fc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 8001156:	f107 010c 	add.w	r1, r7, #12
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	2202      	movs	r2, #2
 8001160:	4860      	ldr	r0, [pc, #384]	@ (80012e4 <Initialize_Sensors+0x24c>)
 8001162:	f006 fb7d 	bl	8007860 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800116c:	485c      	ldr	r0, [pc, #368]	@ (80012e0 <Initialize_Sensors+0x248>)
 800116e:	f002 f9c5 	bl	80034fc <HAL_GPIO_WritePin>
 8001172:	e017      	b.n	80011a4 <Initialize_Sensors+0x10c>

    } else {
        sprintf(uart_buf, "IIS3DWB WHO_AM_I: FAILED! Got 0x%X\r\n", who_am_i_val);
 8001174:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	495c      	ldr	r1, [pc, #368]	@ (80012f0 <Initialize_Sensors+0x258>)
 800117e:	4618      	mov	r0, r3
 8001180:	f008 fcc6 	bl	8009b10 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f875 	bl	8000278 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	f107 0110 	add.w	r1, r7, #16
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	4854      	ldr	r0, [pc, #336]	@ (80012ec <Initialize_Sensors+0x254>)
 800119c:	f007 ff56 	bl	800904c <HAL_UART_Transmit>
        Error_Handler();
 80011a0:	f000 f932 	bl	8001408 <Error_Handler>

    // --- 2. VERIFY AND CONFIGURE ISM330DHCX ---

    // Check WHO_AM_I

    tx_buf[0] = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit
 80011a4:	238f      	movs	r3, #143	@ 0x8f
 80011a6:	723b      	strb	r3, [r7, #8]
    tx_buf[1] = 0x00;        // Dummy byte
 80011a8:	2300      	movs	r3, #0
 80011aa:	727b      	strb	r3, [r7, #9]


    //read_cmd = 0x0F | 0x80; // WHO_AM_I Addr (0x0F) + Read Bit
    HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b2:	4850      	ldr	r0, [pc, #320]	@ (80012f4 <Initialize_Sensors+0x25c>)
 80011b4:	f002 f9a2 	bl	80034fc <HAL_GPIO_WritePin>
    // Corrected 2-byte transaction
    HAL_SPI_TransmitReceive(&hspi2, tx_buf,rx_buf, 2, HAL_MAX_DELAY);
 80011b8:	1d3a      	adds	r2, r7, #4
 80011ba:	f107 0108 	add.w	r1, r7, #8
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2302      	movs	r3, #2
 80011c6:	4847      	ldr	r0, [pc, #284]	@ (80012e4 <Initialize_Sensors+0x24c>)
 80011c8:	f006 fd5e 	bl	8007c88 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011d2:	4848      	ldr	r0, [pc, #288]	@ (80012f4 <Initialize_Sensors+0x25c>)
 80011d4:	f002 f992 	bl	80034fc <HAL_GPIO_WritePin>

    who_am_i_val = rx_buf[1]; // The actual data is in the second byte received
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    if (who_am_i_val == 0x6B) {
 80011de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011e2:	2b6b      	cmp	r3, #107	@ 0x6b
 80011e4:	d15d      	bne.n	80012a2 <Initialize_Sensors+0x20a>
        sprintf(uart_buf, "ISM330DHCX WHO_AM_I: OK (0x%X)\r\n", who_am_i_val);
 80011e6:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4942      	ldr	r1, [pc, #264]	@ (80012f8 <Initialize_Sensors+0x260>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f008 fc8d 	bl	8009b10 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f83c 	bl	8000278 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f107 0110 	add.w	r1, r7, #16
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	4837      	ldr	r0, [pc, #220]	@ (80012ec <Initialize_Sensors+0x254>)
 800120e:	f007 ff1d 	bl	800904c <HAL_UART_Transmit>



        // CRITICAL: Enable BDU and Address Auto-Increment
        uint8_t config_tx[2];
        config_tx[0] = 0x12; // CTRL3_C Register Address
 8001212:	2312      	movs	r3, #18
 8001214:	703b      	strb	r3, [r7, #0]
        config_tx[1] = 0x44; // Set BDU bit (Bit 6) and IF_INC bit (Bit 2)
 8001216:	2344      	movs	r3, #68	@ 0x44
 8001218:	707b      	strb	r3, [r7, #1]

        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001220:	4834      	ldr	r0, [pc, #208]	@ (80012f4 <Initialize_Sensors+0x25c>)
 8001222:	f002 f96b 	bl	80034fc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, config_tx, 2, HAL_MAX_DELAY);
 8001226:	4639      	mov	r1, r7
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	2202      	movs	r2, #2
 800122e:	482d      	ldr	r0, [pc, #180]	@ (80012e4 <Initialize_Sensors+0x24c>)
 8001230:	f006 fb16 	bl	8007860 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800123a:	482e      	ldr	r0, [pc, #184]	@ (80012f4 <Initialize_Sensors+0x25c>)
 800123c:	f002 f95e 	bl	80034fc <HAL_GPIO_WritePin>

        // WAKE UP SENSOR: Set ODR for Accelerometer and Gyroscope
        tx_data[0] = 0x10; // CTRL1_XL (Accel)
 8001240:	2310      	movs	r3, #16
 8001242:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x40; // 104 Hz
 8001244:	2340      	movs	r3, #64	@ 0x40
 8001246:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800124e:	4829      	ldr	r0, [pc, #164]	@ (80012f4 <Initialize_Sensors+0x25c>)
 8001250:	f002 f954 	bl	80034fc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 8001254:	f107 010c 	add.w	r1, r7, #12
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	2202      	movs	r2, #2
 800125e:	4821      	ldr	r0, [pc, #132]	@ (80012e4 <Initialize_Sensors+0x24c>)
 8001260:	f006 fafe 	bl	8007860 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800126a:	4822      	ldr	r0, [pc, #136]	@ (80012f4 <Initialize_Sensors+0x25c>)
 800126c:	f002 f946 	bl	80034fc <HAL_GPIO_WritePin>

        tx_data[0] = 0x11; // CTRL2_G (Gyro)
 8001270:	2311      	movs	r3, #17
 8001272:	733b      	strb	r3, [r7, #12]
        tx_data[1] = 0x40; // 104 Hz
 8001274:	2340      	movs	r3, #64	@ 0x40
 8001276:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800127e:	481d      	ldr	r0, [pc, #116]	@ (80012f4 <Initialize_Sensors+0x25c>)
 8001280:	f002 f93c 	bl	80034fc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, tx_data, 2, HAL_MAX_DELAY);
 8001284:	f107 010c 	add.w	r1, r7, #12
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	2202      	movs	r2, #2
 800128e:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <Initialize_Sensors+0x24c>)
 8001290:	f006 fae6 	bl	8007860 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129a:	4816      	ldr	r0, [pc, #88]	@ (80012f4 <Initialize_Sensors+0x25c>)
 800129c:	f002 f92e 	bl	80034fc <HAL_GPIO_WritePin>
 80012a0:	e017      	b.n	80012d2 <Initialize_Sensors+0x23a>

    } else {
        sprintf(uart_buf, "ISM330DHCX WHO_AM_I: FAILED! Got 0x%X\r\n", who_am_i_val);
 80012a2:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4914      	ldr	r1, [pc, #80]	@ (80012fc <Initialize_Sensors+0x264>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f008 fc2f 	bl	8009b10 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7fe ffde 	bl	8000278 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f107 0110 	add.w	r1, r7, #16
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	4808      	ldr	r0, [pc, #32]	@ (80012ec <Initialize_Sensors+0x254>)
 80012ca:	f007 febf 	bl	800904c <HAL_UART_Transmit>
        Error_Handler();
 80012ce:	f000 f89b 	bl	8001408 <Error_Handler>
    }

    HAL_Delay(100); // Wait for sensors to stabilize after configuration
 80012d2:	2064      	movs	r0, #100	@ 0x64
 80012d4:	f000 fe20 	bl	8001f18 <HAL_Delay>
}
 80012d8:	bf00      	nop
 80012da:	3778      	adds	r7, #120	@ 0x78
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	42021400 	.word	0x42021400
 80012e4:	20000258 	.word	0x20000258
 80012e8:	0800a51c 	.word	0x0800a51c
 80012ec:	200003d8 	.word	0x200003d8
 80012f0:	0800a53c 	.word	0x0800a53c
 80012f4:	42021c00 	.word	0x42021c00
 80012f8:	0800a564 	.word	0x0800a564
 80012fc:	0800a588 	.word	0x0800a588

08001300 <start_sensor_read_chain>:





    void start_sensor_read_chain(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
        // Prepare the TX buffer: command byte first, then dummy bytes
        iis3dwb_tx_dma_buf[0] = 0x28 | 0x80; // OUTX_L_A (0x28) + Read Bit
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <start_sensor_read_chain+0x30>)
 8001306:	22a8      	movs	r2, #168	@ 0xa8
 8001308:	701a      	strb	r2, [r3, #0]

        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001310:	4808      	ldr	r0, [pc, #32]	@ (8001334 <start_sensor_read_chain+0x34>)
 8001312:	f002 f8f3 	bl	80034fc <HAL_GPIO_WritePin>

        // Start a single, non-blocking Transmit-Receive operation
        if (HAL_SPI_TransmitReceive_DMA(&hspi2, iis3dwb_tx_dma_buf, iis3dwb_rx_dma_buf, IIS3DWB_DMA_LEN) != HAL_OK) {
 8001316:	2307      	movs	r3, #7
 8001318:	4a07      	ldr	r2, [pc, #28]	@ (8001338 <start_sensor_read_chain+0x38>)
 800131a:	4905      	ldr	r1, [pc, #20]	@ (8001330 <start_sensor_read_chain+0x30>)
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <start_sensor_read_chain+0x3c>)
 800131e:	f007 f813 	bl	8008348 <HAL_SPI_TransmitReceive_DMA>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <start_sensor_read_chain+0x2c>
            Error_Handler();
 8001328:	f000 f86e 	bl	8001408 <Error_Handler>
        }
    }
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000dd4 	.word	0x20000dd4
 8001334:	42021400 	.word	0x42021400
 8001338:	20000ddc 	.word	0x20000ddc
 800133c:	20000258 	.word	0x20000258

08001340 <HAL_SPI_TxRxCpltCallback>:
/**
  * @brief  SPI Transfer completed callback. This is the core of the "chain reaction".
  * @param  hspi: SPI handle
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    // Use a static variable to create a simple state machine
    static int read_step = 0;

    if (hspi->Instance == SPI2) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <HAL_SPI_TxRxCpltCallback+0x9c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d13f      	bne.n	80013d2 <HAL_SPI_TxRxCpltCallback+0x92>
          if (read_step == 0) {
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_SPI_TxRxCpltCallback+0xa0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d124      	bne.n	80013a4 <HAL_SPI_TxRxCpltCallback+0x64>
              // First DMA is complete, de-select sensor
              HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001360:	4820      	ldr	r0, [pc, #128]	@ (80013e4 <HAL_SPI_TxRxCpltCallback+0xa4>)
 8001362:	f002 f8cb 	bl	80034fc <HAL_GPIO_WritePin>

              // The first received byte is garbage. Copy the real sensor data.
              memcpy(iis3dwb_rx_buffer, &iis3dwb_rx_dma_buf[1], IIS3DWB_DATA_SIZE);
 8001366:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_SPI_TxRxCpltCallback+0xac>)
 800136a:	3301      	adds	r3, #1
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	6010      	str	r0, [r2, #0]
 8001370:	889b      	ldrh	r3, [r3, #4]
 8001372:	8093      	strh	r3, [r2, #4]

              // Prepare the next command
              ism330dhcx_tx_dma_buf[0] = 0x22 | 0x80; // OUTX_L_G (0x22) + Read Bit
 8001374:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001376:	22a2      	movs	r2, #162	@ 0xa2
 8001378:	701a      	strb	r2, [r3, #0]
              HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001380:	481c      	ldr	r0, [pc, #112]	@ (80013f4 <HAL_SPI_TxRxCpltCallback+0xb4>)
 8001382:	f002 f8bb 	bl	80034fc <HAL_GPIO_WritePin>

            // 3. Start the second DMA read
            if (HAL_SPI_TransmitReceive_DMA(&hspi2, ism330dhcx_tx_dma_buf, ism330dhcx_rx_dma_buf, ISM330DHCX_DMA_LEN) != HAL_OK) {
 8001386:	230d      	movs	r3, #13
 8001388:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <HAL_SPI_TxRxCpltCallback+0xb8>)
 800138a:	4919      	ldr	r1, [pc, #100]	@ (80013f0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 800138c:	481b      	ldr	r0, [pc, #108]	@ (80013fc <HAL_SPI_TxRxCpltCallback+0xbc>)
 800138e:	f006 ffdb 	bl	8008348 <HAL_SPI_TransmitReceive_DMA>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_SPI_TxRxCpltCallback+0x5c>
                          Error_Handler();
 8001398:	f000 f836 	bl	8001408 <Error_Handler>
                      }

            // 4. Update the state to indicate we're waiting for the second sensor
            read_step = 1;
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <HAL_SPI_TxRxCpltCallback+0xa0>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

            // 3. Reset the state machine for the next full chain
            read_step = 0;
        }
    }
}
 80013a2:	e016      	b.n	80013d2 <HAL_SPI_TxRxCpltCallback+0x92>
        } else if (read_step == 1) {
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_SPI_TxRxCpltCallback+0xa0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d112      	bne.n	80013d2 <HAL_SPI_TxRxCpltCallback+0x92>
            HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b2:	4810      	ldr	r0, [pc, #64]	@ (80013f4 <HAL_SPI_TxRxCpltCallback+0xb4>)
 80013b4:	f002 f8a2 	bl	80034fc <HAL_GPIO_WritePin>
            memcpy(ism330dhcx_rx_buffer, &ism330dhcx_rx_dma_buf[1], ISM330DHCX_DATA_SIZE);
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_SPI_TxRxCpltCallback+0xc0>)
 80013ba:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <HAL_SPI_TxRxCpltCallback+0xb8>)
 80013bc:	3201      	adds	r2, #1
 80013be:	6810      	ldr	r0, [r2, #0]
 80013c0:	6851      	ldr	r1, [r2, #4]
 80013c2:	6892      	ldr	r2, [r2, #8]
 80013c4:	c307      	stmia	r3!, {r0, r1, r2}
            g_data_ready = 1;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_SPI_TxRxCpltCallback+0xc4>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
            read_step = 0;
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <HAL_SPI_TxRxCpltCallback+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40003800 	.word	0x40003800
 80013e0:	20000e1c 	.word	0x20000e1c
 80013e4:	42021400 	.word	0x42021400
 80013e8:	20000e04 	.word	0x20000e04
 80013ec:	20000ddc 	.word	0x20000ddc
 80013f0:	20000de4 	.word	0x20000de4
 80013f4:	42021c00 	.word	0x42021c00
 80013f8:	20000df4 	.word	0x20000df4
 80013fc:	20000258 	.word	0x20000258
 8001400:	20000e0c 	.word	0x20000e0c
 8001404:	20000e18 	.word	0x20000e18

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <Error_Handler+0x8>

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_MspInit+0x38>)
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001420:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_MspInit+0x38>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_MspInit+0x38>)
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001438:	f002 f940 	bl	80036bc <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 800143c:	f002 f94e 	bl	80036dc <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8001440:	f002 f95c 	bl	80036fc <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	46020c00 	.word	0x46020c00

08001450 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0c4      	sub	sp, #272	@ 0x110
 8001454:	af00      	add	r7, sp, #0
 8001456:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800145a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800145e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001474:	22c8      	movs	r2, #200	@ 0xc8
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f008 fb6b 	bl	8009b54 <memset>
  if(hspi->Instance==SPI1)
 800147e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001482:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4ab0      	ldr	r2, [pc, #704]	@ (800174c <HAL_SPI_MspInit+0x2fc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d147      	bne.n	8001520 <HAL_SPI_MspInit+0xd0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001490:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800149c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fbe3 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80014b4:	f7ff ffa8 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b8:	4ba5      	ldr	r3, [pc, #660]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 80014ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014be:	4aa4      	ldr	r2, [pc, #656]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 80014c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 80014ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 80014d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014dc:	4a9c      	ldr	r2, [pc, #624]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 80014de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e6:	4b9a      	ldr	r3, [pc, #616]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 80014e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 80014f4:	231c      	movs	r3, #28
 80014f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150c:	2305      	movs	r3, #5
 800150e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001512:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001516:	4619      	mov	r1, r3
 8001518:	488e      	ldr	r0, [pc, #568]	@ (8001754 <HAL_SPI_MspInit+0x304>)
 800151a:	f001 fe0f 	bl	800313c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800151e:	e1d3      	b.n	80018c8 <HAL_SPI_MspInit+0x478>
  else if(hspi->Instance==SPI2)
 8001520:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001524:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a8a      	ldr	r2, [pc, #552]	@ (8001758 <HAL_SPI_MspInit+0x308>)
 800152e:	4293      	cmp	r3, r2
 8001530:	f040 8120 	bne.w	8001774 <HAL_SPI_MspInit+0x324>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fb92 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8001556:	f7ff ff57 	bl	8001408 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800155a:	4b7d      	ldr	r3, [pc, #500]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 800155c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001560:	4a7b      	ldr	r2, [pc, #492]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001566:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800156a:	4b79      	ldr	r3, [pc, #484]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 800156c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001578:	4b75      	ldr	r3, [pc, #468]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 800157a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157e:	4a74      	ldr	r2, [pc, #464]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001584:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001588:	4b71      	ldr	r3, [pc, #452]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 800158a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800158e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001592:	623b      	str	r3, [r7, #32]
 8001594:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	4b6e      	ldr	r3, [pc, #440]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 8001598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800159c:	4a6c      	ldr	r2, [pc, #432]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001750 <HAL_SPI_MspInit+0x300>)
 80015a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80015b4:	230a      	movs	r3, #10
 80015b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015cc:	2305      	movs	r3, #5
 80015ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015d2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80015d6:	4619      	mov	r1, r3
 80015d8:	4860      	ldr	r0, [pc, #384]	@ (800175c <HAL_SPI_MspInit+0x30c>)
 80015da:	f001 fdaf 	bl	800313c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015de:	2308      	movs	r3, #8
 80015e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f6:	2305      	movs	r3, #5
 80015f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001600:	4619      	mov	r1, r3
 8001602:	4857      	ldr	r0, [pc, #348]	@ (8001760 <HAL_SPI_MspInit+0x310>)
 8001604:	f001 fd9a 	bl	800313c <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001608:	4b56      	ldr	r3, [pc, #344]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 800160a:	4a57      	ldr	r2, [pc, #348]	@ (8001768 <HAL_SPI_MspInit+0x318>)
 800160c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 800160e:	4b55      	ldr	r3, [pc, #340]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001610:	2209      	movs	r2, #9
 8001612:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001614:	4b53      	ldr	r3, [pc, #332]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161a:	4b52      	ldr	r3, [pc, #328]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 800161c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001620:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001622:	4b50      	ldr	r3, [pc, #320]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001624:	2208      	movs	r2, #8
 8001626:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8001628:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800162e:	4b4d      	ldr	r3, [pc, #308]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001634:	4b4b      	ldr	r3, [pc, #300]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800163a:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 800163c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001640:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001642:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001644:	2201      	movs	r2, #1
 8001646:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8001648:	4b46      	ldr	r3, [pc, #280]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 800164a:	2201      	movs	r2, #1
 800164c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800164e:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001650:	2200      	movs	r2, #0
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001654:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001656:	2200      	movs	r2, #0
 8001658:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 800165a:	4b42      	ldr	r3, [pc, #264]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 800165c:	2200      	movs	r2, #0
 800165e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001660:	4840      	ldr	r0, [pc, #256]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001662:	f000 fe11 	bl	8002288 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 800166c:	f7ff fecc 	bl	8001408 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8001670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001674:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a3a      	ldr	r2, [pc, #232]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 800167c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001680:	4a38      	ldr	r2, [pc, #224]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001686:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800168e:	2110      	movs	r1, #16
 8001690:	4834      	ldr	r0, [pc, #208]	@ (8001764 <HAL_SPI_MspInit+0x314>)
 8001692:	f001 f9ad 	bl	80029f0 <HAL_DMA_ConfigChannelAttributes>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_SPI_MspInit+0x250>
      Error_Handler();
 800169c:	f7ff feb4 	bl	8001408 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80016a0:	4b32      	ldr	r3, [pc, #200]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016a2:	4a33      	ldr	r2, [pc, #204]	@ (8001770 <HAL_SPI_MspInit+0x320>)
 80016a4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016a8:	2208      	movs	r2, #8
 80016aa:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80016ac:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016c4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80016c6:	4b29      	ldr	r3, [pc, #164]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016d8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80016e0:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80016f8:	481c      	ldr	r0, [pc, #112]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 80016fa:	f000 fdc5 	bl	8002288 <HAL_DMA_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_SPI_MspInit+0x2b8>
      Error_Handler();
 8001704:	f7ff fe80 	bl	8001408 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 8001708:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800170c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a16      	ldr	r2, [pc, #88]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 8001714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 800171a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800171e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001726:	2110      	movs	r1, #16
 8001728:	4810      	ldr	r0, [pc, #64]	@ (800176c <HAL_SPI_MspInit+0x31c>)
 800172a:	f001 f961 	bl	80029f0 <HAL_DMA_ConfigChannelAttributes>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 8001734:	f7ff fe68 	bl	8001408 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	203c      	movs	r0, #60	@ 0x3c
 800173e:	f000 fcc7 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001742:	203c      	movs	r0, #60	@ 0x3c
 8001744:	f000 fcde 	bl	8002104 <HAL_NVIC_EnableIRQ>
}
 8001748:	e0be      	b.n	80018c8 <HAL_SPI_MspInit+0x478>
 800174a:	bf00      	nop
 800174c:	40013000 	.word	0x40013000
 8001750:	46020c00 	.word	0x46020c00
 8001754:	42021800 	.word	0x42021800
 8001758:	40003800 	.word	0x40003800
 800175c:	42022000 	.word	0x42022000
 8001760:	42020c00 	.word	0x42020c00
 8001764:	200002e8 	.word	0x200002e8
 8001768:	400200d0 	.word	0x400200d0
 800176c:	20000360 	.word	0x20000360
 8001770:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 8001774:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001778:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a54      	ldr	r2, [pc, #336]	@ (80018d4 <HAL_SPI_MspInit+0x484>)
 8001782:	4293      	cmp	r3, r2
 8001784:	f040 80a0 	bne.w	80018c8 <HAL_SPI_MspInit+0x478>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001788:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8001794:	2310      	movs	r3, #16
 8001796:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fa68 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_SPI_MspInit+0x35e>
      Error_Handler();
 80017aa:	f7ff fe2d 	bl	8001408 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ae:	4b4a      	ldr	r3, [pc, #296]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80017b4:	4a48      	ldr	r2, [pc, #288]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80017be:	4b46      	ldr	r3, [pc, #280]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017cc:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d2:	4a41      	ldr	r2, [pc, #260]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017dc:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f0:	4a39      	ldr	r2, [pc, #228]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017fa:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 80017fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001800:	f003 0201 	and.w	r2, r3, #1
 8001804:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001808:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001812:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001816:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 800181a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181e:	4a2e      	ldr	r2, [pc, #184]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <HAL_SPI_MspInit+0x488>)
 800182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800182e:	f003 0202 	and.w	r2, r3, #2
 8001832:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001844:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001846:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800184a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001854:	2301      	movs	r3, #1
 8001856:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001860:	2306      	movs	r3, #6
 8001862:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001866:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800186a:	4619      	mov	r1, r3
 800186c:	481b      	ldr	r0, [pc, #108]	@ (80018dc <HAL_SPI_MspInit+0x48c>)
 800186e:	f001 fc65 	bl	800313c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001876:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188c:	2306      	movs	r3, #6
 800188e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001896:	4619      	mov	r1, r3
 8001898:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <HAL_SPI_MspInit+0x490>)
 800189a:	f001 fc4f 	bl	800313c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800189e:	2330      	movs	r3, #48	@ 0x30
 80018a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b6:	2306      	movs	r3, #6
 80018b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80018c0:	4619      	mov	r1, r3
 80018c2:	4808      	ldr	r0, [pc, #32]	@ (80018e4 <HAL_SPI_MspInit+0x494>)
 80018c4:	f001 fc3a 	bl	800313c <HAL_GPIO_Init>
}
 80018c8:	bf00      	nop
 80018ca:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	46002000 	.word	0x46002000
 80018d8:	46020c00 	.word	0x46020c00
 80018dc:	42021800 	.word	0x42021800
 80018e0:	42020000 	.word	0x42020000
 80018e4:	42020400 	.word	0x42020400

080018e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0c0      	sub	sp, #256	@ 0x100
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	22c8      	movs	r2, #200	@ 0xc8
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f008 f923 	bl	8009b54 <memset>
  if(huart->Instance==USART2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a5e      	ldr	r2, [pc, #376]	@ (8001a8c <HAL_UART_MspInit+0x1a4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d145      	bne.n	80019a4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001918:	f04f 0202 	mov.w	r2, #2
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001924:	2300      	movs	r3, #0
 8001926:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4618      	mov	r0, r3
 800192e:	f003 f9a1 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001938:	f7ff fd66 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193c:	4b54      	ldr	r3, [pc, #336]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 800193e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001942:	4a53      	ldr	r2, [pc, #332]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 8001944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001948:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800194c:	4b50      	ldr	r3, [pc, #320]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 800194e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 800195c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001960:	4a4b      	ldr	r2, [pc, #300]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800196a:	4b49      	ldr	r3, [pc, #292]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 800196c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8001978:	2370      	movs	r3, #112	@ 0x70
 800197a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001990:	2307      	movs	r3, #7
 8001992:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001996:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800199a:	4619      	mov	r1, r3
 800199c:	483d      	ldr	r0, [pc, #244]	@ (8001a94 <HAL_UART_MspInit+0x1ac>)
 800199e:	f001 fbcd 	bl	800313c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80019a2:	e06e      	b.n	8001a82 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001a98 <HAL_UART_MspInit+0x1b0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d169      	bne.n	8001a82 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019ae:	f04f 0204 	mov.w	r2, #4
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 f956 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_UART_MspInit+0xea>
      Error_Handler();
 80019ce:	f7ff fd1b 	bl	8001408 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 80019d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 80019da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80019e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 80019e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 80019f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f6:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 8001a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 8001a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a14:	4a1e      	ldr	r2, [pc, #120]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 8001a16:	f043 0308 	orr.w	r3, r3, #8
 8001a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <HAL_UART_MspInit+0x1a8>)
 8001a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001a2c:	23a0      	movs	r3, #160	@ 0xa0
 8001a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a44:	2307      	movs	r3, #7
 8001a46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4812      	ldr	r0, [pc, #72]	@ (8001a9c <HAL_UART_MspInit+0x1b4>)
 8001a52:	f001 fb73 	bl	800313c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001a56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a70:	2307      	movs	r3, #7
 8001a72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a76:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <HAL_UART_MspInit+0x1ac>)
 8001a7e:	f001 fb5d 	bl	800313c <HAL_GPIO_Init>
}
 8001a82:	bf00      	nop
 8001a84:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40004400 	.word	0x40004400
 8001a90:	46020c00 	.word	0x46020c00
 8001a94:	42020c00 	.word	0x42020c00
 8001a98:	40004800 	.word	0x40004800
 8001a9c:	42020000 	.word	0x42020000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af6:	f000 f9ef 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}

08001afe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f001 fd12 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f001 fd0b 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 8001b1e:	2004      	movs	r0, #4
 8001b20:	f001 fd04 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f001 fcfd 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8001b3a:	2010      	movs	r0, #16
 8001b3c:	f001 fcf6 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8001b48:	2020      	movs	r0, #32
 8001b4a:	f001 fcef 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8001b56:	2040      	movs	r0, #64	@ 0x40
 8001b58:	f001 fce8 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8001b64:	2080      	movs	r0, #128	@ 0x80
 8001b66:	f001 fce1 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 8001b72:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b76:	f001 fcd9 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8001b82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b86:	f001 fcd1 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8001b92:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b96:	f001 fcc9 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 8001ba2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ba6:	f001 fcc1 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}

08001bae <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 8001bb2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bb6:	f001 fcb9 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001bc2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bc6:	f001 fcb1 	bl	800352c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001bd6:	f000 fd9e 	bl	8002716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000360 	.word	0x20000360

08001be4 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001bea:	f000 fd94 	bl	8002716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200002e8 	.word	0x200002e8

08001bf8 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001bfe:	f000 fd8a 	bl	8002716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001e0 	.word	0x200001e0

08001c0c <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <GPDMA1_Channel3_IRQHandler+0x10>)
 8001c12:	f000 fd80 	bl	8002716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000168 	.word	0x20000168

08001c20 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <GPDMA1_Channel4_IRQHandler+0x10>)
 8001c26:	f000 fd76 	bl	8002716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200000f0 	.word	0x200000f0

08001c34 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001c3a:	f000 fd6c 	bl	8002716 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000078 	.word	0x20000078

08001c48 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <SPI2_IRQHandler+0x10>)
 8001c4e:	f006 fe09 	bl	8008864 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000258 	.word	0x20000258

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f007 ff6a 	bl	8009b64 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200c0000 	.word	0x200c0000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	20000e20 	.word	0x20000e20
 8001cc4:	20000f70 	.word	0x20000f70

08001cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <SystemInit+0x68>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd2:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <SystemInit+0x68>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <SystemInit+0x6c>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <SystemInit+0x6c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <SystemInit+0x6c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <SystemInit+0x6c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <SystemInit+0x6c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <SystemInit+0x6c>)
 8001cfa:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001cfe:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001d02:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <SystemInit+0x6c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <SystemInit+0x6c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <SystemInit+0x6c>)
 8001d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <SystemInit+0x6c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <SystemInit+0x68>)
 8001d1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d22:	609a      	str	r2, [r3, #8]
  #endif
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	46020c00 	.word	0x46020c00

08001d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d70 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d3c:	f7ff ffc4 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d42:	e003      	b.n	8001d4c <LoopCopyDataInit>

08001d44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d4a:	3104      	adds	r1, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d4c:	480a      	ldr	r0, [pc, #40]	@ (8001d78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d54:	d3f6      	bcc.n	8001d44 <CopyDataInit>
	ldr	r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d58:	e002      	b.n	8001d60 <LoopFillZerobss>

08001d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d5c:	f842 3b04 	str.w	r3, [r2], #4

08001d60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <LoopForever+0x16>)
	cmp	r2, r3
 8001d62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d64:	d3f9      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f007 ff03 	bl	8009b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6a:	f7fe fc4b 	bl	8000604 <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d70:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d74:	0800a6f4 	.word	0x0800a6f4
	ldr	r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d7c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001d80:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001d84:	20000f70 	.word	0x20000f70

08001d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_Init+0x50>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a11      	ldr	r2, [pc, #68]	@ (8001ddc <HAL_Init+0x50>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f98c 	bl	80020ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001da2:	f002 fd89 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_Init+0x54>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	490c      	ldr	r1, [pc, #48]	@ (8001de4 <HAL_Init+0x58>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	4a0b      	ldr	r2, [pc, #44]	@ (8001de8 <HAL_Init+0x5c>)
 8001dba:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	f000 f9d1 	bl	8002164 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f812 	bl	8001dec <HAL_InitTick>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e002      	b.n	8001dd8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd2:	f7ff fb1f 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	46020c00 	.word	0x46020c00
 8001de4:	0800a5b0 	.word	0x0800a5b0
 8001de8:	20000000 	.word	0x20000000

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001df8:	4b33      	ldr	r3, [pc, #204]	@ (8001ec8 <HAL_InitTick+0xdc>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e05c      	b.n	8001ebe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001e04:	4b31      	ldr	r3, [pc, #196]	@ (8001ecc <HAL_InitTick+0xe0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d10c      	bne.n	8001e2a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001e10:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <HAL_InitTick+0xe4>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec8 <HAL_InitTick+0xdc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e037      	b.n	8001e9a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001e2a:	f000 f9f3 	bl	8002214 <HAL_SYSTICK_GetCLKSourceConfig>
 8001e2e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d023      	beq.n	8001e7e <HAL_InitTick+0x92>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d82d      	bhi.n	8001e98 <HAL_InitTick+0xac>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_InitTick+0x5e>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d00d      	beq.n	8001e64 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001e48:	e026      	b.n	8001e98 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <HAL_InitTick+0xe4>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <HAL_InitTick+0xdc>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	60fb      	str	r3, [r7, #12]
        break;
 8001e62:	e01a      	b.n	8001e9a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e64:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <HAL_InitTick+0xdc>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	60fb      	str	r3, [r7, #12]
        break;
 8001e7c:	e00d      	b.n	8001e9a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_InitTick+0xdc>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	60fb      	str	r3, [r7, #12]
        break;
 8001e96:	e000      	b.n	8001e9a <HAL_InitTick+0xae>
        break;
 8001e98:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f940 	bl	8002120 <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e009      	b.n	8001ebe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb2:	f000 f90d 	bl	80020d0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001eb6:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <HAL_InitTick+0xe8>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	e000e010 	.word	0xe000e010
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000e24 	.word	0x20000e24

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000e24 	.word	0x20000e24

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff ffee 	bl	8001f00 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_Delay+0x44>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	@ (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	@ (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	@ (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	@ 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ff4c 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020de:	f7ff ff63 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 80020e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	6978      	ldr	r0, [r7, #20]
 80020ea:	f7ff ffb3 	bl	8002054 <NVIC_EncodePriority>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff82 	bl	8002000 <__NVIC_SetPriority>
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff56 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002130:	d301      	bcc.n	8002136 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002132:	2301      	movs	r3, #1
 8002134:	e00d      	b.n	8002152 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002136:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <HAL_SYSTICK_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_SYSTICK_Config+0x40>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_SYSTICK_Config+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <HAL_SYSTICK_Config+0x40>)
 800214a:	f043 0303 	orr.w	r3, r3, #3
 800214e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d844      	bhi.n	80021fc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	0800219b 	.word	0x0800219b
 800217c:	080021b9 	.word	0x080021b9
 8002180:	080021db 	.word	0x080021db
 8002184:	080021fd 	.word	0x080021fd
 8002188:	0800218d 	.word	0x0800218d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800218c:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6013      	str	r3, [r2, #0]
      break;
 8002198:	e031      	b.n	80021fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ac:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021b6:	e022      	b.n	80021fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a13      	ldr	r2, [pc, #76]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021d8:	e011      	b.n	80021fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ec:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80021fa:	e000      	b.n	80021fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80021fc:	bf00      	nop
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010
 8002210:	46020c00 	.word	0x46020c00

08002214 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002226:	2304      	movs	r3, #4
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	e021      	b.n	8002270 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800222c:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002232:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002236:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800223e:	d011      	beq.n	8002264 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002246:	d810      	bhi.n	800226a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d004      	beq.n	8002258 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002254:	d003      	beq.n	800225e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002256:	e008      	b.n	800226a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
        break;
 800225c:	e008      	b.n	8002270 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800225e:	2301      	movs	r3, #1
 8002260:	607b      	str	r3, [r7, #4]
        break;
 8002262:	e005      	b.n	8002270 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002264:	2302      	movs	r3, #2
 8002266:	607b      	str	r3, [r7, #4]
        break;
 8002268:	e002      	b.n	8002270 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
        break;
 800226e:	bf00      	nop
    }
  }
  return systick_source;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010
 8002284:	46020c00 	.word	0x46020c00

08002288 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff fe36 	bl	8001f00 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0f0      	b.n	8002482 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a79      	ldr	r2, [pc, #484]	@ (800248c <HAL_DMA_Init+0x204>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	f000 809f 	beq.w	80023ea <HAL_DMA_Init+0x162>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a77      	ldr	r2, [pc, #476]	@ (8002490 <HAL_DMA_Init+0x208>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	f000 8099 	beq.w	80023ea <HAL_DMA_Init+0x162>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a75      	ldr	r2, [pc, #468]	@ (8002494 <HAL_DMA_Init+0x20c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	f000 8093 	beq.w	80023ea <HAL_DMA_Init+0x162>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a73      	ldr	r2, [pc, #460]	@ (8002498 <HAL_DMA_Init+0x210>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f000 808d 	beq.w	80023ea <HAL_DMA_Init+0x162>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a71      	ldr	r2, [pc, #452]	@ (800249c <HAL_DMA_Init+0x214>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	f000 8087 	beq.w	80023ea <HAL_DMA_Init+0x162>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6f      	ldr	r2, [pc, #444]	@ (80024a0 <HAL_DMA_Init+0x218>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f000 8081 	beq.w	80023ea <HAL_DMA_Init+0x162>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6d      	ldr	r2, [pc, #436]	@ (80024a4 <HAL_DMA_Init+0x21c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d07b      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6c      	ldr	r2, [pc, #432]	@ (80024a8 <HAL_DMA_Init+0x220>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d076      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6a      	ldr	r2, [pc, #424]	@ (80024ac <HAL_DMA_Init+0x224>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d071      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a69      	ldr	r2, [pc, #420]	@ (80024b0 <HAL_DMA_Init+0x228>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d06c      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a67      	ldr	r2, [pc, #412]	@ (80024b4 <HAL_DMA_Init+0x22c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d067      	beq.n	80023ea <HAL_DMA_Init+0x162>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a66      	ldr	r2, [pc, #408]	@ (80024b8 <HAL_DMA_Init+0x230>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d062      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a64      	ldr	r2, [pc, #400]	@ (80024bc <HAL_DMA_Init+0x234>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d05d      	beq.n	80023ea <HAL_DMA_Init+0x162>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a63      	ldr	r2, [pc, #396]	@ (80024c0 <HAL_DMA_Init+0x238>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d058      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a61      	ldr	r2, [pc, #388]	@ (80024c4 <HAL_DMA_Init+0x23c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d053      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a60      	ldr	r2, [pc, #384]	@ (80024c8 <HAL_DMA_Init+0x240>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d04e      	beq.n	80023ea <HAL_DMA_Init+0x162>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5e      	ldr	r2, [pc, #376]	@ (80024cc <HAL_DMA_Init+0x244>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d049      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5d      	ldr	r2, [pc, #372]	@ (80024d0 <HAL_DMA_Init+0x248>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d044      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5b      	ldr	r2, [pc, #364]	@ (80024d4 <HAL_DMA_Init+0x24c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d03f      	beq.n	80023ea <HAL_DMA_Init+0x162>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a5a      	ldr	r2, [pc, #360]	@ (80024d8 <HAL_DMA_Init+0x250>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d03a      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a58      	ldr	r2, [pc, #352]	@ (80024dc <HAL_DMA_Init+0x254>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d035      	beq.n	80023ea <HAL_DMA_Init+0x162>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a57      	ldr	r2, [pc, #348]	@ (80024e0 <HAL_DMA_Init+0x258>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d030      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a55      	ldr	r2, [pc, #340]	@ (80024e4 <HAL_DMA_Init+0x25c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_DMA_Init+0x162>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a54      	ldr	r2, [pc, #336]	@ (80024e8 <HAL_DMA_Init+0x260>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d026      	beq.n	80023ea <HAL_DMA_Init+0x162>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_DMA_Init+0x264>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d021      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_DMA_Init+0x268>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d01c      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	@ (80024f4 <HAL_DMA_Init+0x26c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d017      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4e      	ldr	r2, [pc, #312]	@ (80024f8 <HAL_DMA_Init+0x270>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d012      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	@ (80024fc <HAL_DMA_Init+0x274>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <HAL_DMA_Init+0x278>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a49      	ldr	r2, [pc, #292]	@ (8002504 <HAL_DMA_Init+0x27c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d003      	beq.n	80023ea <HAL_DMA_Init+0x162>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a48      	ldr	r2, [pc, #288]	@ (8002508 <HAL_DMA_Init+0x280>)
 80023e8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0206 	orr.w	r2, r2, #6
 8002432:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002434:	e00f      	b.n	8002456 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002436:	f7ff fd63 	bl	8001f00 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b05      	cmp	r3, #5
 8002442:	d908      	bls.n	8002456 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2210      	movs	r2, #16
 8002448:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e015      	b.n	8002482 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e8      	bne.n	8002436 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fb25 	bl	8002ab4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40020050 	.word	0x40020050
 8002490:	50020050 	.word	0x50020050
 8002494:	400200d0 	.word	0x400200d0
 8002498:	500200d0 	.word	0x500200d0
 800249c:	40020150 	.word	0x40020150
 80024a0:	50020150 	.word	0x50020150
 80024a4:	400201d0 	.word	0x400201d0
 80024a8:	500201d0 	.word	0x500201d0
 80024ac:	40020250 	.word	0x40020250
 80024b0:	50020250 	.word	0x50020250
 80024b4:	400202d0 	.word	0x400202d0
 80024b8:	500202d0 	.word	0x500202d0
 80024bc:	40020350 	.word	0x40020350
 80024c0:	50020350 	.word	0x50020350
 80024c4:	400203d0 	.word	0x400203d0
 80024c8:	500203d0 	.word	0x500203d0
 80024cc:	40020450 	.word	0x40020450
 80024d0:	50020450 	.word	0x50020450
 80024d4:	400204d0 	.word	0x400204d0
 80024d8:	500204d0 	.word	0x500204d0
 80024dc:	40020550 	.word	0x40020550
 80024e0:	50020550 	.word	0x50020550
 80024e4:	400205d0 	.word	0x400205d0
 80024e8:	500205d0 	.word	0x500205d0
 80024ec:	40020650 	.word	0x40020650
 80024f0:	50020650 	.word	0x50020650
 80024f4:	400206d0 	.word	0x400206d0
 80024f8:	500206d0 	.word	0x500206d0
 80024fc:	40020750 	.word	0x40020750
 8002500:	50020750 	.word	0x50020750
 8002504:	400207d0 	.word	0x400207d0
 8002508:	500207d0 	.word	0x500207d0

0800250c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e04f      	b.n	80025c4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_DMA_Start_IT+0x26>
 800252e:	2302      	movs	r3, #2
 8002530:	e048      	b.n	80025c4 <HAL_DMA_Start_IT+0xb8>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d136      	bne.n	80025b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2202      	movs	r2, #2
 800254a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fa84 	bl	8002a68 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800256e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002586:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800259e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e007      	b.n	80025c4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80025d4:	f7ff fc94 	bl	8001f00 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e06b      	b.n	80026bc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d008      	beq.n	8002602 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e05c      	b.n	80026bc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0204 	orr.w	r2, r2, #4
 8002610:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2205      	movs	r2, #5
 8002616:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800261a:	e020      	b.n	800265e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800261c:	f7ff fc70 	bl	8001f00 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b05      	cmp	r3, #5
 8002628:	d919      	bls.n	800265e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264e:	2201      	movs	r2, #1
 8002650:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e02e      	b.n	80026bc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0d7      	beq.n	800261c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0202 	orr.w	r2, r2, #2
 800267a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2204      	movs	r2, #4
 8002680:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800268c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a6:	2201      	movs	r2, #1
 80026a8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2200      	movs	r2, #0
 80026b0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e019      	b.n	800270a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d004      	beq.n	80026ec <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e00e      	b.n	800270a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2204      	movs	r2, #4
 80026f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002726:	f023 030f 	bic.w	r3, r3, #15
 800272a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	3b50      	subs	r3, #80	@ 0x50
 8002736:	09db      	lsrs	r3, r3, #7
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2201      	movs	r2, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 813b 	beq.w	80029cc <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d011      	beq.n	8002788 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800277a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002792:	2b00      	cmp	r3, #0
 8002794:	d011      	beq.n	80027ba <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027ac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d011      	beq.n	80027ec <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e4:	f043 0204 	orr.w	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d011      	beq.n	800281e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002810:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	f043 0208 	orr.w	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002842:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04c      	beq.n	80028fc <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d045      	beq.n	80028fc <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002878:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b04      	cmp	r3, #4
 8002884:	d12e      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002894:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0202 	orr.w	r2, r2, #2
 80028a4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028be:	2201      	movs	r2, #1
 80028c0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d07a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
        }

        return;
 80028e2:	e075      	b.n	80029d0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d039      	beq.n	800297e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d032      	beq.n	800297e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800291c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002934:	2b00      	cmp	r3, #0
 8002936:	d111      	bne.n	800295c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002944:	2201      	movs	r2, #1
 8002946:	731a      	strb	r2, [r3, #12]
 8002948:	e008      	b.n	800295c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002964:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	2b00      	cmp	r3, #0
 8002984:	d025      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0202 	orr.w	r2, r2, #2
 8002994:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	2201      	movs	r2, #1
 80029b0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
 80029ca:	e002      	b.n	80029d2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80029d0:	bf00      	nop
    }
  }
}
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e02b      	b.n	8002a5c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002a0c:	f023 030f 	bic.w	r3, r3, #15
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1a:	3b50      	subs	r3, #80	@ 0x50
 8002a1c:	09db      	lsrs	r3, r3, #7
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2201      	movs	r2, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f003 0311 	and.w	r3, r3, #17
 8002a3a:	2b11      	cmp	r3, #17
 8002a3c:	d106      	bne.n	8002a4c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	e006      	b.n	8002a5a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	b291      	uxth	r1, r2
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002a94:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a53      	ldr	r2, [pc, #332]	@ (8002c40 <DMA_Init+0x18c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	f000 80a0 	beq.w	8002c3a <DMA_Init+0x186>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a51      	ldr	r2, [pc, #324]	@ (8002c44 <DMA_Init+0x190>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	f000 809a 	beq.w	8002c3a <DMA_Init+0x186>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4f      	ldr	r2, [pc, #316]	@ (8002c48 <DMA_Init+0x194>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	f000 8094 	beq.w	8002c3a <DMA_Init+0x186>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4d      	ldr	r2, [pc, #308]	@ (8002c4c <DMA_Init+0x198>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f000 808e 	beq.w	8002c3a <DMA_Init+0x186>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4b      	ldr	r2, [pc, #300]	@ (8002c50 <DMA_Init+0x19c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f000 8088 	beq.w	8002c3a <DMA_Init+0x186>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a49      	ldr	r2, [pc, #292]	@ (8002c54 <DMA_Init+0x1a0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	f000 8082 	beq.w	8002c3a <DMA_Init+0x186>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a47      	ldr	r2, [pc, #284]	@ (8002c58 <DMA_Init+0x1a4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d07c      	beq.n	8002c3a <DMA_Init+0x186>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a45      	ldr	r2, [pc, #276]	@ (8002c5c <DMA_Init+0x1a8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d077      	beq.n	8002c3a <DMA_Init+0x186>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a44      	ldr	r2, [pc, #272]	@ (8002c60 <DMA_Init+0x1ac>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d072      	beq.n	8002c3a <DMA_Init+0x186>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a42      	ldr	r2, [pc, #264]	@ (8002c64 <DMA_Init+0x1b0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d06d      	beq.n	8002c3a <DMA_Init+0x186>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a41      	ldr	r2, [pc, #260]	@ (8002c68 <DMA_Init+0x1b4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d068      	beq.n	8002c3a <DMA_Init+0x186>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c6c <DMA_Init+0x1b8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d063      	beq.n	8002c3a <DMA_Init+0x186>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3e      	ldr	r2, [pc, #248]	@ (8002c70 <DMA_Init+0x1bc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d05e      	beq.n	8002c3a <DMA_Init+0x186>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3c      	ldr	r2, [pc, #240]	@ (8002c74 <DMA_Init+0x1c0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d059      	beq.n	8002c3a <DMA_Init+0x186>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c78 <DMA_Init+0x1c4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d054      	beq.n	8002c3a <DMA_Init+0x186>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a39      	ldr	r2, [pc, #228]	@ (8002c7c <DMA_Init+0x1c8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d04f      	beq.n	8002c3a <DMA_Init+0x186>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a38      	ldr	r2, [pc, #224]	@ (8002c80 <DMA_Init+0x1cc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d04a      	beq.n	8002c3a <DMA_Init+0x186>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a36      	ldr	r2, [pc, #216]	@ (8002c84 <DMA_Init+0x1d0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d045      	beq.n	8002c3a <DMA_Init+0x186>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a35      	ldr	r2, [pc, #212]	@ (8002c88 <DMA_Init+0x1d4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d040      	beq.n	8002c3a <DMA_Init+0x186>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a33      	ldr	r2, [pc, #204]	@ (8002c8c <DMA_Init+0x1d8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d03b      	beq.n	8002c3a <DMA_Init+0x186>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a32      	ldr	r2, [pc, #200]	@ (8002c90 <DMA_Init+0x1dc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d036      	beq.n	8002c3a <DMA_Init+0x186>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a30      	ldr	r2, [pc, #192]	@ (8002c94 <DMA_Init+0x1e0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d031      	beq.n	8002c3a <DMA_Init+0x186>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2f      	ldr	r2, [pc, #188]	@ (8002c98 <DMA_Init+0x1e4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d02c      	beq.n	8002c3a <DMA_Init+0x186>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c9c <DMA_Init+0x1e8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d027      	beq.n	8002c3a <DMA_Init+0x186>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca0 <DMA_Init+0x1ec>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d022      	beq.n	8002c3a <DMA_Init+0x186>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <DMA_Init+0x1f0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01d      	beq.n	8002c3a <DMA_Init+0x186>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <DMA_Init+0x1f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d018      	beq.n	8002c3a <DMA_Init+0x186>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <DMA_Init+0x1f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <DMA_Init+0x186>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a26      	ldr	r2, [pc, #152]	@ (8002cb0 <DMA_Init+0x1fc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00e      	beq.n	8002c3a <DMA_Init+0x186>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a24      	ldr	r2, [pc, #144]	@ (8002cb4 <DMA_Init+0x200>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <DMA_Init+0x186>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a23      	ldr	r2, [pc, #140]	@ (8002cb8 <DMA_Init+0x204>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <DMA_Init+0x186>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a21      	ldr	r2, [pc, #132]	@ (8002cbc <DMA_Init+0x208>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d142      	bne.n	8002cc0 <DMA_Init+0x20c>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e041      	b.n	8002cc2 <DMA_Init+0x20e>
 8002c3e:	bf00      	nop
 8002c40:	40020050 	.word	0x40020050
 8002c44:	50020050 	.word	0x50020050
 8002c48:	400200d0 	.word	0x400200d0
 8002c4c:	500200d0 	.word	0x500200d0
 8002c50:	40020150 	.word	0x40020150
 8002c54:	50020150 	.word	0x50020150
 8002c58:	400201d0 	.word	0x400201d0
 8002c5c:	500201d0 	.word	0x500201d0
 8002c60:	40020250 	.word	0x40020250
 8002c64:	50020250 	.word	0x50020250
 8002c68:	400202d0 	.word	0x400202d0
 8002c6c:	500202d0 	.word	0x500202d0
 8002c70:	40020350 	.word	0x40020350
 8002c74:	50020350 	.word	0x50020350
 8002c78:	400203d0 	.word	0x400203d0
 8002c7c:	500203d0 	.word	0x500203d0
 8002c80:	40020450 	.word	0x40020450
 8002c84:	50020450 	.word	0x50020450
 8002c88:	400204d0 	.word	0x400204d0
 8002c8c:	500204d0 	.word	0x500204d0
 8002c90:	40020550 	.word	0x40020550
 8002c94:	50020550 	.word	0x50020550
 8002c98:	400205d0 	.word	0x400205d0
 8002c9c:	500205d0 	.word	0x500205d0
 8002ca0:	40020650 	.word	0x40020650
 8002ca4:	50020650 	.word	0x50020650
 8002ca8:	400206d0 	.word	0x400206d0
 8002cac:	500206d0 	.word	0x500206d0
 8002cb0:	40020750 	.word	0x40020750
 8002cb4:	50020750 	.word	0x50020750
 8002cb8:	400207d0 	.word	0x400207d0
 8002cbc:	500207d0 	.word	0x500207d0
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	051b      	lsls	r3, r3, #20
 8002cd2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002cd6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002ce4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1e:	f040 80b0 	bne.w	8002e82 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a82      	ldr	r2, [pc, #520]	@ (8002f30 <DMA_Init+0x47c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	f000 80a0 	beq.w	8002e6e <DMA_Init+0x3ba>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a80      	ldr	r2, [pc, #512]	@ (8002f34 <DMA_Init+0x480>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	f000 809a 	beq.w	8002e6e <DMA_Init+0x3ba>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f38 <DMA_Init+0x484>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	f000 8094 	beq.w	8002e6e <DMA_Init+0x3ba>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002f3c <DMA_Init+0x488>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	f000 808e 	beq.w	8002e6e <DMA_Init+0x3ba>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	@ (8002f40 <DMA_Init+0x48c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f000 8088 	beq.w	8002e6e <DMA_Init+0x3ba>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a78      	ldr	r2, [pc, #480]	@ (8002f44 <DMA_Init+0x490>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	f000 8082 	beq.w	8002e6e <DMA_Init+0x3ba>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a76      	ldr	r2, [pc, #472]	@ (8002f48 <DMA_Init+0x494>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d07c      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a74      	ldr	r2, [pc, #464]	@ (8002f4c <DMA_Init+0x498>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d077      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a73      	ldr	r2, [pc, #460]	@ (8002f50 <DMA_Init+0x49c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d072      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a71      	ldr	r2, [pc, #452]	@ (8002f54 <DMA_Init+0x4a0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d06d      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a70      	ldr	r2, [pc, #448]	@ (8002f58 <DMA_Init+0x4a4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d068      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f5c <DMA_Init+0x4a8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d063      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6d      	ldr	r2, [pc, #436]	@ (8002f60 <DMA_Init+0x4ac>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d05e      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6b      	ldr	r2, [pc, #428]	@ (8002f64 <DMA_Init+0x4b0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d059      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8002f68 <DMA_Init+0x4b4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d054      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a68      	ldr	r2, [pc, #416]	@ (8002f6c <DMA_Init+0x4b8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04f      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a67      	ldr	r2, [pc, #412]	@ (8002f70 <DMA_Init+0x4bc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d04a      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a65      	ldr	r2, [pc, #404]	@ (8002f74 <DMA_Init+0x4c0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d045      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a64      	ldr	r2, [pc, #400]	@ (8002f78 <DMA_Init+0x4c4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d040      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a62      	ldr	r2, [pc, #392]	@ (8002f7c <DMA_Init+0x4c8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d03b      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a61      	ldr	r2, [pc, #388]	@ (8002f80 <DMA_Init+0x4cc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d036      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a5f      	ldr	r2, [pc, #380]	@ (8002f84 <DMA_Init+0x4d0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d031      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002f88 <DMA_Init+0x4d4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d02c      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5c      	ldr	r2, [pc, #368]	@ (8002f8c <DMA_Init+0x4d8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d027      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5b      	ldr	r2, [pc, #364]	@ (8002f90 <DMA_Init+0x4dc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a59      	ldr	r2, [pc, #356]	@ (8002f94 <DMA_Init+0x4e0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a58      	ldr	r2, [pc, #352]	@ (8002f98 <DMA_Init+0x4e4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a56      	ldr	r2, [pc, #344]	@ (8002f9c <DMA_Init+0x4e8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a55      	ldr	r2, [pc, #340]	@ (8002fa0 <DMA_Init+0x4ec>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a53      	ldr	r2, [pc, #332]	@ (8002fa4 <DMA_Init+0x4f0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a52      	ldr	r2, [pc, #328]	@ (8002fa8 <DMA_Init+0x4f4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <DMA_Init+0x3ba>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <DMA_Init+0x4f8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <DMA_Init+0x3be>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <DMA_Init+0x3c0>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e008      	b.n	8002e94 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e8a:	d103      	bne.n	8002e94 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e92:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e9a:	4b45      	ldr	r3, [pc, #276]	@ (8002fb0 <DMA_Init+0x4fc>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a36      	ldr	r2, [pc, #216]	@ (8002f90 <DMA_Init+0x4dc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <DMA_Init+0x44c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a35      	ldr	r2, [pc, #212]	@ (8002f94 <DMA_Init+0x4e0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01d      	beq.n	8002f00 <DMA_Init+0x44c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a33      	ldr	r2, [pc, #204]	@ (8002f98 <DMA_Init+0x4e4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <DMA_Init+0x44c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a32      	ldr	r2, [pc, #200]	@ (8002f9c <DMA_Init+0x4e8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <DMA_Init+0x44c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a30      	ldr	r2, [pc, #192]	@ (8002fa0 <DMA_Init+0x4ec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <DMA_Init+0x44c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa4 <DMA_Init+0x4f0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <DMA_Init+0x44c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa8 <DMA_Init+0x4f4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <DMA_Init+0x44c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2c      	ldr	r2, [pc, #176]	@ (8002fac <DMA_Init+0x4f8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <DMA_Init+0x450>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <DMA_Init+0x452>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40020050 	.word	0x40020050
 8002f34:	50020050 	.word	0x50020050
 8002f38:	400200d0 	.word	0x400200d0
 8002f3c:	500200d0 	.word	0x500200d0
 8002f40:	40020150 	.word	0x40020150
 8002f44:	50020150 	.word	0x50020150
 8002f48:	400201d0 	.word	0x400201d0
 8002f4c:	500201d0 	.word	0x500201d0
 8002f50:	40020250 	.word	0x40020250
 8002f54:	50020250 	.word	0x50020250
 8002f58:	400202d0 	.word	0x400202d0
 8002f5c:	500202d0 	.word	0x500202d0
 8002f60:	40020350 	.word	0x40020350
 8002f64:	50020350 	.word	0x50020350
 8002f68:	400203d0 	.word	0x400203d0
 8002f6c:	500203d0 	.word	0x500203d0
 8002f70:	40020450 	.word	0x40020450
 8002f74:	50020450 	.word	0x50020450
 8002f78:	400204d0 	.word	0x400204d0
 8002f7c:	500204d0 	.word	0x500204d0
 8002f80:	40020550 	.word	0x40020550
 8002f84:	50020550 	.word	0x50020550
 8002f88:	400205d0 	.word	0x400205d0
 8002f8c:	500205d0 	.word	0x500205d0
 8002f90:	40020650 	.word	0x40020650
 8002f94:	50020650 	.word	0x50020650
 8002f98:	400206d0 	.word	0x400206d0
 8002f9c:	500206d0 	.word	0x500206d0
 8002fa0:	40020750 	.word	0x40020750
 8002fa4:	50020750 	.word	0x50020750
 8002fa8:	400207d0 	.word	0x400207d0
 8002fac:	500207d0 	.word	0x500207d0
 8002fb0:	3cc03180 	.word	0x3cc03180

08002fb4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_DMAEx_List_Start_IT+0x16>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e082      	b.n	80030d4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fd4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d005      	beq.n	8002ff4 <HAL_DMAEx_List_Start_IT+0x40>
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d16a      	bne.n	80030c4 <HAL_DMAEx_List_Start_IT+0x110>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d067      	beq.n	80030c4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d157      	bne.n	80030b0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_DMAEx_List_Start_IT+0x5a>
 800300a:	2302      	movs	r3, #2
 800300c:	e062      	b.n	80030d4 <HAL_DMAEx_List_Start_IT+0x120>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003022:	2202      	movs	r2, #2
 8003024:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003042:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003072:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f107 010c 	add.w	r1, r7, #12
 800307e:	2200      	movs	r2, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f82b 	bl	80030dc <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	0c0b      	lsrs	r3, r1, #16
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80030a4:	4013      	ands	r3, r2
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e007      	b.n	80030d4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2240      	movs	r2, #64	@ 0x40
 80030c8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00c      	beq.n	800310e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <DMA_List_GetCLLRNodeInfo+0x58>)
 80030fe:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00f      	beq.n	8003126 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800310c:	e00b      	b.n	8003126 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003118:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2205      	movs	r2, #5
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	fe010000 	.word	0xfe010000
 8003138:	f8010000 	.word	0xf8010000

0800313c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	@ 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800314e:	e1c2      	b.n	80034d6 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 81b2 	beq.w	80034d0 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a55      	ldr	r2, [pc, #340]	@ (80032c4 <HAL_GPIO_Init+0x188>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d15d      	bne.n	8003230 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800317a:	2201      	movs	r2, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	4013      	ands	r3, r2
 8003188:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0201 	and.w	r2, r3, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	4313      	orrs	r3, r2
 800319c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80031a4:	4a48      	ldr	r2, [pc, #288]	@ (80032c8 <HAL_GPIO_Init+0x18c>)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031ac:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80031ae:	4a46      	ldr	r2, [pc, #280]	@ (80032c8 <HAL_GPIO_Init+0x18c>)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	08da      	lsrs	r2, r3, #3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3208      	adds	r2, #8
 80031c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	4013      	ands	r3, r2
 80031dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220b      	movs	r2, #11
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	3208      	adds	r2, #8
 80031fa:	69f9      	ldr	r1, [r7, #28]
 80031fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	4013      	ands	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2202      	movs	r2, #2
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	4313      	orrs	r3, r2
 8003226:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e067      	b.n	8003300 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x104>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d145      	bne.n	80032cc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	4013      	ands	r3, r2
 8003262:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	4313      	orrs	r3, r2
 800327c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	69f9      	ldr	r1, [r7, #28]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e01e      	b.n	8003300 <HAL_GPIO_Init+0x1c4>
 80032c2:	bf00      	nop
 80032c4:	46020000 	.word	0x46020000
 80032c8:	0800a608 	.word	0x0800a608
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2203      	movs	r2, #3
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0203 	and.w	r2, r3, #3
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d00b      	beq.n	8003320 <HAL_GPIO_Init+0x1e4>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d007      	beq.n	8003320 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003314:	2b11      	cmp	r3, #17
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b12      	cmp	r3, #18
 800331e:	d130      	bne.n	8003382 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	4013      	ands	r3, r2
 8003336:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	4313      	orrs	r3, r2
 8003348:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003356:	2201      	movs	r2, #1
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	4013      	ands	r3, r2
 8003364:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 0201 	and.w	r2, r3, #1
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	4313      	orrs	r3, r2
 800337a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d107      	bne.n	800339a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800338e:	2b03      	cmp	r3, #3
 8003390:	d11b      	bne.n	80033ca <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d017      	beq.n	80033ca <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d07c      	beq.n	80034d0 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80033d6:	4a47      	ldr	r2, [pc, #284]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3318      	adds	r3, #24
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0a9a      	lsrs	r2, r3, #10
 80033fe:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <HAL_GPIO_Init+0x3bc>)
 8003400:	4013      	ands	r3, r2
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	f002 0203 	and.w	r2, r2, #3
 8003408:	00d2      	lsls	r2, r2, #3
 800340a:	4093      	lsls	r3, r2
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003412:	4938      	ldr	r1, [pc, #224]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3318      	adds	r3, #24
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003420:	4b34      	ldr	r3, [pc, #208]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	4013      	ands	r3, r2
 800342e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003444:	4a2b      	ldr	r2, [pc, #172]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800344a:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	4013      	ands	r3, r2
 8003458:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800346e:	4a21      	ldr	r2, [pc, #132]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003474:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 8003476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800347a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	43db      	mvns	r3, r3
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	4013      	ands	r3, r2
 8003484:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800349a:	4a16      	ldr	r2, [pc, #88]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80034a2:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 80034a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80034c8:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <HAL_GPIO_Init+0x3b8>)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3301      	adds	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f ae35 	bne.w	8003150 <HAL_GPIO_Init+0x14>
  }
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	3724      	adds	r7, #36	@ 0x24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	46022000 	.word	0x46022000
 80034f8:	002f7f7f 	.word	0x002f7f7f

080034fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	4613      	mov	r3, r2
 800350a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003518:	e002      	b.n	8003520 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	4013      	ands	r3, r2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003542:	4a0c      	ldr	r2, [pc, #48]	@ (8003574 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f814 	bl	8003578 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003550:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800355c:	4a05      	ldr	r2, [pc, #20]	@ (8003574 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f812 	bl	800358e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	46022000 	.word	0x46022000

08003578 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80035ac:	4b39      	ldr	r3, [pc, #228]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10b      	bne.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c4:	d905      	bls.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80035c6:	4b33      	ldr	r3, [pc, #204]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4a32      	ldr	r2, [pc, #200]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e057      	b.n	8003686 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035dc:	d90a      	bls.n	80035f4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80035de:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f0:	60d3      	str	r3, [r2, #12]
 80035f2:	e007      	b.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80035f4:	4b27      	ldr	r3, [pc, #156]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80035fc:	4925      	ldr	r1, [pc, #148]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003604:	4b24      	ldr	r3, [pc, #144]	@ (8003698 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a24      	ldr	r2, [pc, #144]	@ (800369c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	2232      	movs	r2, #50	@ 0x32
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	4a21      	ldr	r2, [pc, #132]	@ (800369c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003622:	e002      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b01      	subs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800362a:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f3      	bne.n	8003624 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003642:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a15      	ldr	r2, [pc, #84]	@ (800369c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	2232      	movs	r2, #50	@ 0x32
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	4a11      	ldr	r2, [pc, #68]	@ (800369c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	3301      	adds	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003660:	e002      	b.n	8003668 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3b01      	subs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800366a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800366c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f3      	bne.n	8003662 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e000      	b.n	8003686 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	46020800 	.word	0x46020800
 8003698:	20000000 	.word	0x20000000
 800369c:	10624dd3 	.word	0x10624dd3

080036a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80036a4:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	46020800 	.word	0x46020800

080036bc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	6113      	str	r3, [r2, #16]
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	46020800 	.word	0x46020800

080036dc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80036e0:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80036e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036ea:	6113      	str	r3, [r2, #16]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	46020800 	.word	0x46020800

080036fc <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003700:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <HAL_PWREx_EnableVddA+0x1c>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <HAL_PWREx_EnableVddA+0x1c>)
 8003706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800370a:	6113      	str	r3, [r2, #16]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	46020800 	.word	0x46020800

0800371c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08e      	sub	sp, #56	@ 0x38
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	f000 bec8 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003736:	4b99      	ldr	r3, [pc, #612]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003740:	4b96      	ldr	r3, [pc, #600]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 816c 	beq.w	8003a30 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_RCC_OscConfig+0x52>
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	2b0c      	cmp	r3, #12
 8003762:	f040 80de 	bne.w	8003922 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 80da 	bne.w	8003922 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f000 bea5 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003780:	4b86      	ldr	r3, [pc, #536]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_RCC_OscConfig+0x7a>
 800378c:	4b83      	ldr	r3, [pc, #524]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003794:	e005      	b.n	80037a2 <HAL_RCC_OscConfig+0x86>
 8003796:	4b81      	ldr	r3, [pc, #516]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d255      	bcs.n	8003852 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 f9d9 	bl	8004b68 <RCC_SetFlashLatencyFromMSIRange>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f000 be82 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80037c2:	4b76      	ldr	r3, [pc, #472]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	4a75      	ldr	r2, [pc, #468]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80037c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	4b73      	ldr	r3, [pc, #460]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	4970      	ldr	r1, [pc, #448]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037e8:	d309      	bcc.n	80037fe <HAL_RCC_OscConfig+0xe2>
 80037ea:	4b6c      	ldr	r3, [pc, #432]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f023 021f 	bic.w	r2, r3, #31
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4969      	ldr	r1, [pc, #420]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60cb      	str	r3, [r1, #12]
 80037fc:	e07e      	b.n	80038fc <HAL_RCC_OscConfig+0x1e0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	da0a      	bge.n	800381c <HAL_RCC_OscConfig+0x100>
 8003806:	4b65      	ldr	r3, [pc, #404]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	4961      	ldr	r1, [pc, #388]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003816:	4313      	orrs	r3, r2
 8003818:	60cb      	str	r3, [r1, #12]
 800381a:	e06f      	b.n	80038fc <HAL_RCC_OscConfig+0x1e0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003824:	d30a      	bcc.n	800383c <HAL_RCC_OscConfig+0x120>
 8003826:	4b5d      	ldr	r3, [pc, #372]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	4959      	ldr	r1, [pc, #356]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]
 800383a:	e05f      	b.n	80038fc <HAL_RCC_OscConfig+0x1e0>
 800383c:	4b57      	ldr	r3, [pc, #348]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	03db      	lsls	r3, r3, #15
 800384a:	4954      	ldr	r1, [pc, #336]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 800384c:	4313      	orrs	r3, r2
 800384e:	60cb      	str	r3, [r1, #12]
 8003850:	e054      	b.n	80038fc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003852:	4b52      	ldr	r3, [pc, #328]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a51      	ldr	r2, [pc, #324]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003858:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800385c:	6093      	str	r3, [r2, #8]
 800385e:	4b4f      	ldr	r3, [pc, #316]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	494c      	ldr	r1, [pc, #304]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003878:	d309      	bcc.n	800388e <HAL_RCC_OscConfig+0x172>
 800387a:	4b48      	ldr	r3, [pc, #288]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 021f 	bic.w	r2, r3, #31
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	4945      	ldr	r1, [pc, #276]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
 800388c:	e028      	b.n	80038e0 <HAL_RCC_OscConfig+0x1c4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	da0a      	bge.n	80038ac <HAL_RCC_OscConfig+0x190>
 8003896:	4b41      	ldr	r3, [pc, #260]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	493d      	ldr	r1, [pc, #244]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60cb      	str	r3, [r1, #12]
 80038aa:	e019      	b.n	80038e0 <HAL_RCC_OscConfig+0x1c4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b4:	d30a      	bcc.n	80038cc <HAL_RCC_OscConfig+0x1b0>
 80038b6:	4b39      	ldr	r3, [pc, #228]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	029b      	lsls	r3, r3, #10
 80038c4:	4935      	ldr	r1, [pc, #212]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60cb      	str	r3, [r1, #12]
 80038ca:	e009      	b.n	80038e0 <HAL_RCC_OscConfig+0x1c4>
 80038cc:	4b33      	ldr	r3, [pc, #204]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	03db      	lsls	r3, r3, #15
 80038da:	4930      	ldr	r1, [pc, #192]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 f93c 	bl	8004b68 <RCC_SetFlashLatencyFromMSIRange>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f000 bde5 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80038fc:	f001 f8de 	bl	8004abc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003900:	4b27      	ldr	r3, [pc, #156]	@ (80039a0 <HAL_RCC_OscConfig+0x284>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe fa71 	bl	8001dec <HAL_InitTick>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 808a 	beq.w	8003a2e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800391a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800391e:	f000 bdd2 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d066      	beq.n	80039f8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800392a:	4b1c      	ldr	r3, [pc, #112]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003936:	f7fe fae3 	bl	8001f00 <HAL_GetTick>
 800393a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800393c:	e009      	b.n	8003952 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800393e:	f7fe fadf 	bl	8001f00 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d902      	bls.n	8003952 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	f000 bdba 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003952:	4b12      	ldr	r3, [pc, #72]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ef      	beq.n	800393e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800395e:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4a0e      	ldr	r2, [pc, #56]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003968:	6093      	str	r3, [r2, #8]
 800396a:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	4909      	ldr	r1, [pc, #36]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003978:	4313      	orrs	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003984:	d30e      	bcc.n	80039a4 <HAL_RCC_OscConfig+0x288>
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 021f 	bic.w	r2, r3, #31
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4902      	ldr	r1, [pc, #8]	@ (800399c <HAL_RCC_OscConfig+0x280>)
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
 8003998:	e04a      	b.n	8003a30 <HAL_RCC_OscConfig+0x314>
 800399a:	bf00      	nop
 800399c:	46020c00 	.word	0x46020c00
 80039a0:	20000004 	.word	0x20000004
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da0a      	bge.n	80039c2 <HAL_RCC_OscConfig+0x2a6>
 80039ac:	4b98      	ldr	r3, [pc, #608]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	015b      	lsls	r3, r3, #5
 80039ba:	4995      	ldr	r1, [pc, #596]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
 80039c0:	e036      	b.n	8003a30 <HAL_RCC_OscConfig+0x314>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ca:	d30a      	bcc.n	80039e2 <HAL_RCC_OscConfig+0x2c6>
 80039cc:	4b90      	ldr	r3, [pc, #576]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	029b      	lsls	r3, r3, #10
 80039da:	498d      	ldr	r1, [pc, #564]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	60cb      	str	r3, [r1, #12]
 80039e0:	e026      	b.n	8003a30 <HAL_RCC_OscConfig+0x314>
 80039e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	03db      	lsls	r3, r3, #15
 80039f0:	4987      	ldr	r1, [pc, #540]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60cb      	str	r3, [r1, #12]
 80039f6:	e01b      	b.n	8003a30 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80039f8:	4b85      	ldr	r3, [pc, #532]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a84      	ldr	r2, [pc, #528]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a04:	f7fe fa7c 	bl	8001f00 <HAL_GetTick>
 8003a08:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a0a:	e009      	b.n	8003a20 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a0c:	f7fe fa78 	bl	8001f00 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d902      	bls.n	8003a20 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	f000 bd53 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a20:	4b7b      	ldr	r3, [pc, #492]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ef      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
 8003a2c:	e000      	b.n	8003a30 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 808b 	beq.w	8003b54 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_OscConfig+0x334>
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d17d      	bne.n	8003b54 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f000 bd34 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x35a>
 8003a68:	4b69      	ldr	r3, [pc, #420]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a68      	ldr	r2, [pc, #416]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e041      	b.n	8003afa <HAL_RCC_OscConfig+0x3de>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a7e:	d112      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x38a>
 8003a80:	4b63      	ldr	r3, [pc, #396]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a62      	ldr	r2, [pc, #392]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b60      	ldr	r3, [pc, #384]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5f      	ldr	r2, [pc, #380]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b5d      	ldr	r3, [pc, #372]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5c      	ldr	r2, [pc, #368]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e029      	b.n	8003afa <HAL_RCC_OscConfig+0x3de>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003aae:	d112      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3ba>
 8003ab0:	4b57      	ldr	r3, [pc, #348]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a56      	ldr	r2, [pc, #344]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b54      	ldr	r3, [pc, #336]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a53      	ldr	r2, [pc, #332]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a50      	ldr	r2, [pc, #320]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e011      	b.n	8003afa <HAL_RCC_OscConfig+0x3de>
 8003ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4d      	ldr	r2, [pc, #308]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b48      	ldr	r3, [pc, #288]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a47      	ldr	r2, [pc, #284]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003af4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003af8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d014      	beq.n	8003b2c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b02:	f7fe f9fd 	bl	8001f00 <HAL_GetTick>
 8003b06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b08:	e009      	b.n	8003b1e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0a:	f7fe f9f9 	bl	8001f00 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	@ 0x64
 8003b16:	d902      	bls.n	8003b1e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	f000 bcd4 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ef      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3ee>
 8003b2a:	e013      	b.n	8003b54 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f9e8 	bl	8001f00 <HAL_GetTick>
 8003b30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b32:	e009      	b.n	8003b48 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe f9e4 	bl	8001f00 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d902      	bls.n	8003b48 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	f000 bcbf 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b48:	4b31      	ldr	r3, [pc, #196]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ef      	bne.n	8003b34 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05f      	beq.n	8003c20 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x456>
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d114      	bne.n	8003b96 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d111      	bne.n	8003b96 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f000 bca3 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	4920      	ldr	r1, [pc, #128]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b94:	e044      	b.n	8003c20 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d024      	beq.n	8003be8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003baa:	f7fe f9a9 	bl	8001f00 <HAL_GetTick>
 8003bae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb0:	e009      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fe f9a5 	bl	8001f00 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d902      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	f000 bc80 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc6:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ef      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	490b      	ldr	r1, [pc, #44]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	610b      	str	r3, [r1, #16]
 8003be6:	e01b      	b.n	8003c20 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003be8:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a08      	ldr	r2, [pc, #32]	@ (8003c10 <HAL_RCC_OscConfig+0x4f4>)
 8003bee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bf2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bf4:	f7fe f984 	bl	8001f00 <HAL_GetTick>
 8003bf8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fe f980 	bl	8001f00 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d904      	bls.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	f000 bc5b 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
 8003c10:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c14:	4baf      	ldr	r3, [pc, #700]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ed      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80c8 	beq.w	8003dbe <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c34:	4ba7      	ldr	r3, [pc, #668]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d111      	bne.n	8003c66 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	4ba4      	ldr	r3, [pc, #656]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c48:	4aa2      	ldr	r2, [pc, #648]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c52:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c66:	4b9c      	ldr	r3, [pc, #624]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d119      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c72:	4b99      	ldr	r3, [pc, #612]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	4a98      	ldr	r2, [pc, #608]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7e:	f7fe f93f 	bl	8001f00 <HAL_GetTick>
 8003c82:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c84:	e009      	b.n	8003c9a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c86:	f7fe f93b 	bl	8001f00 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d902      	bls.n	8003c9a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	f000 bc16 	b.w	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c9a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ef      	beq.n	8003c86 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d05f      	beq.n	8003d6e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003cae:	4b89      	ldr	r3, [pc, #548]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cb4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d037      	beq.n	8003d34 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e3f4      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01b      	beq.n	8003d1e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cec:	4a79      	ldr	r2, [pc, #484]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003cee:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003cf2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003cf6:	f7fe f903 	bl	8001f00 <HAL_GetTick>
 8003cfa:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fe f8ff 	bl	8001f00 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e3da      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d10:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ef      	bne.n	8003cfe <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d24:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	4969      	ldr	r1, [pc, #420]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003d34:	4b67      	ldr	r3, [pc, #412]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d3a:	4a66      	ldr	r2, [pc, #408]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d44:	f7fe f8dc 	bl	8001f00 <HAL_GetTick>
 8003d48:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fe f8d8 	bl	8001f00 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e3b3      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ef      	beq.n	8003d4c <HAL_RCC_OscConfig+0x630>
 8003d6c:	e01b      	b.n	8003da6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003d6e:	4b59      	ldr	r3, [pc, #356]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d74:	4a57      	ldr	r2, [pc, #348]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d76:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d7e:	f7fe f8bf 	bl	8001f00 <HAL_GetTick>
 8003d82:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fe f8bb 	bl	8001f00 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e396      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d98:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ef      	bne.n	8003d86 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003da6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dae:	4b49      	ldr	r3, [pc, #292]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db4:	4a47      	ldr	r2, [pc, #284]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8111 	beq.w	8003fee <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd2:	4b40      	ldr	r3, [pc, #256]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d111      	bne.n	8003e04 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003de8:	f043 0304 	orr.w	r3, r3, #4
 8003dec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003df0:	4b38      	ldr	r3, [pc, #224]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e04:	4b34      	ldr	r3, [pc, #208]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d118      	bne.n	8003e42 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e10:	4b31      	ldr	r3, [pc, #196]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	4a30      	ldr	r2, [pc, #192]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1c:	f7fe f870 	bl	8001f00 <HAL_GetTick>
 8003e20:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e24:	f7fe f86c 	bl	8001f00 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e347      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e36:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <HAL_RCC_OscConfig+0x7bc>)
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01f      	beq.n	8003e8e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e60:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e62:	f043 0304 	orr.w	r3, r3, #4
 8003e66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e70:	4a18      	ldr	r2, [pc, #96]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e7a:	e018      	b.n	8003eae <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e7c:	4b15      	ldr	r3, [pc, #84]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e82:	4a14      	ldr	r2, [pc, #80]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e8c:	e00f      	b.n	8003eae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e94:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed4 <HAL_RCC_OscConfig+0x7b8>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d057      	beq.n	8003f66 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003eb6:	f7fe f823 	bl	8001f00 <HAL_GetTick>
 8003eba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebc:	e00e      	b.n	8003edc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe f81f 	bl	8001f00 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d905      	bls.n	8003edc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e2f8      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
 8003ed4:	46020c00 	.word	0x46020c00
 8003ed8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003edc:	4b9c      	ldr	r3, [pc, #624]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0e9      	beq.n	8003ebe <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01b      	beq.n	8003f2e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ef6:	4b96      	ldr	r3, [pc, #600]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003efc:	4a94      	ldr	r2, [pc, #592]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fd fffa 	bl	8001f00 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e2d3      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f1e:	4b8c      	ldr	r3, [pc, #560]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ed      	beq.n	8003f08 <HAL_RCC_OscConfig+0x7ec>
 8003f2c:	e053      	b.n	8003fd6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f2e:	4b88      	ldr	r3, [pc, #544]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f34:	4a86      	ldr	r2, [pc, #536]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fd ffde 	bl	8001f00 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e2b7      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f56:	4b7e      	ldr	r3, [pc, #504]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ed      	bne.n	8003f40 <HAL_RCC_OscConfig+0x824>
 8003f64:	e037      	b.n	8003fd6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003f66:	f7fd ffcb 	bl	8001f00 <HAL_GetTick>
 8003f6a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fd ffc7 	bl	8001f00 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e2a0      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f84:	4b72      	ldr	r3, [pc, #456]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ed      	bne.n	8003f6e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f92:	4b6f      	ldr	r3, [pc, #444]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01a      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd ffa5 	bl	8001f00 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e27e      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fc8:	4b61      	ldr	r3, [pc, #388]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ed      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fde:	4b5c      	ldr	r3, [pc, #368]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8003fe6:	f023 0304 	bic.w	r3, r3, #4
 8003fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d036      	beq.n	8004068 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d019      	beq.n	8004036 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a52      	ldr	r2, [pc, #328]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8004008:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800400c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800400e:	f7fd ff77 	bl	8001f00 <HAL_GetTick>
 8004012:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004016:	f7fd ff73 	bl	8001f00 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e24e      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004028:	4b49      	ldr	r3, [pc, #292]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x8fa>
 8004034:	e018      	b.n	8004068 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004036:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a45      	ldr	r2, [pc, #276]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 800403c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004040:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004042:	f7fd ff5d 	bl	8001f00 <HAL_GetTick>
 8004046:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800404a:	f7fd ff59 	bl	8001f00 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e234      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800405c:	4b3c      	ldr	r3, [pc, #240]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004070:	2b00      	cmp	r3, #0
 8004072:	d036      	beq.n	80040e2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	2b00      	cmp	r3, #0
 800407a:	d019      	beq.n	80040b0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800407c:	4b34      	ldr	r3, [pc, #208]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a33      	ldr	r2, [pc, #204]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8004082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004086:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004088:	f7fd ff3a 	bl	8001f00 <HAL_GetTick>
 800408c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004090:	f7fd ff36 	bl	8001f00 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e211      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x974>
 80040ae:	e018      	b.n	80040e2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80040b0:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a26      	ldr	r2, [pc, #152]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 80040b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040bc:	f7fd ff20 	bl	8001f00 <HAL_GetTick>
 80040c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040c4:	f7fd ff1c 	bl	8001f00 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1f7      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80040d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d07f      	beq.n	80041ee <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d062      	beq.n	80041bc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80040f6:	4b16      	ldr	r3, [pc, #88]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4a15      	ldr	r2, [pc, #84]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 80040fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004100:	6093      	str	r3, [r2, #8]
 8004102:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	4910      	ldr	r1, [pc, #64]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800411c:	d309      	bcc.n	8004132 <HAL_RCC_OscConfig+0xa16>
 800411e:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 021f 	bic.w	r2, r3, #31
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4909      	ldr	r1, [pc, #36]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 800412c:	4313      	orrs	r3, r2
 800412e:	60cb      	str	r3, [r1, #12]
 8004130:	e02a      	b.n	8004188 <HAL_RCC_OscConfig+0xa6c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	da0c      	bge.n	8004154 <HAL_RCC_OscConfig+0xa38>
 800413a:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	015b      	lsls	r3, r3, #5
 8004148:	4901      	ldr	r1, [pc, #4]	@ (8004150 <HAL_RCC_OscConfig+0xa34>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
 800414e:	e01b      	b.n	8004188 <HAL_RCC_OscConfig+0xa6c>
 8004150:	46020c00 	.word	0x46020c00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415c:	d30a      	bcc.n	8004174 <HAL_RCC_OscConfig+0xa58>
 800415e:	4ba1      	ldr	r3, [pc, #644]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	499d      	ldr	r1, [pc, #628]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	60cb      	str	r3, [r1, #12]
 8004172:	e009      	b.n	8004188 <HAL_RCC_OscConfig+0xa6c>
 8004174:	4b9b      	ldr	r3, [pc, #620]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	03db      	lsls	r3, r3, #15
 8004182:	4998      	ldr	r1, [pc, #608]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004184:	4313      	orrs	r3, r2
 8004186:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004188:	4b96      	ldr	r3, [pc, #600]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a95      	ldr	r2, [pc, #596]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800418e:	f043 0310 	orr.w	r3, r3, #16
 8004192:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004194:	f7fd feb4 	bl	8001f00 <HAL_GetTick>
 8004198:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800419c:	f7fd feb0 	bl	8001f00 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e18b      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041ae:	4b8d      	ldr	r3, [pc, #564]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0xa80>
 80041ba:	e018      	b.n	80041ee <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80041bc:	4b89      	ldr	r3, [pc, #548]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a88      	ldr	r2, [pc, #544]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80041c2:	f023 0310 	bic.w	r3, r3, #16
 80041c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041c8:	f7fd fe9a 	bl	8001f00 <HAL_GetTick>
 80041cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041d0:	f7fd fe96 	bl	8001f00 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e171      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80041e2:	4b80      	ldr	r3, [pc, #512]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8166 	beq.w	80044c4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041fe:	4b79      	ldr	r3, [pc, #484]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b0c      	cmp	r3, #12
 8004208:	f000 80f2 	beq.w	80043f0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	2b02      	cmp	r3, #2
 8004212:	f040 80c5 	bne.w	80043a0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b73      	ldr	r3, [pc, #460]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a72      	ldr	r2, [pc, #456]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800421c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004220:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004222:	f7fd fe6d 	bl	8001f00 <HAL_GetTick>
 8004226:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422a:	f7fd fe69 	bl	8001f00 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e144      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800423c:	4b69      	ldr	r3, [pc, #420]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004248:	4b66      	ldr	r3, [pc, #408]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800424a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d111      	bne.n	800427a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b63      	ldr	r3, [pc, #396]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800425c:	4a61      	ldr	r2, [pc, #388]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004266:	4b5f      	ldr	r3, [pc, #380]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800427a:	4b5b      	ldr	r3, [pc, #364]	@ (80043e8 <HAL_RCC_OscConfig+0xccc>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004286:	d102      	bne.n	800428e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800428e:	4b56      	ldr	r3, [pc, #344]	@ (80043e8 <HAL_RCC_OscConfig+0xccc>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	4a55      	ldr	r2, [pc, #340]	@ (80043e8 <HAL_RCC_OscConfig+0xccc>)
 8004294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004298:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800429a:	4b52      	ldr	r3, [pc, #328]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0212      	lsls	r2, r2, #8
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80042b8:	430a      	orrs	r2, r1
 80042ba:	494a      	ldr	r1, [pc, #296]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	628b      	str	r3, [r1, #40]	@ 0x28
 80042c0:	4b48      	ldr	r3, [pc, #288]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80042c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c4:	4b49      	ldr	r3, [pc, #292]	@ (80043ec <HAL_RCC_OscConfig+0xcd0>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042cc:	3a01      	subs	r2, #1
 80042ce:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0252      	lsls	r2, r2, #9
 80042da:	b292      	uxth	r2, r2
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042e2:	3a01      	subs	r2, #1
 80042e4:	0412      	lsls	r2, r2, #16
 80042e6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0612      	lsls	r2, r2, #24
 80042f4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80042f8:	430a      	orrs	r2, r1
 80042fa:	493a      	ldr	r1, [pc, #232]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004300:	4b38      	ldr	r3, [pc, #224]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	4a37      	ldr	r2, [pc, #220]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004310:	4a34      	ldr	r2, [pc, #208]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004316:	4b33      	ldr	r3, [pc, #204]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 800431c:	f043 0310 	orr.w	r3, r3, #16
 8004320:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004322:	4b30      	ldr	r3, [pc, #192]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	f023 020c 	bic.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	492d      	ldr	r1, [pc, #180]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004330:	4313      	orrs	r3, r2
 8004332:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004334:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800433c:	4b2a      	ldr	r3, [pc, #168]	@ (80043e8 <HAL_RCC_OscConfig+0xccc>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a29      	ldr	r2, [pc, #164]	@ (80043e8 <HAL_RCC_OscConfig+0xccc>)
 8004342:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004346:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004348:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800434c:	2b01      	cmp	r3, #1
 800434e:	d107      	bne.n	8004360 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004356:	4a23      	ldr	r2, [pc, #140]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004360:	4b20      	ldr	r3, [pc, #128]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800436a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800436c:	f7fd fdc8 	bl	8001f00 <HAL_GetTick>
 8004370:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd fdc4 	bl	8001f00 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e09f      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004386:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800439c:	6293      	str	r3, [r2, #40]	@ 0x28
 800439e:	e091      	b.n	80044c4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0f      	ldr	r2, [pc, #60]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043ac:	f7fd fda8 	bl	8001f00 <HAL_GetTick>
 80043b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fd fda4 	bl	8001f00 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e07f      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043c6:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80043d2:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	4a03      	ldr	r2, [pc, #12]	@ (80043e4 <HAL_RCC_OscConfig+0xcc8>)
 80043d8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80043dc:	f023 0303 	bic.w	r3, r3, #3
 80043e0:	6293      	str	r3, [r2, #40]	@ 0x28
 80043e2:	e06f      	b.n	80044c4 <HAL_RCC_OscConfig+0xda8>
 80043e4:	46020c00 	.word	0x46020c00
 80043e8:	46020800 	.word	0x46020800
 80043ec:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80043f0:	4b37      	ldr	r3, [pc, #220]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 80043f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043f6:	4b36      	ldr	r3, [pc, #216]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 80043f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004400:	2b01      	cmp	r3, #1
 8004402:	d039      	beq.n	8004478 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0203 	and.w	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d132      	bne.n	8004478 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d129      	bne.n	8004478 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d122      	bne.n	8004478 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	0a5b      	lsrs	r3, r3, #9
 8004446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d111      	bne.n	8004478 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004460:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d108      	bne.n	8004478 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	0e1b      	lsrs	r3, r3, #24
 800446a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e024      	b.n	80044c6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800447c:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	08db      	lsrs	r3, r3, #3
 8004482:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800448a:	429a      	cmp	r2, r3
 800448c:	d01a      	beq.n	80044c4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800448e:	4b10      	ldr	r3, [pc, #64]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	4a0f      	ldr	r2, [pc, #60]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 8004494:	f023 0310 	bic.w	r3, r3, #16
 8004498:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fd fd31 	bl	8001f00 <HAL_GetTick>
 800449e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80044a0:	bf00      	nop
 80044a2:	f7fd fd2d 	bl	8001f00 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d0f9      	beq.n	80044a2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b2:	4a07      	ldr	r2, [pc, #28]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80044b8:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <HAL_RCC_OscConfig+0xdb4>)
 80044be:	f043 0310 	orr.w	r3, r3, #16
 80044c2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3738      	adds	r7, #56	@ 0x38
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	46020c00 	.word	0x46020c00

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e1d9      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b9b      	ldr	r3, [pc, #620]	@ (8004758 <HAL_RCC_ClockConfig+0x284>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d910      	bls.n	8004518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b98      	ldr	r3, [pc, #608]	@ (8004758 <HAL_RCC_ClockConfig+0x284>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 020f 	bic.w	r2, r3, #15
 80044fe:	4996      	ldr	r1, [pc, #600]	@ (8004758 <HAL_RCC_ClockConfig+0x284>)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b94      	ldr	r3, [pc, #592]	@ (8004758 <HAL_RCC_ClockConfig+0x284>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e1c1      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	4b8c      	ldr	r3, [pc, #560]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004530:	429a      	cmp	r2, r3
 8004532:	d908      	bls.n	8004546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004534:	4b89      	ldr	r3, [pc, #548]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	4986      	ldr	r1, [pc, #536]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004542:	4313      	orrs	r3, r2
 8004544:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d012      	beq.n	8004578 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	4b81      	ldr	r3, [pc, #516]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004560:	429a      	cmp	r2, r3
 8004562:	d909      	bls.n	8004578 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004564:	4b7d      	ldr	r3, [pc, #500]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	497a      	ldr	r1, [pc, #488]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004574:	4313      	orrs	r3, r2
 8004576:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	4b74      	ldr	r3, [pc, #464]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004590:	429a      	cmp	r2, r3
 8004592:	d908      	bls.n	80045a6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004594:	4b71      	ldr	r3, [pc, #452]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	496e      	ldr	r1, [pc, #440]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	4b69      	ldr	r3, [pc, #420]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	429a      	cmp	r2, r3
 80045c0:	d908      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045c2:	4b66      	ldr	r3, [pc, #408]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 020f 	bic.w	r2, r3, #15
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4963      	ldr	r1, [pc, #396]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80d2 	beq.w	8004786 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d143      	bne.n	8004676 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ee:	4b5b      	ldr	r3, [pc, #364]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80045f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d110      	bne.n	800461e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80045fc:	4b57      	ldr	r3, [pc, #348]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80045fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004602:	4a56      	ldr	r2, [pc, #344]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004604:	f043 0304 	orr.w	r3, r3, #4
 8004608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800460c:	4b53      	ldr	r3, [pc, #332]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 800460e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800461e:	f7fd fc6f 	bl	8001f00 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004624:	4b4e      	ldr	r3, [pc, #312]	@ (8004760 <HAL_RCC_ClockConfig+0x28c>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004630:	e008      	b.n	8004644 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004632:	f7fd fc65 	bl	8001f00 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e12b      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004644:	4b46      	ldr	r3, [pc, #280]	@ (8004760 <HAL_RCC_ClockConfig+0x28c>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004656:	4b41      	ldr	r3, [pc, #260]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800465c:	4a3f      	ldr	r2, [pc, #252]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 800465e:	f023 0304 	bic.w	r3, r3, #4
 8004662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004666:	4b3d      	ldr	r3, [pc, #244]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d121      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e112      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467e:	4b37      	ldr	r3, [pc, #220]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d115      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e106      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004696:	4b31      	ldr	r3, [pc, #196]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e0fa      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a6:	4b2d      	ldr	r3, [pc, #180]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e0f2      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80046b6:	4b29      	ldr	r3, [pc, #164]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4926      	ldr	r1, [pc, #152]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80046c8:	f7fd fc1a 	bl	8001f00 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d112      	bne.n	80046fc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fd fc12 	bl	8001f00 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0d6      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ee:	4b1b      	ldr	r3, [pc, #108]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d1ee      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x204>
 80046fa:	e044      	b.n	8004786 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d112      	bne.n	800472a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004704:	e00a      	b.n	800471c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004706:	f7fd fbfb 	bl	8001f00 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0bf      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800471c:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d1ee      	bne.n	8004706 <HAL_RCC_ClockConfig+0x232>
 8004728:	e02d      	b.n	8004786 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d123      	bne.n	800477a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004732:	e00a      	b.n	800474a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fd fbe4 	bl	8001f00 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e0a8      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800474a:	4b04      	ldr	r3, [pc, #16]	@ (800475c <HAL_RCC_ClockConfig+0x288>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ee      	bne.n	8004734 <HAL_RCC_ClockConfig+0x260>
 8004756:	e016      	b.n	8004786 <HAL_RCC_ClockConfig+0x2b2>
 8004758:	40022000 	.word	0x40022000
 800475c:	46020c00 	.word	0x46020c00
 8004760:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	f7fd fbcc 	bl	8001f00 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e090      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800477a:	4b4a      	ldr	r3, [pc, #296]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b04      	cmp	r3, #4
 8004784:	d1ee      	bne.n	8004764 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d010      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	4b43      	ldr	r3, [pc, #268]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	429a      	cmp	r2, r3
 80047a0:	d208      	bcs.n	80047b4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047a2:	4b40      	ldr	r3, [pc, #256]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 020f 	bic.w	r2, r3, #15
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	493d      	ldr	r1, [pc, #244]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b4:	4b3c      	ldr	r3, [pc, #240]	@ (80048a8 <HAL_RCC_ClockConfig+0x3d4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d210      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b39      	ldr	r3, [pc, #228]	@ (80048a8 <HAL_RCC_ClockConfig+0x3d4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 020f 	bic.w	r2, r3, #15
 80047ca:	4937      	ldr	r1, [pc, #220]	@ (80048a8 <HAL_RCC_ClockConfig+0x3d4>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b35      	ldr	r3, [pc, #212]	@ (80048a8 <HAL_RCC_ClockConfig+0x3d4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e05b      	b.n	800489c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b2b      	ldr	r3, [pc, #172]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d208      	bcs.n	8004812 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004800:	4b28      	ldr	r3, [pc, #160]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4925      	ldr	r1, [pc, #148]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d012      	beq.n	8004844 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800482c:	429a      	cmp	r2, r3
 800482e:	d209      	bcs.n	8004844 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004830:	4b1c      	ldr	r3, [pc, #112]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	4919      	ldr	r1, [pc, #100]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d010      	beq.n	8004872 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800485c:	429a      	cmp	r2, r3
 800485e:	d208      	bcs.n	8004872 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004860:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	490d      	ldr	r1, [pc, #52]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 800486e:	4313      	orrs	r3, r2
 8004870:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0a      	ldr	r3, [pc, #40]	@ (80048a4 <HAL_RCC_ClockConfig+0x3d0>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	490a      	ldr	r1, [pc, #40]	@ (80048ac <HAL_RCC_ClockConfig+0x3d8>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	4a09      	ldr	r2, [pc, #36]	@ (80048b0 <HAL_RCC_ClockConfig+0x3dc>)
 800488a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x3e0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7fd faab 	bl	8001dec <HAL_InitTick>
 8004896:	4603      	mov	r3, r0
 8004898:	73fb      	strb	r3, [r7, #15]

  return status;
 800489a:	7bfb      	ldrb	r3, [r7, #15]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	46020c00 	.word	0x46020c00
 80048a8:	40022000 	.word	0x40022000
 80048ac:	0800a5b0 	.word	0x0800a5b0
 80048b0:	20000000 	.word	0x20000000
 80048b4:	20000004 	.word	0x20000004

080048b8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b08b      	sub	sp, #44	@ 0x2c
 80048bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	4b78      	ldr	r3, [pc, #480]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d0:	4b75      	ldr	r3, [pc, #468]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d121      	bne.n	800492a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d11e      	bne.n	800492a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80048ec:	4b6e      	ldr	r3, [pc, #440]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80048f8:	4b6b      	ldr	r3, [pc, #428]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048fe:	0b1b      	lsrs	r3, r3, #12
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
 8004906:	e005      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004908:	4b67      	ldr	r3, [pc, #412]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	0f1b      	lsrs	r3, r3, #28
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004914:	4a65      	ldr	r2, [pc, #404]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d110      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004928:	e00d      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492a:	4b5f      	ldr	r3, [pc, #380]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b04      	cmp	r3, #4
 8004934:	d102      	bne.n	800493c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004936:	4b5e      	ldr	r3, [pc, #376]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	e004      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b08      	cmp	r3, #8
 8004940:	d101      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004942:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004944:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	f040 80a5 	bne.w	8004a98 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800494e:	4b56      	ldr	r3, [pc, #344]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004958:	4b53      	ldr	r3, [pc, #332]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004966:	4b50      	ldr	r3, [pc, #320]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004972:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d003      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0xe4>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d022      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x128>
 800499a:	e043      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004ab4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049be:	ed97 6a01 	vldr	s12, [r7, #4]
 80049c2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004ab8 <HAL_RCC_GetSysClockFreq+0x200>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049de:	e046      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004ab4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a02:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a06:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004ab8 <HAL_RCC_GetSysClockFreq+0x200>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	e024      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	ee07 3a90 	vmov	s15, r3
 8004a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a4c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a50:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004ab8 <HAL_RCC_GetSysClockFreq+0x200>
 8004a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a6c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a72:	0e1b      	lsrs	r3, r3, #24
 8004a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a78:	3301      	adds	r3, #1
 8004a7a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a92:	ee17 3a90 	vmov	r3, s15
 8004a96:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004a98:	6a3b      	ldr	r3, [r7, #32]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	372c      	adds	r7, #44	@ 0x2c
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	46020c00 	.word	0x46020c00
 8004aac:	0800a5c8 	.word	0x0800a5c8
 8004ab0:	00f42400 	.word	0x00f42400
 8004ab4:	4b742400 	.word	0x4b742400
 8004ab8:	46000000 	.word	0x46000000

08004abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ac0:	f7ff fefa 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x28>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	4906      	ldr	r1, [pc, #24]	@ (8004ae8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004ad0:	5ccb      	ldrb	r3, [r1, r3]
 8004ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad6:	4a05      	ldr	r2, [pc, #20]	@ (8004aec <HAL_RCC_GetHCLKFreq+0x30>)
 8004ad8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004ada:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <HAL_RCC_GetHCLKFreq+0x30>)
 8004adc:	681b      	ldr	r3, [r3, #0]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	46020c00 	.word	0x46020c00
 8004ae8:	0800a5b0 	.word	0x0800a5b0
 8004aec:	20000000 	.word	0x20000000

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004af4:	f7ff ffe2 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	@ (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	46020c00 	.word	0x46020c00
 8004b14:	0800a5c0 	.word	0x0800a5c0

08004b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004b1c:	f7ff ffce 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	@ (8004b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	46020c00 	.word	0x46020c00
 8004b3c:	0800a5c0 	.word	0x0800a5c0

08004b40 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004b44:	f7ff ffba 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	@ (8004b64 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	46020c00 	.word	0x46020c00
 8004b64:	0800a5c0 	.word	0x0800a5c0

08004b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b70:	4b3e      	ldr	r3, [pc, #248]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b7e:	f7fe fd8f 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 8004b82:	6178      	str	r0, [r7, #20]
 8004b84:	e019      	b.n	8004bba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b86:	4b39      	ldr	r3, [pc, #228]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b8c:	4a37      	ldr	r2, [pc, #220]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b96:	4b35      	ldr	r3, [pc, #212]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ba4:	f7fe fd7c 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 8004ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b30      	ldr	r3, [pc, #192]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bb2:	f023 0304 	bic.w	r3, r3, #4
 8004bb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bc0:	d003      	beq.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bc8:	d109      	bne.n	8004bde <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bd0:	d202      	bcs.n	8004bd8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004bd6:	e033      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004bdc:	e030      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004be4:	d208      	bcs.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d102      	bne.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004bee:	2303      	movs	r3, #3
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e025      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e035      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bfe:	d90f      	bls.n	8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c0c:	d902      	bls.n	8004c14 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	e015      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004c14:	2301      	movs	r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	e012      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	e00f      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c26:	d109      	bne.n	8004c3c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2e:	d102      	bne.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004c30:	2301      	movs	r3, #1
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e004      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004c36:	2302      	movs	r3, #2
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	e001      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 020f 	bic.w	r2, r3, #15
 8004c48:	4909      	ldr	r1, [pc, #36]	@ (8004c70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c50:	4b07      	ldr	r3, [pc, #28]	@ (8004c70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	46020c00 	.word	0x46020c00
 8004c70:	40022000 	.word	0x40022000

08004c74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c78:	b0ba      	sub	sp, #232	@ 0xe8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c86:	2300      	movs	r3, #0
 8004c88:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f002 0401 	and.w	r4, r2, #1
 8004c98:	2500      	movs	r5, #0
 8004c9a:	ea54 0305 	orrs.w	r3, r4, r5
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004ca0:	4bcb      	ldr	r3, [pc, #812]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ca6:	f023 0103 	bic.w	r1, r3, #3
 8004caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb0:	4ac7      	ldr	r2, [pc, #796]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f002 0802 	and.w	r8, r2, #2
 8004cc4:	f04f 0900 	mov.w	r9, #0
 8004cc8:	ea58 0309 	orrs.w	r3, r8, r9
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004cce:	4bc0      	ldr	r3, [pc, #768]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd4:	f023 010c 	bic.w	r1, r3, #12
 8004cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	4abc      	ldr	r2, [pc, #752]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f002 0a04 	and.w	sl, r2, #4
 8004cf2:	f04f 0b00 	mov.w	fp, #0
 8004cf6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cfa:	d00b      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004cfc:	4bb4      	ldr	r3, [pc, #720]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d02:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0c:	4ab0      	ldr	r2, [pc, #704]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f002 0308 	and.w	r3, r2, #8
 8004d20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4313      	orrs	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d34:	4ba6      	ldr	r3, [pc, #664]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d44:	4aa2      	ldr	r2, [pc, #648]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f002 0310 	and.w	r3, r2, #16
 8004d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d00b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d6c:	4b98      	ldr	r3, [pc, #608]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7c:	4a94      	ldr	r2, [pc, #592]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f002 0320 	and.w	r3, r2, #32
 8004d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004da4:	4b8a      	ldr	r3, [pc, #552]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004daa:	f023 0107 	bic.w	r1, r3, #7
 8004dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004db4:	4a86      	ldr	r2, [pc, #536]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db6:	430b      	orrs	r3, r1
 8004db8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004ddc:	4b7c      	ldr	r3, [pc, #496]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004de2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dec:	4a78      	ldr	r2, [pc, #480]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e14:	4b6e      	ldr	r3, [pc, #440]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e24:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e26:	430b      	orrs	r3, r1
 8004e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e42:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	d00b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004e4c:	4b60      	ldr	r3, [pc, #384]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5c:	4a5c      	ldr	r2, [pc, #368]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e84:	4b52      	ldr	r3, [pc, #328]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e8a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e94:	4a4e      	ldr	r2, [pc, #312]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e96:	430b      	orrs	r3, r1
 8004e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004ea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004eb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ebc:	4b44      	ldr	r3, [pc, #272]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ecc:	4a40      	ldr	r2, [pc, #256]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	d00b      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004ef4:	4b36      	ldr	r3, [pc, #216]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004efa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f04:	4a32      	ldr	r2, [pc, #200]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f06:	430b      	orrs	r3, r1
 8004f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d00c      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004f2c:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3e:	4a24      	ldr	r2, [pc, #144]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f54:	2300      	movs	r3, #0
 8004f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	d04f      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6a:	2b80      	cmp	r3, #128	@ 0x80
 8004f6c:	d02d      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004f6e:	2b80      	cmp	r3, #128	@ 0x80
 8004f70:	d827      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f72:	2b60      	cmp	r3, #96	@ 0x60
 8004f74:	d02e      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004f76:	2b60      	cmp	r3, #96	@ 0x60
 8004f78:	d823      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d006      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	d81f      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d011      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004f8a:	e01a      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f8c:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	4a0f      	ldr	r2, [pc, #60]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f96:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f98:	e01d      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 fa17 	bl	80073d4 <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fac:	e013      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fb2:	332c      	adds	r3, #44	@ 0x2c
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f002 faa5 	bl	8007504 <RCCEx_PLL3_Config>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fc0:	e009      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fc8:	e005      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004fca:	bf00      	nop
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004fce:	bf00      	nop
 8004fd0:	46020c00 	.word	0x46020c00
        break;
 8004fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10d      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004fde:	4bb6      	ldr	r3, [pc, #728]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fe0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fe4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004fe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff0:	4ab1      	ldr	r2, [pc, #708]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ff8:	e003      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ffe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800500e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005010:	2300      	movs	r3, #0
 8005012:	677b      	str	r3, [r7, #116]	@ 0x74
 8005014:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005018:	460b      	mov	r3, r1
 800501a:	4313      	orrs	r3, r2
 800501c:	d053      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800501e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502a:	d033      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005030:	d82c      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005036:	d02f      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800503c:	d826      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800503e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005042:	d008      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005048:	d820      	bhi.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800504e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005052:	d011      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005054:	e01a      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005056:	4b98      	ldr	r3, [pc, #608]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	4a97      	ldr	r2, [pc, #604]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005060:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005062:	e01a      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005068:	3308      	adds	r3, #8
 800506a:	4618      	mov	r0, r3
 800506c:	f002 f9b2 	bl	80073d4 <RCCEx_PLL2_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005076:	e010      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800507c:	332c      	adds	r3, #44	@ 0x2c
 800507e:	4618      	mov	r0, r3
 8005080:	f002 fa40 	bl	8007504 <RCCEx_PLL3_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800508a:	e006      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005092:	e002      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005094:	bf00      	nop
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10d      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80050a2:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050a8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80050ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b4:	4a80      	ldr	r2, [pc, #512]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050bc:	e003      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050c2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80050c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050d4:	2300      	movs	r3, #0
 80050d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80050dc:	460b      	mov	r3, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	d046      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80050e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050ee:	d028      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80050f0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80050f4:	d821      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80050f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050fa:	d022      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80050fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005100:	d81b      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005102:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005106:	d01c      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005108:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800510c:	d815      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800510e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005112:	d008      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005118:	d80f      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d011      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005122:	d00e      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005124:	e009      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800512a:	3308      	adds	r3, #8
 800512c:	4618      	mov	r0, r3
 800512e:	f002 f951 	bl	80073d4 <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005138:	e004      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005140:	e000      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005144:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10d      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800514c:	4b5a      	ldr	r3, [pc, #360]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800514e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005152:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800515a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800515e:	4a56      	ldr	r2, [pc, #344]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005160:	430b      	orrs	r3, r1
 8005162:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005166:	e003      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800516c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800517c:	663b      	str	r3, [r7, #96]	@ 0x60
 800517e:	2300      	movs	r3, #0
 8005180:	667b      	str	r3, [r7, #100]	@ 0x64
 8005182:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005186:	460b      	mov	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	d03f      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800518c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	2b04      	cmp	r3, #4
 8005196:	d81e      	bhi.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005198:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051b5 	.word	0x080051b5
 80051a8:	080051c3 	.word	0x080051c3
 80051ac:	080051df 	.word	0x080051df
 80051b0:	080051df 	.word	0x080051df
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051b4:	4b40      	ldr	r3, [pc, #256]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b8:	4a3f      	ldr	r2, [pc, #252]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051be:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80051c0:	e00e      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c6:	332c      	adds	r3, #44	@ 0x2c
 80051c8:	4618      	mov	r0, r3
 80051ca:	f002 f99b 	bl	8007504 <RCCEx_PLL3_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051d4:	e004      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051dc:	e000      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80051de:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10d      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80051e8:	4b33      	ldr	r3, [pc, #204]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051ee:	f023 0107 	bic.w	r1, r3, #7
 80051f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	4a2f      	ldr	r2, [pc, #188]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051fc:	430b      	orrs	r3, r1
 80051fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005202:	e003      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005208:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800520c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005218:	65bb      	str	r3, [r7, #88]	@ 0x58
 800521a:	2300      	movs	r3, #0
 800521c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800521e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d04d      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800522c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005230:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005234:	d028      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005236:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800523a:	d821      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800523c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005240:	d024      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005242:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005246:	d81b      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800524c:	d00e      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800524e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005252:	d815      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525c:	d110      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800525e:	4b16      	ldr	r3, [pc, #88]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	4a15      	ldr	r2, [pc, #84]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005268:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800526a:	e012      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800526c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005270:	332c      	adds	r3, #44	@ 0x2c
 8005272:	4618      	mov	r0, r3
 8005274:	f002 f946 	bl	8007504 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800527e:	e008      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005286:	e004      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005288:	bf00      	nop
 800528a:	e002      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800528c:	bf00      	nop
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005290:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005292:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d110      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800529a:	4b07      	ldr	r3, [pc, #28]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800529c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ac:	4a02      	ldr	r2, [pc, #8]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052b4:	e006      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80052b6:	bf00      	nop
 80052b8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052c0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80052d2:	2300      	movs	r3, #0
 80052d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80052da:	460b      	mov	r3, r1
 80052dc:	4313      	orrs	r3, r2
 80052de:	f000 80b5 	beq.w	800544c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e8:	4b9d      	ldr	r3, [pc, #628]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d113      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	4b9a      	ldr	r3, [pc, #616]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052fc:	4a98      	ldr	r2, [pc, #608]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052fe:	f043 0304 	orr.w	r3, r3, #4
 8005302:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005306:	4b96      	ldr	r3, [pc, #600]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800531e:	4b91      	ldr	r3, [pc, #580]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	4a90      	ldr	r2, [pc, #576]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800532a:	f7fc fde9 	bl	8001f00 <HAL_GetTick>
 800532e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005332:	e00b      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005334:	f7fc fde4 	bl	8001f00 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d903      	bls.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800534a:	e005      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800534c:	4b85      	ldr	r3, [pc, #532]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800534e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0ed      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005358:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d165      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005360:	4b7f      	ldr	r3, [pc, #508]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800536a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d023      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800537a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005382:	4293      	cmp	r3, r2
 8005384:	d01b      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005386:	4b76      	ldr	r3, [pc, #472]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800538c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005394:	4b72      	ldr	r3, [pc, #456]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800539a:	4a71      	ldr	r2, [pc, #452]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d019      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fc fd99 	bl	8001f00 <HAL_GetTick>
 80053ce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d2:	e00d      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d4:	f7fc fd94 	bl	8001f00 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d903      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80053ee:	e006      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0ea      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80053fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005406:	4b56      	ldr	r3, [pc, #344]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800540c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005414:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005418:	4a51      	ldr	r2, [pc, #324]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800541a:	430b      	orrs	r3, r1
 800541c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005420:	e008      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005422:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005426:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800542a:	e003      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005430:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005434:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543c:	4b48      	ldr	r3, [pc, #288]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800543e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005442:	4a47      	ldr	r2, [pc, #284]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800544c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545a:	2300      	movs	r3, #0
 800545c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800545e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d042      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005468:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800546c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005470:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005474:	d022      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005476:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800547a:	d81b      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800547c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005480:	d011      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005486:	d815      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800548c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005490:	d110      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005496:	3308      	adds	r3, #8
 8005498:	4618      	mov	r0, r3
 800549a:	f001 ff9b 	bl	80073d4 <RCCEx_PLL2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054a4:	e00d      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80054b2:	e006      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054ba:	e002      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80054c0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10d      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80054ca:	4b25      	ldr	r3, [pc, #148]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054d0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80054d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054dc:	4a20      	ldr	r2, [pc, #128]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054de:	430b      	orrs	r3, r1
 80054e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80054e4:	e003      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054ea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80054fc:	2300      	movs	r3, #0
 80054fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005500:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d032      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800550a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800550e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005516:	d00b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551c:	d804      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005526:	d007      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005530:	bf00      	nop
 8005532:	e002      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005538:	bf00      	nop
    }
    if (ret == HAL_OK)
 800553a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d112      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005542:	4b07      	ldr	r3, [pc, #28]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005544:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005548:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800554c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005554:	4a02      	ldr	r2, [pc, #8]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005556:	430b      	orrs	r3, r1
 8005558:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800555c:	e008      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800555e:	bf00      	nop
 8005560:	46020c00 	.word	0x46020c00
 8005564:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005568:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800556c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800557c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800557e:	2300      	movs	r3, #0
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005582:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005586:	460b      	mov	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	d00c      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800558c:	4b98      	ldr	r3, [pc, #608]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800558e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005592:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800559a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800559e:	4a94      	ldr	r2, [pc, #592]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055a0:	430b      	orrs	r3, r1
 80055a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80055a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b4:	2300      	movs	r3, #0
 80055b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055bc:	460b      	mov	r3, r1
 80055be:	4313      	orrs	r3, r2
 80055c0:	d019      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80055c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ce:	d105      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055d0:	4b87      	ldr	r3, [pc, #540]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	4a86      	ldr	r2, [pc, #536]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055da:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80055dc:	4b84      	ldr	r3, [pc, #528]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055e2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80055e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055ee:	4a80      	ldr	r2, [pc, #512]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055f0:	430b      	orrs	r3, r1
 80055f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80055f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005602:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005604:	2300      	movs	r3, #0
 8005606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005608:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800560c:	460b      	mov	r3, r1
 800560e:	4313      	orrs	r3, r2
 8005610:	d00c      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005612:	4b77      	ldr	r3, [pc, #476]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005618:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800561c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005624:	4972      	ldr	r1, [pc, #456]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800562c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	2300      	movs	r3, #0
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
 800563e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d00c      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005648:	4b69      	ldr	r3, [pc, #420]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800564a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800564e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005656:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800565a:	4965      	ldr	r1, [pc, #404]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d00c      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800567e:	4b5c      	ldr	r3, [pc, #368]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005684:	f023 0218 	bic.w	r2, r3, #24
 8005688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800568c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005690:	4957      	ldr	r1, [pc, #348]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80056ae:	460b      	mov	r3, r1
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d032      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80056b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056c0:	d105      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c2:	4b4b      	ldr	r3, [pc, #300]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	4a4a      	ldr	r2, [pc, #296]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056cc:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80056ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056da:	d108      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e0:	3308      	adds	r3, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fe76 	bl	80073d4 <RCCEx_PLL2_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80056ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80056f6:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005708:	4939      	ldr	r1, [pc, #228]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005716:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800571a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005730:	460b      	mov	r3, r1
 8005732:	4313      	orrs	r3, r2
 8005734:	d03a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800573a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005742:	d00e      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005748:	d815      	bhi.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d017      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800574e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005752:	d110      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005754:	4b26      	ldr	r3, [pc, #152]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	4a25      	ldr	r2, [pc, #148]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800575a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005760:	e00e      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005766:	3308      	adds	r3, #8
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fe33 	bl	80073d4 <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005774:	e004      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800577c:	e000      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800577e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005780:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10d      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005788:	4b19      	ldr	r3, [pc, #100]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800578a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800578e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800579a:	4915      	ldr	r1, [pc, #84]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80057a2:	e003      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80057ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057c2:	460b      	mov	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	d00c      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80057c8:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057ce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057da:	4905      	ldr	r1, [pc, #20]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80057e2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	37e8      	adds	r7, #232	@ 0xe8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f0:	46020c00 	.word	0x46020c00

080057f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b089      	sub	sp, #36	@ 0x24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80057fc:	4ba6      	ldr	r3, [pc, #664]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005804:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005806:	4ba4      	ldr	r3, [pc, #656]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005810:	4ba1      	ldr	r3, [pc, #644]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	3301      	adds	r3, #1
 800581c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800581e:	4b9e      	ldr	r3, [pc, #632]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800582a:	4b9b      	ldr	r3, [pc, #620]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d062      	beq.n	8005912 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b03      	cmp	r3, #3
 8005850:	f200 8081 	bhi.w	8005956 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d024      	beq.n	80058a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d17a      	bne.n	8005956 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005a9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b89      	ldr	r3, [pc, #548]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005882:	ed97 6a02 	vldr	s12, [r7, #8]
 8005886:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a2:	e08f      	b.n	80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80058b0:	4b79      	ldr	r3, [pc, #484]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	0f1b      	lsrs	r3, r3, #28
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	e006      	b.n	80058ca <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80058bc:	4b76      	ldr	r3, [pc, #472]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	0f1b      	lsrs	r3, r3, #28
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	4a76      	ldr	r2, [pc, #472]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80058cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80058f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005904:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005910:	e058      	b.n	80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	ee07 3a90 	vmov	s15, r3
 8005918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005924:	4b5c      	ldr	r3, [pc, #368]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005934:	ed97 6a02 	vldr	s12, [r7, #8]
 8005938:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800593c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005940:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005948:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800594c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005950:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005954:	e036      	b.n	80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005956:	4b50      	ldr	r3, [pc, #320]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005962:	4b4d      	ldr	r3, [pc, #308]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0f1b      	lsrs	r3, r3, #28
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	e006      	b.n	800597c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800596e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005974:	041b      	lsls	r3, r3, #16
 8005976:	0f1b      	lsrs	r3, r3, #28
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	4a49      	ldr	r2, [pc, #292]	@ (8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800597e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80059aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80059c4:	4b34      	ldr	r3, [pc, #208]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d017      	beq.n	8005a00 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059d0:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d4:	0a5b      	lsrs	r3, r3, #9
 80059d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80059e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80059ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f6:	ee17 2a90 	vmov	r2, s15
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e002      	b.n	8005a06 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005a06:	4b24      	ldr	r3, [pc, #144]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a12:	4b21      	ldr	r3, [pc, #132]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005a24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a28:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a38:	ee17 2a90 	vmov	r2, s15
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005a48:	4b13      	ldr	r3, [pc, #76]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d017      	beq.n	8005a84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a54:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a58:	0e1b      	lsrs	r3, r3, #24
 8005a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005a66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7a:	ee17 2a90 	vmov	r2, s15
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a82:	e002      	b.n	8005a8a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
}
 8005a8a:	bf00      	nop
 8005a8c:	3724      	adds	r7, #36	@ 0x24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	46020c00 	.word	0x46020c00
 8005a9c:	4b742400 	.word	0x4b742400
 8005aa0:	46000000 	.word	0x46000000
 8005aa4:	0800a5c8 	.word	0x0800a5c8

08005aa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	@ 0x24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005ab0:	4ba6      	ldr	r3, [pc, #664]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005aba:	4ba4      	ldr	r3, [pc, #656]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	3301      	adds	r3, #1
 8005ad0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005ad2:	4b9e      	ldr	r3, [pc, #632]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005ade:	4b9b      	ldr	r3, [pc, #620]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	08db      	lsrs	r3, r3, #3
 8005ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d062      	beq.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	f200 8081 	bhi.w	8005c0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d024      	beq.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d17a      	bne.n	8005c0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b26:	4b89      	ldr	r3, [pc, #548]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b56:	e08f      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005b58:	4b7c      	ldr	r3, [pc, #496]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005b64:	4b79      	ldr	r3, [pc, #484]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	0f1b      	lsrs	r3, r3, #28
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	e006      	b.n	8005b7e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005b70:	4b76      	ldr	r3, [pc, #472]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	0f1b      	lsrs	r3, r3, #28
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	4a76      	ldr	r2, [pc, #472]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ba8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc4:	e058      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd8:	4b5c      	ldr	r3, [pc, #368]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005be8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c08:	e036      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c0a:	4b50      	ldr	r3, [pc, #320]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005c16:	4b4d      	ldr	r3, [pc, #308]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	0f1b      	lsrs	r3, r3, #28
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	e006      	b.n	8005c30 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005c22:	4b4a      	ldr	r3, [pc, #296]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	0f1b      	lsrs	r3, r3, #28
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	4a49      	ldr	r2, [pc, #292]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c76:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005c78:	4b34      	ldr	r3, [pc, #208]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c84:	4b31      	ldr	r3, [pc, #196]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	0a5b      	lsrs	r3, r3, #9
 8005c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005caa:	ee17 2a90 	vmov	r2, s15
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e002      	b.n	8005cba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005cba:	4b24      	ldr	r3, [pc, #144]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d017      	beq.n	8005cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005cc6:	4b21      	ldr	r3, [pc, #132]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cca:	0c1b      	lsrs	r3, r3, #16
 8005ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005cd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cec:	ee17 2a90 	vmov	r2, s15
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	e002      	b.n	8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005cfc:	4b13      	ldr	r3, [pc, #76]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d08:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2e:	ee17 2a90 	vmov	r2, s15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d36:	e002      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	609a      	str	r2, [r3, #8]
}
 8005d3e:	bf00      	nop
 8005d40:	3724      	adds	r7, #36	@ 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	46020c00 	.word	0x46020c00
 8005d50:	4b742400 	.word	0x4b742400
 8005d54:	46000000 	.word	0x46000000
 8005d58:	0800a5c8 	.word	0x0800a5c8

08005d5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	@ 0x24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005d64:	4ba6      	ldr	r3, [pc, #664]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005d78:	4ba1      	ldr	r3, [pc, #644]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	3301      	adds	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005d86:	4b9e      	ldr	r3, [pc, #632]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	091b      	lsrs	r3, r3, #4
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005d92:	4b9b      	ldr	r3, [pc, #620]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d96:	08db      	lsrs	r3, r3, #3
 8005d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d062      	beq.n	8005e7a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	f200 8081 	bhi.w	8005ebe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d024      	beq.n	8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d17a      	bne.n	8005ebe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b89      	ldr	r3, [pc, #548]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005e0a:	e08f      	b.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005e18:	4b79      	ldr	r3, [pc, #484]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	0f1b      	lsrs	r3, r3, #28
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	e006      	b.n	8005e32 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005e24:	4b76      	ldr	r3, [pc, #472]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	0f1b      	lsrs	r3, r3, #28
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	4a76      	ldr	r2, [pc, #472]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e58:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e5c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e78:	e058      	b.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ebc:	e036      	b.n	8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ebe:	4b50      	ldr	r3, [pc, #320]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005eca:	4b4d      	ldr	r3, [pc, #308]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0f1b      	lsrs	r3, r3, #28
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005edc:	041b      	lsls	r3, r3, #16
 8005ede:	0f1b      	lsrs	r3, r3, #28
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	4a49      	ldr	r2, [pc, #292]	@ (800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f2a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005f2c:	4b34      	ldr	r3, [pc, #208]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d017      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f38:	4b31      	ldr	r3, [pc, #196]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3c:	0a5b      	lsrs	r3, r3, #9
 8005f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5e:	ee17 2a90 	vmov	r2, s15
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f6e:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f7a:	4b21      	ldr	r3, [pc, #132]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa0:	ee17 2a90 	vmov	r2, s15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005fb0:	4b13      	ldr	r3, [pc, #76]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d017      	beq.n	8005fec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc0:	0e1b      	lsrs	r3, r3, #24
 8005fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe2:	ee17 2a90 	vmov	r2, s15
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fea:	e002      	b.n	8005ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
}
 8005ff2:	bf00      	nop
 8005ff4:	3724      	adds	r7, #36	@ 0x24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	46020c00 	.word	0x46020c00
 8006004:	4b742400 	.word	0x4b742400
 8006008:	46000000 	.word	0x46000000
 800600c:	0800a5c8 	.word	0x0800a5c8

08006010 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	@ 0x38
 8006014:	af00      	add	r7, sp, #0
 8006016:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800601a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800601e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006022:	430b      	orrs	r3, r1
 8006024:	d145      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006026:	4ba7      	ldr	r3, [pc, #668]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800602c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006030:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006032:	4ba4      	ldr	r3, [pc, #656]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d108      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006046:	d104      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
 800604e:	f001 b9b3 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006052:	4b9c      	ldr	r3, [pc, #624]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800605c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006060:	d114      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006068:	d110      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800606a:	4b96      	ldr	r3, [pc, #600]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800606c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006078:	d103      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800607a:	23fa      	movs	r3, #250	@ 0xfa
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800607e:	f001 b99b 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006082:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006086:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006088:	f001 b996 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800608c:	4b8d      	ldr	r3, [pc, #564]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006098:	d107      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060a0:	d103      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80060a2:	4b89      	ldr	r3, [pc, #548]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a6:	f001 b987 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ae:	f001 b983 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80060b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060ba:	430b      	orrs	r3, r1
 80060bc:	d151      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80060be:	4b81      	ldr	r3, [pc, #516]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060c4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80060c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2b80      	cmp	r3, #128	@ 0x80
 80060ce:	d035      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	2b80      	cmp	r3, #128	@ 0x80
 80060d4:	d841      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	2b60      	cmp	r3, #96	@ 0x60
 80060da:	d02a      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	2b60      	cmp	r3, #96	@ 0x60
 80060e0:	d83b      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	2b40      	cmp	r3, #64	@ 0x40
 80060e6:	d009      	beq.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	d835      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d012      	beq.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060fa:	e02e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fb77 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800610a:	f001 b955 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800610e:	f107 0318 	add.w	r3, r7, #24
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fcc8 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800611c:	f001 b94c 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006120:	f107 030c 	add.w	r3, r7, #12
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fe19 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800612e:	f001 b943 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006132:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006138:	f001 b93e 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800613c:	4b61      	ldr	r3, [pc, #388]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006148:	d103      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800614a:	4b60      	ldr	r3, [pc, #384]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800614e:	f001 b933 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006156:	f001 b92f 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800615e:	f001 b92b 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006166:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800616a:	430b      	orrs	r3, r1
 800616c:	d158      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800616e:	4b55      	ldr	r3, [pc, #340]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006170:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006174:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006180:	d03b      	beq.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006188:	d846      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006190:	d02e      	beq.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006198:	d83e      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a0:	d00b      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a8:	d836      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00d      	beq.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b6:	d012      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80061b8:	e02e      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fb18 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061c8:	f001 b8f6 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061cc:	f107 0318 	add.w	r3, r7, #24
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fc69 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061da:	f001 b8ed 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fdba 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ec:	f001 b8e4 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061f0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f6:	f001 b8df 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061fa:	4b32      	ldr	r3, [pc, #200]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006206:	d103      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006208:	4b30      	ldr	r3, [pc, #192]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800620c:	f001 b8d4 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006214:	f001 b8d0 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800621c:	f001 b8cc 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006224:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006228:	430b      	orrs	r3, r1
 800622a:	d126      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800622c:	4b25      	ldr	r3, [pc, #148]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800622e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006236:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006238:	4b22      	ldr	r3, [pc, #136]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006244:	d106      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800624c:	4b1f      	ldr	r3, [pc, #124]	@ (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006250:	f001 b8b2 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006254:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006260:	d107      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006268:	d103      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800626a:	4b19      	ldr	r3, [pc, #100]	@ (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	f001 b8a3 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
 8006276:	f001 b89f 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800627a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006282:	430b      	orrs	r3, r1
 8006284:	d16e      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006286:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800628c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006290:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006298:	d03d      	beq.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80062a0:	d85c      	bhi.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062a8:	d014      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062b0:	d854      	bhi.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01f      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062be:	d012      	beq.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80062c0:	e04c      	b.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80062c2:	bf00      	nop
 80062c4:	46020c00 	.word	0x46020c00
 80062c8:	0007a120 	.word	0x0007a120
 80062cc:	00f42400 	.word	0x00f42400
 80062d0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fa8b 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062e2:	f001 b869 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e6:	f107 0318 	add.w	r3, r7, #24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fbdc 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062f4:	f001 b860 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80062f8:	4ba7      	ldr	r3, [pc, #668]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006304:	d103      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006306:	4ba5      	ldr	r3, [pc, #660]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800630a:	f001 b855 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006312:	f001 b851 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006316:	4ba0      	ldr	r3, [pc, #640]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d118      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006322:	4b9d      	ldr	r3, [pc, #628]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800632e:	4b9a      	ldr	r3, [pc, #616]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0e1b      	lsrs	r3, r3, #24
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	e006      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800633a:	4b97      	ldr	r3, [pc, #604]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800633c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	0e1b      	lsrs	r3, r3, #24
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	4a95      	ldr	r2, [pc, #596]	@ (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800634a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006350:	f001 b832 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006358:	f001 b82e 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006360:	f001 b82a 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006368:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800636c:	430b      	orrs	r3, r1
 800636e:	d17f      	bne.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006370:	4b89      	ldr	r3, [pc, #548]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006372:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800637a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	2b00      	cmp	r3, #0
 8006380:	d165      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006382:	4b85      	ldr	r3, [pc, #532]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006388:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800638c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006394:	d034      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800639c:	d853      	bhi.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063a4:	d00b      	beq.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ac:	d84b      	bhi.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d016      	beq.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063ba:	d009      	beq.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80063bc:	e043      	b.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fa16 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063cc:	f000 bff4 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063d0:	f107 0318 	add.w	r3, r7, #24
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fb67 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063de:	f000 bfeb 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80063e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ee:	d103      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80063f0:	4b6a      	ldr	r3, [pc, #424]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80063f2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80063f4:	f000 bfe0 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80063fc:	f000 bfdc 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006400:	4b65      	ldr	r3, [pc, #404]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b20      	cmp	r3, #32
 800640a:	d118      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800640c:	4b62      	ldr	r3, [pc, #392]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006418:	4b5f      	ldr	r3, [pc, #380]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	0e1b      	lsrs	r3, r3, #24
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	e006      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006424:	4b5c      	ldr	r3, [pc, #368]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800642a:	041b      	lsls	r3, r3, #16
 800642c:	0e1b      	lsrs	r3, r3, #24
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	4a5b      	ldr	r2, [pc, #364]	@ (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800643a:	f000 bfbd 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006442:	f000 bfb9 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800644a:	f000 bfb5 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006454:	d108      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff f9ca 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
 8006464:	f000 bfa8 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
 800646c:	f000 bfa4 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006474:	1e51      	subs	r1, r2, #1
 8006476:	430b      	orrs	r3, r1
 8006478:	d136      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800647a:	4b47      	ldr	r3, [pc, #284]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800647c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800648c:	f7fe fb44 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8006490:	6378      	str	r0, [r7, #52]	@ 0x34
 8006492:	f000 bf91 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d104      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800649c:	f7fe fa0c 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80064a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80064a2:	f000 bf89 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80064a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b2:	d106      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d103      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80064ba:	4b3a      	ldr	r3, [pc, #232]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	f000 bf7b 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80064c2:	4b35      	ldr	r3, [pc, #212]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d107      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d104      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80064d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
 80064dc:	f000 bf6c 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e4:	f000 bf68 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80064e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ec:	1e91      	subs	r1, r2, #2
 80064ee:	430b      	orrs	r3, r1
 80064f0:	d136      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80064f2:	4b29      	ldr	r3, [pc, #164]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064f8:	f003 030c 	and.w	r3, r3, #12
 80064fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006504:	f7fe faf4 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006508:	6378      	str	r0, [r7, #52]	@ 0x34
 800650a:	f000 bf55 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	2b04      	cmp	r3, #4
 8006512:	d104      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006514:	f7fe f9d0 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006518:	6378      	str	r0, [r7, #52]	@ 0x34
 800651a:	f000 bf4d 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800651e:	4b1e      	ldr	r3, [pc, #120]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800652a:	d106      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	2b08      	cmp	r3, #8
 8006530:	d103      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006532:	4b1c      	ldr	r3, [pc, #112]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006534:	637b      	str	r3, [r7, #52]	@ 0x34
 8006536:	f000 bf3f 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800653a:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800653c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b02      	cmp	r3, #2
 8006546:	d107      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	2b0c      	cmp	r3, #12
 800654c:	d104      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006552:	637b      	str	r3, [r7, #52]	@ 0x34
 8006554:	f000 bf30 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	637b      	str	r3, [r7, #52]	@ 0x34
 800655c:	f000 bf2c 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	1f11      	subs	r1, r2, #4
 8006566:	430b      	orrs	r3, r1
 8006568:	d13f      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800656a:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800656c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006570:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006574:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800657c:	f7fe fab8 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006580:	6378      	str	r0, [r7, #52]	@ 0x34
 8006582:	f000 bf19 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	2b10      	cmp	r3, #16
 800658a:	d10d      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800658c:	f7fe f994 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006590:	6378      	str	r0, [r7, #52]	@ 0x34
 8006592:	f000 bf11 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006596:	bf00      	nop
 8006598:	46020c00 	.word	0x46020c00
 800659c:	02dc6c00 	.word	0x02dc6c00
 80065a0:	0800a5c8 	.word	0x0800a5c8
 80065a4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80065a8:	4ba6      	ldr	r3, [pc, #664]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b4:	d106      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d103      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80065bc:	4ba2      	ldr	r3, [pc, #648]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80065be:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c0:	f000 befa 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80065c4:	4b9f      	ldr	r3, [pc, #636]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d107      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	2b30      	cmp	r3, #48	@ 0x30
 80065d6:	d104      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80065d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065de:	f000 beeb 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e6:	f000 bee7 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80065ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ee:	f1a2 0108 	sub.w	r1, r2, #8
 80065f2:	430b      	orrs	r3, r1
 80065f4:	d136      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065f6:	4b93      	ldr	r3, [pc, #588]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065fc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fe fa72 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 800660c:	6378      	str	r0, [r7, #52]	@ 0x34
 800660e:	f000 bed3 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2b40      	cmp	r3, #64	@ 0x40
 8006616:	d104      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006618:	f7fe f94e 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 800661c:	6378      	str	r0, [r7, #52]	@ 0x34
 800661e:	f000 becb 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006622:	4b88      	ldr	r3, [pc, #544]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800662a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662e:	d106      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	2b80      	cmp	r3, #128	@ 0x80
 8006634:	d103      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006636:	4b84      	ldr	r3, [pc, #528]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
 800663a:	f000 bebd 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800663e:	4b81      	ldr	r3, [pc, #516]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d107      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006650:	d104      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
 8006658:	f000 beae 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006660:	f000 beaa 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006668:	f1a2 0110 	sub.w	r1, r2, #16
 800666c:	430b      	orrs	r3, r1
 800666e:	d139      	bne.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006670:	4b74      	ldr	r3, [pc, #464]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800667a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006682:	f7fe fa35 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006686:	6378      	str	r0, [r7, #52]	@ 0x34
 8006688:	f000 be96 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006692:	d104      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006694:	f7fe f910 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006698:	6378      	str	r0, [r7, #52]	@ 0x34
 800669a:	f000 be8d 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800669e:	4b69      	ldr	r3, [pc, #420]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066aa:	d107      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b2:	d103      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80066b4:	4b64      	ldr	r3, [pc, #400]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80066b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b8:	f000 be7e 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80066bc:	4b61      	ldr	r3, [pc, #388]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d108      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d0:	d104      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80066d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d8:	f000 be6e 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e0:	f000 be6a 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80066e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e8:	f1a2 0120 	sub.w	r1, r2, #32
 80066ec:	430b      	orrs	r3, r1
 80066ee:	d158      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066f0:	4b54      	ldr	r3, [pc, #336]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006702:	f7fe fa1d 	bl	8004b40 <HAL_RCC_GetPCLK3Freq>
 8006706:	6378      	str	r0, [r7, #52]	@ 0x34
 8006708:	f000 be56 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	2b01      	cmp	r3, #1
 8006710:	d104      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006712:	f7fe f8d1 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006716:	6378      	str	r0, [r7, #52]	@ 0x34
 8006718:	f000 be4e 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800671c:	4b49      	ldr	r3, [pc, #292]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006728:	d106      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	2b02      	cmp	r3, #2
 800672e:	d103      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006730:	4b45      	ldr	r3, [pc, #276]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
 8006734:	f000 be40 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006738:	4b42      	ldr	r3, [pc, #264]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800673a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b02      	cmp	r3, #2
 8006744:	d107      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2b03      	cmp	r3, #3
 800674a:	d104      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800674c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
 8006752:	f000 be31 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006756:	4b3b      	ldr	r3, [pc, #236]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b20      	cmp	r3, #32
 8006760:	d11b      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	2b04      	cmp	r3, #4
 8006766:	d118      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006768:	4b36      	ldr	r3, [pc, #216]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006774:	4b33      	ldr	r3, [pc, #204]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	0e1b      	lsrs	r3, r3, #24
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	e006      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006780:	4b30      	ldr	r3, [pc, #192]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	0e1b      	lsrs	r3, r3, #24
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	4a2f      	ldr	r2, [pc, #188]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 8006796:	f000 be0f 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34
 800679e:	f000 be0b 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80067a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80067aa:	430b      	orrs	r3, r1
 80067ac:	d172      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80067ae:	4b25      	ldr	r3, [pc, #148]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80067b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c0:	d104      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067c2:	f7fe f879 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80067c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80067c8:	f000 bdf6 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d2:	d108      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d4:	f107 0318 	add.w	r3, r7, #24
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff f965 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e2:	f000 bde9 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80067ec:	f7fe f966 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 80067f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067f2:	f000 bde1 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067fc:	d128      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067fe:	4b11      	ldr	r3, [pc, #68]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b20      	cmp	r3, #32
 8006808:	d118      	bne.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800680a:	4b0e      	ldr	r3, [pc, #56]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006816:	4b0b      	ldr	r3, [pc, #44]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	0e1b      	lsrs	r3, r3, #24
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	e006      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006822:	4b08      	ldr	r3, [pc, #32]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	0e1b      	lsrs	r3, r3, #24
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	4a06      	ldr	r2, [pc, #24]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
 8006838:	f000 bdbe 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006840:	f000 bdba 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006844:	46020c00 	.word	0x46020c00
 8006848:	00f42400 	.word	0x00f42400
 800684c:	0800a5c8 	.word	0x0800a5c8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006850:	4baf      	ldr	r3, [pc, #700]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800685c:	d107      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006864:	d103      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8006866:	4bab      	ldr	r3, [pc, #684]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
 800686a:	f000 bda5 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800686e:	4ba8      	ldr	r3, [pc, #672]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687a:	d107      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006882:	d103      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8006884:	4ba3      	ldr	r3, [pc, #652]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
 8006888:	f000 bd96 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006890:	f000 bd92 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006898:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800689c:	430b      	orrs	r3, r1
 800689e:	d158      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80068a0:	4b9b      	ldr	r3, [pc, #620]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80068a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d84b      	bhi.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80068b2:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068f1 	.word	0x080068f1
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	080068df 	.word	0x080068df
 80068c4:	080068fb 	.word	0x080068fb
 80068c8:	08006905 	.word	0x08006905
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe ff8f 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068da:	f000 bd6d 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068de:	f107 030c 	add.w	r3, r7, #12
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff fa3a 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ec:	f000 bd64 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80068f0:	f7fe f8e4 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 80068f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068f6:	f000 bd5f 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068fa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006900:	f000 bd5a 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006904:	4b82      	ldr	r3, [pc, #520]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b20      	cmp	r3, #32
 800690e:	d118      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006910:	4b7f      	ldr	r3, [pc, #508]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800691c:	4b7c      	ldr	r3, [pc, #496]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	0e1b      	lsrs	r3, r3, #24
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	e006      	b.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006928:	4b79      	ldr	r3, [pc, #484]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800692a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800692e:	041b      	lsls	r3, r3, #16
 8006930:	0e1b      	lsrs	r3, r3, #24
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	4a78      	ldr	r2, [pc, #480]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800693e:	f000 bd3b 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006946:	f000 bd37 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800694e:	f000 bd33 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006956:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800695a:	430b      	orrs	r3, r1
 800695c:	d167      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800695e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006964:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006968:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006970:	d036      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006978:	d855      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006980:	d029      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006988:	d84d      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006990:	d013      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006998:	d845      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a6:	d13e      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe ff21 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069b6:	f000 bcff 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ba:	f107 030c 	add.w	r3, r7, #12
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff f9cc 	bl	8005d5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069c8:	f000 bcf6 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80069cc:	f7fe f876 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 80069d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069d2:	f000 bcf1 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80069d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069dc:	f000 bcec 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d118      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069ec:	4b48      	ldr	r3, [pc, #288]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80069f8:	4b45      	ldr	r3, [pc, #276]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	0e1b      	lsrs	r3, r3, #24
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	e006      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006a04:	4b42      	ldr	r3, [pc, #264]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	0e1b      	lsrs	r3, r3, #24
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	4a41      	ldr	r2, [pc, #260]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a1a:	f000 bccd 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a22:	f000 bcc9 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a2a:	f000 bcc5 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a32:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006a36:	430b      	orrs	r3, r1
 8006a38:	d14c      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006a3a:	4b35      	ldr	r3, [pc, #212]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a4c:	f7fe f850 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006a50:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a52:	f000 bcb1 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a5c:	d104      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a5e:	f7fd ff2b 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006a62:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a64:	f000 bca8 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a68:	4b29      	ldr	r3, [pc, #164]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a74:	d107      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a7c:	d103      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006a7e:	4b25      	ldr	r3, [pc, #148]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a82:	f000 bc99 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006a86:	4b22      	ldr	r3, [pc, #136]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d11c      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a98:	d118      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	0e1b      	lsrs	r3, r3, #24
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	e006      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006ab2:	4b17      	ldr	r3, [pc, #92]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	0e1b      	lsrs	r3, r3, #24
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	4a15      	ldr	r2, [pc, #84]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac8:	f000 bc76 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad0:	f000 bc72 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006adc:	430b      	orrs	r3, r1
 8006ade:	d153      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ae6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006af2:	f7fd fffd 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006af6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006af8:	f000 bc5e 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b02:	d10b      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b04:	f7fd fed8 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006b08:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b0a:	f000 bc55 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006b0e:	bf00      	nop
 8006b10:	46020c00 	.word	0x46020c00
 8006b14:	00f42400 	.word	0x00f42400
 8006b18:	0800a5c8 	.word	0x0800a5c8
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006b1c:	4ba1      	ldr	r3, [pc, #644]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b30:	d103      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8006b32:	4b9d      	ldr	r3, [pc, #628]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b36:	f000 bc3f 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006b3a:	4b9a      	ldr	r3, [pc, #616]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d11c      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b4c:	d118      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b4e:	4b95      	ldr	r3, [pc, #596]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006b5a:	4b92      	ldr	r3, [pc, #584]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	0e1b      	lsrs	r3, r3, #24
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	e006      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006b66:	4b8f      	ldr	r3, [pc, #572]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	0e1b      	lsrs	r3, r3, #24
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	4a8d      	ldr	r2, [pc, #564]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7c:	f000 bc1c 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b84:	f000 bc18 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b8c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b90:	430b      	orrs	r3, r1
 8006b92:	d151      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b94:	4b83      	ldr	r3, [pc, #524]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b9e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ba4:	d024      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006baa:	d842      	bhi.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	2b80      	cmp	r3, #128	@ 0x80
 8006bb0:	d00d      	beq.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	2b80      	cmp	r3, #128	@ 0x80
 8006bb6:	d83c      	bhi.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	2b40      	cmp	r3, #64	@ 0x40
 8006bc2:	d011      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006bc4:	e035      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006bc6:	f7fd ffbb 	bl	8004b40 <HAL_RCC_GetPCLK3Freq>
 8006bca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bcc:	e3f4      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bce:	4b75      	ldr	r3, [pc, #468]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bda:	d102      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8006bdc:	4b72      	ldr	r3, [pc, #456]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006be0:	e3ea      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006be6:	e3e7      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006be8:	f7fd fe66 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006bec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bee:	e3e3      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d117      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bfc:	4b69      	ldr	r3, [pc, #420]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8006c08:	4b66      	ldr	r3, [pc, #408]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	0e1b      	lsrs	r3, r3, #24
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	e006      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006c14:	4b63      	ldr	r3, [pc, #396]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	4a62      	ldr	r2, [pc, #392]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c2a:	e3c5      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c30:	e3c2      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c36:	e3bf      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006c40:	430b      	orrs	r3, r1
 8006c42:	d147      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006c44:	4b57      	ldr	r3, [pc, #348]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c56:	f7fd ff4b 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006c5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c5c:	e3ac      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c64:	d103      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c66:	f7fd fe27 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006c6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c6c:	e3a4      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c7a:	d106      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c82:	d102      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8006c84:	4b48      	ldr	r3, [pc, #288]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c88:	e396      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006c8a:	4b46      	ldr	r3, [pc, #280]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d11b      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c9c:	d117      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c9e:	4b41      	ldr	r3, [pc, #260]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006caa:	4b3e      	ldr	r3, [pc, #248]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	0e1b      	lsrs	r3, r3, #24
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	e006      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8006cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cbc:	041b      	lsls	r3, r3, #16
 8006cbe:	0e1b      	lsrs	r3, r3, #24
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	4a39      	ldr	r2, [pc, #228]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ccc:	e374      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd2:	e371      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	d16a      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006ce0:	4b30      	ldr	r3, [pc, #192]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d120      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d117      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cfe:	4b29      	ldr	r3, [pc, #164]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8006d0a:	4b26      	ldr	r3, [pc, #152]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	0e1b      	lsrs	r3, r3, #24
 8006d10:	f003 030f 	and.w	r3, r3, #15
 8006d14:	e006      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006d16:	4b23      	ldr	r3, [pc, #140]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	0e1b      	lsrs	r3, r3, #24
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	4a21      	ldr	r2, [pc, #132]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2c:	e344      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d32:	e341      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006d34:	4b1b      	ldr	r3, [pc, #108]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d42:	d112      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d4a:	d10e      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d4c:	4b15      	ldr	r3, [pc, #84]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d5a:	d102      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8006d5c:	23fa      	movs	r3, #250	@ 0xfa
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d60:	e32a      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d68:	e326      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d76:	d106      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006d80:	4b09      	ldr	r3, [pc, #36]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d84:	e318      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006d86:	4b07      	ldr	r3, [pc, #28]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d10d      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d9a:	d109      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8006d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da2:	e309      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006da4:	46020c00 	.word	0x46020c00
 8006da8:	00f42400 	.word	0x00f42400
 8006dac:	0800a5c8 	.word	0x0800a5c8
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db4:	e300      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dba:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	d164      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006dc2:	4ba2      	ldr	r3, [pc, #648]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006dcc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d120      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006dd4:	4b9d      	ldr	r3, [pc, #628]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d117      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006de0:	4b9a      	ldr	r3, [pc, #616]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8006dec:	4b97      	ldr	r3, [pc, #604]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	0e1b      	lsrs	r3, r3, #24
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	e006      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006df8:	4b94      	ldr	r3, [pc, #592]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	0e1b      	lsrs	r3, r3, #24
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	4a92      	ldr	r2, [pc, #584]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0e:	e2d3      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	e2d0      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006e16:	4b8d      	ldr	r3, [pc, #564]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e24:	d112      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e2c:	d10e      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e2e:	4b87      	ldr	r3, [pc, #540]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e3c:	d102      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8006e3e:	23fa      	movs	r3, #250	@ 0xfa
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e42:	e2b9      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e4a:	e2b5      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006e4c:	4b7f      	ldr	r3, [pc, #508]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e58:	d106      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e60:	d102      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8006e62:	4b7c      	ldr	r3, [pc, #496]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e66:	e2a7      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006e68:	4b78      	ldr	r3, [pc, #480]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d107      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e7c:	d103      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	e298      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8a:	e295      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e90:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006e94:	430b      	orrs	r3, r1
 8006e96:	d147      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e98:	4b6c      	ldr	r3, [pc, #432]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e9e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006ea2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006eaa:	f7fd fe21 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8006eae:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eb0:	e282      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006eb2:	4b66      	ldr	r3, [pc, #408]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ebc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ec0:	d112      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006eca:	4b60      	ldr	r3, [pc, #384]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8006eda:	23fa      	movs	r3, #250	@ 0xfa
 8006edc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ede:	e26b      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ee0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ee4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ee6:	e267      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006ee8:	4b58      	ldr	r3, [pc, #352]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006efc:	d102      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8006efe:	4b55      	ldr	r3, [pc, #340]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f02:	e259      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006f04:	4b51      	ldr	r3, [pc, #324]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d107      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f18:	d103      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8006f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f20:	e24a      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f26:	e247      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006f30:	430b      	orrs	r3, r1
 8006f32:	d12d      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006f34:	4b45      	ldr	r3, [pc, #276]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f3a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006f3e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006f40:	4b42      	ldr	r3, [pc, #264]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f4c:	d105      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8006f54:	4b3f      	ldr	r3, [pc, #252]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f58:	e22e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f60:	d107      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fc44 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f70:	e222      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f78:	d107      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7a:	f107 0318 	add.w	r3, r7, #24
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fd92 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f88:	e216      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8e:	e213      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f94:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	d15d      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006fa6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fae:	d028      	beq.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fb6:	d845      	bhi.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fbe:	d013      	beq.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fc6:	d83d      	bhi.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fd4:	d004      	beq.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006fd6:	e035      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006fd8:	f7fd fd9e 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8006fdc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fde:	e1eb      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006fe0:	f7fd fc6a 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006fe4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fe6:	e1e7      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fe8:	4b18      	ldr	r3, [pc, #96]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff4:	d102      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006ff6:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006ff8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ffa:	e1dd      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007000:	e1da      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007002:	4b12      	ldr	r3, [pc, #72]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b20      	cmp	r3, #32
 800700c:	d117      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800700e:	4b0f      	ldr	r3, [pc, #60]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800701a:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	0e1b      	lsrs	r3, r3, #24
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	e006      	b.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007026:	4b09      	ldr	r3, [pc, #36]	@ (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800702c:	041b      	lsls	r3, r3, #16
 800702e:	0e1b      	lsrs	r3, r3, #24
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	4a06      	ldr	r2, [pc, #24]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800703a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800703c:	e1bc      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007042:	e1b9      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007048:	e1b6      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800704a:	bf00      	nop
 800704c:	46020c00 	.word	0x46020c00
 8007050:	0800a5c8 	.word	0x0800a5c8
 8007054:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800705c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007060:	430b      	orrs	r3, r1
 8007062:	d156      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007064:	4ba5      	ldr	r3, [pc, #660]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800706a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800706e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007076:	d028      	beq.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800707e:	d845      	bhi.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007086:	d013      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800708e:	d83d      	bhi.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800709c:	d004      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800709e:	e035      	b.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80070a0:	f7fd fd26 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 80070a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070a6:	e187      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80070a8:	f7fd fc06 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80070ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070ae:	e183      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070b0:	4b92      	ldr	r3, [pc, #584]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070bc:	d102      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80070be:	4b90      	ldr	r3, [pc, #576]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80070c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070c2:	e179      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070c8:	e176      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070ca:	4b8c      	ldr	r3, [pc, #560]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d117      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070d6:	4b89      	ldr	r3, [pc, #548]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80070e2:	4b86      	ldr	r3, [pc, #536]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	0e1b      	lsrs	r3, r3, #24
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	e006      	b.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80070ee:	4b83      	ldr	r3, [pc, #524]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80070f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070f4:	041b      	lsls	r3, r3, #16
 80070f6:	0e1b      	lsrs	r3, r3, #24
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	4a81      	ldr	r2, [pc, #516]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80070fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007102:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007104:	e158      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800710a:	e155      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007110:	e152      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007116:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800711a:	430b      	orrs	r3, r1
 800711c:	d177      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800711e:	4b77      	ldr	r3, [pc, #476]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007124:	f003 0318 	and.w	r3, r3, #24
 8007128:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	2b18      	cmp	r3, #24
 800712e:	d86b      	bhi.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007130:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	0800719d 	.word	0x0800719d
 800713c:	08007209 	.word	0x08007209
 8007140:	08007209 	.word	0x08007209
 8007144:	08007209 	.word	0x08007209
 8007148:	08007209 	.word	0x08007209
 800714c:	08007209 	.word	0x08007209
 8007150:	08007209 	.word	0x08007209
 8007154:	08007209 	.word	0x08007209
 8007158:	080071a5 	.word	0x080071a5
 800715c:	08007209 	.word	0x08007209
 8007160:	08007209 	.word	0x08007209
 8007164:	08007209 	.word	0x08007209
 8007168:	08007209 	.word	0x08007209
 800716c:	08007209 	.word	0x08007209
 8007170:	08007209 	.word	0x08007209
 8007174:	08007209 	.word	0x08007209
 8007178:	080071ad 	.word	0x080071ad
 800717c:	08007209 	.word	0x08007209
 8007180:	08007209 	.word	0x08007209
 8007184:	08007209 	.word	0x08007209
 8007188:	08007209 	.word	0x08007209
 800718c:	08007209 	.word	0x08007209
 8007190:	08007209 	.word	0x08007209
 8007194:	08007209 	.word	0x08007209
 8007198:	080071c7 	.word	0x080071c7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800719c:	f7fd fcd0 	bl	8004b40 <HAL_RCC_GetPCLK3Freq>
 80071a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071a2:	e109      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80071a4:	f7fd fb88 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80071a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071aa:	e105      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071ac:	4b53      	ldr	r3, [pc, #332]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b8:	d102      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80071ba:	4b51      	ldr	r3, [pc, #324]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80071bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071be:	e0fb      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071c4:	e0f8      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071c6:	4b4d      	ldr	r3, [pc, #308]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d117      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071d2:	4b4a      	ldr	r3, [pc, #296]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80071de:	4b47      	ldr	r3, [pc, #284]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	0e1b      	lsrs	r3, r3, #24
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	e006      	b.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80071ea:	4b44      	ldr	r3, [pc, #272]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	0e1b      	lsrs	r3, r3, #24
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	4a42      	ldr	r2, [pc, #264]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80071fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007200:	e0da      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007206:	e0d7      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800720c:	e0d4      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800720e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007212:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007216:	430b      	orrs	r3, r1
 8007218:	d155      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800721a:	4b38      	ldr	r3, [pc, #224]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800721c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007220:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007224:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800722c:	d013      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007234:	d844      	bhi.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800723c:	d013      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007244:	d83c      	bhi.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	2b00      	cmp	r3, #0
 800724a:	d014      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007252:	d014      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007254:	e034      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007256:	f107 0318 	add.w	r3, r7, #24
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fc24 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007264:	e0a8      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fac2 	bl	80057f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007274:	e0a0      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007276:	f7fd fb1f 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 800727a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800727c:	e09c      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800727e:	4b1f      	ldr	r3, [pc, #124]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b20      	cmp	r3, #32
 8007288:	d117      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800728a:	4b1c      	ldr	r3, [pc, #112]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007296:	4b19      	ldr	r3, [pc, #100]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	e006      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80072a2:	4b16      	ldr	r3, [pc, #88]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	0e1b      	lsrs	r3, r3, #24
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	4a14      	ldr	r2, [pc, #80]	@ (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80072b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072b8:	e07e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072be:	e07b      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072c4:	e078      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80072c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ca:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80072ce:	430b      	orrs	r3, r1
 80072d0:	d138      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072dc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80072de:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d10d      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 80072f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f8:	e05e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80072fa:	bf00      	nop
 80072fc:	46020c00 	.word	0x46020c00
 8007300:	00f42400 	.word	0x00f42400
 8007304:	0800a5c8 	.word	0x0800a5c8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007308:	4b2e      	ldr	r3, [pc, #184]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800730a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800730e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007316:	d112      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800731e:	d10e      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007320:	4b28      	ldr	r3, [pc, #160]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800732e:	d102      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007330:	23fa      	movs	r3, #250	@ 0xfa
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007334:	e040      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007336:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800733a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800733c:	e03c      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	637b      	str	r3, [r7, #52]	@ 0x34
 8007342:	e039      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007348:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800734c:	430b      	orrs	r3, r1
 800734e:	d131      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007350:	4b1c      	ldr	r3, [pc, #112]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007352:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007356:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800735a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800735c:	4b19      	ldr	r3, [pc, #100]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007368:	d105      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	2b00      	cmp	r3, #0
 800736e:	d102      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007370:	4b15      	ldr	r3, [pc, #84]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007372:	637b      	str	r3, [r7, #52]	@ 0x34
 8007374:	e020      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007376:	4b13      	ldr	r3, [pc, #76]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800737e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007382:	d106      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800738a:	d102      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800738c:	4b0f      	ldr	r3, [pc, #60]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800738e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007390:	e012      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007392:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800739a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739e:	d106      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073a6:	d102      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80073a8:	4b09      	ldr	r3, [pc, #36]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ac:	e004      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b2:	e001      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80073b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3738      	adds	r7, #56	@ 0x38
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	46020c00 	.word	0x46020c00
 80073c8:	02dc6c00 	.word	0x02dc6c00
 80073cc:	016e3600 	.word	0x016e3600
 80073d0:	00f42400 	.word	0x00f42400

080073d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80073dc:	4b47      	ldr	r3, [pc, #284]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a46      	ldr	r2, [pc, #280]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80073e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073e8:	f7fa fd8a 	bl	8001f00 <HAL_GetTick>
 80073ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073ee:	e008      	b.n	8007402 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073f0:	f7fa fd86 	bl	8001f00 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e077      	b.n	80074f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007402:	4b3e      	ldr	r3, [pc, #248]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f0      	bne.n	80073f0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800740e:	4b3b      	ldr	r3, [pc, #236]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6852      	ldr	r2, [r2, #4]
 8007422:	3a01      	subs	r2, #1
 8007424:	0212      	lsls	r2, r2, #8
 8007426:	430a      	orrs	r2, r1
 8007428:	4934      	ldr	r1, [pc, #208]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 800742a:	4313      	orrs	r3, r2
 800742c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800742e:	4b33      	ldr	r3, [pc, #204]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 8007430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007432:	4b33      	ldr	r3, [pc, #204]	@ (8007500 <RCCEx_PLL2_Config+0x12c>)
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6892      	ldr	r2, [r2, #8]
 800743a:	3a01      	subs	r2, #1
 800743c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	68d2      	ldr	r2, [r2, #12]
 8007444:	3a01      	subs	r2, #1
 8007446:	0252      	lsls	r2, r2, #9
 8007448:	b292      	uxth	r2, r2
 800744a:	4311      	orrs	r1, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6912      	ldr	r2, [r2, #16]
 8007450:	3a01      	subs	r2, #1
 8007452:	0412      	lsls	r2, r2, #16
 8007454:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007458:	4311      	orrs	r1, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	6952      	ldr	r2, [r2, #20]
 800745e:	3a01      	subs	r2, #1
 8007460:	0612      	lsls	r2, r2, #24
 8007462:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007466:	430a      	orrs	r2, r1
 8007468:	4924      	ldr	r1, [pc, #144]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 800746a:	4313      	orrs	r3, r2
 800746c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800746e:	4b23      	ldr	r3, [pc, #140]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	f023 020c 	bic.w	r2, r3, #12
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	4920      	ldr	r1, [pc, #128]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 800747c:	4313      	orrs	r3, r2
 800747e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007480:	4b1e      	ldr	r3, [pc, #120]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 8007482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	491c      	ldr	r1, [pc, #112]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 800748a:	4313      	orrs	r3, r2
 800748c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800748e:	4b1b      	ldr	r3, [pc, #108]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 8007494:	f023 0310 	bic.w	r3, r3, #16
 8007498:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800749a:	4b18      	ldr	r3, [pc, #96]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	69d2      	ldr	r2, [r2, #28]
 80074aa:	00d2      	lsls	r2, r2, #3
 80074ac:	4913      	ldr	r1, [pc, #76]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80074b2:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80074b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b6:	4a11      	ldr	r2, [pc, #68]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80074b8:	f043 0310 	orr.w	r3, r3, #16
 80074bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80074be:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a0e      	ldr	r2, [pc, #56]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80074c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074ca:	f7fa fd19 	bl	8001f00 <HAL_GetTick>
 80074ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d0:	e008      	b.n	80074e4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074d2:	f7fa fd15 	bl	8001f00 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e006      	b.n	80074f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074e4:	4b05      	ldr	r3, [pc, #20]	@ (80074fc <RCCEx_PLL2_Config+0x128>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0f0      	beq.n	80074d2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0

}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	46020c00 	.word	0x46020c00
 8007500:	80800000 	.word	0x80800000

08007504 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800750c:	4b47      	ldr	r3, [pc, #284]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a46      	ldr	r2, [pc, #280]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 8007512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007516:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007518:	f7fa fcf2 	bl	8001f00 <HAL_GetTick>
 800751c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800751e:	e008      	b.n	8007532 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007520:	f7fa fcee 	bl	8001f00 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e077      	b.n	8007622 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007532:	4b3e      	ldr	r3, [pc, #248]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f0      	bne.n	8007520 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800753e:	4b3b      	ldr	r3, [pc, #236]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6811      	ldr	r1, [r2, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6852      	ldr	r2, [r2, #4]
 8007552:	3a01      	subs	r2, #1
 8007554:	0212      	lsls	r2, r2, #8
 8007556:	430a      	orrs	r2, r1
 8007558:	4934      	ldr	r1, [pc, #208]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 800755a:	4313      	orrs	r3, r2
 800755c:	630b      	str	r3, [r1, #48]	@ 0x30
 800755e:	4b33      	ldr	r3, [pc, #204]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 8007560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007562:	4b33      	ldr	r3, [pc, #204]	@ (8007630 <RCCEx_PLL3_Config+0x12c>)
 8007564:	4013      	ands	r3, r2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6892      	ldr	r2, [r2, #8]
 800756a:	3a01      	subs	r2, #1
 800756c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68d2      	ldr	r2, [r2, #12]
 8007574:	3a01      	subs	r2, #1
 8007576:	0252      	lsls	r2, r2, #9
 8007578:	b292      	uxth	r2, r2
 800757a:	4311      	orrs	r1, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6912      	ldr	r2, [r2, #16]
 8007580:	3a01      	subs	r2, #1
 8007582:	0412      	lsls	r2, r2, #16
 8007584:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007588:	4311      	orrs	r1, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6952      	ldr	r2, [r2, #20]
 800758e:	3a01      	subs	r2, #1
 8007590:	0612      	lsls	r2, r2, #24
 8007592:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007596:	430a      	orrs	r2, r1
 8007598:	4924      	ldr	r1, [pc, #144]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 800759a:	4313      	orrs	r3, r2
 800759c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800759e:	4b23      	ldr	r3, [pc, #140]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	f023 020c 	bic.w	r2, r3, #12
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	4920      	ldr	r1, [pc, #128]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80075b0:	4b1e      	ldr	r3, [pc, #120]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	491c      	ldr	r1, [pc, #112]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80075be:	4b1b      	ldr	r3, [pc, #108]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c2:	4a1a      	ldr	r2, [pc, #104]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075c4:	f023 0310 	bic.w	r3, r3, #16
 80075c8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075ca:	4b18      	ldr	r3, [pc, #96]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	69d2      	ldr	r2, [r2, #28]
 80075da:	00d2      	lsls	r2, r2, #3
 80075dc:	4913      	ldr	r1, [pc, #76]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80075e2:	4b12      	ldr	r3, [pc, #72]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e6:	4a11      	ldr	r2, [pc, #68]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075e8:	f043 0310 	orr.w	r3, r3, #16
 80075ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80075ee:	4b0f      	ldr	r3, [pc, #60]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a0e      	ldr	r2, [pc, #56]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 80075f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075fa:	f7fa fc81 	bl	8001f00 <HAL_GetTick>
 80075fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007600:	e008      	b.n	8007614 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007602:	f7fa fc7d 	bl	8001f00 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d901      	bls.n	8007614 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e006      	b.n	8007622 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007614:	4b05      	ldr	r3, [pc, #20]	@ (800762c <RCCEx_PLL3_Config+0x128>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0f0      	beq.n	8007602 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	46020c00 	.word	0x46020c00
 8007630:	80800000 	.word	0x80800000

08007634 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e0fb      	b.n	800783e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a7f      	ldr	r2, [pc, #508]	@ (8007848 <HAL_SPI_Init+0x214>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_SPI_Init+0x26>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a7d      	ldr	r2, [pc, #500]	@ (800784c <HAL_SPI_Init+0x218>)
 8007656:	4293      	cmp	r3, r2
 8007658:	e000      	b.n	800765c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800765a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a78      	ldr	r2, [pc, #480]	@ (8007848 <HAL_SPI_Init+0x214>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_SPI_Init+0x42>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a76      	ldr	r2, [pc, #472]	@ (800784c <HAL_SPI_Init+0x218>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d105      	bne.n	8007682 <HAL_SPI_Init+0x4e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d901      	bls.n	8007682 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e0dd      	b.n	800783e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fc36 	bl	8008ef4 <SPI_GetPacketSize>
 8007688:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a6e      	ldr	r2, [pc, #440]	@ (8007848 <HAL_SPI_Init+0x214>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d004      	beq.n	800769e <HAL_SPI_Init+0x6a>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a6c      	ldr	r2, [pc, #432]	@ (800784c <HAL_SPI_Init+0x218>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d102      	bne.n	80076a4 <HAL_SPI_Init+0x70>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d816      	bhi.n	80076d2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076a8:	4a69      	ldr	r2, [pc, #420]	@ (8007850 <HAL_SPI_Init+0x21c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00e      	beq.n	80076cc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a68      	ldr	r2, [pc, #416]	@ (8007854 <HAL_SPI_Init+0x220>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_SPI_Init+0x98>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a66      	ldr	r2, [pc, #408]	@ (8007858 <HAL_SPI_Init+0x224>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_SPI_Init+0x98>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a65      	ldr	r2, [pc, #404]	@ (800785c <HAL_SPI_Init+0x228>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d104      	bne.n	80076d6 <HAL_SPI_Init+0xa2>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d901      	bls.n	80076d6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e0b3      	b.n	800783e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7f9 feb0 	bl	8001450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0201 	bic.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007712:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800771c:	d119      	bne.n	8007752 <HAL_SPI_Init+0x11e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007726:	d103      	bne.n	8007730 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10c      	bne.n	8007752 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800773c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007740:	d107      	bne.n	8007752 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007750:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00f      	beq.n	800777e <HAL_SPI_Init+0x14a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	2b06      	cmp	r3, #6
 8007764:	d90b      	bls.n	800777e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e007      	b.n	800778e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800778c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69da      	ldr	r2, [r3, #28]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	431a      	orrs	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	431a      	orrs	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a0:	ea42 0103 	orr.w	r1, r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077fa:	ea42 0103 	orr.w	r1, r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	46002000 	.word	0x46002000
 800784c:	56002000 	.word	0x56002000
 8007850:	40013000 	.word	0x40013000
 8007854:	50013000 	.word	0x50013000
 8007858:	40003800 	.word	0x40003800
 800785c:	50003800 	.word	0x50003800

08007860 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3320      	adds	r3, #32
 8007876:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a90      	ldr	r2, [pc, #576]	@ (8007ac0 <HAL_SPI_Transmit+0x260>)
 800787e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007880:	f7fa fb3e 	bl	8001f00 <HAL_GetTick>
 8007884:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d001      	beq.n	8007896 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8007892:	2302      	movs	r3, #2
 8007894:	e1f4      	b.n	8007c80 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_SPI_Transmit+0x42>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e1ec      	b.n	8007c80 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_SPI_Transmit+0x54>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e1e5      	b.n	8007c80 <HAL_SPI_Transmit+0x420>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2203      	movs	r2, #3
 80078c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	88fa      	ldrh	r2, [r7, #6]
 80078de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800790c:	d108      	bne.n	8007920 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e009      	b.n	8007934 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007932:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	88f9      	ldrh	r1, [r7, #6]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	430b      	orrs	r3, r1
 8007946:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10c      	bne.n	8007980 <HAL_SPI_Transmit+0x120>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800796e:	d107      	bne.n	8007980 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800797e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b0f      	cmp	r3, #15
 8007986:	d95b      	bls.n	8007a40 <HAL_SPI_Transmit+0x1e0>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a4d      	ldr	r2, [pc, #308]	@ (8007ac4 <HAL_SPI_Transmit+0x264>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d04f      	beq.n	8007a32 <HAL_SPI_Transmit+0x1d2>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a4c      	ldr	r2, [pc, #304]	@ (8007ac8 <HAL_SPI_Transmit+0x268>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d04a      	beq.n	8007a32 <HAL_SPI_Transmit+0x1d2>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a4a      	ldr	r2, [pc, #296]	@ (8007acc <HAL_SPI_Transmit+0x26c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d045      	beq.n	8007a32 <HAL_SPI_Transmit+0x1d2>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a49      	ldr	r2, [pc, #292]	@ (8007ad0 <HAL_SPI_Transmit+0x270>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d147      	bne.n	8007a40 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80079b0:	e03f      	b.n	8007a32 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d114      	bne.n	80079ea <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079e8:	e023      	b.n	8007a32 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ea:	f7fa fa89 	bl	8001f00 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d803      	bhi.n	8007a02 <HAL_SPI_Transmit+0x1a2>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d102      	bne.n	8007a08 <HAL_SPI_Transmit+0x1a8>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d114      	bne.n	8007a32 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f001 f9a5 	bl	8008d58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e126      	b.n	8007c80 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1b9      	bne.n	80079b2 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007a3e:	e0f9      	b.n	8007c34 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	f240 80ee 	bls.w	8007c26 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a4a:	e067      	b.n	8007b1c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d13c      	bne.n	8007ad4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d918      	bls.n	8007a98 <HAL_SPI_Transmit+0x238>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d014      	beq.n	8007a98 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7e:	1d1a      	adds	r2, r3, #4
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b02      	subs	r3, #2
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a96:	e041      	b.n	8007b1c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a9c:	881a      	ldrh	r2, [r3, #0]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aa6:	1c9a      	adds	r2, r3, #2
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007abe:	e02d      	b.n	8007b1c <HAL_SPI_Transmit+0x2bc>
 8007ac0:	46002000 	.word	0x46002000
 8007ac4:	40013000 	.word	0x40013000
 8007ac8:	50013000 	.word	0x50013000
 8007acc:	40003800 	.word	0x40003800
 8007ad0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ad4:	f7fa fa14 	bl	8001f00 <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d803      	bhi.n	8007aec <HAL_SPI_Transmit+0x28c>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d102      	bne.n	8007af2 <HAL_SPI_Transmit+0x292>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d114      	bne.n	8007b1c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f001 f930 	bl	8008d58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007afe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e0b1      	b.n	8007c80 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d191      	bne.n	8007a4c <HAL_SPI_Transmit+0x1ec>
 8007b28:	e084      	b.n	8007c34 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d152      	bne.n	8007bde <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d918      	bls.n	8007b76 <HAL_SPI_Transmit+0x316>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b48:	2b40      	cmp	r3, #64	@ 0x40
 8007b4a:	d914      	bls.n	8007b76 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b5c:	1d1a      	adds	r2, r3, #4
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b04      	subs	r3, #4
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b74:	e057      	b.n	8007c26 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d917      	bls.n	8007bb2 <HAL_SPI_Transmit+0x352>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d013      	beq.n	8007bb2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b8e:	881a      	ldrh	r2, [r3, #0]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b98:	1c9a      	adds	r2, r3, #2
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	3b02      	subs	r3, #2
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bb0:	e039      	b.n	8007c26 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3320      	adds	r3, #32
 8007bbc:	7812      	ldrb	r2, [r2, #0]
 8007bbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bdc:	e023      	b.n	8007c26 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bde:	f7fa f98f 	bl	8001f00 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d803      	bhi.n	8007bf6 <HAL_SPI_Transmit+0x396>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d102      	bne.n	8007bfc <HAL_SPI_Transmit+0x39c>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d114      	bne.n	8007c26 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f001 f8ab 	bl	8008d58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e02c      	b.n	8007c80 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f47f af7b 	bne.w	8007b2a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2108      	movs	r1, #8
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f001 f92a 	bl	8008e98 <SPI_WaitOnFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c50:	f043 0220 	orr.w	r2, r3, #32
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f001 f87c 	bl	8008d58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08e      	sub	sp, #56	@ 0x38
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3320      	adds	r3, #32
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3330      	adds	r3, #48	@ 0x30
 8007ca4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3301      	adds	r3, #1
 8007cb0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a90      	ldr	r2, [pc, #576]	@ (8007ef8 <HAL_SPI_TransmitReceive+0x270>)
 8007cb8:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cba:	f7fa f921 	bl	8001f00 <HAL_GetTick>
 8007cbe:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007cc0:	887b      	ldrh	r3, [r7, #2]
 8007cc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8007cc4:	887b      	ldrh	r3, [r7, #2]
 8007cc6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e332      	b.n	800833e <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <HAL_SPI_TransmitReceive+0x62>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <HAL_SPI_TransmitReceive+0x62>
 8007ce4:	887b      	ldrh	r3, [r7, #2]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e327      	b.n	800833e <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_SPI_TransmitReceive+0x74>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e320      	b.n	800833e <HAL_SPI_TransmitReceive+0x6b6>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2205      	movs	r2, #5
 8007d08:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	887a      	ldrh	r2, [r7, #2]
 8007d1e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	887a      	ldrh	r2, [r7, #2]
 8007d26:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	887a      	ldrh	r2, [r7, #2]
 8007d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	887a      	ldrh	r2, [r7, #2]
 8007d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007d5a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a66      	ldr	r2, [pc, #408]	@ (8007efc <HAL_SPI_TransmitReceive+0x274>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <HAL_SPI_TransmitReceive+0xfc>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a65      	ldr	r2, [pc, #404]	@ (8007f00 <HAL_SPI_TransmitReceive+0x278>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <HAL_SPI_TransmitReceive+0xfc>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a63      	ldr	r2, [pc, #396]	@ (8007f04 <HAL_SPI_TransmitReceive+0x27c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_SPI_TransmitReceive+0xfc>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a62      	ldr	r2, [pc, #392]	@ (8007f08 <HAL_SPI_TransmitReceive+0x280>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d102      	bne.n	8007d8a <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007d84:	2310      	movs	r3, #16
 8007d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d88:	e001      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007d8a:	2308      	movs	r3, #8
 8007d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	8879      	ldrh	r1, [r7, #2]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10c      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x152>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dc8:	d107      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b0f      	cmp	r3, #15
 8007de0:	f240 80c1 	bls.w	8007f66 <HAL_SPI_TransmitReceive+0x2de>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a44      	ldr	r2, [pc, #272]	@ (8007efc <HAL_SPI_TransmitReceive+0x274>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00f      	beq.n	8007e0e <HAL_SPI_TransmitReceive+0x186>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a43      	ldr	r2, [pc, #268]	@ (8007f00 <HAL_SPI_TransmitReceive+0x278>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00a      	beq.n	8007e0e <HAL_SPI_TransmitReceive+0x186>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a41      	ldr	r2, [pc, #260]	@ (8007f04 <HAL_SPI_TransmitReceive+0x27c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d005      	beq.n	8007e0e <HAL_SPI_TransmitReceive+0x186>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a40      	ldr	r2, [pc, #256]	@ (8007f08 <HAL_SPI_TransmitReceive+0x280>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	f040 80ac 	bne.w	8007f66 <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e10:	089b      	lsrs	r3, r3, #2
 8007e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e14:	e09e      	b.n	8007f54 <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d120      	bne.n	8007e66 <HAL_SPI_TransmitReceive+0x1de>
 8007e24:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01d      	beq.n	8007e66 <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007e2a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007e2c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e30:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d217      	bcs.n	8007e66 <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e46:	1d1a      	adds	r2, r3, #4
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e64:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007e6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d06f      	beq.n	8007f54 <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d118      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e8c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007eb0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007eb2:	e04f      	b.n	8007f54 <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007eb4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007eb6:	8bfb      	ldrh	r3, [r7, #30]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d227      	bcs.n	8007f0c <HAL_SPI_TransmitReceive+0x284>
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d022      	beq.n	8007f0c <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ece:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ed0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed6:	1d1a      	adds	r2, r3, #4
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ef4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007ef6:	e02d      	b.n	8007f54 <HAL_SPI_TransmitReceive+0x2cc>
 8007ef8:	46002000 	.word	0x46002000
 8007efc:	40013000 	.word	0x40013000
 8007f00:	50013000 	.word	0x50013000
 8007f04:	40003800 	.word	0x40003800
 8007f08:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f0c:	f7f9 fff8 	bl	8001f00 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d803      	bhi.n	8007f24 <HAL_SPI_TransmitReceive+0x29c>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f22:	d102      	bne.n	8007f2a <HAL_SPI_TransmitReceive+0x2a2>
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d114      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 ff14 	bl	8008d58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e1f4      	b.n	800833e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f54:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f47f af5d 	bne.w	8007e16 <HAL_SPI_TransmitReceive+0x18e>
 8007f5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f47f af59 	bne.w	8007e16 <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007f64:	e1c5      	b.n	80082f2 <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b07      	cmp	r3, #7
 8007f6c:	f240 81b9 	bls.w	80082e2 <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f72:	085b      	lsrs	r3, r3, #1
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f76:	e0c0      	b.n	80080fa <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d11f      	bne.n	8007fc6 <HAL_SPI_TransmitReceive+0x33e>
 8007f86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01c      	beq.n	8007fc6 <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007f8c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007f8e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f92:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d216      	bcs.n	8007fc6 <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f9c:	881a      	ldrh	r2, [r3, #0]
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fa6:	1c9a      	adds	r2, r3, #2
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007fce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 8092 	beq.w	80080fa <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d118      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe8:	6a3a      	ldr	r2, [r7, #32]
 8007fea:	8812      	ldrh	r2, [r2, #0]
 8007fec:	b292      	uxth	r2, r2
 8007fee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff4:	1c9a      	adds	r2, r3, #2
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008012:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008014:	e071      	b.n	80080fa <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008016:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008018:	8bfb      	ldrh	r3, [r7, #30]
 800801a:	429a      	cmp	r2, r3
 800801c:	d228      	bcs.n	8008070 <HAL_SPI_TransmitReceive+0x3e8>
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d023      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	8812      	ldrh	r2, [r2, #0]
 8008030:	b292      	uxth	r2, r2
 8008032:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008038:	1c9a      	adds	r2, r3, #2
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008042:	6a3a      	ldr	r2, [r7, #32]
 8008044:	8812      	ldrh	r2, [r2, #0]
 8008046:	b292      	uxth	r2, r2
 8008048:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800804e:	1c9a      	adds	r2, r3, #2
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b02      	subs	r3, #2
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800806c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800806e:	e044      	b.n	80080fa <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008070:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008072:	2b01      	cmp	r3, #1
 8008074:	d11d      	bne.n	80080b2 <HAL_SPI_TransmitReceive+0x42a>
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d018      	beq.n	80080b2 <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008084:	6a3a      	ldr	r2, [r7, #32]
 8008086:	8812      	ldrh	r2, [r2, #0]
 8008088:	b292      	uxth	r2, r2
 800808a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008090:	1c9a      	adds	r2, r3, #2
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80080ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80080b0:	e023      	b.n	80080fa <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080b2:	f7f9 ff25 	bl	8001f00 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080be:	429a      	cmp	r2, r3
 80080c0:	d803      	bhi.n	80080ca <HAL_SPI_TransmitReceive+0x442>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d102      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x448>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d114      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fe41 	bl	8008d58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e121      	b.n	800833e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80080fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f47f af3b 	bne.w	8007f78 <HAL_SPI_TransmitReceive+0x2f0>
 8008102:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008104:	2b00      	cmp	r3, #0
 8008106:	f47f af37 	bne.w	8007f78 <HAL_SPI_TransmitReceive+0x2f0>
 800810a:	e0f2      	b.n	80082f2 <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b02      	cmp	r3, #2
 8008118:	d121      	bne.n	800815e <HAL_SPI_TransmitReceive+0x4d6>
 800811a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01e      	beq.n	800815e <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008120:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008122:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8008124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008126:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008128:	429a      	cmp	r2, r3
 800812a:	d218      	bcs.n	800815e <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3320      	adds	r3, #32
 8008136:	7812      	ldrb	r2, [r2, #0]
 8008138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800815c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008166:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 80ba 	beq.w	80082e2 <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b01      	cmp	r3, #1
 800817a:	d11b      	bne.n	80081b4 <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80081b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80081b2:	e096      	b.n	80082e2 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80081b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80081b6:	8bfb      	ldrh	r3, [r7, #30]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d24a      	bcs.n	8008252 <HAL_SPI_TransmitReceive+0x5ca>
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d045      	beq.n	8008252 <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d2:	7812      	ldrb	r2, [r2, #0]
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800820a:	7812      	ldrb	r2, [r2, #0]
 800820c:	b2d2      	uxtb	r2, r2
 800820e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008226:	7812      	ldrb	r2, [r2, #0]
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b04      	subs	r3, #4
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800824e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008250:	e047      	b.n	80082e2 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008252:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008254:	2b03      	cmp	r3, #3
 8008256:	d820      	bhi.n	800829a <HAL_SPI_TransmitReceive+0x612>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01b      	beq.n	800829a <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800826e:	7812      	ldrb	r2, [r2, #0]
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008284:	b29b      	uxth	r3, r3
 8008286:	3b01      	subs	r3, #1
 8008288:	b29a      	uxth	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008296:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008298:	e023      	b.n	80082e2 <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800829a:	f7f9 fe31 	bl	8001f00 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d803      	bhi.n	80082b2 <HAL_SPI_TransmitReceive+0x62a>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d102      	bne.n	80082b8 <HAL_SPI_TransmitReceive+0x630>
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d114      	bne.n	80082e2 <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fd4d 	bl	8008d58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e02d      	b.n	800833e <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80082e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f47f af11 	bne.w	800810c <HAL_SPI_TransmitReceive+0x484>
 80082ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f47f af0d 	bne.w	800810c <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	2200      	movs	r2, #0
 80082fa:	2108      	movs	r1, #8
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 fdcb 	bl	8008e98 <SPI_WaitOnFlagUntilTimeout>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800830e:	f043 0220 	orr.w	r2, r3, #32
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fd1d 	bl	8008d58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 800833c:	2300      	movs	r3, #0
  }
}
 800833e:	4618      	mov	r0, r3
 8008340:	3730      	adds	r7, #48	@ 0x30
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop

08008348 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a91      	ldr	r2, [pc, #580]	@ (80085a0 <HAL_SPI_TransmitReceive_DMA+0x258>)
 800835c:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b01      	cmp	r3, #1
 8008368:	d001      	beq.n	800836e <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 800836a:	2302      	movs	r3, #2
 800836c:	e274      	b.n	8008858 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <HAL_SPI_TransmitReceive_DMA+0x38>
 800837a:	887b      	ldrh	r3, [r7, #2]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e269      	b.n	8008858 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <HAL_SPI_TransmitReceive_DMA+0x4a>
 800838e:	2302      	movs	r3, #2
 8008390:	e262      	b.n	8008858 <HAL_SPI_TransmitReceive_DMA+0x510>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2205      	movs	r2, #5
 800839e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	887a      	ldrh	r2, [r7, #2]
 80083b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	887a      	ldrh	r2, [r7, #2]
 80083bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	887a      	ldrh	r2, [r7, #2]
 80083ca:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	887a      	ldrh	r2, [r7, #2]
 80083d2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80083f0:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008400:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d920      	bls.n	800844c <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008410:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008416:	d105      	bne.n	8008424 <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800841e:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8008420:	2b02      	cmp	r3, #2
 8008422:	d013      	beq.n	800844c <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8008428:	4a5e      	ldr	r2, [pc, #376]	@ (80085a4 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d01e      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a5d      	ldr	r2, [pc, #372]	@ (80085a8 <HAL_SPI_TransmitReceive_DMA+0x260>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d019      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x124>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a5b      	ldr	r2, [pc, #364]	@ (80085ac <HAL_SPI_TransmitReceive_DMA+0x264>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d014      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x124>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a5a      	ldr	r2, [pc, #360]	@ (80085b0 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00f      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008450:	2b07      	cmp	r3, #7
 8008452:	d911      	bls.n	8008478 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800845a:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008466:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8008468:	2b00      	cmp	r3, #0
 800846a:	d105      	bne.n	8008478 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e1ef      	b.n	8008858 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	2b07      	cmp	r3, #7
 800847e:	d842      	bhi.n	8008506 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d109      	bne.n	80084a0 <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008492:	b29b      	uxth	r3, r3
 8008494:	3301      	adds	r3, #1
 8008496:	105b      	asrs	r3, r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d109      	bne.n	80084c0 <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3303      	adds	r3, #3
 80084b6:	109b      	asrs	r3, r3, #2
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084cc:	d109      	bne.n	80084e2 <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3301      	adds	r3, #1
 80084d8:	105b      	asrs	r3, r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084ee:	d12f      	bne.n	8008550 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3303      	adds	r3, #3
 80084fa:	109b      	asrs	r3, r3, #2
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008504:	e024      	b.n	8008550 <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d820      	bhi.n	8008550 <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d109      	bne.n	800852e <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008520:	b29b      	uxth	r3, r3
 8008522:	3301      	adds	r3, #1
 8008524:	105b      	asrs	r3, r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800853a:	d109      	bne.n	8008550 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008542:	b29b      	uxth	r3, r3
 8008544:	3301      	adds	r3, #1
 8008546:	105b      	asrs	r3, r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008556:	4a17      	ldr	r2, [pc, #92]	@ (80085b4 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 8008558:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008560:	4a15      	ldr	r2, [pc, #84]	@ (80085b8 <HAL_SPI_TransmitReceive_DMA+0x270>)
 8008562:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800856a:	4a14      	ldr	r2, [pc, #80]	@ (80085bc <HAL_SPI_TransmitReceive_DMA+0x274>)
 800856c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008574:	2200      	movs	r2, #0
 8008576:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b07      	cmp	r3, #7
 800857e:	d804      	bhi.n	800858a <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	887a      	ldrh	r2, [r7, #2]
 8008584:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008588:	e020      	b.n	80085cc <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b0f      	cmp	r3, #15
 8008590:	d816      	bhi.n	80085c0 <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 8008592:	887b      	ldrh	r3, [r7, #2]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800859e:	e015      	b.n	80085cc <HAL_SPI_TransmitReceive_DMA+0x284>
 80085a0:	46002000 	.word	0x46002000
 80085a4:	40013000 	.word	0x40013000
 80085a8:	50013000 	.word	0x50013000
 80085ac:	40003800 	.word	0x40003800
 80085b0:	50003800 	.word	0x50003800
 80085b4:	08008cc3 	.word	0x08008cc3
 80085b8:	08008c71 	.word	0x08008c71
 80085bc:	08008cdf 	.word	0x08008cdf
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 80085c0:	887b      	ldrh	r3, [r7, #2]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d02d      	beq.n	8008638 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d024      	beq.n	8008632 <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800860a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800861a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008626:	4618      	mov	r0, r3
 8008628:	f7fa fcc4 	bl	8002fb4 <HAL_DMAEx_List_Start_IT>
 800862c:	4603      	mov	r3, r0
 800862e:	75fb      	strb	r3, [r7, #23]
 8008630:	e014      	b.n	800865c <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	75fb      	strb	r3, [r7, #23]
 8008636:	e011      	b.n	800865c <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3330      	adds	r3, #48	@ 0x30
 8008644:	4619      	mov	r1, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864a:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008652:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008654:	f7f9 ff5a 	bl	800250c <HAL_DMA_Start_IT>
 8008658:	4603      	mov	r3, r0
 800865a:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d011      	beq.n	8008686 <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008668:	f043 0210 	orr.w	r2, r3, #16
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e0e8      	b.n	8008858 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008694:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800869c:	2200      	movs	r2, #0
 800869e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a6:	2200      	movs	r2, #0
 80086a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b0:	2200      	movs	r2, #0
 80086b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ba:	4a69      	ldr	r2, [pc, #420]	@ (8008860 <HAL_SPI_TransmitReceive_DMA+0x518>)
 80086bc:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b07      	cmp	r3, #7
 80086c4:	d804      	bhi.n	80086d0 <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	887a      	ldrh	r2, [r7, #2]
 80086ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80086ce:	e010      	b.n	80086f2 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b0f      	cmp	r3, #15
 80086d6:	d806      	bhi.n	80086e6 <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 80086d8:	887b      	ldrh	r3, [r7, #2]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80086e4:	e005      	b.n	80086f2 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 80086e6:	887b      	ldrh	r3, [r7, #2]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d02d      	beq.n	800875e <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800870a:	2b00      	cmp	r3, #0
 800870c:	d024      	beq.n	8008758 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008714:	b29a      	uxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800871c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800872c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f103 0220 	add.w	r2, r3, #32
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800874c:	4618      	mov	r0, r3
 800874e:	f7fa fc31 	bl	8002fb4 <HAL_DMAEx_List_Start_IT>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]
 8008756:	e014      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]
 800875c:	e011      	b.n	8008782 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008768:	4619      	mov	r1, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3320      	adds	r3, #32
 8008770:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008778:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800877a:	f7f9 fec7 	bl	800250c <HAL_DMA_Start_IT>
 800877e:	4603      	mov	r3, r0
 8008780:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d017      	beq.n	80087b8 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800878e:	4618      	mov	r0, r3
 8008790:	f7f9 ff1c 	bl	80025cc <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800879a:	f043 0210 	orr.w	r2, r3, #16
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e04f      	b.n	8008858 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087c0:	2b81      	cmp	r3, #129	@ 0x81
 80087c2:	d10e      	bne.n	80087e2 <HAL_SPI_TransmitReceive_DMA+0x49a>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087cc:	2b81      	cmp	r3, #129	@ 0x81
 80087ce:	d108      	bne.n	80087e2 <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	6053      	str	r3, [r2, #4]
 80087e0:	e009      	b.n	80087f6 <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	041b      	lsls	r3, r3, #16
 80087ec:	8879      	ldrh	r1, [r7, #2]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	6812      	ldr	r2, [r2, #0]
 80087f2:	430b      	orrs	r3, r1
 80087f4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008804:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8008814:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0201 	orr.w	r2, r2, #1
 8008824:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10c      	bne.n	800884e <HAL_SPI_TransmitReceive_DMA+0x506>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800883c:	d107      	bne.n	800884e <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800884c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	08008cdf 	.word	0x08008cdf

08008864 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	@ 0x28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	4013      	ands	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800888c:	2300      	movs	r3, #0
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008896:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3330      	adds	r3, #48	@ 0x30
 800889e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d010      	beq.n	80088cc <HAL_SPI_IRQHandler+0x68>
 80088aa:	6a3b      	ldr	r3, [r7, #32]
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088c2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f9c9 	bl	8008c5c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80088ca:	e19a      	b.n	8008c02 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d113      	bne.n	80088fe <HAL_SPI_IRQHandler+0x9a>
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10e      	bne.n	80088fe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d009      	beq.n	80088fe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
    handled = 1UL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10f      	bne.n	8008928 <HAL_SPI_IRQHandler+0xc4>
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008918:	2b00      	cmp	r3, #0
 800891a:	d105      	bne.n	8008928 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
    handled = 1UL;
 8008924:	2301      	movs	r3, #1
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10f      	bne.n	8008952 <HAL_SPI_IRQHandler+0xee>
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
    handled = 1UL;
 800894e:	2301      	movs	r3, #1
 8008950:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	2b00      	cmp	r3, #0
 8008956:	f040 814f 	bne.w	8008bf8 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f003 0308 	and.w	r3, r3, #8
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 808b 	beq.w	8008a7c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	699a      	ldr	r2, [r3, #24]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f042 0208 	orr.w	r2, r2, #8
 8008974:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	699a      	ldr	r2, [r3, #24]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0210 	orr.w	r2, r2, #16
 8008984:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699a      	ldr	r2, [r3, #24]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008994:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0208 	bic.w	r2, r2, #8
 80089a4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d13d      	bne.n	8008a30 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80089b4:	e036      	b.n	8008a24 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	2b0f      	cmp	r3, #15
 80089bc:	d90b      	bls.n	80089d6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80089c8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ce:	1d1a      	adds	r2, r3, #4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80089d4:	e01d      	b.n	8008a12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	2b07      	cmp	r3, #7
 80089dc:	d90b      	bls.n	80089f6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	8812      	ldrh	r2, [r2, #0]
 80089e6:	b292      	uxth	r2, r2
 80089e8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ee:	1c9a      	adds	r2, r3, #2
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80089f4:	e00d      	b.n	8008a12 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a02:	7812      	ldrb	r2, [r2, #0]
 8008a04:	b2d2      	uxtb	r2, r2
 8008a06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1c2      	bne.n	80089b6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f991 	bl	8008d58 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f8fd 	bl	8008c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008a4e:	e0d8      	b.n	8008c02 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008a50:	7cfb      	ldrb	r3, [r7, #19]
 8008a52:	2b05      	cmp	r3, #5
 8008a54:	d103      	bne.n	8008a5e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7f8 fc72 	bl	8001340 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008a5c:	e0ce      	b.n	8008bfc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008a5e:	7cfb      	ldrb	r3, [r7, #19]
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d103      	bne.n	8008a6c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8db 	bl	8008c20 <HAL_SPI_RxCpltCallback>
    return;
 8008a6a:	e0c7      	b.n	8008bfc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008a6c:	7cfb      	ldrb	r3, [r7, #19]
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	f040 80c4 	bne.w	8008bfc <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8c9 	bl	8008c0c <HAL_SPI_TxCpltCallback>
    return;
 8008a7a:	e0bf      	b.n	8008bfc <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80bd 	beq.w	8008c02 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00f      	beq.n	8008ab2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a98:	f043 0204 	orr.w	r2, r3, #4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ab0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00f      	beq.n	8008adc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ac2:	f043 0201 	orr.w	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699a      	ldr	r2, [r3, #24]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ada:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00f      	beq.n	8008b06 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aec:	f043 0208 	orr.w	r2, r3, #8
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	699a      	ldr	r2, [r3, #24]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00f      	beq.n	8008b30 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699a      	ldr	r2, [r3, #24]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0220 	orr.w	r2, r2, #32
 8008b2e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d062      	beq.n	8008c00 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0201 	bic.w	r2, r2, #1
 8008b48:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008b58:	f023 0303 	bic.w	r3, r3, #3
 8008b5c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008b64:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008b68:	d13e      	bne.n	8008be8 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008b78:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d015      	beq.n	8008bb0 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8008c08 <HAL_SPI_IRQHandler+0x3a4>)
 8008b8c:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7f9 fd95 	bl	80026c4 <HAL_DMA_Abort_IT>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ba6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d022      	beq.n	8008c00 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bc0:	4a11      	ldr	r2, [pc, #68]	@ (8008c08 <HAL_SPI_IRQHandler+0x3a4>)
 8008bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f9 fd7a 	bl	80026c4 <HAL_DMA_Abort_IT>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d014      	beq.n	8008c00 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008be6:	e00b      	b.n	8008c00 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f829 	bl	8008c48 <HAL_SPI_ErrorCallback>
    return;
 8008bf6:	e003      	b.n	8008c00 <HAL_SPI_IRQHandler+0x39c>
    return;
 8008bf8:	bf00      	nop
 8008bfa:	e002      	b.n	8008c02 <HAL_SPI_IRQHandler+0x39e>
    return;
 8008bfc:	bf00      	nop
 8008bfe:	e000      	b.n	8008c02 <HAL_SPI_IRQHandler+0x39e>
    return;
 8008c00:	bf00      	nop
  }
}
 8008c02:	3728      	adds	r7, #40	@ 0x28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	08008d25 	.word	0x08008d25

08008c0c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c7c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	d017      	beq.n	8008cba <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c92:	2b81      	cmp	r3, #129	@ 0x81
 8008c94:	d109      	bne.n	8008caa <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8008c9e:	2b81      	cmp	r3, #129	@ 0x81
 8008ca0:	d103      	bne.n	8008caa <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f7f8 fb4c 	bl	8001340 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008ca8:	e007      	b.n	8008cba <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	691a      	ldr	r2, [r3, #16]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0208 	orr.w	r2, r2, #8
 8008cb8:	611a      	str	r2, [r3, #16]
}
 8008cba:	bf00      	nop
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cce:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff ffaf 	bl	8008c34 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cea:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7f9 fe73 	bl	80029d8 <HAL_DMA_GetError>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d011      	beq.n	8008d1c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f82d 	bl	8008d58 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d04:	f043 0210 	orr.w	r2, r3, #16
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff ff96 	bl	8008c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff ff7c 	bl	8008c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699a      	ldr	r2, [r3, #24]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0208 	orr.w	r2, r2, #8
 8008d76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699a      	ldr	r2, [r3, #24]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0210 	orr.w	r2, r2, #16
 8008d86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0201 	bic.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008dba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d014      	beq.n	8008df2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00f      	beq.n	8008df2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f042 0220 	orr.w	r2, r2, #32
 8008df0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d014      	beq.n	8008e28 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00f      	beq.n	8008e28 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e0e:	f043 0204 	orr.w	r2, r3, #4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00f      	beq.n	8008e52 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e38:	f043 0201 	orr.w	r2, r3, #1
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699a      	ldr	r2, [r3, #24]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00f      	beq.n	8008e7c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e62:	f043 0208 	orr.w	r2, r3, #8
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	699a      	ldr	r2, [r3, #24]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ea8:	e010      	b.n	8008ecc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eaa:	f7f9 f829 	bl	8001f00 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d803      	bhi.n	8008ec2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec0:	d102      	bne.n	8008ec8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e00f      	b.n	8008eec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695a      	ldr	r2, [r3, #20]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	bf0c      	ite	eq
 8008edc:	2301      	moveq	r3, #1
 8008ede:	2300      	movne	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d0df      	beq.n	8008eaa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	3307      	adds	r3, #7
 8008f12:	08db      	lsrs	r3, r3, #3
 8008f14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d12e      	bne.n	8008f9e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e028      	b.n	8008fa0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0201 	bic.w	r2, r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008f7a:	ea42 0103 	orr.w	r1, r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e000      	b.n	8008fa0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
  }
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e042      	b.n	8009044 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7f8 fc89 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2224      	movs	r2, #36	@ 0x24
 8008fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0201 	bic.w	r2, r2, #1
 8008fec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa68 	bl	80094cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8c3 	bl	8009188 <UART_SetConfig>
 8009002:	4603      	mov	r3, r0
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e01b      	b.n	8009044 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800901a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800902a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fae7 	bl	8009610 <UART_CheckIdleState>
 8009042:	4603      	mov	r3, r0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	@ 0x28
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	4613      	mov	r3, r2
 800905a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009062:	2b20      	cmp	r3, #32
 8009064:	f040 808b 	bne.w	800917e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <HAL_UART_Transmit+0x28>
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e083      	b.n	8009180 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009082:	2b80      	cmp	r3, #128	@ 0x80
 8009084:	d107      	bne.n	8009096 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009094:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2221      	movs	r2, #33	@ 0x21
 80090a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090a6:	f7f8 ff2b 	bl	8001f00 <HAL_GetTick>
 80090aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	88fa      	ldrh	r2, [r7, #6]
 80090b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090c4:	d108      	bne.n	80090d8 <HAL_UART_Transmit+0x8c>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d104      	bne.n	80090d8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	61bb      	str	r3, [r7, #24]
 80090d6:	e003      	b.n	80090e0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090e0:	e030      	b.n	8009144 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2200      	movs	r2, #0
 80090ea:	2180      	movs	r1, #128	@ 0x80
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 fb39 	bl	8009764 <UART_WaitOnFlagUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e03d      	b.n	8009180 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10b      	bne.n	8009122 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009118:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	3302      	adds	r3, #2
 800911e:	61bb      	str	r3, [r7, #24]
 8009120:	e007      	b.n	8009132 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	3301      	adds	r3, #1
 8009130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1c8      	bne.n	80090e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2200      	movs	r2, #0
 8009158:	2140      	movs	r1, #64	@ 0x40
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 fb02 	bl	8009764 <UART_WaitOnFlagUntilTimeout>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e006      	b.n	8009180 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	e000      	b.n	8009180 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800917e:	2302      	movs	r3, #2
  }
}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800918c:	b094      	sub	sp, #80	@ 0x50
 800918e:	af00      	add	r7, sp, #0
 8009190:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	4b7e      	ldr	r3, [pc, #504]	@ (8009398 <UART_SetConfig+0x210>)
 800919e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	431a      	orrs	r2, r3
 80091aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4977      	ldr	r1, [pc, #476]	@ (800939c <UART_SetConfig+0x214>)
 80091c0:	4019      	ands	r1, r3
 80091c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80091d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d8:	68d9      	ldr	r1, [r3, #12]
 80091da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	ea40 0301 	orr.w	r3, r0, r1
 80091e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b6a      	ldr	r3, [pc, #424]	@ (8009398 <UART_SetConfig+0x210>)
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d009      	beq.n	8009208 <UART_SetConfig+0x80>
 80091f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	4b69      	ldr	r3, [pc, #420]	@ (80093a0 <UART_SetConfig+0x218>)
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d004      	beq.n	8009208 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009200:	6a1a      	ldr	r2, [r3, #32]
 8009202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009204:	4313      	orrs	r3, r2
 8009206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009212:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921c:	430b      	orrs	r3, r1
 800921e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009226:	f023 000f 	bic.w	r0, r3, #15
 800922a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800922e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	ea40 0301 	orr.w	r3, r0, r1
 8009236:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	4b59      	ldr	r3, [pc, #356]	@ (80093a4 <UART_SetConfig+0x21c>)
 800923e:	429a      	cmp	r2, r3
 8009240:	d102      	bne.n	8009248 <UART_SetConfig+0xc0>
 8009242:	2301      	movs	r3, #1
 8009244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009246:	e029      	b.n	800929c <UART_SetConfig+0x114>
 8009248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4b56      	ldr	r3, [pc, #344]	@ (80093a8 <UART_SetConfig+0x220>)
 800924e:	429a      	cmp	r2, r3
 8009250:	d102      	bne.n	8009258 <UART_SetConfig+0xd0>
 8009252:	2302      	movs	r3, #2
 8009254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009256:	e021      	b.n	800929c <UART_SetConfig+0x114>
 8009258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	4b53      	ldr	r3, [pc, #332]	@ (80093ac <UART_SetConfig+0x224>)
 800925e:	429a      	cmp	r2, r3
 8009260:	d102      	bne.n	8009268 <UART_SetConfig+0xe0>
 8009262:	2304      	movs	r3, #4
 8009264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009266:	e019      	b.n	800929c <UART_SetConfig+0x114>
 8009268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b50      	ldr	r3, [pc, #320]	@ (80093b0 <UART_SetConfig+0x228>)
 800926e:	429a      	cmp	r2, r3
 8009270:	d102      	bne.n	8009278 <UART_SetConfig+0xf0>
 8009272:	2308      	movs	r3, #8
 8009274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009276:	e011      	b.n	800929c <UART_SetConfig+0x114>
 8009278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	4b4d      	ldr	r3, [pc, #308]	@ (80093b4 <UART_SetConfig+0x22c>)
 800927e:	429a      	cmp	r2, r3
 8009280:	d102      	bne.n	8009288 <UART_SetConfig+0x100>
 8009282:	2310      	movs	r3, #16
 8009284:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009286:	e009      	b.n	800929c <UART_SetConfig+0x114>
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	4b42      	ldr	r3, [pc, #264]	@ (8009398 <UART_SetConfig+0x210>)
 800928e:	429a      	cmp	r2, r3
 8009290:	d102      	bne.n	8009298 <UART_SetConfig+0x110>
 8009292:	2320      	movs	r3, #32
 8009294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009296:	e001      	b.n	800929c <UART_SetConfig+0x114>
 8009298:	2300      	movs	r3, #0
 800929a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800929c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4b3d      	ldr	r3, [pc, #244]	@ (8009398 <UART_SetConfig+0x210>)
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d005      	beq.n	80092b2 <UART_SetConfig+0x12a>
 80092a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	4b3d      	ldr	r3, [pc, #244]	@ (80093a0 <UART_SetConfig+0x218>)
 80092ac:	429a      	cmp	r2, r3
 80092ae:	f040 8085 	bne.w	80093bc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80092b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092b4:	2200      	movs	r2, #0
 80092b6:	623b      	str	r3, [r7, #32]
 80092b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80092ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80092be:	f7fc fea7 	bl	8006010 <HAL_RCCEx_GetPeriphCLKFreq>
 80092c2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80092c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 80e8 	beq.w	800949c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	4a39      	ldr	r2, [pc, #228]	@ (80093b8 <UART_SetConfig+0x230>)
 80092d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092da:	fbb3 f3f2 	udiv	r3, r3, r2
 80092de:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	4413      	add	r3, r2
 80092ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d305      	bcc.n	80092fc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d903      	bls.n	8009304 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009302:	e048      	b.n	8009396 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009306:	2200      	movs	r2, #0
 8009308:	61bb      	str	r3, [r7, #24]
 800930a:	61fa      	str	r2, [r7, #28]
 800930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009310:	4a29      	ldr	r2, [pc, #164]	@ (80093b8 <UART_SetConfig+0x230>)
 8009312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009316:	b29b      	uxth	r3, r3
 8009318:	2200      	movs	r2, #0
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	617a      	str	r2, [r7, #20]
 800931e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009322:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009326:	f7f6 ffaf 	bl	8000288 <__aeabi_uldivmod>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 0300 	mov.w	r3, #0
 800933a:	020b      	lsls	r3, r1, #8
 800933c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009340:	0202      	lsls	r2, r0, #8
 8009342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009344:	6849      	ldr	r1, [r1, #4]
 8009346:	0849      	lsrs	r1, r1, #1
 8009348:	2000      	movs	r0, #0
 800934a:	460c      	mov	r4, r1
 800934c:	4605      	mov	r5, r0
 800934e:	eb12 0804 	adds.w	r8, r2, r4
 8009352:	eb43 0905 	adc.w	r9, r3, r5
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	60bb      	str	r3, [r7, #8]
 800935e:	60fa      	str	r2, [r7, #12]
 8009360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009364:	4640      	mov	r0, r8
 8009366:	4649      	mov	r1, r9
 8009368:	f7f6 ff8e 	bl	8000288 <__aeabi_uldivmod>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4613      	mov	r3, r2
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800937a:	d308      	bcc.n	800938e <UART_SetConfig+0x206>
 800937c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800937e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009382:	d204      	bcs.n	800938e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800938a:	60da      	str	r2, [r3, #12]
 800938c:	e003      	b.n	8009396 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009394:	e082      	b.n	800949c <UART_SetConfig+0x314>
 8009396:	e081      	b.n	800949c <UART_SetConfig+0x314>
 8009398:	46002400 	.word	0x46002400
 800939c:	cfff69f3 	.word	0xcfff69f3
 80093a0:	56002400 	.word	0x56002400
 80093a4:	40013800 	.word	0x40013800
 80093a8:	40004400 	.word	0x40004400
 80093ac:	40004800 	.word	0x40004800
 80093b0:	40004c00 	.word	0x40004c00
 80093b4:	40005000 	.word	0x40005000
 80093b8:	0800a688 	.word	0x0800a688
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093c4:	d13c      	bne.n	8009440 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093c8:	2200      	movs	r2, #0
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d2:	f7fc fe1d 	bl	8006010 <HAL_RCCEx_GetPeriphCLKFreq>
 80093d6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d05e      	beq.n	800949c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	4a39      	ldr	r2, [pc, #228]	@ (80094c8 <UART_SetConfig+0x340>)
 80093e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e8:	461a      	mov	r2, r3
 80093ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80093f0:	005a      	lsls	r2, r3, #1
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	441a      	add	r2, r3
 80093fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009402:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d916      	bls.n	8009438 <UART_SetConfig+0x2b0>
 800940a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009410:	d212      	bcs.n	8009438 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009414:	b29b      	uxth	r3, r3
 8009416:	f023 030f 	bic.w	r3, r3, #15
 800941a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800941c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	b29b      	uxth	r3, r3
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	b29a      	uxth	r2, r3
 8009428:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800942a:	4313      	orrs	r3, r2
 800942c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	e031      	b.n	800949c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800943e:	e02d      	b.n	800949c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009442:	2200      	movs	r2, #0
 8009444:	469a      	mov	sl, r3
 8009446:	4693      	mov	fp, r2
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	f7fc fde0 	bl	8006010 <HAL_RCCEx_GetPeriphCLKFreq>
 8009450:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009454:	2b00      	cmp	r3, #0
 8009456:	d021      	beq.n	800949c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	4a1a      	ldr	r2, [pc, #104]	@ (80094c8 <UART_SetConfig+0x340>)
 800945e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009462:	461a      	mov	r2, r3
 8009464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009466:	fbb3 f2f2 	udiv	r2, r3, r2
 800946a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	085b      	lsrs	r3, r3, #1
 8009470:	441a      	add	r2, r3
 8009472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	fbb2 f3f3 	udiv	r3, r2, r3
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800947c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947e:	2b0f      	cmp	r3, #15
 8009480:	d909      	bls.n	8009496 <UART_SetConfig+0x30e>
 8009482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009488:	d205      	bcs.n	8009496 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800948a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800948c:	b29a      	uxth	r2, r3
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60da      	str	r2, [r3, #12]
 8009494:	e002      	b.n	800949c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800949c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949e:	2201      	movs	r2, #1
 80094a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	2201      	movs	r2, #1
 80094a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ae:	2200      	movs	r2, #0
 80094b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b4:	2200      	movs	r2, #0
 80094b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3750      	adds	r7, #80	@ 0x50
 80094c0:	46bd      	mov	sp, r7
 80094c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094c6:	bf00      	nop
 80094c8:	0800a688 	.word	0x0800a688

080094cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	f003 0304 	and.w	r3, r3, #4
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d01a      	beq.n	80095e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ca:	d10a      	bne.n	80095e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	605a      	str	r2, [r3, #4]
  }
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b098      	sub	sp, #96	@ 0x60
 8009614:	af02      	add	r7, sp, #8
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009620:	f7f8 fc6e 	bl	8001f00 <HAL_GetTick>
 8009624:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b08      	cmp	r3, #8
 8009632:	d12f      	bne.n	8009694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963c:	2200      	movs	r2, #0
 800963e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f88e 	bl	8009764 <UART_WaitOnFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d022      	beq.n	8009694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800965c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009662:	653b      	str	r3, [r7, #80]	@ 0x50
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	461a      	mov	r2, r3
 800966a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800966c:	647b      	str	r3, [r7, #68]	@ 0x44
 800966e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800967a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e6      	bne.n	800964e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e063      	b.n	800975c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d149      	bne.n	8009736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096aa:	2200      	movs	r2, #0
 80096ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f857 	bl	8009764 <UART_WaitOnFlagUntilTimeout>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d03c      	beq.n	8009736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	623b      	str	r3, [r7, #32]
   return(result);
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096da:	633b      	str	r3, [r7, #48]	@ 0x30
 80096dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e6      	bne.n	80096bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f023 0301 	bic.w	r3, r3, #1
 8009704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800970e:	61fa      	str	r2, [r7, #28]
 8009710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	69b9      	ldr	r1, [r7, #24]
 8009714:	69fa      	ldr	r2, [r7, #28]
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	617b      	str	r3, [r7, #20]
   return(result);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e5      	bne.n	80096ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2220      	movs	r2, #32
 8009726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e012      	b.n	800975c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3758      	adds	r7, #88	@ 0x58
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009774:	e04f      	b.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977c:	d04b      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800977e:	f7f8 fbbf 	bl	8001f00 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	429a      	cmp	r2, r3
 800978c:	d302      	bcc.n	8009794 <UART_WaitOnFlagUntilTimeout+0x30>
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e04e      	b.n	8009836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d037      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b80      	cmp	r3, #128	@ 0x80
 80097aa:	d034      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b40      	cmp	r3, #64	@ 0x40
 80097b0:	d031      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	f003 0308 	and.w	r3, r3, #8
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d110      	bne.n	80097e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2208      	movs	r2, #8
 80097c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 f838 	bl	800983e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2208      	movs	r2, #8
 80097d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e029      	b.n	8009836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097f0:	d111      	bne.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f81e 	bl	800983e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2220      	movs	r2, #32
 8009806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e00f      	b.n	8009836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69da      	ldr	r2, [r3, #28]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4013      	ands	r3, r2
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	429a      	cmp	r2, r3
 8009824:	bf0c      	ite	eq
 8009826:	2301      	moveq	r3, #1
 8009828:	2300      	movne	r3, #0
 800982a:	b2db      	uxtb	r3, r3
 800982c:	461a      	mov	r2, r3
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	429a      	cmp	r2, r3
 8009832:	d0a0      	beq.n	8009776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800983e:	b480      	push	{r7}
 8009840:	b095      	sub	sp, #84	@ 0x54
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800984e:	e853 3f00 	ldrex	r3, [r3]
 8009852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800985a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	461a      	mov	r2, r3
 8009862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009864:	643b      	str	r3, [r7, #64]	@ 0x40
 8009866:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800986a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e6      	bne.n	8009846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	61fb      	str	r3, [r7, #28]
   return(result);
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800988e:	f023 0301 	bic.w	r3, r3, #1
 8009892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800989c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800989e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e3      	bne.n	8009878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d118      	bne.n	80098ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f023 0310 	bic.w	r3, r3, #16
 80098cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d6:	61bb      	str	r3, [r7, #24]
 80098d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6979      	ldr	r1, [r7, #20]
 80098dc:	69ba      	ldr	r2, [r7, #24]
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	613b      	str	r3, [r7, #16]
   return(result);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e6      	bne.n	80098b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80098fe:	bf00      	nop
 8009900:	3754      	adds	r7, #84	@ 0x54
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_UARTEx_DisableFifoMode+0x16>
 800991c:	2302      	movs	r3, #2
 800991e:	e027      	b.n	8009970 <HAL_UARTEx_DisableFifoMode+0x66>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2224      	movs	r2, #36	@ 0x24
 800992c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0201 	bic.w	r2, r2, #1
 8009946:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800994e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009990:	2302      	movs	r3, #2
 8009992:	e02d      	b.n	80099f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2224      	movs	r2, #36	@ 0x24
 80099a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0201 	bic.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f84f 	bl	8009a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d101      	bne.n	8009a10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e02d      	b.n	8009a6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2224      	movs	r2, #36	@ 0x24
 8009a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f811 	bl	8009a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d108      	bne.n	8009a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a94:	e031      	b.n	8009afa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a96:	2308      	movs	r3, #8
 8009a98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a9a:	2308      	movs	r3, #8
 8009a9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	0e5b      	lsrs	r3, r3, #25
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	0f5b      	lsrs	r3, r3, #29
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	7b3a      	ldrb	r2, [r7, #12]
 8009ac2:	4911      	ldr	r1, [pc, #68]	@ (8009b08 <UARTEx_SetNbDataToProcess+0x94>)
 8009ac4:	5c8a      	ldrb	r2, [r1, r2]
 8009ac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aca:	7b3a      	ldrb	r2, [r7, #12]
 8009acc:	490f      	ldr	r1, [pc, #60]	@ (8009b0c <UARTEx_SetNbDataToProcess+0x98>)
 8009ace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	7b7a      	ldrb	r2, [r7, #13]
 8009ae0:	4909      	ldr	r1, [pc, #36]	@ (8009b08 <UARTEx_SetNbDataToProcess+0x94>)
 8009ae2:	5c8a      	ldrb	r2, [r1, r2]
 8009ae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ae8:	7b7a      	ldrb	r2, [r7, #13]
 8009aea:	4908      	ldr	r1, [pc, #32]	@ (8009b0c <UARTEx_SetNbDataToProcess+0x98>)
 8009aec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aee:	fb93 f3f2 	sdiv	r3, r3, r2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	0800a6a0 	.word	0x0800a6a0
 8009b0c:	0800a6a8 	.word	0x0800a6a8

08009b10 <siprintf>:
 8009b10:	b40e      	push	{r1, r2, r3}
 8009b12:	b510      	push	{r4, lr}
 8009b14:	b09d      	sub	sp, #116	@ 0x74
 8009b16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b1a:	2400      	movs	r4, #0
 8009b1c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b1e:	9002      	str	r0, [sp, #8]
 8009b20:	9006      	str	r0, [sp, #24]
 8009b22:	9107      	str	r1, [sp, #28]
 8009b24:	9104      	str	r1, [sp, #16]
 8009b26:	4809      	ldr	r0, [pc, #36]	@ (8009b4c <siprintf+0x3c>)
 8009b28:	4909      	ldr	r1, [pc, #36]	@ (8009b50 <siprintf+0x40>)
 8009b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2e:	9105      	str	r1, [sp, #20]
 8009b30:	a902      	add	r1, sp, #8
 8009b32:	6800      	ldr	r0, [r0, #0]
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009b38:	f000 f994 	bl	8009e64 <_svfiprintf_r>
 8009b3c:	9b02      	ldr	r3, [sp, #8]
 8009b3e:	701c      	strb	r4, [r3, #0]
 8009b40:	b01d      	add	sp, #116	@ 0x74
 8009b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b46:	b003      	add	sp, #12
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	2000000c 	.word	0x2000000c
 8009b50:	ffff0208 	.word	0xffff0208

08009b54 <memset>:
 8009b54:	4402      	add	r2, r0
 8009b56:	4603      	mov	r3, r0
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d100      	bne.n	8009b5e <memset+0xa>
 8009b5c:	4770      	bx	lr
 8009b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b62:	e7f9      	b.n	8009b58 <memset+0x4>

08009b64 <__errno>:
 8009b64:	4b01      	ldr	r3, [pc, #4]	@ (8009b6c <__errno+0x8>)
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	2000000c 	.word	0x2000000c

08009b70 <__libc_init_array>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	4d0d      	ldr	r5, [pc, #52]	@ (8009ba8 <__libc_init_array+0x38>)
 8009b74:	2600      	movs	r6, #0
 8009b76:	4c0d      	ldr	r4, [pc, #52]	@ (8009bac <__libc_init_array+0x3c>)
 8009b78:	1b64      	subs	r4, r4, r5
 8009b7a:	10a4      	asrs	r4, r4, #2
 8009b7c:	42a6      	cmp	r6, r4
 8009b7e:	d109      	bne.n	8009b94 <__libc_init_array+0x24>
 8009b80:	4d0b      	ldr	r5, [pc, #44]	@ (8009bb0 <__libc_init_array+0x40>)
 8009b82:	2600      	movs	r6, #0
 8009b84:	4c0b      	ldr	r4, [pc, #44]	@ (8009bb4 <__libc_init_array+0x44>)
 8009b86:	f000 fc75 	bl	800a474 <_init>
 8009b8a:	1b64      	subs	r4, r4, r5
 8009b8c:	10a4      	asrs	r4, r4, #2
 8009b8e:	42a6      	cmp	r6, r4
 8009b90:	d105      	bne.n	8009b9e <__libc_init_array+0x2e>
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b98:	3601      	adds	r6, #1
 8009b9a:	4798      	blx	r3
 8009b9c:	e7ee      	b.n	8009b7c <__libc_init_array+0xc>
 8009b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	4798      	blx	r3
 8009ba6:	e7f2      	b.n	8009b8e <__libc_init_array+0x1e>
 8009ba8:	0800a6ec 	.word	0x0800a6ec
 8009bac:	0800a6ec 	.word	0x0800a6ec
 8009bb0:	0800a6ec 	.word	0x0800a6ec
 8009bb4:	0800a6f0 	.word	0x0800a6f0

08009bb8 <__retarget_lock_acquire_recursive>:
 8009bb8:	4770      	bx	lr

08009bba <__retarget_lock_release_recursive>:
 8009bba:	4770      	bx	lr

08009bbc <_free_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	d041      	beq.n	8009c48 <_free_r+0x8c>
 8009bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc8:	1f0c      	subs	r4, r1, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bfb8      	it	lt
 8009bce:	18e4      	addlt	r4, r4, r3
 8009bd0:	f000 f8e0 	bl	8009d94 <__malloc_lock>
 8009bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c4c <_free_r+0x90>)
 8009bd6:	6813      	ldr	r3, [r2, #0]
 8009bd8:	b933      	cbnz	r3, 8009be8 <_free_r+0x2c>
 8009bda:	6063      	str	r3, [r4, #4]
 8009bdc:	6014      	str	r4, [r2, #0]
 8009bde:	4628      	mov	r0, r5
 8009be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be4:	f000 b8dc 	b.w	8009da0 <__malloc_unlock>
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	d908      	bls.n	8009bfe <_free_r+0x42>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	1821      	adds	r1, r4, r0
 8009bf0:	428b      	cmp	r3, r1
 8009bf2:	bf01      	itttt	eq
 8009bf4:	6819      	ldreq	r1, [r3, #0]
 8009bf6:	685b      	ldreq	r3, [r3, #4]
 8009bf8:	1809      	addeq	r1, r1, r0
 8009bfa:	6021      	streq	r1, [r4, #0]
 8009bfc:	e7ed      	b.n	8009bda <_free_r+0x1e>
 8009bfe:	461a      	mov	r2, r3
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	b10b      	cbz	r3, 8009c08 <_free_r+0x4c>
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	d9fa      	bls.n	8009bfe <_free_r+0x42>
 8009c08:	6811      	ldr	r1, [r2, #0]
 8009c0a:	1850      	adds	r0, r2, r1
 8009c0c:	42a0      	cmp	r0, r4
 8009c0e:	d10b      	bne.n	8009c28 <_free_r+0x6c>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	4401      	add	r1, r0
 8009c14:	1850      	adds	r0, r2, r1
 8009c16:	6011      	str	r1, [r2, #0]
 8009c18:	4283      	cmp	r3, r0
 8009c1a:	d1e0      	bne.n	8009bde <_free_r+0x22>
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	4408      	add	r0, r1
 8009c22:	6053      	str	r3, [r2, #4]
 8009c24:	6010      	str	r0, [r2, #0]
 8009c26:	e7da      	b.n	8009bde <_free_r+0x22>
 8009c28:	d902      	bls.n	8009c30 <_free_r+0x74>
 8009c2a:	230c      	movs	r3, #12
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	e7d6      	b.n	8009bde <_free_r+0x22>
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	1821      	adds	r1, r4, r0
 8009c34:	428b      	cmp	r3, r1
 8009c36:	bf02      	ittt	eq
 8009c38:	6819      	ldreq	r1, [r3, #0]
 8009c3a:	685b      	ldreq	r3, [r3, #4]
 8009c3c:	1809      	addeq	r1, r1, r0
 8009c3e:	6063      	str	r3, [r4, #4]
 8009c40:	bf08      	it	eq
 8009c42:	6021      	streq	r1, [r4, #0]
 8009c44:	6054      	str	r4, [r2, #4]
 8009c46:	e7ca      	b.n	8009bde <_free_r+0x22>
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000f6c 	.word	0x20000f6c

08009c50 <sbrk_aligned>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	4e0f      	ldr	r6, [pc, #60]	@ (8009c90 <sbrk_aligned+0x40>)
 8009c54:	460c      	mov	r4, r1
 8009c56:	4605      	mov	r5, r0
 8009c58:	6831      	ldr	r1, [r6, #0]
 8009c5a:	b911      	cbnz	r1, 8009c62 <sbrk_aligned+0x12>
 8009c5c:	f000 fba8 	bl	800a3b0 <_sbrk_r>
 8009c60:	6030      	str	r0, [r6, #0]
 8009c62:	4621      	mov	r1, r4
 8009c64:	4628      	mov	r0, r5
 8009c66:	f000 fba3 	bl	800a3b0 <_sbrk_r>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	d103      	bne.n	8009c76 <sbrk_aligned+0x26>
 8009c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c72:	4620      	mov	r0, r4
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
 8009c76:	1cc4      	adds	r4, r0, #3
 8009c78:	f024 0403 	bic.w	r4, r4, #3
 8009c7c:	42a0      	cmp	r0, r4
 8009c7e:	d0f8      	beq.n	8009c72 <sbrk_aligned+0x22>
 8009c80:	1a21      	subs	r1, r4, r0
 8009c82:	4628      	mov	r0, r5
 8009c84:	f000 fb94 	bl	800a3b0 <_sbrk_r>
 8009c88:	3001      	adds	r0, #1
 8009c8a:	d1f2      	bne.n	8009c72 <sbrk_aligned+0x22>
 8009c8c:	e7ef      	b.n	8009c6e <sbrk_aligned+0x1e>
 8009c8e:	bf00      	nop
 8009c90:	20000f68 	.word	0x20000f68

08009c94 <_malloc_r>:
 8009c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c98:	1ccd      	adds	r5, r1, #3
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	f025 0503 	bic.w	r5, r5, #3
 8009ca0:	3508      	adds	r5, #8
 8009ca2:	2d0c      	cmp	r5, #12
 8009ca4:	bf38      	it	cc
 8009ca6:	250c      	movcc	r5, #12
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	db01      	blt.n	8009cb0 <_malloc_r+0x1c>
 8009cac:	42a9      	cmp	r1, r5
 8009cae:	d904      	bls.n	8009cba <_malloc_r+0x26>
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	6033      	str	r3, [r6, #0]
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d90 <_malloc_r+0xfc>
 8009cbe:	f000 f869 	bl	8009d94 <__malloc_lock>
 8009cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc6:	461c      	mov	r4, r3
 8009cc8:	bb44      	cbnz	r4, 8009d1c <_malloc_r+0x88>
 8009cca:	4629      	mov	r1, r5
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f7ff ffbf 	bl	8009c50 <sbrk_aligned>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	d158      	bne.n	8009d8a <_malloc_r+0xf6>
 8009cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8009cdc:	4627      	mov	r7, r4
 8009cde:	2f00      	cmp	r7, #0
 8009ce0:	d143      	bne.n	8009d6a <_malloc_r+0xd6>
 8009ce2:	2c00      	cmp	r4, #0
 8009ce4:	d04b      	beq.n	8009d7e <_malloc_r+0xea>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	4639      	mov	r1, r7
 8009cea:	4630      	mov	r0, r6
 8009cec:	eb04 0903 	add.w	r9, r4, r3
 8009cf0:	f000 fb5e 	bl	800a3b0 <_sbrk_r>
 8009cf4:	4581      	cmp	r9, r0
 8009cf6:	d142      	bne.n	8009d7e <_malloc_r+0xea>
 8009cf8:	6821      	ldr	r1, [r4, #0]
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	1a6d      	subs	r5, r5, r1
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7ff ffa6 	bl	8009c50 <sbrk_aligned>
 8009d04:	3001      	adds	r0, #1
 8009d06:	d03a      	beq.n	8009d7e <_malloc_r+0xea>
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	442b      	add	r3, r5
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	bb62      	cbnz	r2, 8009d70 <_malloc_r+0xdc>
 8009d16:	f8c8 7000 	str.w	r7, [r8]
 8009d1a:	e00f      	b.n	8009d3c <_malloc_r+0xa8>
 8009d1c:	6822      	ldr	r2, [r4, #0]
 8009d1e:	1b52      	subs	r2, r2, r5
 8009d20:	d420      	bmi.n	8009d64 <_malloc_r+0xd0>
 8009d22:	2a0b      	cmp	r2, #11
 8009d24:	d917      	bls.n	8009d56 <_malloc_r+0xc2>
 8009d26:	1961      	adds	r1, r4, r5
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	6025      	str	r5, [r4, #0]
 8009d2c:	bf18      	it	ne
 8009d2e:	6059      	strne	r1, [r3, #4]
 8009d30:	6863      	ldr	r3, [r4, #4]
 8009d32:	bf08      	it	eq
 8009d34:	f8c8 1000 	streq.w	r1, [r8]
 8009d38:	5162      	str	r2, [r4, r5]
 8009d3a:	604b      	str	r3, [r1, #4]
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f000 f82f 	bl	8009da0 <__malloc_unlock>
 8009d42:	f104 000b 	add.w	r0, r4, #11
 8009d46:	1d23      	adds	r3, r4, #4
 8009d48:	f020 0007 	bic.w	r0, r0, #7
 8009d4c:	1ac2      	subs	r2, r0, r3
 8009d4e:	bf1c      	itt	ne
 8009d50:	1a1b      	subne	r3, r3, r0
 8009d52:	50a3      	strne	r3, [r4, r2]
 8009d54:	e7af      	b.n	8009cb6 <_malloc_r+0x22>
 8009d56:	6862      	ldr	r2, [r4, #4]
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	bf0c      	ite	eq
 8009d5c:	f8c8 2000 	streq.w	r2, [r8]
 8009d60:	605a      	strne	r2, [r3, #4]
 8009d62:	e7eb      	b.n	8009d3c <_malloc_r+0xa8>
 8009d64:	4623      	mov	r3, r4
 8009d66:	6864      	ldr	r4, [r4, #4]
 8009d68:	e7ae      	b.n	8009cc8 <_malloc_r+0x34>
 8009d6a:	463c      	mov	r4, r7
 8009d6c:	687f      	ldr	r7, [r7, #4]
 8009d6e:	e7b6      	b.n	8009cde <_malloc_r+0x4a>
 8009d70:	461a      	mov	r2, r3
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	d1fb      	bne.n	8009d70 <_malloc_r+0xdc>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	6053      	str	r3, [r2, #4]
 8009d7c:	e7de      	b.n	8009d3c <_malloc_r+0xa8>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	4630      	mov	r0, r6
 8009d82:	6033      	str	r3, [r6, #0]
 8009d84:	f000 f80c 	bl	8009da0 <__malloc_unlock>
 8009d88:	e794      	b.n	8009cb4 <_malloc_r+0x20>
 8009d8a:	6005      	str	r5, [r0, #0]
 8009d8c:	e7d6      	b.n	8009d3c <_malloc_r+0xa8>
 8009d8e:	bf00      	nop
 8009d90:	20000f6c 	.word	0x20000f6c

08009d94 <__malloc_lock>:
 8009d94:	4801      	ldr	r0, [pc, #4]	@ (8009d9c <__malloc_lock+0x8>)
 8009d96:	f7ff bf0f 	b.w	8009bb8 <__retarget_lock_acquire_recursive>
 8009d9a:	bf00      	nop
 8009d9c:	20000f64 	.word	0x20000f64

08009da0 <__malloc_unlock>:
 8009da0:	4801      	ldr	r0, [pc, #4]	@ (8009da8 <__malloc_unlock+0x8>)
 8009da2:	f7ff bf0a 	b.w	8009bba <__retarget_lock_release_recursive>
 8009da6:	bf00      	nop
 8009da8:	20000f64 	.word	0x20000f64

08009dac <__ssputs_r>:
 8009dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	461f      	mov	r7, r3
 8009db2:	688e      	ldr	r6, [r1, #8]
 8009db4:	4682      	mov	sl, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	42be      	cmp	r6, r7
 8009dba:	4690      	mov	r8, r2
 8009dbc:	680b      	ldr	r3, [r1, #0]
 8009dbe:	d82d      	bhi.n	8009e1c <__ssputs_r+0x70>
 8009dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009dc8:	d026      	beq.n	8009e18 <__ssputs_r+0x6c>
 8009dca:	6965      	ldr	r5, [r4, #20]
 8009dcc:	6909      	ldr	r1, [r1, #16]
 8009dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dd2:	eba3 0901 	sub.w	r9, r3, r1
 8009dd6:	1c7b      	adds	r3, r7, #1
 8009dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ddc:	444b      	add	r3, r9
 8009dde:	106d      	asrs	r5, r5, #1
 8009de0:	429d      	cmp	r5, r3
 8009de2:	bf38      	it	cc
 8009de4:	461d      	movcc	r5, r3
 8009de6:	0553      	lsls	r3, r2, #21
 8009de8:	d527      	bpl.n	8009e3a <__ssputs_r+0x8e>
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7ff ff52 	bl	8009c94 <_malloc_r>
 8009df0:	4606      	mov	r6, r0
 8009df2:	b360      	cbz	r0, 8009e4e <__ssputs_r+0xa2>
 8009df4:	464a      	mov	r2, r9
 8009df6:	6921      	ldr	r1, [r4, #16]
 8009df8:	f000 faf8 	bl	800a3ec <memcpy>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	6126      	str	r6, [r4, #16]
 8009e0a:	444e      	add	r6, r9
 8009e0c:	6165      	str	r5, [r4, #20]
 8009e0e:	eba5 0509 	sub.w	r5, r5, r9
 8009e12:	6026      	str	r6, [r4, #0]
 8009e14:	463e      	mov	r6, r7
 8009e16:	60a5      	str	r5, [r4, #8]
 8009e18:	42be      	cmp	r6, r7
 8009e1a:	d900      	bls.n	8009e1e <__ssputs_r+0x72>
 8009e1c:	463e      	mov	r6, r7
 8009e1e:	4632      	mov	r2, r6
 8009e20:	4641      	mov	r1, r8
 8009e22:	6820      	ldr	r0, [r4, #0]
 8009e24:	f000 faaa 	bl	800a37c <memmove>
 8009e28:	68a3      	ldr	r3, [r4, #8]
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	1b9b      	subs	r3, r3, r6
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	4433      	add	r3, r6
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	f000 fae3 	bl	800a406 <_realloc_r>
 8009e40:	4606      	mov	r6, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d1e0      	bne.n	8009e08 <__ssputs_r+0x5c>
 8009e46:	6921      	ldr	r1, [r4, #16]
 8009e48:	4650      	mov	r0, sl
 8009e4a:	f7ff feb7 	bl	8009bbc <_free_r>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	f8ca 3000 	str.w	r3, [sl]
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	e7e9      	b.n	8009e36 <__ssputs_r+0x8a>
	...

08009e64 <_svfiprintf_r>:
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	4698      	mov	r8, r3
 8009e6a:	898b      	ldrh	r3, [r1, #12]
 8009e6c:	b09d      	sub	sp, #116	@ 0x74
 8009e6e:	4607      	mov	r7, r0
 8009e70:	061b      	lsls	r3, r3, #24
 8009e72:	460d      	mov	r5, r1
 8009e74:	4614      	mov	r4, r2
 8009e76:	d510      	bpl.n	8009e9a <_svfiprintf_r+0x36>
 8009e78:	690b      	ldr	r3, [r1, #16]
 8009e7a:	b973      	cbnz	r3, 8009e9a <_svfiprintf_r+0x36>
 8009e7c:	2140      	movs	r1, #64	@ 0x40
 8009e7e:	f7ff ff09 	bl	8009c94 <_malloc_r>
 8009e82:	6028      	str	r0, [r5, #0]
 8009e84:	6128      	str	r0, [r5, #16]
 8009e86:	b930      	cbnz	r0, 8009e96 <_svfiprintf_r+0x32>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e90:	b01d      	add	sp, #116	@ 0x74
 8009e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e96:	2340      	movs	r3, #64	@ 0x40
 8009e98:	616b      	str	r3, [r5, #20]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ea0:	f04f 0901 	mov.w	r9, #1
 8009ea4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a048 <_svfiprintf_r+0x1e4>
 8009ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eaa:	2320      	movs	r3, #32
 8009eac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eb0:	2330      	movs	r3, #48	@ 0x30
 8009eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009eb6:	4623      	mov	r3, r4
 8009eb8:	469a      	mov	sl, r3
 8009eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ebe:	b10a      	cbz	r2, 8009ec4 <_svfiprintf_r+0x60>
 8009ec0:	2a25      	cmp	r2, #37	@ 0x25
 8009ec2:	d1f9      	bne.n	8009eb8 <_svfiprintf_r+0x54>
 8009ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ec8:	d00b      	beq.n	8009ee2 <_svfiprintf_r+0x7e>
 8009eca:	465b      	mov	r3, fp
 8009ecc:	4622      	mov	r2, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f7ff ff6b 	bl	8009dac <__ssputs_r>
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f000 80a7 	beq.w	800a02a <_svfiprintf_r+0x1c6>
 8009edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ede:	445a      	add	r2, fp
 8009ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f000 809f 	beq.w	800a02a <_svfiprintf_r+0x1c6>
 8009eec:	2300      	movs	r3, #0
 8009eee:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef2:	f10a 0a01 	add.w	sl, sl, #1
 8009ef6:	9304      	str	r3, [sp, #16]
 8009ef8:	9307      	str	r3, [sp, #28]
 8009efa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009efe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f04:	4654      	mov	r4, sl
 8009f06:	2205      	movs	r2, #5
 8009f08:	484f      	ldr	r0, [pc, #316]	@ (800a048 <_svfiprintf_r+0x1e4>)
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	f000 fa5f 	bl	800a3d0 <memchr>
 8009f12:	9a04      	ldr	r2, [sp, #16]
 8009f14:	b9d8      	cbnz	r0, 8009f4e <_svfiprintf_r+0xea>
 8009f16:	06d0      	lsls	r0, r2, #27
 8009f18:	bf44      	itt	mi
 8009f1a:	2320      	movmi	r3, #32
 8009f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f20:	0711      	lsls	r1, r2, #28
 8009f22:	bf44      	itt	mi
 8009f24:	232b      	movmi	r3, #43	@ 0x2b
 8009f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f30:	d015      	beq.n	8009f5e <_svfiprintf_r+0xfa>
 8009f32:	9a07      	ldr	r2, [sp, #28]
 8009f34:	4654      	mov	r4, sl
 8009f36:	2000      	movs	r0, #0
 8009f38:	f04f 0c0a 	mov.w	ip, #10
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f42:	3b30      	subs	r3, #48	@ 0x30
 8009f44:	2b09      	cmp	r3, #9
 8009f46:	d94b      	bls.n	8009fe0 <_svfiprintf_r+0x17c>
 8009f48:	b1b0      	cbz	r0, 8009f78 <_svfiprintf_r+0x114>
 8009f4a:	9207      	str	r2, [sp, #28]
 8009f4c:	e014      	b.n	8009f78 <_svfiprintf_r+0x114>
 8009f4e:	eba0 0308 	sub.w	r3, r0, r8
 8009f52:	46a2      	mov	sl, r4
 8009f54:	fa09 f303 	lsl.w	r3, r9, r3
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	e7d2      	b.n	8009f04 <_svfiprintf_r+0xa0>
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	1d19      	adds	r1, r3, #4
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	9103      	str	r1, [sp, #12]
 8009f68:	bfbb      	ittet	lt
 8009f6a:	425b      	neglt	r3, r3
 8009f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f70:	9307      	strge	r3, [sp, #28]
 8009f72:	9307      	strlt	r3, [sp, #28]
 8009f74:	bfb8      	it	lt
 8009f76:	9204      	strlt	r2, [sp, #16]
 8009f78:	7823      	ldrb	r3, [r4, #0]
 8009f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f7c:	d10a      	bne.n	8009f94 <_svfiprintf_r+0x130>
 8009f7e:	7863      	ldrb	r3, [r4, #1]
 8009f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f82:	d132      	bne.n	8009fea <_svfiprintf_r+0x186>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	3402      	adds	r4, #2
 8009f88:	1d1a      	adds	r2, r3, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f90:	9203      	str	r2, [sp, #12]
 8009f92:	9305      	str	r3, [sp, #20]
 8009f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a058 <_svfiprintf_r+0x1f4>
 8009f98:	2203      	movs	r2, #3
 8009f9a:	7821      	ldrb	r1, [r4, #0]
 8009f9c:	4650      	mov	r0, sl
 8009f9e:	f000 fa17 	bl	800a3d0 <memchr>
 8009fa2:	b138      	cbz	r0, 8009fb4 <_svfiprintf_r+0x150>
 8009fa4:	eba0 000a 	sub.w	r0, r0, sl
 8009fa8:	2240      	movs	r2, #64	@ 0x40
 8009faa:	9b04      	ldr	r3, [sp, #16]
 8009fac:	3401      	adds	r4, #1
 8009fae:	4082      	lsls	r2, r0
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb8:	2206      	movs	r2, #6
 8009fba:	4824      	ldr	r0, [pc, #144]	@ (800a04c <_svfiprintf_r+0x1e8>)
 8009fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fc0:	f000 fa06 	bl	800a3d0 <memchr>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d036      	beq.n	800a036 <_svfiprintf_r+0x1d2>
 8009fc8:	4b21      	ldr	r3, [pc, #132]	@ (800a050 <_svfiprintf_r+0x1ec>)
 8009fca:	bb1b      	cbnz	r3, 800a014 <_svfiprintf_r+0x1b0>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	3307      	adds	r3, #7
 8009fd0:	f023 0307 	bic.w	r3, r3, #7
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fda:	4433      	add	r3, r6
 8009fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fde:	e76a      	b.n	8009eb6 <_svfiprintf_r+0x52>
 8009fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e7a8      	b.n	8009f3c <_svfiprintf_r+0xd8>
 8009fea:	2300      	movs	r3, #0
 8009fec:	3401      	adds	r4, #1
 8009fee:	f04f 0c0a 	mov.w	ip, #10
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	9305      	str	r3, [sp, #20]
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffc:	3a30      	subs	r2, #48	@ 0x30
 8009ffe:	2a09      	cmp	r2, #9
 800a000:	d903      	bls.n	800a00a <_svfiprintf_r+0x1a6>
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0c6      	beq.n	8009f94 <_svfiprintf_r+0x130>
 800a006:	9105      	str	r1, [sp, #20]
 800a008:	e7c4      	b.n	8009f94 <_svfiprintf_r+0x130>
 800a00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00e:	4604      	mov	r4, r0
 800a010:	2301      	movs	r3, #1
 800a012:	e7f0      	b.n	8009ff6 <_svfiprintf_r+0x192>
 800a014:	ab03      	add	r3, sp, #12
 800a016:	462a      	mov	r2, r5
 800a018:	a904      	add	r1, sp, #16
 800a01a:	4638      	mov	r0, r7
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <_svfiprintf_r+0x1f0>)
 800a020:	f3af 8000 	nop.w
 800a024:	1c42      	adds	r2, r0, #1
 800a026:	4606      	mov	r6, r0
 800a028:	d1d6      	bne.n	8009fd8 <_svfiprintf_r+0x174>
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	065b      	lsls	r3, r3, #25
 800a02e:	f53f af2d 	bmi.w	8009e8c <_svfiprintf_r+0x28>
 800a032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a034:	e72c      	b.n	8009e90 <_svfiprintf_r+0x2c>
 800a036:	ab03      	add	r3, sp, #12
 800a038:	462a      	mov	r2, r5
 800a03a:	a904      	add	r1, sp, #16
 800a03c:	4638      	mov	r0, r7
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	4b04      	ldr	r3, [pc, #16]	@ (800a054 <_svfiprintf_r+0x1f0>)
 800a042:	f000 f87d 	bl	800a140 <_printf_i>
 800a046:	e7ed      	b.n	800a024 <_svfiprintf_r+0x1c0>
 800a048:	0800a6b0 	.word	0x0800a6b0
 800a04c:	0800a6ba 	.word	0x0800a6ba
 800a050:	00000000 	.word	0x00000000
 800a054:	08009dad 	.word	0x08009dad
 800a058:	0800a6b6 	.word	0x0800a6b6

0800a05c <_printf_common>:
 800a05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	4616      	mov	r6, r2
 800a062:	4698      	mov	r8, r3
 800a064:	688a      	ldr	r2, [r1, #8]
 800a066:	4607      	mov	r7, r0
 800a068:	690b      	ldr	r3, [r1, #16]
 800a06a:	460c      	mov	r4, r1
 800a06c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a070:	4293      	cmp	r3, r2
 800a072:	bfb8      	it	lt
 800a074:	4613      	movlt	r3, r2
 800a076:	6033      	str	r3, [r6, #0]
 800a078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a07c:	b10a      	cbz	r2, 800a082 <_printf_common+0x26>
 800a07e:	3301      	adds	r3, #1
 800a080:	6033      	str	r3, [r6, #0]
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	0699      	lsls	r1, r3, #26
 800a086:	bf42      	ittt	mi
 800a088:	6833      	ldrmi	r3, [r6, #0]
 800a08a:	3302      	addmi	r3, #2
 800a08c:	6033      	strmi	r3, [r6, #0]
 800a08e:	6825      	ldr	r5, [r4, #0]
 800a090:	f015 0506 	ands.w	r5, r5, #6
 800a094:	d106      	bne.n	800a0a4 <_printf_common+0x48>
 800a096:	f104 0a19 	add.w	sl, r4, #25
 800a09a:	68e3      	ldr	r3, [r4, #12]
 800a09c:	6832      	ldr	r2, [r6, #0]
 800a09e:	1a9b      	subs	r3, r3, r2
 800a0a0:	42ab      	cmp	r3, r5
 800a0a2:	dc2b      	bgt.n	800a0fc <_printf_common+0xa0>
 800a0a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0a8:	6822      	ldr	r2, [r4, #0]
 800a0aa:	3b00      	subs	r3, #0
 800a0ac:	bf18      	it	ne
 800a0ae:	2301      	movne	r3, #1
 800a0b0:	0692      	lsls	r2, r2, #26
 800a0b2:	d430      	bmi.n	800a116 <_printf_common+0xba>
 800a0b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a0b8:	4641      	mov	r1, r8
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	47c8      	blx	r9
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d023      	beq.n	800a10a <_printf_common+0xae>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	341a      	adds	r4, #26
 800a0c6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a0ca:	f003 0306 	and.w	r3, r3, #6
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	bf0a      	itet	eq
 800a0d2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a0d6:	2500      	movne	r5, #0
 800a0d8:	6833      	ldreq	r3, [r6, #0]
 800a0da:	f04f 0600 	mov.w	r6, #0
 800a0de:	bf08      	it	eq
 800a0e0:	1aed      	subeq	r5, r5, r3
 800a0e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a0e6:	bf08      	it	eq
 800a0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	bfc4      	itt	gt
 800a0f0:	1a9b      	subgt	r3, r3, r2
 800a0f2:	18ed      	addgt	r5, r5, r3
 800a0f4:	42b5      	cmp	r5, r6
 800a0f6:	d11a      	bne.n	800a12e <_printf_common+0xd2>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	e008      	b.n	800a10e <_printf_common+0xb2>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4652      	mov	r2, sl
 800a100:	4641      	mov	r1, r8
 800a102:	4638      	mov	r0, r7
 800a104:	47c8      	blx	r9
 800a106:	3001      	adds	r0, #1
 800a108:	d103      	bne.n	800a112 <_printf_common+0xb6>
 800a10a:	f04f 30ff 	mov.w	r0, #4294967295
 800a10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a112:	3501      	adds	r5, #1
 800a114:	e7c1      	b.n	800a09a <_printf_common+0x3e>
 800a116:	18e1      	adds	r1, r4, r3
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	2030      	movs	r0, #48	@ 0x30
 800a11c:	3302      	adds	r3, #2
 800a11e:	4422      	add	r2, r4
 800a120:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a12c:	e7c2      	b.n	800a0b4 <_printf_common+0x58>
 800a12e:	2301      	movs	r3, #1
 800a130:	4622      	mov	r2, r4
 800a132:	4641      	mov	r1, r8
 800a134:	4638      	mov	r0, r7
 800a136:	47c8      	blx	r9
 800a138:	3001      	adds	r0, #1
 800a13a:	d0e6      	beq.n	800a10a <_printf_common+0xae>
 800a13c:	3601      	adds	r6, #1
 800a13e:	e7d9      	b.n	800a0f4 <_printf_common+0x98>

0800a140 <_printf_i>:
 800a140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	7e0f      	ldrb	r7, [r1, #24]
 800a146:	4691      	mov	r9, r2
 800a148:	4680      	mov	r8, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	2f78      	cmp	r7, #120	@ 0x78
 800a14e:	469a      	mov	sl, r3
 800a150:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a156:	d807      	bhi.n	800a168 <_printf_i+0x28>
 800a158:	2f62      	cmp	r7, #98	@ 0x62
 800a15a:	d80a      	bhi.n	800a172 <_printf_i+0x32>
 800a15c:	2f00      	cmp	r7, #0
 800a15e:	f000 80d1 	beq.w	800a304 <_printf_i+0x1c4>
 800a162:	2f58      	cmp	r7, #88	@ 0x58
 800a164:	f000 80b8 	beq.w	800a2d8 <_printf_i+0x198>
 800a168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a16c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a170:	e03a      	b.n	800a1e8 <_printf_i+0xa8>
 800a172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a176:	2b15      	cmp	r3, #21
 800a178:	d8f6      	bhi.n	800a168 <_printf_i+0x28>
 800a17a:	a101      	add	r1, pc, #4	@ (adr r1, 800a180 <_printf_i+0x40>)
 800a17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a180:	0800a1d9 	.word	0x0800a1d9
 800a184:	0800a1ed 	.word	0x0800a1ed
 800a188:	0800a169 	.word	0x0800a169
 800a18c:	0800a169 	.word	0x0800a169
 800a190:	0800a169 	.word	0x0800a169
 800a194:	0800a169 	.word	0x0800a169
 800a198:	0800a1ed 	.word	0x0800a1ed
 800a19c:	0800a169 	.word	0x0800a169
 800a1a0:	0800a169 	.word	0x0800a169
 800a1a4:	0800a169 	.word	0x0800a169
 800a1a8:	0800a169 	.word	0x0800a169
 800a1ac:	0800a2eb 	.word	0x0800a2eb
 800a1b0:	0800a217 	.word	0x0800a217
 800a1b4:	0800a2a5 	.word	0x0800a2a5
 800a1b8:	0800a169 	.word	0x0800a169
 800a1bc:	0800a169 	.word	0x0800a169
 800a1c0:	0800a30d 	.word	0x0800a30d
 800a1c4:	0800a169 	.word	0x0800a169
 800a1c8:	0800a217 	.word	0x0800a217
 800a1cc:	0800a169 	.word	0x0800a169
 800a1d0:	0800a169 	.word	0x0800a169
 800a1d4:	0800a2ad 	.word	0x0800a2ad
 800a1d8:	6833      	ldr	r3, [r6, #0]
 800a1da:	1d1a      	adds	r2, r3, #4
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6032      	str	r2, [r6, #0]
 800a1e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e09c      	b.n	800a326 <_printf_i+0x1e6>
 800a1ec:	6833      	ldr	r3, [r6, #0]
 800a1ee:	6820      	ldr	r0, [r4, #0]
 800a1f0:	1d19      	adds	r1, r3, #4
 800a1f2:	6031      	str	r1, [r6, #0]
 800a1f4:	0606      	lsls	r6, r0, #24
 800a1f6:	d501      	bpl.n	800a1fc <_printf_i+0xbc>
 800a1f8:	681d      	ldr	r5, [r3, #0]
 800a1fa:	e003      	b.n	800a204 <_printf_i+0xc4>
 800a1fc:	0645      	lsls	r5, r0, #25
 800a1fe:	d5fb      	bpl.n	800a1f8 <_printf_i+0xb8>
 800a200:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a204:	2d00      	cmp	r5, #0
 800a206:	da03      	bge.n	800a210 <_printf_i+0xd0>
 800a208:	232d      	movs	r3, #45	@ 0x2d
 800a20a:	426d      	negs	r5, r5
 800a20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a210:	4858      	ldr	r0, [pc, #352]	@ (800a374 <_printf_i+0x234>)
 800a212:	230a      	movs	r3, #10
 800a214:	e011      	b.n	800a23a <_printf_i+0xfa>
 800a216:	6821      	ldr	r1, [r4, #0]
 800a218:	6833      	ldr	r3, [r6, #0]
 800a21a:	0608      	lsls	r0, r1, #24
 800a21c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a220:	d402      	bmi.n	800a228 <_printf_i+0xe8>
 800a222:	0649      	lsls	r1, r1, #25
 800a224:	bf48      	it	mi
 800a226:	b2ad      	uxthmi	r5, r5
 800a228:	2f6f      	cmp	r7, #111	@ 0x6f
 800a22a:	6033      	str	r3, [r6, #0]
 800a22c:	4851      	ldr	r0, [pc, #324]	@ (800a374 <_printf_i+0x234>)
 800a22e:	bf14      	ite	ne
 800a230:	230a      	movne	r3, #10
 800a232:	2308      	moveq	r3, #8
 800a234:	2100      	movs	r1, #0
 800a236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a23a:	6866      	ldr	r6, [r4, #4]
 800a23c:	2e00      	cmp	r6, #0
 800a23e:	60a6      	str	r6, [r4, #8]
 800a240:	db05      	blt.n	800a24e <_printf_i+0x10e>
 800a242:	6821      	ldr	r1, [r4, #0]
 800a244:	432e      	orrs	r6, r5
 800a246:	f021 0104 	bic.w	r1, r1, #4
 800a24a:	6021      	str	r1, [r4, #0]
 800a24c:	d04b      	beq.n	800a2e6 <_printf_i+0x1a6>
 800a24e:	4616      	mov	r6, r2
 800a250:	fbb5 f1f3 	udiv	r1, r5, r3
 800a254:	fb03 5711 	mls	r7, r3, r1, r5
 800a258:	5dc7      	ldrb	r7, [r0, r7]
 800a25a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a25e:	462f      	mov	r7, r5
 800a260:	460d      	mov	r5, r1
 800a262:	42bb      	cmp	r3, r7
 800a264:	d9f4      	bls.n	800a250 <_printf_i+0x110>
 800a266:	2b08      	cmp	r3, #8
 800a268:	d10b      	bne.n	800a282 <_printf_i+0x142>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	07df      	lsls	r7, r3, #31
 800a26e:	d508      	bpl.n	800a282 <_printf_i+0x142>
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	6861      	ldr	r1, [r4, #4]
 800a274:	4299      	cmp	r1, r3
 800a276:	bfde      	ittt	le
 800a278:	2330      	movle	r3, #48	@ 0x30
 800a27a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a27e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a282:	1b92      	subs	r2, r2, r6
 800a284:	6122      	str	r2, [r4, #16]
 800a286:	464b      	mov	r3, r9
 800a288:	aa03      	add	r2, sp, #12
 800a28a:	4621      	mov	r1, r4
 800a28c:	4640      	mov	r0, r8
 800a28e:	f8cd a000 	str.w	sl, [sp]
 800a292:	f7ff fee3 	bl	800a05c <_printf_common>
 800a296:	3001      	adds	r0, #1
 800a298:	d14a      	bne.n	800a330 <_printf_i+0x1f0>
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295
 800a29e:	b004      	add	sp, #16
 800a2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	f043 0320 	orr.w	r3, r3, #32
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	2778      	movs	r7, #120	@ 0x78
 800a2ae:	4832      	ldr	r0, [pc, #200]	@ (800a378 <_printf_i+0x238>)
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2b6:	061f      	lsls	r7, r3, #24
 800a2b8:	6831      	ldr	r1, [r6, #0]
 800a2ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800a2be:	d402      	bmi.n	800a2c6 <_printf_i+0x186>
 800a2c0:	065f      	lsls	r7, r3, #25
 800a2c2:	bf48      	it	mi
 800a2c4:	b2ad      	uxthmi	r5, r5
 800a2c6:	6031      	str	r1, [r6, #0]
 800a2c8:	07d9      	lsls	r1, r3, #31
 800a2ca:	bf44      	itt	mi
 800a2cc:	f043 0320 	orrmi.w	r3, r3, #32
 800a2d0:	6023      	strmi	r3, [r4, #0]
 800a2d2:	b11d      	cbz	r5, 800a2dc <_printf_i+0x19c>
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	e7ad      	b.n	800a234 <_printf_i+0xf4>
 800a2d8:	4826      	ldr	r0, [pc, #152]	@ (800a374 <_printf_i+0x234>)
 800a2da:	e7e9      	b.n	800a2b0 <_printf_i+0x170>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	f023 0320 	bic.w	r3, r3, #32
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	e7f6      	b.n	800a2d4 <_printf_i+0x194>
 800a2e6:	4616      	mov	r6, r2
 800a2e8:	e7bd      	b.n	800a266 <_printf_i+0x126>
 800a2ea:	6833      	ldr	r3, [r6, #0]
 800a2ec:	6825      	ldr	r5, [r4, #0]
 800a2ee:	1d18      	adds	r0, r3, #4
 800a2f0:	6961      	ldr	r1, [r4, #20]
 800a2f2:	6030      	str	r0, [r6, #0]
 800a2f4:	062e      	lsls	r6, r5, #24
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	d501      	bpl.n	800a2fe <_printf_i+0x1be>
 800a2fa:	6019      	str	r1, [r3, #0]
 800a2fc:	e002      	b.n	800a304 <_printf_i+0x1c4>
 800a2fe:	0668      	lsls	r0, r5, #25
 800a300:	d5fb      	bpl.n	800a2fa <_printf_i+0x1ba>
 800a302:	8019      	strh	r1, [r3, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	4616      	mov	r6, r2
 800a308:	6123      	str	r3, [r4, #16]
 800a30a:	e7bc      	b.n	800a286 <_printf_i+0x146>
 800a30c:	6833      	ldr	r3, [r6, #0]
 800a30e:	2100      	movs	r1, #0
 800a310:	1d1a      	adds	r2, r3, #4
 800a312:	6032      	str	r2, [r6, #0]
 800a314:	681e      	ldr	r6, [r3, #0]
 800a316:	6862      	ldr	r2, [r4, #4]
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 f859 	bl	800a3d0 <memchr>
 800a31e:	b108      	cbz	r0, 800a324 <_printf_i+0x1e4>
 800a320:	1b80      	subs	r0, r0, r6
 800a322:	6060      	str	r0, [r4, #4]
 800a324:	6863      	ldr	r3, [r4, #4]
 800a326:	6123      	str	r3, [r4, #16]
 800a328:	2300      	movs	r3, #0
 800a32a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a32e:	e7aa      	b.n	800a286 <_printf_i+0x146>
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	4632      	mov	r2, r6
 800a334:	4649      	mov	r1, r9
 800a336:	4640      	mov	r0, r8
 800a338:	47d0      	blx	sl
 800a33a:	3001      	adds	r0, #1
 800a33c:	d0ad      	beq.n	800a29a <_printf_i+0x15a>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	079b      	lsls	r3, r3, #30
 800a342:	d413      	bmi.n	800a36c <_printf_i+0x22c>
 800a344:	68e0      	ldr	r0, [r4, #12]
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	4298      	cmp	r0, r3
 800a34a:	bfb8      	it	lt
 800a34c:	4618      	movlt	r0, r3
 800a34e:	e7a6      	b.n	800a29e <_printf_i+0x15e>
 800a350:	2301      	movs	r3, #1
 800a352:	4632      	mov	r2, r6
 800a354:	4649      	mov	r1, r9
 800a356:	4640      	mov	r0, r8
 800a358:	47d0      	blx	sl
 800a35a:	3001      	adds	r0, #1
 800a35c:	d09d      	beq.n	800a29a <_printf_i+0x15a>
 800a35e:	3501      	adds	r5, #1
 800a360:	68e3      	ldr	r3, [r4, #12]
 800a362:	9903      	ldr	r1, [sp, #12]
 800a364:	1a5b      	subs	r3, r3, r1
 800a366:	42ab      	cmp	r3, r5
 800a368:	dcf2      	bgt.n	800a350 <_printf_i+0x210>
 800a36a:	e7eb      	b.n	800a344 <_printf_i+0x204>
 800a36c:	2500      	movs	r5, #0
 800a36e:	f104 0619 	add.w	r6, r4, #25
 800a372:	e7f5      	b.n	800a360 <_printf_i+0x220>
 800a374:	0800a6c1 	.word	0x0800a6c1
 800a378:	0800a6d2 	.word	0x0800a6d2

0800a37c <memmove>:
 800a37c:	4288      	cmp	r0, r1
 800a37e:	b510      	push	{r4, lr}
 800a380:	eb01 0402 	add.w	r4, r1, r2
 800a384:	d902      	bls.n	800a38c <memmove+0x10>
 800a386:	4284      	cmp	r4, r0
 800a388:	4623      	mov	r3, r4
 800a38a:	d807      	bhi.n	800a39c <memmove+0x20>
 800a38c:	1e43      	subs	r3, r0, #1
 800a38e:	42a1      	cmp	r1, r4
 800a390:	d008      	beq.n	800a3a4 <memmove+0x28>
 800a392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a39a:	e7f8      	b.n	800a38e <memmove+0x12>
 800a39c:	4402      	add	r2, r0
 800a39e:	4601      	mov	r1, r0
 800a3a0:	428a      	cmp	r2, r1
 800a3a2:	d100      	bne.n	800a3a6 <memmove+0x2a>
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3ae:	e7f7      	b.n	800a3a0 <memmove+0x24>

0800a3b0 <_sbrk_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4d05      	ldr	r5, [pc, #20]	@ (800a3cc <_sbrk_r+0x1c>)
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	602b      	str	r3, [r5, #0]
 800a3bc:	f7f7 fc4e 	bl	8001c5c <_sbrk>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_sbrk_r+0x1a>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_sbrk_r+0x1a>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20000f60 	.word	0x20000f60

0800a3d0 <memchr>:
 800a3d0:	b2c9      	uxtb	r1, r1
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	4402      	add	r2, r0
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	d101      	bne.n	800a3e2 <memchr+0x12>
 800a3de:	2000      	movs	r0, #0
 800a3e0:	e003      	b.n	800a3ea <memchr+0x1a>
 800a3e2:	7804      	ldrb	r4, [r0, #0]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	428c      	cmp	r4, r1
 800a3e8:	d1f6      	bne.n	800a3d8 <memchr+0x8>
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <memcpy>:
 800a3ec:	440a      	add	r2, r1
 800a3ee:	1e43      	subs	r3, r0, #1
 800a3f0:	4291      	cmp	r1, r2
 800a3f2:	d100      	bne.n	800a3f6 <memcpy+0xa>
 800a3f4:	4770      	bx	lr
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3fc:	4291      	cmp	r1, r2
 800a3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a402:	d1f9      	bne.n	800a3f8 <memcpy+0xc>
 800a404:	bd10      	pop	{r4, pc}

0800a406 <_realloc_r>:
 800a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40a:	4607      	mov	r7, r0
 800a40c:	4614      	mov	r4, r2
 800a40e:	460d      	mov	r5, r1
 800a410:	b921      	cbnz	r1, 800a41c <_realloc_r+0x16>
 800a412:	4611      	mov	r1, r2
 800a414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a418:	f7ff bc3c 	b.w	8009c94 <_malloc_r>
 800a41c:	b92a      	cbnz	r2, 800a42a <_realloc_r+0x24>
 800a41e:	4625      	mov	r5, r4
 800a420:	f7ff fbcc 	bl	8009bbc <_free_r>
 800a424:	4628      	mov	r0, r5
 800a426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a42a:	f000 f81a 	bl	800a462 <_malloc_usable_size_r>
 800a42e:	4284      	cmp	r4, r0
 800a430:	4606      	mov	r6, r0
 800a432:	d802      	bhi.n	800a43a <_realloc_r+0x34>
 800a434:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a438:	d8f4      	bhi.n	800a424 <_realloc_r+0x1e>
 800a43a:	4621      	mov	r1, r4
 800a43c:	4638      	mov	r0, r7
 800a43e:	f7ff fc29 	bl	8009c94 <_malloc_r>
 800a442:	4680      	mov	r8, r0
 800a444:	b908      	cbnz	r0, 800a44a <_realloc_r+0x44>
 800a446:	4645      	mov	r5, r8
 800a448:	e7ec      	b.n	800a424 <_realloc_r+0x1e>
 800a44a:	42b4      	cmp	r4, r6
 800a44c:	4622      	mov	r2, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	bf28      	it	cs
 800a452:	4632      	movcs	r2, r6
 800a454:	f7ff ffca 	bl	800a3ec <memcpy>
 800a458:	4629      	mov	r1, r5
 800a45a:	4638      	mov	r0, r7
 800a45c:	f7ff fbae 	bl	8009bbc <_free_r>
 800a460:	e7f1      	b.n	800a446 <_realloc_r+0x40>

0800a462 <_malloc_usable_size_r>:
 800a462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a466:	1f18      	subs	r0, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bfbc      	itt	lt
 800a46c:	580b      	ldrlt	r3, [r1, r0]
 800a46e:	18c0      	addlt	r0, r0, r3
 800a470:	4770      	bx	lr
	...

0800a474 <_init>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr

0800a480 <_fini>:
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a482:	bf00      	nop
 800a484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a486:	bc08      	pop	{r3}
 800a488:	469e      	mov	lr, r3
 800a48a:	4770      	bx	lr
