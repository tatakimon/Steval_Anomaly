
Olmuyorr_DMA_DWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df0  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c7  0800a028  0800a028  0000b028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1f0  0800a1f0  0000b1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1f8  0800a1f8  0000b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a1fc  0800a1fc  0000b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800a200  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005e4  2000005c  0800a25c  0000c05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000640  0800a25c  0000c640  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a1ee  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000279a  00000000  00000000  00026280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001180  00000000  00000000  00028a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000da5  00000000  00000000  00029ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6fd  00000000  00000000  0002a945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000185a0  00000000  00000000  00065042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182e4e  00000000  00000000  0007d5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00200430  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e70  00000000  00000000  00200474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  002052e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a010 	.word	0x0800a010

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800a010 	.word	0x0800a010

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b08c      	sub	sp, #48	@ 0x30
 8000608:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060a:	f001 fa0b 	bl	8001a24 <HAL_Init>

							  /* Configure the System Power */
							  //SystemPower_Config();

							  /* Configure the system clock */
							  SystemClock_Config();
 800060e:	f000 f935 	bl	800087c <SystemClock_Config>
							  /* USER CODE BEGIN SysInit */

							  /* USER CODE END SysInit */

							  /* Initialize all configured peripherals */
							  MX_GPIO_Init();
 8000612:	f000 fa9f 	bl	8000b54 <MX_GPIO_Init>
							  //MX_IWDG_Init();
							  MX_GPDMA1_Init();
 8000616:	f000 f997 	bl	8000948 <MX_GPDMA1_Init>
							  //MX_ICACHE_Init();
							  //MX_RTC_Init();
							  //MX_SAI1_Init();
							  //MX_SDMMC1_SD_Init();
							  //MX_SPI1_Init();
							  MX_SPI2_Init();
 800061a:	f000 f9dd 	bl	80009d8 <MX_SPI2_Init>
							  //MX_SPI3_Init();
							  //MX_TAMP_RTC_Init();
							  //MX_TIM3_Init();
							  MX_USART2_UART_Init();
 800061e:	f000 fa4b 	bl	8000ab8 <MX_USART2_UART_Init>
							  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */


				  // Read into a temporary non-volatile variable to fix the compiler error
				    uint8_t who_am_i_val = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	71fb      	strb	r3, [r7, #7]
				    iis3dwb_read_reg(IIS3DWB_WHO_AM_I_ADDR, &who_am_i_val, 1);
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	200f      	movs	r0, #15
 800062e:	f000 fd07 	bl	8001040 <iis3dwb_read_reg>
				    dbg_who_am_i = who_am_i_val; // Now, assign the result to the debug variable
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	4b81      	ldr	r3, [pc, #516]	@ (800083c <main+0x238>)
 8000636:	701a      	strb	r2, [r3, #0]

				  // --- SENSOR INITIALIZATION ---

				  if (dbg_who_am_i == IIS3DWB_WHO_AM_I_VAL) {
 8000638:	4b80      	ldr	r3, [pc, #512]	@ (800083c <main+0x238>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b7b      	cmp	r3, #123	@ 0x7b
 8000640:	d117      	bne.n	8000672 <main+0x6e>
				    // Communication successful!
				    sprintf(uart_buf, "IIS3DWB WHO_AM_I check PASSED! Value: 0x%X\r\n", dbg_who_am_i);
 8000642:	4b7e      	ldr	r3, [pc, #504]	@ (800083c <main+0x238>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	497d      	ldr	r1, [pc, #500]	@ (8000840 <main+0x23c>)
 800064c:	487d      	ldr	r0, [pc, #500]	@ (8000844 <main+0x240>)
 800064e:	f009 f82d 	bl	80096ac <siprintf>
				    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000652:	487c      	ldr	r0, [pc, #496]	@ (8000844 <main+0x240>)
 8000654:	f7ff fe10 	bl	8000278 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	4978      	ldr	r1, [pc, #480]	@ (8000844 <main+0x240>)
 8000662:	4879      	ldr	r0, [pc, #484]	@ (8000848 <main+0x244>)
 8000664:	f008 fac0 	bl	8008be8 <HAL_UART_Transmit>

				    // Now, configure the sensor to start measuring
				    iis3dwb_write_reg(IIS3DWB_CTRL1_XL_ADDR, 0xA0);
 8000668:	21a0      	movs	r1, #160	@ 0xa0
 800066a:	2010      	movs	r0, #16
 800066c:	f000 fcc0 	bl	8000ff0 <iis3dwb_write_reg>
 8000670:	e014      	b.n	800069c <main+0x98>
				  } else {
				    // Communication failed!
				    sprintf(uart_buf, "IIS3DWB WHO_AM_I check FAILED! Expected 0x7B, got 0x%X\r\n", dbg_who_am_i);
 8000672:	4b72      	ldr	r3, [pc, #456]	@ (800083c <main+0x238>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	4974      	ldr	r1, [pc, #464]	@ (800084c <main+0x248>)
 800067c:	4871      	ldr	r0, [pc, #452]	@ (8000844 <main+0x240>)
 800067e:	f009 f815 	bl	80096ac <siprintf>
				    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000682:	4870      	ldr	r0, [pc, #448]	@ (8000844 <main+0x240>)
 8000684:	f7ff fdf8 	bl	8000278 <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	b29a      	uxth	r2, r3
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	496c      	ldr	r1, [pc, #432]	@ (8000844 <main+0x240>)
 8000692:	486d      	ldr	r0, [pc, #436]	@ (8000848 <main+0x244>)
 8000694:	f008 faa8 	bl	8008be8 <HAL_UART_Transmit>
				    Error_Handler();
 8000698:	f000 fd02 	bl	80010a0 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // 1. Prepare the transmit buffer
	      spi_tx_buf[0] = IIS3DWB_OUTX_L_A_ADDR | READ_FLAG;
 800069c:	4b6c      	ldr	r3, [pc, #432]	@ (8000850 <main+0x24c>)
 800069e:	22a8      	movs	r2, #168	@ 0xa8
 80006a0:	701a      	strb	r2, [r3, #0]

	      // 2. Pull CS Pin (PF12) LOW to select the sensor
	      HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a8:	486a      	ldr	r0, [pc, #424]	@ (8000854 <main+0x250>)
 80006aa:	f002 fd73 	bl	8003194 <HAL_GPIO_WritePin>

	      // 3. Start the SPI transaction with DMA
	      dbg_spi_status = HAL_SPI_TransmitReceive_DMA(&hspi2, spi_tx_buf, spi_rx_buf, 7); // <-- UPDATE DEBUG VARIABLE
 80006ae:	2307      	movs	r3, #7
 80006b0:	4a69      	ldr	r2, [pc, #420]	@ (8000858 <main+0x254>)
 80006b2:	4967      	ldr	r1, [pc, #412]	@ (8000850 <main+0x24c>)
 80006b4:	4869      	ldr	r0, [pc, #420]	@ (800085c <main+0x258>)
 80006b6:	f007 fc15 	bl	8007ee4 <HAL_SPI_TransmitReceive_DMA>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b68      	ldr	r3, [pc, #416]	@ (8000860 <main+0x25c>)
 80006c0:	701a      	strb	r2, [r3, #0]
	      if (dbg_spi_status == HAL_OK)
 80006c2:	4b67      	ldr	r3, [pc, #412]	@ (8000860 <main+0x25c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f040 80b3 	bne.w	8000834 <main+0x230>
	      {
	          // Wait for the data_ready flag
	          while (spi_data_ready_flag == 0) {}
 80006ce:	bf00      	nop
 80006d0:	4b64      	ldr	r3, [pc, #400]	@ (8000864 <main+0x260>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0fa      	beq.n	80006d0 <main+0xcc>
	          spi_data_ready_flag = 0;
 80006da:	4b62      	ldr	r3, [pc, #392]	@ (8000864 <main+0x260>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]

	          // Process the received data
	          dbg_raw_x = (int16_t)((spi_rx_buf[2] << 8) | spi_rx_buf[1]); // <-- UPDATE DEBUG VARIABLE
 80006e0:	4b5d      	ldr	r3, [pc, #372]	@ (8000858 <main+0x254>)
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	4b5b      	ldr	r3, [pc, #364]	@ (8000858 <main+0x254>)
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	4b5c      	ldr	r3, [pc, #368]	@ (8000868 <main+0x264>)
 80006f6:	801a      	strh	r2, [r3, #0]
	          dbg_raw_y = (int16_t)((spi_rx_buf[4] << 8) | spi_rx_buf[3]); // <-- UPDATE DEBUG VARIABLE
 80006f8:	4b57      	ldr	r3, [pc, #348]	@ (8000858 <main+0x254>)
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b21a      	sxth	r2, r3
 8000702:	4b55      	ldr	r3, [pc, #340]	@ (8000858 <main+0x254>)
 8000704:	78db      	ldrb	r3, [r3, #3]
 8000706:	b21b      	sxth	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b21a      	sxth	r2, r3
 800070c:	4b57      	ldr	r3, [pc, #348]	@ (800086c <main+0x268>)
 800070e:	801a      	strh	r2, [r3, #0]
	          dbg_raw_z = (int16_t)((spi_rx_buf[6] << 8) | spi_rx_buf[5]); // <-- UPDATE DEBUG VARIABLE
 8000710:	4b51      	ldr	r3, [pc, #324]	@ (8000858 <main+0x254>)
 8000712:	799b      	ldrb	r3, [r3, #6]
 8000714:	b21b      	sxth	r3, r3
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	b21a      	sxth	r2, r3
 800071a:	4b4f      	ldr	r3, [pc, #316]	@ (8000858 <main+0x254>)
 800071c:	795b      	ldrb	r3, [r3, #5]
 800071e:	b21b      	sxth	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b52      	ldr	r3, [pc, #328]	@ (8000870 <main+0x26c>)
 8000726:	801a      	strh	r2, [r3, #0]

	          // Integer-based conversion
	          int32_t x_scaled_mg = (int32_t)dbg_raw_x * 61;
 8000728:	4b4f      	ldr	r3, [pc, #316]	@ (8000868 <main+0x264>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	b21b      	sxth	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	4613      	mov	r3, r2
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	1a9b      	subs	r3, r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	61fb      	str	r3, [r7, #28]
	          int16_t x_int = x_scaled_mg / 1000;
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	4a4d      	ldr	r2, [pc, #308]	@ (8000874 <main+0x270>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1192      	asrs	r2, r2, #6
 8000746:	17db      	asrs	r3, r3, #31
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	837b      	strh	r3, [r7, #26]
	          int16_t x_frac = abs(x_scaled_mg % 1000);
 800074c:	69fa      	ldr	r2, [r7, #28]
 800074e:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <main+0x270>)
 8000750:	fb83 1302 	smull	r1, r3, r3, r2
 8000754:	1199      	asrs	r1, r3, #6
 8000756:	17d3      	asrs	r3, r2, #31
 8000758:	1acb      	subs	r3, r1, r3
 800075a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800075e:	fb01 f303 	mul.w	r3, r1, r3
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	bfb8      	it	lt
 8000768:	425b      	neglt	r3, r3
 800076a:	833b      	strh	r3, [r7, #24]

	          int32_t y_scaled_mg = (int32_t)dbg_raw_y * 61;
 800076c:	4b3f      	ldr	r3, [pc, #252]	@ (800086c <main+0x268>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	b21b      	sxth	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	4613      	mov	r3, r2
 8000776:	011b      	lsls	r3, r3, #4
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	617b      	str	r3, [r7, #20]
	          int16_t y_int = y_scaled_mg / 1000;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	4a3c      	ldr	r2, [pc, #240]	@ (8000874 <main+0x270>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	1192      	asrs	r2, r2, #6
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	827b      	strh	r3, [r7, #18]
	          int16_t y_frac = abs(y_scaled_mg % 1000);
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <main+0x270>)
 8000794:	fb83 1302 	smull	r1, r3, r3, r2
 8000798:	1199      	asrs	r1, r3, #6
 800079a:	17d3      	asrs	r3, r2, #31
 800079c:	1acb      	subs	r3, r1, r3
 800079e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	bfb8      	it	lt
 80007ac:	425b      	neglt	r3, r3
 80007ae:	823b      	strh	r3, [r7, #16]

	          int32_t z_scaled_mg = (int32_t)dbg_raw_z * 61;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <main+0x26c>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	4613      	mov	r3, r2
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
	          int16_t z_int = z_scaled_mg / 1000;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000874 <main+0x270>)
 80007c8:	fb82 1203 	smull	r1, r2, r2, r3
 80007cc:	1192      	asrs	r2, r2, #6
 80007ce:	17db      	asrs	r3, r3, #31
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	817b      	strh	r3, [r7, #10]
	          int16_t z_frac = abs(z_scaled_mg % 1000);
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <main+0x270>)
 80007d8:	fb83 1302 	smull	r1, r3, r3, r2
 80007dc:	1199      	asrs	r1, r3, #6
 80007de:	17d3      	asrs	r3, r2, #31
 80007e0:	1acb      	subs	r3, r1, r3
 80007e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007e6:	fb01 f303 	mul.w	r3, r1, r3
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bfb8      	it	lt
 80007f0:	425b      	neglt	r3, r3
 80007f2:	813b      	strh	r3, [r7, #8]

	          // Print the values
	          sprintf(uart_buf, "X:%d.%03d, Y:%d.%03d, Z:%d.%03d mg\r\n",
 80007f4:	f9b7 401a 	ldrsh.w	r4, [r7, #26]
 80007f8:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 80007fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000800:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000804:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000808:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800080c:	9003      	str	r0, [sp, #12]
 800080e:	9102      	str	r1, [sp, #8]
 8000810:	9201      	str	r2, [sp, #4]
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	462b      	mov	r3, r5
 8000816:	4622      	mov	r2, r4
 8000818:	4917      	ldr	r1, [pc, #92]	@ (8000878 <main+0x274>)
 800081a:	480a      	ldr	r0, [pc, #40]	@ (8000844 <main+0x240>)
 800081c:	f008 ff46 	bl	80096ac <siprintf>
	                  x_int, x_frac, y_int, y_frac, z_int, z_frac);
	          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8000820:	4808      	ldr	r0, [pc, #32]	@ (8000844 <main+0x240>)
 8000822:	f7ff fd29 	bl	8000278 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	4905      	ldr	r1, [pc, #20]	@ (8000844 <main+0x240>)
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <main+0x244>)
 8000830:	f008 f9da 	bl	8008be8 <HAL_UART_Transmit>
	      }

	      HAL_Delay(100);
 8000834:	2064      	movs	r0, #100	@ 0x64
 8000836:	f001 f9bb 	bl	8001bb0 <HAL_Delay>
	      spi_tx_buf[0] = IIS3DWB_OUTX_L_A_ADDR | READ_FLAG;
 800083a:	e72f      	b.n	800069c <main+0x98>
 800083c:	200004e0 	.word	0x200004e0
 8000840:	0800a028 	.word	0x0800a028
 8000844:	2000047c 	.word	0x2000047c
 8000848:	200003d8 	.word	0x200003d8
 800084c:	0800a058 	.word	0x0800a058
 8000850:	2000046c 	.word	0x2000046c
 8000854:	42021400 	.word	0x42021400
 8000858:	20000474 	.word	0x20000474
 800085c:	20000258 	.word	0x20000258
 8000860:	200004e1 	.word	0x200004e1
 8000864:	2000047b 	.word	0x2000047b
 8000868:	200004e8 	.word	0x200004e8
 800086c:	200004ea 	.word	0x200004ea
 8000870:	200004ec 	.word	0x200004ec
 8000874:	10624dd3 	.word	0x10624dd3
 8000878:	0800a094 	.word	0x0800a094

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09e      	sub	sp, #120	@ 0x78
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	2260      	movs	r2, #96	@ 0x60
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f008 ff30 	bl	80096f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80008a4:	f002 fcca 	bl	800323c <HAL_PWREx_ControlVoltageScaling>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008ae:	f000 fbf7 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80008b2:	232b      	movs	r3, #43	@ 0x2b
 80008b4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	2303      	movs	r3, #3
 80008dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008e6:	230a      	movs	r3, #10
 80008e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80008f6:	230c      	movs	r3, #12
 80008f8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fd56 	bl	80033b4 <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800090e:	f000 fbc7 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	231f      	movs	r3, #31
 8000914:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2303      	movs	r3, #3
 8000918:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2104      	movs	r1, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fc1c 	bl	800416c <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800093a:	f000 fbb1 	bl	80010a0 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3778      	adds	r7, #120	@ 0x78
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_GPDMA1_Init+0x8c>)
 8000950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000954:	4a1f      	ldr	r2, [pc, #124]	@ (80009d4 <MX_GPDMA1_Init+0x8c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_GPDMA1_Init+0x8c>)
 8000960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	201d      	movs	r0, #29
 8000972:	f001 f9f9 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000976:	201d      	movs	r0, #29
 8000978:	f001 fa10 	bl	8001d9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	201e      	movs	r0, #30
 8000982:	f001 f9f1 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000986:	201e      	movs	r0, #30
 8000988:	f001 fa08 	bl	8001d9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	201f      	movs	r0, #31
 8000992:	f001 f9e9 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000996:	201f      	movs	r0, #31
 8000998:	f001 fa00 	bl	8001d9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2020      	movs	r0, #32
 80009a2:	f001 f9e1 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80009a6:	2020      	movs	r0, #32
 80009a8:	f001 f9f8 	bl	8001d9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2021      	movs	r0, #33	@ 0x21
 80009b2:	f001 f9d9 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 80009b6:	2021      	movs	r0, #33	@ 0x21
 80009b8:	f001 f9f0 	bl	8001d9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2022      	movs	r0, #34	@ 0x22
 80009c2:	f001 f9d1 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80009c6:	2022      	movs	r0, #34	@ 0x22
 80009c8:	f001 f9e8 	bl	8001d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	46020c00 	.word	0x46020c00

080009d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009e8:	4b30      	ldr	r3, [pc, #192]	@ (8000aac <MX_SPI2_Init+0xd4>)
 80009ea:	4a31      	ldr	r2, [pc, #196]	@ (8000ab0 <MX_SPI2_Init+0xd8>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b2f      	ldr	r3, [pc, #188]	@ (8000aac <MX_SPI2_Init+0xd4>)
 80009f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	@ (8000aac <MX_SPI2_Init+0xd4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	@ (8000aac <MX_SPI2_Init+0xd4>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b28      	ldr	r3, [pc, #160]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a18:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a74:	480d      	ldr	r0, [pc, #52]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a76:	f006 fc29 	bl	80072cc <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000a80:	f000 fb0e 	bl	80010a0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <MX_SPI2_Init+0xdc>)
 8000a8a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_SPI2_Init+0xd4>)
 8000a96:	f008 f816 	bl	8008ac6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000aa0:	f000 fafe 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000258 	.word	0x20000258
 8000ab0:	40003800 	.word	0x40003800
 8000ab4:	10010000 	.word	0x10010000

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000abe:	4a24      	ldr	r2, [pc, #144]	@ (8000b50 <MX_USART2_UART_Init+0x98>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ae4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4812      	ldr	r0, [pc, #72]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b04:	f008 f820 	bl	8008b48 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000b0e:	f000 fac7 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b16:	f008 fcff 	bl	8009518 <HAL_UARTEx_SetTxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000b20:	f000 fabe 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b28:	f008 fd34 	bl	8009594 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000b32:	f000 fab5 	bl	80010a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b38:	f008 fcb5 	bl	80094a6 <HAL_UARTEx_DisableFifoMode>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000b42:	f000 faad 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200003d8 	.word	0x200003d8
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	@ 0x38
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4bbf      	ldr	r3, [pc, #764]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b70:	4abd      	ldr	r2, [pc, #756]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b7a:	4bbb      	ldr	r3, [pc, #748]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	623b      	str	r3, [r7, #32]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b88:	4bb7      	ldr	r3, [pc, #732]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8e:	4ab6      	ldr	r2, [pc, #728]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b98:	4bb3      	ldr	r3, [pc, #716]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba6:	4bb0      	ldr	r3, [pc, #704]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bac:	4aae      	ldr	r2, [pc, #696]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bb6:	4bac      	ldr	r3, [pc, #688]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	4ba8      	ldr	r3, [pc, #672]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bca:	4aa7      	ldr	r2, [pc, #668]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd4:	4ba4      	ldr	r3, [pc, #656]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4ba1      	ldr	r3, [pc, #644]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be8:	4a9f      	ldr	r2, [pc, #636]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bf2:	4b9d      	ldr	r3, [pc, #628]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c00:	4b99      	ldr	r3, [pc, #612]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c06:	4a98      	ldr	r2, [pc, #608]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c10:	4b95      	ldr	r3, [pc, #596]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b92      	ldr	r3, [pc, #584]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c24:	4a90      	ldr	r2, [pc, #576]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c2e:	4b8e      	ldr	r3, [pc, #568]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c42:	4a89      	ldr	r2, [pc, #548]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c4c:	4b86      	ldr	r3, [pc, #536]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5a:	4b83      	ldr	r3, [pc, #524]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c60:	4a81      	ldr	r2, [pc, #516]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e68 <MX_GPIO_Init+0x314>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c70:	f003 0320 	and.w	r3, r3, #32
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8000c7e:	487b      	ldr	r0, [pc, #492]	@ (8000e6c <MX_GPIO_Init+0x318>)
 8000c80:	f002 fa88 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2181      	movs	r1, #129	@ 0x81
 8000c88:	4879      	ldr	r0, [pc, #484]	@ (8000e70 <MX_GPIO_Init+0x31c>)
 8000c8a:	f002 fa83 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000c94:	4875      	ldr	r0, [pc, #468]	@ (8000e6c <MX_GPIO_Init+0x318>)
 8000c96:	f002 fa7d 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4875      	ldr	r0, [pc, #468]	@ (8000e74 <MX_GPIO_Init+0x320>)
 8000ca0:	f002 fa78 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000caa:	4873      	ldr	r0, [pc, #460]	@ (8000e78 <MX_GPIO_Init+0x324>)
 8000cac:	f002 fa72 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8000cb0:	2340      	movs	r3, #64	@ 0x40
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	4b71      	ldr	r3, [pc, #452]	@ (8000e7c <MX_GPIO_Init+0x328>)
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	486b      	ldr	r0, [pc, #428]	@ (8000e70 <MX_GPIO_Init+0x31c>)
 8000cc4:	f002 f886 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8000cc8:	f248 0362 	movw	r3, #32866	@ 0x8062
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4868      	ldr	r0, [pc, #416]	@ (8000e80 <MX_GPIO_Init+0x32c>)
 8000cde:	f002 f879 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 8000ce2:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	485c      	ldr	r0, [pc, #368]	@ (8000e6c <MX_GPIO_Init+0x318>)
 8000cfc:	f002 f86a 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8000d00:	2324      	movs	r3, #36	@ 0x24
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d04:	2303      	movs	r3, #3
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4857      	ldr	r0, [pc, #348]	@ (8000e70 <MX_GPIO_Init+0x31c>)
 8000d14:	f002 f85e 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8000d18:	f24a 2301 	movw	r3, #41473	@ 0xa201
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4855      	ldr	r0, [pc, #340]	@ (8000e84 <MX_GPIO_Init+0x330>)
 8000d2e:	f002 f851 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8000d32:	2381      	movs	r3, #129	@ 0x81
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4849      	ldr	r0, [pc, #292]	@ (8000e70 <MX_GPIO_Init+0x31c>)
 8000d4a:	f002 f843 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4843      	ldr	r0, [pc, #268]	@ (8000e74 <MX_GPIO_Init+0x320>)
 8000d66:	f002 f835 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 8000d6a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d70:	2303      	movs	r3, #3
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	483b      	ldr	r0, [pc, #236]	@ (8000e6c <MX_GPIO_Init+0x318>)
 8000d80:	f002 f828 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8000d84:	2381      	movs	r3, #129	@ 0x81
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	4b3c      	ldr	r3, [pc, #240]	@ (8000e7c <MX_GPIO_Init+0x328>)
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4837      	ldr	r0, [pc, #220]	@ (8000e74 <MX_GPIO_Init+0x320>)
 8000d98:	f002 f81c 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8000d9c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <MX_GPIO_Init+0x328>)
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4835      	ldr	r0, [pc, #212]	@ (8000e88 <MX_GPIO_Init+0x334>)
 8000db2:	f002 f80f 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8000db6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482b      	ldr	r0, [pc, #172]	@ (8000e78 <MX_GPIO_Init+0x324>)
 8000dcc:	f002 f802 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8000dd0:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <MX_GPIO_Init+0x328>)
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4824      	ldr	r0, [pc, #144]	@ (8000e78 <MX_GPIO_Init+0x324>)
 8000de6:	f001 fff5 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 8000dea:	f240 1301 	movw	r3, #257	@ 0x101
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df0:	2303      	movs	r3, #3
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4823      	ldr	r0, [pc, #140]	@ (8000e8c <MX_GPIO_Init+0x338>)
 8000e00:	f001 ffe8 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 8000e04:	230c      	movs	r3, #12
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	481e      	ldr	r0, [pc, #120]	@ (8000e90 <MX_GPIO_Init+0x33c>)
 8000e18:	f001 ffdc 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4810      	ldr	r0, [pc, #64]	@ (8000e78 <MX_GPIO_Init+0x324>)
 8000e36:	f001 ffcd 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <MX_GPIO_Init+0x328>)
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <MX_GPIO_Init+0x330>)
 8000e50:	f001 ffc0 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8000e54:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e66:	e015      	b.n	8000e94 <MX_GPIO_Init+0x340>
 8000e68:	46020c00 	.word	0x46020c00
 8000e6c:	42021c00 	.word	0x42021c00
 8000e70:	42022000 	.word	0x42022000
 8000e74:	42021000 	.word	0x42021000
 8000e78:	42021400 	.word	0x42021400
 8000e7c:	10110000 	.word	0x10110000
 8000e80:	42021800 	.word	0x42021800
 8000e84:	42020c00 	.word	0x42020c00
 8000e88:	42020400 	.word	0x42020400
 8000e8c:	42020000 	.word	0x42020000
 8000e90:	42020800 	.word	0x42020800
 8000e94:	4619      	mov	r1, r3
 8000e96:	4842      	ldr	r0, [pc, #264]	@ (8000fa0 <MX_GPIO_Init+0x44c>)
 8000e98:	f001 ff9c 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8000e9c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	483c      	ldr	r0, [pc, #240]	@ (8000fa4 <MX_GPIO_Init+0x450>)
 8000eb2:	f001 ff8f 	bl	8002dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2107      	movs	r1, #7
 8000eba:	200b      	movs	r0, #11
 8000ebc:	f000 ff54 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ec0:	200b      	movs	r0, #11
 8000ec2:	f000 ff6b 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2107      	movs	r1, #7
 8000eca:	200c      	movs	r0, #12
 8000ecc:	f000 ff4c 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ed0:	200c      	movs	r0, #12
 8000ed2:	f000 ff63 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2107      	movs	r1, #7
 8000eda:	200d      	movs	r0, #13
 8000edc:	f000 ff44 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ee0:	200d      	movs	r0, #13
 8000ee2:	f000 ff5b 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2107      	movs	r1, #7
 8000eea:	200e      	movs	r0, #14
 8000eec:	f000 ff3c 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ef0:	200e      	movs	r0, #14
 8000ef2:	f000 ff53 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2107      	movs	r1, #7
 8000efa:	200f      	movs	r0, #15
 8000efc:	f000 ff34 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f00:	200f      	movs	r0, #15
 8000f02:	f000 ff4b 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2107      	movs	r1, #7
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f000 ff2c 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000f10:	2010      	movs	r0, #16
 8000f12:	f000 ff43 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2107      	movs	r1, #7
 8000f1a:	2011      	movs	r0, #17
 8000f1c:	f000 ff24 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8000f20:	2011      	movs	r0, #17
 8000f22:	f000 ff3b 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2107      	movs	r1, #7
 8000f2a:	2012      	movs	r0, #18
 8000f2c:	f000 ff1c 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8000f30:	2012      	movs	r0, #18
 8000f32:	f000 ff33 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2107      	movs	r1, #7
 8000f3a:	2013      	movs	r0, #19
 8000f3c:	f000 ff14 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8000f40:	2013      	movs	r0, #19
 8000f42:	f000 ff2b 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2107      	movs	r1, #7
 8000f4a:	2014      	movs	r0, #20
 8000f4c:	f000 ff0c 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8000f50:	2014      	movs	r0, #20
 8000f52:	f000 ff23 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2107      	movs	r1, #7
 8000f5a:	2015      	movs	r0, #21
 8000f5c:	f000 ff04 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000f60:	2015      	movs	r0, #21
 8000f62:	f000 ff1b 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2107      	movs	r1, #7
 8000f6a:	2016      	movs	r0, #22
 8000f6c:	f000 fefc 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000f70:	2016      	movs	r0, #22
 8000f72:	f000 ff13 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2018      	movs	r0, #24
 8000f7c:	f000 fef4 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000f80:	2018      	movs	r0, #24
 8000f82:	f000 ff0b 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2107      	movs	r1, #7
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 feec 	bl	8001d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000f90:	2019      	movs	r0, #25
 8000f92:	f000 ff03 	bl	8001d9c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f96:	bf00      	nop
 8000f98:	3738      	adds	r7, #56	@ 0x38
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	42020400 	.word	0x42020400
 8000fa4:	42021000 	.word	0x42021000

08000fa8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */

// This callback is executed by the HAL driver when the SPI DMA transfer is complete
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_SPI_TxRxCpltCallback+0x2e>
        // Pull CS Pin (PF12) HIGH to de-select the sensor
        HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fc0:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000fc2:	f002 f8e7 	bl	8003194 <HAL_GPIO_WritePin>
        spi_data_ready_flag = 1;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_SPI_TxRxCpltCallback+0x40>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
        dbg_dma_callbacks++; // <-- UPDATE DEBUG VARIABLE
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <HAL_SPI_TxRxCpltCallback+0x44>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_SPI_TxRxCpltCallback+0x44>)
 8000fd4:	6013      	str	r3, [r2, #0]
    }
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40003800 	.word	0x40003800
 8000fe4:	42021400 	.word	0x42021400
 8000fe8:	2000047b 	.word	0x2000047b
 8000fec:	200004e4 	.word	0x200004e4

08000ff0 <iis3dwb_write_reg>:

// Function to write to a single sensor register
void iis3dwb_write_reg(uint8_t reg, uint8_t value) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
    uint8_t command[2] = {reg, value};
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	733b      	strb	r3, [r7, #12]
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100e:	480a      	ldr	r0, [pc, #40]	@ (8001038 <iis3dwb_write_reg+0x48>)
 8001010:	f002 f8c0 	bl	8003194 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, command, 2, HAL_MAX_DELAY);
 8001014:	f107 010c 	add.w	r1, r7, #12
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	2202      	movs	r2, #2
 800101e:	4807      	ldr	r0, [pc, #28]	@ (800103c <iis3dwb_write_reg+0x4c>)
 8001020:	f006 fa6a 	bl	80074f8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <iis3dwb_write_reg+0x48>)
 800102c:	f002 f8b2 	bl	8003194 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	42021400 	.word	0x42021400
 800103c:	20000258 	.word	0x20000258

08001040 <iis3dwb_read_reg>:

// Function to read from sensor registers (blocking, used for init)
void iis3dwb_read_reg(uint8_t reg, uint8_t* data, uint16_t len) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	80bb      	strh	r3, [r7, #4]
    uint8_t reg_with_read_flag = reg | READ_FLAG;
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001060:	480d      	ldr	r0, [pc, #52]	@ (8001098 <iis3dwb_read_reg+0x58>)
 8001062:	f002 f897 	bl	8003194 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &reg_with_read_flag, 1, HAL_MAX_DELAY);
 8001066:	f107 010f 	add.w	r1, r7, #15
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	2201      	movs	r2, #1
 8001070:	480a      	ldr	r0, [pc, #40]	@ (800109c <iis3dwb_read_reg+0x5c>)
 8001072:	f006 fa41 	bl	80074f8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, data, len, HAL_MAX_DELAY);
 8001076:	88ba      	ldrh	r2, [r7, #4]
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	4807      	ldr	r0, [pc, #28]	@ (800109c <iis3dwb_read_reg+0x5c>)
 8001080:	f006 fc4e 	bl	8007920 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800108a:	4803      	ldr	r0, [pc, #12]	@ (8001098 <iis3dwb_read_reg+0x58>)
 800108c:	f002 f882 	bl	8003194 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	42021400 	.word	0x42021400
 800109c:	20000258 	.word	0x20000258

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <Error_Handler+0x8>

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_MspInit+0x38>)
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010b8:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_MspInit+0x38>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <HAL_MspInit+0x38>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 80010d0:	f002 f940 	bl	8003354 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 80010d4:	f002 f94e 	bl	8003374 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 80010d8:	f002 f95c 	bl	8003394 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	46020c00 	.word	0x46020c00

080010e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0c4      	sub	sp, #272	@ 0x110
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800110c:	22c8      	movs	r2, #200	@ 0xc8
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f008 faed 	bl	80096f0 <memset>
  if(hspi->Instance==SPI1)
 8001116:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800111a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4ab0      	ldr	r2, [pc, #704]	@ (80013e4 <HAL_SPI_MspInit+0x2fc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d147      	bne.n	80011b8 <HAL_SPI_MspInit+0xd0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001128:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001134:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001138:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001140:	4618      	mov	r0, r3
 8001142:	f003 fbe3 	bl	800490c <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 800114c:	f7ff ffa8 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001150:	4ba5      	ldr	r3, [pc, #660]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001156:	4aa4      	ldr	r2, [pc, #656]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800115c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001160:	4ba1      	ldr	r3, [pc, #644]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800116e:	4b9e      	ldr	r3, [pc, #632]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001174:	4a9c      	ldr	r2, [pc, #624]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800117e:	4b9a      	ldr	r3, [pc, #616]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 800118c:	231c      	movs	r3, #28
 800118e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a4:	2305      	movs	r3, #5
 80011a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011aa:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80011ae:	4619      	mov	r1, r3
 80011b0:	488e      	ldr	r0, [pc, #568]	@ (80013ec <HAL_SPI_MspInit+0x304>)
 80011b2:	f001 fe0f 	bl	8002dd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011b6:	e1d3      	b.n	8001560 <HAL_SPI_MspInit+0x478>
  else if(hspi->Instance==SPI2)
 80011b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a8a      	ldr	r2, [pc, #552]	@ (80013f0 <HAL_SPI_MspInit+0x308>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	f040 8120 	bne.w	800140c <HAL_SPI_MspInit+0x324>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fb92 	bl	800490c <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 80011ee:	f7ff ff57 	bl	80010a0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011f2:	4b7d      	ldr	r3, [pc, #500]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 80011f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011f8:	4a7b      	ldr	r2, [pc, #492]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001202:	4b79      	ldr	r3, [pc, #484]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001210:	4b75      	ldr	r3, [pc, #468]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001216:	4a74      	ldr	r2, [pc, #464]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001220:	4b71      	ldr	r3, [pc, #452]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b6e      	ldr	r3, [pc, #440]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001234:	4a6c      	ldr	r2, [pc, #432]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800123e:	4b6a      	ldr	r3, [pc, #424]	@ (80013e8 <HAL_SPI_MspInit+0x300>)
 8001240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800124c:	230a      	movs	r3, #10
 800124e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001264:	2305      	movs	r3, #5
 8001266:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800126a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800126e:	4619      	mov	r1, r3
 8001270:	4860      	ldr	r0, [pc, #384]	@ (80013f4 <HAL_SPI_MspInit+0x30c>)
 8001272:	f001 fdaf 	bl	8002dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001276:	2308      	movs	r3, #8
 8001278:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128e:	2305      	movs	r3, #5
 8001290:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001294:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001298:	4619      	mov	r1, r3
 800129a:	4857      	ldr	r0, [pc, #348]	@ (80013f8 <HAL_SPI_MspInit+0x310>)
 800129c:	f001 fd9a 	bl	8002dd4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80012a0:	4b56      	ldr	r3, [pc, #344]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012a2:	4a57      	ldr	r2, [pc, #348]	@ (8001400 <HAL_SPI_MspInit+0x318>)
 80012a4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 80012a6:	4b55      	ldr	r3, [pc, #340]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012a8:	2209      	movs	r2, #9
 80012aa:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80012ac:	4b53      	ldr	r3, [pc, #332]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b2:	4b52      	ldr	r3, [pc, #328]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 80012ba:	4b50      	ldr	r3, [pc, #320]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012bc:	2208      	movs	r2, #8
 80012be:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 80012c0:	4b4e      	ldr	r3, [pc, #312]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80012c6:	4b4d      	ldr	r3, [pc, #308]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80012cc:	4b4b      	ldr	r3, [pc, #300]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80012d2:	4b4a      	ldr	r3, [pc, #296]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012d8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80012da:	4b48      	ldr	r3, [pc, #288]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012dc:	2201      	movs	r2, #1
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 80012e0:	4b46      	ldr	r3, [pc, #280]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80012e6:	4b45      	ldr	r3, [pc, #276]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80012ec:	4b43      	ldr	r3, [pc, #268]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 80012f2:	4b42      	ldr	r3, [pc, #264]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80012f8:	4840      	ldr	r0, [pc, #256]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 80012fa:	f000 fe11 	bl	8001f20 <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8001304:	f7ff fecc 	bl	80010a0 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8001308:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800130c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a3a      	ldr	r2, [pc, #232]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 8001314:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001318:	4a38      	ldr	r2, [pc, #224]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 800131a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800131e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001326:	2110      	movs	r1, #16
 8001328:	4834      	ldr	r0, [pc, #208]	@ (80013fc <HAL_SPI_MspInit+0x314>)
 800132a:	f001 f9ad 	bl	8002688 <HAL_DMA_ConfigChannelAttributes>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_SPI_MspInit+0x250>
      Error_Handler();
 8001334:	f7ff feb4 	bl	80010a0 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 800133a:	4a33      	ldr	r2, [pc, #204]	@ (8001408 <HAL_SPI_MspInit+0x320>)
 800133c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001340:	2208      	movs	r2, #8
 8001342:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001344:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800134a:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8001350:	4b2c      	ldr	r3, [pc, #176]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 8001356:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001358:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800135c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800135e:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 800136c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001370:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001374:	2201      	movs	r2, #1
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001378:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 800137a:	2201      	movs	r2, #1
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001380:	2200      	movs	r2, #0
 8001382:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001384:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001386:	2200      	movs	r2, #0
 8001388:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 800138c:	2200      	movs	r2, #0
 800138e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001390:	481c      	ldr	r0, [pc, #112]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 8001392:	f000 fdc5 	bl	8001f20 <HAL_DMA_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_SPI_MspInit+0x2b8>
      Error_Handler();
 800139c:	f7ff fe80 	bl	80010a0 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 80013a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a16      	ldr	r2, [pc, #88]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 80013b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80013be:	2110      	movs	r1, #16
 80013c0:	4810      	ldr	r0, [pc, #64]	@ (8001404 <HAL_SPI_MspInit+0x31c>)
 80013c2:	f001 f961 	bl	8002688 <HAL_DMA_ConfigChannelAttributes>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 80013cc:	f7ff fe68 	bl	80010a0 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	203c      	movs	r0, #60	@ 0x3c
 80013d6:	f000 fcc7 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013da:	203c      	movs	r0, #60	@ 0x3c
 80013dc:	f000 fcde 	bl	8001d9c <HAL_NVIC_EnableIRQ>
}
 80013e0:	e0be      	b.n	8001560 <HAL_SPI_MspInit+0x478>
 80013e2:	bf00      	nop
 80013e4:	40013000 	.word	0x40013000
 80013e8:	46020c00 	.word	0x46020c00
 80013ec:	42021800 	.word	0x42021800
 80013f0:	40003800 	.word	0x40003800
 80013f4:	42022000 	.word	0x42022000
 80013f8:	42020c00 	.word	0x42020c00
 80013fc:	200002e8 	.word	0x200002e8
 8001400:	400200d0 	.word	0x400200d0
 8001404:	20000360 	.word	0x20000360
 8001408:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 800140c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001410:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a54      	ldr	r2, [pc, #336]	@ (800156c <HAL_SPI_MspInit+0x484>)
 800141a:	4293      	cmp	r3, r2
 800141c:	f040 80a0 	bne.w	8001560 <HAL_SPI_MspInit+0x478>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001420:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 800142c:	2310      	movs	r3, #16
 800142e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001432:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fa68 	bl	800490c <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_SPI_MspInit+0x35e>
      Error_Handler();
 8001442:	f7ff fe2d 	bl	80010a0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001446:	4b4a      	ldr	r3, [pc, #296]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 8001448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800144c:	4a48      	ldr	r2, [pc, #288]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 800144e:	f043 0320 	orr.w	r3, r3, #32
 8001452:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001456:	4b46      	ldr	r3, [pc, #280]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 8001458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001464:	4b42      	ldr	r3, [pc, #264]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 8001466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800146a:	4a41      	ldr	r2, [pc, #260]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 800146c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001470:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001474:	4b3e      	ldr	r3, [pc, #248]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b3b      	ldr	r3, [pc, #236]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 8001484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001488:	4a39      	ldr	r2, [pc, #228]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 8001494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001498:	f003 0201 	and.w	r2, r3, #1
 800149c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014aa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014ae:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <HAL_SPI_MspInit+0x488>)
 80014c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c6:	f003 0202 	and.w	r2, r3, #2
 80014ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014dc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f8:	2306      	movs	r3, #6
 80014fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fe:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001502:	4619      	mov	r1, r3
 8001504:	481b      	ldr	r0, [pc, #108]	@ (8001574 <HAL_SPI_MspInit+0x48c>)
 8001506:	f001 fc65 	bl	8002dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800150a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800150e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001524:	2306      	movs	r3, #6
 8001526:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800152e:	4619      	mov	r1, r3
 8001530:	4811      	ldr	r0, [pc, #68]	@ (8001578 <HAL_SPI_MspInit+0x490>)
 8001532:	f001 fc4f 	bl	8002dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2330      	movs	r3, #48	@ 0x30
 8001538:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800154e:	2306      	movs	r3, #6
 8001550:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001558:	4619      	mov	r1, r3
 800155a:	4808      	ldr	r0, [pc, #32]	@ (800157c <HAL_SPI_MspInit+0x494>)
 800155c:	f001 fc3a 	bl	8002dd4 <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	46002000 	.word	0x46002000
 8001570:	46020c00 	.word	0x46020c00
 8001574:	42021800 	.word	0x42021800
 8001578:	42020000 	.word	0x42020000
 800157c:	42020400 	.word	0x42020400

08001580 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0c0      	sub	sp, #256	@ 0x100
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	22c8      	movs	r2, #200	@ 0xc8
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 f8a5 	bl	80096f0 <memset>
  if(huart->Instance==USART2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001724 <HAL_UART_MspInit+0x1a4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d145      	bne.n	800163c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015b0:	f04f 0202 	mov.w	r2, #2
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 f9a1 	bl	800490c <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80015d0:	f7ff fd66 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d4:	4b54      	ldr	r3, [pc, #336]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80015d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015da:	4a53      	ldr	r2, [pc, #332]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015e4:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80015e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80015f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 8001604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8001610:	2370      	movs	r3, #112	@ 0x70
 8001612:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
 800162a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001632:	4619      	mov	r1, r3
 8001634:	483d      	ldr	r0, [pc, #244]	@ (800172c <HAL_UART_MspInit+0x1ac>)
 8001636:	f001 fbcd 	bl	8002dd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800163a:	e06e      	b.n	800171a <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a3b      	ldr	r2, [pc, #236]	@ (8001730 <HAL_UART_MspInit+0x1b0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d169      	bne.n	800171a <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001646:	f04f 0204 	mov.w	r2, #4
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f956 	bl	800490c <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0xea>
      Error_Handler();
 8001666:	f7ff fd1b 	bl	80010a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800166a:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 800166c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001670:	4a2d      	ldr	r2, [pc, #180]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 8001672:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001676:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 800167c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 800168a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168e:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001698:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 800169a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80016a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <HAL_UART_MspInit+0x1a8>)
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80016c4:	23a0      	movs	r3, #160	@ 0xa0
 80016c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80016e6:	4619      	mov	r1, r3
 80016e8:	4812      	ldr	r0, [pc, #72]	@ (8001734 <HAL_UART_MspInit+0x1b4>)
 80016ea:	f001 fb73 	bl	8002dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80016ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001708:	2307      	movs	r3, #7
 800170a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <HAL_UART_MspInit+0x1ac>)
 8001716:	f001 fb5d 	bl	8002dd4 <HAL_GPIO_Init>
}
 800171a:	bf00      	nop
 800171c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40004400 	.word	0x40004400
 8001728:	46020c00 	.word	0x46020c00
 800172c:	42020c00 	.word	0x42020c00
 8001730:	40004800 	.word	0x40004800
 8001734:	42020000 	.word	0x42020000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f9ef 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}

08001796 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 800179a:	2001      	movs	r0, #1
 800179c:	f001 fd12 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 80017a8:	2002      	movs	r0, #2
 80017aa:	f001 fd0b 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 80017b6:	2004      	movs	r0, #4
 80017b8:	f001 fd04 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 80017c4:	2008      	movs	r0, #8
 80017c6:	f001 fcfd 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}

080017ce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 80017d2:	2010      	movs	r0, #16
 80017d4:	f001 fcf6 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 80017e0:	2020      	movs	r0, #32
 80017e2:	f001 fcef 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}

080017ea <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 80017ee:	2040      	movs	r0, #64	@ 0x40
 80017f0:	f001 fce8 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 80017fc:	2080      	movs	r0, #128	@ 0x80
 80017fe:	f001 fce1 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 800180a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800180e:	f001 fcd9 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 800181a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800181e:	f001 fcd1 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}

08001826 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 800182a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800182e:	f001 fcc9 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}

08001836 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 800183a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800183e:	f001 fcc1 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}

08001846 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 800184a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800184e:	f001 fcb9 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800185a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800185e:	f001 fcb1 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <GPDMA1_Channel0_IRQHandler+0x10>)
 800186e:	f000 fd9e 	bl	80023ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000360 	.word	0x20000360

0800187c <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <GPDMA1_Channel1_IRQHandler+0x10>)
 8001882:	f000 fd94 	bl	80023ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200002e8 	.word	0x200002e8

08001890 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001896:	f000 fd8a 	bl	80023ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200001e0 	.word	0x200001e0

080018a4 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <GPDMA1_Channel3_IRQHandler+0x10>)
 80018aa:	f000 fd80 	bl	80023ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000168 	.word	0x20000168

080018b8 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <GPDMA1_Channel4_IRQHandler+0x10>)
 80018be:	f000 fd76 	bl	80023ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200000f0 	.word	0x200000f0

080018cc <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <GPDMA1_Channel5_IRQHandler+0x10>)
 80018d2:	f000 fd6c 	bl	80023ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000078 	.word	0x20000078

080018e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <SPI2_IRQHandler+0x10>)
 80018e6:	f006 fd8b 	bl	8008400 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000258 	.word	0x20000258

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f007 feec 	bl	8009700 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200c0000 	.word	0x200c0000
 8001954:	00000400 	.word	0x00000400
 8001958:	200004f0 	.word	0x200004f0
 800195c:	20000640 	.word	0x20000640

08001960 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001964:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <SystemInit+0x68>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196a:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <SystemInit+0x68>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <SystemInit+0x6c>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <SystemInit+0x6c>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <SystemInit+0x6c>)
 8001982:	2200      	movs	r2, #0
 8001984:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <SystemInit+0x6c>)
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <SystemInit+0x6c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <SystemInit+0x6c>)
 8001992:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001996:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800199a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <SystemInit+0x6c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <SystemInit+0x6c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a09      	ldr	r2, [pc, #36]	@ (80019cc <SystemInit+0x6c>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <SystemInit+0x6c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <SystemInit+0x68>)
 80019b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019ba:	609a      	str	r2, [r3, #8]
  #endif
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	46020c00 	.word	0x46020c00

080019d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a08 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019d4:	f7ff ffc4 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019da:	e003      	b.n	80019e4 <LoopCopyDataInit>

080019dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019e2:	3104      	adds	r1, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019e4:	480a      	ldr	r0, [pc, #40]	@ (8001a10 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019ec:	d3f6      	bcc.n	80019dc <CopyDataInit>
	ldr	r2, =_sbss
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019f0:	e002      	b.n	80019f8 <LoopFillZerobss>

080019f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019f4:	f842 3b04 	str.w	r3, [r2], #4

080019f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <LoopForever+0x16>)
	cmp	r2, r3
 80019fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019fc:	d3f9      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fe:	f007 fe85 	bl	800970c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a02:	f7fe fdff 	bl	8000604 <main>

08001a06 <LoopForever>:

LoopForever:
    b LoopForever
 8001a06:	e7fe      	b.n	8001a06 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a08:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a0c:	0800a200 	.word	0x0800a200
	ldr	r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a14:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001a18:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001a1c:	20000640 	.word	0x20000640

08001a20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_Init+0x50>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	@ (8001a74 <HAL_Init+0x50>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f98c 	bl	8001d52 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a3a:	f002 fd89 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <HAL_Init+0x54>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <HAL_Init+0x58>)
 8001a4a:	5ccb      	ldrb	r3, [r1, r3]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <HAL_Init+0x5c>)
 8001a52:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a54:	2004      	movs	r0, #4
 8001a56:	f000 f9d1 	bl	8001dfc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 f812 	bl	8001a84 <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e002      	b.n	8001a70 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6a:	f7ff fb1f 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40022000 	.word	0x40022000
 8001a78:	46020c00 	.word	0x46020c00
 8001a7c:	0800a0bc 	.word	0x0800a0bc
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a90:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <HAL_InitTick+0xdc>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e05c      	b.n	8001b56 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001a9c:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_InitTick+0xe0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <HAL_InitTick+0xe4>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <HAL_InitTick+0xdc>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e037      	b.n	8001b32 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001ac2:	f000 f9f3 	bl	8001eac <HAL_SYSTICK_GetCLKSourceConfig>
 8001ac6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d023      	beq.n	8001b16 <HAL_InitTick+0x92>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d82d      	bhi.n	8001b30 <HAL_InitTick+0xac>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_InitTick+0x5e>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d00d      	beq.n	8001afc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001ae0:	e026      	b.n	8001b30 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <HAL_InitTick+0xe4>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_InitTick+0xdc>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	60fb      	str	r3, [r7, #12]
        break;
 8001afa:	e01a      	b.n	8001b32 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001afc:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_InitTick+0xdc>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b0a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	60fb      	str	r3, [r7, #12]
        break;
 8001b14:	e00d      	b.n	8001b32 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_InitTick+0xdc>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	60fb      	str	r3, [r7, #12]
        break;
 8001b2e:	e000      	b.n	8001b32 <HAL_InitTick+0xae>
        break;
 8001b30:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f940 	bl	8001db8 <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e009      	b.n	8001b56 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b42:	2200      	movs	r2, #0
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4a:	f000 f90d 	bl	8001d68 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001b4e:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_InitTick+0xe8>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008
 8001b64:	e000e010 	.word	0xe000e010
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	200004f4 	.word	0x200004f4

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200004f4 	.word	0x200004f4

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	@ (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	@ (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ff4c 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d76:	f7ff ff63 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001d7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	6978      	ldr	r0, [r7, #20]
 8001d82:	f7ff ffb3 	bl	8001cec <NVIC_EncodePriority>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff82 	bl	8001c98 <__NVIC_SetPriority>
}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff56 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00d      	b.n	8001dea <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_SYSTICK_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_SYSTICK_Config+0x40>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_SYSTICK_Config+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <HAL_SYSTICK_Config+0x40>)
 8001de2:	f043 0303 	orr.w	r3, r3, #3
 8001de6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d844      	bhi.n	8001e94 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e10 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e10:	08001e33 	.word	0x08001e33
 8001e14:	08001e51 	.word	0x08001e51
 8001e18:	08001e73 	.word	0x08001e73
 8001e1c:	08001e95 	.word	0x08001e95
 8001e20:	08001e25 	.word	0x08001e25
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6013      	str	r3, [r2, #0]
      break;
 8001e30:	e031      	b.n	8001e96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e46:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e4e:	e022      	b.n	8001e96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a13      	ldr	r2, [pc, #76]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e62:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e66:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e70:	e011      	b.n	8001e96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e84:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e92:	e000      	b.n	8001e96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001e94:	bf00      	nop
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010
 8001ea8:	46020c00 	.word	0x46020c00

08001eac <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	e021      	b.n	8001f08 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001ece:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ed6:	d011      	beq.n	8001efc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ede:	d810      	bhi.n	8001f02 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eec:	d003      	beq.n	8001ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001eee:	e008      	b.n	8001f02 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
        break;
 8001ef4:	e008      	b.n	8001f08 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
        break;
 8001efa:	e005      	b.n	8001f08 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001efc:	2302      	movs	r3, #2
 8001efe:	607b      	str	r3, [r7, #4]
        break;
 8001f00:	e002      	b.n	8001f08 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
        break;
 8001f06:	bf00      	nop
    }
  }
  return systick_source;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010
 8001f1c:	46020c00 	.word	0x46020c00

08001f20 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff fe36 	bl	8001b98 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0f0      	b.n	800211a <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a79      	ldr	r2, [pc, #484]	@ (8002124 <HAL_DMA_Init+0x204>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f000 809f 	beq.w	8002082 <HAL_DMA_Init+0x162>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a77      	ldr	r2, [pc, #476]	@ (8002128 <HAL_DMA_Init+0x208>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	f000 8099 	beq.w	8002082 <HAL_DMA_Init+0x162>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a75      	ldr	r2, [pc, #468]	@ (800212c <HAL_DMA_Init+0x20c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	f000 8093 	beq.w	8002082 <HAL_DMA_Init+0x162>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a73      	ldr	r2, [pc, #460]	@ (8002130 <HAL_DMA_Init+0x210>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	f000 808d 	beq.w	8002082 <HAL_DMA_Init+0x162>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a71      	ldr	r2, [pc, #452]	@ (8002134 <HAL_DMA_Init+0x214>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	f000 8087 	beq.w	8002082 <HAL_DMA_Init+0x162>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6f      	ldr	r2, [pc, #444]	@ (8002138 <HAL_DMA_Init+0x218>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	f000 8081 	beq.w	8002082 <HAL_DMA_Init+0x162>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6d      	ldr	r2, [pc, #436]	@ (800213c <HAL_DMA_Init+0x21c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d07b      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6c      	ldr	r2, [pc, #432]	@ (8002140 <HAL_DMA_Init+0x220>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d076      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6a      	ldr	r2, [pc, #424]	@ (8002144 <HAL_DMA_Init+0x224>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d071      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a69      	ldr	r2, [pc, #420]	@ (8002148 <HAL_DMA_Init+0x228>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d06c      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a67      	ldr	r2, [pc, #412]	@ (800214c <HAL_DMA_Init+0x22c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d067      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a66      	ldr	r2, [pc, #408]	@ (8002150 <HAL_DMA_Init+0x230>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d062      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a64      	ldr	r2, [pc, #400]	@ (8002154 <HAL_DMA_Init+0x234>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d05d      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a63      	ldr	r2, [pc, #396]	@ (8002158 <HAL_DMA_Init+0x238>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d058      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a61      	ldr	r2, [pc, #388]	@ (800215c <HAL_DMA_Init+0x23c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d053      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a60      	ldr	r2, [pc, #384]	@ (8002160 <HAL_DMA_Init+0x240>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d04e      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8002164 <HAL_DMA_Init+0x244>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d049      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	@ (8002168 <HAL_DMA_Init+0x248>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d044      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5b      	ldr	r2, [pc, #364]	@ (800216c <HAL_DMA_Init+0x24c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d03f      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a5a      	ldr	r2, [pc, #360]	@ (8002170 <HAL_DMA_Init+0x250>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03a      	beq.n	8002082 <HAL_DMA_Init+0x162>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a58      	ldr	r2, [pc, #352]	@ (8002174 <HAL_DMA_Init+0x254>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d035      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a57      	ldr	r2, [pc, #348]	@ (8002178 <HAL_DMA_Init+0x258>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d030      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a55      	ldr	r2, [pc, #340]	@ (800217c <HAL_DMA_Init+0x25c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02b      	beq.n	8002082 <HAL_DMA_Init+0x162>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a54      	ldr	r2, [pc, #336]	@ (8002180 <HAL_DMA_Init+0x260>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d026      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_DMA_Init+0x264>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d021      	beq.n	8002082 <HAL_DMA_Init+0x162>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a51      	ldr	r2, [pc, #324]	@ (8002188 <HAL_DMA_Init+0x268>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01c      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a4f      	ldr	r2, [pc, #316]	@ (800218c <HAL_DMA_Init+0x26c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d017      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a4e      	ldr	r2, [pc, #312]	@ (8002190 <HAL_DMA_Init+0x270>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d012      	beq.n	8002082 <HAL_DMA_Init+0x162>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a4c      	ldr	r2, [pc, #304]	@ (8002194 <HAL_DMA_Init+0x274>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a4b      	ldr	r2, [pc, #300]	@ (8002198 <HAL_DMA_Init+0x278>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d008      	beq.n	8002082 <HAL_DMA_Init+0x162>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a49      	ldr	r2, [pc, #292]	@ (800219c <HAL_DMA_Init+0x27c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d003      	beq.n	8002082 <HAL_DMA_Init+0x162>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a48      	ldr	r2, [pc, #288]	@ (80021a0 <HAL_DMA_Init+0x280>)
 8002080:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10e      	bne.n	80020b4 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0206 	orr.w	r2, r2, #6
 80020ca:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80020cc:	e00f      	b.n	80020ee <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80020ce:	f7ff fd63 	bl	8001b98 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d908      	bls.n	80020ee <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2210      	movs	r2, #16
 80020e0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e015      	b.n	800211a <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e8      	bne.n	80020ce <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fb25 	bl	800274c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020050 	.word	0x40020050
 8002128:	50020050 	.word	0x50020050
 800212c:	400200d0 	.word	0x400200d0
 8002130:	500200d0 	.word	0x500200d0
 8002134:	40020150 	.word	0x40020150
 8002138:	50020150 	.word	0x50020150
 800213c:	400201d0 	.word	0x400201d0
 8002140:	500201d0 	.word	0x500201d0
 8002144:	40020250 	.word	0x40020250
 8002148:	50020250 	.word	0x50020250
 800214c:	400202d0 	.word	0x400202d0
 8002150:	500202d0 	.word	0x500202d0
 8002154:	40020350 	.word	0x40020350
 8002158:	50020350 	.word	0x50020350
 800215c:	400203d0 	.word	0x400203d0
 8002160:	500203d0 	.word	0x500203d0
 8002164:	40020450 	.word	0x40020450
 8002168:	50020450 	.word	0x50020450
 800216c:	400204d0 	.word	0x400204d0
 8002170:	500204d0 	.word	0x500204d0
 8002174:	40020550 	.word	0x40020550
 8002178:	50020550 	.word	0x50020550
 800217c:	400205d0 	.word	0x400205d0
 8002180:	500205d0 	.word	0x500205d0
 8002184:	40020650 	.word	0x40020650
 8002188:	50020650 	.word	0x50020650
 800218c:	400206d0 	.word	0x400206d0
 8002190:	500206d0 	.word	0x500206d0
 8002194:	40020750 	.word	0x40020750
 8002198:	50020750 	.word	0x50020750
 800219c:	400207d0 	.word	0x400207d0
 80021a0:	500207d0 	.word	0x500207d0

080021a4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e04f      	b.n	800225c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_DMA_Start_IT+0x26>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e048      	b.n	800225c <HAL_DMA_Start_IT+0xb8>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d136      	bne.n	800224c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fa84 	bl	8002700 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002206:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002236:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e007      	b.n	800225c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800226c:	f7ff fc94 	bl	8001b98 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e06b      	b.n	8002354 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d008      	beq.n	800229a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e05c      	b.n	8002354 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0204 	orr.w	r2, r2, #4
 80022a8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2205      	movs	r2, #5
 80022ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80022b2:	e020      	b.n	80022f6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80022b4:	f7ff fc70 	bl	8001b98 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d919      	bls.n	80022f6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2203      	movs	r2, #3
 80022d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e6:	2201      	movs	r2, #1
 80022e8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e02e      	b.n	8002354 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0d7      	beq.n	80022b4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0202 	orr.w	r2, r2, #2
 8002312:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2204      	movs	r2, #4
 8002318:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002324:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233e:	2201      	movs	r2, #1
 8002340:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e019      	b.n	80023a2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d004      	beq.n	8002384 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e00e      	b.n	80023a2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2204      	movs	r2, #4
 8002388:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80023be:	f023 030f 	bic.w	r3, r3, #15
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	3b50      	subs	r3, #80	@ 0x50
 80023ce:	09db      	lsrs	r3, r3, #7
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2201      	movs	r2, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 813b 	beq.w	8002664 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d011      	beq.n	8002420 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002412:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002444:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	f043 0202 	orr.w	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d011      	beq.n	8002484 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002476:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	f043 0204 	orr.w	r2, r3, #4
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d011      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024a8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	f043 0208 	orr.w	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024da:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d04c      	beq.n	8002594 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d045      	beq.n	8002594 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002510:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b04      	cmp	r3, #4
 800251c:	d12e      	bne.n	800257c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800252c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0202 	orr.w	r2, r2, #2
 800253c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002556:	2201      	movs	r2, #1
 8002558:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d07a      	beq.n	8002668 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
        }

        return;
 800257a:	e075      	b.n	8002668 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2205      	movs	r2, #5
 8002580:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d039      	beq.n	8002616 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d032      	beq.n	8002616 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d012      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	2201      	movs	r2, #1
 80025de:	731a      	strb	r2, [r3, #12]
 80025e0:	e008      	b.n	80025f4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d103      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80025fc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	2b00      	cmp	r3, #0
 800261c:	d025      	beq.n	800266a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0202 	orr.w	r2, r2, #2
 800262c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	2201      	movs	r2, #1
 8002648:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
 8002662:	e002      	b.n	800266a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002664:	bf00      	nop
 8002666:	e000      	b.n	800266a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002668:	bf00      	nop
    }
  }
}
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e02b      	b.n	80026f4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80026a4:	f023 030f 	bic.w	r3, r3, #15
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b2:	3b50      	subs	r3, #80	@ 0x50
 80026b4:	09db      	lsrs	r3, r3, #7
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2201      	movs	r2, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d012      	beq.n	80026f2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f003 0311 	and.w	r3, r3, #17
 80026d2:	2b11      	cmp	r3, #17
 80026d4:	d106      	bne.n	80026e4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e006      	b.n	80026f2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	401a      	ands	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b291      	uxth	r1, r2
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800272c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	430a      	orrs	r2, r1
 800276c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a53      	ldr	r2, [pc, #332]	@ (80028d8 <DMA_Init+0x18c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	f000 80a0 	beq.w	80028d2 <DMA_Init+0x186>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a51      	ldr	r2, [pc, #324]	@ (80028dc <DMA_Init+0x190>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f000 809a 	beq.w	80028d2 <DMA_Init+0x186>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a4f      	ldr	r2, [pc, #316]	@ (80028e0 <DMA_Init+0x194>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f000 8094 	beq.w	80028d2 <DMA_Init+0x186>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4d      	ldr	r2, [pc, #308]	@ (80028e4 <DMA_Init+0x198>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f000 808e 	beq.w	80028d2 <DMA_Init+0x186>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a4b      	ldr	r2, [pc, #300]	@ (80028e8 <DMA_Init+0x19c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	f000 8088 	beq.w	80028d2 <DMA_Init+0x186>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a49      	ldr	r2, [pc, #292]	@ (80028ec <DMA_Init+0x1a0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	f000 8082 	beq.w	80028d2 <DMA_Init+0x186>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a47      	ldr	r2, [pc, #284]	@ (80028f0 <DMA_Init+0x1a4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d07c      	beq.n	80028d2 <DMA_Init+0x186>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a45      	ldr	r2, [pc, #276]	@ (80028f4 <DMA_Init+0x1a8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d077      	beq.n	80028d2 <DMA_Init+0x186>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a44      	ldr	r2, [pc, #272]	@ (80028f8 <DMA_Init+0x1ac>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d072      	beq.n	80028d2 <DMA_Init+0x186>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a42      	ldr	r2, [pc, #264]	@ (80028fc <DMA_Init+0x1b0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d06d      	beq.n	80028d2 <DMA_Init+0x186>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a41      	ldr	r2, [pc, #260]	@ (8002900 <DMA_Init+0x1b4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d068      	beq.n	80028d2 <DMA_Init+0x186>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3f      	ldr	r2, [pc, #252]	@ (8002904 <DMA_Init+0x1b8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d063      	beq.n	80028d2 <DMA_Init+0x186>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3e      	ldr	r2, [pc, #248]	@ (8002908 <DMA_Init+0x1bc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d05e      	beq.n	80028d2 <DMA_Init+0x186>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3c      	ldr	r2, [pc, #240]	@ (800290c <DMA_Init+0x1c0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d059      	beq.n	80028d2 <DMA_Init+0x186>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3b      	ldr	r2, [pc, #236]	@ (8002910 <DMA_Init+0x1c4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d054      	beq.n	80028d2 <DMA_Init+0x186>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a39      	ldr	r2, [pc, #228]	@ (8002914 <DMA_Init+0x1c8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d04f      	beq.n	80028d2 <DMA_Init+0x186>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a38      	ldr	r2, [pc, #224]	@ (8002918 <DMA_Init+0x1cc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d04a      	beq.n	80028d2 <DMA_Init+0x186>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a36      	ldr	r2, [pc, #216]	@ (800291c <DMA_Init+0x1d0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d045      	beq.n	80028d2 <DMA_Init+0x186>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a35      	ldr	r2, [pc, #212]	@ (8002920 <DMA_Init+0x1d4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d040      	beq.n	80028d2 <DMA_Init+0x186>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a33      	ldr	r2, [pc, #204]	@ (8002924 <DMA_Init+0x1d8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d03b      	beq.n	80028d2 <DMA_Init+0x186>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a32      	ldr	r2, [pc, #200]	@ (8002928 <DMA_Init+0x1dc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d036      	beq.n	80028d2 <DMA_Init+0x186>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a30      	ldr	r2, [pc, #192]	@ (800292c <DMA_Init+0x1e0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d031      	beq.n	80028d2 <DMA_Init+0x186>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2f      	ldr	r2, [pc, #188]	@ (8002930 <DMA_Init+0x1e4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d02c      	beq.n	80028d2 <DMA_Init+0x186>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2d      	ldr	r2, [pc, #180]	@ (8002934 <DMA_Init+0x1e8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d027      	beq.n	80028d2 <DMA_Init+0x186>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2c      	ldr	r2, [pc, #176]	@ (8002938 <DMA_Init+0x1ec>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <DMA_Init+0x186>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2a      	ldr	r2, [pc, #168]	@ (800293c <DMA_Init+0x1f0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01d      	beq.n	80028d2 <DMA_Init+0x186>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a29      	ldr	r2, [pc, #164]	@ (8002940 <DMA_Init+0x1f4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d018      	beq.n	80028d2 <DMA_Init+0x186>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a27      	ldr	r2, [pc, #156]	@ (8002944 <DMA_Init+0x1f8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <DMA_Init+0x186>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a26      	ldr	r2, [pc, #152]	@ (8002948 <DMA_Init+0x1fc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <DMA_Init+0x186>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a24      	ldr	r2, [pc, #144]	@ (800294c <DMA_Init+0x200>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <DMA_Init+0x186>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a23      	ldr	r2, [pc, #140]	@ (8002950 <DMA_Init+0x204>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <DMA_Init+0x186>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a21      	ldr	r2, [pc, #132]	@ (8002954 <DMA_Init+0x208>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d142      	bne.n	8002958 <DMA_Init+0x20c>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e041      	b.n	800295a <DMA_Init+0x20e>
 80028d6:	bf00      	nop
 80028d8:	40020050 	.word	0x40020050
 80028dc:	50020050 	.word	0x50020050
 80028e0:	400200d0 	.word	0x400200d0
 80028e4:	500200d0 	.word	0x500200d0
 80028e8:	40020150 	.word	0x40020150
 80028ec:	50020150 	.word	0x50020150
 80028f0:	400201d0 	.word	0x400201d0
 80028f4:	500201d0 	.word	0x500201d0
 80028f8:	40020250 	.word	0x40020250
 80028fc:	50020250 	.word	0x50020250
 8002900:	400202d0 	.word	0x400202d0
 8002904:	500202d0 	.word	0x500202d0
 8002908:	40020350 	.word	0x40020350
 800290c:	50020350 	.word	0x50020350
 8002910:	400203d0 	.word	0x400203d0
 8002914:	500203d0 	.word	0x500203d0
 8002918:	40020450 	.word	0x40020450
 800291c:	50020450 	.word	0x50020450
 8002920:	400204d0 	.word	0x400204d0
 8002924:	500204d0 	.word	0x500204d0
 8002928:	40020550 	.word	0x40020550
 800292c:	50020550 	.word	0x50020550
 8002930:	400205d0 	.word	0x400205d0
 8002934:	500205d0 	.word	0x500205d0
 8002938:	40020650 	.word	0x40020650
 800293c:	50020650 	.word	0x50020650
 8002940:	400206d0 	.word	0x400206d0
 8002944:	500206d0 	.word	0x500206d0
 8002948:	40020750 	.word	0x40020750
 800294c:	50020750 	.word	0x50020750
 8002950:	400207d0 	.word	0x400207d0
 8002954:	500207d0 	.word	0x500207d0
 8002958:	2300      	movs	r3, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	051b      	lsls	r3, r3, #20
 800296a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800296e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	3b01      	subs	r3, #1
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800297c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	430a      	orrs	r2, r1
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b6:	f040 80b0 	bne.w	8002b1a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a82      	ldr	r2, [pc, #520]	@ (8002bc8 <DMA_Init+0x47c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	f000 80a0 	beq.w	8002b06 <DMA_Init+0x3ba>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a80      	ldr	r2, [pc, #512]	@ (8002bcc <DMA_Init+0x480>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f000 809a 	beq.w	8002b06 <DMA_Init+0x3ba>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd0 <DMA_Init+0x484>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	f000 8094 	beq.w	8002b06 <DMA_Init+0x3ba>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd4 <DMA_Init+0x488>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	f000 808e 	beq.w	8002b06 <DMA_Init+0x3ba>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7a      	ldr	r2, [pc, #488]	@ (8002bd8 <DMA_Init+0x48c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	f000 8088 	beq.w	8002b06 <DMA_Init+0x3ba>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a78      	ldr	r2, [pc, #480]	@ (8002bdc <DMA_Init+0x490>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	f000 8082 	beq.w	8002b06 <DMA_Init+0x3ba>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a76      	ldr	r2, [pc, #472]	@ (8002be0 <DMA_Init+0x494>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d07c      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a74      	ldr	r2, [pc, #464]	@ (8002be4 <DMA_Init+0x498>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d077      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a73      	ldr	r2, [pc, #460]	@ (8002be8 <DMA_Init+0x49c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d072      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a71      	ldr	r2, [pc, #452]	@ (8002bec <DMA_Init+0x4a0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d06d      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a70      	ldr	r2, [pc, #448]	@ (8002bf0 <DMA_Init+0x4a4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d068      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf4 <DMA_Init+0x4a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d063      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf8 <DMA_Init+0x4ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d05e      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bfc <DMA_Init+0x4b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d059      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <DMA_Init+0x4b4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d054      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a68      	ldr	r2, [pc, #416]	@ (8002c04 <DMA_Init+0x4b8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d04f      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a67      	ldr	r2, [pc, #412]	@ (8002c08 <DMA_Init+0x4bc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d04a      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <DMA_Init+0x4c0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d045      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a64      	ldr	r2, [pc, #400]	@ (8002c10 <DMA_Init+0x4c4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d040      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a62      	ldr	r2, [pc, #392]	@ (8002c14 <DMA_Init+0x4c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d03b      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a61      	ldr	r2, [pc, #388]	@ (8002c18 <DMA_Init+0x4cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d036      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8002c1c <DMA_Init+0x4d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d031      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c20 <DMA_Init+0x4d4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d02c      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5c      	ldr	r2, [pc, #368]	@ (8002c24 <DMA_Init+0x4d8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d027      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5b      	ldr	r2, [pc, #364]	@ (8002c28 <DMA_Init+0x4dc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d022      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a59      	ldr	r2, [pc, #356]	@ (8002c2c <DMA_Init+0x4e0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01d      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a58      	ldr	r2, [pc, #352]	@ (8002c30 <DMA_Init+0x4e4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d018      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a56      	ldr	r2, [pc, #344]	@ (8002c34 <DMA_Init+0x4e8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a55      	ldr	r2, [pc, #340]	@ (8002c38 <DMA_Init+0x4ec>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a53      	ldr	r2, [pc, #332]	@ (8002c3c <DMA_Init+0x4f0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a52      	ldr	r2, [pc, #328]	@ (8002c40 <DMA_Init+0x4f4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <DMA_Init+0x3ba>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a50      	ldr	r2, [pc, #320]	@ (8002c44 <DMA_Init+0x4f8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <DMA_Init+0x3be>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <DMA_Init+0x3c0>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e008      	b.n	8002b2c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b22:	d103      	bne.n	8002b2c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b2a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b32:	4b45      	ldr	r3, [pc, #276]	@ (8002c48 <DMA_Init+0x4fc>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a36      	ldr	r2, [pc, #216]	@ (8002c28 <DMA_Init+0x4dc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d022      	beq.n	8002b98 <DMA_Init+0x44c>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <DMA_Init+0x4e0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01d      	beq.n	8002b98 <DMA_Init+0x44c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a33      	ldr	r2, [pc, #204]	@ (8002c30 <DMA_Init+0x4e4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d018      	beq.n	8002b98 <DMA_Init+0x44c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a32      	ldr	r2, [pc, #200]	@ (8002c34 <DMA_Init+0x4e8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <DMA_Init+0x44c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a30      	ldr	r2, [pc, #192]	@ (8002c38 <DMA_Init+0x4ec>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <DMA_Init+0x44c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c3c <DMA_Init+0x4f0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <DMA_Init+0x44c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <DMA_Init+0x4f4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <DMA_Init+0x44c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <DMA_Init+0x4f8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <DMA_Init+0x450>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <DMA_Init+0x452>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40020050 	.word	0x40020050
 8002bcc:	50020050 	.word	0x50020050
 8002bd0:	400200d0 	.word	0x400200d0
 8002bd4:	500200d0 	.word	0x500200d0
 8002bd8:	40020150 	.word	0x40020150
 8002bdc:	50020150 	.word	0x50020150
 8002be0:	400201d0 	.word	0x400201d0
 8002be4:	500201d0 	.word	0x500201d0
 8002be8:	40020250 	.word	0x40020250
 8002bec:	50020250 	.word	0x50020250
 8002bf0:	400202d0 	.word	0x400202d0
 8002bf4:	500202d0 	.word	0x500202d0
 8002bf8:	40020350 	.word	0x40020350
 8002bfc:	50020350 	.word	0x50020350
 8002c00:	400203d0 	.word	0x400203d0
 8002c04:	500203d0 	.word	0x500203d0
 8002c08:	40020450 	.word	0x40020450
 8002c0c:	50020450 	.word	0x50020450
 8002c10:	400204d0 	.word	0x400204d0
 8002c14:	500204d0 	.word	0x500204d0
 8002c18:	40020550 	.word	0x40020550
 8002c1c:	50020550 	.word	0x50020550
 8002c20:	400205d0 	.word	0x400205d0
 8002c24:	500205d0 	.word	0x500205d0
 8002c28:	40020650 	.word	0x40020650
 8002c2c:	50020650 	.word	0x50020650
 8002c30:	400206d0 	.word	0x400206d0
 8002c34:	500206d0 	.word	0x500206d0
 8002c38:	40020750 	.word	0x40020750
 8002c3c:	50020750 	.word	0x50020750
 8002c40:	400207d0 	.word	0x400207d0
 8002c44:	500207d0 	.word	0x500207d0
 8002c48:	3cc03180 	.word	0x3cc03180

08002c4c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_DMAEx_List_Start_IT+0x16>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e082      	b.n	8002d6c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c6c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c78:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d005      	beq.n	8002c8c <HAL_DMAEx_List_Start_IT+0x40>
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d16a      	bne.n	8002d5c <HAL_DMAEx_List_Start_IT+0x110>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d067      	beq.n	8002d5c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d157      	bne.n	8002d48 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DMAEx_List_Start_IT+0x5a>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e062      	b.n	8002d6c <HAL_DMAEx_List_Start_IT+0x120>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cba:	2202      	movs	r2, #2
 8002cbc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002cda:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d0a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f107 010c 	add.w	r1, r7, #12
 8002d16:	2200      	movs	r2, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f82b 	bl	8002d74 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	0c0b      	lsrs	r3, r1, #16
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e007      	b.n	8002d6c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2240      	movs	r2, #64	@ 0x40
 8002d60:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <DMA_List_GetCLLRNodeInfo+0x58>)
 8002d96:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00f      	beq.n	8002dbe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002da4:	e00b      	b.n	8002dbe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002db0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2205      	movs	r2, #5
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	fe010000 	.word	0xfe010000
 8002dd0:	f8010000 	.word	0xf8010000

08002dd4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002de6:	e1c2      	b.n	800316e <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 81b2 	beq.w	8003168 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a55      	ldr	r2, [pc, #340]	@ (8002f5c <HAL_GPIO_Init+0x188>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d15d      	bne.n	8002ec8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002e12:	2201      	movs	r2, #1
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0201 	and.w	r2, r3, #1
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002e3c:	4a48      	ldr	r2, [pc, #288]	@ (8002f60 <HAL_GPIO_Init+0x18c>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e44:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002e46:	4a46      	ldr	r2, [pc, #280]	@ (8002f60 <HAL_GPIO_Init+0x18c>)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	220b      	movs	r2, #11
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	3208      	adds	r2, #8
 8002e92:	69f9      	ldr	r1, [r7, #28]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e067      	b.n	8002f98 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x104>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b12      	cmp	r3, #18
 8002ed6:	d145      	bne.n	8002f64 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	69f9      	ldr	r1, [r7, #28]
 8002f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e01e      	b.n	8002f98 <HAL_GPIO_Init+0x1c4>
 8002f5a:	bf00      	nop
 8002f5c:	46020000 	.word	0x46020000
 8002f60:	0800a114 	.word	0x0800a114
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0203 	and.w	r2, r3, #3
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_GPIO_Init+0x1e4>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d007      	beq.n	8002fb8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fac:	2b11      	cmp	r3, #17
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b12      	cmp	r3, #18
 8002fb6:	d130      	bne.n	800301a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 0201 	and.w	r2, r3, #1
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	4313      	orrs	r3, r2
 8003012:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d107      	bne.n	8003032 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8003026:	2b03      	cmp	r3, #3
 8003028:	d11b      	bne.n	8003062 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d017      	beq.n	8003062 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	4013      	ands	r3, r2
 8003048:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d07c      	beq.n	8003168 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800306e:	4a47      	ldr	r2, [pc, #284]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3318      	adds	r3, #24
 8003076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	4013      	ands	r3, r2
 8003090:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0a9a      	lsrs	r2, r3, #10
 8003096:	4b3e      	ldr	r3, [pc, #248]	@ (8003190 <HAL_GPIO_Init+0x3bc>)
 8003098:	4013      	ands	r3, r2
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	f002 0203 	and.w	r2, r2, #3
 80030a0:	00d2      	lsls	r2, r2, #3
 80030a2:	4093      	lsls	r3, r2
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80030aa:	4938      	ldr	r1, [pc, #224]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3318      	adds	r3, #24
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80030b8:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80030dc:	4a2b      	ldr	r2, [pc, #172]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80030e2:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003106:	4a21      	ldr	r2, [pc, #132]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800310c:	4b1f      	ldr	r3, [pc, #124]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 800310e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003112:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43db      	mvns	r3, r3
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	4013      	ands	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003132:	4a16      	ldr	r2, [pc, #88]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800313a:	4b14      	ldr	r3, [pc, #80]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 800313c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003140:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	4013      	ands	r3, r2
 800314a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003160:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <HAL_GPIO_Init+0x3b8>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3301      	adds	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f ae35 	bne.w	8002de8 <HAL_GPIO_Init+0x14>
  }
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	3724      	adds	r7, #36	@ 0x24
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	46022000 	.word	0x46022000
 8003190:	002f7f7f 	.word	0x002f7f7f

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80031b0:	e002      	b.n	80031b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80031ce:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80031da:	4a0c      	ldr	r2, [pc, #48]	@ (800320c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f814 	bl	8003210 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80031e8:	4b08      	ldr	r3, [pc, #32]	@ (800320c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80031f4:	4a05      	ldr	r2, [pc, #20]	@ (800320c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f812 	bl	8003226 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	46022000 	.word	0x46022000

08003210 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003244:	4b39      	ldr	r3, [pc, #228]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800324c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	429a      	cmp	r2, r3
 8003254:	d10b      	bne.n	800326e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325c:	d905      	bls.n	800326a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800325e:	4b33      	ldr	r3, [pc, #204]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4a32      	ldr	r2, [pc, #200]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e057      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d90a      	bls.n	800328c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003276:	4b2d      	ldr	r3, [pc, #180]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4313      	orrs	r3, r2
 8003282:	4a2a      	ldr	r2, [pc, #168]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003288:	60d3      	str	r3, [r2, #12]
 800328a:	e007      	b.n	800329c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800328c:	4b27      	ldr	r3, [pc, #156]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003294:	4925      	ldr	r1, [pc, #148]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800329c:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a24      	ldr	r2, [pc, #144]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	2232      	movs	r2, #50	@ 0x32
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	4a21      	ldr	r2, [pc, #132]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80032ba:	e002      	b.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3b01      	subs	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80032c2:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f3      	bne.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01b      	beq.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a15      	ldr	r2, [pc, #84]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	2232      	movs	r2, #50	@ 0x32
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	4a11      	ldr	r2, [pc, #68]	@ (8003334 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80032f8:	e002      	b.n	8003300 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003300:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f3      	bne.n	80032fa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e000      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	46020800 	.word	0x46020800
 8003330:	20000000 	.word	0x20000000
 8003334:	10624dd3 	.word	0x10624dd3

08003338 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <HAL_PWREx_GetVoltageRange+0x18>)
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	46020800 	.word	0x46020800

08003354 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_PWREx_EnableVddUSB+0x1c>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	4a04      	ldr	r2, [pc, #16]	@ (8003370 <HAL_PWREx_EnableVddUSB+0x1c>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003362:	6113      	str	r3, [r2, #16]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	46020800 	.word	0x46020800

08003374 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_PWREx_EnableVddIO2+0x1c>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	4a04      	ldr	r2, [pc, #16]	@ (8003390 <HAL_PWREx_EnableVddIO2+0x1c>)
 800337e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003382:	6113      	str	r3, [r2, #16]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	46020800 	.word	0x46020800

08003394 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_PWREx_EnableVddA+0x1c>)
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4a04      	ldr	r2, [pc, #16]	@ (80033b0 <HAL_PWREx_EnableVddA+0x1c>)
 800339e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033a2:	6113      	str	r3, [r2, #16]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	46020800 	.word	0x46020800

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08e      	sub	sp, #56	@ 0x38
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f000 bec8 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ce:	4b99      	ldr	r3, [pc, #612]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d8:	4b96      	ldr	r3, [pc, #600]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 816c 	beq.w	80036c8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_RCC_OscConfig+0x52>
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	f040 80de 	bne.w	80035ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003400:	2b01      	cmp	r3, #1
 8003402:	f040 80da 	bne.w	80035ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f000 bea5 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003418:	4b86      	ldr	r3, [pc, #536]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_RCC_OscConfig+0x7a>
 8003424:	4b83      	ldr	r3, [pc, #524]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800342c:	e005      	b.n	800343a <HAL_RCC_OscConfig+0x86>
 800342e:	4b81      	ldr	r3, [pc, #516]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800343a:	4293      	cmp	r3, r2
 800343c:	d255      	bcs.n	80034ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	4618      	mov	r0, r3
 800344a:	f001 f9d9 	bl	8004800 <RCC_SetFlashLatencyFromMSIRange>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f000 be82 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800345a:	4b76      	ldr	r3, [pc, #472]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a75      	ldr	r2, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003460:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003464:	6093      	str	r3, [r2, #8]
 8003466:	4b73      	ldr	r3, [pc, #460]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	4970      	ldr	r1, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003480:	d309      	bcc.n	8003496 <HAL_RCC_OscConfig+0xe2>
 8003482:	4b6c      	ldr	r3, [pc, #432]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 021f 	bic.w	r2, r3, #31
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4969      	ldr	r1, [pc, #420]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
 8003494:	e07e      	b.n	8003594 <HAL_RCC_OscConfig+0x1e0>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0a      	bge.n	80034b4 <HAL_RCC_OscConfig+0x100>
 800349e:	4b65      	ldr	r3, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	4961      	ldr	r1, [pc, #388]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]
 80034b2:	e06f      	b.n	8003594 <HAL_RCC_OscConfig+0x1e0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034bc:	d30a      	bcc.n	80034d4 <HAL_RCC_OscConfig+0x120>
 80034be:	4b5d      	ldr	r3, [pc, #372]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	4959      	ldr	r1, [pc, #356]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60cb      	str	r3, [r1, #12]
 80034d2:	e05f      	b.n	8003594 <HAL_RCC_OscConfig+0x1e0>
 80034d4:	4b57      	ldr	r3, [pc, #348]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	03db      	lsls	r3, r3, #15
 80034e2:	4954      	ldr	r1, [pc, #336]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
 80034e8:	e054      	b.n	8003594 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80034ea:	4b52      	ldr	r3, [pc, #328]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4a51      	ldr	r2, [pc, #324]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034f4:	6093      	str	r3, [r2, #8]
 80034f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	494c      	ldr	r1, [pc, #304]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003510:	d309      	bcc.n	8003526 <HAL_RCC_OscConfig+0x172>
 8003512:	4b48      	ldr	r3, [pc, #288]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f023 021f 	bic.w	r2, r3, #31
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4945      	ldr	r1, [pc, #276]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003520:	4313      	orrs	r3, r2
 8003522:	60cb      	str	r3, [r1, #12]
 8003524:	e028      	b.n	8003578 <HAL_RCC_OscConfig+0x1c4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	da0a      	bge.n	8003544 <HAL_RCC_OscConfig+0x190>
 800352e:	4b41      	ldr	r3, [pc, #260]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	015b      	lsls	r3, r3, #5
 800353c:	493d      	ldr	r1, [pc, #244]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 800353e:	4313      	orrs	r3, r2
 8003540:	60cb      	str	r3, [r1, #12]
 8003542:	e019      	b.n	8003578 <HAL_RCC_OscConfig+0x1c4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354c:	d30a      	bcc.n	8003564 <HAL_RCC_OscConfig+0x1b0>
 800354e:	4b39      	ldr	r3, [pc, #228]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	4935      	ldr	r1, [pc, #212]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 800355e:	4313      	orrs	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
 8003562:	e009      	b.n	8003578 <HAL_RCC_OscConfig+0x1c4>
 8003564:	4b33      	ldr	r3, [pc, #204]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	03db      	lsls	r3, r3, #15
 8003572:	4930      	ldr	r1, [pc, #192]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003574:	4313      	orrs	r3, r2
 8003576:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f93c 	bl	8004800 <RCC_SetFlashLatencyFromMSIRange>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f000 bde5 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003594:	f001 f8de 	bl	8004754 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003598:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <HAL_RCC_OscConfig+0x284>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fa71 	bl	8001a84 <HAL_InitTick>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80035a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 808a 	beq.w	80036c6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80035b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b6:	f000 bdd2 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d066      	beq.n	8003690 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80035c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035ce:	f7fe fae3 	bl	8001b98 <HAL_GetTick>
 80035d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80035d4:	e009      	b.n	80035ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035d6:	f7fe fadf 	bl	8001b98 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d902      	bls.n	80035ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	f000 bdba 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80035ea:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ef      	beq.n	80035d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 80035fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003600:	6093      	str	r3, [r2, #8]
 8003602:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	4909      	ldr	r1, [pc, #36]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003610:	4313      	orrs	r3, r2
 8003612:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800361c:	d30e      	bcc.n	800363c <HAL_RCC_OscConfig+0x288>
 800361e:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 021f 	bic.w	r2, r3, #31
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4902      	ldr	r1, [pc, #8]	@ (8003634 <HAL_RCC_OscConfig+0x280>)
 800362c:	4313      	orrs	r3, r2
 800362e:	60cb      	str	r3, [r1, #12]
 8003630:	e04a      	b.n	80036c8 <HAL_RCC_OscConfig+0x314>
 8003632:	bf00      	nop
 8003634:	46020c00 	.word	0x46020c00
 8003638:	20000004 	.word	0x20000004
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	da0a      	bge.n	800365a <HAL_RCC_OscConfig+0x2a6>
 8003644:	4b98      	ldr	r3, [pc, #608]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	4995      	ldr	r1, [pc, #596]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	60cb      	str	r3, [r1, #12]
 8003658:	e036      	b.n	80036c8 <HAL_RCC_OscConfig+0x314>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003662:	d30a      	bcc.n	800367a <HAL_RCC_OscConfig+0x2c6>
 8003664:	4b90      	ldr	r3, [pc, #576]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	029b      	lsls	r3, r3, #10
 8003672:	498d      	ldr	r1, [pc, #564]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
 8003678:	e026      	b.n	80036c8 <HAL_RCC_OscConfig+0x314>
 800367a:	4b8b      	ldr	r3, [pc, #556]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	03db      	lsls	r3, r3, #15
 8003688:	4987      	ldr	r1, [pc, #540]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	60cb      	str	r3, [r1, #12]
 800368e:	e01b      	b.n	80036c8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003690:	4b85      	ldr	r3, [pc, #532]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a84      	ldr	r2, [pc, #528]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800369c:	f7fe fa7c 	bl	8001b98 <HAL_GetTick>
 80036a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80036a2:	e009      	b.n	80036b8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a4:	f7fe fa78 	bl	8001b98 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d902      	bls.n	80036b8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	f000 bd53 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80036b8:	4b7b      	ldr	r3, [pc, #492]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80036c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 808b 	beq.w	80037ec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_OscConfig+0x334>
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d17d      	bne.n	80037ec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f000 bd34 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x35a>
 8003700:	4b69      	ldr	r3, [pc, #420]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a68      	ldr	r2, [pc, #416]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e041      	b.n	8003792 <HAL_RCC_OscConfig+0x3de>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003716:	d112      	bne.n	800373e <HAL_RCC_OscConfig+0x38a>
 8003718:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a62      	ldr	r2, [pc, #392]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b60      	ldr	r3, [pc, #384]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5f      	ldr	r2, [pc, #380]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b5d      	ldr	r3, [pc, #372]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5c      	ldr	r2, [pc, #368]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e029      	b.n	8003792 <HAL_RCC_OscConfig+0x3de>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003746:	d112      	bne.n	800376e <HAL_RCC_OscConfig+0x3ba>
 8003748:	4b57      	ldr	r3, [pc, #348]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800374e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b54      	ldr	r3, [pc, #336]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a53      	ldr	r2, [pc, #332]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b51      	ldr	r3, [pc, #324]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a50      	ldr	r2, [pc, #320]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e011      	b.n	8003792 <HAL_RCC_OscConfig+0x3de>
 800376e:	4b4e      	ldr	r3, [pc, #312]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a4d      	ldr	r2, [pc, #308]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b4b      	ldr	r3, [pc, #300]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4a      	ldr	r2, [pc, #296]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b48      	ldr	r3, [pc, #288]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a47      	ldr	r2, [pc, #284]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d014      	beq.n	80037c4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800379a:	f7fe f9fd 	bl	8001b98 <HAL_GetTick>
 800379e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a0:	e009      	b.n	80037b6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a2:	f7fe f9f9 	bl	8001b98 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	@ 0x64
 80037ae:	d902      	bls.n	80037b6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	f000 bcd4 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b6:	4b3c      	ldr	r3, [pc, #240]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ef      	beq.n	80037a2 <HAL_RCC_OscConfig+0x3ee>
 80037c2:	e013      	b.n	80037ec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80037c4:	f7fe f9e8 	bl	8001b98 <HAL_GetTick>
 80037c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ca:	e009      	b.n	80037e0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe f9e4 	bl	8001b98 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	@ 0x64
 80037d8:	d902      	bls.n	80037e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	f000 bcbf 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037e0:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ef      	bne.n	80037cc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05f      	beq.n	80038b8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x456>
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d114      	bne.n	800382e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	2b02      	cmp	r3, #2
 8003808:	d111      	bne.n	800382e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f000 bca3 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	4920      	ldr	r1, [pc, #128]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800382c:	e044      	b.n	80038b8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d024      	beq.n	8003880 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003836:	4b1c      	ldr	r3, [pc, #112]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003840:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003842:	f7fe f9a9 	bl	8001b98 <HAL_GetTick>
 8003846:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003848:	e009      	b.n	800385e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe f9a5 	bl	8001b98 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d902      	bls.n	800385e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	f000 bc80 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ef      	beq.n	800384a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	490b      	ldr	r1, [pc, #44]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	610b      	str	r3, [r1, #16]
 800387e:	e01b      	b.n	80038b8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003880:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a08      	ldr	r2, [pc, #32]	@ (80038a8 <HAL_RCC_OscConfig+0x4f4>)
 8003886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800388a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800388c:	f7fe f984 	bl	8001b98 <HAL_GetTick>
 8003890:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003894:	f7fe f980 	bl	8001b98 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d904      	bls.n	80038ac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	f000 bc5b 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
 80038a8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ac:	4baf      	ldr	r3, [pc, #700]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ed      	bne.n	8003894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80c8 	beq.w	8003a56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038cc:	4ba7      	ldr	r3, [pc, #668]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d111      	bne.n	80038fe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	4ba4      	ldr	r3, [pc, #656]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e0:	4aa2      	ldr	r2, [pc, #648]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80038ea:	4ba0      	ldr	r3, [pc, #640]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80038fe:	4b9c      	ldr	r3, [pc, #624]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d119      	bne.n	800393e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800390a:	4b99      	ldr	r3, [pc, #612]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	4a98      	ldr	r2, [pc, #608]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003916:	f7fe f93f 	bl	8001b98 <HAL_GetTick>
 800391a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800391c:	e009      	b.n	8003932 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fe f93b 	bl	8001b98 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d902      	bls.n	8003932 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	f000 bc16 	b.w	800415e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003932:	4b8f      	ldr	r3, [pc, #572]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ef      	beq.n	800391e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d05f      	beq.n	8003a06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003946:	4b89      	ldr	r3, [pc, #548]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800394c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	429a      	cmp	r2, r3
 800395a:	d037      	beq.n	80039cc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e3f4      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01b      	beq.n	80039b6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800397e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003984:	4a79      	ldr	r2, [pc, #484]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003986:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800398a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800398e:	f7fe f903 	bl	8001b98 <HAL_GetTick>
 8003992:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fe f8ff 	bl	8001b98 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e3da      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80039a8:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80039aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80039b6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80039b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4969      	ldr	r1, [pc, #420]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80039cc:	4b67      	ldr	r3, [pc, #412]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80039ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039d2:	4a66      	ldr	r2, [pc, #408]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80039d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80039dc:	f7fe f8dc 	bl	8001b98 <HAL_GetTick>
 80039e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe f8d8 	bl	8001b98 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e3b3      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80039f6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 80039f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <HAL_RCC_OscConfig+0x630>
 8003a04:	e01b      	b.n	8003a3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003a06:	4b59      	ldr	r3, [pc, #356]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a0c:	4a57      	ldr	r2, [pc, #348]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a0e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003a12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003a16:	f7fe f8bf 	bl	8001b98 <HAL_GetTick>
 8003a1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe f8bb 	bl	8001b98 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e396      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a30:	4b4e      	ldr	r3, [pc, #312]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ef      	bne.n	8003a1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4c:	4a47      	ldr	r2, [pc, #284]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a4e:	f023 0304 	bic.w	r3, r3, #4
 8003a52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8111 	beq.w	8003c86 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6a:	4b40      	ldr	r3, [pc, #256]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d111      	bne.n	8003a9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b3c      	ldr	r3, [pc, #240]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003a88:	4b38      	ldr	r3, [pc, #224]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a9c:	4b34      	ldr	r3, [pc, #208]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d118      	bne.n	8003ada <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003aa8:	4b31      	ldr	r3, [pc, #196]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	4a30      	ldr	r2, [pc, #192]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab4:	f7fe f870 	bl	8001b98 <HAL_GetTick>
 8003ab8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abc:	f7fe f86c 	bl	8001b98 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e347      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ace:	4b28      	ldr	r3, [pc, #160]	@ (8003b70 <HAL_RCC_OscConfig+0x7bc>)
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01f      	beq.n	8003b26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003af2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003af8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b02:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b08:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b12:	e018      	b.n	8003b46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b14:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b1a:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b24:	e00f      	b.n	8003b46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b26:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_RCC_OscConfig+0x7b8>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d057      	beq.n	8003bfe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003b4e:	f7fe f823 	bl	8001b98 <HAL_GetTick>
 8003b52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b54:	e00e      	b.n	8003b74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fe f81f 	bl	8001b98 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d905      	bls.n	8003b74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e2f8      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
 8003b6c:	46020c00 	.word	0x46020c00
 8003b70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b74:	4b9c      	ldr	r3, [pc, #624]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0e9      	beq.n	8003b56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01b      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b8e:	4b96      	ldr	r3, [pc, #600]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b94:	4a94      	ldr	r2, [pc, #592]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fffa 	bl	8001b98 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e2d3      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003bb6:	4b8c      	ldr	r3, [pc, #560]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ed      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x7ec>
 8003bc4:	e053      	b.n	8003c6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003bc6:	4b88      	ldr	r3, [pc, #544]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bcc:	4a86      	ldr	r2, [pc, #536]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd ffde 	bl	8001b98 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e2b7      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bee:	4b7e      	ldr	r3, [pc, #504]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ed      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x824>
 8003bfc:	e037      	b.n	8003c6e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003bfe:	f7fd ffcb 	bl	8001b98 <HAL_GetTick>
 8003c02:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd ffc7 	bl	8001b98 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e2a0      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c1c:	4b72      	ldr	r3, [pc, #456]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ed      	bne.n	8003c06 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c38:	4b6b      	ldr	r3, [pc, #428]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c3e:	4a6a      	ldr	r2, [pc, #424]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fd ffa5 	bl	8001b98 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e27e      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c60:	4b61      	ldr	r3, [pc, #388]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ed      	bne.n	8003c4a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c6e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c76:	4b5c      	ldr	r3, [pc, #368]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d036      	beq.n	8003d00 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d019      	beq.n	8003cce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003c9a:	4b53      	ldr	r3, [pc, #332]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a52      	ldr	r2, [pc, #328]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003ca0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ca4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ca6:	f7fd ff77 	bl	8001b98 <HAL_GetTick>
 8003caa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cae:	f7fd ff73 	bl	8001b98 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e24e      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003cc0:	4b49      	ldr	r3, [pc, #292]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x8fa>
 8003ccc:	e018      	b.n	8003d00 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003cce:	4b46      	ldr	r3, [pc, #280]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a45      	ldr	r2, [pc, #276]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cd8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003cda:	f7fd ff5d 	bl	8001b98 <HAL_GetTick>
 8003cde:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce2:	f7fd ff59 	bl	8001b98 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e234      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d036      	beq.n	8003d7a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d019      	beq.n	8003d48 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003d14:	4b34      	ldr	r3, [pc, #208]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d20:	f7fd ff3a 	bl	8001b98 <HAL_GetTick>
 8003d24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003d28:	f7fd ff36 	bl	8001b98 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e211      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x974>
 8003d46:	e018      	b.n	8003d7a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003d48:	4b27      	ldr	r3, [pc, #156]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a26      	ldr	r2, [pc, #152]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d54:	f7fd ff20 	bl	8001b98 <HAL_GetTick>
 8003d58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003d5c:	f7fd ff1c 	bl	8001b98 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1f7      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d07f      	beq.n	8003e86 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d062      	beq.n	8003e54 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003d8e:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4a15      	ldr	r2, [pc, #84]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d98:	6093      	str	r3, [r2, #8]
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	4910      	ldr	r1, [pc, #64]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003db4:	d309      	bcc.n	8003dca <HAL_RCC_OscConfig+0xa16>
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 021f 	bic.w	r2, r3, #31
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4909      	ldr	r1, [pc, #36]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60cb      	str	r3, [r1, #12]
 8003dc8:	e02a      	b.n	8003e20 <HAL_RCC_OscConfig+0xa6c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	da0c      	bge.n	8003dec <HAL_RCC_OscConfig+0xa38>
 8003dd2:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	4901      	ldr	r1, [pc, #4]	@ (8003de8 <HAL_RCC_OscConfig+0xa34>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60cb      	str	r3, [r1, #12]
 8003de6:	e01b      	b.n	8003e20 <HAL_RCC_OscConfig+0xa6c>
 8003de8:	46020c00 	.word	0x46020c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d30a      	bcc.n	8003e0c <HAL_RCC_OscConfig+0xa58>
 8003df6:	4ba1      	ldr	r3, [pc, #644]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	029b      	lsls	r3, r3, #10
 8003e04:	499d      	ldr	r1, [pc, #628]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60cb      	str	r3, [r1, #12]
 8003e0a:	e009      	b.n	8003e20 <HAL_RCC_OscConfig+0xa6c>
 8003e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	03db      	lsls	r3, r3, #15
 8003e1a:	4998      	ldr	r1, [pc, #608]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003e20:	4b96      	ldr	r3, [pc, #600]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a95      	ldr	r2, [pc, #596]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e26:	f043 0310 	orr.w	r3, r3, #16
 8003e2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e2c:	f7fd feb4 	bl	8001b98 <HAL_GetTick>
 8003e30:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003e34:	f7fd feb0 	bl	8001b98 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e18b      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003e46:	4b8d      	ldr	r3, [pc, #564]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0xa80>
 8003e52:	e018      	b.n	8003e86 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003e54:	4b89      	ldr	r3, [pc, #548]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a88      	ldr	r2, [pc, #544]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e5a:	f023 0310 	bic.w	r3, r3, #16
 8003e5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e60:	f7fd fe9a 	bl	8001b98 <HAL_GetTick>
 8003e64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003e68:	f7fd fe96 	bl	8001b98 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e171      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003e7a:	4b80      	ldr	r3, [pc, #512]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8166 	beq.w	800415c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e96:	4b79      	ldr	r3, [pc, #484]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	f000 80f2 	beq.w	8004088 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f040 80c5 	bne.w	8004038 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b73      	ldr	r3, [pc, #460]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a72      	ldr	r2, [pc, #456]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003eba:	f7fd fe6d 	bl	8001b98 <HAL_GetTick>
 8003ebe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fe69 	bl	8001b98 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e144      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ed4:	4b69      	ldr	r3, [pc, #420]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee0:	4b66      	ldr	r3, [pc, #408]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d111      	bne.n	8003f12 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b63      	ldr	r3, [pc, #396]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef4:	4a61      	ldr	r2, [pc, #388]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003efe:	4b5f      	ldr	r3, [pc, #380]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003f12:	4b5b      	ldr	r3, [pc, #364]	@ (8004080 <HAL_RCC_OscConfig+0xccc>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f26:	4b56      	ldr	r3, [pc, #344]	@ (8004080 <HAL_RCC_OscConfig+0xccc>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4a55      	ldr	r2, [pc, #340]	@ (8004080 <HAL_RCC_OscConfig+0xccc>)
 8003f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f30:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003f32:	4b52      	ldr	r3, [pc, #328]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f46:	3a01      	subs	r2, #1
 8003f48:	0212      	lsls	r2, r2, #8
 8003f4a:	4311      	orrs	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f50:	430a      	orrs	r2, r1
 8003f52:	494a      	ldr	r1, [pc, #296]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f58:	4b48      	ldr	r3, [pc, #288]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f5c:	4b49      	ldr	r3, [pc, #292]	@ (8004084 <HAL_RCC_OscConfig+0xcd0>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f64:	3a01      	subs	r2, #1
 8003f66:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	0252      	lsls	r2, r2, #9
 8003f72:	b292      	uxth	r2, r2
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f7a:	3a01      	subs	r2, #1
 8003f7c:	0412      	lsls	r2, r2, #16
 8003f7e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003f82:	4311      	orrs	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0612      	lsls	r2, r2, #24
 8003f8c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003f90:	430a      	orrs	r2, r1
 8003f92:	493a      	ldr	r1, [pc, #232]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003f98:	4b38      	ldr	r3, [pc, #224]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9c:	4a37      	ldr	r2, [pc, #220]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003f9e:	f023 0310 	bic.w	r3, r3, #16
 8003fa2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	4a34      	ldr	r2, [pc, #208]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003fae:	4b33      	ldr	r3, [pc, #204]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	4a32      	ldr	r2, [pc, #200]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003fb4:	f043 0310 	orr.w	r3, r3, #16
 8003fb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003fba:	4b30      	ldr	r3, [pc, #192]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	f023 020c 	bic.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	492d      	ldr	r1, [pc, #180]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004080 <HAL_RCC_OscConfig+0xccc>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a29      	ldr	r2, [pc, #164]	@ (8004080 <HAL_RCC_OscConfig+0xccc>)
 8003fda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fde:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003fe0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003fe8:	4b24      	ldr	r3, [pc, #144]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fee:	4a23      	ldr	r2, [pc, #140]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003ff8:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004002:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004004:	f7fd fdc8 	bl	8001b98 <HAL_GetTick>
 8004008:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd fdc4 	bl	8001b98 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e09f      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800401e:	4b17      	ldr	r3, [pc, #92]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800402a:	4b14      	ldr	r3, [pc, #80]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	4a13      	ldr	r2, [pc, #76]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004034:	6293      	str	r3, [r2, #40]	@ 0x28
 8004036:	e091      	b.n	800415c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004038:	4b10      	ldr	r3, [pc, #64]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0f      	ldr	r2, [pc, #60]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004042:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004044:	f7fd fda8 	bl	8001b98 <HAL_GetTick>
 8004048:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404c:	f7fd fda4 	bl	8001b98 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e07f      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800405e:	4b07      	ldr	r3, [pc, #28]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800406a:	4b04      	ldr	r3, [pc, #16]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	4a03      	ldr	r2, [pc, #12]	@ (800407c <HAL_RCC_OscConfig+0xcc8>)
 8004070:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004074:	f023 0303 	bic.w	r3, r3, #3
 8004078:	6293      	str	r3, [r2, #40]	@ 0x28
 800407a:	e06f      	b.n	800415c <HAL_RCC_OscConfig+0xda8>
 800407c:	46020c00 	.word	0x46020c00
 8004080:	46020800 	.word	0x46020800
 8004084:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004088:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800408e:	4b36      	ldr	r3, [pc, #216]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 8004090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004092:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	2b01      	cmp	r3, #1
 800409a:	d039      	beq.n	8004110 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0203 	and.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d132      	bne.n	8004110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d129      	bne.n	8004110 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d122      	bne.n	8004110 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d11a      	bne.n	8004110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	0a5b      	lsrs	r3, r3, #9
 80040de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d111      	bne.n	8004110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d108      	bne.n	8004110 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	0e1b      	lsrs	r3, r3, #24
 8004102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e024      	b.n	800415e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004114:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	08db      	lsrs	r3, r3, #3
 800411a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004122:	429a      	cmp	r2, r3
 8004124:	d01a      	beq.n	800415c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	4a0f      	ldr	r2, [pc, #60]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 800412c:	f023 0310 	bic.w	r3, r3, #16
 8004130:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fd fd31 	bl	8001b98 <HAL_GetTick>
 8004136:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004138:	bf00      	nop
 800413a:	f7fd fd2d 	bl	8001b98 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	4293      	cmp	r3, r2
 8004144:	d0f9      	beq.n	800413a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	4a07      	ldr	r2, [pc, #28]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	4a04      	ldr	r2, [pc, #16]	@ (8004168 <HAL_RCC_OscConfig+0xdb4>)
 8004156:	f043 0310 	orr.w	r3, r3, #16
 800415a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3738      	adds	r7, #56	@ 0x38
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	46020c00 	.word	0x46020c00

0800416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e1d9      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b9b      	ldr	r3, [pc, #620]	@ (80043f0 <HAL_RCC_ClockConfig+0x284>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d910      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b98      	ldr	r3, [pc, #608]	@ (80043f0 <HAL_RCC_ClockConfig+0x284>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 020f 	bic.w	r2, r3, #15
 8004196:	4996      	ldr	r1, [pc, #600]	@ (80043f0 <HAL_RCC_ClockConfig+0x284>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b94      	ldr	r3, [pc, #592]	@ (80043f0 <HAL_RCC_ClockConfig+0x284>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e1c1      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d010      	beq.n	80041de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	4b8c      	ldr	r3, [pc, #560]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d908      	bls.n	80041de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80041cc:	4b89      	ldr	r3, [pc, #548]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	4986      	ldr	r1, [pc, #536]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d012      	beq.n	8004210 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	4b81      	ldr	r3, [pc, #516]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d909      	bls.n	8004210 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80041fc:	4b7d      	ldr	r3, [pc, #500]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	497a      	ldr	r1, [pc, #488]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 800420c:	4313      	orrs	r3, r2
 800420e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4b74      	ldr	r3, [pc, #464]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004228:	429a      	cmp	r2, r3
 800422a:	d908      	bls.n	800423e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b71      	ldr	r3, [pc, #452]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	496e      	ldr	r1, [pc, #440]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 800423a:	4313      	orrs	r3, r2
 800423c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d010      	beq.n	800426c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	4b69      	ldr	r3, [pc, #420]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	429a      	cmp	r2, r3
 8004258:	d908      	bls.n	800426c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800425a:	4b66      	ldr	r3, [pc, #408]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 020f 	bic.w	r2, r3, #15
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4963      	ldr	r1, [pc, #396]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004268:	4313      	orrs	r3, r2
 800426a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80d2 	beq.w	800441e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d143      	bne.n	800430e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b5b      	ldr	r3, [pc, #364]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d110      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004294:	4b57      	ldr	r3, [pc, #348]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800429a:	4a56      	ldr	r2, [pc, #344]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80042a4:	4b53      	ldr	r3, [pc, #332]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80042b6:	f7fd fc6f 	bl	8001b98 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80042bc:	4b4e      	ldr	r3, [pc, #312]	@ (80043f8 <HAL_RCC_ClockConfig+0x28c>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00f      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80042ca:	f7fd fc65 	bl	8001b98 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e12b      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80042dc:	4b46      	ldr	r3, [pc, #280]	@ (80043f8 <HAL_RCC_ClockConfig+0x28c>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b41      	ldr	r3, [pc, #260]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80042f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f4:	4a3f      	ldr	r2, [pc, #252]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80042f6:	f023 0304 	bic.w	r3, r3, #4
 80042fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042fe:	4b3d      	ldr	r3, [pc, #244]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d121      	bne.n	800434e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e112      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004316:	4b37      	ldr	r3, [pc, #220]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d115      	bne.n	800434e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e106      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800432e:	4b31      	ldr	r3, [pc, #196]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0fa      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433e:	4b2d      	ldr	r3, [pc, #180]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0f2      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800434e:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f023 0203 	bic.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4926      	ldr	r1, [pc, #152]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 800435c:	4313      	orrs	r3, r2
 800435e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004360:	f7fd fc1a 	bl	8001b98 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d112      	bne.n	8004394 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fd fc12 	bl	8001b98 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0d6      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004386:	4b1b      	ldr	r3, [pc, #108]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d1ee      	bne.n	8004370 <HAL_RCC_ClockConfig+0x204>
 8004392:	e044      	b.n	800441e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d112      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439e:	f7fd fbfb 	bl	8001b98 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0bf      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043b4:	4b0f      	ldr	r3, [pc, #60]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d1ee      	bne.n	800439e <HAL_RCC_ClockConfig+0x232>
 80043c0:	e02d      	b.n	800441e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d123      	bne.n	8004412 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fd fbe4 	bl	8001b98 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0a8      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80043e2:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <HAL_RCC_ClockConfig+0x288>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ee      	bne.n	80043cc <HAL_RCC_ClockConfig+0x260>
 80043ee:	e016      	b.n	800441e <HAL_RCC_ClockConfig+0x2b2>
 80043f0:	40022000 	.word	0x40022000
 80043f4:	46020c00 	.word	0x46020c00
 80043f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fd fbcc 	bl	8001b98 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e090      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004412:	4b4a      	ldr	r3, [pc, #296]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b04      	cmp	r3, #4
 800441c:	d1ee      	bne.n	80043fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d010      	beq.n	800444c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	4b43      	ldr	r3, [pc, #268]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	429a      	cmp	r2, r3
 8004438:	d208      	bcs.n	800444c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800443a:	4b40      	ldr	r3, [pc, #256]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f023 020f 	bic.w	r2, r3, #15
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	493d      	ldr	r1, [pc, #244]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800444c:	4b3c      	ldr	r3, [pc, #240]	@ (8004540 <HAL_RCC_ClockConfig+0x3d4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d210      	bcs.n	800447c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445a:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <HAL_RCC_ClockConfig+0x3d4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 020f 	bic.w	r2, r3, #15
 8004462:	4937      	ldr	r1, [pc, #220]	@ (8004540 <HAL_RCC_ClockConfig+0x3d4>)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b35      	ldr	r3, [pc, #212]	@ (8004540 <HAL_RCC_ClockConfig+0x3d4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e05b      	b.n	8004534 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d010      	beq.n	80044aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	4b2b      	ldr	r3, [pc, #172]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004494:	429a      	cmp	r2, r3
 8004496:	d208      	bcs.n	80044aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b28      	ldr	r3, [pc, #160]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4925      	ldr	r1, [pc, #148]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d012      	beq.n	80044dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	4b20      	ldr	r3, [pc, #128]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d209      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80044c8:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	4919      	ldr	r1, [pc, #100]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	4b13      	ldr	r3, [pc, #76]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d208      	bcs.n	800450a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80044f8:	4b10      	ldr	r3, [pc, #64]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	490d      	ldr	r1, [pc, #52]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 8004506:	4313      	orrs	r3, r2
 8004508:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800450a:	f000 f821 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 800450e:	4602      	mov	r2, r0
 8004510:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <HAL_RCC_ClockConfig+0x3d0>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	490a      	ldr	r1, [pc, #40]	@ (8004544 <HAL_RCC_ClockConfig+0x3d8>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	4a09      	ldr	r2, [pc, #36]	@ (8004548 <HAL_RCC_ClockConfig+0x3dc>)
 8004522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004524:	4b09      	ldr	r3, [pc, #36]	@ (800454c <HAL_RCC_ClockConfig+0x3e0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd faab 	bl	8001a84 <HAL_InitTick>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]

  return status;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	46020c00 	.word	0x46020c00
 8004540:	40022000 	.word	0x40022000
 8004544:	0800a0bc 	.word	0x0800a0bc
 8004548:	20000000 	.word	0x20000000
 800454c:	20000004 	.word	0x20000004

08004550 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	b08b      	sub	sp, #44	@ 0x2c
 8004554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800455e:	4b78      	ldr	r3, [pc, #480]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004568:	4b75      	ldr	r3, [pc, #468]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x34>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d121      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d11e      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004584:	4b6e      	ldr	r3, [pc, #440]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004590:	4b6b      	ldr	r3, [pc, #428]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004596:	0b1b      	lsrs	r3, r3, #12
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
 800459e:	e005      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80045a0:	4b67      	ldr	r3, [pc, #412]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	0f1b      	lsrs	r3, r3, #28
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045ac:	4a65      	ldr	r2, [pc, #404]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d110      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045c0:	e00d      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	e004      	b.n	80045de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d101      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045da:	4b5b      	ldr	r3, [pc, #364]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80045dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	f040 80a5 	bne.w	8004730 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80045e6:	4b56      	ldr	r3, [pc, #344]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80045f0:	4b53      	ldr	r3, [pc, #332]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80045fe:	4b50      	ldr	r3, [pc, #320]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800460a:	4b4d      	ldr	r3, [pc, #308]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	08db      	lsrs	r3, r3, #3
 8004610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d003      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0xe4>
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d022      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x128>
 8004632:	e043      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800474c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004656:	ed97 6a01 	vldr	s12, [r7, #4]
 800465a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004750 <HAL_RCC_GetSysClockFreq+0x200>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004676:	e046      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800474c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800468c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800469a:	ed97 6a01 	vldr	s12, [r7, #4]
 800469e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004750 <HAL_RCC_GetSysClockFreq+0x200>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ba:	e024      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	ee07 3a90 	vmov	s15, r3
 80046cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	ee07 3a90 	vmov	s15, r3
 80046e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80046e4:	ed97 6a01 	vldr	s12, [r7, #4]
 80046e8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004750 <HAL_RCC_GetSysClockFreq+0x200>
 80046ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80046f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004700:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004704:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004706:	4b0e      	ldr	r3, [pc, #56]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470a:	0e1b      	lsrs	r3, r3, #24
 800470c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004710:	3301      	adds	r3, #1
 8004712:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800471e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800472a:	ee17 3a90 	vmov	r3, s15
 800472e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004730:	6a3b      	ldr	r3, [r7, #32]
}
 8004732:	4618      	mov	r0, r3
 8004734:	372c      	adds	r7, #44	@ 0x2c
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	46020c00 	.word	0x46020c00
 8004744:	0800a0d4 	.word	0x0800a0d4
 8004748:	00f42400 	.word	0x00f42400
 800474c:	4b742400 	.word	0x4b742400
 8004750:	46000000 	.word	0x46000000

08004754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004758:	f7ff fefa 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b07      	ldr	r3, [pc, #28]	@ (800477c <HAL_RCC_GetHCLKFreq+0x28>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4906      	ldr	r1, [pc, #24]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004768:	5ccb      	ldrb	r3, [r1, r3]
 800476a:	fa22 f303 	lsr.w	r3, r2, r3
 800476e:	4a05      	ldr	r2, [pc, #20]	@ (8004784 <HAL_RCC_GetHCLKFreq+0x30>)
 8004770:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004772:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <HAL_RCC_GetHCLKFreq+0x30>)
 8004774:	681b      	ldr	r3, [r3, #0]
}
 8004776:	4618      	mov	r0, r3
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	46020c00 	.word	0x46020c00
 8004780:	0800a0bc 	.word	0x0800a0bc
 8004784:	20000000 	.word	0x20000000

08004788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800478c:	f7ff ffe2 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4903      	ldr	r1, [pc, #12]	@ (80047ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	46020c00 	.word	0x46020c00
 80047ac:	0800a0cc 	.word	0x0800a0cc

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80047b4:	f7ff ffce 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	@ (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	46020c00 	.word	0x46020c00
 80047d4:	0800a0cc 	.word	0x0800a0cc

080047d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80047dc:	f7ff ffba 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	@ (80047fc <HAL_RCC_GetPCLK3Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	46020c00 	.word	0x46020c00
 80047fc:	0800a0cc 	.word	0x0800a0cc

08004800 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004808:	4b3e      	ldr	r3, [pc, #248]	@ (8004904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800480a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004816:	f7fe fd8f 	bl	8003338 <HAL_PWREx_GetVoltageRange>
 800481a:	6178      	str	r0, [r7, #20]
 800481c:	e019      	b.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004824:	4a37      	ldr	r2, [pc, #220]	@ (8004904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004826:	f043 0304 	orr.w	r3, r3, #4
 800482a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800482e:	4b35      	ldr	r3, [pc, #212]	@ (8004904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800483c:	f7fe fd7c 	bl	8003338 <HAL_PWREx_GetVoltageRange>
 8004840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b30      	ldr	r3, [pc, #192]	@ (8004904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004848:	4a2e      	ldr	r2, [pc, #184]	@ (8004904 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004858:	d003      	beq.n	8004862 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004860:	d109      	bne.n	8004876 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004868:	d202      	bcs.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800486a:	2301      	movs	r3, #1
 800486c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800486e:	e033      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004874:	e030      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800487c:	d208      	bcs.n	8004890 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004884:	d102      	bne.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004886:	2303      	movs	r3, #3
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e025      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e035      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004896:	d90f      	bls.n	80048b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048a4:	d902      	bls.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	e015      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80048ac:	2301      	movs	r3, #1
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	e012      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	e00f      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048be:	d109      	bne.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c6:	d102      	bne.n	80048ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80048c8:	2301      	movs	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	e004      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80048ce:	2302      	movs	r3, #2
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e001      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80048d4:	2301      	movs	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f023 020f 	bic.w	r2, r3, #15
 80048e0:	4909      	ldr	r1, [pc, #36]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80048e8:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d001      	beq.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	46020c00 	.word	0x46020c00
 8004908:	40022000 	.word	0x40022000

0800490c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b0ba      	sub	sp, #232	@ 0xe8
 8004912:	af00      	add	r7, sp, #0
 8004914:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004918:	2300      	movs	r3, #0
 800491a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800491e:	2300      	movs	r3, #0
 8004920:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f002 0401 	and.w	r4, r2, #1
 8004930:	2500      	movs	r5, #0
 8004932:	ea54 0305 	orrs.w	r3, r4, r5
 8004936:	d00b      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004938:	4bcb      	ldr	r3, [pc, #812]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800493e:	f023 0103 	bic.w	r1, r3, #3
 8004942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004948:	4ac7      	ldr	r2, [pc, #796]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f002 0802 	and.w	r8, r2, #2
 800495c:	f04f 0900 	mov.w	r9, #0
 8004960:	ea58 0309 	orrs.w	r3, r8, r9
 8004964:	d00b      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004966:	4bc0      	ldr	r3, [pc, #768]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800496c:	f023 010c 	bic.w	r1, r3, #12
 8004970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004976:	4abc      	ldr	r2, [pc, #752]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004978:	430b      	orrs	r3, r1
 800497a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800497e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f002 0a04 	and.w	sl, r2, #4
 800498a:	f04f 0b00 	mov.w	fp, #0
 800498e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004992:	d00b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004994:	4bb4      	ldr	r3, [pc, #720]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800499a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800499e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	4ab0      	ldr	r2, [pc, #704]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f002 0308 	and.w	r3, r2, #8
 80049b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049bc:	2300      	movs	r3, #0
 80049be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80049c6:	460b      	mov	r3, r1
 80049c8:	4313      	orrs	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80049cc:	4ba6      	ldr	r3, [pc, #664]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	4aa2      	ldr	r2, [pc, #648]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049de:	430b      	orrs	r3, r1
 80049e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f002 0310 	and.w	r3, r2, #16
 80049f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004a04:	4b98      	ldr	r3, [pc, #608]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	4a94      	ldr	r2, [pc, #592]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a16:	430b      	orrs	r3, r1
 8004a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f002 0320 	and.w	r3, r2, #32
 8004a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a36:	460b      	mov	r3, r1
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a42:	f023 0107 	bic.w	r1, r3, #7
 8004a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a4c:	4a86      	ldr	r2, [pc, #536]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d00b      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004a74:	4b7c      	ldr	r3, [pc, #496]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a7a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a84:	4a78      	ldr	r2, [pc, #480]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a86:	430b      	orrs	r3, r1
 8004a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004aa2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004aac:	4b6e      	ldr	r3, [pc, #440]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ab2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004abc:	4a6a      	ldr	r2, [pc, #424]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ada:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004ae4:	4b60      	ldr	r3, [pc, #384]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004aea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af4:	4a5c      	ldr	r2, [pc, #368]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af6:	430b      	orrs	r3, r1
 8004af8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004afc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004b1c:	4b52      	ldr	r3, [pc, #328]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b22:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b44:	2300      	movs	r3, #0
 8004b46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4313      	orrs	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004b54:	4b44      	ldr	r3, [pc, #272]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b5a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b64:	4a40      	ldr	r2, [pc, #256]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b66:	430b      	orrs	r3, r1
 8004b68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b86:	460b      	mov	r3, r1
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004b8c:	4b36      	ldr	r3, [pc, #216]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b92:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b9c:	4a32      	ldr	r2, [pc, #200]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d00c      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004bc4:	4b28      	ldr	r3, [pc, #160]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd6:	4a24      	ldr	r2, [pc, #144]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004bea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bec:	2300      	movs	r3, #0
 8004bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bf0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	d04f      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c02:	2b80      	cmp	r3, #128	@ 0x80
 8004c04:	d02d      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004c06:	2b80      	cmp	r3, #128	@ 0x80
 8004c08:	d827      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c0a:	2b60      	cmp	r3, #96	@ 0x60
 8004c0c:	d02e      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c0e:	2b60      	cmp	r3, #96	@ 0x60
 8004c10:	d823      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c12:	2b40      	cmp	r3, #64	@ 0x40
 8004c14:	d006      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004c16:	2b40      	cmp	r3, #64	@ 0x40
 8004c18:	d81f      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d011      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004c22:	e01a      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c24:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	4a0f      	ldr	r2, [pc, #60]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c30:	e01d      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c36:	3308      	adds	r3, #8
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 fa17 	bl	800706c <RCCEx_PLL2_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c44:	e013      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4a:	332c      	adds	r3, #44	@ 0x2c
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f002 faa5 	bl	800719c <RCCEx_PLL3_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c58:	e009      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c60:	e005      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004c62:	bf00      	nop
 8004c64:	e003      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004c66:	bf00      	nop
 8004c68:	46020c00 	.word	0x46020c00
        break;
 8004c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10d      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004c76:	4bb6      	ldr	r3, [pc, #728]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c7c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c88:	4ab1      	ldr	r2, [pc, #708]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c96:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ca6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ca8:	2300      	movs	r3, #0
 8004caa:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	d053      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc2:	d033      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc8:	d82c      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cce:	d02f      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cd4:	d826      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004cd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce0:	d820      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cea:	d011      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004cec:	e01a      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cee:	4b98      	ldr	r3, [pc, #608]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	4a97      	ldr	r2, [pc, #604]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004cfa:	e01a      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d00:	3308      	adds	r3, #8
 8004d02:	4618      	mov	r0, r3
 8004d04:	f002 f9b2 	bl	800706c <RCCEx_PLL2_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004d0e:	e010      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d14:	332c      	adds	r3, #44	@ 0x2c
 8004d16:	4618      	mov	r0, r3
 8004d18:	f002 fa40 	bl	800719c <RCCEx_PLL3_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004d22:	e006      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10d      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004d3a:	4b85      	ldr	r3, [pc, #532]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d40:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4c:	4a80      	ldr	r2, [pc, #512]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d56:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d5a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d70:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d046      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d86:	d028      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004d88:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d8c:	d821      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d92:	d022      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d98:	d81b      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004d9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d9e:	d01c      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004da0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004da4:	d815      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004daa:	d008      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db0:	d80f      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d011      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dba:	d00e      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004dbc:	e009      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f002 f951 	bl	800706c <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004dd0:	e004      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004dd8:	e000      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ddc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004de4:	4b5a      	ldr	r3, [pc, #360]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dea:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004df6:	4a56      	ldr	r2, [pc, #344]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004dfe:	e003      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004e08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e16:	2300      	movs	r3, #0
 8004e18:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e1a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	d03f      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d81e      	bhi.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004e30:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e77 	.word	0x08004e77
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5b 	.word	0x08004e5b
 8004e44:	08004e77 	.word	0x08004e77
 8004e48:	08004e77 	.word	0x08004e77
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e4c:	4b40      	ldr	r3, [pc, #256]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e50:	4a3f      	ldr	r2, [pc, #252]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e56:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004e58:	e00e      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e5e:	332c      	adds	r3, #44	@ 0x2c
 8004e60:	4618      	mov	r0, r3
 8004e62:	f002 f99b 	bl	800719c <RCCEx_PLL3_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e6c:	e004      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e74:	e000      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004e76:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004e80:	4b33      	ldr	r3, [pc, #204]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e86:	f023 0107 	bic.w	r1, r3, #7
 8004e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	4a2f      	ldr	r2, [pc, #188]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e94:	430b      	orrs	r3, r1
 8004e96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e9a:	e003      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ea0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d04d      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004ec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ec8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ecc:	d028      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004ece:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ed2:	d821      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004ed4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ed8:	d024      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004eda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ede:	d81b      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ee4:	d00e      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eea:	d815      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d110      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ef6:	4b16      	ldr	r3, [pc, #88]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004f02:	e012      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f08:	332c      	adds	r3, #44	@ 0x2c
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 f946 	bl	800719c <RCCEx_PLL3_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f16:	e008      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f1e:	e004      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004f20:	bf00      	nop
 8004f22:	e002      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004f24:	bf00      	nop
 8004f26:	e000      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004f28:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d110      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f44:	4a02      	ldr	r2, [pc, #8]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f46:	430b      	orrs	r3, r1
 8004f48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004f4e:	bf00      	nop
 8004f50:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f68:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004f72:	460b      	mov	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f000 80b5 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f80:	4b9d      	ldr	r3, [pc, #628]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d113      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	4b9a      	ldr	r3, [pc, #616]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f94:	4a98      	ldr	r2, [pc, #608]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f9e:	4b96      	ldr	r3, [pc, #600]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004fb6:	4b91      	ldr	r3, [pc, #580]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	4a90      	ldr	r2, [pc, #576]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fc2:	f7fc fde9 	bl	8001b98 <HAL_GetTick>
 8004fc6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7fc fde4 	bl	8001b98 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d903      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fe4:	4b85      	ldr	r3, [pc, #532]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ed      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004ff0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d165      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ff8:	4b7f      	ldr	r3, [pc, #508]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d023      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800500e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005012:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800501e:	4b76      	ldr	r3, [pc, #472]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4b72      	ldr	r3, [pc, #456]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800502e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005032:	4a71      	ldr	r2, [pc, #452]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800503c:	4b6e      	ldr	r3, [pc, #440]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800503e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005042:	4a6d      	ldr	r2, [pc, #436]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005048:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800504c:	4a6a      	ldr	r2, [pc, #424]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005052:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d019      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fc fd99 	bl	8001b98 <HAL_GetTick>
 8005066:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506a:	e00d      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fc fd94 	bl	8001b98 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	f241 3388 	movw	r3, #5000	@ 0x1388
 800507c:	429a      	cmp	r2, r3
 800507e:	d903      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005086:	e006      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005088:	4b5b      	ldr	r3, [pc, #364]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800508a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ea      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005096:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10d      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800509e:	4b56      	ldr	r3, [pc, #344]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80050b0:	4a51      	ldr	r2, [pc, #324]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050be:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050cc:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d4:	4b48      	ldr	r3, [pc, #288]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050da:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80050e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80050f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f2:	2300      	movs	r3, #0
 80050f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80050fa:	460b      	mov	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	d042      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005108:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800510c:	d022      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800510e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005112:	d81b      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005118:	d011      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800511a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800511e:	d815      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d019      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005124:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005128:	d110      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800512a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800512e:	3308      	adds	r3, #8
 8005130:	4618      	mov	r0, r3
 8005132:	f001 ff9b 	bl	800706c <RCCEx_PLL2_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800513c:	e00d      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513e:	4b2e      	ldr	r3, [pc, #184]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	4a2d      	ldr	r2, [pc, #180]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005148:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800514a:	e006      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005152:	e002      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005154:	bf00      	nop
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005158:	bf00      	nop
    }
    if (ret == HAL_OK)
 800515a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10d      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005162:	4b25      	ldr	r3, [pc, #148]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005168:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800516c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005174:	4a20      	ldr	r2, [pc, #128]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005176:	430b      	orrs	r3, r1
 8005178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800517c:	e003      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005182:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005192:	643b      	str	r3, [r7, #64]	@ 0x40
 8005194:	2300      	movs	r3, #0
 8005196:	647b      	str	r3, [r7, #68]	@ 0x44
 8005198:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d032      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80051a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ae:	d00b      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b4:	d804      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d008      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051be:	d007      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051c6:	e004      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80051c8:	bf00      	nop
 80051ca:	e002      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80051d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d112      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051ec:	4a02      	ldr	r2, [pc, #8]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80051f6:	bf00      	nop
 80051f8:	46020c00 	.word	0x46020c00
 80051fc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005204:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005216:	2300      	movs	r3, #0
 8005218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800521a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d00c      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005224:	4b98      	ldr	r3, [pc, #608]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800522a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800522e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005232:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005236:	4a94      	ldr	r2, [pc, #592]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005238:	430b      	orrs	r3, r1
 800523a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800523e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800524a:	633b      	str	r3, [r7, #48]	@ 0x30
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005250:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005254:	460b      	mov	r3, r1
 8005256:	4313      	orrs	r3, r2
 8005258:	d019      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800525a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800525e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005268:	4b87      	ldr	r3, [pc, #540]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	4a86      	ldr	r2, [pc, #536]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800526e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005272:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005274:	4b84      	ldr	r3, [pc, #528]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005276:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800527a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800527e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005286:	4a80      	ldr	r2, [pc, #512]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005288:	430b      	orrs	r3, r1
 800528a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800528e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529c:	2300      	movs	r3, #0
 800529e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052a4:	460b      	mov	r3, r1
 80052a6:	4313      	orrs	r3, r2
 80052a8:	d00c      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80052aa:	4b77      	ldr	r3, [pc, #476]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052bc:	4972      	ldr	r1, [pc, #456]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80052c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	2300      	movs	r3, #0
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052da:	460b      	mov	r3, r1
 80052dc:	4313      	orrs	r3, r2
 80052de:	d00c      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80052e0:	4b69      	ldr	r3, [pc, #420]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80052f2:	4965      	ldr	r1, [pc, #404]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80052fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d00c      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005316:	4b5c      	ldr	r3, [pc, #368]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800531c:	f023 0218 	bic.w	r2, r3, #24
 8005320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005324:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005328:	4957      	ldr	r1, [pc, #348]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005346:	460b      	mov	r3, r1
 8005348:	4313      	orrs	r3, r2
 800534a:	d032      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800534c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005354:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005358:	d105      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800535a:	4b4b      	ldr	r3, [pc, #300]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	4a4a      	ldr	r2, [pc, #296]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005364:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800536a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800536e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005372:	d108      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005378:	3308      	adds	r3, #8
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fe76 	bl	800706c <RCCEx_PLL2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8005386:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10d      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800538e:	4b3e      	ldr	r3, [pc, #248]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005394:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005398:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800539c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053a0:	4939      	ldr	r1, [pc, #228]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80053a8:	e003      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053ae:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80053b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d03a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80053ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053da:	d00e      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80053dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053e0:	d815      	bhi.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d017      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80053e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053ea:	d110      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ec:	4b26      	ldr	r3, [pc, #152]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	4a25      	ldr	r2, [pc, #148]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80053f8:	e00e      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fe:	3308      	adds	r3, #8
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fe33 	bl	800706c <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800540c:	e004      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005416:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005418:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10d      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005420:	4b19      	ldr	r3, [pc, #100]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005426:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005432:	4915      	ldr	r1, [pc, #84]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800543a:	e003      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005440:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	e9d7 1200 	ldrd	r1, r2, [r7]
 800545a:	460b      	mov	r3, r1
 800545c:	4313      	orrs	r3, r2
 800545e:	d00c      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005460:	4b09      	ldr	r3, [pc, #36]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005466:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800546a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800546e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005472:	4905      	ldr	r1, [pc, #20]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800547a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800547e:	4618      	mov	r0, r3
 8005480:	37e8      	adds	r7, #232	@ 0xe8
 8005482:	46bd      	mov	sp, r7
 8005484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005488:	46020c00 	.word	0x46020c00

0800548c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	@ 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005494:	4ba6      	ldr	r3, [pc, #664]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800549e:	4ba4      	ldr	r3, [pc, #656]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80054a8:	4ba1      	ldr	r3, [pc, #644]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3301      	adds	r3, #1
 80054b4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80054b6:	4b9e      	ldr	r3, [pc, #632]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80054c2:	4b9b      	ldr	r3, [pc, #620]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c6:	08db      	lsrs	r3, r3, #3
 80054c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d062      	beq.n	80055aa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	f200 8081 	bhi.w	80055ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d024      	beq.n	800553c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d17a      	bne.n	80055ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b89      	ldr	r3, [pc, #548]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800550c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800551a:	ed97 6a02 	vldr	s12, [r7, #8]
 800551e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800552a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800553a:	e08f      	b.n	800565c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800553c:	4b7c      	ldr	r3, [pc, #496]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005548:	4b79      	ldr	r3, [pc, #484]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	0f1b      	lsrs	r3, r3, #28
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	e006      	b.n	8005562 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005554:	4b76      	ldr	r3, [pc, #472]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	0f1b      	lsrs	r3, r3, #28
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	4a76      	ldr	r2, [pc, #472]	@ (800573c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005588:	ed97 6a02 	vldr	s12, [r7, #8]
 800558c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800559c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80055a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055a8:	e058      	b.n	800565c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80055b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80055d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80055d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ec:	e036      	b.n	800565c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80055ee:	4b50      	ldr	r3, [pc, #320]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80055fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0f1b      	lsrs	r3, r3, #28
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	e006      	b.n	8005614 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005606:	4b4a      	ldr	r3, [pc, #296]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	0f1b      	lsrs	r3, r3, #28
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	4a49      	ldr	r2, [pc, #292]	@ (800573c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a02 	vldr	s12, [r7, #8]
 800563e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800565a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800565c:	4b34      	ldr	r3, [pc, #208]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d017      	beq.n	8005698 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005668:	4b31      	ldr	r3, [pc, #196]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800566a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566c:	0a5b      	lsrs	r3, r3, #9
 800566e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800567a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800567e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005682:	edd7 6a07 	vldr	s13, [r7, #28]
 8005686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568e:	ee17 2a90 	vmov	r2, s15
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	e002      	b.n	800569e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800569e:	4b24      	ldr	r3, [pc, #144]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d017      	beq.n	80056da <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ae:	0c1b      	lsrs	r3, r3, #16
 80056b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80056bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056c0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80056c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d0:	ee17 2a90 	vmov	r2, s15
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	e002      	b.n	80056e0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80056e0:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d017      	beq.n	800571c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80056ec:	4b10      	ldr	r3, [pc, #64]	@ (8005730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f0:	0e1b      	lsrs	r3, r3, #24
 80056f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80056fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005702:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005706:	edd7 6a07 	vldr	s13, [r7, #28]
 800570a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800570e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005712:	ee17 2a90 	vmov	r2, s15
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800571a:	e002      	b.n	8005722 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	3724      	adds	r7, #36	@ 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	46020c00 	.word	0x46020c00
 8005734:	4b742400 	.word	0x4b742400
 8005738:	46000000 	.word	0x46000000
 800573c:	0800a0d4 	.word	0x0800a0d4

08005740 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	@ 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005748:	4ba6      	ldr	r3, [pc, #664]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005750:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005752:	4ba4      	ldr	r3, [pc, #656]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800575c:	4ba1      	ldr	r3, [pc, #644]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	3301      	adds	r3, #1
 8005768:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800576a:	4b9e      	ldr	r3, [pc, #632]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	091b      	lsrs	r3, r3, #4
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005776:	4b9b      	ldr	r3, [pc, #620]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	08db      	lsrs	r3, r3, #3
 800577c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d062      	beq.n	800585e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b03      	cmp	r3, #3
 800579c:	f200 8081 	bhi.w	80058a2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d024      	beq.n	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d17a      	bne.n	80058a2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b89      	ldr	r3, [pc, #548]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80059ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80057de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ee:	e08f      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80057f0:	4b7c      	ldr	r3, [pc, #496]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80057fc:	4b79      	ldr	r3, [pc, #484]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	0f1b      	lsrs	r3, r3, #28
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	e006      	b.n	8005816 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005808:	4b76      	ldr	r3, [pc, #472]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800580a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	0f1b      	lsrs	r3, r3, #28
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	4a76      	ldr	r2, [pc, #472]	@ (80059f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005840:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80059ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005850:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800585c:	e058      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005868:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800586c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005870:	4b5c      	ldr	r3, [pc, #368]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005880:	ed97 6a02 	vldr	s12, [r7, #8]
 8005884:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80059ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005888:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800588c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005890:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005894:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058a0:	e036      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80058a2:	4b50      	ldr	r3, [pc, #320]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80058ae:	4b4d      	ldr	r3, [pc, #308]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0f1b      	lsrs	r3, r3, #28
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80058ba:	4b4a      	ldr	r3, [pc, #296]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	0f1b      	lsrs	r3, r3, #28
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	4a49      	ldr	r2, [pc, #292]	@ (80059f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80058ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80059ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800590e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005910:	4b34      	ldr	r3, [pc, #208]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d017      	beq.n	800594c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800591c:	4b31      	ldr	r3, [pc, #196]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005920:	0a5b      	lsrs	r3, r3, #9
 8005922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800592e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005932:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005936:	edd7 6a07 	vldr	s13, [r7, #28]
 800593a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005942:	ee17 2a90 	vmov	r2, s15
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e002      	b.n	8005952 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005952:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d017      	beq.n	800598e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800595e:	4b21      	ldr	r3, [pc, #132]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005962:	0c1b      	lsrs	r3, r3, #16
 8005964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005970:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005974:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005978:	edd7 6a07 	vldr	s13, [r7, #28]
 800597c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005984:	ee17 2a90 	vmov	r2, s15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	e002      	b.n	8005994 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005994:	4b13      	ldr	r3, [pc, #76]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059a0:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	0e1b      	lsrs	r3, r3, #24
 80059a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80059b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80059be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c6:	ee17 2a90 	vmov	r2, s15
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059ce:	e002      	b.n	80059d6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	609a      	str	r2, [r3, #8]
}
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	@ 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	46020c00 	.word	0x46020c00
 80059e8:	4b742400 	.word	0x4b742400
 80059ec:	46000000 	.word	0x46000000
 80059f0:	0800a0d4 	.word	0x0800a0d4

080059f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80059fc:	4ba6      	ldr	r3, [pc, #664]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80059fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a04:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005a06:	4ba4      	ldr	r3, [pc, #656]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005a10:	4ba1      	ldr	r3, [pc, #644]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d062      	beq.n	8005b12 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	f200 8081 	bhi.w	8005b56 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d024      	beq.n	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d17a      	bne.n	8005b56 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b89      	ldr	r3, [pc, #548]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005aa2:	e08f      	b.n	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005aa4:	4b7c      	ldr	r3, [pc, #496]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005ab0:	4b79      	ldr	r3, [pc, #484]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	0f1b      	lsrs	r3, r3, #28
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	e006      	b.n	8005aca <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005abc:	4b76      	ldr	r3, [pc, #472]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	0f1b      	lsrs	r3, r3, #28
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	4a76      	ldr	r2, [pc, #472]	@ (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005af4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b10:	e058      	b.n	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	ee07 3a90 	vmov	s15, r3
 8005b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b24:	4b5c      	ldr	r3, [pc, #368]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2c:	ee07 3a90 	vmov	s15, r3
 8005b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b34:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b38:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b54:	e036      	b.n	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b56:	4b50      	ldr	r3, [pc, #320]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005b62:	4b4d      	ldr	r3, [pc, #308]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0f1b      	lsrs	r3, r3, #28
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	e006      	b.n	8005b7c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	0f1b      	lsrs	r3, r3, #28
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	4a49      	ldr	r2, [pc, #292]	@ (8005ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	ee07 3a90 	vmov	s15, r3
 8005b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ba6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005bc4:	4b34      	ldr	r3, [pc, #208]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d017      	beq.n	8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005bd0:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd4:	0a5b      	lsrs	r3, r3, #9
 8005bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005be6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf6:	ee17 2a90 	vmov	r2, s15
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005c06:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c12:	4b21      	ldr	r3, [pc, #132]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c16:	0c1b      	lsrs	r3, r3, #16
 8005c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005c24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c28:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c38:	ee17 2a90 	vmov	r2, s15
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005c48:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c54:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c58:	0e1b      	lsrs	r3, r3, #24
 8005c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7a:	ee17 2a90 	vmov	r2, s15
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c82:	e002      	b.n	8005c8a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
}
 8005c8a:	bf00      	nop
 8005c8c:	3724      	adds	r7, #36	@ 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	46020c00 	.word	0x46020c00
 8005c9c:	4b742400 	.word	0x4b742400
 8005ca0:	46000000 	.word	0x46000000
 8005ca4:	0800a0d4 	.word	0x0800a0d4

08005ca8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	@ 0x38
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	d145      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005cbe:	4ba7      	ldr	r3, [pc, #668]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cc8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005cca:	4ba4      	ldr	r3, [pc, #656]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d108      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cde:	d104      	bne.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ce6:	f001 b9b3 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005cea:	4b9c      	ldr	r3, [pc, #624]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cf8:	d114      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d00:	d110      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d02:	4b96      	ldr	r3, [pc, #600]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d10:	d103      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005d12:	23fa      	movs	r3, #250	@ 0xfa
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d16:	f001 b99b 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005d1a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005d1e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d20:	f001 b996 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005d24:	4b8d      	ldr	r3, [pc, #564]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d30:	d107      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d38:	d103      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005d3a:	4b89      	ldr	r3, [pc, #548]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3e:	f001 b987 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d46:	f001 b983 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005d52:	430b      	orrs	r3, r1
 8005d54:	d151      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005d56:	4b81      	ldr	r3, [pc, #516]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d5c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005d60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	2b80      	cmp	r3, #128	@ 0x80
 8005d66:	d035      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	2b80      	cmp	r3, #128	@ 0x80
 8005d6c:	d841      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d70:	2b60      	cmp	r3, #96	@ 0x60
 8005d72:	d02a      	beq.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	2b60      	cmp	r3, #96	@ 0x60
 8005d78:	d83b      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	2b40      	cmp	r3, #64	@ 0x40
 8005d7e:	d009      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d82:	2b40      	cmp	r3, #64	@ 0x40
 8005d84:	d835      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00c      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d012      	beq.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005d92:	e02e      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fb77 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005da2:	f001 b955 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da6:	f107 0318 	add.w	r3, r7, #24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fcc8 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005db4:	f001 b94c 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db8:	f107 030c 	add.w	r3, r7, #12
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fe19 	bl	80059f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dc6:	f001 b943 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005dca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005dce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dd0:	f001 b93e 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dd4:	4b61      	ldr	r3, [pc, #388]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de0:	d103      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005de2:	4b60      	ldr	r3, [pc, #384]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005de6:	f001 b933 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dee:	f001 b92f 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005df6:	f001 b92b 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfe:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005e02:	430b      	orrs	r3, r1
 8005e04:	d158      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005e06:	4b55      	ldr	r3, [pc, #340]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e18:	d03b      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e20:	d846      	bhi.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e28:	d02e      	beq.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e30:	d83e      	bhi.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e38:	d00b      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e40:	d836      	bhi.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4e:	d012      	beq.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005e50:	e02e      	b.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff fb18 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e60:	f001 b8f6 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e64:	f107 0318 	add.w	r3, r7, #24
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fc69 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e72:	f001 b8ed 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e76:	f107 030c 	add.w	r3, r7, #12
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fdba 	bl	80059f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e84:	f001 b8e4 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e88:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e8e:	f001 b8df 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e92:	4b32      	ldr	r3, [pc, #200]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9e:	d103      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005ea0:	4b30      	ldr	r3, [pc, #192]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ea2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ea4:	f001 b8d4 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eac:	f001 b8d0 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb4:	f001 b8cc 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ebc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	d126      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005ec4:	4b25      	ldr	r3, [pc, #148]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005eca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ece:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005ed0:	4b22      	ldr	r3, [pc, #136]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005edc:	d106      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d103      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee8:	f001 b8b2 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005eec:	4b1b      	ldr	r3, [pc, #108]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f00:	d103      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005f02:	4b19      	ldr	r3, [pc, #100]	@ (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f06:	f001 b8a3 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0e:	f001 b89f 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f16:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	d16e      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f24:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005f28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f30:	d03d      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f38:	d85c      	bhi.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f40:	d014      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f48:	d854      	bhi.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01f      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f56:	d012      	beq.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005f58:	e04c      	b.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005f5a:	bf00      	nop
 8005f5c:	46020c00 	.word	0x46020c00
 8005f60:	0007a120 	.word	0x0007a120
 8005f64:	00f42400 	.word	0x00f42400
 8005f68:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fa8b 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f7a:	f001 b869 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f7e:	f107 0318 	add.w	r3, r7, #24
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fbdc 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f8c:	f001 b860 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005f90:	4ba7      	ldr	r3, [pc, #668]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9c:	d103      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005f9e:	4ba5      	ldr	r3, [pc, #660]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fa2:	f001 b855 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005faa:	f001 b851 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005fae:	4ba0      	ldr	r3, [pc, #640]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d118      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fba:	4b9d      	ldr	r3, [pc, #628]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005fc6:	4b9a      	ldr	r3, [pc, #616]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	0e1b      	lsrs	r3, r3, #24
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	e006      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005fd2:	4b97      	ldr	r3, [pc, #604]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	0e1b      	lsrs	r3, r3, #24
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	4a95      	ldr	r2, [pc, #596]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fe8:	f001 b832 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ff0:	f001 b82e 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ff8:	f001 b82a 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006000:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006004:	430b      	orrs	r3, r1
 8006006:	d17f      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006008:	4b89      	ldr	r3, [pc, #548]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800600a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800600e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006012:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	2b00      	cmp	r3, #0
 8006018:	d165      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800601a:	4b85      	ldr	r3, [pc, #532]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800601c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006020:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006024:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800602c:	d034      	beq.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006034:	d853      	bhi.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800603c:	d00b      	beq.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006044:	d84b      	bhi.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d016      	beq.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006052:	d009      	beq.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006054:	e043      	b.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fa16 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006064:	f000 bff4 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006068:	f107 0318 	add.w	r3, r7, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fb67 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006076:	f000 bfeb 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800607a:	4b6d      	ldr	r3, [pc, #436]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006086:	d103      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006088:	4b6a      	ldr	r3, [pc, #424]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800608c:	f000 bfe0 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006094:	f000 bfdc 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006098:	4b65      	ldr	r3, [pc, #404]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d118      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060a4:	4b62      	ldr	r3, [pc, #392]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80060b0:	4b5f      	ldr	r3, [pc, #380]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	0e1b      	lsrs	r3, r3, #24
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	e006      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80060bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060c2:	041b      	lsls	r3, r3, #16
 80060c4:	0e1b      	lsrs	r3, r3, #24
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80060d2:	f000 bfbd 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80060da:	f000 bfb9 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80060e2:	f000 bfb5 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060ec:	d108      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff f9ca 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80060fc:	f000 bfa8 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	637b      	str	r3, [r7, #52]	@ 0x34
 8006104:	f000 bfa4 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610c:	1e51      	subs	r1, r2, #1
 800610e:	430b      	orrs	r3, r1
 8006110:	d136      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006112:	4b47      	ldr	r3, [pc, #284]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006124:	f7fe fb44 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8006128:	6378      	str	r0, [r7, #52]	@ 0x34
 800612a:	f000 bf91 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	2b01      	cmp	r3, #1
 8006132:	d104      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006134:	f7fe fa0c 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006138:	6378      	str	r0, [r7, #52]	@ 0x34
 800613a:	f000 bf89 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800613e:	4b3c      	ldr	r3, [pc, #240]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800614a:	d106      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	2b02      	cmp	r3, #2
 8006150:	d103      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006152:	4b3a      	ldr	r3, [pc, #232]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
 8006156:	f000 bf7b 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800615a:	4b35      	ldr	r3, [pc, #212]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800615c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d107      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	2b03      	cmp	r3, #3
 800616c:	d104      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800616e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
 8006174:	f000 bf6c 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
 800617c:	f000 bf68 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006184:	1e91      	subs	r1, r2, #2
 8006186:	430b      	orrs	r3, r1
 8006188:	d136      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800618a:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800618c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800619c:	f7fe faf4 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 80061a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80061a2:	f000 bf55 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d104      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061ac:	f7fe f9d0 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80061b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80061b2:	f000 bf4d 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80061b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c2:	d106      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d103      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80061ca:	4b1c      	ldr	r3, [pc, #112]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80061cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ce:	f000 bf3f 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80061d2:	4b17      	ldr	r3, [pc, #92]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d107      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d104      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80061e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ec:	f000 bf30 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f4:	f000 bf2c 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80061f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061fc:	1f11      	subs	r1, r2, #4
 80061fe:	430b      	orrs	r3, r1
 8006200:	d13f      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006202:	4b0b      	ldr	r3, [pc, #44]	@ (8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006208:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800620c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006214:	f7fe fab8 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 8006218:	6378      	str	r0, [r7, #52]	@ 0x34
 800621a:	f000 bf19 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	2b10      	cmp	r3, #16
 8006222:	d10d      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006224:	f7fe f994 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006228:	6378      	str	r0, [r7, #52]	@ 0x34
 800622a:	f000 bf11 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800622e:	bf00      	nop
 8006230:	46020c00 	.word	0x46020c00
 8006234:	02dc6c00 	.word	0x02dc6c00
 8006238:	0800a0d4 	.word	0x0800a0d4
 800623c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006240:	4ba6      	ldr	r3, [pc, #664]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624c:	d106      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	2b20      	cmp	r3, #32
 8006252:	d103      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006254:	4ba2      	ldr	r3, [pc, #648]	@ (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34
 8006258:	f000 befa 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800625c:	4b9f      	ldr	r3, [pc, #636]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800625e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d107      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	2b30      	cmp	r3, #48	@ 0x30
 800626e:	d104      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006270:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
 8006276:	f000 beeb 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
 800627e:	f000 bee7 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006286:	f1a2 0108 	sub.w	r1, r2, #8
 800628a:	430b      	orrs	r3, r1
 800628c:	d136      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800628e:	4b93      	ldr	r3, [pc, #588]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006294:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006298:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe fa72 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 80062a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80062a6:	f000 bed3 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d104      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062b0:	f7fe f94e 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80062b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80062b6:	f000 becb 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80062ba:	4b88      	ldr	r3, [pc, #544]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c6:	d106      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	2b80      	cmp	r3, #128	@ 0x80
 80062cc:	d103      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80062ce:	4b84      	ldr	r3, [pc, #528]	@ (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d2:	f000 bebd 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80062d6:	4b81      	ldr	r3, [pc, #516]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d107      	bne.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80062e8:	d104      	bne.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80062ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f0:	f000 beae 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f8:	f000 beaa 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80062fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006300:	f1a2 0110 	sub.w	r1, r2, #16
 8006304:	430b      	orrs	r3, r1
 8006306:	d139      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006308:	4b74      	ldr	r3, [pc, #464]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800630a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800630e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006312:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800631a:	f7fe fa35 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 800631e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006320:	f000 be96 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632a:	d104      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800632c:	f7fe f910 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006330:	6378      	str	r0, [r7, #52]	@ 0x34
 8006332:	f000 be8d 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006336:	4b69      	ldr	r3, [pc, #420]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800633e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006342:	d107      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800634a:	d103      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800634c:	4b64      	ldr	r3, [pc, #400]	@ (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800634e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006350:	f000 be7e 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006354:	4b61      	ldr	r3, [pc, #388]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d108      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006368:	d104      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800636a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800636e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006370:	f000 be6e 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	637b      	str	r3, [r7, #52]	@ 0x34
 8006378:	f000 be6a 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800637c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006380:	f1a2 0120 	sub.w	r1, r2, #32
 8006384:	430b      	orrs	r3, r1
 8006386:	d158      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006388:	4b54      	ldr	r3, [pc, #336]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800638a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800639a:	f7fe fa1d 	bl	80047d8 <HAL_RCC_GetPCLK3Freq>
 800639e:	6378      	str	r0, [r7, #52]	@ 0x34
 80063a0:	f000 be56 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d104      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063aa:	f7fe f8d1 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80063ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80063b0:	f000 be4e 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80063b4:	4b49      	ldr	r3, [pc, #292]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c0:	d106      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d103      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80063c8:	4b45      	ldr	r3, [pc, #276]	@ (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80063ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80063cc:	f000 be40 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80063d0:	4b42      	ldr	r3, [pc, #264]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d107      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d104      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80063e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ea:	f000 be31 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80063ee:	4b3b      	ldr	r3, [pc, #236]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d11b      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d118      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006400:	4b36      	ldr	r3, [pc, #216]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800640c:	4b33      	ldr	r3, [pc, #204]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	e006      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006418:	4b30      	ldr	r3, [pc, #192]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800641a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	0e1b      	lsrs	r3, r3, #24
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	4a2f      	ldr	r2, [pc, #188]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642c:	637b      	str	r3, [r7, #52]	@ 0x34
 800642e:	f000 be0f 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	@ 0x34
 8006436:	f000 be0b 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800643a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006442:	430b      	orrs	r3, r1
 8006444:	d172      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006446:	4b25      	ldr	r3, [pc, #148]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800644c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006450:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006458:	d104      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800645a:	f7fe f879 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 800645e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006460:	f000 bdf6 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646a:	d108      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800646c:	f107 0318 	add.w	r3, r7, #24
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff f965 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
 800647a:	f000 bde9 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006484:	f7fe f966 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 8006488:	6378      	str	r0, [r7, #52]	@ 0x34
 800648a:	f000 bde1 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006494:	d128      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006496:	4b11      	ldr	r3, [pc, #68]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d118      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064a2:	4b0e      	ldr	r3, [pc, #56]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80064ae:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	0e1b      	lsrs	r3, r3, #24
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	e006      	b.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80064ba:	4b08      	ldr	r3, [pc, #32]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064c0:	041b      	lsls	r3, r3, #16
 80064c2:	0e1b      	lsrs	r3, r3, #24
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	4a06      	ldr	r2, [pc, #24]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d0:	f000 bdbe 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d8:	f000 bdba 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80064dc:	46020c00 	.word	0x46020c00
 80064e0:	00f42400 	.word	0x00f42400
 80064e4:	0800a0d4 	.word	0x0800a0d4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80064e8:	4baf      	ldr	r3, [pc, #700]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064f4:	d107      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80064f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064fc:	d103      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80064fe:	4bab      	ldr	r3, [pc, #684]	@ (80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006500:	637b      	str	r3, [r7, #52]	@ 0x34
 8006502:	f000 bda5 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006506:	4ba8      	ldr	r3, [pc, #672]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006512:	d107      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800651a:	d103      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800651c:	4ba3      	ldr	r3, [pc, #652]	@ (80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800651e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006520:	f000 bd96 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
 8006528:	f000 bd92 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800652c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006530:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006534:	430b      	orrs	r3, r1
 8006536:	d158      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006538:	4b9b      	ldr	r3, [pc, #620]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800653a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	2b04      	cmp	r3, #4
 8006548:	d84b      	bhi.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800654a:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006589 	.word	0x08006589
 8006554:	08006565 	.word	0x08006565
 8006558:	08006577 	.word	0x08006577
 800655c:	08006593 	.word	0x08006593
 8006560:	0800659d 	.word	0x0800659d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe ff8f 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006572:	f000 bd6d 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006576:	f107 030c 	add.w	r3, r7, #12
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fa3a 	bl	80059f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006584:	f000 bd64 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006588:	f7fe f8e4 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 800658c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800658e:	f000 bd5f 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006592:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006596:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006598:	f000 bd5a 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800659c:	4b82      	ldr	r3, [pc, #520]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d118      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065a8:	4b7f      	ldr	r3, [pc, #508]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80065b4:	4b7c      	ldr	r3, [pc, #496]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	0e1b      	lsrs	r3, r3, #24
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	e006      	b.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80065c0:	4b79      	ldr	r3, [pc, #484]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	0e1b      	lsrs	r3, r3, #24
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	4a78      	ldr	r2, [pc, #480]	@ (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80065d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065d6:	f000 bd3b 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065de:	f000 bd37 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065e6:	f000 bd33 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80065ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ee:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80065f2:	430b      	orrs	r3, r1
 80065f4:	d167      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80065f6:	4b6c      	ldr	r3, [pc, #432]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065fc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006608:	d036      	beq.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006610:	d855      	bhi.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006618:	d029      	beq.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006620:	d84d      	bhi.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006628:	d013      	beq.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006630:	d845      	bhi.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	2b00      	cmp	r3, #0
 8006636:	d015      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663e:	d13e      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe ff21 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800664e:	f000 bcff 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006652:	f107 030c 	add.w	r3, r7, #12
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff f9cc 	bl	80059f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006660:	f000 bcf6 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006664:	f7fe f876 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 8006668:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800666a:	f000 bcf1 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800666e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006672:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006674:	f000 bcec 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006678:	4b4b      	ldr	r3, [pc, #300]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b20      	cmp	r3, #32
 8006682:	d118      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006684:	4b48      	ldr	r3, [pc, #288]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006690:	4b45      	ldr	r3, [pc, #276]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	0e1b      	lsrs	r3, r3, #24
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	e006      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800669c:	4b42      	ldr	r3, [pc, #264]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800669e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066a2:	041b      	lsls	r3, r3, #16
 80066a4:	0e1b      	lsrs	r3, r3, #24
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	4a41      	ldr	r2, [pc, #260]	@ (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80066ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066b2:	f000 bccd 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ba:	f000 bcc9 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066c2:	f000 bcc5 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80066c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ca:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80066ce:	430b      	orrs	r3, r1
 80066d0:	d14c      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80066d2:	4b35      	ldr	r3, [pc, #212]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066dc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fe f850 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 80066e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80066ea:	f000 bcb1 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f4:	d104      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066f6:	f7fd ff2b 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80066fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80066fc:	f000 bca8 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006700:	4b29      	ldr	r3, [pc, #164]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670c:	d107      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006714:	d103      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006716:	4b25      	ldr	r3, [pc, #148]	@ (80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006718:	637b      	str	r3, [r7, #52]	@ 0x34
 800671a:	f000 bc99 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800671e:	4b22      	ldr	r3, [pc, #136]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	d11c      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006730:	d118      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006732:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800673e:	4b1a      	ldr	r3, [pc, #104]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	0e1b      	lsrs	r3, r3, #24
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800674a:	4b17      	ldr	r3, [pc, #92]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800674c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	0e1b      	lsrs	r3, r3, #24
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	4a15      	ldr	r2, [pc, #84]	@ (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800675a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006760:	f000 bc76 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	637b      	str	r3, [r7, #52]	@ 0x34
 8006768:	f000 bc72 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800676c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006770:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006774:	430b      	orrs	r3, r1
 8006776:	d153      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006778:	4b0b      	ldr	r3, [pc, #44]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800677a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800677e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006782:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800678a:	f7fd fffd 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 800678e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006790:	f000 bc5e 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679a:	d10b      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800679c:	f7fd fed8 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 80067a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067a2:	f000 bc55 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80067a6:	bf00      	nop
 80067a8:	46020c00 	.word	0x46020c00
 80067ac:	00f42400 	.word	0x00f42400
 80067b0:	0800a0d4 	.word	0x0800a0d4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80067b4:	4ba1      	ldr	r3, [pc, #644]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c0:	d107      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c8:	d103      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80067ca:	4b9d      	ldr	r3, [pc, #628]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ce:	f000 bc3f 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80067d2:	4b9a      	ldr	r3, [pc, #616]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d11c      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067e4:	d118      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067e6:	4b95      	ldr	r3, [pc, #596]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80067f2:	4b92      	ldr	r3, [pc, #584]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	0e1b      	lsrs	r3, r3, #24
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	e006      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80067fe:	4b8f      	ldr	r3, [pc, #572]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	0e1b      	lsrs	r3, r3, #24
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	4a8d      	ldr	r2, [pc, #564]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800680e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
 8006814:	f000 bc1c 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	637b      	str	r3, [r7, #52]	@ 0x34
 800681c:	f000 bc18 	b.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006824:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006828:	430b      	orrs	r3, r1
 800682a:	d151      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800682c:	4b83      	ldr	r3, [pc, #524]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800682e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006832:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006836:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	2bc0      	cmp	r3, #192	@ 0xc0
 800683c:	d024      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	2bc0      	cmp	r3, #192	@ 0xc0
 8006842:	d842      	bhi.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	2b80      	cmp	r3, #128	@ 0x80
 8006848:	d00d      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2b80      	cmp	r3, #128	@ 0x80
 800684e:	d83c      	bhi.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	2b40      	cmp	r3, #64	@ 0x40
 800685a:	d011      	beq.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800685c:	e035      	b.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800685e:	f7fd ffbb 	bl	80047d8 <HAL_RCC_GetPCLK3Freq>
 8006862:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006864:	e3f4      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006866:	4b75      	ldr	r3, [pc, #468]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006872:	d102      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8006874:	4b72      	ldr	r3, [pc, #456]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006878:	e3ea      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687e:	e3e7      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006880:	f7fd fe66 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006884:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006886:	e3e3      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006888:	4b6c      	ldr	r3, [pc, #432]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b20      	cmp	r3, #32
 8006892:	d117      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006894:	4b69      	ldr	r3, [pc, #420]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80068a0:	4b66      	ldr	r3, [pc, #408]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	e006      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80068ac:	4b63      	ldr	r3, [pc, #396]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	0e1b      	lsrs	r3, r3, #24
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	4a62      	ldr	r2, [pc, #392]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80068bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068c2:	e3c5      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068c8:	e3c2      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068ce:	e3bf      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80068d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80068d8:	430b      	orrs	r3, r1
 80068da:	d147      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80068dc:	4b57      	ldr	r3, [pc, #348]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80068e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068ee:	f7fd ff4b 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 80068f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80068f4:	e3ac      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068fc:	d103      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fd fe27 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006902:	6378      	str	r0, [r7, #52]	@ 0x34
 8006904:	e3a4      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006906:	4b4d      	ldr	r3, [pc, #308]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006912:	d106      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800691a:	d102      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800691c:	4b48      	ldr	r3, [pc, #288]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006920:	e396      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006922:	4b46      	ldr	r3, [pc, #280]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	d11b      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006934:	d117      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006936:	4b41      	ldr	r3, [pc, #260]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006942:	4b3e      	ldr	r3, [pc, #248]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	0e1b      	lsrs	r3, r3, #24
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	e006      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800694e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	0e1b      	lsrs	r3, r3, #24
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	4a39      	ldr	r2, [pc, #228]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800695e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006962:	637b      	str	r3, [r7, #52]	@ 0x34
 8006964:	e374      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
 800696a:	e371      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800696c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006970:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006974:	430b      	orrs	r3, r1
 8006976:	d16a      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006978:	4b30      	ldr	r3, [pc, #192]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800697a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800697e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006982:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	2b00      	cmp	r3, #0
 8006988:	d120      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800698a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b20      	cmp	r3, #32
 8006994:	d117      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006996:	4b29      	ldr	r3, [pc, #164]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80069a2:	4b26      	ldr	r3, [pc, #152]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	0e1b      	lsrs	r3, r3, #24
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80069ae:	4b23      	ldr	r3, [pc, #140]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069b4:	041b      	lsls	r3, r3, #16
 80069b6:	0e1b      	lsrs	r3, r3, #24
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	4a21      	ldr	r2, [pc, #132]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80069be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c4:	e344      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ca:	e341      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80069cc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069da:	d112      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e2:	d10e      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069e4:	4b15      	ldr	r3, [pc, #84]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069f2:	d102      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80069f4:	23fa      	movs	r3, #250	@ 0xfa
 80069f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069f8:	e32a      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80069fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a00:	e326      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006a02:	4b0e      	ldr	r3, [pc, #56]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a16:	d102      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006a18:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1c:	e318      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006a1e:	4b07      	ldr	r3, [pc, #28]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d10d      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a32:	d109      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8006a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3a:	e309      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006a3c:	46020c00 	.word	0x46020c00
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	0800a0d4 	.word	0x0800a0d4
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4c:	e300      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a52:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006a56:	430b      	orrs	r3, r1
 8006a58:	d164      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006a5a:	4ba2      	ldr	r3, [pc, #648]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d120      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a6c:	4b9d      	ldr	r3, [pc, #628]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d117      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a78:	4b9a      	ldr	r3, [pc, #616]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8006a84:	4b97      	ldr	r3, [pc, #604]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	0e1b      	lsrs	r3, r3, #24
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	e006      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006a90:	4b94      	ldr	r3, [pc, #592]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	0e1b      	lsrs	r3, r3, #24
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	4a92      	ldr	r2, [pc, #584]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa6:	e2d3      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aac:	e2d0      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006aae:	4b8d      	ldr	r3, [pc, #564]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006abc:	d112      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac4:	d10e      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ac6:	4b87      	ldr	r3, [pc, #540]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ad4:	d102      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8006ad6:	23fa      	movs	r3, #250	@ 0xfa
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ada:	e2b9      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006adc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ae2:	e2b5      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006af0:	d106      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006af8:	d102      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8006afa:	4b7c      	ldr	r3, [pc, #496]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afe:	e2a7      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006b00:	4b78      	ldr	r3, [pc, #480]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b14:	d103      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8006b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b1c:	e298      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b22:	e295      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b28:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	d147      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006b30:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b36:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006b3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b42:	f7fd fe21 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 8006b46:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b48:	e282      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006b4a:	4b66      	ldr	r3, [pc, #408]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b58:	d112      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b60:	d10e      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b62:	4b60      	ldr	r3, [pc, #384]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b70:	d102      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8006b72:	23fa      	movs	r3, #250	@ 0xfa
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b76:	e26b      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b7e:	e267      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006b80:	4b58      	ldr	r3, [pc, #352]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b94:	d102      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8006b96:	4b55      	ldr	r3, [pc, #340]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9a:	e259      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006b9c:	4b51      	ldr	r3, [pc, #324]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006bb0:	d103      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8006bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb8:	e24a      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bbe:	e247      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	d12d      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006bcc:	4b45      	ldr	r3, [pc, #276]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bd2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006bd6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006bd8:	4b42      	ldr	r3, [pc, #264]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006be4:	d105      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8006bec:	4b3f      	ldr	r3, [pc, #252]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf0:	e22e      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fc44 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c08:	e222      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c10:	d107      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c12:	f107 0318 	add.w	r3, r7, #24
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fd92 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c20:	e216      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c26:	e213      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006c30:	430b      	orrs	r3, r1
 8006c32:	d15d      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006c34:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c3a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c46:	d028      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c4e:	d845      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c56:	d013      	beq.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c5e:	d83d      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c6c:	d004      	beq.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006c6e:	e035      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006c70:	f7fd fd9e 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8006c74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c76:	e1eb      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006c78:	f7fd fc6a 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006c7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c7e:	e1e7      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c80:	4b18      	ldr	r3, [pc, #96]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c8c:	d102      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006c8e:	4b17      	ldr	r3, [pc, #92]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c92:	e1dd      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c98:	e1da      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d117      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	0e1b      	lsrs	r3, r3, #24
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	e006      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8006cbe:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cc4:	041b      	lsls	r3, r3, #16
 8006cc6:	0e1b      	lsrs	r3, r3, #24
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	4a06      	ldr	r2, [pc, #24]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cd4:	e1bc      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cda:	e1b9      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ce0:	e1b6      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006ce2:	bf00      	nop
 8006ce4:	46020c00 	.word	0x46020c00
 8006ce8:	0800a0d4 	.word	0x0800a0d4
 8006cec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf4:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	d156      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006cfc:	4ba5      	ldr	r3, [pc, #660]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d06:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d0e:	d028      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d16:	d845      	bhi.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1e:	d013      	beq.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d26:	d83d      	bhi.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d34:	d004      	beq.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8006d36:	e035      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006d38:	f7fd fd26 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 8006d3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d3e:	e187      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d40:	f7fd fc06 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006d44:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d46:	e183      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d48:	4b92      	ldr	r3, [pc, #584]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d54:	d102      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8006d56:	4b90      	ldr	r3, [pc, #576]	@ (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d5a:	e179      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d60:	e176      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d62:	4b8c      	ldr	r3, [pc, #560]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d117      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d6e:	4b89      	ldr	r3, [pc, #548]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8006d7a:	4b86      	ldr	r3, [pc, #536]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	0e1b      	lsrs	r3, r3, #24
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	e006      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8006d86:	4b83      	ldr	r3, [pc, #524]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	0e1b      	lsrs	r3, r3, #24
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	4a81      	ldr	r2, [pc, #516]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d9c:	e158      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da2:	e155      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da8:	e152      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dae:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006db2:	430b      	orrs	r3, r1
 8006db4:	d177      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006db6:	4b77      	ldr	r3, [pc, #476]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dbc:	f003 0318 	and.w	r3, r3, #24
 8006dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	2b18      	cmp	r3, #24
 8006dc6:	d86b      	bhi.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8006dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006e35 	.word	0x08006e35
 8006dd4:	08006ea1 	.word	0x08006ea1
 8006dd8:	08006ea1 	.word	0x08006ea1
 8006ddc:	08006ea1 	.word	0x08006ea1
 8006de0:	08006ea1 	.word	0x08006ea1
 8006de4:	08006ea1 	.word	0x08006ea1
 8006de8:	08006ea1 	.word	0x08006ea1
 8006dec:	08006ea1 	.word	0x08006ea1
 8006df0:	08006e3d 	.word	0x08006e3d
 8006df4:	08006ea1 	.word	0x08006ea1
 8006df8:	08006ea1 	.word	0x08006ea1
 8006dfc:	08006ea1 	.word	0x08006ea1
 8006e00:	08006ea1 	.word	0x08006ea1
 8006e04:	08006ea1 	.word	0x08006ea1
 8006e08:	08006ea1 	.word	0x08006ea1
 8006e0c:	08006ea1 	.word	0x08006ea1
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006ea1 	.word	0x08006ea1
 8006e18:	08006ea1 	.word	0x08006ea1
 8006e1c:	08006ea1 	.word	0x08006ea1
 8006e20:	08006ea1 	.word	0x08006ea1
 8006e24:	08006ea1 	.word	0x08006ea1
 8006e28:	08006ea1 	.word	0x08006ea1
 8006e2c:	08006ea1 	.word	0x08006ea1
 8006e30:	08006e5f 	.word	0x08006e5f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006e34:	f7fd fcd0 	bl	80047d8 <HAL_RCC_GetPCLK3Freq>
 8006e38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e3a:	e109      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e3c:	f7fd fb88 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006e40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e42:	e105      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e44:	4b53      	ldr	r3, [pc, #332]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e50:	d102      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8006e52:	4b51      	ldr	r3, [pc, #324]	@ (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e56:	e0fb      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e5c:	e0f8      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d117      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8006e76:	4b47      	ldr	r3, [pc, #284]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0e1b      	lsrs	r3, r3, #24
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	e006      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8006e82:	4b44      	ldr	r3, [pc, #272]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	0e1b      	lsrs	r3, r3, #24
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	4a42      	ldr	r2, [pc, #264]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e98:	e0da      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e9e:	e0d7      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ea4:	e0d4      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eaa:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	d155      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006eb2:	4b38      	ldr	r3, [pc, #224]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006eb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006ebc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ec4:	d013      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ecc:	d844      	bhi.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ed4:	d013      	beq.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006edc:	d83c      	bhi.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d014      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eea:	d014      	beq.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8006eec:	e034      	b.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eee:	f107 0318 	add.w	r3, r7, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fc24 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006efc:	e0a8      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fac2 	bl	800548c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f0c:	e0a0      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f0e:	f7fd fb1f 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 8006f12:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f14:	e09c      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f16:	4b1f      	ldr	r3, [pc, #124]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d117      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f22:	4b1c      	ldr	r3, [pc, #112]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8006f2e:	4b19      	ldr	r3, [pc, #100]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	0e1b      	lsrs	r3, r3, #24
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	e006      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006f3a:	4b16      	ldr	r3, [pc, #88]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	0e1b      	lsrs	r3, r3, #24
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	4a14      	ldr	r2, [pc, #80]	@ (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f50:	e07e      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f56:	e07b      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f5c:	e078      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f62:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006f66:	430b      	orrs	r3, r1
 8006f68:	d138      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f74:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006f76:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d10d      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8006f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f90:	e05e      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006f92:	bf00      	nop
 8006f94:	46020c00 	.word	0x46020c00
 8006f98:	00f42400 	.word	0x00f42400
 8006f9c:	0800a0d4 	.word	0x0800a0d4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fae:	d112      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb6:	d10e      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fb8:	4b28      	ldr	r3, [pc, #160]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fc6:	d102      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8006fc8:	23fa      	movs	r3, #250	@ 0xfa
 8006fca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fcc:	e040      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006fce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fd4:	e03c      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fda:	e039      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	d131      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006fea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006ff2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006ff4:	4b19      	ldr	r3, [pc, #100]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007000:	d105      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	2b00      	cmp	r3, #0
 8007006:	d102      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007008:	4b15      	ldr	r3, [pc, #84]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
 800700c:	e020      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800700e:	4b13      	ldr	r3, [pc, #76]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800701a:	d106      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007022:	d102      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007024:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
 8007028:	e012      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800702a:	4b0c      	ldr	r3, [pc, #48]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007036:	d106      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800703e:	d102      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007040:	4b09      	ldr	r3, [pc, #36]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
 8007044:	e004      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
 800704a:	e001      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007052:	4618      	mov	r0, r3
 8007054:	3738      	adds	r7, #56	@ 0x38
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	46020c00 	.word	0x46020c00
 8007060:	02dc6c00 	.word	0x02dc6c00
 8007064:	016e3600 	.word	0x016e3600
 8007068:	00f42400 	.word	0x00f42400

0800706c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007074:	4b47      	ldr	r3, [pc, #284]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a46      	ldr	r2, [pc, #280]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 800707a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800707e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007080:	f7fa fd8a 	bl	8001b98 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007086:	e008      	b.n	800709a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007088:	f7fa fd86 	bl	8001b98 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e077      	b.n	800718a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800709a:	4b3e      	ldr	r3, [pc, #248]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f0      	bne.n	8007088 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80070a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6811      	ldr	r1, [r2, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6852      	ldr	r2, [r2, #4]
 80070ba:	3a01      	subs	r2, #1
 80070bc:	0212      	lsls	r2, r2, #8
 80070be:	430a      	orrs	r2, r1
 80070c0:	4934      	ldr	r1, [pc, #208]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80070c6:	4b33      	ldr	r3, [pc, #204]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 80070c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070ca:	4b33      	ldr	r3, [pc, #204]	@ (8007198 <RCCEx_PLL2_Config+0x12c>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6892      	ldr	r2, [r2, #8]
 80070d2:	3a01      	subs	r2, #1
 80070d4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	68d2      	ldr	r2, [r2, #12]
 80070dc:	3a01      	subs	r2, #1
 80070de:	0252      	lsls	r2, r2, #9
 80070e0:	b292      	uxth	r2, r2
 80070e2:	4311      	orrs	r1, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6912      	ldr	r2, [r2, #16]
 80070e8:	3a01      	subs	r2, #1
 80070ea:	0412      	lsls	r2, r2, #16
 80070ec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80070f0:	4311      	orrs	r1, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6952      	ldr	r2, [r2, #20]
 80070f6:	3a01      	subs	r2, #1
 80070f8:	0612      	lsls	r2, r2, #24
 80070fa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80070fe:	430a      	orrs	r2, r1
 8007100:	4924      	ldr	r1, [pc, #144]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007102:	4313      	orrs	r3, r2
 8007104:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007106:	4b23      	ldr	r3, [pc, #140]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	f023 020c 	bic.w	r2, r3, #12
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	4920      	ldr	r1, [pc, #128]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007114:	4313      	orrs	r3, r2
 8007116:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007118:	4b1e      	ldr	r3, [pc, #120]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 800711a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	491c      	ldr	r1, [pc, #112]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007122:	4313      	orrs	r3, r2
 8007124:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007126:	4b1b      	ldr	r3, [pc, #108]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	4a1a      	ldr	r2, [pc, #104]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007132:	4b18      	ldr	r3, [pc, #96]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800713a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	69d2      	ldr	r2, [r2, #28]
 8007142:	00d2      	lsls	r2, r2, #3
 8007144:	4913      	ldr	r1, [pc, #76]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007146:	4313      	orrs	r3, r2
 8007148:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800714a:	4b12      	ldr	r3, [pc, #72]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	4a11      	ldr	r2, [pc, #68]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007150:	f043 0310 	orr.w	r3, r3, #16
 8007154:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a0e      	ldr	r2, [pc, #56]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 800715c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007160:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007162:	f7fa fd19 	bl	8001b98 <HAL_GetTick>
 8007166:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007168:	e008      	b.n	800717c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800716a:	f7fa fd15 	bl	8001b98 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e006      	b.n	800718a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800717c:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <RCCEx_PLL2_Config+0x128>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0f0      	beq.n	800716a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007188:	2300      	movs	r3, #0

}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	46020c00 	.word	0x46020c00
 8007198:	80800000 	.word	0x80800000

0800719c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80071a4:	4b47      	ldr	r3, [pc, #284]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a46      	ldr	r2, [pc, #280]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 80071aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071b0:	f7fa fcf2 	bl	8001b98 <HAL_GetTick>
 80071b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071b6:	e008      	b.n	80071ca <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071b8:	f7fa fcee 	bl	8001b98 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e077      	b.n	80072ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071ca:	4b3e      	ldr	r3, [pc, #248]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80071d6:	4b3b      	ldr	r3, [pc, #236]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6811      	ldr	r1, [r2, #0]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6852      	ldr	r2, [r2, #4]
 80071ea:	3a01      	subs	r2, #1
 80071ec:	0212      	lsls	r2, r2, #8
 80071ee:	430a      	orrs	r2, r1
 80071f0:	4934      	ldr	r1, [pc, #208]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	630b      	str	r3, [r1, #48]	@ 0x30
 80071f6:	4b33      	ldr	r3, [pc, #204]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 80071f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071fa:	4b33      	ldr	r3, [pc, #204]	@ (80072c8 <RCCEx_PLL3_Config+0x12c>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6892      	ldr	r2, [r2, #8]
 8007202:	3a01      	subs	r2, #1
 8007204:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	68d2      	ldr	r2, [r2, #12]
 800720c:	3a01      	subs	r2, #1
 800720e:	0252      	lsls	r2, r2, #9
 8007210:	b292      	uxth	r2, r2
 8007212:	4311      	orrs	r1, r2
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6912      	ldr	r2, [r2, #16]
 8007218:	3a01      	subs	r2, #1
 800721a:	0412      	lsls	r2, r2, #16
 800721c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007220:	4311      	orrs	r1, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6952      	ldr	r2, [r2, #20]
 8007226:	3a01      	subs	r2, #1
 8007228:	0612      	lsls	r2, r2, #24
 800722a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800722e:	430a      	orrs	r2, r1
 8007230:	4924      	ldr	r1, [pc, #144]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007232:	4313      	orrs	r3, r2
 8007234:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007236:	4b23      	ldr	r3, [pc, #140]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	f023 020c 	bic.w	r2, r3, #12
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	4920      	ldr	r1, [pc, #128]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007244:	4313      	orrs	r3, r2
 8007246:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007248:	4b1e      	ldr	r3, [pc, #120]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 800724a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	491c      	ldr	r1, [pc, #112]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007252:	4313      	orrs	r3, r2
 8007254:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007256:	4b1b      	ldr	r3, [pc, #108]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725a:	4a1a      	ldr	r2, [pc, #104]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 800725c:	f023 0310 	bic.w	r3, r3, #16
 8007260:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007262:	4b18      	ldr	r3, [pc, #96]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800726a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	69d2      	ldr	r2, [r2, #28]
 8007272:	00d2      	lsls	r2, r2, #3
 8007274:	4913      	ldr	r1, [pc, #76]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007276:	4313      	orrs	r3, r2
 8007278:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800727a:	4b12      	ldr	r3, [pc, #72]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727e:	4a11      	ldr	r2, [pc, #68]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007280:	f043 0310 	orr.w	r3, r3, #16
 8007284:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007286:	4b0f      	ldr	r3, [pc, #60]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a0e      	ldr	r2, [pc, #56]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 800728c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007290:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007292:	f7fa fc81 	bl	8001b98 <HAL_GetTick>
 8007296:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007298:	e008      	b.n	80072ac <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800729a:	f7fa fc7d 	bl	8001b98 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e006      	b.n	80072ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072ac:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <RCCEx_PLL3_Config+0x128>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0f0      	beq.n	800729a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	46020c00 	.word	0x46020c00
 80072c8:	80800000 	.word	0x80800000

080072cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e0fb      	b.n	80074d6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a7f      	ldr	r2, [pc, #508]	@ (80074e0 <HAL_SPI_Init+0x214>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_SPI_Init+0x26>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a7d      	ldr	r2, [pc, #500]	@ (80074e4 <HAL_SPI_Init+0x218>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	e000      	b.n	80072f4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80072f2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a78      	ldr	r2, [pc, #480]	@ (80074e0 <HAL_SPI_Init+0x214>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <HAL_SPI_Init+0x42>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a76      	ldr	r2, [pc, #472]	@ (80074e4 <HAL_SPI_Init+0x218>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d105      	bne.n	800731a <HAL_SPI_Init+0x4e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b0f      	cmp	r3, #15
 8007314:	d901      	bls.n	800731a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e0dd      	b.n	80074d6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fbb8 	bl	8008a90 <SPI_GetPacketSize>
 8007320:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a6e      	ldr	r2, [pc, #440]	@ (80074e0 <HAL_SPI_Init+0x214>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <HAL_SPI_Init+0x6a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a6c      	ldr	r2, [pc, #432]	@ (80074e4 <HAL_SPI_Init+0x218>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d102      	bne.n	800733c <HAL_SPI_Init+0x70>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b08      	cmp	r3, #8
 800733a:	d816      	bhi.n	800736a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007340:	4a69      	ldr	r2, [pc, #420]	@ (80074e8 <HAL_SPI_Init+0x21c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a68      	ldr	r2, [pc, #416]	@ (80074ec <HAL_SPI_Init+0x220>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d009      	beq.n	8007364 <HAL_SPI_Init+0x98>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a66      	ldr	r2, [pc, #408]	@ (80074f0 <HAL_SPI_Init+0x224>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_SPI_Init+0x98>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a65      	ldr	r2, [pc, #404]	@ (80074f4 <HAL_SPI_Init+0x228>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d104      	bne.n	800736e <HAL_SPI_Init+0xa2>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b10      	cmp	r3, #16
 8007368:	d901      	bls.n	800736e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e0b3      	b.n	80074d6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7f9 feb0 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80073aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073b4:	d119      	bne.n	80073ea <HAL_SPI_Init+0x11e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073be:	d103      	bne.n	80073c8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10c      	bne.n	80073ea <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80073d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073d8:	d107      	bne.n	80073ea <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80073e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00f      	beq.n	8007416 <HAL_SPI_Init+0x14a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b06      	cmp	r3, #6
 80073fc:	d90b      	bls.n	8007416 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e007      	b.n	8007426 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007424:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69da      	ldr	r2, [r3, #28]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742e:	431a      	orrs	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007438:	ea42 0103 	orr.w	r1, r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	431a      	orrs	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007492:	ea42 0103 	orr.w	r1, r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	46002000 	.word	0x46002000
 80074e4:	56002000 	.word	0x56002000
 80074e8:	40013000 	.word	0x40013000
 80074ec:	50013000 	.word	0x50013000
 80074f0:	40003800 	.word	0x40003800
 80074f4:	50003800 	.word	0x50003800

080074f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3320      	adds	r3, #32
 800750e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a90      	ldr	r2, [pc, #576]	@ (8007758 <HAL_SPI_Transmit+0x260>)
 8007516:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007518:	f7fa fb3e 	bl	8001b98 <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d001      	beq.n	800752e <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800752a:	2302      	movs	r3, #2
 800752c:	e1f4      	b.n	8007918 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_SPI_Transmit+0x42>
 8007534:	88fb      	ldrh	r3, [r7, #6]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e1ec      	b.n	8007918 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_SPI_Transmit+0x54>
 8007548:	2302      	movs	r3, #2
 800754a:	e1e5      	b.n	8007918 <HAL_SPI_Transmit+0x420>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2203      	movs	r2, #3
 8007558:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80075a4:	d108      	bne.n	80075b8 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	e009      	b.n	80075cc <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80075ca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	0c1b      	lsrs	r3, r3, #16
 80075d4:	041b      	lsls	r3, r3, #16
 80075d6:	88f9      	ldrh	r1, [r7, #6]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	430b      	orrs	r3, r1
 80075de:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10c      	bne.n	8007618 <HAL_SPI_Transmit+0x120>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007606:	d107      	bne.n	8007618 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b0f      	cmp	r3, #15
 800761e:	d95b      	bls.n	80076d8 <HAL_SPI_Transmit+0x1e0>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a4d      	ldr	r2, [pc, #308]	@ (800775c <HAL_SPI_Transmit+0x264>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d04f      	beq.n	80076ca <HAL_SPI_Transmit+0x1d2>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a4c      	ldr	r2, [pc, #304]	@ (8007760 <HAL_SPI_Transmit+0x268>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d04a      	beq.n	80076ca <HAL_SPI_Transmit+0x1d2>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a4a      	ldr	r2, [pc, #296]	@ (8007764 <HAL_SPI_Transmit+0x26c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d045      	beq.n	80076ca <HAL_SPI_Transmit+0x1d2>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a49      	ldr	r2, [pc, #292]	@ (8007768 <HAL_SPI_Transmit+0x270>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d147      	bne.n	80076d8 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007648:	e03f      	b.n	80076ca <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b02      	cmp	r3, #2
 8007656:	d114      	bne.n	8007682 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007668:	1d1a      	adds	r2, r3, #4
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007680:	e023      	b.n	80076ca <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007682:	f7fa fa89 	bl	8001b98 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d803      	bhi.n	800769a <HAL_SPI_Transmit+0x1a2>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_Transmit+0x1a8>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d114      	bne.n	80076ca <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f001 f927 	bl	80088f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e126      	b.n	8007918 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1b9      	bne.n	800764a <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80076d6:	e0f9      	b.n	80078cc <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2b07      	cmp	r3, #7
 80076de:	f240 80ee 	bls.w	80078be <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80076e2:	e067      	b.n	80077b4 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d13c      	bne.n	800776c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d918      	bls.n	8007730 <HAL_SPI_Transmit+0x238>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d014      	beq.n	8007730 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007716:	1d1a      	adds	r2, r3, #4
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b02      	subs	r3, #2
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800772e:	e041      	b.n	80077b4 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007734:	881a      	ldrh	r2, [r3, #0]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800773e:	1c9a      	adds	r2, r3, #2
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007756:	e02d      	b.n	80077b4 <HAL_SPI_Transmit+0x2bc>
 8007758:	46002000 	.word	0x46002000
 800775c:	40013000 	.word	0x40013000
 8007760:	50013000 	.word	0x50013000
 8007764:	40003800 	.word	0x40003800
 8007768:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800776c:	f7fa fa14 	bl	8001b98 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d803      	bhi.n	8007784 <HAL_SPI_Transmit+0x28c>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d102      	bne.n	800778a <HAL_SPI_Transmit+0x292>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d114      	bne.n	80077b4 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f001 f8b2 	bl	80088f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007796:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e0b1      	b.n	8007918 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d191      	bne.n	80076e4 <HAL_SPI_Transmit+0x1ec>
 80077c0:	e084      	b.n	80078cc <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d152      	bne.n	8007876 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d918      	bls.n	800780e <HAL_SPI_Transmit+0x316>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	2b40      	cmp	r3, #64	@ 0x40
 80077e2:	d914      	bls.n	800780e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f4:	1d1a      	adds	r2, r3, #4
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007800:	b29b      	uxth	r3, r3
 8007802:	3b04      	subs	r3, #4
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800780c:	e057      	b.n	80078be <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b01      	cmp	r3, #1
 8007818:	d917      	bls.n	800784a <HAL_SPI_Transmit+0x352>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d013      	beq.n	800784a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007826:	881a      	ldrh	r2, [r3, #0]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007830:	1c9a      	adds	r2, r3, #2
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b02      	subs	r3, #2
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007848:	e039      	b.n	80078be <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3320      	adds	r3, #32
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007874:	e023      	b.n	80078be <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007876:	f7fa f98f 	bl	8001b98 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d803      	bhi.n	800788e <HAL_SPI_Transmit+0x396>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d102      	bne.n	8007894 <HAL_SPI_Transmit+0x39c>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d114      	bne.n	80078be <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f001 f82d 	bl	80088f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e02c      	b.n	8007918 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f47f af7b 	bne.w	80077c2 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	2108      	movs	r1, #8
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f001 f8ac 	bl	8008a34 <SPI_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 fffe 	bl	80088f4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007916:	2300      	movs	r3, #0
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	4613      	mov	r3, r2
 800792e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	b29b      	uxth	r3, r3
 8007938:	3301      	adds	r3, #1
 800793a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3330      	adds	r3, #48	@ 0x30
 8007942:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a94      	ldr	r2, [pc, #592]	@ (8007b9c <HAL_SPI_Receive+0x27c>)
 800794a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794c:	f7fa f924 	bl	8001b98 <HAL_GetTick>
 8007950:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	d001      	beq.n	8007962 <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 800795e:	2302      	movs	r3, #2
 8007960:	e2bc      	b.n	8007edc <HAL_SPI_Receive+0x5bc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d002      	beq.n	800796e <HAL_SPI_Receive+0x4e>
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e2b4      	b.n	8007edc <HAL_SPI_Receive+0x5bc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007978:	2b01      	cmp	r3, #1
 800797a:	d101      	bne.n	8007980 <HAL_SPI_Receive+0x60>
 800797c:	2302      	movs	r3, #2
 800797e:	e2ad      	b.n	8007edc <HAL_SPI_Receive+0x5bc>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2204      	movs	r2, #4
 800798c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80079d8:	d108      	bne.n	80079ec <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e009      	b.n	8007a00 <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80079fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	0c1b      	lsrs	r3, r3, #16
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	88f9      	ldrh	r1, [r7, #6]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	430b      	orrs	r3, r1
 8007a12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10c      	bne.n	8007a4c <HAL_SPI_Receive+0x12c>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a3a:	d107      	bne.n	8007a4c <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	2b0f      	cmp	r3, #15
 8007a52:	f240 809c 	bls.w	8007b8e <HAL_SPI_Receive+0x26e>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a51      	ldr	r2, [pc, #324]	@ (8007ba0 <HAL_SPI_Receive+0x280>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	f000 808e 	beq.w	8007b7e <HAL_SPI_Receive+0x25e>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a4f      	ldr	r2, [pc, #316]	@ (8007ba4 <HAL_SPI_Receive+0x284>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	f000 8088 	beq.w	8007b7e <HAL_SPI_Receive+0x25e>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a4d      	ldr	r2, [pc, #308]	@ (8007ba8 <HAL_SPI_Receive+0x288>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	f000 8082 	beq.w	8007b7e <HAL_SPI_Receive+0x25e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a4b      	ldr	r2, [pc, #300]	@ (8007bac <HAL_SPI_Receive+0x28c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	f040 8084 	bne.w	8007b8e <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007a86:	e07a      	b.n	8007b7e <HAL_SPI_Receive+0x25e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d114      	bne.n	8007ac8 <HAL_SPI_Receive+0x1a8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007aa8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aae:	1d1a      	adds	r2, r3, #4
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007ac6:	e05a      	b.n	8007b7e <HAL_SPI_Receive+0x25e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	8bfa      	ldrh	r2, [r7, #30]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d919      	bls.n	8007b0a <HAL_SPI_Receive+0x1ea>
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d014      	beq.n	8007b0a <HAL_SPI_Receive+0x1ea>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007aea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007b08:	e039      	b.n	8007b7e <HAL_SPI_Receive+0x25e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d010      	beq.n	8007b36 <HAL_SPI_Receive+0x216>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b22:	d12c      	bne.n	8007b7e <HAL_SPI_Receive+0x25e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b32:	619a      	str	r2, [r3, #24]
 8007b34:	e023      	b.n	8007b7e <HAL_SPI_Receive+0x25e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b36:	f7fa f82f 	bl	8001b98 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d803      	bhi.n	8007b4e <HAL_SPI_Receive+0x22e>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d102      	bne.n	8007b54 <HAL_SPI_Receive+0x234>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d114      	bne.n	8007b7e <HAL_SPI_Receive+0x25e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fecd 	bl	80088f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e1ae      	b.n	8007edc <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f47f af7e 	bne.w	8007a88 <HAL_SPI_Receive+0x168>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007b8c:	e193      	b.n	8007eb6 <HAL_SPI_Receive+0x596>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b07      	cmp	r3, #7
 8007b94:	f240 8188 	bls.w	8007ea8 <HAL_SPI_Receive+0x588>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007b98:	e0b0      	b.n	8007cfc <HAL_SPI_Receive+0x3dc>
 8007b9a:	bf00      	nop
 8007b9c:	46002000 	.word	0x46002000
 8007ba0:	40013000 	.word	0x40013000
 8007ba4:	50013000 	.word	0x50013000
 8007ba8:	40003800 	.word	0x40003800
 8007bac:	50003800 	.word	0x50003800
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d114      	bne.n	8007bf0 <HAL_SPI_Receive+0x2d0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	8812      	ldrh	r2, [r2, #0]
 8007bce:	b292      	uxth	r2, r2
 8007bd0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd6:	1c9a      	adds	r2, r3, #2
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007bee:	e085      	b.n	8007cfc <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8bfa      	ldrh	r2, [r7, #30]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d924      	bls.n	8007c48 <HAL_SPI_Receive+0x328>
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01f      	beq.n	8007c48 <HAL_SPI_Receive+0x328>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	8812      	ldrh	r2, [r2, #0]
 8007c10:	b292      	uxth	r2, r2
 8007c12:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c18:	1c9a      	adds	r2, r3, #2
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	8812      	ldrh	r2, [r2, #0]
 8007c26:	b292      	uxth	r2, r2
 8007c28:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c2e:	1c9a      	adds	r2, r3, #2
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b02      	subs	r3, #2
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007c46:	e059      	b.n	8007cfc <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d119      	bne.n	8007c88 <HAL_SPI_Receive+0x368>
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d014      	beq.n	8007c88 <HAL_SPI_Receive+0x368>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	8812      	ldrh	r2, [r2, #0]
 8007c66:	b292      	uxth	r2, r2
 8007c68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c6e:	1c9a      	adds	r2, r3, #2
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007c86:	e039      	b.n	8007cfc <HAL_SPI_Receive+0x3dc>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d010      	beq.n	8007cb4 <HAL_SPI_Receive+0x394>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ca0:	d12c      	bne.n	8007cfc <HAL_SPI_Receive+0x3dc>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cb0:	619a      	str	r2, [r3, #24]
 8007cb2:	e023      	b.n	8007cfc <HAL_SPI_Receive+0x3dc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cb4:	f7f9 ff70 	bl	8001b98 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d803      	bhi.n	8007ccc <HAL_SPI_Receive+0x3ac>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cca:	d102      	bne.n	8007cd2 <HAL_SPI_Receive+0x3b2>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d114      	bne.n	8007cfc <HAL_SPI_Receive+0x3dc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fe0e 	bl	80088f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e0ef      	b.n	8007edc <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f47f af53 	bne.w	8007bb0 <HAL_SPI_Receive+0x290>
 8007d0a:	e0d4      	b.n	8007eb6 <HAL_SPI_Receive+0x596>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d117      	bne.n	8007d52 <HAL_SPI_Receive+0x432>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d2e:	7812      	ldrb	r2, [r2, #0]
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007d50:	e0aa      	b.n	8007ea8 <HAL_SPI_Receive+0x588>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	8bfa      	ldrh	r2, [r7, #30]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d946      	bls.n	8007dee <HAL_SPI_Receive+0x4ce>
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d041      	beq.n	8007dee <HAL_SPI_Receive+0x4ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d92:	7812      	ldrb	r2, [r2, #0]
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	b2d2      	uxtb	r2, r2
 8007db2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dca:	7812      	ldrb	r2, [r2, #0]
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b04      	subs	r3, #4
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007dec:	e05c      	b.n	8007ea8 <HAL_SPI_Receive+0x588>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d81c      	bhi.n	8007e34 <HAL_SPI_Receive+0x514>
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d017      	beq.n	8007e34 <HAL_SPI_Receive+0x514>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e10:	7812      	ldrb	r2, [r2, #0]
 8007e12:	b2d2      	uxtb	r2, r2
 8007e14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007e32:	e039      	b.n	8007ea8 <HAL_SPI_Receive+0x588>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d010      	beq.n	8007e60 <HAL_SPI_Receive+0x540>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e4c:	d12c      	bne.n	8007ea8 <HAL_SPI_Receive+0x588>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e5c:	619a      	str	r2, [r3, #24]
 8007e5e:	e023      	b.n	8007ea8 <HAL_SPI_Receive+0x588>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e60:	f7f9 fe9a 	bl	8001b98 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d803      	bhi.n	8007e78 <HAL_SPI_Receive+0x558>
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d102      	bne.n	8007e7e <HAL_SPI_Receive+0x55e>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d114      	bne.n	8007ea8 <HAL_SPI_Receive+0x588>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fd38 	bl	80088f4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e019      	b.n	8007edc <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f47f af2b 	bne.w	8007d0c <HAL_SPI_Receive+0x3ec>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fd1c 	bl	80088f4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <HAL_SPI_Receive+0x5ba>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <HAL_SPI_Receive+0x5bc>
  }
  else
  {
    return HAL_OK;
 8007eda:	2300      	movs	r3, #0
  }
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a91      	ldr	r2, [pc, #580]	@ (800813c <HAL_SPI_TransmitReceive_DMA+0x258>)
 8007ef8:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d001      	beq.n	8007f0a <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8007f06:	2302      	movs	r3, #2
 8007f08:	e274      	b.n	80083f4 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_SPI_TransmitReceive_DMA+0x38>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <HAL_SPI_TransmitReceive_DMA+0x38>
 8007f16:	887b      	ldrh	r3, [r7, #2]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e269      	b.n	80083f4 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_SPI_TransmitReceive_DMA+0x4a>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e262      	b.n	80083f4 <HAL_SPI_TransmitReceive_DMA+0x510>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2205      	movs	r2, #5
 8007f3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	887a      	ldrh	r2, [r7, #2]
 8007f50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	887a      	ldrh	r2, [r7, #2]
 8007f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	887a      	ldrh	r2, [r7, #2]
 8007f66:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	887a      	ldrh	r2, [r7, #2]
 8007f6e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007f8c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007f9c:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2b0f      	cmp	r3, #15
 8007fa4:	d920      	bls.n	8007fe8 <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fac:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8007fae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fb2:	d105      	bne.n	8007fc0 <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fba:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d013      	beq.n	8007fe8 <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8007fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8008140 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01e      	beq.n	8008008 <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a5d      	ldr	r2, [pc, #372]	@ (8008144 <HAL_SPI_TransmitReceive_DMA+0x260>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d019      	beq.n	8008008 <HAL_SPI_TransmitReceive_DMA+0x124>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a5b      	ldr	r2, [pc, #364]	@ (8008148 <HAL_SPI_TransmitReceive_DMA+0x264>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d014      	beq.n	8008008 <HAL_SPI_TransmitReceive_DMA+0x124>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a5a      	ldr	r2, [pc, #360]	@ (800814c <HAL_SPI_TransmitReceive_DMA+0x268>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00f      	beq.n	8008008 <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007fec:	2b07      	cmp	r3, #7
 8007fee:	d911      	bls.n	8008014 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff6:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008002:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e1ef      	b.n	80083f4 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	2b07      	cmp	r3, #7
 800801a:	d842      	bhi.n	80080a2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d109      	bne.n	800803c <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800802e:	b29b      	uxth	r3, r3
 8008030:	3301      	adds	r3, #1
 8008032:	105b      	asrs	r3, r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d109      	bne.n	800805c <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800804e:	b29b      	uxth	r3, r3
 8008050:	3303      	adds	r3, #3
 8008052:	109b      	asrs	r3, r3, #2
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008068:	d109      	bne.n	800807e <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008070:	b29b      	uxth	r3, r3
 8008072:	3301      	adds	r3, #1
 8008074:	105b      	asrs	r3, r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800808a:	d12f      	bne.n	80080ec <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008092:	b29b      	uxth	r3, r3
 8008094:	3303      	adds	r3, #3
 8008096:	109b      	asrs	r3, r3, #2
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80080a0:	e024      	b.n	80080ec <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d820      	bhi.n	80080ec <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d109      	bne.n	80080ca <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3301      	adds	r3, #1
 80080c0:	105b      	asrs	r3, r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080d6:	d109      	bne.n	80080ec <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3301      	adds	r3, #1
 80080e2:	105b      	asrs	r3, r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f2:	4a17      	ldr	r2, [pc, #92]	@ (8008150 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 80080f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080fc:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <HAL_SPI_TransmitReceive_DMA+0x270>)
 80080fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008106:	4a14      	ldr	r2, [pc, #80]	@ (8008158 <HAL_SPI_TransmitReceive_DMA+0x274>)
 8008108:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008110:	2200      	movs	r2, #0
 8008112:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	2b07      	cmp	r3, #7
 800811a:	d804      	bhi.n	8008126 <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	887a      	ldrh	r2, [r7, #2]
 8008120:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008124:	e020      	b.n	8008168 <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	2b0f      	cmp	r3, #15
 800812c:	d816      	bhi.n	800815c <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 800812e:	887b      	ldrh	r3, [r7, #2]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800813a:	e015      	b.n	8008168 <HAL_SPI_TransmitReceive_DMA+0x284>
 800813c:	46002000 	.word	0x46002000
 8008140:	40013000 	.word	0x40013000
 8008144:	50013000 	.word	0x50013000
 8008148:	40003800 	.word	0x40003800
 800814c:	50003800 	.word	0x50003800
 8008150:	0800885f 	.word	0x0800885f
 8008154:	0800880d 	.word	0x0800880d
 8008158:	0800887b 	.word	0x0800887b
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800815c:	887b      	ldrh	r3, [r7, #2]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008174:	2b00      	cmp	r3, #0
 8008176:	d02d      	beq.n	80081d4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800817e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008180:	2b00      	cmp	r3, #0
 8008182:	d024      	beq.n	80081ce <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800818a:	b29a      	uxth	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fa fd42 	bl	8002c4c <HAL_DMAEx_List_Start_IT>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]
 80081cc:	e014      	b.n	80081f8 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	75fb      	strb	r3, [r7, #23]
 80081d2:	e011      	b.n	80081f8 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3330      	adds	r3, #48	@ 0x30
 80081e0:	4619      	mov	r1, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e6:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80081ee:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80081f0:	f7f9 ffd8 	bl	80021a4 <HAL_DMA_Start_IT>
 80081f4:	4603      	mov	r3, r0
 80081f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d011      	beq.n	8008222 <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008204:	f043 0210 	orr.w	r2, r3, #16
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e0e8      	b.n	80083f4 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008230:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008238:	2200      	movs	r2, #0
 800823a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008242:	2200      	movs	r2, #0
 8008244:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824c:	2200      	movs	r2, #0
 800824e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008256:	4a69      	ldr	r2, [pc, #420]	@ (80083fc <HAL_SPI_TransmitReceive_DMA+0x518>)
 8008258:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	2b07      	cmp	r3, #7
 8008260:	d804      	bhi.n	800826c <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	887a      	ldrh	r2, [r7, #2]
 8008266:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800826a:	e010      	b.n	800828e <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b0f      	cmp	r3, #15
 8008272:	d806      	bhi.n	8008282 <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 8008274:	887b      	ldrh	r3, [r7, #2]
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008280:	e005      	b.n	800828e <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8008282:	887b      	ldrh	r3, [r7, #2]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	b29a      	uxth	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d02d      	beq.n	80082fa <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d024      	beq.n	80082f4 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f103 0220 	add.w	r2, r3, #32
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fa fcaf 	bl	8002c4c <HAL_DMAEx_List_Start_IT>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]
 80082f2:	e014      	b.n	800831e <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]
 80082f8:	e011      	b.n	800831e <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008304:	4619      	mov	r1, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3320      	adds	r3, #32
 800830c:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008314:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008316:	f7f9 ff45 	bl	80021a4 <HAL_DMA_Start_IT>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d017      	beq.n	8008354 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800832a:	4618      	mov	r0, r3
 800832c:	f7f9 ff9a 	bl	8002264 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008336:	f043 0210 	orr.w	r2, r3, #16
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e04f      	b.n	80083f4 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800835a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835c:	2b81      	cmp	r3, #129	@ 0x81
 800835e:	d10e      	bne.n	800837e <HAL_SPI_TransmitReceive_DMA+0x49a>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008368:	2b81      	cmp	r3, #129	@ 0x81
 800836a:	d108      	bne.n	800837e <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	6812      	ldr	r2, [r2, #0]
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	6053      	str	r3, [r2, #4]
 800837c:	e009      	b.n	8008392 <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	0c1b      	lsrs	r3, r3, #16
 8008386:	041b      	lsls	r3, r3, #16
 8008388:	8879      	ldrh	r1, [r7, #2]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	6812      	ldr	r2, [r2, #0]
 800838e:	430b      	orrs	r3, r1
 8008390:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083a0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80083b0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0201 	orr.w	r2, r2, #1
 80083c0:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10c      	bne.n	80083ea <HAL_SPI_TransmitReceive_DMA+0x506>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083d8:	d107      	bne.n	80083ea <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083e8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	0800887b 	.word	0x0800887b

08008400 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	@ 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008418:	6a3a      	ldr	r2, [r7, #32]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4013      	ands	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008428:	2300      	movs	r3, #0
 800842a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008432:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3330      	adds	r3, #48	@ 0x30
 800843a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008442:	2b00      	cmp	r3, #0
 8008444:	d010      	beq.n	8008468 <HAL_SPI_IRQHandler+0x68>
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800845e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f9c9 	bl	80087f8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008466:	e19a      	b.n	800879e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d113      	bne.n	800849a <HAL_SPI_IRQHandler+0x9a>
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10e      	bne.n	800849a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008482:	2b00      	cmp	r3, #0
 8008484:	d009      	beq.n	800849a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
    handled = 1UL;
 8008496:	2301      	movs	r3, #1
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10f      	bne.n	80084c4 <HAL_SPI_IRQHandler+0xc4>
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	4798      	blx	r3
    handled = 1UL;
 80084c0:	2301      	movs	r3, #1
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10f      	bne.n	80084ee <HAL_SPI_IRQHandler+0xee>
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
    handled = 1UL;
 80084ea:	2301      	movs	r3, #1
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 814f 	bne.w	8008794 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 808b 	beq.w	8008618 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0208 	orr.w	r2, r2, #8
 8008510:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0210 	orr.w	r2, r2, #16
 8008520:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008530:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0208 	bic.w	r2, r2, #8
 8008540:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d13d      	bne.n	80085cc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008550:	e036      	b.n	80085c0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	2b0f      	cmp	r3, #15
 8008558:	d90b      	bls.n	8008572 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008562:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008564:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856a:	1d1a      	adds	r2, r3, #4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008570:	e01d      	b.n	80085ae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b07      	cmp	r3, #7
 8008578:	d90b      	bls.n	8008592 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	8812      	ldrh	r2, [r2, #0]
 8008582:	b292      	uxth	r2, r2
 8008584:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800858a:	1c9a      	adds	r2, r3, #2
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008590:	e00d      	b.n	80085ae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1c2      	bne.n	8008552 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f991 	bl	80088f4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f8fd 	bl	80087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80085ea:	e0d8      	b.n	800879e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80085ec:	7cfb      	ldrb	r3, [r7, #19]
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d103      	bne.n	80085fa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7f8 fcd8 	bl	8000fa8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80085f8:	e0ce      	b.n	8008798 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80085fa:	7cfb      	ldrb	r3, [r7, #19]
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d103      	bne.n	8008608 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f8db 	bl	80087bc <HAL_SPI_RxCpltCallback>
    return;
 8008606:	e0c7      	b.n	8008798 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008608:	7cfb      	ldrb	r3, [r7, #19]
 800860a:	2b03      	cmp	r3, #3
 800860c:	f040 80c4 	bne.w	8008798 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f8c9 	bl	80087a8 <HAL_SPI_TxCpltCallback>
    return;
 8008616:	e0bf      	b.n	8008798 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80bd 	beq.w	800879e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00f      	beq.n	800864e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008634:	f043 0204 	orr.w	r2, r3, #4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800864c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00f      	beq.n	8008678 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800865e:	f043 0201 	orr.w	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008676:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00f      	beq.n	80086a2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008688:	f043 0208 	orr.w	r2, r3, #8
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086a0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00f      	beq.n	80086cc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0220 	orr.w	r2, r2, #32
 80086ca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d062      	beq.n	800879c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 80086f4:	f023 0303 	bic.w	r3, r3, #3
 80086f8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008700:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008704:	d13e      	bne.n	8008784 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008714:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800871c:	2b00      	cmp	r3, #0
 800871e:	d015      	beq.n	800874c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008726:	4a1f      	ldr	r2, [pc, #124]	@ (80087a4 <HAL_SPI_IRQHandler+0x3a4>)
 8008728:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008730:	4618      	mov	r0, r3
 8008732:	f7f9 fe13 	bl	800235c <HAL_DMA_Abort_IT>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008742:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d022      	beq.n	800879c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800875c:	4a11      	ldr	r2, [pc, #68]	@ (80087a4 <HAL_SPI_IRQHandler+0x3a4>)
 800875e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008766:	4618      	mov	r0, r3
 8008768:	f7f9 fdf8 	bl	800235c <HAL_DMA_Abort_IT>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d014      	beq.n	800879c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008778:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008782:	e00b      	b.n	800879c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f829 	bl	80087e4 <HAL_SPI_ErrorCallback>
    return;
 8008792:	e003      	b.n	800879c <HAL_SPI_IRQHandler+0x39c>
    return;
 8008794:	bf00      	nop
 8008796:	e002      	b.n	800879e <HAL_SPI_IRQHandler+0x39e>
    return;
 8008798:	bf00      	nop
 800879a:	e000      	b.n	800879e <HAL_SPI_IRQHandler+0x39e>
    return;
 800879c:	bf00      	nop
  }
}
 800879e:	3728      	adds	r7, #40	@ 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	080088c1 	.word	0x080088c1

080087a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008818:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b07      	cmp	r3, #7
 8008824:	d017      	beq.n	8008856 <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800882c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800882e:	2b81      	cmp	r3, #129	@ 0x81
 8008830:	d109      	bne.n	8008846 <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800883a:	2b81      	cmp	r3, #129	@ 0x81
 800883c:	d103      	bne.n	8008846 <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7f8 fbb2 	bl	8000fa8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008844:	e007      	b.n	8008856 <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0208 	orr.w	r2, r2, #8
 8008854:	611a      	str	r2, [r3, #16]
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800886a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff ffaf 	bl	80087d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008886:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7f9 fef1 	bl	8002670 <HAL_DMA_GetError>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d011      	beq.n	80088b8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 f82d 	bl	80088f4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088a0:	f043 0210 	orr.w	r2, r3, #16
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff ff96 	bl	80087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff ff7c 	bl	80087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699a      	ldr	r2, [r3, #24]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0208 	orr.w	r2, r2, #8
 8008912:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0210 	orr.w	r2, r2, #16
 8008922:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008942:	f023 0303 	bic.w	r3, r3, #3
 8008946:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008956:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b04      	cmp	r3, #4
 8008962:	d014      	beq.n	800898e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00f      	beq.n	800898e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008974:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	699a      	ldr	r2, [r3, #24]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f042 0220 	orr.w	r2, r2, #32
 800898c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b03      	cmp	r3, #3
 8008998:	d014      	beq.n	80089c4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00f      	beq.n	80089c4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089aa:	f043 0204 	orr.w	r2, r3, #4
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00f      	beq.n	80089ee <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089d4:	f043 0201 	orr.w	r2, r3, #1
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00f      	beq.n	8008a18 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089fe:	f043 0208 	orr.w	r2, r3, #8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008a28:	bf00      	nop
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	4613      	mov	r3, r2
 8008a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a44:	e010      	b.n	8008a68 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a46:	f7f9 f8a7 	bl	8001b98 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d803      	bhi.n	8008a5e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d102      	bne.n	8008a64 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e00f      	b.n	8008a88 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695a      	ldr	r2, [r3, #20]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	4013      	ands	r3, r2
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d0df      	beq.n	8008a46 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9c:	095b      	lsrs	r3, r3, #5
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	3307      	adds	r3, #7
 8008aae:	08db      	lsrs	r3, r3, #3
 8008ab0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d12e      	bne.n	8008b3a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e028      	b.n	8008b3c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2202      	movs	r2, #2
 8008af6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0201 	bic.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008b16:	ea42 0103 	orr.w	r1, r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e000      	b.n	8008b3c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
  }
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e042      	b.n	8008be0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d106      	bne.n	8008b72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7f8 fd07 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2224      	movs	r2, #36	@ 0x24
 8008b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0201 	bic.w	r2, r2, #1
 8008b88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fa68 	bl	8009068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8c3 	bl	8008d24 <UART_SetConfig>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d101      	bne.n	8008ba8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e01b      	b.n	8008be0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689a      	ldr	r2, [r3, #8]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fae7 	bl	80091ac <UART_CheckIdleState>
 8008bde:	4603      	mov	r3, r0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08a      	sub	sp, #40	@ 0x28
 8008bec:	af02      	add	r7, sp, #8
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	f040 808b 	bne.w	8008d1a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <HAL_UART_Transmit+0x28>
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e083      	b.n	8008d1c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1e:	2b80      	cmp	r3, #128	@ 0x80
 8008c20:	d107      	bne.n	8008c32 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c30:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2221      	movs	r2, #33	@ 0x21
 8008c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c42:	f7f8 ffa9 	bl	8001b98 <HAL_GetTick>
 8008c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	88fa      	ldrh	r2, [r7, #6]
 8008c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	88fa      	ldrh	r2, [r7, #6]
 8008c54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c60:	d108      	bne.n	8008c74 <HAL_UART_Transmit+0x8c>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	e003      	b.n	8008c7c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c7c:	e030      	b.n	8008ce0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2200      	movs	r2, #0
 8008c86:	2180      	movs	r1, #128	@ 0x80
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fb39 	bl	8009300 <UART_WaitOnFlagUntilTimeout>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e03d      	b.n	8008d1c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cb4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	3302      	adds	r3, #2
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	e007      	b.n	8008cce <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1c8      	bne.n	8008c7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2140      	movs	r1, #64	@ 0x40
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 fb02 	bl	8009300 <UART_WaitOnFlagUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e006      	b.n	8008d1c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e000      	b.n	8008d1c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008d1a:	2302      	movs	r3, #2
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d28:	b094      	sub	sp, #80	@ 0x50
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	4b7e      	ldr	r3, [pc, #504]	@ (8008f34 <UART_SetConfig+0x210>)
 8008d3a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	431a      	orrs	r2, r3
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4977      	ldr	r1, [pc, #476]	@ (8008f38 <UART_SetConfig+0x214>)
 8008d5c:	4019      	ands	r1, r3
 8008d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d64:	430b      	orrs	r3, r1
 8008d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d74:	68d9      	ldr	r1, [r3, #12]
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	ea40 0301 	orr.w	r3, r0, r1
 8008d7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008f34 <UART_SetConfig+0x210>)
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d009      	beq.n	8008da4 <UART_SetConfig+0x80>
 8008d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b69      	ldr	r3, [pc, #420]	@ (8008f3c <UART_SetConfig+0x218>)
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d004      	beq.n	8008da4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	6a1a      	ldr	r2, [r3, #32]
 8008d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da0:	4313      	orrs	r3, r2
 8008da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008dae:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db8:	430b      	orrs	r3, r1
 8008dba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc2:	f023 000f 	bic.w	r0, r3, #15
 8008dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	ea40 0301 	orr.w	r3, r0, r1
 8008dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	4b59      	ldr	r3, [pc, #356]	@ (8008f40 <UART_SetConfig+0x21c>)
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d102      	bne.n	8008de4 <UART_SetConfig+0xc0>
 8008dde:	2301      	movs	r3, #1
 8008de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008de2:	e029      	b.n	8008e38 <UART_SetConfig+0x114>
 8008de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	4b56      	ldr	r3, [pc, #344]	@ (8008f44 <UART_SetConfig+0x220>)
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d102      	bne.n	8008df4 <UART_SetConfig+0xd0>
 8008dee:	2302      	movs	r3, #2
 8008df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008df2:	e021      	b.n	8008e38 <UART_SetConfig+0x114>
 8008df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	4b53      	ldr	r3, [pc, #332]	@ (8008f48 <UART_SetConfig+0x224>)
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d102      	bne.n	8008e04 <UART_SetConfig+0xe0>
 8008dfe:	2304      	movs	r3, #4
 8008e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e02:	e019      	b.n	8008e38 <UART_SetConfig+0x114>
 8008e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b50      	ldr	r3, [pc, #320]	@ (8008f4c <UART_SetConfig+0x228>)
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d102      	bne.n	8008e14 <UART_SetConfig+0xf0>
 8008e0e:	2308      	movs	r3, #8
 8008e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e12:	e011      	b.n	8008e38 <UART_SetConfig+0x114>
 8008e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	4b4d      	ldr	r3, [pc, #308]	@ (8008f50 <UART_SetConfig+0x22c>)
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d102      	bne.n	8008e24 <UART_SetConfig+0x100>
 8008e1e:	2310      	movs	r3, #16
 8008e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e22:	e009      	b.n	8008e38 <UART_SetConfig+0x114>
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	4b42      	ldr	r3, [pc, #264]	@ (8008f34 <UART_SetConfig+0x210>)
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d102      	bne.n	8008e34 <UART_SetConfig+0x110>
 8008e2e:	2320      	movs	r3, #32
 8008e30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e32:	e001      	b.n	8008e38 <UART_SetConfig+0x114>
 8008e34:	2300      	movs	r3, #0
 8008e36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8008f34 <UART_SetConfig+0x210>)
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d005      	beq.n	8008e4e <UART_SetConfig+0x12a>
 8008e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b3d      	ldr	r3, [pc, #244]	@ (8008f3c <UART_SetConfig+0x218>)
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	f040 8085 	bne.w	8008f58 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e50:	2200      	movs	r2, #0
 8008e52:	623b      	str	r3, [r7, #32]
 8008e54:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e5a:	f7fc ff25 	bl	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e5e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80e8 	beq.w	8009038 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	4a39      	ldr	r2, [pc, #228]	@ (8008f54 <UART_SetConfig+0x230>)
 8008e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	4413      	add	r3, r2
 8008e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d305      	bcc.n	8008e98 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d903      	bls.n	8008ea0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e9e:	e048      	b.n	8008f32 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	61bb      	str	r3, [r7, #24]
 8008ea6:	61fa      	str	r2, [r7, #28]
 8008ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	4a29      	ldr	r2, [pc, #164]	@ (8008f54 <UART_SetConfig+0x230>)
 8008eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	617a      	str	r2, [r7, #20]
 8008eba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ebe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ec2:	f7f7 f9e1 	bl	8000288 <__aeabi_uldivmod>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	020b      	lsls	r3, r1, #8
 8008ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008edc:	0202      	lsls	r2, r0, #8
 8008ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee0:	6849      	ldr	r1, [r1, #4]
 8008ee2:	0849      	lsrs	r1, r1, #1
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	4605      	mov	r5, r0
 8008eea:	eb12 0804 	adds.w	r8, r2, r4
 8008eee:	eb43 0905 	adc.w	r9, r3, r5
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	60fa      	str	r2, [r7, #12]
 8008efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f00:	4640      	mov	r0, r8
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7f7 f9c0 	bl	8000288 <__aeabi_uldivmod>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f16:	d308      	bcc.n	8008f2a <UART_SetConfig+0x206>
 8008f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f1e:	d204      	bcs.n	8008f2a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f26:	60da      	str	r2, [r3, #12]
 8008f28:	e003      	b.n	8008f32 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008f30:	e082      	b.n	8009038 <UART_SetConfig+0x314>
 8008f32:	e081      	b.n	8009038 <UART_SetConfig+0x314>
 8008f34:	46002400 	.word	0x46002400
 8008f38:	cfff69f3 	.word	0xcfff69f3
 8008f3c:	56002400 	.word	0x56002400
 8008f40:	40013800 	.word	0x40013800
 8008f44:	40004400 	.word	0x40004400
 8008f48:	40004800 	.word	0x40004800
 8008f4c:	40004c00 	.word	0x40004c00
 8008f50:	40005000 	.word	0x40005000
 8008f54:	0800a194 	.word	0x0800a194
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f60:	d13c      	bne.n	8008fdc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f64:	2200      	movs	r2, #0
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f6e:	f7fc fe9b 	bl	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f72:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d05e      	beq.n	8009038 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7e:	4a39      	ldr	r2, [pc, #228]	@ (8009064 <UART_SetConfig+0x340>)
 8008f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f8c:	005a      	lsls	r2, r3, #1
 8008f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	441a      	add	r2, r3
 8008f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa2:	2b0f      	cmp	r3, #15
 8008fa4:	d916      	bls.n	8008fd4 <UART_SetConfig+0x2b0>
 8008fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fac:	d212      	bcs.n	8008fd4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f023 030f 	bic.w	r3, r3, #15
 8008fb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	f003 0307 	and.w	r3, r3, #7
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008fd0:	60da      	str	r2, [r3, #12]
 8008fd2:	e031      	b.n	8009038 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008fda:	e02d      	b.n	8009038 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fde:	2200      	movs	r2, #0
 8008fe0:	469a      	mov	sl, r3
 8008fe2:	4693      	mov	fp, r2
 8008fe4:	4650      	mov	r0, sl
 8008fe6:	4659      	mov	r1, fp
 8008fe8:	f7fc fe5e 	bl	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fec:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d021      	beq.n	8009038 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8009064 <UART_SetConfig+0x340>)
 8008ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009002:	fbb3 f2f2 	udiv	r2, r3, r2
 8009006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	085b      	lsrs	r3, r3, #1
 800900c:	441a      	add	r2, r3
 800900e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	fbb2 f3f3 	udiv	r3, r2, r3
 8009016:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901a:	2b0f      	cmp	r3, #15
 800901c:	d909      	bls.n	8009032 <UART_SetConfig+0x30e>
 800901e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009024:	d205      	bcs.n	8009032 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009028:	b29a      	uxth	r2, r3
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60da      	str	r2, [r3, #12]
 8009030:	e002      	b.n	8009038 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903a:	2201      	movs	r2, #1
 800903c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009042:	2201      	movs	r2, #1
 8009044:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904a:	2200      	movs	r2, #0
 800904c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800904e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009050:	2200      	movs	r2, #0
 8009052:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009054:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009058:	4618      	mov	r0, r3
 800905a:	3750      	adds	r7, #80	@ 0x50
 800905c:	46bd      	mov	sp, r7
 800905e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009062:	bf00      	nop
 8009064:	0800a194 	.word	0x0800a194

08009068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00a      	beq.n	8009092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00a      	beq.n	80090f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090fc:	f003 0310 	and.w	r3, r3, #16
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00a      	beq.n	800911a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00a      	beq.n	800913c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d01a      	beq.n	800917e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009166:	d10a      	bne.n	800917e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	605a      	str	r2, [r3, #4]
  }
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b098      	sub	sp, #96	@ 0x60
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091bc:	f7f8 fcec 	bl	8001b98 <HAL_GetTick>
 80091c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d12f      	bne.n	8009230 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091d8:	2200      	movs	r2, #0
 80091da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f88e 	bl	8009300 <UART_WaitOnFlagUntilTimeout>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d022      	beq.n	8009230 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f2:	e853 3f00 	ldrex	r3, [r3]
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	461a      	mov	r2, r3
 8009206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009208:	647b      	str	r3, [r7, #68]	@ 0x44
 800920a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800920e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e6      	bne.n	80091ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2220      	movs	r2, #32
 8009220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e063      	b.n	80092f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b04      	cmp	r3, #4
 800923c:	d149      	bne.n	80092d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800923e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009246:	2200      	movs	r2, #0
 8009248:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f857 	bl	8009300 <UART_WaitOnFlagUntilTimeout>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d03c      	beq.n	80092d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	623b      	str	r3, [r7, #32]
   return(result);
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800926c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009276:	633b      	str	r3, [r7, #48]	@ 0x30
 8009278:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800927c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927e:	e841 2300 	strex	r3, r2, [r1]
 8009282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e6      	bne.n	8009258 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	60fb      	str	r3, [r7, #12]
   return(result);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3308      	adds	r3, #8
 80092a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092aa:	61fa      	str	r2, [r7, #28]
 80092ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	69b9      	ldr	r1, [r7, #24]
 80092b0:	69fa      	ldr	r2, [r7, #28]
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	617b      	str	r3, [r7, #20]
   return(result);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e5      	bne.n	800928a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e012      	b.n	80092f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3758      	adds	r7, #88	@ 0x58
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009310:	e04f      	b.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009318:	d04b      	beq.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800931a:	f7f8 fc3d 	bl	8001b98 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	429a      	cmp	r2, r3
 8009328:	d302      	bcc.n	8009330 <UART_WaitOnFlagUntilTimeout+0x30>
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e04e      	b.n	80093d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0304 	and.w	r3, r3, #4
 800933e:	2b00      	cmp	r3, #0
 8009340:	d037      	beq.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b80      	cmp	r3, #128	@ 0x80
 8009346:	d034      	beq.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b40      	cmp	r3, #64	@ 0x40
 800934c:	d031      	beq.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69db      	ldr	r3, [r3, #28]
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b08      	cmp	r3, #8
 800935a:	d110      	bne.n	800937e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2208      	movs	r2, #8
 8009362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 f838 	bl	80093da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2208      	movs	r2, #8
 800936e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e029      	b.n	80093d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800938c:	d111      	bne.n	80093b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f81e 	bl	80093da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e00f      	b.n	80093d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69da      	ldr	r2, [r3, #28]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4013      	ands	r3, r2
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	429a      	cmp	r2, r3
 80093c0:	bf0c      	ite	eq
 80093c2:	2301      	moveq	r3, #1
 80093c4:	2300      	movne	r3, #0
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	461a      	mov	r2, r3
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d0a0      	beq.n	8009312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093da:	b480      	push	{r7}
 80093dc:	b095      	sub	sp, #84	@ 0x54
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009400:	643b      	str	r3, [r7, #64]	@ 0x40
 8009402:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800940e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e6      	bne.n	80093e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	61fb      	str	r3, [r7, #28]
   return(result);
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800942a:	f023 0301 	bic.w	r3, r3, #1
 800942e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3308      	adds	r3, #8
 8009436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800943a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800943e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e3      	bne.n	8009414 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009450:	2b01      	cmp	r3, #1
 8009452:	d118      	bne.n	8009486 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	60bb      	str	r3, [r7, #8]
   return(result);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f023 0310 	bic.w	r3, r3, #16
 8009468:	647b      	str	r3, [r7, #68]	@ 0x44
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009472:	61bb      	str	r3, [r7, #24]
 8009474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6979      	ldr	r1, [r7, #20]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	613b      	str	r3, [r7, #16]
   return(result);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e6      	bne.n	8009454 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800949a:	bf00      	nop
 800949c:	3754      	adds	r7, #84	@ 0x54
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_DisableFifoMode+0x16>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e027      	b.n	800950c <HAL_UARTEx_DisableFifoMode+0x66>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	@ 0x24
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0201 	bic.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009528:	2b01      	cmp	r3, #1
 800952a:	d101      	bne.n	8009530 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800952c:	2302      	movs	r3, #2
 800952e:	e02d      	b.n	800958c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2224      	movs	r2, #36	@ 0x24
 800953c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0201 	bic.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f84f 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e02d      	b.n	8009608 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	@ 0x24
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0201 	bic.w	r2, r2, #1
 80095d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f811 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009630:	e031      	b.n	8009696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009632:	2308      	movs	r3, #8
 8009634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009636:	2308      	movs	r3, #8
 8009638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	0e5b      	lsrs	r3, r3, #25
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	0f5b      	lsrs	r3, r3, #29
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 0307 	and.w	r3, r3, #7
 8009658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	7b3a      	ldrb	r2, [r7, #12]
 800965e:	4911      	ldr	r1, [pc, #68]	@ (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009660:	5c8a      	ldrb	r2, [r1, r2]
 8009662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009666:	7b3a      	ldrb	r2, [r7, #12]
 8009668:	490f      	ldr	r1, [pc, #60]	@ (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 800966a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	7b7a      	ldrb	r2, [r7, #13]
 800967c:	4909      	ldr	r1, [pc, #36]	@ (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 800967e:	5c8a      	ldrb	r2, [r1, r2]
 8009680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009684:	7b7a      	ldrb	r2, [r7, #13]
 8009686:	4908      	ldr	r1, [pc, #32]	@ (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800968a:	fb93 f3f2 	sdiv	r3, r3, r2
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	0800a1ac 	.word	0x0800a1ac
 80096a8:	0800a1b4 	.word	0x0800a1b4

080096ac <siprintf>:
 80096ac:	b40e      	push	{r1, r2, r3}
 80096ae:	b510      	push	{r4, lr}
 80096b0:	b09d      	sub	sp, #116	@ 0x74
 80096b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096b6:	2400      	movs	r4, #0
 80096b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80096ba:	9002      	str	r0, [sp, #8]
 80096bc:	9006      	str	r0, [sp, #24]
 80096be:	9107      	str	r1, [sp, #28]
 80096c0:	9104      	str	r1, [sp, #16]
 80096c2:	4809      	ldr	r0, [pc, #36]	@ (80096e8 <siprintf+0x3c>)
 80096c4:	4909      	ldr	r1, [pc, #36]	@ (80096ec <siprintf+0x40>)
 80096c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ca:	9105      	str	r1, [sp, #20]
 80096cc:	a902      	add	r1, sp, #8
 80096ce:	6800      	ldr	r0, [r0, #0]
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80096d4:	f000 f994 	bl	8009a00 <_svfiprintf_r>
 80096d8:	9b02      	ldr	r3, [sp, #8]
 80096da:	701c      	strb	r4, [r3, #0]
 80096dc:	b01d      	add	sp, #116	@ 0x74
 80096de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e2:	b003      	add	sp, #12
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	2000000c 	.word	0x2000000c
 80096ec:	ffff0208 	.word	0xffff0208

080096f0 <memset>:
 80096f0:	4402      	add	r2, r0
 80096f2:	4603      	mov	r3, r0
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d100      	bne.n	80096fa <memset+0xa>
 80096f8:	4770      	bx	lr
 80096fa:	f803 1b01 	strb.w	r1, [r3], #1
 80096fe:	e7f9      	b.n	80096f4 <memset+0x4>

08009700 <__errno>:
 8009700:	4b01      	ldr	r3, [pc, #4]	@ (8009708 <__errno+0x8>)
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	2000000c 	.word	0x2000000c

0800970c <__libc_init_array>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4d0d      	ldr	r5, [pc, #52]	@ (8009744 <__libc_init_array+0x38>)
 8009710:	2600      	movs	r6, #0
 8009712:	4c0d      	ldr	r4, [pc, #52]	@ (8009748 <__libc_init_array+0x3c>)
 8009714:	1b64      	subs	r4, r4, r5
 8009716:	10a4      	asrs	r4, r4, #2
 8009718:	42a6      	cmp	r6, r4
 800971a:	d109      	bne.n	8009730 <__libc_init_array+0x24>
 800971c:	4d0b      	ldr	r5, [pc, #44]	@ (800974c <__libc_init_array+0x40>)
 800971e:	2600      	movs	r6, #0
 8009720:	4c0b      	ldr	r4, [pc, #44]	@ (8009750 <__libc_init_array+0x44>)
 8009722:	f000 fc75 	bl	800a010 <_init>
 8009726:	1b64      	subs	r4, r4, r5
 8009728:	10a4      	asrs	r4, r4, #2
 800972a:	42a6      	cmp	r6, r4
 800972c:	d105      	bne.n	800973a <__libc_init_array+0x2e>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	f855 3b04 	ldr.w	r3, [r5], #4
 8009734:	3601      	adds	r6, #1
 8009736:	4798      	blx	r3
 8009738:	e7ee      	b.n	8009718 <__libc_init_array+0xc>
 800973a:	f855 3b04 	ldr.w	r3, [r5], #4
 800973e:	3601      	adds	r6, #1
 8009740:	4798      	blx	r3
 8009742:	e7f2      	b.n	800972a <__libc_init_array+0x1e>
 8009744:	0800a1f8 	.word	0x0800a1f8
 8009748:	0800a1f8 	.word	0x0800a1f8
 800974c:	0800a1f8 	.word	0x0800a1f8
 8009750:	0800a1fc 	.word	0x0800a1fc

08009754 <__retarget_lock_acquire_recursive>:
 8009754:	4770      	bx	lr

08009756 <__retarget_lock_release_recursive>:
 8009756:	4770      	bx	lr

08009758 <_free_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4605      	mov	r5, r0
 800975c:	2900      	cmp	r1, #0
 800975e:	d041      	beq.n	80097e4 <_free_r+0x8c>
 8009760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009764:	1f0c      	subs	r4, r1, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfb8      	it	lt
 800976a:	18e4      	addlt	r4, r4, r3
 800976c:	f000 f8e0 	bl	8009930 <__malloc_lock>
 8009770:	4a1d      	ldr	r2, [pc, #116]	@ (80097e8 <_free_r+0x90>)
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	b933      	cbnz	r3, 8009784 <_free_r+0x2c>
 8009776:	6063      	str	r3, [r4, #4]
 8009778:	6014      	str	r4, [r2, #0]
 800977a:	4628      	mov	r0, r5
 800977c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009780:	f000 b8dc 	b.w	800993c <__malloc_unlock>
 8009784:	42a3      	cmp	r3, r4
 8009786:	d908      	bls.n	800979a <_free_r+0x42>
 8009788:	6820      	ldr	r0, [r4, #0]
 800978a:	1821      	adds	r1, r4, r0
 800978c:	428b      	cmp	r3, r1
 800978e:	bf01      	itttt	eq
 8009790:	6819      	ldreq	r1, [r3, #0]
 8009792:	685b      	ldreq	r3, [r3, #4]
 8009794:	1809      	addeq	r1, r1, r0
 8009796:	6021      	streq	r1, [r4, #0]
 8009798:	e7ed      	b.n	8009776 <_free_r+0x1e>
 800979a:	461a      	mov	r2, r3
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	b10b      	cbz	r3, 80097a4 <_free_r+0x4c>
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d9fa      	bls.n	800979a <_free_r+0x42>
 80097a4:	6811      	ldr	r1, [r2, #0]
 80097a6:	1850      	adds	r0, r2, r1
 80097a8:	42a0      	cmp	r0, r4
 80097aa:	d10b      	bne.n	80097c4 <_free_r+0x6c>
 80097ac:	6820      	ldr	r0, [r4, #0]
 80097ae:	4401      	add	r1, r0
 80097b0:	1850      	adds	r0, r2, r1
 80097b2:	6011      	str	r1, [r2, #0]
 80097b4:	4283      	cmp	r3, r0
 80097b6:	d1e0      	bne.n	800977a <_free_r+0x22>
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4408      	add	r0, r1
 80097be:	6053      	str	r3, [r2, #4]
 80097c0:	6010      	str	r0, [r2, #0]
 80097c2:	e7da      	b.n	800977a <_free_r+0x22>
 80097c4:	d902      	bls.n	80097cc <_free_r+0x74>
 80097c6:	230c      	movs	r3, #12
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	e7d6      	b.n	800977a <_free_r+0x22>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	1821      	adds	r1, r4, r0
 80097d0:	428b      	cmp	r3, r1
 80097d2:	bf02      	ittt	eq
 80097d4:	6819      	ldreq	r1, [r3, #0]
 80097d6:	685b      	ldreq	r3, [r3, #4]
 80097d8:	1809      	addeq	r1, r1, r0
 80097da:	6063      	str	r3, [r4, #4]
 80097dc:	bf08      	it	eq
 80097de:	6021      	streq	r1, [r4, #0]
 80097e0:	6054      	str	r4, [r2, #4]
 80097e2:	e7ca      	b.n	800977a <_free_r+0x22>
 80097e4:	bd38      	pop	{r3, r4, r5, pc}
 80097e6:	bf00      	nop
 80097e8:	2000063c 	.word	0x2000063c

080097ec <sbrk_aligned>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4e0f      	ldr	r6, [pc, #60]	@ (800982c <sbrk_aligned+0x40>)
 80097f0:	460c      	mov	r4, r1
 80097f2:	4605      	mov	r5, r0
 80097f4:	6831      	ldr	r1, [r6, #0]
 80097f6:	b911      	cbnz	r1, 80097fe <sbrk_aligned+0x12>
 80097f8:	f000 fba8 	bl	8009f4c <_sbrk_r>
 80097fc:	6030      	str	r0, [r6, #0]
 80097fe:	4621      	mov	r1, r4
 8009800:	4628      	mov	r0, r5
 8009802:	f000 fba3 	bl	8009f4c <_sbrk_r>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d103      	bne.n	8009812 <sbrk_aligned+0x26>
 800980a:	f04f 34ff 	mov.w	r4, #4294967295
 800980e:	4620      	mov	r0, r4
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	1cc4      	adds	r4, r0, #3
 8009814:	f024 0403 	bic.w	r4, r4, #3
 8009818:	42a0      	cmp	r0, r4
 800981a:	d0f8      	beq.n	800980e <sbrk_aligned+0x22>
 800981c:	1a21      	subs	r1, r4, r0
 800981e:	4628      	mov	r0, r5
 8009820:	f000 fb94 	bl	8009f4c <_sbrk_r>
 8009824:	3001      	adds	r0, #1
 8009826:	d1f2      	bne.n	800980e <sbrk_aligned+0x22>
 8009828:	e7ef      	b.n	800980a <sbrk_aligned+0x1e>
 800982a:	bf00      	nop
 800982c:	20000638 	.word	0x20000638

08009830 <_malloc_r>:
 8009830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009834:	1ccd      	adds	r5, r1, #3
 8009836:	4606      	mov	r6, r0
 8009838:	f025 0503 	bic.w	r5, r5, #3
 800983c:	3508      	adds	r5, #8
 800983e:	2d0c      	cmp	r5, #12
 8009840:	bf38      	it	cc
 8009842:	250c      	movcc	r5, #12
 8009844:	2d00      	cmp	r5, #0
 8009846:	db01      	blt.n	800984c <_malloc_r+0x1c>
 8009848:	42a9      	cmp	r1, r5
 800984a:	d904      	bls.n	8009856 <_malloc_r+0x26>
 800984c:	230c      	movs	r3, #12
 800984e:	6033      	str	r3, [r6, #0]
 8009850:	2000      	movs	r0, #0
 8009852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009856:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800992c <_malloc_r+0xfc>
 800985a:	f000 f869 	bl	8009930 <__malloc_lock>
 800985e:	f8d8 3000 	ldr.w	r3, [r8]
 8009862:	461c      	mov	r4, r3
 8009864:	bb44      	cbnz	r4, 80098b8 <_malloc_r+0x88>
 8009866:	4629      	mov	r1, r5
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff ffbf 	bl	80097ec <sbrk_aligned>
 800986e:	1c43      	adds	r3, r0, #1
 8009870:	4604      	mov	r4, r0
 8009872:	d158      	bne.n	8009926 <_malloc_r+0xf6>
 8009874:	f8d8 4000 	ldr.w	r4, [r8]
 8009878:	4627      	mov	r7, r4
 800987a:	2f00      	cmp	r7, #0
 800987c:	d143      	bne.n	8009906 <_malloc_r+0xd6>
 800987e:	2c00      	cmp	r4, #0
 8009880:	d04b      	beq.n	800991a <_malloc_r+0xea>
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	4639      	mov	r1, r7
 8009886:	4630      	mov	r0, r6
 8009888:	eb04 0903 	add.w	r9, r4, r3
 800988c:	f000 fb5e 	bl	8009f4c <_sbrk_r>
 8009890:	4581      	cmp	r9, r0
 8009892:	d142      	bne.n	800991a <_malloc_r+0xea>
 8009894:	6821      	ldr	r1, [r4, #0]
 8009896:	4630      	mov	r0, r6
 8009898:	1a6d      	subs	r5, r5, r1
 800989a:	4629      	mov	r1, r5
 800989c:	f7ff ffa6 	bl	80097ec <sbrk_aligned>
 80098a0:	3001      	adds	r0, #1
 80098a2:	d03a      	beq.n	800991a <_malloc_r+0xea>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	442b      	add	r3, r5
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	f8d8 3000 	ldr.w	r3, [r8]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	bb62      	cbnz	r2, 800990c <_malloc_r+0xdc>
 80098b2:	f8c8 7000 	str.w	r7, [r8]
 80098b6:	e00f      	b.n	80098d8 <_malloc_r+0xa8>
 80098b8:	6822      	ldr	r2, [r4, #0]
 80098ba:	1b52      	subs	r2, r2, r5
 80098bc:	d420      	bmi.n	8009900 <_malloc_r+0xd0>
 80098be:	2a0b      	cmp	r2, #11
 80098c0:	d917      	bls.n	80098f2 <_malloc_r+0xc2>
 80098c2:	1961      	adds	r1, r4, r5
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	6025      	str	r5, [r4, #0]
 80098c8:	bf18      	it	ne
 80098ca:	6059      	strne	r1, [r3, #4]
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	bf08      	it	eq
 80098d0:	f8c8 1000 	streq.w	r1, [r8]
 80098d4:	5162      	str	r2, [r4, r5]
 80098d6:	604b      	str	r3, [r1, #4]
 80098d8:	4630      	mov	r0, r6
 80098da:	f000 f82f 	bl	800993c <__malloc_unlock>
 80098de:	f104 000b 	add.w	r0, r4, #11
 80098e2:	1d23      	adds	r3, r4, #4
 80098e4:	f020 0007 	bic.w	r0, r0, #7
 80098e8:	1ac2      	subs	r2, r0, r3
 80098ea:	bf1c      	itt	ne
 80098ec:	1a1b      	subne	r3, r3, r0
 80098ee:	50a3      	strne	r3, [r4, r2]
 80098f0:	e7af      	b.n	8009852 <_malloc_r+0x22>
 80098f2:	6862      	ldr	r2, [r4, #4]
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	bf0c      	ite	eq
 80098f8:	f8c8 2000 	streq.w	r2, [r8]
 80098fc:	605a      	strne	r2, [r3, #4]
 80098fe:	e7eb      	b.n	80098d8 <_malloc_r+0xa8>
 8009900:	4623      	mov	r3, r4
 8009902:	6864      	ldr	r4, [r4, #4]
 8009904:	e7ae      	b.n	8009864 <_malloc_r+0x34>
 8009906:	463c      	mov	r4, r7
 8009908:	687f      	ldr	r7, [r7, #4]
 800990a:	e7b6      	b.n	800987a <_malloc_r+0x4a>
 800990c:	461a      	mov	r2, r3
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	42a3      	cmp	r3, r4
 8009912:	d1fb      	bne.n	800990c <_malloc_r+0xdc>
 8009914:	2300      	movs	r3, #0
 8009916:	6053      	str	r3, [r2, #4]
 8009918:	e7de      	b.n	80098d8 <_malloc_r+0xa8>
 800991a:	230c      	movs	r3, #12
 800991c:	4630      	mov	r0, r6
 800991e:	6033      	str	r3, [r6, #0]
 8009920:	f000 f80c 	bl	800993c <__malloc_unlock>
 8009924:	e794      	b.n	8009850 <_malloc_r+0x20>
 8009926:	6005      	str	r5, [r0, #0]
 8009928:	e7d6      	b.n	80098d8 <_malloc_r+0xa8>
 800992a:	bf00      	nop
 800992c:	2000063c 	.word	0x2000063c

08009930 <__malloc_lock>:
 8009930:	4801      	ldr	r0, [pc, #4]	@ (8009938 <__malloc_lock+0x8>)
 8009932:	f7ff bf0f 	b.w	8009754 <__retarget_lock_acquire_recursive>
 8009936:	bf00      	nop
 8009938:	20000634 	.word	0x20000634

0800993c <__malloc_unlock>:
 800993c:	4801      	ldr	r0, [pc, #4]	@ (8009944 <__malloc_unlock+0x8>)
 800993e:	f7ff bf0a 	b.w	8009756 <__retarget_lock_release_recursive>
 8009942:	bf00      	nop
 8009944:	20000634 	.word	0x20000634

08009948 <__ssputs_r>:
 8009948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800994c:	461f      	mov	r7, r3
 800994e:	688e      	ldr	r6, [r1, #8]
 8009950:	4682      	mov	sl, r0
 8009952:	460c      	mov	r4, r1
 8009954:	42be      	cmp	r6, r7
 8009956:	4690      	mov	r8, r2
 8009958:	680b      	ldr	r3, [r1, #0]
 800995a:	d82d      	bhi.n	80099b8 <__ssputs_r+0x70>
 800995c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009964:	d026      	beq.n	80099b4 <__ssputs_r+0x6c>
 8009966:	6965      	ldr	r5, [r4, #20]
 8009968:	6909      	ldr	r1, [r1, #16]
 800996a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800996e:	eba3 0901 	sub.w	r9, r3, r1
 8009972:	1c7b      	adds	r3, r7, #1
 8009974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009978:	444b      	add	r3, r9
 800997a:	106d      	asrs	r5, r5, #1
 800997c:	429d      	cmp	r5, r3
 800997e:	bf38      	it	cc
 8009980:	461d      	movcc	r5, r3
 8009982:	0553      	lsls	r3, r2, #21
 8009984:	d527      	bpl.n	80099d6 <__ssputs_r+0x8e>
 8009986:	4629      	mov	r1, r5
 8009988:	f7ff ff52 	bl	8009830 <_malloc_r>
 800998c:	4606      	mov	r6, r0
 800998e:	b360      	cbz	r0, 80099ea <__ssputs_r+0xa2>
 8009990:	464a      	mov	r2, r9
 8009992:	6921      	ldr	r1, [r4, #16]
 8009994:	f000 faf8 	bl	8009f88 <memcpy>
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800999e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a2:	81a3      	strh	r3, [r4, #12]
 80099a4:	6126      	str	r6, [r4, #16]
 80099a6:	444e      	add	r6, r9
 80099a8:	6165      	str	r5, [r4, #20]
 80099aa:	eba5 0509 	sub.w	r5, r5, r9
 80099ae:	6026      	str	r6, [r4, #0]
 80099b0:	463e      	mov	r6, r7
 80099b2:	60a5      	str	r5, [r4, #8]
 80099b4:	42be      	cmp	r6, r7
 80099b6:	d900      	bls.n	80099ba <__ssputs_r+0x72>
 80099b8:	463e      	mov	r6, r7
 80099ba:	4632      	mov	r2, r6
 80099bc:	4641      	mov	r1, r8
 80099be:	6820      	ldr	r0, [r4, #0]
 80099c0:	f000 faaa 	bl	8009f18 <memmove>
 80099c4:	68a3      	ldr	r3, [r4, #8]
 80099c6:	2000      	movs	r0, #0
 80099c8:	1b9b      	subs	r3, r3, r6
 80099ca:	60a3      	str	r3, [r4, #8]
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	4433      	add	r3, r6
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d6:	462a      	mov	r2, r5
 80099d8:	f000 fae3 	bl	8009fa2 <_realloc_r>
 80099dc:	4606      	mov	r6, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	d1e0      	bne.n	80099a4 <__ssputs_r+0x5c>
 80099e2:	6921      	ldr	r1, [r4, #16]
 80099e4:	4650      	mov	r0, sl
 80099e6:	f7ff feb7 	bl	8009758 <_free_r>
 80099ea:	230c      	movs	r3, #12
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295
 80099f0:	f8ca 3000 	str.w	r3, [sl]
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	e7e9      	b.n	80099d2 <__ssputs_r+0x8a>
	...

08009a00 <_svfiprintf_r>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	4698      	mov	r8, r3
 8009a06:	898b      	ldrh	r3, [r1, #12]
 8009a08:	b09d      	sub	sp, #116	@ 0x74
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	061b      	lsls	r3, r3, #24
 8009a0e:	460d      	mov	r5, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	d510      	bpl.n	8009a36 <_svfiprintf_r+0x36>
 8009a14:	690b      	ldr	r3, [r1, #16]
 8009a16:	b973      	cbnz	r3, 8009a36 <_svfiprintf_r+0x36>
 8009a18:	2140      	movs	r1, #64	@ 0x40
 8009a1a:	f7ff ff09 	bl	8009830 <_malloc_r>
 8009a1e:	6028      	str	r0, [r5, #0]
 8009a20:	6128      	str	r0, [r5, #16]
 8009a22:	b930      	cbnz	r0, 8009a32 <_svfiprintf_r+0x32>
 8009a24:	230c      	movs	r3, #12
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2c:	b01d      	add	sp, #116	@ 0x74
 8009a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a32:	2340      	movs	r3, #64	@ 0x40
 8009a34:	616b      	str	r3, [r5, #20]
 8009a36:	2300      	movs	r3, #0
 8009a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a3c:	f04f 0901 	mov.w	r9, #1
 8009a40:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009be4 <_svfiprintf_r+0x1e4>
 8009a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a46:	2320      	movs	r3, #32
 8009a48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a4c:	2330      	movs	r3, #48	@ 0x30
 8009a4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a52:	4623      	mov	r3, r4
 8009a54:	469a      	mov	sl, r3
 8009a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5a:	b10a      	cbz	r2, 8009a60 <_svfiprintf_r+0x60>
 8009a5c:	2a25      	cmp	r2, #37	@ 0x25
 8009a5e:	d1f9      	bne.n	8009a54 <_svfiprintf_r+0x54>
 8009a60:	ebba 0b04 	subs.w	fp, sl, r4
 8009a64:	d00b      	beq.n	8009a7e <_svfiprintf_r+0x7e>
 8009a66:	465b      	mov	r3, fp
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff ff6b 	bl	8009948 <__ssputs_r>
 8009a72:	3001      	adds	r0, #1
 8009a74:	f000 80a7 	beq.w	8009bc6 <_svfiprintf_r+0x1c6>
 8009a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a7a:	445a      	add	r2, fp
 8009a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 809f 	beq.w	8009bc6 <_svfiprintf_r+0x1c6>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8e:	f10a 0a01 	add.w	sl, sl, #1
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	9307      	str	r3, [sp, #28]
 8009a96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa0:	4654      	mov	r4, sl
 8009aa2:	2205      	movs	r2, #5
 8009aa4:	484f      	ldr	r0, [pc, #316]	@ (8009be4 <_svfiprintf_r+0x1e4>)
 8009aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aaa:	f000 fa5f 	bl	8009f6c <memchr>
 8009aae:	9a04      	ldr	r2, [sp, #16]
 8009ab0:	b9d8      	cbnz	r0, 8009aea <_svfiprintf_r+0xea>
 8009ab2:	06d0      	lsls	r0, r2, #27
 8009ab4:	bf44      	itt	mi
 8009ab6:	2320      	movmi	r3, #32
 8009ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009abc:	0711      	lsls	r1, r2, #28
 8009abe:	bf44      	itt	mi
 8009ac0:	232b      	movmi	r3, #43	@ 0x2b
 8009ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8009acc:	d015      	beq.n	8009afa <_svfiprintf_r+0xfa>
 8009ace:	9a07      	ldr	r2, [sp, #28]
 8009ad0:	4654      	mov	r4, sl
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	f04f 0c0a 	mov.w	ip, #10
 8009ad8:	4621      	mov	r1, r4
 8009ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ade:	3b30      	subs	r3, #48	@ 0x30
 8009ae0:	2b09      	cmp	r3, #9
 8009ae2:	d94b      	bls.n	8009b7c <_svfiprintf_r+0x17c>
 8009ae4:	b1b0      	cbz	r0, 8009b14 <_svfiprintf_r+0x114>
 8009ae6:	9207      	str	r2, [sp, #28]
 8009ae8:	e014      	b.n	8009b14 <_svfiprintf_r+0x114>
 8009aea:	eba0 0308 	sub.w	r3, r0, r8
 8009aee:	46a2      	mov	sl, r4
 8009af0:	fa09 f303 	lsl.w	r3, r9, r3
 8009af4:	4313      	orrs	r3, r2
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	e7d2      	b.n	8009aa0 <_svfiprintf_r+0xa0>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	1d19      	adds	r1, r3, #4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	9103      	str	r1, [sp, #12]
 8009b04:	bfbb      	ittet	lt
 8009b06:	425b      	neglt	r3, r3
 8009b08:	f042 0202 	orrlt.w	r2, r2, #2
 8009b0c:	9307      	strge	r3, [sp, #28]
 8009b0e:	9307      	strlt	r3, [sp, #28]
 8009b10:	bfb8      	it	lt
 8009b12:	9204      	strlt	r2, [sp, #16]
 8009b14:	7823      	ldrb	r3, [r4, #0]
 8009b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b18:	d10a      	bne.n	8009b30 <_svfiprintf_r+0x130>
 8009b1a:	7863      	ldrb	r3, [r4, #1]
 8009b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b1e:	d132      	bne.n	8009b86 <_svfiprintf_r+0x186>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	3402      	adds	r4, #2
 8009b24:	1d1a      	adds	r2, r3, #4
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b2c:	9203      	str	r2, [sp, #12]
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009bf4 <_svfiprintf_r+0x1f4>
 8009b34:	2203      	movs	r2, #3
 8009b36:	7821      	ldrb	r1, [r4, #0]
 8009b38:	4650      	mov	r0, sl
 8009b3a:	f000 fa17 	bl	8009f6c <memchr>
 8009b3e:	b138      	cbz	r0, 8009b50 <_svfiprintf_r+0x150>
 8009b40:	eba0 000a 	sub.w	r0, r0, sl
 8009b44:	2240      	movs	r2, #64	@ 0x40
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	3401      	adds	r4, #1
 8009b4a:	4082      	lsls	r2, r0
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b54:	2206      	movs	r2, #6
 8009b56:	4824      	ldr	r0, [pc, #144]	@ (8009be8 <_svfiprintf_r+0x1e8>)
 8009b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b5c:	f000 fa06 	bl	8009f6c <memchr>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d036      	beq.n	8009bd2 <_svfiprintf_r+0x1d2>
 8009b64:	4b21      	ldr	r3, [pc, #132]	@ (8009bec <_svfiprintf_r+0x1ec>)
 8009b66:	bb1b      	cbnz	r3, 8009bb0 <_svfiprintf_r+0x1b0>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	3307      	adds	r3, #7
 8009b6c:	f023 0307 	bic.w	r3, r3, #7
 8009b70:	3308      	adds	r3, #8
 8009b72:	9303      	str	r3, [sp, #12]
 8009b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b76:	4433      	add	r3, r6
 8009b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b7a:	e76a      	b.n	8009a52 <_svfiprintf_r+0x52>
 8009b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b80:	460c      	mov	r4, r1
 8009b82:	2001      	movs	r0, #1
 8009b84:	e7a8      	b.n	8009ad8 <_svfiprintf_r+0xd8>
 8009b86:	2300      	movs	r3, #0
 8009b88:	3401      	adds	r4, #1
 8009b8a:	f04f 0c0a 	mov.w	ip, #10
 8009b8e:	4619      	mov	r1, r3
 8009b90:	9305      	str	r3, [sp, #20]
 8009b92:	4620      	mov	r0, r4
 8009b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b98:	3a30      	subs	r2, #48	@ 0x30
 8009b9a:	2a09      	cmp	r2, #9
 8009b9c:	d903      	bls.n	8009ba6 <_svfiprintf_r+0x1a6>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0c6      	beq.n	8009b30 <_svfiprintf_r+0x130>
 8009ba2:	9105      	str	r1, [sp, #20]
 8009ba4:	e7c4      	b.n	8009b30 <_svfiprintf_r+0x130>
 8009ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009baa:	4604      	mov	r4, r0
 8009bac:	2301      	movs	r3, #1
 8009bae:	e7f0      	b.n	8009b92 <_svfiprintf_r+0x192>
 8009bb0:	ab03      	add	r3, sp, #12
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	a904      	add	r1, sp, #16
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf0 <_svfiprintf_r+0x1f0>)
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	1c42      	adds	r2, r0, #1
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	d1d6      	bne.n	8009b74 <_svfiprintf_r+0x174>
 8009bc6:	89ab      	ldrh	r3, [r5, #12]
 8009bc8:	065b      	lsls	r3, r3, #25
 8009bca:	f53f af2d 	bmi.w	8009a28 <_svfiprintf_r+0x28>
 8009bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bd0:	e72c      	b.n	8009a2c <_svfiprintf_r+0x2c>
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	a904      	add	r1, sp, #16
 8009bd8:	4638      	mov	r0, r7
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4b04      	ldr	r3, [pc, #16]	@ (8009bf0 <_svfiprintf_r+0x1f0>)
 8009bde:	f000 f87d 	bl	8009cdc <_printf_i>
 8009be2:	e7ed      	b.n	8009bc0 <_svfiprintf_r+0x1c0>
 8009be4:	0800a1bc 	.word	0x0800a1bc
 8009be8:	0800a1c6 	.word	0x0800a1c6
 8009bec:	00000000 	.word	0x00000000
 8009bf0:	08009949 	.word	0x08009949
 8009bf4:	0800a1c2 	.word	0x0800a1c2

08009bf8 <_printf_common>:
 8009bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	4616      	mov	r6, r2
 8009bfe:	4698      	mov	r8, r3
 8009c00:	688a      	ldr	r2, [r1, #8]
 8009c02:	4607      	mov	r7, r0
 8009c04:	690b      	ldr	r3, [r1, #16]
 8009c06:	460c      	mov	r4, r1
 8009c08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bfb8      	it	lt
 8009c10:	4613      	movlt	r3, r2
 8009c12:	6033      	str	r3, [r6, #0]
 8009c14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c18:	b10a      	cbz	r2, 8009c1e <_printf_common+0x26>
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	6033      	str	r3, [r6, #0]
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	0699      	lsls	r1, r3, #26
 8009c22:	bf42      	ittt	mi
 8009c24:	6833      	ldrmi	r3, [r6, #0]
 8009c26:	3302      	addmi	r3, #2
 8009c28:	6033      	strmi	r3, [r6, #0]
 8009c2a:	6825      	ldr	r5, [r4, #0]
 8009c2c:	f015 0506 	ands.w	r5, r5, #6
 8009c30:	d106      	bne.n	8009c40 <_printf_common+0x48>
 8009c32:	f104 0a19 	add.w	sl, r4, #25
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	6832      	ldr	r2, [r6, #0]
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	42ab      	cmp	r3, r5
 8009c3e:	dc2b      	bgt.n	8009c98 <_printf_common+0xa0>
 8009c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c44:	6822      	ldr	r2, [r4, #0]
 8009c46:	3b00      	subs	r3, #0
 8009c48:	bf18      	it	ne
 8009c4a:	2301      	movne	r3, #1
 8009c4c:	0692      	lsls	r2, r2, #26
 8009c4e:	d430      	bmi.n	8009cb2 <_printf_common+0xba>
 8009c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c54:	4641      	mov	r1, r8
 8009c56:	4638      	mov	r0, r7
 8009c58:	47c8      	blx	r9
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d023      	beq.n	8009ca6 <_printf_common+0xae>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	341a      	adds	r4, #26
 8009c62:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009c66:	f003 0306 	and.w	r3, r3, #6
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	bf0a      	itet	eq
 8009c6e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009c72:	2500      	movne	r5, #0
 8009c74:	6833      	ldreq	r3, [r6, #0]
 8009c76:	f04f 0600 	mov.w	r6, #0
 8009c7a:	bf08      	it	eq
 8009c7c:	1aed      	subeq	r5, r5, r3
 8009c7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c82:	bf08      	it	eq
 8009c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	bfc4      	itt	gt
 8009c8c:	1a9b      	subgt	r3, r3, r2
 8009c8e:	18ed      	addgt	r5, r5, r3
 8009c90:	42b5      	cmp	r5, r6
 8009c92:	d11a      	bne.n	8009cca <_printf_common+0xd2>
 8009c94:	2000      	movs	r0, #0
 8009c96:	e008      	b.n	8009caa <_printf_common+0xb2>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	4652      	mov	r2, sl
 8009c9c:	4641      	mov	r1, r8
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	47c8      	blx	r9
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d103      	bne.n	8009cae <_printf_common+0xb6>
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	3501      	adds	r5, #1
 8009cb0:	e7c1      	b.n	8009c36 <_printf_common+0x3e>
 8009cb2:	18e1      	adds	r1, r4, r3
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	2030      	movs	r0, #48	@ 0x30
 8009cb8:	3302      	adds	r3, #2
 8009cba:	4422      	add	r2, r4
 8009cbc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cc8:	e7c2      	b.n	8009c50 <_printf_common+0x58>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4641      	mov	r1, r8
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	47c8      	blx	r9
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d0e6      	beq.n	8009ca6 <_printf_common+0xae>
 8009cd8:	3601      	adds	r6, #1
 8009cda:	e7d9      	b.n	8009c90 <_printf_common+0x98>

08009cdc <_printf_i>:
 8009cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	7e0f      	ldrb	r7, [r1, #24]
 8009ce2:	4691      	mov	r9, r2
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	2f78      	cmp	r7, #120	@ 0x78
 8009cea:	469a      	mov	sl, r3
 8009cec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cf2:	d807      	bhi.n	8009d04 <_printf_i+0x28>
 8009cf4:	2f62      	cmp	r7, #98	@ 0x62
 8009cf6:	d80a      	bhi.n	8009d0e <_printf_i+0x32>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	f000 80d1 	beq.w	8009ea0 <_printf_i+0x1c4>
 8009cfe:	2f58      	cmp	r7, #88	@ 0x58
 8009d00:	f000 80b8 	beq.w	8009e74 <_printf_i+0x198>
 8009d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d0c:	e03a      	b.n	8009d84 <_printf_i+0xa8>
 8009d0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d12:	2b15      	cmp	r3, #21
 8009d14:	d8f6      	bhi.n	8009d04 <_printf_i+0x28>
 8009d16:	a101      	add	r1, pc, #4	@ (adr r1, 8009d1c <_printf_i+0x40>)
 8009d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d89 	.word	0x08009d89
 8009d24:	08009d05 	.word	0x08009d05
 8009d28:	08009d05 	.word	0x08009d05
 8009d2c:	08009d05 	.word	0x08009d05
 8009d30:	08009d05 	.word	0x08009d05
 8009d34:	08009d89 	.word	0x08009d89
 8009d38:	08009d05 	.word	0x08009d05
 8009d3c:	08009d05 	.word	0x08009d05
 8009d40:	08009d05 	.word	0x08009d05
 8009d44:	08009d05 	.word	0x08009d05
 8009d48:	08009e87 	.word	0x08009e87
 8009d4c:	08009db3 	.word	0x08009db3
 8009d50:	08009e41 	.word	0x08009e41
 8009d54:	08009d05 	.word	0x08009d05
 8009d58:	08009d05 	.word	0x08009d05
 8009d5c:	08009ea9 	.word	0x08009ea9
 8009d60:	08009d05 	.word	0x08009d05
 8009d64:	08009db3 	.word	0x08009db3
 8009d68:	08009d05 	.word	0x08009d05
 8009d6c:	08009d05 	.word	0x08009d05
 8009d70:	08009e49 	.word	0x08009e49
 8009d74:	6833      	ldr	r3, [r6, #0]
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6032      	str	r2, [r6, #0]
 8009d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d84:	2301      	movs	r3, #1
 8009d86:	e09c      	b.n	8009ec2 <_printf_i+0x1e6>
 8009d88:	6833      	ldr	r3, [r6, #0]
 8009d8a:	6820      	ldr	r0, [r4, #0]
 8009d8c:	1d19      	adds	r1, r3, #4
 8009d8e:	6031      	str	r1, [r6, #0]
 8009d90:	0606      	lsls	r6, r0, #24
 8009d92:	d501      	bpl.n	8009d98 <_printf_i+0xbc>
 8009d94:	681d      	ldr	r5, [r3, #0]
 8009d96:	e003      	b.n	8009da0 <_printf_i+0xc4>
 8009d98:	0645      	lsls	r5, r0, #25
 8009d9a:	d5fb      	bpl.n	8009d94 <_printf_i+0xb8>
 8009d9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009da0:	2d00      	cmp	r5, #0
 8009da2:	da03      	bge.n	8009dac <_printf_i+0xd0>
 8009da4:	232d      	movs	r3, #45	@ 0x2d
 8009da6:	426d      	negs	r5, r5
 8009da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dac:	4858      	ldr	r0, [pc, #352]	@ (8009f10 <_printf_i+0x234>)
 8009dae:	230a      	movs	r3, #10
 8009db0:	e011      	b.n	8009dd6 <_printf_i+0xfa>
 8009db2:	6821      	ldr	r1, [r4, #0]
 8009db4:	6833      	ldr	r3, [r6, #0]
 8009db6:	0608      	lsls	r0, r1, #24
 8009db8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009dbc:	d402      	bmi.n	8009dc4 <_printf_i+0xe8>
 8009dbe:	0649      	lsls	r1, r1, #25
 8009dc0:	bf48      	it	mi
 8009dc2:	b2ad      	uxthmi	r5, r5
 8009dc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dc6:	6033      	str	r3, [r6, #0]
 8009dc8:	4851      	ldr	r0, [pc, #324]	@ (8009f10 <_printf_i+0x234>)
 8009dca:	bf14      	ite	ne
 8009dcc:	230a      	movne	r3, #10
 8009dce:	2308      	moveq	r3, #8
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dd6:	6866      	ldr	r6, [r4, #4]
 8009dd8:	2e00      	cmp	r6, #0
 8009dda:	60a6      	str	r6, [r4, #8]
 8009ddc:	db05      	blt.n	8009dea <_printf_i+0x10e>
 8009dde:	6821      	ldr	r1, [r4, #0]
 8009de0:	432e      	orrs	r6, r5
 8009de2:	f021 0104 	bic.w	r1, r1, #4
 8009de6:	6021      	str	r1, [r4, #0]
 8009de8:	d04b      	beq.n	8009e82 <_printf_i+0x1a6>
 8009dea:	4616      	mov	r6, r2
 8009dec:	fbb5 f1f3 	udiv	r1, r5, r3
 8009df0:	fb03 5711 	mls	r7, r3, r1, r5
 8009df4:	5dc7      	ldrb	r7, [r0, r7]
 8009df6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dfa:	462f      	mov	r7, r5
 8009dfc:	460d      	mov	r5, r1
 8009dfe:	42bb      	cmp	r3, r7
 8009e00:	d9f4      	bls.n	8009dec <_printf_i+0x110>
 8009e02:	2b08      	cmp	r3, #8
 8009e04:	d10b      	bne.n	8009e1e <_printf_i+0x142>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	07df      	lsls	r7, r3, #31
 8009e0a:	d508      	bpl.n	8009e1e <_printf_i+0x142>
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	6861      	ldr	r1, [r4, #4]
 8009e10:	4299      	cmp	r1, r3
 8009e12:	bfde      	ittt	le
 8009e14:	2330      	movle	r3, #48	@ 0x30
 8009e16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e1e:	1b92      	subs	r2, r2, r6
 8009e20:	6122      	str	r2, [r4, #16]
 8009e22:	464b      	mov	r3, r9
 8009e24:	aa03      	add	r2, sp, #12
 8009e26:	4621      	mov	r1, r4
 8009e28:	4640      	mov	r0, r8
 8009e2a:	f8cd a000 	str.w	sl, [sp]
 8009e2e:	f7ff fee3 	bl	8009bf8 <_printf_common>
 8009e32:	3001      	adds	r0, #1
 8009e34:	d14a      	bne.n	8009ecc <_printf_i+0x1f0>
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	b004      	add	sp, #16
 8009e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	f043 0320 	orr.w	r3, r3, #32
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	2778      	movs	r7, #120	@ 0x78
 8009e4a:	4832      	ldr	r0, [pc, #200]	@ (8009f14 <_printf_i+0x238>)
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e52:	061f      	lsls	r7, r3, #24
 8009e54:	6831      	ldr	r1, [r6, #0]
 8009e56:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e5a:	d402      	bmi.n	8009e62 <_printf_i+0x186>
 8009e5c:	065f      	lsls	r7, r3, #25
 8009e5e:	bf48      	it	mi
 8009e60:	b2ad      	uxthmi	r5, r5
 8009e62:	6031      	str	r1, [r6, #0]
 8009e64:	07d9      	lsls	r1, r3, #31
 8009e66:	bf44      	itt	mi
 8009e68:	f043 0320 	orrmi.w	r3, r3, #32
 8009e6c:	6023      	strmi	r3, [r4, #0]
 8009e6e:	b11d      	cbz	r5, 8009e78 <_printf_i+0x19c>
 8009e70:	2310      	movs	r3, #16
 8009e72:	e7ad      	b.n	8009dd0 <_printf_i+0xf4>
 8009e74:	4826      	ldr	r0, [pc, #152]	@ (8009f10 <_printf_i+0x234>)
 8009e76:	e7e9      	b.n	8009e4c <_printf_i+0x170>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	f023 0320 	bic.w	r3, r3, #32
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	e7f6      	b.n	8009e70 <_printf_i+0x194>
 8009e82:	4616      	mov	r6, r2
 8009e84:	e7bd      	b.n	8009e02 <_printf_i+0x126>
 8009e86:	6833      	ldr	r3, [r6, #0]
 8009e88:	6825      	ldr	r5, [r4, #0]
 8009e8a:	1d18      	adds	r0, r3, #4
 8009e8c:	6961      	ldr	r1, [r4, #20]
 8009e8e:	6030      	str	r0, [r6, #0]
 8009e90:	062e      	lsls	r6, r5, #24
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	d501      	bpl.n	8009e9a <_printf_i+0x1be>
 8009e96:	6019      	str	r1, [r3, #0]
 8009e98:	e002      	b.n	8009ea0 <_printf_i+0x1c4>
 8009e9a:	0668      	lsls	r0, r5, #25
 8009e9c:	d5fb      	bpl.n	8009e96 <_printf_i+0x1ba>
 8009e9e:	8019      	strh	r1, [r3, #0]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4616      	mov	r6, r2
 8009ea4:	6123      	str	r3, [r4, #16]
 8009ea6:	e7bc      	b.n	8009e22 <_printf_i+0x146>
 8009ea8:	6833      	ldr	r3, [r6, #0]
 8009eaa:	2100      	movs	r1, #0
 8009eac:	1d1a      	adds	r2, r3, #4
 8009eae:	6032      	str	r2, [r6, #0]
 8009eb0:	681e      	ldr	r6, [r3, #0]
 8009eb2:	6862      	ldr	r2, [r4, #4]
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f000 f859 	bl	8009f6c <memchr>
 8009eba:	b108      	cbz	r0, 8009ec0 <_printf_i+0x1e4>
 8009ebc:	1b80      	subs	r0, r0, r6
 8009ebe:	6060      	str	r0, [r4, #4]
 8009ec0:	6863      	ldr	r3, [r4, #4]
 8009ec2:	6123      	str	r3, [r4, #16]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eca:	e7aa      	b.n	8009e22 <_printf_i+0x146>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	4632      	mov	r2, r6
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	47d0      	blx	sl
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d0ad      	beq.n	8009e36 <_printf_i+0x15a>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	079b      	lsls	r3, r3, #30
 8009ede:	d413      	bmi.n	8009f08 <_printf_i+0x22c>
 8009ee0:	68e0      	ldr	r0, [r4, #12]
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	4298      	cmp	r0, r3
 8009ee6:	bfb8      	it	lt
 8009ee8:	4618      	movlt	r0, r3
 8009eea:	e7a6      	b.n	8009e3a <_printf_i+0x15e>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4632      	mov	r2, r6
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	47d0      	blx	sl
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d09d      	beq.n	8009e36 <_printf_i+0x15a>
 8009efa:	3501      	adds	r5, #1
 8009efc:	68e3      	ldr	r3, [r4, #12]
 8009efe:	9903      	ldr	r1, [sp, #12]
 8009f00:	1a5b      	subs	r3, r3, r1
 8009f02:	42ab      	cmp	r3, r5
 8009f04:	dcf2      	bgt.n	8009eec <_printf_i+0x210>
 8009f06:	e7eb      	b.n	8009ee0 <_printf_i+0x204>
 8009f08:	2500      	movs	r5, #0
 8009f0a:	f104 0619 	add.w	r6, r4, #25
 8009f0e:	e7f5      	b.n	8009efc <_printf_i+0x220>
 8009f10:	0800a1cd 	.word	0x0800a1cd
 8009f14:	0800a1de 	.word	0x0800a1de

08009f18 <memmove>:
 8009f18:	4288      	cmp	r0, r1
 8009f1a:	b510      	push	{r4, lr}
 8009f1c:	eb01 0402 	add.w	r4, r1, r2
 8009f20:	d902      	bls.n	8009f28 <memmove+0x10>
 8009f22:	4284      	cmp	r4, r0
 8009f24:	4623      	mov	r3, r4
 8009f26:	d807      	bhi.n	8009f38 <memmove+0x20>
 8009f28:	1e43      	subs	r3, r0, #1
 8009f2a:	42a1      	cmp	r1, r4
 8009f2c:	d008      	beq.n	8009f40 <memmove+0x28>
 8009f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f36:	e7f8      	b.n	8009f2a <memmove+0x12>
 8009f38:	4402      	add	r2, r0
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	428a      	cmp	r2, r1
 8009f3e:	d100      	bne.n	8009f42 <memmove+0x2a>
 8009f40:	bd10      	pop	{r4, pc}
 8009f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f4a:	e7f7      	b.n	8009f3c <memmove+0x24>

08009f4c <_sbrk_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4d05      	ldr	r5, [pc, #20]	@ (8009f68 <_sbrk_r+0x1c>)
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	f7f7 fccc 	bl	80018f4 <_sbrk>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_sbrk_r+0x1a>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_sbrk_r+0x1a>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20000630 	.word	0x20000630

08009f6c <memchr>:
 8009f6c:	b2c9      	uxtb	r1, r1
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4402      	add	r2, r0
 8009f72:	b510      	push	{r4, lr}
 8009f74:	4293      	cmp	r3, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	d101      	bne.n	8009f7e <memchr+0x12>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	e003      	b.n	8009f86 <memchr+0x1a>
 8009f7e:	7804      	ldrb	r4, [r0, #0]
 8009f80:	3301      	adds	r3, #1
 8009f82:	428c      	cmp	r4, r1
 8009f84:	d1f6      	bne.n	8009f74 <memchr+0x8>
 8009f86:	bd10      	pop	{r4, pc}

08009f88 <memcpy>:
 8009f88:	440a      	add	r2, r1
 8009f8a:	1e43      	subs	r3, r0, #1
 8009f8c:	4291      	cmp	r1, r2
 8009f8e:	d100      	bne.n	8009f92 <memcpy+0xa>
 8009f90:	4770      	bx	lr
 8009f92:	b510      	push	{r4, lr}
 8009f94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f98:	4291      	cmp	r1, r2
 8009f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f9e:	d1f9      	bne.n	8009f94 <memcpy+0xc>
 8009fa0:	bd10      	pop	{r4, pc}

08009fa2 <_realloc_r>:
 8009fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	4614      	mov	r4, r2
 8009faa:	460d      	mov	r5, r1
 8009fac:	b921      	cbnz	r1, 8009fb8 <_realloc_r+0x16>
 8009fae:	4611      	mov	r1, r2
 8009fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb4:	f7ff bc3c 	b.w	8009830 <_malloc_r>
 8009fb8:	b92a      	cbnz	r2, 8009fc6 <_realloc_r+0x24>
 8009fba:	4625      	mov	r5, r4
 8009fbc:	f7ff fbcc 	bl	8009758 <_free_r>
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc6:	f000 f81a 	bl	8009ffe <_malloc_usable_size_r>
 8009fca:	4284      	cmp	r4, r0
 8009fcc:	4606      	mov	r6, r0
 8009fce:	d802      	bhi.n	8009fd6 <_realloc_r+0x34>
 8009fd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fd4:	d8f4      	bhi.n	8009fc0 <_realloc_r+0x1e>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff fc29 	bl	8009830 <_malloc_r>
 8009fde:	4680      	mov	r8, r0
 8009fe0:	b908      	cbnz	r0, 8009fe6 <_realloc_r+0x44>
 8009fe2:	4645      	mov	r5, r8
 8009fe4:	e7ec      	b.n	8009fc0 <_realloc_r+0x1e>
 8009fe6:	42b4      	cmp	r4, r6
 8009fe8:	4622      	mov	r2, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	bf28      	it	cs
 8009fee:	4632      	movcs	r2, r6
 8009ff0:	f7ff ffca 	bl	8009f88 <memcpy>
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f7ff fbae 	bl	8009758 <_free_r>
 8009ffc:	e7f1      	b.n	8009fe2 <_realloc_r+0x40>

08009ffe <_malloc_usable_size_r>:
 8009ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a002:	1f18      	subs	r0, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	bfbc      	itt	lt
 800a008:	580b      	ldrlt	r3, [r1, r0]
 800a00a:	18c0      	addlt	r0, r0, r3
 800a00c:	4770      	bx	lr
	...

0800a010 <_init>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr

0800a01c <_fini>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr
