
DMA_DHCX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc8  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001df  0800a000  0800a000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1e0  0800a1e0  0000b1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1e8  0800a1e8  0000b1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a1ec  0800a1ec  0000b1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  20000000  0800a1f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005f8  20000060  0800a250  0000c060  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000658  0800a250  0000c658  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aa85  00000000  00000000  0000c096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002862  00000000  00000000  00026b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011c8  00000000  00000000  00029380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dde  00000000  00000000  0002a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6b6  00000000  00000000  0002b326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000187e4  00000000  00000000  000659dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018314d  00000000  00000000  0007e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020130d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004fbc  00000000  00000000  00201350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  0020630c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000060 	.word	0x20000060
 8000254:	00000000 	.word	0x00000000
 8000258:	08009fe8 	.word	0x08009fe8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000064 	.word	0x20000064
 8000274:	08009fe8 	.word	0x08009fe8

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <cycles_init>:
static HAL_StatusTypeDef dhcx_read_gyro_accel_dma(dhcx_raw_t* out);



// ---- DWT cycle counter helpers (works on M4/M33) ----
static inline void cycles_init(void){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <cycles_init+0x2c>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <cycles_init+0x2c>)
 80005fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000602:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <cycles_init+0x30>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <cycles_init+0x30>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <cycles_init+0x30>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000edf0 	.word	0xe000edf0
 8000624:	e0001000 	.word	0xe0001000

08000628 <cycles_now>:
static inline uint32_t cycles_now(void){ return DWT->CYCCNT; }
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
 800062c:	4b03      	ldr	r3, [pc, #12]	@ (800063c <cycles_now+0x14>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000

08000640 <cycles_to_us>:
static inline uint32_t cycles_to_us(uint32_t cyc){
 8000640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000644:	b088      	sub	sp, #32
 8000646:	af00      	add	r7, sp, #0
 8000648:	61f8      	str	r0, [r7, #28]
  return (uint32_t)(((uint64_t)cyc * 1000000ull) / SystemCoreClock);
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	2200      	movs	r2, #0
 800064e:	469a      	mov	sl, r3
 8000650:	4693      	mov	fp, r2
 8000652:	4652      	mov	r2, sl
 8000654:	465b      	mov	r3, fp
 8000656:	f04f 0000 	mov.w	r0, #0
 800065a:	f04f 0100 	mov.w	r1, #0
 800065e:	0159      	lsls	r1, r3, #5
 8000660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000664:	0150      	lsls	r0, r2, #5
 8000666:	4602      	mov	r2, r0
 8000668:	460b      	mov	r3, r1
 800066a:	ebb2 040a 	subs.w	r4, r2, sl
 800066e:	eb63 050b 	sbc.w	r5, r3, fp
 8000672:	f04f 0200 	mov.w	r2, #0
 8000676:	f04f 0300 	mov.w	r3, #0
 800067a:	026b      	lsls	r3, r5, #9
 800067c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8000680:	0262      	lsls	r2, r4, #9
 8000682:	4614      	mov	r4, r2
 8000684:	461d      	mov	r5, r3
 8000686:	eb14 080a 	adds.w	r8, r4, sl
 800068a:	eb45 090b 	adc.w	r9, r5, fp
 800068e:	f04f 0200 	mov.w	r2, #0
 8000692:	f04f 0300 	mov.w	r3, #0
 8000696:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800069a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800069e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80006a2:	ebb2 0108 	subs.w	r1, r2, r8
 80006a6:	6039      	str	r1, [r7, #0]
 80006a8:	eb63 0309 	sbc.w	r3, r3, r9
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80006b2:	460b      	mov	r3, r1
 80006b4:	eb13 030a 	adds.w	r3, r3, sl
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4613      	mov	r3, r2
 80006bc:	eb43 030b 	adc.w	r3, r3, fp
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <cycles_to_us+0xa8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	60fa      	str	r2, [r7, #12]
 80006cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80006d4:	f7ff fdd0 	bl	8000278 <__aeabi_uldivmod>
 80006d8:	4602      	mov	r2, r0
 80006da:	460b      	mov	r3, r1
 80006dc:	4613      	mov	r3, r2
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80006e8:	20000004 	.word	0x20000004

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f0:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 80006f4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f001 fc59 	bl	8001fac <HAL_Init>

  /* Configure the System Power */
 // SystemPower_Config();

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 faa5 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fc0d 	bl	8000f1c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000702:	f000 fb07 	bl	8000d14 <MX_GPDMA1_Init>
  //MX_ICACHE_Init();
  //MX_RTC_Init();
  //MX_SAI1_Init();
  //MX_SDMMC1_SD_Init();
  //MX_SPI1_Init();
  MX_SPI2_Init();
 8000706:	f000 fb4d 	bl	8000da4 <MX_SPI2_Init>
  //MX_SPI3_Init();
  //MX_TAMP_RTC_Init();
  //MX_TIM3_Init();
  MX_USART2_UART_Init();
 800070a:	f000 fbbb 	bl	8000e84 <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */

  cycles_init();  // enable cycle counter
 800070e:	f7ff ff71 	bl	80005f4 <cycles_init>




  // Make sure CS idles high
  HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000718:	4847      	ldr	r0, [pc, #284]	@ (8000838 <main+0x14c>)
 800071a:	f002 ffff 	bl	800371c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f001 fd0a 	bl	8002138 <HAL_Delay>

  // Configure the sensor
  dhcx_init();
 8000724:	f000 ff00 	bl	8001528 <dhcx_init>

  // Optional: WHO_AM_I check
  uint8_t who=0;
 8000728:	2300      	movs	r3, #0
 800072a:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
  if (HAL_OK == dhcx_read_dma(DHCX_REG_WHOAMI, &who, 1)) {
 800072e:	f207 13a3 	addw	r3, r7, #419	@ 0x1a3
 8000732:	2201      	movs	r2, #1
 8000734:	4619      	mov	r1, r3
 8000736:	200f      	movs	r0, #15
 8000738:	f000 fe92 	bl	8001460 <dhcx_read_dma>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d113      	bne.n	800076a <main+0x7e>
    char msg[40];
    int n = snprintf(msg, sizeof(msg), "DHCX WHO_AM_I=0x%02X\r\n", who);
 8000742:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8000746:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800074a:	4a3c      	ldr	r2, [pc, #240]	@ (800083c <main+0x150>)
 800074c:	2128      	movs	r1, #40	@ 0x28
 800074e:	f008 ff85 	bl	800965c <sniprintf>
 8000752:	f8c7 01ec 	str.w	r0, [r7, #492]	@ 0x1ec
    // Replace with your UART instance if different
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, n, HAL_MAX_DELAY);
 8000756:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800075a:	b29a      	uxth	r2, r3
 800075c:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	4836      	ldr	r0, [pc, #216]	@ (8000840 <main+0x154>)
 8000766:	f008 fa17 	bl	8008b98 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dhcx_both_ready()) {
 800076a:	f000 feed 	bl	8001548 <dhcx_both_ready>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0fa      	beq.n	800076a <main+0x7e>
	      dhcx_raw_t r;
	      if (HAL_OK == dhcx_read_gyro_accel_dma(&r)) {
 8000774:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000778:	4618      	mov	r0, r3
 800077a:	f000 ff01 	bl	8001580 <dhcx_read_gyro_accel_dma>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1f2      	bne.n	800076a <main+0x7e>
	          // ---- scale (integers only) ----
	          int32_t gx_mdps = (int32_t)r.gx * 70;
 8000784:	f9b7 3194 	ldrsh.w	r3, [r7, #404]	@ 0x194
 8000788:	461a      	mov	r2, r3
 800078a:	2346      	movs	r3, #70	@ 0x46
 800078c:	fb02 f303 	mul.w	r3, r2, r3
 8000790:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
	          int32_t gy_mdps = (int32_t)r.gy * 70;
 8000794:	f9b7 3196 	ldrsh.w	r3, [r7, #406]	@ 0x196
 8000798:	461a      	mov	r2, r3
 800079a:	2346      	movs	r3, #70	@ 0x46
 800079c:	fb02 f303 	mul.w	r3, r2, r3
 80007a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
	          int32_t gz_mdps = (int32_t)r.gz * 70;
 80007a4:	f9b7 3198 	ldrsh.w	r3, [r7, #408]	@ 0x198
 80007a8:	461a      	mov	r2, r3
 80007aa:	2346      	movs	r3, #70	@ 0x46
 80007ac:	fb02 f303 	mul.w	r3, r2, r3
 80007b0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

	          int32_t ax_mg = ((int32_t)r.ax * 61 + (r.ax >= 0 ? 500 : -500)) / 1000;
 80007b4:	f9b7 319a 	ldrsh.w	r3, [r7, #410]	@ 0x19a
 80007b8:	461a      	mov	r2, r3
 80007ba:	4613      	mov	r3, r2
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	441a      	add	r2, r3
 80007c4:	f9b7 319a 	ldrsh.w	r3, [r7, #410]	@ 0x19a
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db02      	blt.n	80007d2 <main+0xe6>
 80007cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007d0:	e000      	b.n	80007d4 <main+0xe8>
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <main+0x158>)
 80007d4:	1899      	adds	r1, r3, r2
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <main+0x15c>)
 80007d8:	fb83 2301 	smull	r2, r3, r3, r1
 80007dc:	119a      	asrs	r2, r3, #6
 80007de:	17cb      	asrs	r3, r1, #31
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
	          int32_t ay_mg = ((int32_t)r.ay * 61 + (r.ay >= 0 ? 500 : -500)) / 1000;
 80007e6:	f9b7 319c 	ldrsh.w	r3, [r7, #412]	@ 0x19c
 80007ea:	461a      	mov	r2, r3
 80007ec:	4613      	mov	r3, r2
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	1a9b      	subs	r3, r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	441a      	add	r2, r3
 80007f6:	f9b7 319c 	ldrsh.w	r3, [r7, #412]	@ 0x19c
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	db02      	blt.n	8000804 <main+0x118>
 80007fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000802:	e000      	b.n	8000806 <main+0x11a>
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <main+0x158>)
 8000806:	1899      	adds	r1, r3, r2
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <main+0x15c>)
 800080a:	fb83 2301 	smull	r2, r3, r3, r1
 800080e:	119a      	asrs	r2, r3, #6
 8000810:	17cb      	asrs	r3, r1, #31
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	          int32_t az_mg = ((int32_t)r.az * 61 + (r.az >= 0 ? 500 : -500)) / 1000;
 8000818:	f9b7 319e 	ldrsh.w	r3, [r7, #414]	@ 0x19e
 800081c:	461a      	mov	r2, r3
 800081e:	4613      	mov	r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	441a      	add	r2, r3
 8000828:	f9b7 319e 	ldrsh.w	r3, [r7, #414]	@ 0x19e
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0d      	blt.n	800084c <main+0x160>
 8000830:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000834:	e00b      	b.n	800084e <main+0x162>
 8000836:	bf00      	nop
 8000838:	42021c00 	.word	0x42021c00
 800083c:	0800a000 	.word	0x0800a000
 8000840:	200003dc 	.word	0x200003dc
 8000844:	fffffe0c 	.word	0xfffffe0c
 8000848:	10624dd3 	.word	0x10624dd3
 800084c:	4bc5      	ldr	r3, [pc, #788]	@ (8000b64 <main+0x478>)
 800084e:	1899      	adds	r1, r3, r2
 8000850:	4bc5      	ldr	r3, [pc, #788]	@ (8000b68 <main+0x47c>)
 8000852:	fb83 2301 	smull	r2, r3, r3, r1
 8000856:	119a      	asrs	r2, r3, #6
 8000858:	17cb      	asrs	r3, r1, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

	          // ---- timings from DWT stamps ----
	          uint32_t setup_us = cycles_to_us(t_spi2_callret - t_spi2_start);
 8000860:	4bc2      	ldr	r3, [pc, #776]	@ (8000b6c <main+0x480>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4bc2      	ldr	r3, [pc, #776]	@ (8000b70 <main+0x484>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fee8 	bl	8000640 <cycles_to_us>
 8000870:	f8c7 01d0 	str.w	r0, [r7, #464]	@ 0x1d0
	          uint32_t dma_us   = cycles_to_us(t_spi2_cb      - t_spi2_callret);
 8000874:	4bbf      	ldr	r3, [pc, #764]	@ (8000b74 <main+0x488>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4bbc      	ldr	r3, [pc, #752]	@ (8000b6c <main+0x480>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fede 	bl	8000640 <cycles_to_us>
 8000884:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
	          uint32_t post_us  = cycles_to_us(t_spi2_done    - t_spi2_cb);
 8000888:	4bbb      	ldr	r3, [pc, #748]	@ (8000b78 <main+0x48c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4bb9      	ldr	r3, [pc, #740]	@ (8000b74 <main+0x488>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fed4 	bl	8000640 <cycles_to_us>
 8000898:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
	          uint32_t total_us = cycles_to_us(t_spi2_done    - t_spi2_start);
 800089c:	4bb6      	ldr	r3, [pc, #728]	@ (8000b78 <main+0x48c>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4bb3      	ldr	r3, [pc, #716]	@ (8000b70 <main+0x484>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff feca 	bl	8000640 <cycles_to_us>
 80008ac:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4

	          // ---- accumulate for 100-cycle report ----
	          sum_setup += setup_us;
 80008b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80008b4:	2200      	movs	r2, #0
 80008b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80008b8:	647a      	str	r2, [r7, #68]	@ 0x44
 80008ba:	4bb0      	ldr	r3, [pc, #704]	@ (8000b7c <main+0x490>)
 80008bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80008c4:	4621      	mov	r1, r4
 80008c6:	1889      	adds	r1, r1, r2
 80008c8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80008ca:	4629      	mov	r1, r5
 80008cc:	eb41 0303 	adc.w	r3, r1, r3
 80008d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008d2:	4baa      	ldr	r3, [pc, #680]	@ (8000b7c <main+0x490>)
 80008d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80008d8:	e9c3 1200 	strd	r1, r2, [r3]
	          sum_dma   += dma_us;
 80008dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80008e0:	2200      	movs	r2, #0
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80008e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80008e6:	4ba6      	ldr	r3, [pc, #664]	@ (8000b80 <main+0x494>)
 80008e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80008f0:	4621      	mov	r1, r4
 80008f2:	1889      	adds	r1, r1, r2
 80008f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80008f6:	4629      	mov	r1, r5
 80008f8:	eb41 0303 	adc.w	r3, r1, r3
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008fe:	4ba0      	ldr	r3, [pc, #640]	@ (8000b80 <main+0x494>)
 8000900:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000904:	e9c3 1200 	strd	r1, r2, [r3]
	          sum_post  += post_us;
 8000908:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800090c:	2200      	movs	r2, #0
 800090e:	623b      	str	r3, [r7, #32]
 8000910:	627a      	str	r2, [r7, #36]	@ 0x24
 8000912:	4b9c      	ldr	r3, [pc, #624]	@ (8000b84 <main+0x498>)
 8000914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000918:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800091c:	4621      	mov	r1, r4
 800091e:	1889      	adds	r1, r1, r2
 8000920:	61b9      	str	r1, [r7, #24]
 8000922:	4629      	mov	r1, r5
 8000924:	eb41 0303 	adc.w	r3, r1, r3
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	4b96      	ldr	r3, [pc, #600]	@ (8000b84 <main+0x498>)
 800092c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000930:	e9c3 1200 	strd	r1, r2, [r3]
	          sum_total += total_us;
 8000934:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000938:	2200      	movs	r2, #0
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	617a      	str	r2, [r7, #20]
 800093e:	4b92      	ldr	r3, [pc, #584]	@ (8000b88 <main+0x49c>)
 8000940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000944:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000948:	4621      	mov	r1, r4
 800094a:	1889      	adds	r1, r1, r2
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4629      	mov	r1, r5
 8000950:	eb41 0303 	adc.w	r3, r1, r3
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b8c      	ldr	r3, [pc, #560]	@ (8000b88 <main+0x49c>)
 8000958:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800095c:	e9c3 1200 	strd	r1, r2, [r3]
	          if (total_us < min_total) min_total = total_us;
 8000960:	4b8a      	ldr	r3, [pc, #552]	@ (8000b8c <main+0x4a0>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000968:	4293      	cmp	r3, r2
 800096a:	d203      	bcs.n	8000974 <main+0x288>
 800096c:	4a87      	ldr	r2, [pc, #540]	@ (8000b8c <main+0x4a0>)
 800096e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000972:	6013      	str	r3, [r2, #0]
	          if (total_us > max_total) max_total = total_us;
 8000974:	4b86      	ldr	r3, [pc, #536]	@ (8000b90 <main+0x4a4>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800097c:	4293      	cmp	r3, r2
 800097e:	d903      	bls.n	8000988 <main+0x29c>
 8000980:	4a83      	ldr	r2, [pc, #524]	@ (8000b90 <main+0x4a4>)
 8000982:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000986:	6013      	str	r3, [r2, #0]

	          // keep the latest data sample to show with the report
	          last_gx_mdps = gx_mdps; last_gy_mdps = gy_mdps; last_gz_mdps = gz_mdps;
 8000988:	4a82      	ldr	r2, [pc, #520]	@ (8000b94 <main+0x4a8>)
 800098a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4a81      	ldr	r2, [pc, #516]	@ (8000b98 <main+0x4ac>)
 8000992:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4a80      	ldr	r2, [pc, #512]	@ (8000b9c <main+0x4b0>)
 800099a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800099e:	6013      	str	r3, [r2, #0]
	          last_ax_mg   = ax_mg;   last_ay_mg   = ay_mg;   last_az_mg   = az_mg;
 80009a0:	4a7f      	ldr	r2, [pc, #508]	@ (8000ba0 <main+0x4b4>)
 80009a2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4a7e      	ldr	r2, [pc, #504]	@ (8000ba4 <main+0x4b8>)
 80009aa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4a7d      	ldr	r2, [pc, #500]	@ (8000ba8 <main+0x4bc>)
 80009b2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80009b6:	6013      	str	r3, [r2, #0]

	          // ---- print once every 100 reads ----
	          if (++cnt == 100) {
 80009b8:	4b7c      	ldr	r3, [pc, #496]	@ (8000bac <main+0x4c0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	4b7b      	ldr	r3, [pc, #492]	@ (8000bac <main+0x4c0>)
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	4b7a      	ldr	r3, [pc, #488]	@ (8000bac <main+0x4c0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b64      	cmp	r3, #100	@ 0x64
 80009c8:	f47f aecf 	bne.w	800076a <main+0x7e>
	              uint32_t avg_setup = (uint32_t)(sum_setup / 100u);
 80009cc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b7c <main+0x490>)
 80009ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009d2:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	f7ff fc4d 	bl	8000278 <__aeabi_uldivmod>
 80009de:	4602      	mov	r2, r0
 80009e0:	460b      	mov	r3, r1
 80009e2:	4613      	mov	r3, r2
 80009e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
	              uint32_t avg_dma   = (uint32_t)(sum_dma   / 100u);
 80009e8:	4b65      	ldr	r3, [pc, #404]	@ (8000b80 <main+0x494>)
 80009ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009ee:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80009f2:	f04f 0300 	mov.w	r3, #0
 80009f6:	f7ff fc3f 	bl	8000278 <__aeabi_uldivmod>
 80009fa:	4602      	mov	r2, r0
 80009fc:	460b      	mov	r3, r1
 80009fe:	4613      	mov	r3, r2
 8000a00:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
	              uint32_t avg_post  = (uint32_t)(sum_post  / 100u);
 8000a04:	4b5f      	ldr	r3, [pc, #380]	@ (8000b84 <main+0x498>)
 8000a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a0a:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	f7ff fc31 	bl	8000278 <__aeabi_uldivmod>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
	              uint32_t avg_total = (uint32_t)(sum_total / 100u);
 8000a20:	4b59      	ldr	r3, [pc, #356]	@ (8000b88 <main+0x49c>)
 8000a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a26:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8000a2a:	f04f 0300 	mov.w	r3, #0
 8000a2e:	f7ff fc23 	bl	8000278 <__aeabi_uldivmod>
 8000a32:	4602      	mov	r2, r0
 8000a34:	460b      	mov	r3, r1
 8000a36:	4613      	mov	r3, r2
 8000a38:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	              // theoretical SPI wire time for 13 bytes at SPI2_SCK_HZ
	              const uint32_t Nbytes = 13u;
 8000a3c:	230d      	movs	r3, #13
 8000a3e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	              uint32_t spi_wire_us = (uint32_t)((uint64_t)Nbytes * 8ull * 1000000ull / SPI2_SCK_HZ);
 8000a42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000a46:	2200      	movs	r2, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000a50:	4622      	mov	r2, r4
 8000a52:	462b      	mov	r3, r5
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	f04f 0100 	mov.w	r1, #0
 8000a5c:	0159      	lsls	r1, r3, #5
 8000a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000a62:	0150      	lsls	r0, r2, #5
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	4621      	mov	r1, r4
 8000a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8000a6e:	4629      	mov	r1, r5
 8000a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000a88:	ebb2 080a 	subs.w	r8, r2, sl
 8000a8c:	eb63 090b 	sbc.w	r9, r3, fp
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000aa0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	4699      	mov	r9, r3
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	eb18 0303 	adds.w	r3, r8, r3
 8000aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ab0:	462b      	mov	r3, r5
 8000ab2:	eb49 0303 	adc.w	r3, r9, r3
 8000ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8000ac4:	4629      	mov	r1, r5
 8000ac6:	024b      	lsls	r3, r1, #9
 8000ac8:	4621      	mov	r1, r4
 8000aca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8000ace:	4621      	mov	r1, r4
 8000ad0:	024a      	lsls	r2, r1, #9
 8000ad2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4a35      	ldr	r2, [pc, #212]	@ (8000bb0 <main+0x4c4>)
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	f7ff fbca 	bl	8000278 <__aeabi_uldivmod>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	4613      	mov	r3, r2
 8000aea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

	              char tbuf[160];
	              int tn = snprintf(tbuf, sizeof(tbuf),
 8000aee:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <main+0x4a0>)
 8000af0:	6819      	ldr	r1, [r3, #0]
 8000af2:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <main+0x4a4>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000afa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000afe:	9305      	str	r3, [sp, #20]
 8000b00:	9204      	str	r2, [sp, #16]
 8000b02:	9103      	str	r1, [sp, #12]
 8000b04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000b1a:	4a26      	ldr	r2, [pc, #152]	@ (8000bb4 <main+0x4c8>)
 8000b1c:	21a0      	movs	r1, #160	@ 0xa0
 8000b1e:	f008 fd9d 	bl	800965c <sniprintf>
 8000b22:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8
	                  "SPI2 avg: setup=%luus dma=%luus post=%luus total=%luus | min=%luus max=%luus | wire~%luus (N=100)\r\n",
	                  (unsigned long)avg_setup, (unsigned long)avg_dma, (unsigned long)avg_post,
	                  (unsigned long)avg_total, (unsigned long)min_total, (unsigned long)max_total,
	                  (unsigned long)spi_wire_us);
	              HAL_UART_Transmit(&huart2, (uint8_t*)tbuf, tn, HAL_MAX_DELAY);
 8000b26:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	4820      	ldr	r0, [pc, #128]	@ (8000bb8 <main+0x4cc>)
 8000b36:	f008 f82f 	bl	8008b98 <HAL_UART_Transmit>

	              char line[160];
	              int n = snprintf(line, sizeof(line),
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <main+0x4a8>)
 8000b3c:	681e      	ldr	r6, [r3, #0]
 8000b3e:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <main+0x4ac>)
 8000b40:	681d      	ldr	r5, [r3, #0]
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <main+0x4b0>)
 8000b44:	681c      	ldr	r4, [r3, #0]
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <main+0x4b4>)
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <main+0x4b8>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <main+0x4bc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8000b56:	9304      	str	r3, [sp, #16]
 8000b58:	9203      	str	r2, [sp, #12]
 8000b5a:	9102      	str	r1, [sp, #8]
 8000b5c:	9401      	str	r4, [sp, #4]
 8000b5e:	9500      	str	r5, [sp, #0]
 8000b60:	4633      	mov	r3, r6
 8000b62:	e02b      	b.n	8000bbc <main+0x4d0>
 8000b64:	fffffe0c 	.word	0xfffffe0c
 8000b68:	10624dd3 	.word	0x10624dd3
 8000b6c:	200004b8 	.word	0x200004b8
 8000b70:	200004b4 	.word	0x200004b4
 8000b74:	200004bc 	.word	0x200004bc
 8000b78:	200004c0 	.word	0x200004c0
 8000b7c:	20000478 	.word	0x20000478
 8000b80:	20000480 	.word	0x20000480
 8000b84:	20000488 	.word	0x20000488
 8000b88:	20000490 	.word	0x20000490
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000498 	.word	0x20000498
 8000b94:	2000049c 	.word	0x2000049c
 8000b98:	200004a0 	.word	0x200004a0
 8000b9c:	200004a4 	.word	0x200004a4
 8000ba0:	200004a8 	.word	0x200004a8
 8000ba4:	200004ac 	.word	0x200004ac
 8000ba8:	200004b0 	.word	0x200004b0
 8000bac:	20000470 	.word	0x20000470
 8000bb0:	00989680 	.word	0x00989680
 8000bb4:	0800a018 	.word	0x0800a018
 8000bb8:	200003dc 	.word	0x200003dc
 8000bbc:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <main+0x538>)
 8000bbe:	21a0      	movs	r1, #160	@ 0xa0
 8000bc0:	f008 fd4c 	bl	800965c <sniprintf>
 8000bc4:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4
	                  "LAST G[mdps]=%ld %ld %ld | A[mg]=%ld %ld %ld\r\n",
	                  (long)last_gx_mdps, (long)last_gy_mdps, (long)last_gz_mdps,
	                  (long)last_ax_mg,   (long)last_ay_mg,   (long)last_az_mg);
	              HAL_UART_Transmit(&huart2, (uint8_t*)line, n, HAL_MAX_DELAY);
 8000bc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	4814      	ldr	r0, [pc, #80]	@ (8000c28 <main+0x53c>)
 8000bd8:	f007 ffde 	bl	8008b98 <HAL_UART_Transmit>

	              // reset for next batch
	              cnt = 0;
 8000bdc:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <main+0x540>)
 8000bde:	2300      	movs	r3, #0
 8000be0:	6013      	str	r3, [r2, #0]
	              sum_setup = sum_dma = sum_post = sum_total = 0;
 8000be2:	4913      	ldr	r1, [pc, #76]	@ (8000c30 <main+0x544>)
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c1 2300 	strd	r2, r3, [r1]
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <main+0x544>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	490f      	ldr	r1, [pc, #60]	@ (8000c34 <main+0x548>)
 8000bf8:	e9c1 2300 	strd	r2, r3, [r1]
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <main+0x548>)
 8000bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <main+0x54c>)
 8000c04:	e9c1 2300 	strd	r2, r3, [r1]
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <main+0x54c>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	490b      	ldr	r1, [pc, #44]	@ (8000c3c <main+0x550>)
 8000c10:	e9c1 2300 	strd	r2, r3, [r1]
	              min_total = 0xFFFFFFFFu; max_total = 0;
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <main+0x554>)
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4a09      	ldr	r2, [pc, #36]	@ (8000c44 <main+0x558>)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	6013      	str	r3, [r2, #0]
	  if (dhcx_both_ready()) {
 8000c22:	e5a2      	b.n	800076a <main+0x7e>
 8000c24:	0800a07c 	.word	0x0800a07c
 8000c28:	200003dc 	.word	0x200003dc
 8000c2c:	20000470 	.word	0x20000470
 8000c30:	20000490 	.word	0x20000490
 8000c34:	20000488 	.word	0x20000488
 8000c38:	20000480 	.word	0x20000480
 8000c3c:	20000478 	.word	0x20000478
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000498 	.word	0x20000498

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09e      	sub	sp, #120	@ 0x78
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2260      	movs	r2, #96	@ 0x60
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f008 fd36 	bl	80096c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c6c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000c70:	f002 fda8 	bl	80037c4 <HAL_PWREx_ControlVoltageScaling>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000c7a:	f000 fcd4 	bl	8001626 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000c7e:	232b      	movs	r3, #43	@ 0x2b
 8000c80:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c98:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fe34 	bl	800393c <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cda:	f000 fca4 	bl	8001626 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	231f      	movs	r3, #31
 8000ce0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f003 fcfa 	bl	80046f4 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d06:	f000 fc8e 	bl	8001626 <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3778      	adds	r7, #120	@ 0x78
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_GPDMA1_Init+0x8c>)
 8000d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d20:	4a1f      	ldr	r2, [pc, #124]	@ (8000da0 <MX_GPDMA1_Init+0x8c>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_GPDMA1_Init+0x8c>)
 8000d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	201d      	movs	r0, #29
 8000d3e:	f001 fad7 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d42:	201d      	movs	r0, #29
 8000d44:	f001 faee 	bl	8002324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	201e      	movs	r0, #30
 8000d4e:	f001 facf 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d52:	201e      	movs	r0, #30
 8000d54:	f001 fae6 	bl	8002324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	201f      	movs	r0, #31
 8000d5e:	f001 fac7 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d62:	201f      	movs	r0, #31
 8000d64:	f001 fade 	bl	8002324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2020      	movs	r0, #32
 8000d6e:	f001 fabf 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d72:	2020      	movs	r0, #32
 8000d74:	f001 fad6 	bl	8002324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2021      	movs	r0, #33	@ 0x21
 8000d7e:	f001 fab7 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8000d82:	2021      	movs	r0, #33	@ 0x21
 8000d84:	f001 face 	bl	8002324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2022      	movs	r0, #34	@ 0x22
 8000d8e:	f001 faaf 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8000d92:	2022      	movs	r0, #34	@ 0x22
 8000d94:	f001 fac6 	bl	8002324 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	46020c00 	.word	0x46020c00

08000da4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000db4:	4b30      	ldr	r3, [pc, #192]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000db6:	4a31      	ldr	r2, [pc, #196]	@ (8000e7c <MX_SPI2_Init+0xd8>)
 8000db8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dba:	4b2f      	ldr	r3, [pc, #188]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000dbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000dca:	2207      	movs	r2, #7
 8000dcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dda:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000ddc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000de0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000de2:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000de4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000de8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dea:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df6:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000dfe:	2207      	movs	r2, #7
 8000e00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e10:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000e34:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e40:	480d      	ldr	r0, [pc, #52]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e42:	f006 fd07 	bl	8007854 <HAL_SPI_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000e4c:	f000 fbeb 	bl	8001626 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_SPI2_Init+0xdc>)
 8000e56:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_SPI2_Init+0xd4>)
 8000e62:	f007 fe08 	bl	8008a76 <HAL_SPIEx_SetConfigAutonomousMode>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000e6c:	f000 fbdb 	bl	8001626 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000025c 	.word	0x2000025c
 8000e7c:	40003800 	.word	0x40003800
 8000e80:	10010000 	.word	0x10010000

08000e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <MX_USART2_UART_Init+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000ece:	f007 fe13 	bl	8008af8 <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ed8:	f000 fba5 	bl	8001626 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000ee0:	f008 faf2 	bl	80094c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000eea:	f000 fb9c 	bl	8001626 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000ef2:	f008 fb27 	bl	8009544 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 fb93 	bl	8001626 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_USART2_UART_Init+0x90>)
 8000f02:	f008 faa8 	bl	8009456 <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 fb8b 	bl	8001626 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003dc 	.word	0x200003dc
 8000f18:	40004400 	.word	0x40004400

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	@ 0x38
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4bbf      	ldr	r3, [pc, #764]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f38:	4abd      	ldr	r2, [pc, #756]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f42:	4bbb      	ldr	r3, [pc, #748]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	623b      	str	r3, [r7, #32]
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f50:	4bb7      	ldr	r3, [pc, #732]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f56:	4ab6      	ldr	r2, [pc, #728]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f60:	4bb3      	ldr	r3, [pc, #716]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6e:	4bb0      	ldr	r3, [pc, #704]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f74:	4aae      	ldr	r2, [pc, #696]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f7e:	4bac      	ldr	r3, [pc, #688]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4ba8      	ldr	r3, [pc, #672]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f92:	4aa7      	ldr	r2, [pc, #668]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f9c:	4ba4      	ldr	r3, [pc, #656]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4ba1      	ldr	r3, [pc, #644]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb0:	4a9f      	ldr	r2, [pc, #636]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fba:	4b9d      	ldr	r3, [pc, #628]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc8:	4b99      	ldr	r3, [pc, #612]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fce:	4a98      	ldr	r2, [pc, #608]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fd8:	4b95      	ldr	r3, [pc, #596]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b92      	ldr	r3, [pc, #584]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fec:	4a90      	ldr	r2, [pc, #576]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ff6:	4b8e      	ldr	r3, [pc, #568]	@ (8001230 <MX_GPIO_Init+0x314>)
 8000ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	4b8a      	ldr	r3, [pc, #552]	@ (8001230 <MX_GPIO_Init+0x314>)
 8001006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800100a:	4a89      	ldr	r2, [pc, #548]	@ (8001230 <MX_GPIO_Init+0x314>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001014:	4b86      	ldr	r3, [pc, #536]	@ (8001230 <MX_GPIO_Init+0x314>)
 8001016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001022:	4b83      	ldr	r3, [pc, #524]	@ (8001230 <MX_GPIO_Init+0x314>)
 8001024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001028:	4a81      	ldr	r2, [pc, #516]	@ (8001230 <MX_GPIO_Init+0x314>)
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001032:	4b7f      	ldr	r3, [pc, #508]	@ (8001230 <MX_GPIO_Init+0x314>)
 8001034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8001046:	487b      	ldr	r0, [pc, #492]	@ (8001234 <MX_GPIO_Init+0x318>)
 8001048:	f002 fb68 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2181      	movs	r1, #129	@ 0x81
 8001050:	4879      	ldr	r0, [pc, #484]	@ (8001238 <MX_GPIO_Init+0x31c>)
 8001052:	f002 fb63 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800105c:	4875      	ldr	r0, [pc, #468]	@ (8001234 <MX_GPIO_Init+0x318>)
 800105e:	f002 fb5d 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2102      	movs	r1, #2
 8001066:	4875      	ldr	r0, [pc, #468]	@ (800123c <MX_GPIO_Init+0x320>)
 8001068:	f002 fb58 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001072:	4873      	ldr	r0, [pc, #460]	@ (8001240 <MX_GPIO_Init+0x324>)
 8001074:	f002 fb52 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8001078:	2340      	movs	r3, #64	@ 0x40
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	4b71      	ldr	r3, [pc, #452]	@ (8001244 <MX_GPIO_Init+0x328>)
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	486b      	ldr	r0, [pc, #428]	@ (8001238 <MX_GPIO_Init+0x31c>)
 800108c:	f002 f966 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8001090:	f248 0362 	movw	r3, #32866	@ 0x8062
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	4868      	ldr	r0, [pc, #416]	@ (8001248 <MX_GPIO_Init+0x32c>)
 80010a6:	f002 f959 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 80010aa:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	485c      	ldr	r0, [pc, #368]	@ (8001234 <MX_GPIO_Init+0x318>)
 80010c4:	f002 f94a 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 80010c8:	2324      	movs	r3, #36	@ 0x24
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010cc:	2303      	movs	r3, #3
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4857      	ldr	r0, [pc, #348]	@ (8001238 <MX_GPIO_Init+0x31c>)
 80010dc:	f002 f93e 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 80010e0:	f24a 2301 	movw	r3, #41473	@ 0xa201
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4855      	ldr	r0, [pc, #340]	@ (800124c <MX_GPIO_Init+0x330>)
 80010f6:	f002 f931 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 80010fa:	2381      	movs	r3, #129	@ 0x81
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	4849      	ldr	r0, [pc, #292]	@ (8001238 <MX_GPIO_Init+0x31c>)
 8001112:	f002 f923 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8001116:	2302      	movs	r3, #2
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	4843      	ldr	r0, [pc, #268]	@ (800123c <MX_GPIO_Init+0x320>)
 800112e:	f002 f915 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 8001132:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	483b      	ldr	r0, [pc, #236]	@ (8001234 <MX_GPIO_Init+0x318>)
 8001148:	f002 f908 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 800114c:	2381      	movs	r3, #129	@ 0x81
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001150:	4b3c      	ldr	r3, [pc, #240]	@ (8001244 <MX_GPIO_Init+0x328>)
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4837      	ldr	r0, [pc, #220]	@ (800123c <MX_GPIO_Init+0x320>)
 8001160:	f002 f8fc 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8001164:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116a:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <MX_GPIO_Init+0x328>)
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	4835      	ldr	r0, [pc, #212]	@ (8001250 <MX_GPIO_Init+0x334>)
 800117a:	f002 f8ef 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 800117e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001184:	2303      	movs	r3, #3
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	482b      	ldr	r0, [pc, #172]	@ (8001240 <MX_GPIO_Init+0x324>)
 8001194:	f002 f8e2 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8001198:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <MX_GPIO_Init+0x328>)
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4824      	ldr	r0, [pc, #144]	@ (8001240 <MX_GPIO_Init+0x324>)
 80011ae:	f002 f8d5 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 80011b2:	f240 1301 	movw	r3, #257	@ 0x101
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	4823      	ldr	r0, [pc, #140]	@ (8001254 <MX_GPIO_Init+0x338>)
 80011c8:	f002 f8c8 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 80011cc:	230c      	movs	r3, #12
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d0:	2303      	movs	r3, #3
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	481e      	ldr	r0, [pc, #120]	@ (8001258 <MX_GPIO_Init+0x33c>)
 80011e0:	f002 f8bc 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 80011e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	4810      	ldr	r0, [pc, #64]	@ (8001240 <MX_GPIO_Init+0x324>)
 80011fe:	f002 f8ad 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_GPIO_Init+0x328>)
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_GPIO_Init+0x330>)
 8001218:	f002 f8a0 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 800121c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122e:	e015      	b.n	800125c <MX_GPIO_Init+0x340>
 8001230:	46020c00 	.word	0x46020c00
 8001234:	42021c00 	.word	0x42021c00
 8001238:	42022000 	.word	0x42022000
 800123c:	42021000 	.word	0x42021000
 8001240:	42021400 	.word	0x42021400
 8001244:	10110000 	.word	0x10110000
 8001248:	42021800 	.word	0x42021800
 800124c:	42020c00 	.word	0x42020c00
 8001250:	42020400 	.word	0x42020400
 8001254:	42020000 	.word	0x42020000
 8001258:	42020800 	.word	0x42020800
 800125c:	4619      	mov	r1, r3
 800125e:	4842      	ldr	r0, [pc, #264]	@ (8001368 <MX_GPIO_Init+0x44c>)
 8001260:	f002 f87c 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8001264:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001276:	4619      	mov	r1, r3
 8001278:	483c      	ldr	r0, [pc, #240]	@ (800136c <MX_GPIO_Init+0x450>)
 800127a:	f002 f86f 	bl	800335c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2107      	movs	r1, #7
 8001282:	200b      	movs	r0, #11
 8001284:	f001 f834 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001288:	200b      	movs	r0, #11
 800128a:	f001 f84b 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2107      	movs	r1, #7
 8001292:	200c      	movs	r0, #12
 8001294:	f001 f82c 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001298:	200c      	movs	r0, #12
 800129a:	f001 f843 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2107      	movs	r1, #7
 80012a2:	200d      	movs	r0, #13
 80012a4:	f001 f824 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012a8:	200d      	movs	r0, #13
 80012aa:	f001 f83b 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2107      	movs	r1, #7
 80012b2:	200e      	movs	r0, #14
 80012b4:	f001 f81c 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012b8:	200e      	movs	r0, #14
 80012ba:	f001 f833 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2107      	movs	r1, #7
 80012c2:	200f      	movs	r0, #15
 80012c4:	f001 f814 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012c8:	200f      	movs	r0, #15
 80012ca:	f001 f82b 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2107      	movs	r1, #7
 80012d2:	2010      	movs	r0, #16
 80012d4:	f001 f80c 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80012d8:	2010      	movs	r0, #16
 80012da:	f001 f823 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2107      	movs	r1, #7
 80012e2:	2011      	movs	r0, #17
 80012e4:	f001 f804 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 80012e8:	2011      	movs	r0, #17
 80012ea:	f001 f81b 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2107      	movs	r1, #7
 80012f2:	2012      	movs	r0, #18
 80012f4:	f000 fffc 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80012f8:	2012      	movs	r0, #18
 80012fa:	f001 f813 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2107      	movs	r1, #7
 8001302:	2013      	movs	r0, #19
 8001304:	f000 fff4 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001308:	2013      	movs	r0, #19
 800130a:	f001 f80b 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2107      	movs	r1, #7
 8001312:	2014      	movs	r0, #20
 8001314:	f000 ffec 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8001318:	2014      	movs	r0, #20
 800131a:	f001 f803 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2107      	movs	r1, #7
 8001322:	2015      	movs	r0, #21
 8001324:	f000 ffe4 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001328:	2015      	movs	r0, #21
 800132a:	f000 fffb 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2107      	movs	r1, #7
 8001332:	2016      	movs	r0, #22
 8001334:	f000 ffdc 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001338:	2016      	movs	r0, #22
 800133a:	f000 fff3 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2107      	movs	r1, #7
 8001342:	2018      	movs	r0, #24
 8001344:	f000 ffd4 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001348:	2018      	movs	r0, #24
 800134a:	f000 ffeb 	bl	8002324 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2107      	movs	r1, #7
 8001352:	2019      	movs	r0, #25
 8001354:	f000 ffcc 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8001358:	2019      	movs	r0, #25
 800135a:	f000 ffe3 	bl	8002324 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	@ 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	42020400 	.word	0x42020400
 800136c:	42021000 	.word	0x42021000

08001370 <cs_low>:
extern SPI_HandleTypeDef hspi2;
static volatile uint8_t spi2_dma_done = 0;   // define ONCE in this file


// ---------- Chip Select helpers (use CubeMX macros) ----------
static inline void cs_low (void){ HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET); }
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800137a:	4802      	ldr	r0, [pc, #8]	@ (8001384 <cs_low+0x14>)
 800137c:	f002 f9ce 	bl	800371c <HAL_GPIO_WritePin>
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	42021c00 	.word	0x42021c00

08001388 <cs_high>:
static inline void cs_high(void){ HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);  }
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001392:	4802      	ldr	r0, [pc, #8]	@ (800139c <cs_high+0x14>)
 8001394:	f002 f9c2 	bl	800371c <HAL_GPIO_WritePin>
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	42021c00 	.word	0x42021c00

080013a0 <HAL_SPI_TxRxCpltCallback>:


// DMA complete ISR: take a *cycle* timestamp as soon as possible
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI2){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_SPI_TxRxCpltCallback+0x2c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d106      	bne.n	80013c0 <HAL_SPI_TxRxCpltCallback+0x20>
    t_spi2_cb = DWT->CYCCNT;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <HAL_SPI_TxRxCpltCallback+0x30>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_SPI_TxRxCpltCallback+0x34>)
 80013b8:	6013      	str	r3, [r2, #0]
    spi2_dma_done = 1;
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <HAL_SPI_TxRxCpltCallback+0x38>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
  }
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40003800 	.word	0x40003800
 80013d0:	e0001000 	.word	0xe0001000
 80013d4:	200004bc 	.word	0x200004bc
 80013d8:	200004c4 	.word	0x200004c4

080013dc <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI2){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <HAL_SPI_ErrorCallback+0x2c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d106      	bne.n	80013fc <HAL_SPI_ErrorCallback+0x20>
    t_spi2_cb = DWT->CYCCNT;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_SPI_ErrorCallback+0x30>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_SPI_ErrorCallback+0x34>)
 80013f4:	6013      	str	r3, [r2, #0]
    spi2_dma_done = 1;
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <HAL_SPI_ErrorCallback+0x38>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
  }
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40003800 	.word	0x40003800
 800140c:	e0001000 	.word	0xe0001000
 8001410:	200004bc 	.word	0x200004bc
 8001414:	200004c4 	.word	0x200004c4

08001418 <dhcx_write>:


// ---------- Low-level write (blocking) ----------
static HAL_StatusTypeDef dhcx_write(uint8_t reg, uint8_t val){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	460a      	mov	r2, r1
 8001422:	71fb      	strb	r3, [r7, #7]
 8001424:	4613      	mov	r3, r2
 8001426:	71bb      	strb	r3, [r7, #6]
  uint8_t tx[2] = { (uint8_t)(reg & 0x7F), val }; // MSB=0 => write
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800142e:	b2db      	uxtb	r3, r3
 8001430:	733b      	strb	r3, [r7, #12]
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	737b      	strb	r3, [r7, #13]
  cs_low();
 8001436:	f7ff ff9b 	bl	8001370 <cs_low>
  HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi2, tx, 2, HAL_MAX_DELAY);
 800143a:	f107 010c 	add.w	r1, r7, #12
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	2202      	movs	r2, #2
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <dhcx_write+0x44>)
 8001446:	f006 fb1b 	bl	8007a80 <HAL_SPI_Transmit>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
  cs_high();
 800144e:	f7ff ff9b 	bl	8001388 <cs_high>
  return st;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000025c 	.word	0x2000025c

08001460 <dhcx_read_dma>:

// dev_read_dma with timing stamps
static HAL_StatusTypeDef dhcx_read_dma(uint8_t reg, uint8_t* dst, uint16_t len){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
  static uint8_t spi_tx[32];
  static uint8_t spi_rx[32];
  if (len + 1 > sizeof(spi_tx)) return HAL_ERROR;
 8001470:	88bb      	ldrh	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	2b20      	cmp	r3, #32
 8001476:	d901      	bls.n	800147c <dhcx_read_dma+0x1c>
 8001478:	2301      	movs	r3, #1
 800147a:	e03f      	b.n	80014fc <dhcx_read_dma+0x9c>

  spi_tx[0] = 0x80 | (reg & 0x7F);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <dhcx_read_dma+0xa4>)
 8001486:	701a      	strb	r2, [r3, #0]
  memset(&spi_tx[1], 0, len);
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	461a      	mov	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	481e      	ldr	r0, [pc, #120]	@ (8001508 <dhcx_read_dma+0xa8>)
 8001490:	f008 f91a 	bl	80096c8 <memset>

  spi2_dma_done = 0;
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <dhcx_read_dma+0xac>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
  cs_low();
 800149a:	f7ff ff69 	bl	8001370 <cs_low>

  t_spi2_start = cycles_now();
 800149e:	f7ff f8c3 	bl	8000628 <cycles_now>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001510 <dhcx_read_dma+0xb0>)
 80014a6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef st = HAL_SPI_TransmitReceive_DMA(&hspi2, spi_tx, spi_rx, len+1);
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <dhcx_read_dma+0xb4>)
 80014b0:	4914      	ldr	r1, [pc, #80]	@ (8001504 <dhcx_read_dma+0xa4>)
 80014b2:	4819      	ldr	r0, [pc, #100]	@ (8001518 <dhcx_read_dma+0xb8>)
 80014b4:	f006 fcf8 	bl	8007ea8 <HAL_SPI_TransmitReceive_DMA>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
  t_spi2_callret = cycles_now();
 80014bc:	f7ff f8b4 	bl	8000628 <cycles_now>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a16      	ldr	r2, [pc, #88]	@ (800151c <dhcx_read_dma+0xbc>)
 80014c4:	6013      	str	r3, [r2, #0]

  if (st != HAL_OK){
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <dhcx_read_dma+0x74>
    cs_high();
 80014cc:	f7ff ff5c 	bl	8001388 <cs_high>
    return st;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	e013      	b.n	80014fc <dhcx_read_dma+0x9c>
  }

  while (!spi2_dma_done) { /* busy-wait for this demo */ }
 80014d4:	bf00      	nop
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <dhcx_read_dma+0xac>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0fa      	beq.n	80014d6 <dhcx_read_dma+0x76>

  cs_high();
 80014e0:	f7ff ff52 	bl	8001388 <cs_high>
  t_spi2_done = cycles_now();
 80014e4:	f7ff f8a0 	bl	8000628 <cycles_now>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <dhcx_read_dma+0xc0>)
 80014ec:	6013      	str	r3, [r2, #0]

  memcpy(dst, &spi_rx[1], len);
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	461a      	mov	r2, r3
 80014f2:	490c      	ldr	r1, [pc, #48]	@ (8001524 <dhcx_read_dma+0xc4>)
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f008 f91b 	bl	8009730 <memcpy>
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200004c8 	.word	0x200004c8
 8001508:	200004c9 	.word	0x200004c9
 800150c:	200004c4 	.word	0x200004c4
 8001510:	200004b4 	.word	0x200004b4
 8001514:	200004e8 	.word	0x200004e8
 8001518:	2000025c 	.word	0x2000025c
 800151c:	200004b8 	.word	0x200004b8
 8001520:	200004c0 	.word	0x200004c0
 8001524:	200004e9 	.word	0x200004e9

08001528 <dhcx_init>:
#define DHCX_FS_XL_2G     (0x00u<<2)
#define DHCX_FS_G_2000DPS (0x03u<<2)
#endif

// ---------- Sensor init / poll / burst read ----------
static void dhcx_init(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  dhcx_write(DHCX_REG_CTRL3_C, DHCX_BDU | DHCX_IF_INC);
 800152c:	2144      	movs	r1, #68	@ 0x44
 800152e:	2012      	movs	r0, #18
 8001530:	f7ff ff72 	bl	8001418 <dhcx_write>
  dhcx_write(DHCX_REG_CTRL2_G,  (uint8_t)((DHCX_ODR_6k66<<4) | DHCX_FS_G_2000DPS));
 8001534:	21ac      	movs	r1, #172	@ 0xac
 8001536:	2011      	movs	r0, #17
 8001538:	f7ff ff6e 	bl	8001418 <dhcx_write>
  dhcx_write(DHCX_REG_CTRL1_XL, (uint8_t)((DHCX_ODR_6k66<<4) | DHCX_FS_XL_2G));
 800153c:	21a0      	movs	r1, #160	@ 0xa0
 800153e:	2010      	movs	r0, #16
 8001540:	f7ff ff6a 	bl	8001418 <dhcx_write>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <dhcx_both_ready>:

static uint8_t dhcx_both_ready(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  uint8_t s=0;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
  if (HAL_OK != dhcx_read_dma(DHCX_REG_STATUS, &s, 1)) return 0;
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	201e      	movs	r0, #30
 800155a:	f7ff ff81 	bl	8001460 <dhcx_read_dma>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <dhcx_both_ready+0x20>
 8001564:	2300      	movs	r3, #0
 8001566:	e007      	b.n	8001578 <dhcx_both_ready+0x30>
  return (s & 0x03u) == 0x03u;  // GDA|XLDA
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b03      	cmp	r3, #3
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <dhcx_read_gyro_accel_dma>:

static HAL_StatusTypeDef dhcx_read_gyro_accel_dma(dhcx_raw_t* out){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint8_t b[12];
  HAL_StatusTypeDef st = dhcx_read_dma(DHCX_REG_OUTX_L_G, b, sizeof(b));
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	220c      	movs	r2, #12
 800158e:	4619      	mov	r1, r3
 8001590:	2022      	movs	r0, #34	@ 0x22
 8001592:	f7ff ff65 	bl	8001460 <dhcx_read_dma>
 8001596:	4603      	mov	r3, r0
 8001598:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <dhcx_read_gyro_accel_dma+0x24>
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	e03c      	b.n	800161e <dhcx_read_gyro_accel_dma+0x9e>

  out->gx = (int16_t)((b[1]<<8) | b[0]);
 80015a4:	7a7b      	ldrb	r3, [r7, #9]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7a3b      	ldrb	r3, [r7, #8]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	801a      	strh	r2, [r3, #0]
  out->gy = (int16_t)((b[3]<<8) | b[2]);
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21a      	sxth	r2, r3
 80015c0:	7abb      	ldrb	r3, [r7, #10]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	805a      	strh	r2, [r3, #2]
  out->gz = (int16_t)((b[5]<<8) | b[4]);
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	7b3b      	ldrb	r3, [r7, #12]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	809a      	strh	r2, [r3, #4]
  out->ax = (int16_t)((b[7]<<8) | b[6]);
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	80da      	strh	r2, [r3, #6]
  out->ay = (int16_t)((b[9]<<8) | b[8]);
 80015f4:	7c7b      	ldrb	r3, [r7, #17]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	7c3b      	ldrb	r3, [r7, #16]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b21a      	sxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	811a      	strh	r2, [r3, #8]
  out->az = (int16_t)((b[11]<<8)| b[10]);
 8001608:	7cfb      	ldrb	r3, [r7, #19]
 800160a:	b21b      	sxth	r3, r3
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	7cbb      	ldrb	r3, [r7, #18]
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21a      	sxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	815a      	strh	r2, [r3, #10]
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162a:	b672      	cpsid	i
}
 800162c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162e:	bf00      	nop
 8001630:	e7fd      	b.n	800162e <Error_Handler+0x8>
	...

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_MspInit+0x38>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_MspInit+0x38>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_MspInit+0x38>)
 800164c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001658:	f002 f940 	bl	80038dc <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 800165c:	f002 f94e 	bl	80038fc <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8001660:	f002 f95c 	bl	800391c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	46020c00 	.word	0x46020c00

08001670 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0c4      	sub	sp, #272	@ 0x110
 8001674:	af00      	add	r7, sp, #0
 8001676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800167a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800167e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001694:	22c8      	movs	r2, #200	@ 0xc8
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f008 f815 	bl	80096c8 <memset>
  if(hspi->Instance==SPI1)
 800169e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4ab0      	ldr	r2, [pc, #704]	@ (800196c <HAL_SPI_MspInit+0x2fc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d147      	bne.n	8001740 <HAL_SPI_MspInit+0xd0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80016b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80016bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fbe3 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80016d4:	f7ff ffa7 	bl	8001626 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d8:	4ba5      	ldr	r3, [pc, #660]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80016da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016de:	4aa4      	ldr	r2, [pc, #656]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80016e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016e4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016e8:	4ba1      	ldr	r3, [pc, #644]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80016ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80016fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001706:	4b9a      	ldr	r3, [pc, #616]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8001714:	231c      	movs	r3, #28
 8001716:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172c:	2305      	movs	r3, #5
 800172e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001732:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001736:	4619      	mov	r1, r3
 8001738:	488e      	ldr	r0, [pc, #568]	@ (8001974 <HAL_SPI_MspInit+0x304>)
 800173a:	f001 fe0f 	bl	800335c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800173e:	e1d3      	b.n	8001ae8 <HAL_SPI_MspInit+0x478>
  else if(hspi->Instance==SPI2)
 8001740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001744:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a8a      	ldr	r2, [pc, #552]	@ (8001978 <HAL_SPI_MspInit+0x308>)
 800174e:	4293      	cmp	r3, r2
 8001750:	f040 8120 	bne.w	8001994 <HAL_SPI_MspInit+0x324>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001754:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001766:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fb92 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8001776:	f7ff ff56 	bl	8001626 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800177a:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 800177c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001780:	4a7b      	ldr	r2, [pc, #492]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 8001782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001786:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800178a:	4b79      	ldr	r3, [pc, #484]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 800178c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001798:	4b75      	ldr	r3, [pc, #468]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 800179a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179e:	4a74      	ldr	r2, [pc, #464]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a8:	4b71      	ldr	r3, [pc, #452]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80017aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80017b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017bc:	4a6c      	ldr	r2, [pc, #432]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_SPI_MspInit+0x300>)
 80017c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80017d4:	230a      	movs	r3, #10
 80017d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ec:	2305      	movs	r3, #5
 80017ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017f2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80017f6:	4619      	mov	r1, r3
 80017f8:	4860      	ldr	r0, [pc, #384]	@ (800197c <HAL_SPI_MspInit+0x30c>)
 80017fa:	f001 fdaf 	bl	800335c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fe:	2308      	movs	r3, #8
 8001800:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001816:	2305      	movs	r3, #5
 8001818:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001820:	4619      	mov	r1, r3
 8001822:	4857      	ldr	r0, [pc, #348]	@ (8001980 <HAL_SPI_MspInit+0x310>)
 8001824:	f001 fd9a 	bl	800335c <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001828:	4b56      	ldr	r3, [pc, #344]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 800182a:	4a57      	ldr	r2, [pc, #348]	@ (8001988 <HAL_SPI_MspInit+0x318>)
 800182c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 800182e:	4b55      	ldr	r3, [pc, #340]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001830:	2209      	movs	r2, #9
 8001832:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183a:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 800183c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001840:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001842:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001844:	2208      	movs	r2, #8
 8001846:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8001848:	4b4e      	ldr	r3, [pc, #312]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800184e:	4b4d      	ldr	r3, [pc, #308]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001854:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800185a:	4b4a      	ldr	r3, [pc, #296]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 800185c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001860:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001862:	4b48      	ldr	r3, [pc, #288]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001864:	2201      	movs	r2, #1
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8001868:	4b46      	ldr	r3, [pc, #280]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 800186a:	2201      	movs	r2, #1
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800186e:	4b45      	ldr	r3, [pc, #276]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001870:	2200      	movs	r2, #0
 8001872:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001874:	4b43      	ldr	r3, [pc, #268]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001876:	2200      	movs	r2, #0
 8001878:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 800187a:	4b42      	ldr	r3, [pc, #264]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 800187c:	2200      	movs	r2, #0
 800187e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001880:	4840      	ldr	r0, [pc, #256]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 8001882:	f000 fe11 	bl	80024a8 <HAL_DMA_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 800188c:	f7ff fecb 	bl	8001626 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8001890:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001894:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a3a      	ldr	r2, [pc, #232]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 800189c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018a0:	4a38      	ldr	r2, [pc, #224]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 80018a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80018ae:	2110      	movs	r1, #16
 80018b0:	4834      	ldr	r0, [pc, #208]	@ (8001984 <HAL_SPI_MspInit+0x314>)
 80018b2:	f001 f9ad 	bl	8002c10 <HAL_DMA_ConfigChannelAttributes>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_SPI_MspInit+0x250>
      Error_Handler();
 80018bc:	f7ff feb3 	bl	8001626 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80018c0:	4b32      	ldr	r3, [pc, #200]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018c2:	4a33      	ldr	r2, [pc, #204]	@ (8001990 <HAL_SPI_MspInit+0x320>)
 80018c4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80018c6:	4b31      	ldr	r3, [pc, #196]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018c8:	2208      	movs	r2, #8
 80018ca:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80018cc:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d2:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80018d8:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018e4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80018e6:	4b29      	ldr	r3, [pc, #164]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80018ec:	4b27      	ldr	r3, [pc, #156]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018f8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 8001902:	2201      	movs	r2, #1
 8001904:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 8001908:	2200      	movs	r2, #0
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 800190e:	2200      	movs	r2, #0
 8001910:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001912:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 8001914:	2200      	movs	r2, #0
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001918:	481c      	ldr	r0, [pc, #112]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 800191a:	f000 fdc5 	bl	80024a8 <HAL_DMA_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_SPI_MspInit+0x2b8>
      Error_Handler();
 8001924:	f7ff fe7f 	bl	8001626 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 8001928:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800192c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a16      	ldr	r2, [pc, #88]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 8001934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 800193a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800193e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001946:	2110      	movs	r1, #16
 8001948:	4810      	ldr	r0, [pc, #64]	@ (800198c <HAL_SPI_MspInit+0x31c>)
 800194a:	f001 f961 	bl	8002c10 <HAL_DMA_ConfigChannelAttributes>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 8001954:	f7ff fe67 	bl	8001626 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	203c      	movs	r0, #60	@ 0x3c
 800195e:	f000 fcc7 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001962:	203c      	movs	r0, #60	@ 0x3c
 8001964:	f000 fcde 	bl	8002324 <HAL_NVIC_EnableIRQ>
}
 8001968:	e0be      	b.n	8001ae8 <HAL_SPI_MspInit+0x478>
 800196a:	bf00      	nop
 800196c:	40013000 	.word	0x40013000
 8001970:	46020c00 	.word	0x46020c00
 8001974:	42021800 	.word	0x42021800
 8001978:	40003800 	.word	0x40003800
 800197c:	42022000 	.word	0x42022000
 8001980:	42020c00 	.word	0x42020c00
 8001984:	200002ec 	.word	0x200002ec
 8001988:	400200d0 	.word	0x400200d0
 800198c:	20000364 	.word	0x20000364
 8001990:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 8001994:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001998:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a54      	ldr	r2, [pc, #336]	@ (8001af4 <HAL_SPI_MspInit+0x484>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	f040 80a0 	bne.w	8001ae8 <HAL_SPI_MspInit+0x478>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80019a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 80019b4:	2310      	movs	r3, #16
 80019b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fa68 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_SPI_MspInit+0x35e>
      Error_Handler();
 80019ca:	f7ff fe2c 	bl	8001626 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019ce:	4b4a      	ldr	r3, [pc, #296]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 80019d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80019d4:	4a48      	ldr	r2, [pc, #288]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80019de:	4b46      	ldr	r3, [pc, #280]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 80019e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ec:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 80019ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f2:	4a41      	ldr	r2, [pc, #260]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 80019f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019fc:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 80019fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 8001a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a10:	4a39      	ldr	r2, [pc, #228]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a1a:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 8001a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a28:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a32:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a36:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 8001a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a48:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <HAL_SPI_MspInit+0x488>)
 8001a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a4e:	f003 0202 	and.w	r2, r3, #2
 8001a52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a64:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a80:	2306      	movs	r3, #6
 8001a82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a86:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481b      	ldr	r0, [pc, #108]	@ (8001afc <HAL_SPI_MspInit+0x48c>)
 8001a8e:	f001 fc65 	bl	800335c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aac:	2306      	movs	r3, #6
 8001aae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4811      	ldr	r0, [pc, #68]	@ (8001b00 <HAL_SPI_MspInit+0x490>)
 8001aba:	f001 fc4f 	bl	800335c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001abe:	2330      	movs	r3, #48	@ 0x30
 8001ac0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4808      	ldr	r0, [pc, #32]	@ (8001b04 <HAL_SPI_MspInit+0x494>)
 8001ae4:	f001 fc3a 	bl	800335c <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	46002000 	.word	0x46002000
 8001af8:	46020c00 	.word	0x46020c00
 8001afc:	42021800 	.word	0x42021800
 8001b00:	42020000 	.word	0x42020000
 8001b04:	42020400 	.word	0x42020400

08001b08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0c0      	sub	sp, #256	@ 0x100
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b20:	f107 0320 	add.w	r3, r7, #32
 8001b24:	22c8      	movs	r2, #200	@ 0xc8
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f007 fdcd 	bl	80096c8 <memset>
  if(huart->Instance==USART2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5e      	ldr	r2, [pc, #376]	@ (8001cac <HAL_UART_MspInit+0x1a4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d145      	bne.n	8001bc4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b38:	f04f 0202 	mov.w	r2, #2
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 f9a1 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001b58:	f7ff fd65 	bl	8001626 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	4b54      	ldr	r3, [pc, #336]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b62:	4a53      	ldr	r2, [pc, #332]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b68:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b6c:	4b50      	ldr	r3, [pc, #320]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b80:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b8a:	4b49      	ldr	r3, [pc, #292]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8001b98:	2370      	movs	r3, #112	@ 0x70
 8001b9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001bba:	4619      	mov	r1, r3
 8001bbc:	483d      	ldr	r0, [pc, #244]	@ (8001cb4 <HAL_UART_MspInit+0x1ac>)
 8001bbe:	f001 fbcd 	bl	800335c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bc2:	e06e      	b.n	8001ca2 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb8 <HAL_UART_MspInit+0x1b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d169      	bne.n	8001ca2 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bce:	f04f 0204 	mov.w	r2, #4
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 f956 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_UART_MspInit+0xea>
      Error_Handler();
 8001bee:	f7ff fd1a 	bl	8001626 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001bfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c02:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c16:	4a26      	ldr	r2, [pc, #152]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c20:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c34:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_UART_MspInit+0x1a8>)
 8001c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001c4c:	23a0      	movs	r3, #160	@ 0xa0
 8001c4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c64:	2307      	movs	r3, #7
 8001c66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4812      	ldr	r0, [pc, #72]	@ (8001cbc <HAL_UART_MspInit+0x1b4>)
 8001c72:	f001 fb73 	bl	800335c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001c76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c90:	2307      	movs	r3, #7
 8001c92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <HAL_UART_MspInit+0x1ac>)
 8001c9e:	f001 fb5d 	bl	800335c <HAL_GPIO_Init>
}
 8001ca2:	bf00      	nop
 8001ca4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	46020c00 	.word	0x46020c00
 8001cb4:	42020c00 	.word	0x42020c00
 8001cb8:	40004800 	.word	0x40004800
 8001cbc:	42020000 	.word	0x42020000

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d16:	f000 f9ef 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f001 fd12 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 8001d30:	2002      	movs	r0, #2
 8001d32:	f001 fd0b 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 8001d3e:	2004      	movs	r0, #4
 8001d40:	f001 fd04 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8001d4c:	2008      	movs	r0, #8
 8001d4e:	f001 fcfd 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8001d5a:	2010      	movs	r0, #16
 8001d5c:	f001 fcf6 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8001d68:	2020      	movs	r0, #32
 8001d6a:	f001 fcef 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8001d76:	2040      	movs	r0, #64	@ 0x40
 8001d78:	f001 fce8 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8001d84:	2080      	movs	r0, #128	@ 0x80
 8001d86:	f001 fce1 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 8001d92:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d96:	f001 fcd9 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8001da2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001da6:	f001 fcd1 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}

08001dae <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8001db2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001db6:	f001 fcc9 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 8001dc2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001dc6:	f001 fcc1 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 8001dd2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001dd6:	f001 fcb9 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001de2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001de6:	f001 fcb1 	bl	800374c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001df6:	f000 fd9e 	bl	8002936 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000364 	.word	0x20000364

08001e04 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001e0a:	f000 fd94 	bl	8002936 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200002ec 	.word	0x200002ec

08001e18 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001e1e:	f000 fd8a 	bl	8002936 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001e4 	.word	0x200001e4

08001e2c <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <GPDMA1_Channel3_IRQHandler+0x10>)
 8001e32:	f000 fd80 	bl	8002936 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000016c 	.word	0x2000016c

08001e40 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <GPDMA1_Channel4_IRQHandler+0x10>)
 8001e46:	f000 fd76 	bl	8002936 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200000f4 	.word	0x200000f4

08001e54 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001e5a:	f000 fd6c 	bl	8002936 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000007c 	.word	0x2000007c

08001e68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <SPI2_IRQHandler+0x10>)
 8001e6e:	f006 faa9 	bl	80083c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000025c 	.word	0x2000025c

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f007 fc14 	bl	80096d8 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200c0000 	.word	0x200c0000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	20000508 	.word	0x20000508
 8001ee4:	20000658 	.word	0x20000658

08001ee8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <SystemInit+0x68>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <SystemInit+0x68>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <SystemInit+0x6c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <SystemInit+0x6c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <SystemInit+0x6c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <SystemInit+0x6c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <SystemInit+0x6c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <SystemInit+0x6c>)
 8001f1a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001f1e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001f22:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <SystemInit+0x6c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <SystemInit+0x6c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <SystemInit+0x6c>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <SystemInit+0x6c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <SystemInit+0x68>)
 8001f3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f42:	609a      	str	r2, [r3, #8]
  #endif
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00
 8001f54:	46020c00 	.word	0x46020c00

08001f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f90 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f5c:	f7ff ffc4 	bl	8001ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f62:	e003      	b.n	8001f6c <LoopCopyDataInit>

08001f64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f6a:	3104      	adds	r1, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f6c:	480a      	ldr	r0, [pc, #40]	@ (8001f98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f74:	d3f6      	bcc.n	8001f64 <CopyDataInit>
	ldr	r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f78:	e002      	b.n	8001f80 <LoopFillZerobss>

08001f7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f7c:	f842 3b04 	str.w	r3, [r2], #4

08001f80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <LoopForever+0x16>)
	cmp	r2, r3
 8001f82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f84:	d3f9      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f007 fbad 	bl	80096e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8a:	f7fe fbaf 	bl	80006ec <main>

08001f8e <LoopForever>:

LoopForever:
    b LoopForever
 8001f8e:	e7fe      	b.n	8001f8e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f90:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001f94:	0800a1f0 	.word	0x0800a1f0
	ldr	r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f9c:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 8001fa0:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 8001fa4:	20000658 	.word	0x20000658

08001fa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC1_IRQHandler>
	...

08001fac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_Init+0x50>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_Init+0x50>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f98c 	bl	80022da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001fc2:	f002 fd89 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_Init+0x54>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <HAL_Init+0x58>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_Init+0x5c>)
 8001fda:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fdc:	2004      	movs	r0, #4
 8001fde:	f000 f9d1 	bl	8002384 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f000 f812 	bl	800200c <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e002      	b.n	8001ff8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff2:	f7ff fb1f 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40022000 	.word	0x40022000
 8002000:	46020c00 	.word	0x46020c00
 8002004:	0800a0ac 	.word	0x0800a0ac
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002018:	4b33      	ldr	r3, [pc, #204]	@ (80020e8 <HAL_InitTick+0xdc>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e05c      	b.n	80020de <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002024:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <HAL_InitTick+0xe0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b04      	cmp	r3, #4
 800202e:	d10c      	bne.n	800204a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002030:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <HAL_InitTick+0xe4>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b2c      	ldr	r3, [pc, #176]	@ (80020e8 <HAL_InitTick+0xdc>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e037      	b.n	80020ba <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800204a:	f000 f9f3 	bl	8002434 <HAL_SYSTICK_GetCLKSourceConfig>
 800204e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d023      	beq.n	800209e <HAL_InitTick+0x92>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d82d      	bhi.n	80020b8 <HAL_InitTick+0xac>
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_InitTick+0x5e>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d00d      	beq.n	8002084 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002068:	e026      	b.n	80020b8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800206a:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <HAL_InitTick+0xe4>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_InitTick+0xdc>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002078:	fbb3 f3f1 	udiv	r3, r3, r1
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	60fb      	str	r3, [r7, #12]
        break;
 8002082:	e01a      	b.n	80020ba <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <HAL_InitTick+0xdc>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002092:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	60fb      	str	r3, [r7, #12]
        break;
 800209c:	e00d      	b.n	80020ba <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_InitTick+0xdc>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	60fb      	str	r3, [r7, #12]
        break;
 80020b6:	e000      	b.n	80020ba <HAL_InitTick+0xae>
        break;
 80020b8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f940 	bl	8002340 <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e009      	b.n	80020de <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ca:	2200      	movs	r2, #0
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	f000 f90d 	bl	80022f0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80020d6:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <HAL_InitTick+0xe8>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	e000e010 	.word	0xe000e010
 80020f0:	20000004 	.word	0x20000004
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_IncTick+0x20>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_IncTick+0x24>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_IncTick+0x24>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	2000000c 	.word	0x2000000c
 800211c:	2000050c 	.word	0x2000050c

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000050c 	.word	0x2000050c

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ffee 	bl	8002120 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d005      	beq.n	800215e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002152:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_Delay+0x44>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215e:	bf00      	nop
 8002160:	f7ff ffde 	bl	8002120 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8f7      	bhi.n	8002160 <HAL_Delay+0x28>
  {
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000000c 	.word	0x2000000c

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	@ (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	@ (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	@ (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	@ 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff4c 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022fe:	f7ff ff63 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002302:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	6978      	ldr	r0, [r7, #20]
 800230a:	f7ff ffb3 	bl	8002274 <NVIC_EncodePriority>
 800230e:	4602      	mov	r2, r0
 8002310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff82 	bl	8002220 <__NVIC_SetPriority>
}
 800231c:	bf00      	nop
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff56 	bl	80021e4 <__NVIC_EnableIRQ>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002350:	d301      	bcc.n	8002356 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002352:	2301      	movs	r3, #1
 8002354:	e00d      	b.n	8002372 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_SYSTICK_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <HAL_SYSTICK_Config+0x40>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_SYSTICK_Config+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <HAL_SYSTICK_Config+0x40>)
 800236a:	f043 0303 	orr.w	r3, r3, #3
 800236e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d844      	bhi.n	800241c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002392:	a201      	add	r2, pc, #4	@ (adr r2, 8002398 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023bb 	.word	0x080023bb
 800239c:	080023d9 	.word	0x080023d9
 80023a0:	080023fb 	.word	0x080023fb
 80023a4:	0800241d 	.word	0x0800241d
 80023a8:	080023ad 	.word	0x080023ad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023ac:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1e      	ldr	r2, [pc, #120]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6013      	str	r3, [r2, #0]
      break;
 80023b8:	e031      	b.n	800241e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023ba:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80023c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023cc:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80023d6:	e022      	b.n	800241e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a13      	ldr	r2, [pc, #76]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023ee:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80023f8:	e011      	b.n	800241e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a0b      	ldr	r2, [pc, #44]	@ (800242c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002410:	4a07      	ldr	r2, [pc, #28]	@ (8002430 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002412:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002416:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800241a:	e000      	b.n	800241e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800241c:	bf00      	nop
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010
 8002430:	46020c00 	.word	0x46020c00

08002434 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002446:	2304      	movs	r3, #4
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	e021      	b.n	8002490 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002452:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002456:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800245e:	d011      	beq.n	8002484 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002466:	d810      	bhi.n	800248a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002474:	d003      	beq.n	800247e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002476:	e008      	b.n	800248a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
        break;
 800247c:	e008      	b.n	8002490 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800247e:	2301      	movs	r3, #1
 8002480:	607b      	str	r3, [r7, #4]
        break;
 8002482:	e005      	b.n	8002490 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002484:	2302      	movs	r3, #2
 8002486:	607b      	str	r3, [r7, #4]
        break;
 8002488:	e002      	b.n	8002490 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
        break;
 800248e:	bf00      	nop
    }
  }
  return systick_source;
 8002490:	687b      	ldr	r3, [r7, #4]
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010
 80024a4:	46020c00 	.word	0x46020c00

080024a8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff fe36 	bl	8002120 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0f0      	b.n	80026a2 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a79      	ldr	r2, [pc, #484]	@ (80026ac <HAL_DMA_Init+0x204>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	f000 809f 	beq.w	800260a <HAL_DMA_Init+0x162>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a77      	ldr	r2, [pc, #476]	@ (80026b0 <HAL_DMA_Init+0x208>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f000 8099 	beq.w	800260a <HAL_DMA_Init+0x162>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a75      	ldr	r2, [pc, #468]	@ (80026b4 <HAL_DMA_Init+0x20c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	f000 8093 	beq.w	800260a <HAL_DMA_Init+0x162>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a73      	ldr	r2, [pc, #460]	@ (80026b8 <HAL_DMA_Init+0x210>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f000 808d 	beq.w	800260a <HAL_DMA_Init+0x162>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a71      	ldr	r2, [pc, #452]	@ (80026bc <HAL_DMA_Init+0x214>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	f000 8087 	beq.w	800260a <HAL_DMA_Init+0x162>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6f      	ldr	r2, [pc, #444]	@ (80026c0 <HAL_DMA_Init+0x218>)
 8002502:	4293      	cmp	r3, r2
 8002504:	f000 8081 	beq.w	800260a <HAL_DMA_Init+0x162>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6d      	ldr	r2, [pc, #436]	@ (80026c4 <HAL_DMA_Init+0x21c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d07b      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6c      	ldr	r2, [pc, #432]	@ (80026c8 <HAL_DMA_Init+0x220>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d076      	beq.n	800260a <HAL_DMA_Init+0x162>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a6a      	ldr	r2, [pc, #424]	@ (80026cc <HAL_DMA_Init+0x224>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d071      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a69      	ldr	r2, [pc, #420]	@ (80026d0 <HAL_DMA_Init+0x228>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d06c      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a67      	ldr	r2, [pc, #412]	@ (80026d4 <HAL_DMA_Init+0x22c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d067      	beq.n	800260a <HAL_DMA_Init+0x162>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a66      	ldr	r2, [pc, #408]	@ (80026d8 <HAL_DMA_Init+0x230>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d062      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a64      	ldr	r2, [pc, #400]	@ (80026dc <HAL_DMA_Init+0x234>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d05d      	beq.n	800260a <HAL_DMA_Init+0x162>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a63      	ldr	r2, [pc, #396]	@ (80026e0 <HAL_DMA_Init+0x238>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d058      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a61      	ldr	r2, [pc, #388]	@ (80026e4 <HAL_DMA_Init+0x23c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d053      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a60      	ldr	r2, [pc, #384]	@ (80026e8 <HAL_DMA_Init+0x240>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04e      	beq.n	800260a <HAL_DMA_Init+0x162>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5e      	ldr	r2, [pc, #376]	@ (80026ec <HAL_DMA_Init+0x244>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d049      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5d      	ldr	r2, [pc, #372]	@ (80026f0 <HAL_DMA_Init+0x248>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d044      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5b      	ldr	r2, [pc, #364]	@ (80026f4 <HAL_DMA_Init+0x24c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d03f      	beq.n	800260a <HAL_DMA_Init+0x162>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5a      	ldr	r2, [pc, #360]	@ (80026f8 <HAL_DMA_Init+0x250>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d03a      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a58      	ldr	r2, [pc, #352]	@ (80026fc <HAL_DMA_Init+0x254>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d035      	beq.n	800260a <HAL_DMA_Init+0x162>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a57      	ldr	r2, [pc, #348]	@ (8002700 <HAL_DMA_Init+0x258>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d030      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a55      	ldr	r2, [pc, #340]	@ (8002704 <HAL_DMA_Init+0x25c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a54      	ldr	r2, [pc, #336]	@ (8002708 <HAL_DMA_Init+0x260>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d026      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_DMA_Init+0x264>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d021      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a51      	ldr	r2, [pc, #324]	@ (8002710 <HAL_DMA_Init+0x268>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d01c      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002714 <HAL_DMA_Init+0x26c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d017      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a4e      	ldr	r2, [pc, #312]	@ (8002718 <HAL_DMA_Init+0x270>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d012      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	@ (800271c <HAL_DMA_Init+0x274>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002720 <HAL_DMA_Init+0x278>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d008      	beq.n	800260a <HAL_DMA_Init+0x162>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a49      	ldr	r2, [pc, #292]	@ (8002724 <HAL_DMA_Init+0x27c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <HAL_DMA_Init+0x162>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a48      	ldr	r2, [pc, #288]	@ (8002728 <HAL_DMA_Init+0x280>)
 8002608:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10e      	bne.n	800263c <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0206 	orr.w	r2, r2, #6
 8002652:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002654:	e00f      	b.n	8002676 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002656:	f7ff fd63 	bl	8002120 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b05      	cmp	r3, #5
 8002662:	d908      	bls.n	8002676 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2210      	movs	r2, #16
 8002668:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e015      	b.n	80026a2 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e8      	bne.n	8002656 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fb25 	bl	8002cd4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40020050 	.word	0x40020050
 80026b0:	50020050 	.word	0x50020050
 80026b4:	400200d0 	.word	0x400200d0
 80026b8:	500200d0 	.word	0x500200d0
 80026bc:	40020150 	.word	0x40020150
 80026c0:	50020150 	.word	0x50020150
 80026c4:	400201d0 	.word	0x400201d0
 80026c8:	500201d0 	.word	0x500201d0
 80026cc:	40020250 	.word	0x40020250
 80026d0:	50020250 	.word	0x50020250
 80026d4:	400202d0 	.word	0x400202d0
 80026d8:	500202d0 	.word	0x500202d0
 80026dc:	40020350 	.word	0x40020350
 80026e0:	50020350 	.word	0x50020350
 80026e4:	400203d0 	.word	0x400203d0
 80026e8:	500203d0 	.word	0x500203d0
 80026ec:	40020450 	.word	0x40020450
 80026f0:	50020450 	.word	0x50020450
 80026f4:	400204d0 	.word	0x400204d0
 80026f8:	500204d0 	.word	0x500204d0
 80026fc:	40020550 	.word	0x40020550
 8002700:	50020550 	.word	0x50020550
 8002704:	400205d0 	.word	0x400205d0
 8002708:	500205d0 	.word	0x500205d0
 800270c:	40020650 	.word	0x40020650
 8002710:	50020650 	.word	0x50020650
 8002714:	400206d0 	.word	0x400206d0
 8002718:	500206d0 	.word	0x500206d0
 800271c:	40020750 	.word	0x40020750
 8002720:	50020750 	.word	0x50020750
 8002724:	400207d0 	.word	0x400207d0
 8002728:	500207d0 	.word	0x500207d0

0800272c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e04f      	b.n	80027e4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_DMA_Start_IT+0x26>
 800274e:	2302      	movs	r3, #2
 8002750:	e048      	b.n	80027e4 <HAL_DMA_Start_IT+0xb8>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d136      	bne.n	80027d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fa84 	bl	8002c88 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800278e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027be:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e007      	b.n	80027e4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2240      	movs	r2, #64	@ 0x40
 80027d8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80027f4:	f7ff fc94 	bl	8002120 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e06b      	b.n	80028dc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d008      	beq.n	8002822 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e05c      	b.n	80028dc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0204 	orr.w	r2, r2, #4
 8002830:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800283a:	e020      	b.n	800287e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800283c:	f7ff fc70 	bl	8002120 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b05      	cmp	r3, #5
 8002848:	d919      	bls.n	800287e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286e:	2201      	movs	r2, #1
 8002870:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e02e      	b.n	80028dc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0d7      	beq.n	800283c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0202 	orr.w	r2, r2, #2
 800289a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2204      	movs	r2, #4
 80028a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80028ac:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c6:	2201      	movs	r2, #1
 80028c8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e019      	b.n	800292a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e00e      	b.n	800292a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002946:	f023 030f 	bic.w	r3, r3, #15
 800294a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	3b50      	subs	r3, #80	@ 0x50
 8002956:	09db      	lsrs	r3, r3, #7
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2201      	movs	r2, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 813b 	beq.w	8002bec <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d011      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800299a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d011      	beq.n	80029da <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f043 0202 	orr.w	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d011      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d011      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a30:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	f043 0208 	orr.w	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00c      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a62:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d04c      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d045      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a98:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d12e      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ab4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0202 	orr.w	r2, r2, #2
 8002ac4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	2201      	movs	r2, #1
 8002ae0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07a      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
        }

        return;
 8002b02:	e075      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2205      	movs	r2, #5
 8002b08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d039      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d032      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d012      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d111      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b64:	2201      	movs	r2, #1
 8002b66:	731a      	strb	r2, [r3, #12]
 8002b68:	e008      	b.n	8002b7c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002b84:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d025      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0202 	orr.w	r2, r2, #2
 8002bb4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bce:	2201      	movs	r2, #1
 8002bd0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e002      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002bec:	bf00      	nop
 8002bee:	e000      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002bf0:	bf00      	nop
    }
  }
}
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e02b      	b.n	8002c7c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002c2c:	f023 030f 	bic.w	r3, r3, #15
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3a:	3b50      	subs	r3, #80	@ 0x50
 8002c3c:	09db      	lsrs	r3, r3, #7
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2201      	movs	r2, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f003 0311 	and.w	r3, r3, #17
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	d106      	bne.n	8002c6c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	e006      	b.n	8002c7a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	041b      	lsls	r3, r3, #16
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b291      	uxth	r1, r2
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002cb4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a53      	ldr	r2, [pc, #332]	@ (8002e60 <DMA_Init+0x18c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	f000 80a0 	beq.w	8002e5a <DMA_Init+0x186>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <DMA_Init+0x190>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	f000 809a 	beq.w	8002e5a <DMA_Init+0x186>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4f      	ldr	r2, [pc, #316]	@ (8002e68 <DMA_Init+0x194>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	f000 8094 	beq.w	8002e5a <DMA_Init+0x186>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a4d      	ldr	r2, [pc, #308]	@ (8002e6c <DMA_Init+0x198>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	f000 808e 	beq.w	8002e5a <DMA_Init+0x186>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a4b      	ldr	r2, [pc, #300]	@ (8002e70 <DMA_Init+0x19c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	f000 8088 	beq.w	8002e5a <DMA_Init+0x186>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a49      	ldr	r2, [pc, #292]	@ (8002e74 <DMA_Init+0x1a0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	f000 8082 	beq.w	8002e5a <DMA_Init+0x186>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a47      	ldr	r2, [pc, #284]	@ (8002e78 <DMA_Init+0x1a4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d07c      	beq.n	8002e5a <DMA_Init+0x186>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a45      	ldr	r2, [pc, #276]	@ (8002e7c <DMA_Init+0x1a8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d077      	beq.n	8002e5a <DMA_Init+0x186>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a44      	ldr	r2, [pc, #272]	@ (8002e80 <DMA_Init+0x1ac>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d072      	beq.n	8002e5a <DMA_Init+0x186>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a42      	ldr	r2, [pc, #264]	@ (8002e84 <DMA_Init+0x1b0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d06d      	beq.n	8002e5a <DMA_Init+0x186>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a41      	ldr	r2, [pc, #260]	@ (8002e88 <DMA_Init+0x1b4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d068      	beq.n	8002e5a <DMA_Init+0x186>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e8c <DMA_Init+0x1b8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d063      	beq.n	8002e5a <DMA_Init+0x186>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3e      	ldr	r2, [pc, #248]	@ (8002e90 <DMA_Init+0x1bc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d05e      	beq.n	8002e5a <DMA_Init+0x186>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a3c      	ldr	r2, [pc, #240]	@ (8002e94 <DMA_Init+0x1c0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d059      	beq.n	8002e5a <DMA_Init+0x186>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	@ (8002e98 <DMA_Init+0x1c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d054      	beq.n	8002e5a <DMA_Init+0x186>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a39      	ldr	r2, [pc, #228]	@ (8002e9c <DMA_Init+0x1c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d04f      	beq.n	8002e5a <DMA_Init+0x186>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a38      	ldr	r2, [pc, #224]	@ (8002ea0 <DMA_Init+0x1cc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04a      	beq.n	8002e5a <DMA_Init+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a36      	ldr	r2, [pc, #216]	@ (8002ea4 <DMA_Init+0x1d0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d045      	beq.n	8002e5a <DMA_Init+0x186>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a35      	ldr	r2, [pc, #212]	@ (8002ea8 <DMA_Init+0x1d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d040      	beq.n	8002e5a <DMA_Init+0x186>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a33      	ldr	r2, [pc, #204]	@ (8002eac <DMA_Init+0x1d8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d03b      	beq.n	8002e5a <DMA_Init+0x186>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a32      	ldr	r2, [pc, #200]	@ (8002eb0 <DMA_Init+0x1dc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d036      	beq.n	8002e5a <DMA_Init+0x186>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a30      	ldr	r2, [pc, #192]	@ (8002eb4 <DMA_Init+0x1e0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d031      	beq.n	8002e5a <DMA_Init+0x186>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb8 <DMA_Init+0x1e4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d02c      	beq.n	8002e5a <DMA_Init+0x186>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	@ (8002ebc <DMA_Init+0x1e8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d027      	beq.n	8002e5a <DMA_Init+0x186>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <DMA_Init+0x1ec>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <DMA_Init+0x186>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec4 <DMA_Init+0x1f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01d      	beq.n	8002e5a <DMA_Init+0x186>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a29      	ldr	r2, [pc, #164]	@ (8002ec8 <DMA_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d018      	beq.n	8002e5a <DMA_Init+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a27      	ldr	r2, [pc, #156]	@ (8002ecc <DMA_Init+0x1f8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <DMA_Init+0x186>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a26      	ldr	r2, [pc, #152]	@ (8002ed0 <DMA_Init+0x1fc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00e      	beq.n	8002e5a <DMA_Init+0x186>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a24      	ldr	r2, [pc, #144]	@ (8002ed4 <DMA_Init+0x200>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <DMA_Init+0x186>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a23      	ldr	r2, [pc, #140]	@ (8002ed8 <DMA_Init+0x204>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <DMA_Init+0x186>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a21      	ldr	r2, [pc, #132]	@ (8002edc <DMA_Init+0x208>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d142      	bne.n	8002ee0 <DMA_Init+0x20c>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e041      	b.n	8002ee2 <DMA_Init+0x20e>
 8002e5e:	bf00      	nop
 8002e60:	40020050 	.word	0x40020050
 8002e64:	50020050 	.word	0x50020050
 8002e68:	400200d0 	.word	0x400200d0
 8002e6c:	500200d0 	.word	0x500200d0
 8002e70:	40020150 	.word	0x40020150
 8002e74:	50020150 	.word	0x50020150
 8002e78:	400201d0 	.word	0x400201d0
 8002e7c:	500201d0 	.word	0x500201d0
 8002e80:	40020250 	.word	0x40020250
 8002e84:	50020250 	.word	0x50020250
 8002e88:	400202d0 	.word	0x400202d0
 8002e8c:	500202d0 	.word	0x500202d0
 8002e90:	40020350 	.word	0x40020350
 8002e94:	50020350 	.word	0x50020350
 8002e98:	400203d0 	.word	0x400203d0
 8002e9c:	500203d0 	.word	0x500203d0
 8002ea0:	40020450 	.word	0x40020450
 8002ea4:	50020450 	.word	0x50020450
 8002ea8:	400204d0 	.word	0x400204d0
 8002eac:	500204d0 	.word	0x500204d0
 8002eb0:	40020550 	.word	0x40020550
 8002eb4:	50020550 	.word	0x50020550
 8002eb8:	400205d0 	.word	0x400205d0
 8002ebc:	500205d0 	.word	0x500205d0
 8002ec0:	40020650 	.word	0x40020650
 8002ec4:	50020650 	.word	0x50020650
 8002ec8:	400206d0 	.word	0x400206d0
 8002ecc:	500206d0 	.word	0x500206d0
 8002ed0:	40020750 	.word	0x40020750
 8002ed4:	50020750 	.word	0x50020750
 8002ed8:	400207d0 	.word	0x400207d0
 8002edc:	500207d0 	.word	0x500207d0
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	051b      	lsls	r3, r3, #20
 8002ef2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002ef6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	3b01      	subs	r3, #1
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002f04:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3e:	f040 80b0 	bne.w	80030a2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a82      	ldr	r2, [pc, #520]	@ (8003150 <DMA_Init+0x47c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	f000 80a0 	beq.w	800308e <DMA_Init+0x3ba>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a80      	ldr	r2, [pc, #512]	@ (8003154 <DMA_Init+0x480>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	f000 809a 	beq.w	800308e <DMA_Init+0x3ba>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8003158 <DMA_Init+0x484>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	f000 8094 	beq.w	800308e <DMA_Init+0x3ba>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800315c <DMA_Init+0x488>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	f000 808e 	beq.w	800308e <DMA_Init+0x3ba>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7a      	ldr	r2, [pc, #488]	@ (8003160 <DMA_Init+0x48c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	f000 8088 	beq.w	800308e <DMA_Init+0x3ba>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a78      	ldr	r2, [pc, #480]	@ (8003164 <DMA_Init+0x490>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	f000 8082 	beq.w	800308e <DMA_Init+0x3ba>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a76      	ldr	r2, [pc, #472]	@ (8003168 <DMA_Init+0x494>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d07c      	beq.n	800308e <DMA_Init+0x3ba>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a74      	ldr	r2, [pc, #464]	@ (800316c <DMA_Init+0x498>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d077      	beq.n	800308e <DMA_Init+0x3ba>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	@ (8003170 <DMA_Init+0x49c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d072      	beq.n	800308e <DMA_Init+0x3ba>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a71      	ldr	r2, [pc, #452]	@ (8003174 <DMA_Init+0x4a0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d06d      	beq.n	800308e <DMA_Init+0x3ba>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a70      	ldr	r2, [pc, #448]	@ (8003178 <DMA_Init+0x4a4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d068      	beq.n	800308e <DMA_Init+0x3ba>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800317c <DMA_Init+0x4a8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d063      	beq.n	800308e <DMA_Init+0x3ba>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6d      	ldr	r2, [pc, #436]	@ (8003180 <DMA_Init+0x4ac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d05e      	beq.n	800308e <DMA_Init+0x3ba>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6b      	ldr	r2, [pc, #428]	@ (8003184 <DMA_Init+0x4b0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d059      	beq.n	800308e <DMA_Init+0x3ba>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6a      	ldr	r2, [pc, #424]	@ (8003188 <DMA_Init+0x4b4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d054      	beq.n	800308e <DMA_Init+0x3ba>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a68      	ldr	r2, [pc, #416]	@ (800318c <DMA_Init+0x4b8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04f      	beq.n	800308e <DMA_Init+0x3ba>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a67      	ldr	r2, [pc, #412]	@ (8003190 <DMA_Init+0x4bc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d04a      	beq.n	800308e <DMA_Init+0x3ba>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <DMA_Init+0x4c0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d045      	beq.n	800308e <DMA_Init+0x3ba>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a64      	ldr	r2, [pc, #400]	@ (8003198 <DMA_Init+0x4c4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d040      	beq.n	800308e <DMA_Init+0x3ba>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a62      	ldr	r2, [pc, #392]	@ (800319c <DMA_Init+0x4c8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d03b      	beq.n	800308e <DMA_Init+0x3ba>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a61      	ldr	r2, [pc, #388]	@ (80031a0 <DMA_Init+0x4cc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d036      	beq.n	800308e <DMA_Init+0x3ba>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5f      	ldr	r2, [pc, #380]	@ (80031a4 <DMA_Init+0x4d0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d031      	beq.n	800308e <DMA_Init+0x3ba>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5e      	ldr	r2, [pc, #376]	@ (80031a8 <DMA_Init+0x4d4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d02c      	beq.n	800308e <DMA_Init+0x3ba>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5c      	ldr	r2, [pc, #368]	@ (80031ac <DMA_Init+0x4d8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d027      	beq.n	800308e <DMA_Init+0x3ba>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a5b      	ldr	r2, [pc, #364]	@ (80031b0 <DMA_Init+0x4dc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <DMA_Init+0x3ba>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a59      	ldr	r2, [pc, #356]	@ (80031b4 <DMA_Init+0x4e0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01d      	beq.n	800308e <DMA_Init+0x3ba>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a58      	ldr	r2, [pc, #352]	@ (80031b8 <DMA_Init+0x4e4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <DMA_Init+0x3ba>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a56      	ldr	r2, [pc, #344]	@ (80031bc <DMA_Init+0x4e8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <DMA_Init+0x3ba>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a55      	ldr	r2, [pc, #340]	@ (80031c0 <DMA_Init+0x4ec>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <DMA_Init+0x3ba>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a53      	ldr	r2, [pc, #332]	@ (80031c4 <DMA_Init+0x4f0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <DMA_Init+0x3ba>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a52      	ldr	r2, [pc, #328]	@ (80031c8 <DMA_Init+0x4f4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <DMA_Init+0x3ba>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a50      	ldr	r2, [pc, #320]	@ (80031cc <DMA_Init+0x4f8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <DMA_Init+0x3be>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <DMA_Init+0x3c0>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e008      	b.n	80030b4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030aa:	d103      	bne.n	80030b4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030b2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ba:	4b45      	ldr	r3, [pc, #276]	@ (80031d0 <DMA_Init+0x4fc>)
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a36      	ldr	r2, [pc, #216]	@ (80031b0 <DMA_Init+0x4dc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d022      	beq.n	8003120 <DMA_Init+0x44c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a35      	ldr	r2, [pc, #212]	@ (80031b4 <DMA_Init+0x4e0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d01d      	beq.n	8003120 <DMA_Init+0x44c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a33      	ldr	r2, [pc, #204]	@ (80031b8 <DMA_Init+0x4e4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d018      	beq.n	8003120 <DMA_Init+0x44c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a32      	ldr	r2, [pc, #200]	@ (80031bc <DMA_Init+0x4e8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d013      	beq.n	8003120 <DMA_Init+0x44c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a30      	ldr	r2, [pc, #192]	@ (80031c0 <DMA_Init+0x4ec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00e      	beq.n	8003120 <DMA_Init+0x44c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2f      	ldr	r2, [pc, #188]	@ (80031c4 <DMA_Init+0x4f0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d009      	beq.n	8003120 <DMA_Init+0x44c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2d      	ldr	r2, [pc, #180]	@ (80031c8 <DMA_Init+0x4f4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d004      	beq.n	8003120 <DMA_Init+0x44c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2c      	ldr	r2, [pc, #176]	@ (80031cc <DMA_Init+0x4f8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <DMA_Init+0x450>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <DMA_Init+0x452>
 8003124:	2300      	movs	r3, #0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40020050 	.word	0x40020050
 8003154:	50020050 	.word	0x50020050
 8003158:	400200d0 	.word	0x400200d0
 800315c:	500200d0 	.word	0x500200d0
 8003160:	40020150 	.word	0x40020150
 8003164:	50020150 	.word	0x50020150
 8003168:	400201d0 	.word	0x400201d0
 800316c:	500201d0 	.word	0x500201d0
 8003170:	40020250 	.word	0x40020250
 8003174:	50020250 	.word	0x50020250
 8003178:	400202d0 	.word	0x400202d0
 800317c:	500202d0 	.word	0x500202d0
 8003180:	40020350 	.word	0x40020350
 8003184:	50020350 	.word	0x50020350
 8003188:	400203d0 	.word	0x400203d0
 800318c:	500203d0 	.word	0x500203d0
 8003190:	40020450 	.word	0x40020450
 8003194:	50020450 	.word	0x50020450
 8003198:	400204d0 	.word	0x400204d0
 800319c:	500204d0 	.word	0x500204d0
 80031a0:	40020550 	.word	0x40020550
 80031a4:	50020550 	.word	0x50020550
 80031a8:	400205d0 	.word	0x400205d0
 80031ac:	500205d0 	.word	0x500205d0
 80031b0:	40020650 	.word	0x40020650
 80031b4:	50020650 	.word	0x50020650
 80031b8:	400206d0 	.word	0x400206d0
 80031bc:	500206d0 	.word	0x500206d0
 80031c0:	40020750 	.word	0x40020750
 80031c4:	50020750 	.word	0x50020750
 80031c8:	400207d0 	.word	0x400207d0
 80031cc:	500207d0 	.word	0x500207d0
 80031d0:	3cc03180 	.word	0x3cc03180

080031d4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_DMAEx_List_Start_IT+0x16>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e082      	b.n	80032f4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031f4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003200:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d005      	beq.n	8003214 <HAL_DMAEx_List_Start_IT+0x40>
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d16a      	bne.n	80032e4 <HAL_DMAEx_List_Start_IT+0x110>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d067      	beq.n	80032e4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d157      	bne.n	80032d0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_DMAEx_List_Start_IT+0x5a>
 800322a:	2302      	movs	r3, #2
 800322c:	e062      	b.n	80032f4 <HAL_DMAEx_List_Start_IT+0x120>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003242:	2202      	movs	r2, #2
 8003244:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003262:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003292:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f107 010c 	add.w	r1, r7, #12
 800329e:	2200      	movs	r2, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f82b 	bl	80032fc <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	0c0b      	lsrs	r3, r1, #16
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80032c4:	4013      	ands	r3, r2
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e007      	b.n	80032f4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00c      	beq.n	800332e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <DMA_List_GetCLLRNodeInfo+0x58>)
 800331e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00f      	beq.n	8003346 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800332c:	e00b      	b.n	8003346 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4a08      	ldr	r2, [pc, #32]	@ (8003358 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003338:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2205      	movs	r2, #5
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	fe010000 	.word	0xfe010000
 8003358:	f8010000 	.word	0xf8010000

0800335c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	@ 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800336e:	e1c2      	b.n	80036f6 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 81b2 	beq.w	80036f0 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a55      	ldr	r2, [pc, #340]	@ (80034e4 <HAL_GPIO_Init+0x188>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d15d      	bne.n	8003450 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800339a:	2201      	movs	r2, #1
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0201 	and.w	r2, r3, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80033c4:	4a48      	ldr	r2, [pc, #288]	@ (80034e8 <HAL_GPIO_Init+0x18c>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033cc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80033ce:	4a46      	ldr	r2, [pc, #280]	@ (80034e8 <HAL_GPIO_Init+0x18c>)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	3208      	adds	r2, #8
 80033e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220b      	movs	r2, #11
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	08da      	lsrs	r2, r3, #3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3208      	adds	r2, #8
 800341a:	69f9      	ldr	r1, [r7, #28]
 800341c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	4013      	ands	r3, r2
 8003436:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2202      	movs	r2, #2
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	4313      	orrs	r3, r2
 8003446:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e067      	b.n	8003520 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x104>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b12      	cmp	r3, #18
 800345e:	d145      	bne.n	80034ec <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	4013      	ands	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 020f 	and.w	r2, r3, #15
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	4313      	orrs	r3, r2
 800349c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	69f9      	ldr	r1, [r7, #28]
 80034a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0203 	and.w	r2, r3, #3
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e01e      	b.n	8003520 <HAL_GPIO_Init+0x1c4>
 80034e2:	bf00      	nop
 80034e4:	46020000 	.word	0x46020000
 80034e8:	0800a104 	.word	0x0800a104
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	4013      	ands	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0203 	and.w	r2, r3, #3
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	4313      	orrs	r3, r2
 8003518:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d00b      	beq.n	8003540 <HAL_GPIO_Init+0x1e4>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d007      	beq.n	8003540 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003534:	2b11      	cmp	r3, #17
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b12      	cmp	r3, #18
 800353e:	d130      	bne.n	80035a2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	4013      	ands	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	4313      	orrs	r3, r2
 8003568:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003576:	2201      	movs	r2, #1
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	4013      	ands	r3, r2
 8003584:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 0201 	and.w	r2, r3, #1
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	4313      	orrs	r3, r2
 800359a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d107      	bne.n	80035ba <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d11b      	bne.n	80035ea <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d017      	beq.n	80035ea <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	2203      	movs	r2, #3
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d07c      	beq.n	80036f0 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80035f6:	4a47      	ldr	r2, [pc, #284]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	3318      	adds	r3, #24
 80035fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003602:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	220f      	movs	r2, #15
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	4013      	ands	r3, r2
 8003618:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0a9a      	lsrs	r2, r3, #10
 800361e:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <HAL_GPIO_Init+0x3bc>)
 8003620:	4013      	ands	r3, r2
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	f002 0203 	and.w	r2, r2, #3
 8003628:	00d2      	lsls	r2, r2, #3
 800362a:	4093      	lsls	r3, r2
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	4313      	orrs	r3, r2
 8003630:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003632:	4938      	ldr	r1, [pc, #224]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	3318      	adds	r3, #24
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003640:	4b34      	ldr	r3, [pc, #208]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43db      	mvns	r3, r3
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	4013      	ands	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003664:	4a2b      	ldr	r2, [pc, #172]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800366a:	4b2a      	ldr	r3, [pc, #168]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	43db      	mvns	r3, r3
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	4013      	ands	r3, r2
 8003678:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800368e:	4a21      	ldr	r2, [pc, #132]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003694:	4b1f      	ldr	r3, [pc, #124]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80036ba:	4a16      	ldr	r2, [pc, #88]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80036c2:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80036e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <HAL_GPIO_Init+0x3b8>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	3301      	adds	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f ae35 	bne.w	8003370 <HAL_GPIO_Init+0x14>
  }
}
 8003706:	bf00      	nop
 8003708:	bf00      	nop
 800370a:	3724      	adds	r7, #36	@ 0x24
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	46022000 	.word	0x46022000
 8003718:	002f7f7f 	.word	0x002f7f7f

0800371c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
 8003728:	4613      	mov	r3, r2
 800372a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800372c:	787b      	ldrb	r3, [r7, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003738:	e002      	b.n	8003740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003756:	4b0f      	ldr	r3, [pc, #60]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003762:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f814 	bl	8003798 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003770:	4b08      	ldr	r3, [pc, #32]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d006      	beq.n	800378a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800377c:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f812 	bl	80037ae <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	46022000 	.word	0x46022000

08003798 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80037cc:	4b39      	ldr	r3, [pc, #228]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037d4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10b      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e4:	d905      	bls.n	80037f2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037e6:	4b33      	ldr	r3, [pc, #204]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4a32      	ldr	r2, [pc, #200]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e057      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fc:	d90a      	bls.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80037fe:	4b2d      	ldr	r3, [pc, #180]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4313      	orrs	r3, r2
 800380a:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003810:	60d3      	str	r3, [r2, #12]
 8003812:	e007      	b.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003814:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800381c:	4925      	ldr	r1, [pc, #148]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4313      	orrs	r3, r2
 8003822:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003824:	4b24      	ldr	r3, [pc, #144]	@ (80038b8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a24      	ldr	r2, [pc, #144]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	2232      	movs	r2, #50	@ 0x32
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a21      	ldr	r2, [pc, #132]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003842:	e002      	b.n	800384a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3b01      	subs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800384a:	4b1a      	ldr	r3, [pc, #104]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f3      	bne.n	8003844 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01b      	beq.n	800389a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003862:	4b15      	ldr	r3, [pc, #84]	@ (80038b8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a15      	ldr	r2, [pc, #84]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	2232      	movs	r2, #50	@ 0x32
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003880:	e002      	b.n	8003888 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b01      	subs	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f3      	bne.n	8003882 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e000      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	46020800 	.word	0x46020800
 80038b8:	20000004 	.word	0x20000004
 80038bc:	10624dd3 	.word	0x10624dd3

080038c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80038c4:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	46020800 	.word	0x46020800

080038dc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	6113      	str	r3, [r2, #16]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	46020800 	.word	0x46020800

080038fc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003900:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	4a04      	ldr	r2, [pc, #16]	@ (8003918 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003906:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800390a:	6113      	str	r3, [r2, #16]
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	46020800 	.word	0x46020800

0800391c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_PWREx_EnableVddA+0x1c>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <HAL_PWREx_EnableVddA+0x1c>)
 8003926:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800392a:	6113      	str	r3, [r2, #16]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	46020800 	.word	0x46020800

0800393c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	@ 0x38
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f000 bec8 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003956:	4b99      	ldr	r3, [pc, #612]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003960:	4b96      	ldr	r3, [pc, #600]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 816c 	beq.w	8003c50 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_RCC_OscConfig+0x52>
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	2b0c      	cmp	r3, #12
 8003982:	f040 80de 	bne.w	8003b42 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003988:	2b01      	cmp	r3, #1
 800398a:	f040 80da 	bne.w	8003b42 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f000 bea5 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039a0:	4b86      	ldr	r3, [pc, #536]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <HAL_RCC_OscConfig+0x7a>
 80039ac:	4b83      	ldr	r3, [pc, #524]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039b4:	e005      	b.n	80039c2 <HAL_RCC_OscConfig+0x86>
 80039b6:	4b81      	ldr	r3, [pc, #516]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d255      	bcs.n	8003a72 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f9d9 	bl	8004d88 <RCC_SetFlashLatencyFromMSIRange>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f000 be82 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039e2:	4b76      	ldr	r3, [pc, #472]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4a75      	ldr	r2, [pc, #468]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039ec:	6093      	str	r3, [r2, #8]
 80039ee:	4b73      	ldr	r3, [pc, #460]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	4970      	ldr	r1, [pc, #448]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a08:	d309      	bcc.n	8003a1e <HAL_RCC_OscConfig+0xe2>
 8003a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f023 021f 	bic.w	r2, r3, #31
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4969      	ldr	r1, [pc, #420]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
 8003a1c:	e07e      	b.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da0a      	bge.n	8003a3c <HAL_RCC_OscConfig+0x100>
 8003a26:	4b65      	ldr	r3, [pc, #404]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	4961      	ldr	r1, [pc, #388]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]
 8003a3a:	e06f      	b.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a44:	d30a      	bcc.n	8003a5c <HAL_RCC_OscConfig+0x120>
 8003a46:	4b5d      	ldr	r3, [pc, #372]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	029b      	lsls	r3, r3, #10
 8003a54:	4959      	ldr	r1, [pc, #356]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60cb      	str	r3, [r1, #12]
 8003a5a:	e05f      	b.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
 8003a5c:	4b57      	ldr	r3, [pc, #348]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	03db      	lsls	r3, r3, #15
 8003a6a:	4954      	ldr	r1, [pc, #336]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60cb      	str	r3, [r1, #12]
 8003a70:	e054      	b.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003a72:	4b52      	ldr	r3, [pc, #328]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	4a51      	ldr	r2, [pc, #324]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a7c:	6093      	str	r3, [r2, #8]
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	494c      	ldr	r1, [pc, #304]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a98:	d309      	bcc.n	8003aae <HAL_RCC_OscConfig+0x172>
 8003a9a:	4b48      	ldr	r3, [pc, #288]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f023 021f 	bic.w	r2, r3, #31
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4945      	ldr	r1, [pc, #276]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60cb      	str	r3, [r1, #12]
 8003aac:	e028      	b.n	8003b00 <HAL_RCC_OscConfig+0x1c4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da0a      	bge.n	8003acc <HAL_RCC_OscConfig+0x190>
 8003ab6:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	493d      	ldr	r1, [pc, #244]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60cb      	str	r3, [r1, #12]
 8003aca:	e019      	b.n	8003b00 <HAL_RCC_OscConfig+0x1c4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad4:	d30a      	bcc.n	8003aec <HAL_RCC_OscConfig+0x1b0>
 8003ad6:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	029b      	lsls	r3, r3, #10
 8003ae4:	4935      	ldr	r1, [pc, #212]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60cb      	str	r3, [r1, #12]
 8003aea:	e009      	b.n	8003b00 <HAL_RCC_OscConfig+0x1c4>
 8003aec:	4b33      	ldr	r3, [pc, #204]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	03db      	lsls	r3, r3, #15
 8003afa:	4930      	ldr	r1, [pc, #192]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f93c 	bl	8004d88 <RCC_SetFlashLatencyFromMSIRange>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f000 bde5 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003b1c:	f001 f8de 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b20:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <HAL_RCC_OscConfig+0x284>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fa71 	bl	800200c <HAL_InitTick>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 808a 	beq.w	8003c4e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b3e:	f000 bdd2 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d066      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b56:	f7fe fae3 	bl	8002120 <HAL_GetTick>
 8003b5a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b5c:	e009      	b.n	8003b72 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fadf 	bl	8002120 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d902      	bls.n	8003b72 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	f000 bdba 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ef      	beq.n	8003b5e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4a0e      	ldr	r2, [pc, #56]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b88:	6093      	str	r3, [r2, #8]
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	4909      	ldr	r1, [pc, #36]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ba4:	d30e      	bcc.n	8003bc4 <HAL_RCC_OscConfig+0x288>
 8003ba6:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f023 021f 	bic.w	r2, r3, #31
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	4902      	ldr	r1, [pc, #8]	@ (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60cb      	str	r3, [r1, #12]
 8003bb8:	e04a      	b.n	8003c50 <HAL_RCC_OscConfig+0x314>
 8003bba:	bf00      	nop
 8003bbc:	46020c00 	.word	0x46020c00
 8003bc0:	20000008 	.word	0x20000008
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da0a      	bge.n	8003be2 <HAL_RCC_OscConfig+0x2a6>
 8003bcc:	4b98      	ldr	r3, [pc, #608]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	015b      	lsls	r3, r3, #5
 8003bda:	4995      	ldr	r1, [pc, #596]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60cb      	str	r3, [r1, #12]
 8003be0:	e036      	b.n	8003c50 <HAL_RCC_OscConfig+0x314>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bea:	d30a      	bcc.n	8003c02 <HAL_RCC_OscConfig+0x2c6>
 8003bec:	4b90      	ldr	r3, [pc, #576]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	498d      	ldr	r1, [pc, #564]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60cb      	str	r3, [r1, #12]
 8003c00:	e026      	b.n	8003c50 <HAL_RCC_OscConfig+0x314>
 8003c02:	4b8b      	ldr	r3, [pc, #556]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	03db      	lsls	r3, r3, #15
 8003c10:	4987      	ldr	r1, [pc, #540]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60cb      	str	r3, [r1, #12]
 8003c16:	e01b      	b.n	8003c50 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003c18:	4b85      	ldr	r3, [pc, #532]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a84      	ldr	r2, [pc, #528]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c24:	f7fe fa7c 	bl	8002120 <HAL_GetTick>
 8003c28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003c2a:	e009      	b.n	8003c40 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c2c:	f7fe fa78 	bl	8002120 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d902      	bls.n	8003c40 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	f000 bd53 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003c40:	4b7b      	ldr	r3, [pc, #492]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ef      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
 8003c4c:	e000      	b.n	8003c50 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 808b 	beq.w	8003d74 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_OscConfig+0x334>
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d17d      	bne.n	8003d74 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f000 bd34 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x35a>
 8003c88:	4b69      	ldr	r3, [pc, #420]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a68      	ldr	r2, [pc, #416]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	e041      	b.n	8003d1a <HAL_RCC_OscConfig+0x3de>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c9e:	d112      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x38a>
 8003ca0:	4b63      	ldr	r3, [pc, #396]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a62      	ldr	r2, [pc, #392]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003ca6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b60      	ldr	r3, [pc, #384]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cb2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a5c      	ldr	r2, [pc, #368]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e029      	b.n	8003d1a <HAL_RCC_OscConfig+0x3de>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003cce:	d112      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x3ba>
 8003cd0:	4b57      	ldr	r3, [pc, #348]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a56      	ldr	r2, [pc, #344]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a53      	ldr	r2, [pc, #332]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b51      	ldr	r3, [pc, #324]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a50      	ldr	r2, [pc, #320]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e011      	b.n	8003d1a <HAL_RCC_OscConfig+0x3de>
 8003cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	4b4b      	ldr	r3, [pc, #300]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4a      	ldr	r2, [pc, #296]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b48      	ldr	r3, [pc, #288]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a47      	ldr	r2, [pc, #284]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d014      	beq.n	8003d4c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003d22:	f7fe f9fd 	bl	8002120 <HAL_GetTick>
 8003d26:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d28:	e009      	b.n	8003d3e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2a:	f7fe f9f9 	bl	8002120 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	@ 0x64
 8003d36:	d902      	bls.n	8003d3e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	f000 bcd4 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0ef      	beq.n	8003d2a <HAL_RCC_OscConfig+0x3ee>
 8003d4a:	e013      	b.n	8003d74 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003d4c:	f7fe f9e8 	bl	8002120 <HAL_GetTick>
 8003d50:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d52:	e009      	b.n	8003d68 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fe f9e4 	bl	8002120 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	@ 0x64
 8003d60:	d902      	bls.n	8003d68 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	f000 bcbf 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d68:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ef      	bne.n	8003d54 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d05f      	beq.n	8003e40 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x456>
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d114      	bne.n	8003db6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d111      	bne.n	8003db6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f000 bca3 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b23      	ldr	r3, [pc, #140]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	4920      	ldr	r1, [pc, #128]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003db4:	e044      	b.n	8003e40 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d024      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dca:	f7fe f9a9 	bl	8002120 <HAL_GetTick>
 8003dce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd0:	e009      	b.n	8003de6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fe f9a5 	bl	8002120 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d902      	bls.n	8003de6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	f000 bc80 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de6:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ef      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003df2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	490b      	ldr	r1, [pc, #44]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	610b      	str	r3, [r1, #16]
 8003e06:	e01b      	b.n	8003e40 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003e08:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a08      	ldr	r2, [pc, #32]	@ (8003e30 <HAL_RCC_OscConfig+0x4f4>)
 8003e0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e12:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e14:	f7fe f984 	bl	8002120 <HAL_GetTick>
 8003e18:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1c:	f7fe f980 	bl	8002120 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d904      	bls.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	f000 bc5b 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
 8003e30:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e34:	4baf      	ldr	r3, [pc, #700]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ed      	bne.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80c8 	beq.w	8003fde <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e54:	4ba7      	ldr	r3, [pc, #668]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d111      	bne.n	8003e86 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4ba4      	ldr	r3, [pc, #656]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e68:	4aa2      	ldr	r2, [pc, #648]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e72:	4ba0      	ldr	r3, [pc, #640]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e86:	4b9c      	ldr	r3, [pc, #624]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d119      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e92:	4b99      	ldr	r3, [pc, #612]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	4a98      	ldr	r2, [pc, #608]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe f93f 	bl	8002120 <HAL_GetTick>
 8003ea2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ea4:	e009      	b.n	8003eba <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fe f93b 	bl	8002120 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d902      	bls.n	8003eba <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	f000 bc16 	b.w	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003eba:	4b8f      	ldr	r3, [pc, #572]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ef      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d05f      	beq.n	8003f8e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003ece:	4b89      	ldr	r3, [pc, #548]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d037      	beq.n	8003f54 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e3f4      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01b      	beq.n	8003f3e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003f06:	4b7b      	ldr	r3, [pc, #492]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f0c:	4a79      	ldr	r2, [pc, #484]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f0e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003f12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003f16:	f7fe f903 	bl	8002120 <HAL_GetTick>
 8003f1a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fe f8ff 	bl	8002120 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e3da      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f30:	4b70      	ldr	r3, [pc, #448]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ef      	bne.n	8003f1e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4969      	ldr	r1, [pc, #420]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003f54:	4b67      	ldr	r3, [pc, #412]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5a:	4a66      	ldr	r2, [pc, #408]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003f64:	f7fe f8dc 	bl	8002120 <HAL_GetTick>
 8003f68:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fe f8d8 	bl	8002120 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e3b3      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ef      	beq.n	8003f6c <HAL_RCC_OscConfig+0x630>
 8003f8c:	e01b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003f8e:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f94:	4a57      	ldr	r2, [pc, #348]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003f96:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003f9e:	f7fe f8bf 	bl	8002120 <HAL_GetTick>
 8003fa2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fe f8bb 	bl	8002120 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b05      	cmp	r3, #5
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e396      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1ef      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fc6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fce:	4b49      	ldr	r3, [pc, #292]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd4:	4a47      	ldr	r2, [pc, #284]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8111 	beq.w	800420e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff2:	4b40      	ldr	r3, [pc, #256]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8003ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d111      	bne.n	8004024 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4b3c      	ldr	r3, [pc, #240]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8004002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004006:	4a3b      	ldr	r2, [pc, #236]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8004008:	f043 0304 	orr.w	r3, r3, #4
 800400c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004010:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8004012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004024:	4b34      	ldr	r3, [pc, #208]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d118      	bne.n	8004062 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004030:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	4a30      	ldr	r2, [pc, #192]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403c:	f7fe f870 	bl	8002120 <HAL_GetTick>
 8004040:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fe f86c 	bl	8002120 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e347      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004056:	4b28      	ldr	r3, [pc, #160]	@ (80040f8 <HAL_RCC_OscConfig+0x7bc>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01f      	beq.n	80040ae <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d010      	beq.n	800409c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800407a:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 800407c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004080:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800408a:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 800408c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004090:	4a18      	ldr	r2, [pc, #96]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800409a:	e018      	b.n	80040ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800409c:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 800409e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a2:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040ac:	e00f      	b.n	80040ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040ae:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 80040b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040b4:	4a0f      	ldr	r2, [pc, #60]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 80040c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c4:	4a0b      	ldr	r2, [pc, #44]	@ (80040f4 <HAL_RCC_OscConfig+0x7b8>)
 80040c6:	f023 0304 	bic.w	r3, r3, #4
 80040ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d057      	beq.n	8004186 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80040d6:	f7fe f823 	bl	8002120 <HAL_GetTick>
 80040da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e00e      	b.n	80040fc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fe f81f 	bl	8002120 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d905      	bls.n	80040fc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e2f8      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
 80040f4:	46020c00 	.word	0x46020c00
 80040f8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fc:	4b9c      	ldr	r3, [pc, #624]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80040fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0e9      	beq.n	80040de <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01b      	beq.n	800414e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004116:	4b96      	ldr	r3, [pc, #600]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800411c:	4a94      	ldr	r2, [pc, #592]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800411e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004126:	e00a      	b.n	800413e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004128:	f7fd fffa 	bl	8002120 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e2d3      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800413e:	4b8c      	ldr	r3, [pc, #560]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ed      	beq.n	8004128 <HAL_RCC_OscConfig+0x7ec>
 800414c:	e053      	b.n	80041f6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800414e:	4b88      	ldr	r3, [pc, #544]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004154:	4a86      	ldr	r2, [pc, #536]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd ffde 	bl	8002120 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e2b7      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004176:	4b7e      	ldr	r3, [pc, #504]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800417c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ed      	bne.n	8004160 <HAL_RCC_OscConfig+0x824>
 8004184:	e037      	b.n	80041f6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004186:	f7fd ffcb 	bl	8002120 <HAL_GetTick>
 800418a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd ffc7 	bl	8002120 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e2a0      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a4:	4b72      	ldr	r3, [pc, #456]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80041a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ed      	bne.n	800418e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80041b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80041b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01a      	beq.n	80041f6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80041c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041c6:	4a6a      	ldr	r2, [pc, #424]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80041c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d2:	f7fd ffa5 	bl	8002120 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e27e      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041e8:	4b61      	ldr	r3, [pc, #388]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80041ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ed      	bne.n	80041d2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004204:	4a5a      	ldr	r2, [pc, #360]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004206:	f023 0304 	bic.w	r3, r3, #4
 800420a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d036      	beq.n	8004288 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d019      	beq.n	8004256 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004222:	4b53      	ldr	r3, [pc, #332]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004228:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800422c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800422e:	f7fd ff77 	bl	8002120 <HAL_GetTick>
 8004232:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004236:	f7fd ff73 	bl	8002120 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e24e      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004248:	4b49      	ldr	r3, [pc, #292]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x8fa>
 8004254:	e018      	b.n	8004288 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004256:	4b46      	ldr	r3, [pc, #280]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a45      	ldr	r2, [pc, #276]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800425c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004260:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004262:	f7fd ff5d 	bl	8002120 <HAL_GetTick>
 8004266:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426a:	f7fd ff59 	bl	8002120 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e234      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800427c:	4b3c      	ldr	r3, [pc, #240]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d036      	beq.n	8004302 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	2b00      	cmp	r3, #0
 800429a:	d019      	beq.n	80042d0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800429c:	4b34      	ldr	r3, [pc, #208]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a33      	ldr	r2, [pc, #204]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80042a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80042a8:	f7fd ff3a 	bl	8002120 <HAL_GetTick>
 80042ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80042b0:	f7fd ff36 	bl	8002120 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e211      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80042c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x974>
 80042ce:	e018      	b.n	8004302 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80042d0:	4b27      	ldr	r3, [pc, #156]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a26      	ldr	r2, [pc, #152]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80042d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80042dc:	f7fd ff20 	bl	8002120 <HAL_GetTick>
 80042e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80042e4:	f7fd ff1c 	bl	8002120 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1f7      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80042f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07f      	beq.n	800440e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d062      	beq.n	80043dc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004316:	4b16      	ldr	r3, [pc, #88]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800431c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004320:	6093      	str	r3, [r2, #8]
 8004322:	4b13      	ldr	r3, [pc, #76]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	4910      	ldr	r1, [pc, #64]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800433c:	d309      	bcc.n	8004352 <HAL_RCC_OscConfig+0xa16>
 800433e:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f023 021f 	bic.w	r2, r3, #31
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	4909      	ldr	r1, [pc, #36]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800434c:	4313      	orrs	r3, r2
 800434e:	60cb      	str	r3, [r1, #12]
 8004350:	e02a      	b.n	80043a8 <HAL_RCC_OscConfig+0xa6c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	2b00      	cmp	r3, #0
 8004358:	da0c      	bge.n	8004374 <HAL_RCC_OscConfig+0xa38>
 800435a:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	015b      	lsls	r3, r3, #5
 8004368:	4901      	ldr	r1, [pc, #4]	@ (8004370 <HAL_RCC_OscConfig+0xa34>)
 800436a:	4313      	orrs	r3, r2
 800436c:	60cb      	str	r3, [r1, #12]
 800436e:	e01b      	b.n	80043a8 <HAL_RCC_OscConfig+0xa6c>
 8004370:	46020c00 	.word	0x46020c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437c:	d30a      	bcc.n	8004394 <HAL_RCC_OscConfig+0xa58>
 800437e:	4ba1      	ldr	r3, [pc, #644]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	029b      	lsls	r3, r3, #10
 800438c:	499d      	ldr	r1, [pc, #628]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	60cb      	str	r3, [r1, #12]
 8004392:	e009      	b.n	80043a8 <HAL_RCC_OscConfig+0xa6c>
 8004394:	4b9b      	ldr	r3, [pc, #620]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	03db      	lsls	r3, r3, #15
 80043a2:	4998      	ldr	r1, [pc, #608]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80043a8:	4b96      	ldr	r3, [pc, #600]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a95      	ldr	r2, [pc, #596]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80043ae:	f043 0310 	orr.w	r3, r3, #16
 80043b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043b4:	f7fd feb4 	bl	8002120 <HAL_GetTick>
 80043b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80043bc:	f7fd feb0 	bl	8002120 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e18b      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80043ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xa80>
 80043da:	e018      	b.n	800440e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80043dc:	4b89      	ldr	r3, [pc, #548]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a88      	ldr	r2, [pc, #544]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80043e8:	f7fd fe9a 	bl	8002120 <HAL_GetTick>
 80043ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80043f0:	f7fd fe96 	bl	8002120 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e171      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004402:	4b80      	ldr	r3, [pc, #512]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8166 	beq.w	80046e4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800441e:	4b79      	ldr	r3, [pc, #484]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b0c      	cmp	r3, #12
 8004428:	f000 80f2 	beq.w	8004610 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	2b02      	cmp	r3, #2
 8004432:	f040 80c5 	bne.w	80045c0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004436:	4b73      	ldr	r3, [pc, #460]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a72      	ldr	r2, [pc, #456]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 800443c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004440:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004442:	f7fd fe6d 	bl	8002120 <HAL_GetTick>
 8004446:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444a:	f7fd fe69 	bl	8002120 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e144      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800445c:	4b69      	ldr	r3, [pc, #420]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004468:	4b66      	ldr	r3, [pc, #408]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d111      	bne.n	800449a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b63      	ldr	r3, [pc, #396]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447c:	4a61      	ldr	r2, [pc, #388]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 800447e:	f043 0304 	orr.w	r3, r3, #4
 8004482:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004486:	4b5f      	ldr	r3, [pc, #380]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800449a:	4b5b      	ldr	r3, [pc, #364]	@ (8004608 <HAL_RCC_OscConfig+0xccc>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044a6:	d102      	bne.n	80044ae <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80044ae:	4b56      	ldr	r3, [pc, #344]	@ (8004608 <HAL_RCC_OscConfig+0xccc>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4a55      	ldr	r2, [pc, #340]	@ (8004608 <HAL_RCC_OscConfig+0xccc>)
 80044b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80044ba:	4b52      	ldr	r3, [pc, #328]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044ce:	3a01      	subs	r2, #1
 80044d0:	0212      	lsls	r2, r2, #8
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80044d8:	430a      	orrs	r2, r1
 80044da:	494a      	ldr	r1, [pc, #296]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	628b      	str	r3, [r1, #40]	@ 0x28
 80044e0:	4b48      	ldr	r3, [pc, #288]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80044e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044e4:	4b49      	ldr	r3, [pc, #292]	@ (800460c <HAL_RCC_OscConfig+0xcd0>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044ec:	3a01      	subs	r2, #1
 80044ee:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044f6:	3a01      	subs	r2, #1
 80044f8:	0252      	lsls	r2, r2, #9
 80044fa:	b292      	uxth	r2, r2
 80044fc:	4311      	orrs	r1, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004502:	3a01      	subs	r2, #1
 8004504:	0412      	lsls	r2, r2, #16
 8004506:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800450a:	4311      	orrs	r1, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004510:	3a01      	subs	r2, #1
 8004512:	0612      	lsls	r2, r2, #24
 8004514:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004518:	430a      	orrs	r2, r1
 800451a:	493a      	ldr	r1, [pc, #232]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 800451c:	4313      	orrs	r3, r2
 800451e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004520:	4b38      	ldr	r3, [pc, #224]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	4a37      	ldr	r2, [pc, #220]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	4a34      	ldr	r2, [pc, #208]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004536:	4b33      	ldr	r3, [pc, #204]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	4a32      	ldr	r2, [pc, #200]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 800453c:	f043 0310 	orr.w	r3, r3, #16
 8004540:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004542:	4b30      	ldr	r3, [pc, #192]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	f023 020c 	bic.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	492d      	ldr	r1, [pc, #180]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004554:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800455c:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_RCC_OscConfig+0xccc>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a29      	ldr	r2, [pc, #164]	@ (8004608 <HAL_RCC_OscConfig+0xccc>)
 8004562:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004566:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004568:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800456c:	2b01      	cmp	r3, #1
 800456e:	d107      	bne.n	8004580 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b24      	ldr	r3, [pc, #144]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004576:	4a23      	ldr	r2, [pc, #140]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004578:	f023 0304 	bic.w	r3, r3, #4
 800457c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004580:	4b20      	ldr	r3, [pc, #128]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 8004586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800458a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800458c:	f7fd fdc8 	bl	8002120 <HAL_GetTick>
 8004590:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004594:	f7fd fdc4 	bl	8002120 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e09f      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80045a6:	4b17      	ldr	r3, [pc, #92]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045b2:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	4a13      	ldr	r2, [pc, #76]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045bc:	6293      	str	r3, [r2, #40]	@ 0x28
 80045be:	e091      	b.n	80046e4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80045c0:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045cc:	f7fd fda8 	bl	8002120 <HAL_GetTick>
 80045d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fd fda4 	bl	8002120 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e07f      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80045e6:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80045f2:	4b04      	ldr	r3, [pc, #16]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	4a03      	ldr	r2, [pc, #12]	@ (8004604 <HAL_RCC_OscConfig+0xcc8>)
 80045f8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80045fc:	f023 0303 	bic.w	r3, r3, #3
 8004600:	6293      	str	r3, [r2, #40]	@ 0x28
 8004602:	e06f      	b.n	80046e4 <HAL_RCC_OscConfig+0xda8>
 8004604:	46020c00 	.word	0x46020c00
 8004608:	46020800 	.word	0x46020800
 800460c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004610:	4b37      	ldr	r3, [pc, #220]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 8004612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004614:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004616:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 8004618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	2b01      	cmp	r3, #1
 8004622:	d039      	beq.n	8004698 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0203 	and.w	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d132      	bne.n	8004698 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d129      	bne.n	8004698 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d122      	bne.n	8004698 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d11a      	bne.n	8004698 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	0a5b      	lsrs	r3, r3, #9
 8004666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d111      	bne.n	8004698 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004680:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d108      	bne.n	8004698 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e024      	b.n	80046e6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d01a      	beq.n	80046e4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80046ae:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	4a0f      	ldr	r2, [pc, #60]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fd fd31 	bl	8002120 <HAL_GetTick>
 80046be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80046c0:	bf00      	nop
 80046c2:	f7fd fd2d 	bl	8002120 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d0f9      	beq.n	80046c2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d2:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	4a04      	ldr	r2, [pc, #16]	@ (80046f0 <HAL_RCC_OscConfig+0xdb4>)
 80046de:	f043 0310 	orr.w	r3, r3, #16
 80046e2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3738      	adds	r7, #56	@ 0x38
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	46020c00 	.word	0x46020c00

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e1d9      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b9b      	ldr	r3, [pc, #620]	@ (8004978 <HAL_RCC_ClockConfig+0x284>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d910      	bls.n	8004738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b98      	ldr	r3, [pc, #608]	@ (8004978 <HAL_RCC_ClockConfig+0x284>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 020f 	bic.w	r2, r3, #15
 800471e:	4996      	ldr	r1, [pc, #600]	@ (8004978 <HAL_RCC_ClockConfig+0x284>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b94      	ldr	r3, [pc, #592]	@ (8004978 <HAL_RCC_ClockConfig+0x284>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e1c1      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	d010      	beq.n	8004766 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	4b8c      	ldr	r3, [pc, #560]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004750:	429a      	cmp	r2, r3
 8004752:	d908      	bls.n	8004766 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004754:	4b89      	ldr	r3, [pc, #548]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	4986      	ldr	r1, [pc, #536]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004762:	4313      	orrs	r3, r2
 8004764:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d012      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	4b81      	ldr	r3, [pc, #516]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004780:	429a      	cmp	r2, r3
 8004782:	d909      	bls.n	8004798 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004784:	4b7d      	ldr	r3, [pc, #500]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	497a      	ldr	r1, [pc, #488]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004794:	4313      	orrs	r3, r2
 8004796:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d010      	beq.n	80047c6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	4b74      	ldr	r3, [pc, #464]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d908      	bls.n	80047c6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80047b4:	4b71      	ldr	r3, [pc, #452]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	496e      	ldr	r1, [pc, #440]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d010      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	4b69      	ldr	r3, [pc, #420]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	429a      	cmp	r2, r3
 80047e0:	d908      	bls.n	80047f4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047e2:	4b66      	ldr	r3, [pc, #408]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 020f 	bic.w	r2, r3, #15
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4963      	ldr	r1, [pc, #396]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80d2 	beq.w	80049a6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d143      	bne.n	8004896 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480e:	4b5b      	ldr	r3, [pc, #364]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d110      	bne.n	800483e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800481c:	4b57      	ldr	r3, [pc, #348]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004822:	4a56      	ldr	r2, [pc, #344]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800482c:	4b53      	ldr	r3, [pc, #332]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 800482e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800483e:	f7fd fc6f 	bl	8002120 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004844:	4b4e      	ldr	r3, [pc, #312]	@ (8004980 <HAL_RCC_ClockConfig+0x28c>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004852:	f7fd fc65 	bl	8002120 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e12b      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004864:	4b46      	ldr	r3, [pc, #280]	@ (8004980 <HAL_RCC_ClockConfig+0x28c>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b41      	ldr	r3, [pc, #260]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800487c:	4a3f      	ldr	r2, [pc, #252]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004886:	4b3d      	ldr	r3, [pc, #244]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d121      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e112      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489e:	4b37      	ldr	r3, [pc, #220]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d115      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e106      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80048b6:	4b31      	ldr	r3, [pc, #196]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0fa      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c6:	4b2d      	ldr	r3, [pc, #180]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0f2      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b29      	ldr	r3, [pc, #164]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4926      	ldr	r1, [pc, #152]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80048e8:	f7fd fc1a 	bl	8002120 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d112      	bne.n	800491c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fd fc12 	bl	8002120 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0d6      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800490e:	4b1b      	ldr	r3, [pc, #108]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d1ee      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x204>
 800491a:	e044      	b.n	80049a6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d112      	bne.n	800494a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004924:	e00a      	b.n	800493c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004926:	f7fd fbfb 	bl	8002120 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0bf      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800493c:	4b0f      	ldr	r3, [pc, #60]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d1ee      	bne.n	8004926 <HAL_RCC_ClockConfig+0x232>
 8004948:	e02d      	b.n	80049a6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d123      	bne.n	800499a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fd fbe4 	bl	8002120 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e0a8      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800496a:	4b04      	ldr	r3, [pc, #16]	@ (800497c <HAL_RCC_ClockConfig+0x288>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ee      	bne.n	8004954 <HAL_RCC_ClockConfig+0x260>
 8004976:	e016      	b.n	80049a6 <HAL_RCC_ClockConfig+0x2b2>
 8004978:	40022000 	.word	0x40022000
 800497c:	46020c00 	.word	0x46020c00
 8004980:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fd fbcc 	bl	8002120 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e090      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800499a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d1ee      	bne.n	8004984 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b43      	ldr	r3, [pc, #268]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	429a      	cmp	r2, r3
 80049c0:	d208      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80049c2:	4b40      	ldr	r3, [pc, #256]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 020f 	bic.w	r2, r3, #15
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	493d      	ldr	r1, [pc, #244]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac8 <HAL_RCC_ClockConfig+0x3d4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d210      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <HAL_RCC_ClockConfig+0x3d4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 020f 	bic.w	r2, r3, #15
 80049ea:	4937      	ldr	r1, [pc, #220]	@ (8004ac8 <HAL_RCC_ClockConfig+0x3d4>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b35      	ldr	r3, [pc, #212]	@ (8004ac8 <HAL_RCC_ClockConfig+0x3d4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e05b      	b.n	8004abc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d208      	bcs.n	8004a32 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004a20:	4b28      	ldr	r3, [pc, #160]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4925      	ldr	r1, [pc, #148]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	4b20      	ldr	r3, [pc, #128]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d209      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004a50:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	4919      	ldr	r1, [pc, #100]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	4b13      	ldr	r3, [pc, #76]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d208      	bcs.n	8004a92 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004a80:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	490d      	ldr	r1, [pc, #52]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <HAL_RCC_ClockConfig+0x3d0>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	490a      	ldr	r1, [pc, #40]	@ (8004acc <HAL_RCC_ClockConfig+0x3d8>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	4a09      	ldr	r2, [pc, #36]	@ (8004ad0 <HAL_RCC_ClockConfig+0x3dc>)
 8004aaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCC_ClockConfig+0x3e0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fd faab 	bl	800200c <HAL_InitTick>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]

  return status;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	46020c00 	.word	0x46020c00
 8004ac8:	40022000 	.word	0x40022000
 8004acc:	0800a0ac 	.word	0x0800a0ac
 8004ad0:	20000004 	.word	0x20000004
 8004ad4:	20000008 	.word	0x20000008

08004ad8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b08b      	sub	sp, #44	@ 0x2c
 8004adc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae6:	4b78      	ldr	r3, [pc, #480]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af0:	4b75      	ldr	r3, [pc, #468]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x34>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d121      	bne.n	8004b4a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d11e      	bne.n	8004b4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004b0c:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004b18:	4b6b      	ldr	r3, [pc, #428]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b1e:	0b1b      	lsrs	r3, r3, #12
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b26:	e005      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004b28:	4b67      	ldr	r3, [pc, #412]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	0f1b      	lsrs	r3, r3, #28
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b34:	4a65      	ldr	r2, [pc, #404]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d110      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b48:	e00d      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d102      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b56:	4b5e      	ldr	r3, [pc, #376]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	e004      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b62:	4b5b      	ldr	r3, [pc, #364]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004b64:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	f040 80a5 	bne.w	8004cb8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004b6e:	4b56      	ldr	r3, [pc, #344]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004b78:	4b53      	ldr	r3, [pc, #332]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004b86:	4b50      	ldr	r3, [pc, #320]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b92:	4b4d      	ldr	r3, [pc, #308]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	08db      	lsrs	r3, r3, #3
 8004b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0xe4>
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d022      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x128>
 8004bba:	e043      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004cd4 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bde:	ed97 6a01 	vldr	s12, [r7, #4]
 8004be2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004cd8 <HAL_RCC_GetSysClockFreq+0x200>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfe:	e046      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004cd4 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c22:	ed97 6a01 	vldr	s12, [r7, #4]
 8004c26:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004cd8 <HAL_RCC_GetSysClockFreq+0x200>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c42:	e024      	b.n	8004c8e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c6c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004c70:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004cd8 <HAL_RCC_GetSysClockFreq+0x200>
 8004c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004c7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c8c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c92:	0e1b      	lsrs	r3, r3, #24
 8004c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c98:	3301      	adds	r3, #1
 8004c9a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb2:	ee17 3a90 	vmov	r3, s15
 8004cb6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	372c      	adds	r7, #44	@ 0x2c
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	46020c00 	.word	0x46020c00
 8004ccc:	0800a0c4 	.word	0x0800a0c4
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	4b742400 	.word	0x4b742400
 8004cd8:	46000000 	.word	0x46000000

08004cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ce0:	f7ff fefa 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <HAL_RCC_GetHCLKFreq+0x28>)
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	4906      	ldr	r1, [pc, #24]	@ (8004d08 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004cf0:	5ccb      	ldrb	r3, [r1, r3]
 8004cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf6:	4a05      	ldr	r2, [pc, #20]	@ (8004d0c <HAL_RCC_GetHCLKFreq+0x30>)
 8004cf8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004cfa:	4b04      	ldr	r3, [pc, #16]	@ (8004d0c <HAL_RCC_GetHCLKFreq+0x30>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	46020c00 	.word	0x46020c00
 8004d08:	0800a0ac 	.word	0x0800a0ac
 8004d0c:	20000004 	.word	0x20000004

08004d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004d14:	f7ff ffe2 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	091b      	lsrs	r3, r3, #4
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4903      	ldr	r1, [pc, #12]	@ (8004d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d26:	5ccb      	ldrb	r3, [r1, r3]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	46020c00 	.word	0x46020c00
 8004d34:	0800a0bc 	.word	0x0800a0bc

08004d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004d3c:	f7ff ffce 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4903      	ldr	r1, [pc, #12]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	46020c00 	.word	0x46020c00
 8004d5c:	0800a0bc 	.word	0x0800a0bc

08004d60 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004d64:	f7ff ffba 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	@ (8004d84 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	46020c00 	.word	0x46020c00
 8004d84:	0800a0bc 	.word	0x0800a0bc

08004d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d90:	4b3e      	ldr	r3, [pc, #248]	@ (8004e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d9e:	f7fe fd8f 	bl	80038c0 <HAL_PWREx_GetVoltageRange>
 8004da2:	6178      	str	r0, [r7, #20]
 8004da4:	e019      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	4b39      	ldr	r3, [pc, #228]	@ (8004e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dac:	4a37      	ldr	r2, [pc, #220]	@ (8004e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004db6:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dc4:	f7fe fd7c 	bl	80038c0 <HAL_PWREx_GetVoltageRange>
 8004dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dca:	4b30      	ldr	r3, [pc, #192]	@ (8004e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004dd2:	f023 0304 	bic.w	r3, r3, #4
 8004dd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004de0:	d003      	beq.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004de8:	d109      	bne.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df0:	d202      	bcs.n	8004df8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004df2:	2301      	movs	r3, #1
 8004df4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004df6:	e033      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004dfc:	e030      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e04:	d208      	bcs.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0c:	d102      	bne.n	8004e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004e0e:	2303      	movs	r3, #3
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	e025      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e035      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e1e:	d90f      	bls.n	8004e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e2c:	d902      	bls.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	e015      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004e34:	2301      	movs	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	e012      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e00f      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e46:	d109      	bne.n	8004e5c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e4e:	d102      	bne.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004e50:	2301      	movs	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e004      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004e56:	2302      	movs	r3, #2
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e001      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 020f 	bic.w	r2, r3, #15
 8004e68:	4909      	ldr	r1, [pc, #36]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004e70:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d001      	beq.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	46020c00 	.word	0x46020c00
 8004e90:	40022000 	.word	0x40022000

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e98:	b0ba      	sub	sp, #232	@ 0xe8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f002 0401 	and.w	r4, r2, #1
 8004eb8:	2500      	movs	r5, #0
 8004eba:	ea54 0305 	orrs.w	r3, r4, r5
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004ec0:	4bcb      	ldr	r3, [pc, #812]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ec6:	f023 0103 	bic.w	r1, r3, #3
 8004eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed0:	4ac7      	ldr	r2, [pc, #796]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f002 0802 	and.w	r8, r2, #2
 8004ee4:	f04f 0900 	mov.w	r9, #0
 8004ee8:	ea58 0309 	orrs.w	r3, r8, r9
 8004eec:	d00b      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004eee:	4bc0      	ldr	r3, [pc, #768]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ef4:	f023 010c 	bic.w	r1, r3, #12
 8004ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efe:	4abc      	ldr	r2, [pc, #752]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f002 0a04 	and.w	sl, r2, #4
 8004f12:	f04f 0b00 	mov.w	fp, #0
 8004f16:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f1a:	d00b      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004f1c:	4bb4      	ldr	r3, [pc, #720]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f22:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	4ab0      	ldr	r2, [pc, #704]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f002 0308 	and.w	r3, r2, #8
 8004f40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004f54:	4ba6      	ldr	r3, [pc, #664]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f64:	4aa2      	ldr	r2, [pc, #648]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f002 0310 	and.w	r3, r2, #16
 8004f78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004f8c:	4b98      	ldr	r3, [pc, #608]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9c:	4a94      	ldr	r2, [pc, #592]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f002 0320 	and.w	r3, r2, #32
 8004fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004fba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004fc4:	4b8a      	ldr	r3, [pc, #552]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fca:	f023 0107 	bic.w	r1, r3, #7
 8004fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd4:	4a86      	ldr	r2, [pc, #536]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fec:	2300      	movs	r3, #0
 8004fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ff2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	d00b      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004ffc:	4b7c      	ldr	r3, [pc, #496]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005002:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800500a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500c:	4a78      	ldr	r2, [pc, #480]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800500e:	430b      	orrs	r3, r1
 8005010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005024:	2300      	movs	r3, #0
 8005026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800502a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800502e:	460b      	mov	r3, r1
 8005030:	4313      	orrs	r3, r2
 8005032:	d00b      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005034:	4b6e      	ldr	r3, [pc, #440]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800503a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800503e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005044:	4a6a      	ldr	r2, [pc, #424]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005046:	430b      	orrs	r3, r1
 8005048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800504c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005058:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005062:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005066:	460b      	mov	r3, r1
 8005068:	4313      	orrs	r3, r2
 800506a:	d00b      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800506c:	4b60      	ldr	r3, [pc, #384]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800506e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	4a5c      	ldr	r2, [pc, #368]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800507e:	430b      	orrs	r3, r1
 8005080:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005094:	2300      	movs	r3, #0
 8005096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800509a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800509e:	460b      	mov	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	d00b      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80050a4:	4b52      	ldr	r3, [pc, #328]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050aa:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80050ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b4:	4a4e      	ldr	r2, [pc, #312]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80050c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	d00b      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80050dc:	4b44      	ldr	r3, [pc, #272]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050e2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80050e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ec:	4a40      	ldr	r2, [pc, #256]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005104:	2300      	movs	r3, #0
 8005106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800510a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d00b      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005114:	4b36      	ldr	r3, [pc, #216]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800511a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800511e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005124:	4a32      	ldr	r2, [pc, #200]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005126:	430b      	orrs	r3, r1
 8005128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800512c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005142:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005146:	460b      	mov	r3, r1
 8005148:	4313      	orrs	r3, r2
 800514a:	d00c      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800514c:	4b28      	ldr	r3, [pc, #160]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800514e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005152:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515e:	4a24      	ldr	r2, [pc, #144]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005160:	430b      	orrs	r3, r1
 8005162:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005172:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005174:	2300      	movs	r3, #0
 8005176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005178:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800517c:	460b      	mov	r3, r1
 800517e:	4313      	orrs	r3, r2
 8005180:	d04f      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	2b80      	cmp	r3, #128	@ 0x80
 800518c:	d02d      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x356>
 800518e:	2b80      	cmp	r3, #128	@ 0x80
 8005190:	d827      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005192:	2b60      	cmp	r3, #96	@ 0x60
 8005194:	d02e      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005196:	2b60      	cmp	r3, #96	@ 0x60
 8005198:	d823      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800519a:	2b40      	cmp	r3, #64	@ 0x40
 800519c:	d006      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x318>
 800519e:	2b40      	cmp	r3, #64	@ 0x40
 80051a0:	d81f      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x326>
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d011      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80051aa:	e01a      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051ac:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	4a0f      	ldr	r2, [pc, #60]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051b6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051b8:	e01d      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051be:	3308      	adds	r3, #8
 80051c0:	4618      	mov	r0, r3
 80051c2:	f002 fa17 	bl	80075f4 <RCCEx_PLL2_Config>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051cc:	e013      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051d2:	332c      	adds	r3, #44	@ 0x2c
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 faa5 	bl	8007724 <RCCEx_PLL3_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051e0:	e009      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051e8:	e005      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80051ea:	bf00      	nop
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80051ee:	bf00      	nop
 80051f0:	46020c00 	.word	0x46020c00
        break;
 80051f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80051fe:	4bb6      	ldr	r3, [pc, #728]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005204:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005210:	4ab1      	ldr	r2, [pc, #708]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005212:	430b      	orrs	r3, r1
 8005214:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005218:	e003      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800521e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800522e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005230:	2300      	movs	r3, #0
 8005232:	677b      	str	r3, [r7, #116]	@ 0x74
 8005234:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d053      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800523e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524a:	d033      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005250:	d82c      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005256:	d02f      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525c:	d826      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 800525e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005262:	d008      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005268:	d820      	bhi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800526e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005272:	d011      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005274:	e01a      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005276:	4b98      	ldr	r3, [pc, #608]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	4a97      	ldr	r2, [pc, #604]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005280:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005282:	e01a      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005284:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005288:	3308      	adds	r3, #8
 800528a:	4618      	mov	r0, r3
 800528c:	f002 f9b2 	bl	80075f4 <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005296:	e010      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529c:	332c      	adds	r3, #44	@ 0x2c
 800529e:	4618      	mov	r0, r3
 80052a0:	f002 fa40 	bl	8007724 <RCCEx_PLL3_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052aa:	e006      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052b2:	e002      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80052b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10d      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80052c2:	4b85      	ldr	r3, [pc, #532]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80052c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052c8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80052cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d4:	4a80      	ldr	r2, [pc, #512]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80052d6:	430b      	orrs	r3, r1
 80052d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80052dc:	e003      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052e2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80052e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80052f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f4:	2300      	movs	r3, #0
 80052f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80052fc:	460b      	mov	r3, r1
 80052fe:	4313      	orrs	r3, r2
 8005300:	d046      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800530a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800530e:	d028      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005310:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005314:	d821      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531a:	d022      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800531c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005320:	d81b      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005322:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005326:	d01c      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005328:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800532c:	d815      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800532e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005332:	d008      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005338:	d80f      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d011      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005342:	d00e      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005344:	e009      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800534a:	3308      	adds	r3, #8
 800534c:	4618      	mov	r0, r3
 800534e:	f002 f951 	bl	80075f4 <RCCEx_PLL2_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005358:	e004      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005364:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10d      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800536c:	4b5a      	ldr	r3, [pc, #360]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800536e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005372:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800537a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800537e:	4a56      	ldr	r2, [pc, #344]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005380:	430b      	orrs	r3, r1
 8005382:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005386:	e003      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800538c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800539c:	663b      	str	r3, [r7, #96]	@ 0x60
 800539e:	2300      	movs	r3, #0
 80053a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80053a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d03f      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80053ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d81e      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053ff 	.word	0x080053ff
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053e3 	.word	0x080053e3
 80053cc:	080053ff 	.word	0x080053ff
 80053d0:	080053ff 	.word	0x080053ff
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053d4:	4b40      	ldr	r3, [pc, #256]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d8:	4a3f      	ldr	r2, [pc, #252]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80053da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053de:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80053e0:	e00e      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e6:	332c      	adds	r3, #44	@ 0x2c
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 f99b 	bl	8007724 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053f4:	e004      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053fc:	e000      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80053fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005400:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005408:	4b33      	ldr	r3, [pc, #204]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800540a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800540e:	f023 0107 	bic.w	r1, r3, #7
 8005412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541a:	4a2f      	ldr	r2, [pc, #188]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800541c:	430b      	orrs	r3, r1
 800541e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005428:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800542c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005438:	65bb      	str	r3, [r7, #88]	@ 0x58
 800543a:	2300      	movs	r3, #0
 800543c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800543e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d04d      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005450:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005454:	d028      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005456:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800545a:	d821      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800545c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005460:	d024      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005462:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005466:	d81b      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800546c:	d00e      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800546e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005472:	d815      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547c:	d110      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800547e:	4b16      	ldr	r3, [pc, #88]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005482:	4a15      	ldr	r2, [pc, #84]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005488:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800548a:	e012      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800548c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005490:	332c      	adds	r3, #44	@ 0x2c
 8005492:	4618      	mov	r0, r3
 8005494:	f002 f946 	bl	8007724 <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800549e:	e008      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054a6:	e004      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80054a8:	bf00      	nop
 80054aa:	e002      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80054b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d110      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80054ba:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80054bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80054c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054cc:	4a02      	ldr	r2, [pc, #8]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80054ce:	430b      	orrs	r3, r1
 80054d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80054d6:	bf00      	nop
 80054d8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80054f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80054f2:	2300      	movs	r3, #0
 80054f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80054f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f000 80b5 	beq.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005502:	2300      	movs	r3, #0
 8005504:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005508:	4b9d      	ldr	r3, [pc, #628]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800550a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d113      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005516:	4b9a      	ldr	r3, [pc, #616]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800551c:	4a98      	ldr	r2, [pc, #608]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005526:	4b96      	ldr	r3, [pc, #600]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800553e:	4b91      	ldr	r3, [pc, #580]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	4a90      	ldr	r2, [pc, #576]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800554a:	f7fc fde9 	bl	8002120 <HAL_GetTick>
 800554e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005552:	e00b      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005554:	f7fc fde4 	bl	8002120 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d903      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800556a:	e005      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800556c:	4b85      	ldr	r3, [pc, #532]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0ed      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005578:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d165      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005580:	4b7f      	ldr	r3, [pc, #508]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d023      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800559a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01b      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a6:	4b76      	ldr	r3, [pc, #472]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b4:	4b72      	ldr	r3, [pc, #456]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ba:	4a71      	ldr	r2, [pc, #452]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c4:	4b6e      	ldr	r3, [pc, #440]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ca:	4a6d      	ldr	r2, [pc, #436]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d019      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fc fd99 	bl	8002120 <HAL_GetTick>
 80055ee:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f2:	e00d      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f4:	f7fc fd94 	bl	8002120 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800560e:	e006      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005610:	4b5b      	ldr	r3, [pc, #364]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ea      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800561e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10d      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005626:	4b56      	ldr	r3, [pc, #344]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800562c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005634:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005638:	4a51      	ldr	r2, [pc, #324]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800563a:	430b      	orrs	r3, r1
 800563c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005640:	e008      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005642:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005646:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800564a:	e003      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005650:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005654:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565c:	4b48      	ldr	r3, [pc, #288]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005662:	4a47      	ldr	r2, [pc, #284]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800566c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800567a:	2300      	movs	r3, #0
 800567c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005682:	460b      	mov	r3, r1
 8005684:	4313      	orrs	r3, r2
 8005686:	d042      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800568c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005690:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005694:	d022      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005696:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800569a:	d81b      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800569c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056a0:	d011      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80056a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056a6:	d815      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d019      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80056ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056b0:	d110      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056b6:	3308      	adds	r3, #8
 80056b8:	4618      	mov	r0, r3
 80056ba:	f001 ff9b 	bl	80075f4 <RCCEx_PLL2_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056c4:	e00d      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80056d2:	e006      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056da:	e002      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80056dc:	bf00      	nop
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80056e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80056ea:	4b25      	ldr	r3, [pc, #148]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056f0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80056f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056fc:	4a20      	ldr	r2, [pc, #128]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80056fe:	430b      	orrs	r3, r1
 8005700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005704:	e003      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800570a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800570e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800571a:	643b      	str	r3, [r7, #64]	@ 0x40
 800571c:	2300      	movs	r3, #0
 800571e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005720:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005724:	460b      	mov	r3, r1
 8005726:	4313      	orrs	r3, r2
 8005728:	d032      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005736:	d00b      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800573c:	d804      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005746:	d007      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800574e:	e004      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005750:	bf00      	nop
 8005752:	e002      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005758:	bf00      	nop
    }
    if (ret == HAL_OK)
 800575a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d112      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005762:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005764:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005768:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800576c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005770:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005774:	4a02      	ldr	r2, [pc, #8]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005776:	430b      	orrs	r3, r1
 8005778:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800577c:	e008      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800577e:	bf00      	nop
 8005780:	46020c00 	.word	0x46020c00
 8005784:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800578c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800579c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800579e:	2300      	movs	r3, #0
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d00c      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80057ac:	4b98      	ldr	r3, [pc, #608]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057b2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80057b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057be:	4a94      	ldr	r2, [pc, #592]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057c0:	430b      	orrs	r3, r1
 80057c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80057c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d4:	2300      	movs	r3, #0
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d019      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80057e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057f0:	4b87      	ldr	r3, [pc, #540]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	4a86      	ldr	r2, [pc, #536]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fa:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80057fc:	4b84      	ldr	r3, [pc, #528]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005802:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800580a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800580e:	4a80      	ldr	r2, [pc, #512]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005810:	430b      	orrs	r3, r1
 8005812:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005824:	2300      	movs	r3, #0
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800582c:	460b      	mov	r3, r1
 800582e:	4313      	orrs	r3, r2
 8005830:	d00c      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005832:	4b77      	ldr	r3, [pc, #476]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005838:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800583c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005840:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005844:	4972      	ldr	r1, [pc, #456]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800584c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005858:	623b      	str	r3, [r7, #32]
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
 800585e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d00c      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005868:	4b69      	ldr	r3, [pc, #420]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800586a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800586e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005876:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800587a:	4965      	ldr	r1, [pc, #404]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005898:	460b      	mov	r3, r1
 800589a:	4313      	orrs	r3, r2
 800589c:	d00c      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800589e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058a4:	f023 0218 	bic.w	r2, r3, #24
 80058a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058b0:	4957      	ldr	r1, [pc, #348]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d032      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80058d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058e0:	d105      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80058e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ec:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80058ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058fa:	d108      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005900:	3308      	adds	r3, #8
 8005902:	4618      	mov	r0, r3
 8005904:	f001 fe76 	bl	80075f4 <RCCEx_PLL2_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800590e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005916:	4b3e      	ldr	r3, [pc, #248]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005918:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800591c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005928:	4939      	ldr	r1, [pc, #228]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005930:	e003      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005936:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800593a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d03a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800595a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800595e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005962:	d00e      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005968:	d815      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d017      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800596e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005972:	d110      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005974:	4b26      	ldr	r3, [pc, #152]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	4a25      	ldr	r2, [pc, #148]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800597a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800597e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005980:	e00e      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005986:	3308      	adds	r3, #8
 8005988:	4618      	mov	r0, r3
 800598a:	f001 fe33 	bl	80075f4 <RCCEx_PLL2_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005994:	e004      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800599e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80059a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10d      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80059a8:	4b19      	ldr	r3, [pc, #100]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80059b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ba:	4915      	ldr	r1, [pc, #84]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80059c2:	e003      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80059cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	2300      	movs	r3, #0
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d00c      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80059e8:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059ee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80059f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059fa:	4905      	ldr	r1, [pc, #20]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005a02:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	37e8      	adds	r7, #232	@ 0xe8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a10:	46020c00 	.word	0x46020c00

08005a14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b089      	sub	sp, #36	@ 0x24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005a1c:	4ba6      	ldr	r3, [pc, #664]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a24:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005a26:	4ba4      	ldr	r3, [pc, #656]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005a30:	4ba1      	ldr	r3, [pc, #644]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005a3e:	4b9e      	ldr	r3, [pc, #632]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	091b      	lsrs	r3, r3, #4
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a4a:	4b9b      	ldr	r3, [pc, #620]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	08db      	lsrs	r3, r3, #3
 8005a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a62:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d062      	beq.n	8005b32 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	f200 8081 	bhi.w	8005b76 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d024      	beq.n	8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d17a      	bne.n	8005b76 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	4b89      	ldr	r3, [pc, #548]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aa6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ac2:	e08f      	b.n	8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005ac4:	4b7c      	ldr	r3, [pc, #496]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005ad0:	4b79      	ldr	r3, [pc, #484]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	0f1b      	lsrs	r3, r3, #28
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	e006      	b.n	8005aea <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005adc:	4b76      	ldr	r3, [pc, #472]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	0f1b      	lsrs	r3, r3, #28
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	4a76      	ldr	r2, [pc, #472]	@ (8005cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	ee07 3a90 	vmov	s15, r3
 8005b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b10:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b14:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b30:	e058      	b.n	8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	ee07 3a90 	vmov	s15, r3
 8005b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b44:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4c:	ee07 3a90 	vmov	s15, r3
 8005b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b54:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b58:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b74:	e036      	b.n	8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005b76:	4b50      	ldr	r3, [pc, #320]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005b82:	4b4d      	ldr	r3, [pc, #308]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	0f1b      	lsrs	r3, r3, #28
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	e006      	b.n	8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	0f1b      	lsrs	r3, r3, #28
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	4a49      	ldr	r2, [pc, #292]	@ (8005cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bc6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005be2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005be4:	4b34      	ldr	r3, [pc, #208]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d017      	beq.n	8005c20 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005bf0:	4b31      	ldr	r3, [pc, #196]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf4:	0a5b      	lsrs	r3, r3, #9
 8005bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c06:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c16:	ee17 2a90 	vmov	r2, s15
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005c26:	4b24      	ldr	r3, [pc, #144]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d017      	beq.n	8005c62 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c32:	4b21      	ldr	r3, [pc, #132]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c48:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c58:	ee17 2a90 	vmov	r2, s15
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]
 8005c60:	e002      	b.n	8005c68 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d017      	beq.n	8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c74:	4b10      	ldr	r3, [pc, #64]	@ (8005cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	0e1b      	lsrs	r3, r3, #24
 8005c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c9a:	ee17 2a90 	vmov	r2, s15
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005ca2:	e002      	b.n	8005caa <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]
}
 8005caa:	bf00      	nop
 8005cac:	3724      	adds	r7, #36	@ 0x24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	46020c00 	.word	0x46020c00
 8005cbc:	4b742400 	.word	0x4b742400
 8005cc0:	46000000 	.word	0x46000000
 8005cc4:	0800a0c4 	.word	0x0800a0c4

08005cc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b089      	sub	sp, #36	@ 0x24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005cd0:	4ba6      	ldr	r3, [pc, #664]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005cda:	4ba4      	ldr	r3, [pc, #656]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005ce4:	4ba1      	ldr	r3, [pc, #644]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	3301      	adds	r3, #1
 8005cf0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005cf2:	4b9e      	ldr	r3, [pc, #632]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005cfe:	4b9b      	ldr	r3, [pc, #620]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	08db      	lsrs	r3, r3, #3
 8005d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d062      	beq.n	8005de6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	f200 8081 	bhi.w	8005e2a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d024      	beq.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d17a      	bne.n	8005e2a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b89      	ldr	r3, [pc, #548]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d5a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d76:	e08f      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005d78:	4b7c      	ldr	r3, [pc, #496]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005d84:	4b79      	ldr	r3, [pc, #484]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	0f1b      	lsrs	r3, r3, #28
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	e006      	b.n	8005d9e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005d90:	4b76      	ldr	r3, [pc, #472]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	0f1b      	lsrs	r3, r3, #28
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	4a76      	ldr	r2, [pc, #472]	@ (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da4:	ee07 3a90 	vmov	s15, r3
 8005da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dc8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005de4:	e058      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e08:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e0c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e28:	e036      	b.n	8005e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005e2a:	4b50      	ldr	r3, [pc, #320]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005e36:	4b4d      	ldr	r3, [pc, #308]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	0f1b      	lsrs	r3, r3, #28
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	e006      	b.n	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005e42:	4b4a      	ldr	r3, [pc, #296]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	0f1b      	lsrs	r3, r3, #28
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	4a49      	ldr	r2, [pc, #292]	@ (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e96:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005e98:	4b34      	ldr	r3, [pc, #208]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d017      	beq.n	8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ea4:	4b31      	ldr	r3, [pc, #196]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	0a5b      	lsrs	r3, r3, #9
 8005eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eca:	ee17 2a90 	vmov	r2, s15
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e002      	b.n	8005eda <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005eda:	4b24      	ldr	r3, [pc, #144]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d017      	beq.n	8005f16 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ee6:	4b21      	ldr	r3, [pc, #132]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005efc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f0c:	ee17 2a90 	vmov	r2, s15
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	e002      	b.n	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005f1c:	4b13      	ldr	r3, [pc, #76]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f28:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	0e1b      	lsrs	r3, r3, #24
 8005f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f4e:	ee17 2a90 	vmov	r2, s15
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f56:	e002      	b.n	8005f5e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
}
 8005f5e:	bf00      	nop
 8005f60:	3724      	adds	r7, #36	@ 0x24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	46020c00 	.word	0x46020c00
 8005f70:	4b742400 	.word	0x4b742400
 8005f74:	46000000 	.word	0x46000000
 8005f78:	0800a0c4 	.word	0x0800a0c4

08005f7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	@ 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005f84:	4ba6      	ldr	r3, [pc, #664]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005f8e:	4ba4      	ldr	r3, [pc, #656]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005f98:	4ba1      	ldr	r3, [pc, #644]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005fa6:	4b9e      	ldr	r3, [pc, #632]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005fb2:	4b9b      	ldr	r3, [pc, #620]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb6:	08db      	lsrs	r3, r3, #3
 8005fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d062      	beq.n	800609a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	f200 8081 	bhi.w	80060de <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d024      	beq.n	800602c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d17a      	bne.n	80060de <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffa:	4b89      	ldr	r3, [pc, #548]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800600a:	ed97 6a02 	vldr	s12, [r7, #8]
 800600e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006012:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800601a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006026:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800602a:	e08f      	b.n	800614c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800602c:	4b7c      	ldr	r3, [pc, #496]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006038:	4b79      	ldr	r3, [pc, #484]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	0f1b      	lsrs	r3, r3, #28
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	e006      	b.n	8006052 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006044:	4b76      	ldr	r3, [pc, #472]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	0f1b      	lsrs	r3, r3, #28
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	4a76      	ldr	r2, [pc, #472]	@ (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006078:	ed97 6a02 	vldr	s12, [r7, #8]
 800607c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006088:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006094:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006098:	e058      	b.n	800614c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80060a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ac:	4b5c      	ldr	r3, [pc, #368]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80060bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80060c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80060c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80060cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80060d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060dc:	e036      	b.n	800614c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80060de:	4b50      	ldr	r3, [pc, #320]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80060ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	0f1b      	lsrs	r3, r3, #28
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	e006      	b.n	8006104 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80060f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	0f1b      	lsrs	r3, r3, #28
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	4a49      	ldr	r2, [pc, #292]	@ (800622c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612a:	ed97 6a02 	vldr	s12, [r7, #8]
 800612e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006228 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800613e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800614a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800614c:	4b34      	ldr	r3, [pc, #208]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d017      	beq.n	8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006158:	4b31      	ldr	r3, [pc, #196]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800615a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615c:	0a5b      	lsrs	r3, r3, #9
 800615e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800616a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800616e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006172:	edd7 6a07 	vldr	s13, [r7, #28]
 8006176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800617a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617e:	ee17 2a90 	vmov	r2, s15
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e002      	b.n	800618e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800618e:	4b24      	ldr	r3, [pc, #144]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d017      	beq.n	80061ca <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800619a:	4b21      	ldr	r3, [pc, #132]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800619c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619e:	0c1b      	lsrs	r3, r3, #16
 80061a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80061ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061b0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80061b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c0:	ee17 2a90 	vmov	r2, s15
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	e002      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80061d0:	4b13      	ldr	r3, [pc, #76]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80061dc:	4b10      	ldr	r3, [pc, #64]	@ (8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	0e1b      	lsrs	r3, r3, #24
 80061e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80061ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80061f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006202:	ee17 2a90 	vmov	r2, s15
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800620a:	e002      	b.n	8006212 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	609a      	str	r2, [r3, #8]
}
 8006212:	bf00      	nop
 8006214:	3724      	adds	r7, #36	@ 0x24
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	46020c00 	.word	0x46020c00
 8006224:	4b742400 	.word	0x4b742400
 8006228:	46000000 	.word	0x46000000
 800622c:	0800a0c4 	.word	0x0800a0c4

08006230 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08e      	sub	sp, #56	@ 0x38
 8006234:	af00      	add	r7, sp, #0
 8006236:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800623a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006242:	430b      	orrs	r3, r1
 8006244:	d145      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006246:	4ba7      	ldr	r3, [pc, #668]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800624c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006250:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006252:	4ba4      	ldr	r3, [pc, #656]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b02      	cmp	r3, #2
 800625e:	d108      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006266:	d104      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	f001 b9b3 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006272:	4b9c      	ldr	r3, [pc, #624]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800627c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006280:	d114      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006288:	d110      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800628a:	4b96      	ldr	r3, [pc, #600]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800628c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006298:	d103      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800629a:	23fa      	movs	r3, #250	@ 0xfa
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800629e:	f001 b99b 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80062a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062a8:	f001 b996 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80062ac:	4b8d      	ldr	r3, [pc, #564]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062b8:	d107      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c0:	d103      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80062c2:	4b89      	ldr	r3, [pc, #548]	@ (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80062c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c6:	f001 b987 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ce:	f001 b983 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80062d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80062da:	430b      	orrs	r3, r1
 80062dc:	d151      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80062de:	4b81      	ldr	r3, [pc, #516]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062e4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80062e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	2b80      	cmp	r3, #128	@ 0x80
 80062ee:	d035      	beq.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	2b80      	cmp	r3, #128	@ 0x80
 80062f4:	d841      	bhi.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	2b60      	cmp	r3, #96	@ 0x60
 80062fa:	d02a      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	2b60      	cmp	r3, #96	@ 0x60
 8006300:	d83b      	bhi.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	2b40      	cmp	r3, #64	@ 0x40
 8006306:	d009      	beq.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	2b40      	cmp	r3, #64	@ 0x40
 800630c:	d835      	bhi.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	2b20      	cmp	r3, #32
 8006318:	d012      	beq.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800631a:	e02e      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800631c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fb77 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800632a:	f001 b955 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632e:	f107 0318 	add.w	r3, r7, #24
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fcc8 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800633c:	f001 b94c 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006340:	f107 030c 	add.w	r3, r7, #12
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fe19 	bl	8005f7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800634e:	f001 b943 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006352:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006358:	f001 b93e 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800635c:	4b61      	ldr	r3, [pc, #388]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006368:	d103      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800636a:	4b60      	ldr	r3, [pc, #384]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800636c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800636e:	f001 b933 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006376:	f001 b92f 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800637e:	f001 b92b 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800638a:	430b      	orrs	r3, r1
 800638c:	d158      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800638e:	4b55      	ldr	r3, [pc, #340]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006394:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006398:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a0:	d03b      	beq.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a8:	d846      	bhi.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b0:	d02e      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b8:	d83e      	bhi.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c0:	d00b      	beq.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c8:	d836      	bhi.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00d      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80063d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d6:	d012      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80063d8:	e02e      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff fb18 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063e8:	f001 b8f6 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ec:	f107 0318 	add.w	r3, r7, #24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fc69 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063fa:	f001 b8ed 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fe:	f107 030c 	add.w	r3, r7, #12
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fdba 	bl	8005f7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800640c:	f001 b8e4 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006410:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006414:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006416:	f001 b8df 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800641a:	4b32      	ldr	r3, [pc, #200]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006426:	d103      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006428:	4b30      	ldr	r3, [pc, #192]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800642c:	f001 b8d4 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006434:	f001 b8d0 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800643c:	f001 b8cc 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006444:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006448:	430b      	orrs	r3, r1
 800644a:	d126      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800644c:	4b25      	ldr	r3, [pc, #148]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800644e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006456:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006458:	4b22      	ldr	r3, [pc, #136]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006464:	d106      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800646c:	4b1f      	ldr	r3, [pc, #124]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006470:	f001 b8b2 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006474:	4b1b      	ldr	r3, [pc, #108]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006480:	d107      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006488:	d103      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800648a:	4b19      	ldr	r3, [pc, #100]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800648c:	637b      	str	r3, [r7, #52]	@ 0x34
 800648e:	f001 b8a3 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
 8006496:	f001 b89f 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800649a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80064a2:	430b      	orrs	r3, r1
 80064a4:	d16e      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80064a6:	4b0f      	ldr	r3, [pc, #60]	@ (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064ac:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80064b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80064b8:	d03d      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80064c0:	d85c      	bhi.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064c8:	d014      	beq.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d0:	d854      	bhi.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01f      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064de:	d012      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80064e0:	e04c      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80064e2:	bf00      	nop
 80064e4:	46020c00 	.word	0x46020c00
 80064e8:	0007a120 	.word	0x0007a120
 80064ec:	00f42400 	.word	0x00f42400
 80064f0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fa8b 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80064fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006500:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006502:	f001 b869 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006506:	f107 0318 	add.w	r3, r7, #24
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fbdc 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006514:	f001 b860 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006518:	4ba7      	ldr	r3, [pc, #668]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006524:	d103      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006526:	4ba5      	ldr	r3, [pc, #660]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800652a:	f001 b855 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006532:	f001 b851 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006536:	4ba0      	ldr	r3, [pc, #640]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d118      	bne.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006542:	4b9d      	ldr	r3, [pc, #628]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800654e:	4b9a      	ldr	r3, [pc, #616]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	0e1b      	lsrs	r3, r3, #24
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	e006      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800655a:	4b97      	ldr	r3, [pc, #604]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800655c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	0e1b      	lsrs	r3, r3, #24
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	4a95      	ldr	r2, [pc, #596]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800656a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800656e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006570:	f001 b832 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006578:	f001 b82e 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006580:	f001 b82a 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006588:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800658c:	430b      	orrs	r3, r1
 800658e:	d17f      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006590:	4b89      	ldr	r3, [pc, #548]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006592:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800659a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d165      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80065a2:	4b85      	ldr	r3, [pc, #532]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80065ac:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065b4:	d034      	beq.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065bc:	d853      	bhi.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065c4:	d00b      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065cc:	d84b      	bhi.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d016      	beq.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065da:	d009      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80065dc:	e043      	b.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff fa16 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80065ec:	f000 bff4 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f0:	f107 0318 	add.w	r3, r7, #24
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fb67 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80065fe:	f000 bfeb 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006602:	4b6d      	ldr	r3, [pc, #436]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800660a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800660e:	d103      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006610:	4b6a      	ldr	r3, [pc, #424]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006612:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006614:	f000 bfe0 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800661c:	f000 bfdc 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006620:	4b65      	ldr	r3, [pc, #404]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b20      	cmp	r3, #32
 800662a:	d118      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800662c:	4b62      	ldr	r3, [pc, #392]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006638:	4b5f      	ldr	r3, [pc, #380]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	0e1b      	lsrs	r3, r3, #24
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	e006      	b.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006644:	4b5c      	ldr	r3, [pc, #368]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	0e1b      	lsrs	r3, r3, #24
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	4a5b      	ldr	r2, [pc, #364]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800665a:	f000 bfbd 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006662:	f000 bfb9 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800666a:	f000 bfb5 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006674:	d108      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff f9ca 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	637b      	str	r3, [r7, #52]	@ 0x34
 8006684:	f000 bfa8 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
 800668c:	f000 bfa4 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006694:	1e51      	subs	r1, r2, #1
 8006696:	430b      	orrs	r3, r1
 8006698:	d136      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800669a:	4b47      	ldr	r3, [pc, #284]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800669c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7fe fb44 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 80066b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80066b2:	f000 bf91 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d104      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066bc:	f7fe fa0c 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 80066c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80066c2:	f000 bf89 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80066c6:	4b3c      	ldr	r3, [pc, #240]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d103      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80066da:	4b3a      	ldr	r3, [pc, #232]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066de:	f000 bf7b 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80066e2:	4b35      	ldr	r3, [pc, #212]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d107      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d104      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fc:	f000 bf6c 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34
 8006704:	f000 bf68 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670c:	1e91      	subs	r1, r2, #2
 800670e:	430b      	orrs	r3, r1
 8006710:	d136      	bne.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006712:	4b29      	ldr	r3, [pc, #164]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006724:	f7fe faf4 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8006728:	6378      	str	r0, [r7, #52]	@ 0x34
 800672a:	f000 bf55 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	2b04      	cmp	r3, #4
 8006732:	d104      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006734:	f7fe f9d0 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006738:	6378      	str	r0, [r7, #52]	@ 0x34
 800673a:	f000 bf4d 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800673e:	4b1e      	ldr	r3, [pc, #120]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	2b08      	cmp	r3, #8
 8006750:	d103      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006752:	4b1c      	ldr	r3, [pc, #112]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006754:	637b      	str	r3, [r7, #52]	@ 0x34
 8006756:	f000 bf3f 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800675a:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800675c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d107      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	2b0c      	cmp	r3, #12
 800676c:	d104      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800676e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006772:	637b      	str	r3, [r7, #52]	@ 0x34
 8006774:	f000 bf30 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	637b      	str	r3, [r7, #52]	@ 0x34
 800677c:	f000 bf2c 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006784:	1f11      	subs	r1, r2, #4
 8006786:	430b      	orrs	r3, r1
 8006788:	d13f      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800678a:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800678c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006790:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006794:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fe fab8 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 80067a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067a2:	f000 bf19 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2b10      	cmp	r3, #16
 80067aa:	d10d      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067ac:	f7fe f994 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 80067b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067b2:	f000 bf11 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80067b6:	bf00      	nop
 80067b8:	46020c00 	.word	0x46020c00
 80067bc:	02dc6c00 	.word	0x02dc6c00
 80067c0:	0800a0c4 	.word	0x0800a0c4
 80067c4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80067c8:	4ba6      	ldr	r3, [pc, #664]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d4:	d106      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d103      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80067dc:	4ba2      	ldr	r3, [pc, #648]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e0:	f000 befa 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80067e4:	4b9f      	ldr	r3, [pc, #636]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d107      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2b30      	cmp	r3, #48	@ 0x30
 80067f6:	d104      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80067f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fe:	f000 beeb 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
 8006806:	f000 bee7 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800680a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680e:	f1a2 0108 	sub.w	r1, r2, #8
 8006812:	430b      	orrs	r3, r1
 8006814:	d136      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006816:	4b93      	ldr	r3, [pc, #588]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800681c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006820:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	2b00      	cmp	r3, #0
 8006826:	d104      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006828:	f7fe fa72 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 800682c:	6378      	str	r0, [r7, #52]	@ 0x34
 800682e:	f000 bed3 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	2b40      	cmp	r3, #64	@ 0x40
 8006836:	d104      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006838:	f7fe f94e 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 800683c:	6378      	str	r0, [r7, #52]	@ 0x34
 800683e:	f000 becb 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006842:	4b88      	ldr	r3, [pc, #544]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800684e:	d106      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	2b80      	cmp	r3, #128	@ 0x80
 8006854:	d103      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006856:	4b84      	ldr	r3, [pc, #528]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
 800685a:	f000 bebd 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800685e:	4b81      	ldr	r3, [pc, #516]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d107      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006870:	d104      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
 8006878:	f000 beae 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006880:	f000 beaa 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006888:	f1a2 0110 	sub.w	r1, r2, #16
 800688c:	430b      	orrs	r3, r1
 800688e:	d139      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006890:	4b74      	ldr	r3, [pc, #464]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800689a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068a2:	f7fe fa35 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 80068a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80068a8:	f000 be96 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b2:	d104      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068b4:	f7fe f910 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 80068b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80068ba:	f000 be8d 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80068be:	4b69      	ldr	r3, [pc, #420]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ca:	d107      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d2:	d103      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80068d4:	4b64      	ldr	r3, [pc, #400]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d8:	f000 be7e 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80068dc:	4b61      	ldr	r3, [pc, #388]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d108      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f0:	d104      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80068f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f8:	f000 be6e 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006900:	f000 be6a 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006908:	f1a2 0120 	sub.w	r1, r2, #32
 800690c:	430b      	orrs	r3, r1
 800690e:	d158      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006910:	4b54      	ldr	r3, [pc, #336]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006922:	f7fe fa1d 	bl	8004d60 <HAL_RCC_GetPCLK3Freq>
 8006926:	6378      	str	r0, [r7, #52]	@ 0x34
 8006928:	f000 be56 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	2b01      	cmp	r3, #1
 8006930:	d104      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006932:	f7fe f8d1 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006936:	6378      	str	r0, [r7, #52]	@ 0x34
 8006938:	f000 be4e 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800693c:	4b49      	ldr	r3, [pc, #292]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006948:	d106      	bne.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	2b02      	cmp	r3, #2
 800694e:	d103      	bne.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006950:	4b45      	ldr	r3, [pc, #276]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
 8006954:	f000 be40 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006958:	4b42      	ldr	r3, [pc, #264]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800695a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d107      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	2b03      	cmp	r3, #3
 800696a:	d104      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800696c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
 8006972:	f000 be31 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006976:	4b3b      	ldr	r3, [pc, #236]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b20      	cmp	r3, #32
 8006980:	d11b      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2b04      	cmp	r3, #4
 8006986:	d118      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006988:	4b36      	ldr	r3, [pc, #216]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006994:	4b33      	ldr	r3, [pc, #204]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	0e1b      	lsrs	r3, r3, #24
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	e006      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80069a0:	4b30      	ldr	r3, [pc, #192]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	0e1b      	lsrs	r3, r3, #24
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	4a2f      	ldr	r2, [pc, #188]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b6:	f000 be0f 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80069be:	f000 be0b 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80069c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80069ca:	430b      	orrs	r3, r1
 80069cc:	d172      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80069ce:	4b25      	ldr	r3, [pc, #148]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80069d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e0:	d104      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069e2:	f7fe f879 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 80069e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80069e8:	f000 bdf6 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069f2:	d108      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f4:	f107 0318 	add.w	r3, r7, #24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff f965 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a02:	f000 bde9 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006a0c:	f7fe f966 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8006a10:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a12:	f000 bde1 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006a1c:	d128      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a1e:	4b11      	ldr	r3, [pc, #68]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d118      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006a36:	4b0b      	ldr	r3, [pc, #44]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	0e1b      	lsrs	r3, r3, #24
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	e006      	b.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006a42:	4b08      	ldr	r3, [pc, #32]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a48:	041b      	lsls	r3, r3, #16
 8006a4a:	0e1b      	lsrs	r3, r3, #24
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	4a06      	ldr	r2, [pc, #24]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a58:	f000 bdbe 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a60:	f000 bdba 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006a64:	46020c00 	.word	0x46020c00
 8006a68:	00f42400 	.word	0x00f42400
 8006a6c:	0800a0c4 	.word	0x0800a0c4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006a70:	4baf      	ldr	r3, [pc, #700]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8006a86:	4bab      	ldr	r3, [pc, #684]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8a:	f000 bda5 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006a8e:	4ba8      	ldr	r3, [pc, #672]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9a:	d107      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aa2:	d103      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8006aa4:	4ba3      	ldr	r3, [pc, #652]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	f000 bd96 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab0:	f000 bd92 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006abc:	430b      	orrs	r3, r1
 8006abe:	d158      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ac2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d84b      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8006ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006aed 	.word	0x08006aed
 8006ae0:	08006aff 	.word	0x08006aff
 8006ae4:	08006b1b 	.word	0x08006b1b
 8006ae8:	08006b25 	.word	0x08006b25
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe ff8f 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006afa:	f000 bd6d 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006afe:	f107 030c 	add.w	r3, r7, #12
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fa3a 	bl	8005f7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b0c:	f000 bd64 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006b10:	f7fe f8e4 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8006b14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b16:	f000 bd5f 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b20:	f000 bd5a 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b24:	4b82      	ldr	r3, [pc, #520]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d118      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b30:	4b7f      	ldr	r3, [pc, #508]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006b3c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	0e1b      	lsrs	r3, r3, #24
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	e006      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006b48:	4b79      	ldr	r3, [pc, #484]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	4a78      	ldr	r2, [pc, #480]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b5e:	f000 bd3b 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b66:	f000 bd37 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b6e:	f000 bd33 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b76:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	d167      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b84:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006b88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b90:	d036      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b98:	d855      	bhi.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ba0:	d029      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ba8:	d84d      	bhi.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb0:	d013      	beq.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb8:	d845      	bhi.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d015      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc6:	d13e      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe ff21 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd6:	f000 bcff 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bda:	f107 030c 	add.w	r3, r7, #12
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff f9cc 	bl	8005f7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006be8:	f000 bcf6 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006bec:	f7fe f876 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8006bf0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006bf2:	f000 bcf1 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006bf6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bfc:	f000 bcec 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c00:	4b4b      	ldr	r3, [pc, #300]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d118      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c0c:	4b48      	ldr	r3, [pc, #288]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006c18:	4b45      	ldr	r3, [pc, #276]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	e006      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006c24:	4b42      	ldr	r3, [pc, #264]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	0e1b      	lsrs	r3, r3, #24
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a41      	ldr	r2, [pc, #260]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c3a:	f000 bccd 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c42:	f000 bcc9 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c4a:	f000 bcc5 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c52:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006c56:	430b      	orrs	r3, r1
 8006c58:	d14c      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c5a:	4b35      	ldr	r3, [pc, #212]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c6c:	f7fe f850 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8006c70:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c72:	f000 bcb1 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c7c:	d104      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c7e:	f7fd ff2b 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006c82:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c84:	f000 bca8 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006c88:	4b29      	ldr	r3, [pc, #164]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c9c:	d103      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006c9e:	4b25      	ldr	r3, [pc, #148]	@ (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca2:	f000 bc99 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006ca6:	4b22      	ldr	r3, [pc, #136]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d11c      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cb8:	d118      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cba:	4b1d      	ldr	r3, [pc, #116]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	0e1b      	lsrs	r3, r3, #24
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	e006      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006cd2:	4b17      	ldr	r3, [pc, #92]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	0e1b      	lsrs	r3, r3, #24
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce8:	f000 bc76 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf0:	f000 bc72 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	d153      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006d0a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d104      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d12:	f7fd fffd 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8006d16:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d18:	f000 bc5e 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d22:	d10b      	bne.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d24:	f7fd fed8 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006d28:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d2a:	f000 bc55 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006d2e:	bf00      	nop
 8006d30:	46020c00 	.word	0x46020c00
 8006d34:	00f42400 	.word	0x00f42400
 8006d38:	0800a0c4 	.word	0x0800a0c4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006d3c:	4ba1      	ldr	r3, [pc, #644]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d48:	d107      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d50:	d103      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8006d52:	4b9d      	ldr	r3, [pc, #628]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d56:	f000 bc3f 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006d5a:	4b9a      	ldr	r3, [pc, #616]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d11c      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d6c:	d118      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d6e:	4b95      	ldr	r3, [pc, #596]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006d7a:	4b92      	ldr	r3, [pc, #584]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	0e1b      	lsrs	r3, r3, #24
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	e006      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006d86:	4b8f      	ldr	r3, [pc, #572]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	0e1b      	lsrs	r3, r3, #24
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	4a8d      	ldr	r2, [pc, #564]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9c:	f000 bc1c 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da4:	f000 bc18 	b.w	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dac:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006db0:	430b      	orrs	r3, r1
 8006db2:	d151      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006db4:	4b83      	ldr	r3, [pc, #524]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006dbe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dc4:	d024      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dca:	d842      	bhi.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	2b80      	cmp	r3, #128	@ 0x80
 8006dd0:	d00d      	beq.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd4:	2b80      	cmp	r3, #128	@ 0x80
 8006dd6:	d83c      	bhi.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	2b40      	cmp	r3, #64	@ 0x40
 8006de2:	d011      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006de4:	e035      	b.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006de6:	f7fd ffbb 	bl	8004d60 <HAL_RCC_GetPCLK3Freq>
 8006dea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006dec:	e3f4      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dee:	4b75      	ldr	r3, [pc, #468]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfa:	d102      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8006dfc:	4b72      	ldr	r3, [pc, #456]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e00:	e3ea      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e06:	e3e7      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006e08:	f7fd fe66 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006e0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e0e:	e3e3      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e10:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d117      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e1c:	4b69      	ldr	r3, [pc, #420]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8006e28:	4b66      	ldr	r3, [pc, #408]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	0e1b      	lsrs	r3, r3, #24
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	e006      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006e34:	4b63      	ldr	r3, [pc, #396]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	0e1b      	lsrs	r3, r3, #24
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	4a62      	ldr	r2, [pc, #392]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e4a:	e3c5      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e50:	e3c2      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e56:	e3bf      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006e60:	430b      	orrs	r3, r1
 8006e62:	d147      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006e64:	4b57      	ldr	r3, [pc, #348]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006e6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d103      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e76:	f7fd ff4b 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8006e7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e7c:	e3ac      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e84:	d103      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e86:	f7fd fe27 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006e8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e8c:	e3a4      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9a:	d106      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea2:	d102      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8006ea4:	4b48      	ldr	r3, [pc, #288]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea8:	e396      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006eaa:	4b46      	ldr	r3, [pc, #280]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d11b      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006ebc:	d117      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ebe:	4b41      	ldr	r3, [pc, #260]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006eca:	4b3e      	ldr	r3, [pc, #248]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	0e1b      	lsrs	r3, r3, #24
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	e006      	b.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8006ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	0e1b      	lsrs	r3, r3, #24
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	4a39      	ldr	r2, [pc, #228]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eec:	e374      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef2:	e371      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006efc:	430b      	orrs	r3, r1
 8006efe:	d16a      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006f00:	4b30      	ldr	r3, [pc, #192]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f0a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d120      	bne.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f12:	4b2c      	ldr	r3, [pc, #176]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d117      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f1e:	4b29      	ldr	r3, [pc, #164]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8006f2a:	4b26      	ldr	r3, [pc, #152]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	0e1b      	lsrs	r3, r3, #24
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	e006      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006f36:	4b23      	ldr	r3, [pc, #140]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f3c:	041b      	lsls	r3, r3, #16
 8006f3e:	0e1b      	lsrs	r3, r3, #24
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	4a21      	ldr	r2, [pc, #132]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4c:	e344      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f52:	e341      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006f54:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f62:	d112      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f6a:	d10e      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f6c:	4b15      	ldr	r3, [pc, #84]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8006f7c:	23fa      	movs	r3, #250	@ 0xfa
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f80:	e32a      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006f82:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f88:	e326      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f96:	d106      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9e:	d102      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006fa0:	4b09      	ldr	r3, [pc, #36]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa4:	e318      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006fa6:	4b07      	ldr	r3, [pc, #28]	@ (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d10d      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fba:	d109      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8006fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc2:	e309      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006fc4:	46020c00 	.word	0x46020c00
 8006fc8:	00f42400 	.word	0x00f42400
 8006fcc:	0800a0c4 	.word	0x0800a0c4
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd4:	e300      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fda:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	d164      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006fe2:	4ba2      	ldr	r3, [pc, #648]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fe8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d120      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ff4:	4b9d      	ldr	r3, [pc, #628]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d117      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007000:	4b9a      	ldr	r3, [pc, #616]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800700c:	4b97      	ldr	r3, [pc, #604]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	0e1b      	lsrs	r3, r3, #24
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	e006      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8007018:	4b94      	ldr	r3, [pc, #592]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800701a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	0e1b      	lsrs	r3, r3, #24
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	4a92      	ldr	r2, [pc, #584]	@ (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
 800702e:	e2d3      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
 8007034:	e2d0      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007036:	4b8d      	ldr	r3, [pc, #564]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800703c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007044:	d112      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704c:	d10e      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800704e:	4b87      	ldr	r3, [pc, #540]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800705c:	d102      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800705e:	23fa      	movs	r3, #250	@ 0xfa
 8007060:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007062:	e2b9      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007064:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800706a:	e2b5      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800706c:	4b7f      	ldr	r3, [pc, #508]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007078:	d106      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007080:	d102      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8007082:	4b7c      	ldr	r3, [pc, #496]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007084:	637b      	str	r3, [r7, #52]	@ 0x34
 8007086:	e2a7      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007088:	4b78      	ldr	r3, [pc, #480]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800708a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b02      	cmp	r3, #2
 8007094:	d107      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800709c:	d103      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800709e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a4:	e298      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070aa:	e295      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80070ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80070b4:	430b      	orrs	r3, r1
 80070b6:	d147      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80070b8:	4b6c      	ldr	r3, [pc, #432]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80070ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80070c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80070c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d103      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070ca:	f7fd fe21 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 80070ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80070d0:	e282      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80070d2:	4b66      	ldr	r3, [pc, #408]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80070d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e0:	d112      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070e8:	d10e      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070ea:	4b60      	ldr	r3, [pc, #384]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80070ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070f8:	d102      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80070fa:	23fa      	movs	r3, #250	@ 0xfa
 80070fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070fe:	e26b      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007100:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007104:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007106:	e267      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007108:	4b58      	ldr	r3, [pc, #352]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007114:	d106      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800711c:	d102      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800711e:	4b55      	ldr	r3, [pc, #340]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
 8007122:	e259      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007124:	4b51      	ldr	r3, [pc, #324]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b02      	cmp	r3, #2
 8007130:	d107      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007138:	d103      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800713a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007140:	e24a      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
 8007146:	e247      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800714c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007150:	430b      	orrs	r3, r1
 8007152:	d12d      	bne.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007154:	4b45      	ldr	r3, [pc, #276]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800715a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800715e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007160:	4b42      	ldr	r3, [pc, #264]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800716c:	d105      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007174:	4b3f      	ldr	r3, [pc, #252]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
 8007178:	e22e      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007180:	d107      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fc44 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007190:	e222      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007198:	d107      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800719a:	f107 0318 	add.w	r3, r7, #24
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fd92 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a8:	e216      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ae:	e213      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80071b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80071b8:	430b      	orrs	r3, r1
 80071ba:	d15d      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80071bc:	4b2b      	ldr	r3, [pc, #172]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80071be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80071c6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ce:	d028      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071d6:	d845      	bhi.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071de:	d013      	beq.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e6:	d83d      	bhi.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f4:	d004      	beq.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80071f6:	e035      	b.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80071f8:	f7fd fd9e 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 80071fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071fe:	e1eb      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007200:	f7fd fc6a 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8007204:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007206:	e1e7      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007208:	4b18      	ldr	r3, [pc, #96]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007214:	d102      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007216:	4b17      	ldr	r3, [pc, #92]	@ (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007218:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800721a:	e1dd      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007220:	e1da      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007222:	4b12      	ldr	r3, [pc, #72]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b20      	cmp	r3, #32
 800722c:	d117      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800722e:	4b0f      	ldr	r3, [pc, #60]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800723a:	4b0c      	ldr	r3, [pc, #48]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	0e1b      	lsrs	r3, r3, #24
 8007240:	f003 030f 	and.w	r3, r3, #15
 8007244:	e006      	b.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007246:	4b09      	ldr	r3, [pc, #36]	@ (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800724c:	041b      	lsls	r3, r3, #16
 800724e:	0e1b      	lsrs	r3, r3, #24
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	4a06      	ldr	r2, [pc, #24]	@ (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800725a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800725c:	e1bc      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007262:	e1b9      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007268:	e1b6      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800726a:	bf00      	nop
 800726c:	46020c00 	.word	0x46020c00
 8007270:	0800a0c4 	.word	0x0800a0c4
 8007274:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007280:	430b      	orrs	r3, r1
 8007282:	d156      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007284:	4ba5      	ldr	r3, [pc, #660]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800728a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800728e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007296:	d028      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800729e:	d845      	bhi.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072a6:	d013      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ae:	d83d      	bhi.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072bc:	d004      	beq.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80072be:	e035      	b.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80072c0:	f7fd fd26 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 80072c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072c6:	e187      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80072c8:	f7fd fc06 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 80072cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072ce:	e183      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072d0:	4b92      	ldr	r3, [pc, #584]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072dc:	d102      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80072de:	4b90      	ldr	r3, [pc, #576]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072e2:	e179      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e8:	e176      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072ea:	4b8c      	ldr	r3, [pc, #560]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d117      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072f6:	4b89      	ldr	r3, [pc, #548]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007302:	4b86      	ldr	r3, [pc, #536]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	0e1b      	lsrs	r3, r3, #24
 8007308:	f003 030f 	and.w	r3, r3, #15
 800730c:	e006      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800730e:	4b83      	ldr	r3, [pc, #524]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	0e1b      	lsrs	r3, r3, #24
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	4a81      	ldr	r2, [pc, #516]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800731e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007322:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007324:	e158      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800732a:	e155      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007330:	e152      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007336:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800733a:	430b      	orrs	r3, r1
 800733c:	d177      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800733e:	4b77      	ldr	r3, [pc, #476]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007344:	f003 0318 	and.w	r3, r3, #24
 8007348:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	2b18      	cmp	r3, #24
 800734e:	d86b      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007350:	a201      	add	r2, pc, #4	@ (adr r2, 8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	080073bd 	.word	0x080073bd
 800735c:	08007429 	.word	0x08007429
 8007360:	08007429 	.word	0x08007429
 8007364:	08007429 	.word	0x08007429
 8007368:	08007429 	.word	0x08007429
 800736c:	08007429 	.word	0x08007429
 8007370:	08007429 	.word	0x08007429
 8007374:	08007429 	.word	0x08007429
 8007378:	080073c5 	.word	0x080073c5
 800737c:	08007429 	.word	0x08007429
 8007380:	08007429 	.word	0x08007429
 8007384:	08007429 	.word	0x08007429
 8007388:	08007429 	.word	0x08007429
 800738c:	08007429 	.word	0x08007429
 8007390:	08007429 	.word	0x08007429
 8007394:	08007429 	.word	0x08007429
 8007398:	080073cd 	.word	0x080073cd
 800739c:	08007429 	.word	0x08007429
 80073a0:	08007429 	.word	0x08007429
 80073a4:	08007429 	.word	0x08007429
 80073a8:	08007429 	.word	0x08007429
 80073ac:	08007429 	.word	0x08007429
 80073b0:	08007429 	.word	0x08007429
 80073b4:	08007429 	.word	0x08007429
 80073b8:	080073e7 	.word	0x080073e7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80073bc:	f7fd fcd0 	bl	8004d60 <HAL_RCC_GetPCLK3Freq>
 80073c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80073c2:	e109      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80073c4:	f7fd fb88 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 80073c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80073ca:	e105      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073cc:	4b53      	ldr	r3, [pc, #332]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d8:	d102      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80073da:	4b51      	ldr	r3, [pc, #324]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073de:	e0fb      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e4:	e0f8      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073e6:	4b4d      	ldr	r3, [pc, #308]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d117      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073f2:	4b4a      	ldr	r3, [pc, #296]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80073fe:	4b47      	ldr	r3, [pc, #284]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	0e1b      	lsrs	r3, r3, #24
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	e006      	b.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800740a:	4b44      	ldr	r3, [pc, #272]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800740c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007410:	041b      	lsls	r3, r3, #16
 8007412:	0e1b      	lsrs	r3, r3, #24
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	4a42      	ldr	r2, [pc, #264]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800741a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800741e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007420:	e0da      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007426:	e0d7      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800742c:	e0d4      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800742e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007432:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007436:	430b      	orrs	r3, r1
 8007438:	d155      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800743a:	4b38      	ldr	r3, [pc, #224]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800743c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007440:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007444:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800744c:	d013      	beq.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007454:	d844      	bhi.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800745c:	d013      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007464:	d83c      	bhi.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	2b00      	cmp	r3, #0
 800746a:	d014      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007472:	d014      	beq.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007474:	e034      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007476:	f107 0318 	add.w	r3, r7, #24
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe fc24 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007484:	e0a8      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fac2 	bl	8005a14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007494:	e0a0      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007496:	f7fd fb1f 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 800749a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800749c:	e09c      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800749e:	4b1f      	ldr	r3, [pc, #124]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d117      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074aa:	4b1c      	ldr	r3, [pc, #112]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 80074b6:	4b19      	ldr	r3, [pc, #100]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	0e1b      	lsrs	r3, r3, #24
 80074bc:	f003 030f 	and.w	r3, r3, #15
 80074c0:	e006      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80074c2:	4b16      	ldr	r3, [pc, #88]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80074c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	0e1b      	lsrs	r3, r3, #24
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	4a14      	ldr	r2, [pc, #80]	@ (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80074d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074d8:	e07e      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074de:	e07b      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074e4:	e078      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80074e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ea:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80074ee:	430b      	orrs	r3, r1
 80074f0:	d138      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80074f2:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80074f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074fc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80074fe:	4b07      	ldr	r3, [pc, #28]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d10d      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
 8007518:	e05e      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800751a:	bf00      	nop
 800751c:	46020c00 	.word	0x46020c00
 8007520:	00f42400 	.word	0x00f42400
 8007524:	0800a0c4 	.word	0x0800a0c4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007528:	4b2e      	ldr	r3, [pc, #184]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800752a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800752e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007532:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007536:	d112      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800753e:	d10e      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007540:	4b28      	ldr	r3, [pc, #160]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800754a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800754e:	d102      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007550:	23fa      	movs	r3, #250	@ 0xfa
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007554:	e040      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007556:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800755c:	e03c      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	637b      	str	r3, [r7, #52]	@ 0x34
 8007562:	e039      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007568:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800756c:	430b      	orrs	r3, r1
 800756e:	d131      	bne.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007570:	4b1c      	ldr	r3, [pc, #112]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007576:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800757a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800757c:	4b19      	ldr	r3, [pc, #100]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007588:	d105      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007590:	4b15      	ldr	r3, [pc, #84]	@ (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
 8007594:	e020      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007596:	4b13      	ldr	r3, [pc, #76]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a2:	d106      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075aa:	d102      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 80075ac:	4b0f      	ldr	r3, [pc, #60]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b0:	e012      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80075b2:	4b0c      	ldr	r3, [pc, #48]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075be:	d106      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80075c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075c6:	d102      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 80075c8:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80075cc:	e004      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d2:	e001      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80075d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3738      	adds	r7, #56	@ 0x38
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	46020c00 	.word	0x46020c00
 80075e8:	02dc6c00 	.word	0x02dc6c00
 80075ec:	016e3600 	.word	0x016e3600
 80075f0:	00f42400 	.word	0x00f42400

080075f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80075fc:	4b47      	ldr	r3, [pc, #284]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a46      	ldr	r2, [pc, #280]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 8007602:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007606:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007608:	f7fa fd8a 	bl	8002120 <HAL_GetTick>
 800760c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800760e:	e008      	b.n	8007622 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007610:	f7fa fd86 	bl	8002120 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e077      	b.n	8007712 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007622:	4b3e      	ldr	r3, [pc, #248]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f0      	bne.n	8007610 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800762e:	4b3b      	ldr	r3, [pc, #236]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6852      	ldr	r2, [r2, #4]
 8007642:	3a01      	subs	r2, #1
 8007644:	0212      	lsls	r2, r2, #8
 8007646:	430a      	orrs	r2, r1
 8007648:	4934      	ldr	r1, [pc, #208]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 800764a:	4313      	orrs	r3, r2
 800764c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800764e:	4b33      	ldr	r3, [pc, #204]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 8007650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007652:	4b33      	ldr	r3, [pc, #204]	@ (8007720 <RCCEx_PLL2_Config+0x12c>)
 8007654:	4013      	ands	r3, r2
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6892      	ldr	r2, [r2, #8]
 800765a:	3a01      	subs	r2, #1
 800765c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68d2      	ldr	r2, [r2, #12]
 8007664:	3a01      	subs	r2, #1
 8007666:	0252      	lsls	r2, r2, #9
 8007668:	b292      	uxth	r2, r2
 800766a:	4311      	orrs	r1, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6912      	ldr	r2, [r2, #16]
 8007670:	3a01      	subs	r2, #1
 8007672:	0412      	lsls	r2, r2, #16
 8007674:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007678:	4311      	orrs	r1, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6952      	ldr	r2, [r2, #20]
 800767e:	3a01      	subs	r2, #1
 8007680:	0612      	lsls	r2, r2, #24
 8007682:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007686:	430a      	orrs	r2, r1
 8007688:	4924      	ldr	r1, [pc, #144]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 800768a:	4313      	orrs	r3, r2
 800768c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800768e:	4b23      	ldr	r3, [pc, #140]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	f023 020c 	bic.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	4920      	ldr	r1, [pc, #128]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 800769c:	4313      	orrs	r3, r2
 800769e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80076a0:	4b1e      	ldr	r3, [pc, #120]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	491c      	ldr	r1, [pc, #112]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80076ae:	4b1b      	ldr	r3, [pc, #108]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b2:	4a1a      	ldr	r2, [pc, #104]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076b4:	f023 0310 	bic.w	r3, r3, #16
 80076b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076ba:	4b18      	ldr	r3, [pc, #96]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	69d2      	ldr	r2, [r2, #28]
 80076ca:	00d2      	lsls	r2, r2, #3
 80076cc:	4913      	ldr	r1, [pc, #76]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80076d2:	4b12      	ldr	r3, [pc, #72]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	4a11      	ldr	r2, [pc, #68]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076d8:	f043 0310 	orr.w	r3, r3, #16
 80076dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80076de:	4b0f      	ldr	r3, [pc, #60]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a0e      	ldr	r2, [pc, #56]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 80076e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076ea:	f7fa fd19 	bl	8002120 <HAL_GetTick>
 80076ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076f0:	e008      	b.n	8007704 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076f2:	f7fa fd15 	bl	8002120 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e006      	b.n	8007712 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007704:	4b05      	ldr	r3, [pc, #20]	@ (800771c <RCCEx_PLL2_Config+0x128>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0

}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	46020c00 	.word	0x46020c00
 8007720:	80800000 	.word	0x80800000

08007724 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800772c:	4b47      	ldr	r3, [pc, #284]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a46      	ldr	r2, [pc, #280]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007736:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007738:	f7fa fcf2 	bl	8002120 <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800773e:	e008      	b.n	8007752 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007740:	f7fa fcee 	bl	8002120 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e077      	b.n	8007842 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007752:	4b3e      	ldr	r3, [pc, #248]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f0      	bne.n	8007740 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800775e:	4b3b      	ldr	r3, [pc, #236]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007762:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6811      	ldr	r1, [r2, #0]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6852      	ldr	r2, [r2, #4]
 8007772:	3a01      	subs	r2, #1
 8007774:	0212      	lsls	r2, r2, #8
 8007776:	430a      	orrs	r2, r1
 8007778:	4934      	ldr	r1, [pc, #208]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 800777a:	4313      	orrs	r3, r2
 800777c:	630b      	str	r3, [r1, #48]	@ 0x30
 800777e:	4b33      	ldr	r3, [pc, #204]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007782:	4b33      	ldr	r3, [pc, #204]	@ (8007850 <RCCEx_PLL3_Config+0x12c>)
 8007784:	4013      	ands	r3, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6892      	ldr	r2, [r2, #8]
 800778a:	3a01      	subs	r2, #1
 800778c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	68d2      	ldr	r2, [r2, #12]
 8007794:	3a01      	subs	r2, #1
 8007796:	0252      	lsls	r2, r2, #9
 8007798:	b292      	uxth	r2, r2
 800779a:	4311      	orrs	r1, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6912      	ldr	r2, [r2, #16]
 80077a0:	3a01      	subs	r2, #1
 80077a2:	0412      	lsls	r2, r2, #16
 80077a4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80077a8:	4311      	orrs	r1, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6952      	ldr	r2, [r2, #20]
 80077ae:	3a01      	subs	r2, #1
 80077b0:	0612      	lsls	r2, r2, #24
 80077b2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80077b6:	430a      	orrs	r2, r1
 80077b8:	4924      	ldr	r1, [pc, #144]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80077be:	4b23      	ldr	r3, [pc, #140]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c2:	f023 020c 	bic.w	r2, r3, #12
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	4920      	ldr	r1, [pc, #128]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80077d0:	4b1e      	ldr	r3, [pc, #120]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	491c      	ldr	r1, [pc, #112]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80077de:	4b1b      	ldr	r3, [pc, #108]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e2:	4a1a      	ldr	r2, [pc, #104]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077e4:	f023 0310 	bic.w	r3, r3, #16
 80077e8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077ea:	4b18      	ldr	r3, [pc, #96]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	69d2      	ldr	r2, [r2, #28]
 80077fa:	00d2      	lsls	r2, r2, #3
 80077fc:	4913      	ldr	r1, [pc, #76]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007802:	4b12      	ldr	r3, [pc, #72]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007806:	4a11      	ldr	r2, [pc, #68]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007808:	f043 0310 	orr.w	r3, r3, #16
 800780c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800780e:	4b0f      	ldr	r3, [pc, #60]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a0e      	ldr	r2, [pc, #56]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007818:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800781a:	f7fa fc81 	bl	8002120 <HAL_GetTick>
 800781e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007820:	e008      	b.n	8007834 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007822:	f7fa fc7d 	bl	8002120 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e006      	b.n	8007842 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007834:	4b05      	ldr	r3, [pc, #20]	@ (800784c <RCCEx_PLL3_Config+0x128>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0f0      	beq.n	8007822 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	46020c00 	.word	0x46020c00
 8007850:	80800000 	.word	0x80800000

08007854 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e0fb      	b.n	8007a5e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a7f      	ldr	r2, [pc, #508]	@ (8007a68 <HAL_SPI_Init+0x214>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_SPI_Init+0x26>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a7d      	ldr	r2, [pc, #500]	@ (8007a6c <HAL_SPI_Init+0x218>)
 8007876:	4293      	cmp	r3, r2
 8007878:	e000      	b.n	800787c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800787a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a78      	ldr	r2, [pc, #480]	@ (8007a68 <HAL_SPI_Init+0x214>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <HAL_SPI_Init+0x42>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a76      	ldr	r2, [pc, #472]	@ (8007a6c <HAL_SPI_Init+0x218>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d105      	bne.n	80078a2 <HAL_SPI_Init+0x4e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b0f      	cmp	r3, #15
 800789c:	d901      	bls.n	80078a2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e0dd      	b.n	8007a5e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 f8cc 	bl	8008a40 <SPI_GetPacketSize>
 80078a8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6e      	ldr	r2, [pc, #440]	@ (8007a68 <HAL_SPI_Init+0x214>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_SPI_Init+0x6a>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a6c      	ldr	r2, [pc, #432]	@ (8007a6c <HAL_SPI_Init+0x218>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d102      	bne.n	80078c4 <HAL_SPI_Init+0x70>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d816      	bhi.n	80078f2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078c8:	4a69      	ldr	r2, [pc, #420]	@ (8007a70 <HAL_SPI_Init+0x21c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a68      	ldr	r2, [pc, #416]	@ (8007a74 <HAL_SPI_Init+0x220>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_SPI_Init+0x98>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a66      	ldr	r2, [pc, #408]	@ (8007a78 <HAL_SPI_Init+0x224>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_SPI_Init+0x98>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a65      	ldr	r2, [pc, #404]	@ (8007a7c <HAL_SPI_Init+0x228>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d104      	bne.n	80078f6 <HAL_SPI_Init+0xa2>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b10      	cmp	r3, #16
 80078f0:	d901      	bls.n	80078f6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0b3      	b.n	8007a5e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7f9 feb0 	bl	8001670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007932:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800793c:	d119      	bne.n	8007972 <HAL_SPI_Init+0x11e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007946:	d103      	bne.n	8007950 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800794c:	2b00      	cmp	r3, #0
 800794e:	d008      	beq.n	8007962 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10c      	bne.n	8007972 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800795c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007960:	d107      	bne.n	8007972 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007970:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00f      	beq.n	800799e <HAL_SPI_Init+0x14a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b06      	cmp	r3, #6
 8007984:	d90b      	bls.n	800799e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	e007      	b.n	80079ae <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69da      	ldr	r2, [r3, #28]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b6:	431a      	orrs	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c0:	ea42 0103 	orr.w	r1, r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a1a:	ea42 0103 	orr.w	r1, r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	46002000 	.word	0x46002000
 8007a6c:	56002000 	.word	0x56002000
 8007a70:	40013000 	.word	0x40013000
 8007a74:	50013000 	.word	0x50013000
 8007a78:	40003800 	.word	0x40003800
 8007a7c:	50003800 	.word	0x50003800

08007a80 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3320      	adds	r3, #32
 8007a96:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a90      	ldr	r2, [pc, #576]	@ (8007ce0 <HAL_SPI_Transmit+0x260>)
 8007a9e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aa0:	f7fa fb3e 	bl	8002120 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d001      	beq.n	8007ab6 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e1f4      	b.n	8007ea0 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_Transmit+0x42>
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e1ec      	b.n	8007ea0 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_SPI_Transmit+0x54>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e1e5      	b.n	8007ea0 <HAL_SPI_Transmit+0x420>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2203      	movs	r2, #3
 8007ae0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	88fa      	ldrh	r2, [r7, #6]
 8007af6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007b2c:	d108      	bne.n	8007b40 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e009      	b.n	8007b54 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007b52:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	88f9      	ldrh	r1, [r7, #6]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	6812      	ldr	r2, [r2, #0]
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10c      	bne.n	8007ba0 <HAL_SPI_Transmit+0x120>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b8e:	d107      	bne.n	8007ba0 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b0f      	cmp	r3, #15
 8007ba6:	d95b      	bls.n	8007c60 <HAL_SPI_Transmit+0x1e0>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a4d      	ldr	r2, [pc, #308]	@ (8007ce4 <HAL_SPI_Transmit+0x264>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d04f      	beq.n	8007c52 <HAL_SPI_Transmit+0x1d2>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8007ce8 <HAL_SPI_Transmit+0x268>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d04a      	beq.n	8007c52 <HAL_SPI_Transmit+0x1d2>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8007cec <HAL_SPI_Transmit+0x26c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d045      	beq.n	8007c52 <HAL_SPI_Transmit+0x1d2>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a49      	ldr	r2, [pc, #292]	@ (8007cf0 <HAL_SPI_Transmit+0x270>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d147      	bne.n	8007c60 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007bd0:	e03f      	b.n	8007c52 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d114      	bne.n	8007c0a <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf0:	1d1a      	adds	r2, r3, #4
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c08:	e023      	b.n	8007c52 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c0a:	f7fa fa89 	bl	8002120 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d803      	bhi.n	8007c22 <HAL_SPI_Transmit+0x1a2>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d102      	bne.n	8007c28 <HAL_SPI_Transmit+0x1a8>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d114      	bne.n	8007c52 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fe3b 	bl	80088a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e126      	b.n	8007ea0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1b9      	bne.n	8007bd2 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007c5e:	e0f9      	b.n	8007e54 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b07      	cmp	r3, #7
 8007c66:	f240 80ee 	bls.w	8007e46 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007c6a:	e067      	b.n	8007d3c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d13c      	bne.n	8007cf4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d918      	bls.n	8007cb8 <HAL_SPI_Transmit+0x238>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d014      	beq.n	8007cb8 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3b02      	subs	r3, #2
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cb6:	e041      	b.n	8007d3c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cbc:	881a      	ldrh	r2, [r3, #0]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cde:	e02d      	b.n	8007d3c <HAL_SPI_Transmit+0x2bc>
 8007ce0:	46002000 	.word	0x46002000
 8007ce4:	40013000 	.word	0x40013000
 8007ce8:	50013000 	.word	0x50013000
 8007cec:	40003800 	.word	0x40003800
 8007cf0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cf4:	f7fa fa14 	bl	8002120 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d803      	bhi.n	8007d0c <HAL_SPI_Transmit+0x28c>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d102      	bne.n	8007d12 <HAL_SPI_Transmit+0x292>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d114      	bne.n	8007d3c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fdc6 	bl	80088a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e0b1      	b.n	8007ea0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d191      	bne.n	8007c6c <HAL_SPI_Transmit+0x1ec>
 8007d48:	e084      	b.n	8007e54 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d152      	bne.n	8007dfe <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d918      	bls.n	8007d96 <HAL_SPI_Transmit+0x316>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d68:	2b40      	cmp	r3, #64	@ 0x40
 8007d6a:	d914      	bls.n	8007d96 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d7c:	1d1a      	adds	r2, r3, #4
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3b04      	subs	r3, #4
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d94:	e057      	b.n	8007e46 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d917      	bls.n	8007dd2 <HAL_SPI_Transmit+0x352>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d013      	beq.n	8007dd2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dae:	881a      	ldrh	r2, [r3, #0]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007db8:	1c9a      	adds	r2, r3, #2
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3b02      	subs	r3, #2
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dd0:	e039      	b.n	8007e46 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3320      	adds	r3, #32
 8007ddc:	7812      	ldrb	r2, [r2, #0]
 8007dde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dfc:	e023      	b.n	8007e46 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dfe:	f7fa f98f 	bl	8002120 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d803      	bhi.n	8007e16 <HAL_SPI_Transmit+0x396>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d102      	bne.n	8007e1c <HAL_SPI_Transmit+0x39c>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d114      	bne.n	8007e46 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fd41 	bl	80088a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e02c      	b.n	8007ea0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f47f af7b 	bne.w	8007d4a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2108      	movs	r1, #8
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fdc0 	bl	80089e4 <SPI_WaitOnFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e70:	f043 0220 	orr.w	r2, r3, #32
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fd12 	bl	80088a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
  }
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a91      	ldr	r2, [pc, #580]	@ (8008100 <HAL_SPI_TransmitReceive_DMA+0x258>)
 8007ebc:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d001      	beq.n	8007ece <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e274      	b.n	80083b8 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e269      	b.n	80083b8 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d101      	bne.n	8007ef2 <HAL_SPI_TransmitReceive_DMA+0x4a>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e262      	b.n	80083b8 <HAL_SPI_TransmitReceive_DMA+0x510>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2205      	movs	r2, #5
 8007efe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	887a      	ldrh	r2, [r7, #2]
 8007f14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	887a      	ldrh	r2, [r7, #2]
 8007f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	887a      	ldrh	r2, [r7, #2]
 8007f2a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	887a      	ldrh	r2, [r7, #2]
 8007f32:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007f50:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007f60:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	d920      	bls.n	8007fac <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f70:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8007f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f76:	d105      	bne.n	8007f84 <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f7e:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d013      	beq.n	8007fac <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8007f88:	4a5e      	ldr	r2, [pc, #376]	@ (8008104 <HAL_SPI_TransmitReceive_DMA+0x25c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d01e      	beq.n	8007fcc <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a5d      	ldr	r2, [pc, #372]	@ (8008108 <HAL_SPI_TransmitReceive_DMA+0x260>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d019      	beq.n	8007fcc <HAL_SPI_TransmitReceive_DMA+0x124>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800810c <HAL_SPI_TransmitReceive_DMA+0x264>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d014      	beq.n	8007fcc <HAL_SPI_TransmitReceive_DMA+0x124>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8008110 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00f      	beq.n	8007fcc <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007fb0:	2b07      	cmp	r3, #7
 8007fb2:	d911      	bls.n	8007fd8 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fba:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc6:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e1ef      	b.n	80083b8 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	2b07      	cmp	r3, #7
 8007fde:	d842      	bhi.n	8008066 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d109      	bne.n	8008000 <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	105b      	asrs	r3, r3, #1
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d109      	bne.n	8008020 <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008012:	b29b      	uxth	r3, r3
 8008014:	3303      	adds	r3, #3
 8008016:	109b      	asrs	r3, r3, #2
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800802c:	d109      	bne.n	8008042 <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008034:	b29b      	uxth	r3, r3
 8008036:	3301      	adds	r3, #1
 8008038:	105b      	asrs	r3, r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800804e:	d12f      	bne.n	80080b0 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008056:	b29b      	uxth	r3, r3
 8008058:	3303      	adds	r3, #3
 800805a:	109b      	asrs	r3, r3, #2
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008064:	e024      	b.n	80080b0 <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	2b0f      	cmp	r3, #15
 800806c:	d820      	bhi.n	80080b0 <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d109      	bne.n	800808e <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008080:	b29b      	uxth	r3, r3
 8008082:	3301      	adds	r3, #1
 8008084:	105b      	asrs	r3, r3, #1
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800809a:	d109      	bne.n	80080b0 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3301      	adds	r3, #1
 80080a6:	105b      	asrs	r3, r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080b6:	4a17      	ldr	r2, [pc, #92]	@ (8008114 <HAL_SPI_TransmitReceive_DMA+0x26c>)
 80080b8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080c0:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <HAL_SPI_TransmitReceive_DMA+0x270>)
 80080c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ca:	4a14      	ldr	r2, [pc, #80]	@ (800811c <HAL_SPI_TransmitReceive_DMA+0x274>)
 80080cc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d4:	2200      	movs	r2, #0
 80080d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b07      	cmp	r3, #7
 80080de:	d804      	bhi.n	80080ea <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	887a      	ldrh	r2, [r7, #2]
 80080e4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80080e8:	e020      	b.n	800812c <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	2b0f      	cmp	r3, #15
 80080f0:	d816      	bhi.n	8008120 <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 80080f2:	887b      	ldrh	r3, [r7, #2]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80080fe:	e015      	b.n	800812c <HAL_SPI_TransmitReceive_DMA+0x284>
 8008100:	46002000 	.word	0x46002000
 8008104:	40013000 	.word	0x40013000
 8008108:	50013000 	.word	0x50013000
 800810c:	40003800 	.word	0x40003800
 8008110:	50003800 	.word	0x50003800
 8008114:	0800880f 	.word	0x0800880f
 8008118:	080087bd 	.word	0x080087bd
 800811c:	0800882b 	.word	0x0800882b
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 8008120:	887b      	ldrh	r3, [r7, #2]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008138:	2b00      	cmp	r3, #0
 800813a:	d02d      	beq.n	8008198 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008144:	2b00      	cmp	r3, #0
 8008146:	d024      	beq.n	8008192 <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800816a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800817a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008186:	4618      	mov	r0, r3
 8008188:	f7fb f824 	bl	80031d4 <HAL_DMAEx_List_Start_IT>
 800818c:	4603      	mov	r3, r0
 800818e:	75fb      	strb	r3, [r7, #23]
 8008190:	e014      	b.n	80081bc <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	75fb      	strb	r3, [r7, #23]
 8008196:	e011      	b.n	80081bc <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3330      	adds	r3, #48	@ 0x30
 80081a4:	4619      	mov	r1, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081aa:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80081b2:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80081b4:	f7fa faba 	bl	800272c <HAL_DMA_Start_IT>
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d011      	beq.n	80081e6 <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081c8:	f043 0210 	orr.w	r2, r3, #16
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e0e8      	b.n	80083b8 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081f4:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081fc:	2200      	movs	r2, #0
 80081fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008206:	2200      	movs	r2, #0
 8008208:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008210:	2200      	movs	r2, #0
 8008212:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800821a:	4a69      	ldr	r2, [pc, #420]	@ (80083c0 <HAL_SPI_TransmitReceive_DMA+0x518>)
 800821c:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	2b07      	cmp	r3, #7
 8008224:	d804      	bhi.n	8008230 <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	887a      	ldrh	r2, [r7, #2]
 800822a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800822e:	e010      	b.n	8008252 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d806      	bhi.n	8008246 <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 8008238:	887b      	ldrh	r3, [r7, #2]
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008244:	e005      	b.n	8008252 <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8008246:	887b      	ldrh	r3, [r7, #2]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800825a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825e:	2b00      	cmp	r3, #0
 8008260:	d02d      	beq.n	80082be <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800826a:	2b00      	cmp	r3, #0
 800826c:	d024      	beq.n	80082b8 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800827c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f103 0220 	add.w	r2, r3, #32
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fa ff91 	bl	80031d4 <HAL_DMAEx_List_Start_IT>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
 80082b6:	e014      	b.n	80082e2 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
 80082bc:	e011      	b.n	80082e2 <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082c8:	4619      	mov	r1, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3320      	adds	r3, #32
 80082d0:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082d8:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80082da:	f7fa fa27 	bl	800272c <HAL_DMA_Start_IT>
 80082de:	4603      	mov	r3, r0
 80082e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d017      	beq.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa fa7c 	bl	80027ec <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082fa:	f043 0210 	orr.w	r2, r3, #16
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e04f      	b.n	80083b8 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800831e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008320:	2b81      	cmp	r3, #129	@ 0x81
 8008322:	d10e      	bne.n	8008342 <HAL_SPI_TransmitReceive_DMA+0x49a>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800832a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832c:	2b81      	cmp	r3, #129	@ 0x81
 800832e:	d108      	bne.n	8008342 <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	0c1b      	lsrs	r3, r3, #16
 800833c:	041b      	lsls	r3, r3, #16
 800833e:	6053      	str	r3, [r2, #4]
 8008340:	e009      	b.n	8008356 <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	0c1b      	lsrs	r3, r3, #16
 800834a:	041b      	lsls	r3, r3, #16
 800834c:	8879      	ldrh	r1, [r7, #2]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	6812      	ldr	r2, [r2, #0]
 8008352:	430b      	orrs	r3, r1
 8008354:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008364:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8008374:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f042 0201 	orr.w	r2, r2, #1
 8008384:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10c      	bne.n	80083ae <HAL_SPI_TransmitReceive_DMA+0x506>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800839c:	d107      	bne.n	80083ae <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083ac:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	0800882b 	.word	0x0800882b

080083c4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	@ 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80083dc:	6a3a      	ldr	r2, [r7, #32]
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4013      	ands	r3, r2
 80083e2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083f6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3330      	adds	r3, #48	@ 0x30
 80083fe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008406:	2b00      	cmp	r3, #0
 8008408:	d010      	beq.n	800842c <HAL_SPI_IRQHandler+0x68>
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008422:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f9bf 	bl	80087a8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800842a:	e19a      	b.n	8008762 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d113      	bne.n	800845e <HAL_SPI_IRQHandler+0x9a>
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10e      	bne.n	800845e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008446:	2b00      	cmp	r3, #0
 8008448:	d009      	beq.n	800845e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
    handled = 1UL;
 800845a:	2301      	movs	r3, #1
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10f      	bne.n	8008488 <HAL_SPI_IRQHandler+0xc4>
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008478:	2b00      	cmp	r3, #0
 800847a:	d105      	bne.n	8008488 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
    handled = 1UL;
 8008484:	2301      	movs	r3, #1
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10f      	bne.n	80084b2 <HAL_SPI_IRQHandler+0xee>
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
    handled = 1UL;
 80084ae:	2301      	movs	r3, #1
 80084b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f040 814f 	bne.w	8008758 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 808b 	beq.w	80085dc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0208 	orr.w	r2, r2, #8
 80084d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0210 	orr.w	r2, r2, #16
 80084e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699a      	ldr	r2, [r3, #24]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0208 	bic.w	r2, r2, #8
 8008504:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d13d      	bne.n	8008590 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008514:	e036      	b.n	8008584 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	2b0f      	cmp	r3, #15
 800851c:	d90b      	bls.n	8008536 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008526:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008528:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800852e:	1d1a      	adds	r2, r3, #4
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008534:	e01d      	b.n	8008572 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	2b07      	cmp	r3, #7
 800853c:	d90b      	bls.n	8008556 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	8812      	ldrh	r2, [r2, #0]
 8008546:	b292      	uxth	r2, r2
 8008548:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854e:	1c9a      	adds	r2, r3, #2
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008554:	e00d      	b.n	8008572 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008578:	b29b      	uxth	r3, r3
 800857a:	3b01      	subs	r3, #1
 800857c:	b29a      	uxth	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800858a:	b29b      	uxth	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1c2      	bne.n	8008516 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f987 	bl	80088a4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7f8 ff17 	bl	80013dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80085ae:	e0d8      	b.n	8008762 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80085b0:	7cfb      	ldrb	r3, [r7, #19]
 80085b2:	2b05      	cmp	r3, #5
 80085b4:	d103      	bne.n	80085be <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7f8 fef2 	bl	80013a0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80085bc:	e0ce      	b.n	800875c <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80085be:	7cfb      	ldrb	r3, [r7, #19]
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d103      	bne.n	80085cc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f8db 	bl	8008780 <HAL_SPI_RxCpltCallback>
    return;
 80085ca:	e0c7      	b.n	800875c <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80085cc:	7cfb      	ldrb	r3, [r7, #19]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	f040 80c4 	bne.w	800875c <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f8c9 	bl	800876c <HAL_SPI_TxCpltCallback>
    return;
 80085da:	e0bf      	b.n	800875c <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 80bd 	beq.w	8008762 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00f      	beq.n	8008612 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085f8:	f043 0204 	orr.w	r2, r3, #4
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008610:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00f      	beq.n	800863c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008622:	f043 0201 	orr.w	r2, r3, #1
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699a      	ldr	r2, [r3, #24]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800863a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00f      	beq.n	8008666 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800864c:	f043 0208 	orr.w	r2, r3, #8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	699a      	ldr	r2, [r3, #24]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008664:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00f      	beq.n	8008690 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008676:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0220 	orr.w	r2, r2, #32
 800868e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d062      	beq.n	8008760 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0201 	bic.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6812      	ldr	r2, [r2, #0]
 80086b4:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 80086b8:	f023 0303 	bic.w	r3, r3, #3
 80086bc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80086c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80086c8:	d13e      	bne.n	8008748 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80086d8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d015      	beq.n	8008710 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008768 <HAL_SPI_IRQHandler+0x3a4>)
 80086ec:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fa f8f5 	bl	80028e4 <HAL_DMA_Abort_IT>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d007      	beq.n	8008710 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008716:	2b00      	cmp	r3, #0
 8008718:	d022      	beq.n	8008760 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008720:	4a11      	ldr	r2, [pc, #68]	@ (8008768 <HAL_SPI_IRQHandler+0x3a4>)
 8008722:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800872a:	4618      	mov	r0, r3
 800872c:	f7fa f8da 	bl	80028e4 <HAL_DMA_Abort_IT>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d014      	beq.n	8008760 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800873c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008746:	e00b      	b.n	8008760 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7f8 fe43 	bl	80013dc <HAL_SPI_ErrorCallback>
    return;
 8008756:	e003      	b.n	8008760 <HAL_SPI_IRQHandler+0x39c>
    return;
 8008758:	bf00      	nop
 800875a:	e002      	b.n	8008762 <HAL_SPI_IRQHandler+0x39e>
    return;
 800875c:	bf00      	nop
 800875e:	e000      	b.n	8008762 <HAL_SPI_IRQHandler+0x39e>
    return;
 8008760:	bf00      	nop
  }
}
 8008762:	3728      	adds	r7, #40	@ 0x28
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	08008871 	.word	0x08008871

0800876c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087c8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b07      	cmp	r3, #7
 80087d4:	d017      	beq.n	8008806 <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087de:	2b81      	cmp	r3, #129	@ 0x81
 80087e0:	d109      	bne.n	80087f6 <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 80087ea:	2b81      	cmp	r3, #129	@ 0x81
 80087ec:	d103      	bne.n	80087f6 <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7f8 fdd6 	bl	80013a0 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80087f4:	e007      	b.n	8008806 <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f042 0208 	orr.w	r2, r2, #8
 8008804:	611a      	str	r2, [r3, #16]
}
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800881a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff ffb9 	bl	8008794 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008836:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fa f9dd 	bl	8002bf8 <HAL_DMA_GetError>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d011      	beq.n	8008868 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 f82d 	bl	80088a4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008850:	f043 0210 	orr.w	r2, r3, #16
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7f8 fdba 	bl	80013dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008868:	bf00      	nop
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800887c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7f8 fda0 	bl	80013dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800889c:	bf00      	nop
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0208 	orr.w	r2, r2, #8
 80088c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0210 	orr.w	r2, r2, #16
 80088d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0201 	bic.w	r2, r2, #1
 80088e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008906:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b04      	cmp	r3, #4
 8008912:	d014      	beq.n	800893e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00f      	beq.n	800893e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008924:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	699a      	ldr	r2, [r3, #24]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f042 0220 	orr.w	r2, r2, #32
 800893c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b03      	cmp	r3, #3
 8008948:	d014      	beq.n	8008974 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00f      	beq.n	8008974 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800895a:	f043 0204 	orr.w	r2, r3, #4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008972:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00f      	beq.n	800899e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008984:	f043 0201 	orr.w	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699a      	ldr	r2, [r3, #24]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800899c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00f      	beq.n	80089c8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ae:	f043 0208 	orr.w	r2, r3, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	603b      	str	r3, [r7, #0]
 80089f0:	4613      	mov	r3, r2
 80089f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80089f4:	e010      	b.n	8008a18 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f6:	f7f9 fb93 	bl	8002120 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d803      	bhi.n	8008a0e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d102      	bne.n	8008a14 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e00f      	b.n	8008a38 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695a      	ldr	r2, [r3, #20]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4013      	ands	r3, r2
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d0df      	beq.n	80089f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4c:	095b      	lsrs	r3, r3, #5
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	3307      	adds	r3, #7
 8008a5e:	08db      	lsrs	r3, r3, #3
 8008a60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d12e      	bne.n	8008aea <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e028      	b.n	8008aec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0201 	bic.w	r2, r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008ac6:	ea42 0103 	orr.w	r1, r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e000      	b.n	8008aec <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
  }
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e042      	b.n	8008b90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d106      	bne.n	8008b22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7f8 fff3 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2224      	movs	r2, #36	@ 0x24
 8008b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0201 	bic.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa68 	bl	8009018 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f8c3 	bl	8008cd4 <UART_SetConfig>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e01b      	b.n	8008b90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fae7 	bl	800915c <UART_CheckIdleState>
 8008b8e:	4603      	mov	r3, r0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	@ 0x28
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	f040 808b 	bne.w	8008cca <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_UART_Transmit+0x28>
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e083      	b.n	8008ccc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bce:	2b80      	cmp	r3, #128	@ 0x80
 8008bd0:	d107      	bne.n	8008be2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008be0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2221      	movs	r2, #33	@ 0x21
 8008bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bf2:	f7f9 fa95 	bl	8002120 <HAL_GetTick>
 8008bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	88fa      	ldrh	r2, [r7, #6]
 8008bfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	88fa      	ldrh	r2, [r7, #6]
 8008c04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c10:	d108      	bne.n	8008c24 <HAL_UART_Transmit+0x8c>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	e003      	b.n	8008c2c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c2c:	e030      	b.n	8008c90 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2200      	movs	r2, #0
 8008c36:	2180      	movs	r1, #128	@ 0x80
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 fb39 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d005      	beq.n	8008c50 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e03d      	b.n	8008ccc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	3302      	adds	r3, #2
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	e007      	b.n	8008c7e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1c8      	bne.n	8008c2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2140      	movs	r1, #64	@ 0x40
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 fb02 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d005      	beq.n	8008cbe <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e006      	b.n	8008ccc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e000      	b.n	8008ccc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008cca:	2302      	movs	r3, #2
  }
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cd8:	b094      	sub	sp, #80	@ 0x50
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8008ee4 <UART_SetConfig+0x210>)
 8008cea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4977      	ldr	r1, [pc, #476]	@ (8008ee8 <UART_SetConfig+0x214>)
 8008d0c:	4019      	ands	r1, r3
 8008d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d14:	430b      	orrs	r3, r1
 8008d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d24:	68d9      	ldr	r1, [r3, #12]
 8008d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	ea40 0301 	orr.w	r3, r0, r1
 8008d2e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee4 <UART_SetConfig+0x210>)
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d009      	beq.n	8008d54 <UART_SetConfig+0x80>
 8008d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	4b69      	ldr	r3, [pc, #420]	@ (8008eec <UART_SetConfig+0x218>)
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d004      	beq.n	8008d54 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4c:	6a1a      	ldr	r2, [r3, #32]
 8008d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d50:	4313      	orrs	r3, r2
 8008d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008d5e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d72:	f023 000f 	bic.w	r0, r3, #15
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	ea40 0301 	orr.w	r3, r0, r1
 8008d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	4b59      	ldr	r3, [pc, #356]	@ (8008ef0 <UART_SetConfig+0x21c>)
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d102      	bne.n	8008d94 <UART_SetConfig+0xc0>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d92:	e029      	b.n	8008de8 <UART_SetConfig+0x114>
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4b56      	ldr	r3, [pc, #344]	@ (8008ef4 <UART_SetConfig+0x220>)
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d102      	bne.n	8008da4 <UART_SetConfig+0xd0>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008da2:	e021      	b.n	8008de8 <UART_SetConfig+0x114>
 8008da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4b53      	ldr	r3, [pc, #332]	@ (8008ef8 <UART_SetConfig+0x224>)
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d102      	bne.n	8008db4 <UART_SetConfig+0xe0>
 8008dae:	2304      	movs	r3, #4
 8008db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008db2:	e019      	b.n	8008de8 <UART_SetConfig+0x114>
 8008db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b50      	ldr	r3, [pc, #320]	@ (8008efc <UART_SetConfig+0x228>)
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d102      	bne.n	8008dc4 <UART_SetConfig+0xf0>
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dc2:	e011      	b.n	8008de8 <UART_SetConfig+0x114>
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8008f00 <UART_SetConfig+0x22c>)
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d102      	bne.n	8008dd4 <UART_SetConfig+0x100>
 8008dce:	2310      	movs	r3, #16
 8008dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dd2:	e009      	b.n	8008de8 <UART_SetConfig+0x114>
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	4b42      	ldr	r3, [pc, #264]	@ (8008ee4 <UART_SetConfig+0x210>)
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d102      	bne.n	8008de4 <UART_SetConfig+0x110>
 8008dde:	2320      	movs	r3, #32
 8008de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008de2:	e001      	b.n	8008de8 <UART_SetConfig+0x114>
 8008de4:	2300      	movs	r3, #0
 8008de6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	4b3d      	ldr	r3, [pc, #244]	@ (8008ee4 <UART_SetConfig+0x210>)
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d005      	beq.n	8008dfe <UART_SetConfig+0x12a>
 8008df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	4b3d      	ldr	r3, [pc, #244]	@ (8008eec <UART_SetConfig+0x218>)
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	f040 8085 	bne.w	8008f08 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e00:	2200      	movs	r2, #0
 8008e02:	623b      	str	r3, [r7, #32]
 8008e04:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e0a:	f7fd fa11 	bl	8006230 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e0e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80e8 	beq.w	8008fe8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	4a39      	ldr	r2, [pc, #228]	@ (8008f04 <UART_SetConfig+0x230>)
 8008e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e22:	461a      	mov	r2, r3
 8008e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e2a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	4413      	add	r3, r2
 8008e36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d305      	bcc.n	8008e48 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d903      	bls.n	8008e50 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e4e:	e048      	b.n	8008ee2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e52:	2200      	movs	r2, #0
 8008e54:	61bb      	str	r3, [r7, #24]
 8008e56:	61fa      	str	r2, [r7, #28]
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	4a29      	ldr	r2, [pc, #164]	@ (8008f04 <UART_SetConfig+0x230>)
 8008e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	2200      	movs	r2, #0
 8008e66:	613b      	str	r3, [r7, #16]
 8008e68:	617a      	str	r2, [r7, #20]
 8008e6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e72:	f7f7 fa01 	bl	8000278 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	020b      	lsls	r3, r1, #8
 8008e88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e8c:	0202      	lsls	r2, r0, #8
 8008e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e90:	6849      	ldr	r1, [r1, #4]
 8008e92:	0849      	lsrs	r1, r1, #1
 8008e94:	2000      	movs	r0, #0
 8008e96:	460c      	mov	r4, r1
 8008e98:	4605      	mov	r5, r0
 8008e9a:	eb12 0804 	adds.w	r8, r2, r4
 8008e9e:	eb43 0905 	adc.w	r9, r3, r5
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	60bb      	str	r3, [r7, #8]
 8008eaa:	60fa      	str	r2, [r7, #12]
 8008eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 f9e0 	bl	8000278 <__aeabi_uldivmod>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ec6:	d308      	bcc.n	8008eda <UART_SetConfig+0x206>
 8008ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ece:	d204      	bcs.n	8008eda <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ed6:	60da      	str	r2, [r3, #12]
 8008ed8:	e003      	b.n	8008ee2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008ee0:	e082      	b.n	8008fe8 <UART_SetConfig+0x314>
 8008ee2:	e081      	b.n	8008fe8 <UART_SetConfig+0x314>
 8008ee4:	46002400 	.word	0x46002400
 8008ee8:	cfff69f3 	.word	0xcfff69f3
 8008eec:	56002400 	.word	0x56002400
 8008ef0:	40013800 	.word	0x40013800
 8008ef4:	40004400 	.word	0x40004400
 8008ef8:	40004800 	.word	0x40004800
 8008efc:	40004c00 	.word	0x40004c00
 8008f00:	40005000 	.word	0x40005000
 8008f04:	0800a184 	.word	0x0800a184
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0a:	69db      	ldr	r3, [r3, #28]
 8008f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f10:	d13c      	bne.n	8008f8c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f14:	2200      	movs	r2, #0
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f1e:	f7fd f987 	bl	8006230 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f22:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d05e      	beq.n	8008fe8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2e:	4a39      	ldr	r2, [pc, #228]	@ (8009014 <UART_SetConfig+0x340>)
 8008f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f34:	461a      	mov	r2, r3
 8008f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f3c:	005a      	lsls	r2, r3, #1
 8008f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	085b      	lsrs	r3, r3, #1
 8008f44:	441a      	add	r2, r3
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f52:	2b0f      	cmp	r3, #15
 8008f54:	d916      	bls.n	8008f84 <UART_SetConfig+0x2b0>
 8008f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f5c:	d212      	bcs.n	8008f84 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	f023 030f 	bic.w	r3, r3, #15
 8008f66:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f6a:	085b      	lsrs	r3, r3, #1
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008f76:	4313      	orrs	r3, r2
 8008f78:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008f80:	60da      	str	r2, [r3, #12]
 8008f82:	e031      	b.n	8008fe8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f8a:	e02d      	b.n	8008fe8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f8e:	2200      	movs	r2, #0
 8008f90:	469a      	mov	sl, r3
 8008f92:	4693      	mov	fp, r2
 8008f94:	4650      	mov	r0, sl
 8008f96:	4659      	mov	r1, fp
 8008f98:	f7fd f94a 	bl	8006230 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f9c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d021      	beq.n	8008fe8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8009014 <UART_SetConfig+0x340>)
 8008faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	441a      	add	r2, r3
 8008fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fca:	2b0f      	cmp	r3, #15
 8008fcc:	d909      	bls.n	8008fe2 <UART_SetConfig+0x30e>
 8008fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fd4:	d205      	bcs.n	8008fe2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60da      	str	r2, [r3, #12]
 8008fe0:	e002      	b.n	8008fe8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fea:	2201      	movs	r2, #1
 8008fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009000:	2200      	movs	r2, #0
 8009002:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009004:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009008:	4618      	mov	r0, r3
 800900a:	3750      	adds	r7, #80	@ 0x50
 800900c:	46bd      	mov	sp, r7
 800900e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009012:	bf00      	nop
 8009014:	0800a184 	.word	0x0800a184

08009018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908a:	f003 0304 	and.w	r3, r3, #4
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00a      	beq.n	80090ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d01a      	beq.n	800912e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009116:	d10a      	bne.n	800912e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	605a      	str	r2, [r3, #4]
  }
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b098      	sub	sp, #96	@ 0x60
 8009160:	af02      	add	r7, sp, #8
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800916c:	f7f8 ffd8 	bl	8002120 <HAL_GetTick>
 8009170:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0308 	and.w	r3, r3, #8
 800917c:	2b08      	cmp	r3, #8
 800917e:	d12f      	bne.n	80091e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009180:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009188:	2200      	movs	r2, #0
 800918a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f88e 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d022      	beq.n	80091e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	461a      	mov	r2, r3
 80091b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091c0:	e841 2300 	strex	r3, r2, [r1]
 80091c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e6      	bne.n	800919a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e063      	b.n	80092a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d149      	bne.n	8009282 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091f6:	2200      	movs	r2, #0
 80091f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f857 	bl	80092b0 <UART_WaitOnFlagUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d03c      	beq.n	8009282 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	623b      	str	r3, [r7, #32]
   return(result);
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800921c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009226:	633b      	str	r3, [r7, #48]	@ 0x30
 8009228:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800922c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e6      	bne.n	8009208 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	60fb      	str	r3, [r7, #12]
   return(result);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800925a:	61fa      	str	r2, [r7, #28]
 800925c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	69b9      	ldr	r1, [r7, #24]
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	617b      	str	r3, [r7, #20]
   return(result);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e5      	bne.n	800923a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e012      	b.n	80092a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3758      	adds	r7, #88	@ 0x58
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	603b      	str	r3, [r7, #0]
 80092bc:	4613      	mov	r3, r2
 80092be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092c0:	e04f      	b.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c8:	d04b      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ca:	f7f8 ff29 	bl	8002120 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d302      	bcc.n	80092e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e04e      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d037      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b80      	cmp	r3, #128	@ 0x80
 80092f6:	d034      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2b40      	cmp	r3, #64	@ 0x40
 80092fc:	d031      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b08      	cmp	r3, #8
 800930a:	d110      	bne.n	800932e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2208      	movs	r2, #8
 8009312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f838 	bl	800938a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2208      	movs	r2, #8
 800931e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e029      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800933c:	d111      	bne.n	8009362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 f81e 	bl	800938a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e00f      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	4013      	ands	r3, r2
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	429a      	cmp	r2, r3
 8009370:	bf0c      	ite	eq
 8009372:	2301      	moveq	r3, #1
 8009374:	2300      	movne	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	429a      	cmp	r2, r3
 800937e:	d0a0      	beq.n	80092c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800938a:	b480      	push	{r7}
 800938c:	b095      	sub	sp, #84	@ 0x54
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80093b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e6      	bne.n	8009392 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093da:	f023 0301 	bic.w	r3, r3, #1
 80093de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e3      	bne.n	80093c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d118      	bne.n	8009436 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	60bb      	str	r3, [r7, #8]
   return(result);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f023 0310 	bic.w	r3, r3, #16
 8009418:	647b      	str	r3, [r7, #68]	@ 0x44
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009422:	61bb      	str	r3, [r7, #24]
 8009424:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6979      	ldr	r1, [r7, #20]
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	613b      	str	r3, [r7, #16]
   return(result);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e6      	bne.n	8009404 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800944a:	bf00      	nop
 800944c:	3754      	adds	r7, #84	@ 0x54
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009464:	2b01      	cmp	r3, #1
 8009466:	d101      	bne.n	800946c <HAL_UARTEx_DisableFifoMode+0x16>
 8009468:	2302      	movs	r3, #2
 800946a:	e027      	b.n	80094bc <HAL_UARTEx_DisableFifoMode+0x66>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2224      	movs	r2, #36	@ 0x24
 8009478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0201 	bic.w	r2, r2, #1
 8009492:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800949a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094dc:	2302      	movs	r3, #2
 80094de:	e02d      	b.n	800953c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2224      	movs	r2, #36	@ 0x24
 80094ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0201 	bic.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f84f 	bl	80095c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009554:	2b01      	cmp	r3, #1
 8009556:	d101      	bne.n	800955c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009558:	2302      	movs	r3, #2
 800955a:	e02d      	b.n	80095b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2224      	movs	r2, #36	@ 0x24
 8009568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 0201 	bic.w	r2, r2, #1
 8009582:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f811 	bl	80095c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d108      	bne.n	80095e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095e0:	e031      	b.n	8009646 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095e2:	2308      	movs	r3, #8
 80095e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095e6:	2308      	movs	r3, #8
 80095e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	0e5b      	lsrs	r3, r3, #25
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	0f5b      	lsrs	r3, r3, #29
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800960a:	7bbb      	ldrb	r3, [r7, #14]
 800960c:	7b3a      	ldrb	r2, [r7, #12]
 800960e:	4911      	ldr	r1, [pc, #68]	@ (8009654 <UARTEx_SetNbDataToProcess+0x94>)
 8009610:	5c8a      	ldrb	r2, [r1, r2]
 8009612:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009616:	7b3a      	ldrb	r2, [r7, #12]
 8009618:	490f      	ldr	r1, [pc, #60]	@ (8009658 <UARTEx_SetNbDataToProcess+0x98>)
 800961a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800961c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009620:	b29a      	uxth	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	7b7a      	ldrb	r2, [r7, #13]
 800962c:	4909      	ldr	r1, [pc, #36]	@ (8009654 <UARTEx_SetNbDataToProcess+0x94>)
 800962e:	5c8a      	ldrb	r2, [r1, r2]
 8009630:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009634:	7b7a      	ldrb	r2, [r7, #13]
 8009636:	4908      	ldr	r1, [pc, #32]	@ (8009658 <UARTEx_SetNbDataToProcess+0x98>)
 8009638:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800963a:	fb93 f3f2 	sdiv	r3, r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	0800a19c 	.word	0x0800a19c
 8009658:	0800a1a4 	.word	0x0800a1a4

0800965c <sniprintf>:
 800965c:	b40c      	push	{r2, r3}
 800965e:	4b19      	ldr	r3, [pc, #100]	@ (80096c4 <sniprintf+0x68>)
 8009660:	b530      	push	{r4, r5, lr}
 8009662:	1e0c      	subs	r4, r1, #0
 8009664:	b09d      	sub	sp, #116	@ 0x74
 8009666:	681d      	ldr	r5, [r3, #0]
 8009668:	da08      	bge.n	800967c <sniprintf+0x20>
 800966a:	238b      	movs	r3, #139	@ 0x8b
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	b01d      	add	sp, #116	@ 0x74
 8009674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009678:	b002      	add	sp, #8
 800967a:	4770      	bx	lr
 800967c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009680:	9002      	str	r0, [sp, #8]
 8009682:	9006      	str	r0, [sp, #24]
 8009684:	a902      	add	r1, sp, #8
 8009686:	f8ad 3014 	strh.w	r3, [sp, #20]
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009690:	4628      	mov	r0, r5
 8009692:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009694:	bf14      	ite	ne
 8009696:	f104 33ff 	addne.w	r3, r4, #4294967295
 800969a:	4623      	moveq	r3, r4
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096a8:	ab21      	add	r3, sp, #132	@ 0x84
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	f000 f9a2 	bl	80099f4 <_svfiprintf_r>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	bfbc      	itt	lt
 80096b4:	238b      	movlt	r3, #139	@ 0x8b
 80096b6:	602b      	strlt	r3, [r5, #0]
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	d0da      	beq.n	8009672 <sniprintf+0x16>
 80096bc:	9b02      	ldr	r3, [sp, #8]
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e7d6      	b.n	8009672 <sniprintf+0x16>
 80096c4:	20000010 	.word	0x20000010

080096c8 <memset>:
 80096c8:	4402      	add	r2, r0
 80096ca:	4603      	mov	r3, r0
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d100      	bne.n	80096d2 <memset+0xa>
 80096d0:	4770      	bx	lr
 80096d2:	f803 1b01 	strb.w	r1, [r3], #1
 80096d6:	e7f9      	b.n	80096cc <memset+0x4>

080096d8 <__errno>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	@ (80096e0 <__errno+0x8>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	20000010 	.word	0x20000010

080096e4 <__libc_init_array>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	4d0d      	ldr	r5, [pc, #52]	@ (800971c <__libc_init_array+0x38>)
 80096e8:	2600      	movs	r6, #0
 80096ea:	4c0d      	ldr	r4, [pc, #52]	@ (8009720 <__libc_init_array+0x3c>)
 80096ec:	1b64      	subs	r4, r4, r5
 80096ee:	10a4      	asrs	r4, r4, #2
 80096f0:	42a6      	cmp	r6, r4
 80096f2:	d109      	bne.n	8009708 <__libc_init_array+0x24>
 80096f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009724 <__libc_init_array+0x40>)
 80096f6:	2600      	movs	r6, #0
 80096f8:	4c0b      	ldr	r4, [pc, #44]	@ (8009728 <__libc_init_array+0x44>)
 80096fa:	f000 fc75 	bl	8009fe8 <_init>
 80096fe:	1b64      	subs	r4, r4, r5
 8009700:	10a4      	asrs	r4, r4, #2
 8009702:	42a6      	cmp	r6, r4
 8009704:	d105      	bne.n	8009712 <__libc_init_array+0x2e>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	f855 3b04 	ldr.w	r3, [r5], #4
 800970c:	3601      	adds	r6, #1
 800970e:	4798      	blx	r3
 8009710:	e7ee      	b.n	80096f0 <__libc_init_array+0xc>
 8009712:	f855 3b04 	ldr.w	r3, [r5], #4
 8009716:	3601      	adds	r6, #1
 8009718:	4798      	blx	r3
 800971a:	e7f2      	b.n	8009702 <__libc_init_array+0x1e>
 800971c:	0800a1e8 	.word	0x0800a1e8
 8009720:	0800a1e8 	.word	0x0800a1e8
 8009724:	0800a1e8 	.word	0x0800a1e8
 8009728:	0800a1ec 	.word	0x0800a1ec

0800972c <__retarget_lock_acquire_recursive>:
 800972c:	4770      	bx	lr

0800972e <__retarget_lock_release_recursive>:
 800972e:	4770      	bx	lr

08009730 <memcpy>:
 8009730:	440a      	add	r2, r1
 8009732:	1e43      	subs	r3, r0, #1
 8009734:	4291      	cmp	r1, r2
 8009736:	d100      	bne.n	800973a <memcpy+0xa>
 8009738:	4770      	bx	lr
 800973a:	b510      	push	{r4, lr}
 800973c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009740:	4291      	cmp	r1, r2
 8009742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009746:	d1f9      	bne.n	800973c <memcpy+0xc>
 8009748:	bd10      	pop	{r4, pc}
	...

0800974c <_free_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4605      	mov	r5, r0
 8009750:	2900      	cmp	r1, #0
 8009752:	d041      	beq.n	80097d8 <_free_r+0x8c>
 8009754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009758:	1f0c      	subs	r4, r1, #4
 800975a:	2b00      	cmp	r3, #0
 800975c:	bfb8      	it	lt
 800975e:	18e4      	addlt	r4, r4, r3
 8009760:	f000 f8e0 	bl	8009924 <__malloc_lock>
 8009764:	4a1d      	ldr	r2, [pc, #116]	@ (80097dc <_free_r+0x90>)
 8009766:	6813      	ldr	r3, [r2, #0]
 8009768:	b933      	cbnz	r3, 8009778 <_free_r+0x2c>
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	6014      	str	r4, [r2, #0]
 800976e:	4628      	mov	r0, r5
 8009770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009774:	f000 b8dc 	b.w	8009930 <__malloc_unlock>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d908      	bls.n	800978e <_free_r+0x42>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	1821      	adds	r1, r4, r0
 8009780:	428b      	cmp	r3, r1
 8009782:	bf01      	itttt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	1809      	addeq	r1, r1, r0
 800978a:	6021      	streq	r1, [r4, #0]
 800978c:	e7ed      	b.n	800976a <_free_r+0x1e>
 800978e:	461a      	mov	r2, r3
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b10b      	cbz	r3, 8009798 <_free_r+0x4c>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d9fa      	bls.n	800978e <_free_r+0x42>
 8009798:	6811      	ldr	r1, [r2, #0]
 800979a:	1850      	adds	r0, r2, r1
 800979c:	42a0      	cmp	r0, r4
 800979e:	d10b      	bne.n	80097b8 <_free_r+0x6c>
 80097a0:	6820      	ldr	r0, [r4, #0]
 80097a2:	4401      	add	r1, r0
 80097a4:	1850      	adds	r0, r2, r1
 80097a6:	6011      	str	r1, [r2, #0]
 80097a8:	4283      	cmp	r3, r0
 80097aa:	d1e0      	bne.n	800976e <_free_r+0x22>
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4408      	add	r0, r1
 80097b2:	6053      	str	r3, [r2, #4]
 80097b4:	6010      	str	r0, [r2, #0]
 80097b6:	e7da      	b.n	800976e <_free_r+0x22>
 80097b8:	d902      	bls.n	80097c0 <_free_r+0x74>
 80097ba:	230c      	movs	r3, #12
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	e7d6      	b.n	800976e <_free_r+0x22>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	1821      	adds	r1, r4, r0
 80097c4:	428b      	cmp	r3, r1
 80097c6:	bf02      	ittt	eq
 80097c8:	6819      	ldreq	r1, [r3, #0]
 80097ca:	685b      	ldreq	r3, [r3, #4]
 80097cc:	1809      	addeq	r1, r1, r0
 80097ce:	6063      	str	r3, [r4, #4]
 80097d0:	bf08      	it	eq
 80097d2:	6021      	streq	r1, [r4, #0]
 80097d4:	6054      	str	r4, [r2, #4]
 80097d6:	e7ca      	b.n	800976e <_free_r+0x22>
 80097d8:	bd38      	pop	{r3, r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	20000654 	.word	0x20000654

080097e0 <sbrk_aligned>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4e0f      	ldr	r6, [pc, #60]	@ (8009820 <sbrk_aligned+0x40>)
 80097e4:	460c      	mov	r4, r1
 80097e6:	4605      	mov	r5, r0
 80097e8:	6831      	ldr	r1, [r6, #0]
 80097ea:	b911      	cbnz	r1, 80097f2 <sbrk_aligned+0x12>
 80097ec:	f000 fba8 	bl	8009f40 <_sbrk_r>
 80097f0:	6030      	str	r0, [r6, #0]
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f000 fba3 	bl	8009f40 <_sbrk_r>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	d103      	bne.n	8009806 <sbrk_aligned+0x26>
 80097fe:	f04f 34ff 	mov.w	r4, #4294967295
 8009802:	4620      	mov	r0, r4
 8009804:	bd70      	pop	{r4, r5, r6, pc}
 8009806:	1cc4      	adds	r4, r0, #3
 8009808:	f024 0403 	bic.w	r4, r4, #3
 800980c:	42a0      	cmp	r0, r4
 800980e:	d0f8      	beq.n	8009802 <sbrk_aligned+0x22>
 8009810:	1a21      	subs	r1, r4, r0
 8009812:	4628      	mov	r0, r5
 8009814:	f000 fb94 	bl	8009f40 <_sbrk_r>
 8009818:	3001      	adds	r0, #1
 800981a:	d1f2      	bne.n	8009802 <sbrk_aligned+0x22>
 800981c:	e7ef      	b.n	80097fe <sbrk_aligned+0x1e>
 800981e:	bf00      	nop
 8009820:	20000650 	.word	0x20000650

08009824 <_malloc_r>:
 8009824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	1ccd      	adds	r5, r1, #3
 800982a:	4606      	mov	r6, r0
 800982c:	f025 0503 	bic.w	r5, r5, #3
 8009830:	3508      	adds	r5, #8
 8009832:	2d0c      	cmp	r5, #12
 8009834:	bf38      	it	cc
 8009836:	250c      	movcc	r5, #12
 8009838:	2d00      	cmp	r5, #0
 800983a:	db01      	blt.n	8009840 <_malloc_r+0x1c>
 800983c:	42a9      	cmp	r1, r5
 800983e:	d904      	bls.n	800984a <_malloc_r+0x26>
 8009840:	230c      	movs	r3, #12
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	2000      	movs	r0, #0
 8009846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009920 <_malloc_r+0xfc>
 800984e:	f000 f869 	bl	8009924 <__malloc_lock>
 8009852:	f8d8 3000 	ldr.w	r3, [r8]
 8009856:	461c      	mov	r4, r3
 8009858:	bb44      	cbnz	r4, 80098ac <_malloc_r+0x88>
 800985a:	4629      	mov	r1, r5
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff ffbf 	bl	80097e0 <sbrk_aligned>
 8009862:	1c43      	adds	r3, r0, #1
 8009864:	4604      	mov	r4, r0
 8009866:	d158      	bne.n	800991a <_malloc_r+0xf6>
 8009868:	f8d8 4000 	ldr.w	r4, [r8]
 800986c:	4627      	mov	r7, r4
 800986e:	2f00      	cmp	r7, #0
 8009870:	d143      	bne.n	80098fa <_malloc_r+0xd6>
 8009872:	2c00      	cmp	r4, #0
 8009874:	d04b      	beq.n	800990e <_malloc_r+0xea>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	4639      	mov	r1, r7
 800987a:	4630      	mov	r0, r6
 800987c:	eb04 0903 	add.w	r9, r4, r3
 8009880:	f000 fb5e 	bl	8009f40 <_sbrk_r>
 8009884:	4581      	cmp	r9, r0
 8009886:	d142      	bne.n	800990e <_malloc_r+0xea>
 8009888:	6821      	ldr	r1, [r4, #0]
 800988a:	4630      	mov	r0, r6
 800988c:	1a6d      	subs	r5, r5, r1
 800988e:	4629      	mov	r1, r5
 8009890:	f7ff ffa6 	bl	80097e0 <sbrk_aligned>
 8009894:	3001      	adds	r0, #1
 8009896:	d03a      	beq.n	800990e <_malloc_r+0xea>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	442b      	add	r3, r5
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	f8d8 3000 	ldr.w	r3, [r8]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	bb62      	cbnz	r2, 8009900 <_malloc_r+0xdc>
 80098a6:	f8c8 7000 	str.w	r7, [r8]
 80098aa:	e00f      	b.n	80098cc <_malloc_r+0xa8>
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	1b52      	subs	r2, r2, r5
 80098b0:	d420      	bmi.n	80098f4 <_malloc_r+0xd0>
 80098b2:	2a0b      	cmp	r2, #11
 80098b4:	d917      	bls.n	80098e6 <_malloc_r+0xc2>
 80098b6:	1961      	adds	r1, r4, r5
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	6025      	str	r5, [r4, #0]
 80098bc:	bf18      	it	ne
 80098be:	6059      	strne	r1, [r3, #4]
 80098c0:	6863      	ldr	r3, [r4, #4]
 80098c2:	bf08      	it	eq
 80098c4:	f8c8 1000 	streq.w	r1, [r8]
 80098c8:	5162      	str	r2, [r4, r5]
 80098ca:	604b      	str	r3, [r1, #4]
 80098cc:	4630      	mov	r0, r6
 80098ce:	f000 f82f 	bl	8009930 <__malloc_unlock>
 80098d2:	f104 000b 	add.w	r0, r4, #11
 80098d6:	1d23      	adds	r3, r4, #4
 80098d8:	f020 0007 	bic.w	r0, r0, #7
 80098dc:	1ac2      	subs	r2, r0, r3
 80098de:	bf1c      	itt	ne
 80098e0:	1a1b      	subne	r3, r3, r0
 80098e2:	50a3      	strne	r3, [r4, r2]
 80098e4:	e7af      	b.n	8009846 <_malloc_r+0x22>
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	bf0c      	ite	eq
 80098ec:	f8c8 2000 	streq.w	r2, [r8]
 80098f0:	605a      	strne	r2, [r3, #4]
 80098f2:	e7eb      	b.n	80098cc <_malloc_r+0xa8>
 80098f4:	4623      	mov	r3, r4
 80098f6:	6864      	ldr	r4, [r4, #4]
 80098f8:	e7ae      	b.n	8009858 <_malloc_r+0x34>
 80098fa:	463c      	mov	r4, r7
 80098fc:	687f      	ldr	r7, [r7, #4]
 80098fe:	e7b6      	b.n	800986e <_malloc_r+0x4a>
 8009900:	461a      	mov	r2, r3
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	42a3      	cmp	r3, r4
 8009906:	d1fb      	bne.n	8009900 <_malloc_r+0xdc>
 8009908:	2300      	movs	r3, #0
 800990a:	6053      	str	r3, [r2, #4]
 800990c:	e7de      	b.n	80098cc <_malloc_r+0xa8>
 800990e:	230c      	movs	r3, #12
 8009910:	4630      	mov	r0, r6
 8009912:	6033      	str	r3, [r6, #0]
 8009914:	f000 f80c 	bl	8009930 <__malloc_unlock>
 8009918:	e794      	b.n	8009844 <_malloc_r+0x20>
 800991a:	6005      	str	r5, [r0, #0]
 800991c:	e7d6      	b.n	80098cc <_malloc_r+0xa8>
 800991e:	bf00      	nop
 8009920:	20000654 	.word	0x20000654

08009924 <__malloc_lock>:
 8009924:	4801      	ldr	r0, [pc, #4]	@ (800992c <__malloc_lock+0x8>)
 8009926:	f7ff bf01 	b.w	800972c <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	2000064c 	.word	0x2000064c

08009930 <__malloc_unlock>:
 8009930:	4801      	ldr	r0, [pc, #4]	@ (8009938 <__malloc_unlock+0x8>)
 8009932:	f7ff befc 	b.w	800972e <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	2000064c 	.word	0x2000064c

0800993c <__ssputs_r>:
 800993c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009940:	461f      	mov	r7, r3
 8009942:	688e      	ldr	r6, [r1, #8]
 8009944:	4682      	mov	sl, r0
 8009946:	460c      	mov	r4, r1
 8009948:	42be      	cmp	r6, r7
 800994a:	4690      	mov	r8, r2
 800994c:	680b      	ldr	r3, [r1, #0]
 800994e:	d82d      	bhi.n	80099ac <__ssputs_r+0x70>
 8009950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009954:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009958:	d026      	beq.n	80099a8 <__ssputs_r+0x6c>
 800995a:	6965      	ldr	r5, [r4, #20]
 800995c:	6909      	ldr	r1, [r1, #16]
 800995e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009962:	eba3 0901 	sub.w	r9, r3, r1
 8009966:	1c7b      	adds	r3, r7, #1
 8009968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800996c:	444b      	add	r3, r9
 800996e:	106d      	asrs	r5, r5, #1
 8009970:	429d      	cmp	r5, r3
 8009972:	bf38      	it	cc
 8009974:	461d      	movcc	r5, r3
 8009976:	0553      	lsls	r3, r2, #21
 8009978:	d527      	bpl.n	80099ca <__ssputs_r+0x8e>
 800997a:	4629      	mov	r1, r5
 800997c:	f7ff ff52 	bl	8009824 <_malloc_r>
 8009980:	4606      	mov	r6, r0
 8009982:	b360      	cbz	r0, 80099de <__ssputs_r+0xa2>
 8009984:	464a      	mov	r2, r9
 8009986:	6921      	ldr	r1, [r4, #16]
 8009988:	f7ff fed2 	bl	8009730 <memcpy>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	6126      	str	r6, [r4, #16]
 800999a:	444e      	add	r6, r9
 800999c:	6165      	str	r5, [r4, #20]
 800999e:	eba5 0509 	sub.w	r5, r5, r9
 80099a2:	6026      	str	r6, [r4, #0]
 80099a4:	463e      	mov	r6, r7
 80099a6:	60a5      	str	r5, [r4, #8]
 80099a8:	42be      	cmp	r6, r7
 80099aa:	d900      	bls.n	80099ae <__ssputs_r+0x72>
 80099ac:	463e      	mov	r6, r7
 80099ae:	4632      	mov	r2, r6
 80099b0:	4641      	mov	r1, r8
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	f000 faaa 	bl	8009f0c <memmove>
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	2000      	movs	r0, #0
 80099bc:	1b9b      	subs	r3, r3, r6
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	4433      	add	r3, r6
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ca:	462a      	mov	r2, r5
 80099cc:	f000 fad6 	bl	8009f7c <_realloc_r>
 80099d0:	4606      	mov	r6, r0
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d1e0      	bne.n	8009998 <__ssputs_r+0x5c>
 80099d6:	6921      	ldr	r1, [r4, #16]
 80099d8:	4650      	mov	r0, sl
 80099da:	f7ff feb7 	bl	800974c <_free_r>
 80099de:	230c      	movs	r3, #12
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295
 80099e4:	f8ca 3000 	str.w	r3, [sl]
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ee:	81a3      	strh	r3, [r4, #12]
 80099f0:	e7e9      	b.n	80099c6 <__ssputs_r+0x8a>
	...

080099f4 <_svfiprintf_r>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	4698      	mov	r8, r3
 80099fa:	898b      	ldrh	r3, [r1, #12]
 80099fc:	b09d      	sub	sp, #116	@ 0x74
 80099fe:	4607      	mov	r7, r0
 8009a00:	061b      	lsls	r3, r3, #24
 8009a02:	460d      	mov	r5, r1
 8009a04:	4614      	mov	r4, r2
 8009a06:	d510      	bpl.n	8009a2a <_svfiprintf_r+0x36>
 8009a08:	690b      	ldr	r3, [r1, #16]
 8009a0a:	b973      	cbnz	r3, 8009a2a <_svfiprintf_r+0x36>
 8009a0c:	2140      	movs	r1, #64	@ 0x40
 8009a0e:	f7ff ff09 	bl	8009824 <_malloc_r>
 8009a12:	6028      	str	r0, [r5, #0]
 8009a14:	6128      	str	r0, [r5, #16]
 8009a16:	b930      	cbnz	r0, 8009a26 <_svfiprintf_r+0x32>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	b01d      	add	sp, #116	@ 0x74
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	2340      	movs	r3, #64	@ 0x40
 8009a28:	616b      	str	r3, [r5, #20]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a30:	f04f 0901 	mov.w	r9, #1
 8009a34:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009bd8 <_svfiprintf_r+0x1e4>
 8009a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3a:	2320      	movs	r3, #32
 8009a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a40:	2330      	movs	r3, #48	@ 0x30
 8009a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a46:	4623      	mov	r3, r4
 8009a48:	469a      	mov	sl, r3
 8009a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a4e:	b10a      	cbz	r2, 8009a54 <_svfiprintf_r+0x60>
 8009a50:	2a25      	cmp	r2, #37	@ 0x25
 8009a52:	d1f9      	bne.n	8009a48 <_svfiprintf_r+0x54>
 8009a54:	ebba 0b04 	subs.w	fp, sl, r4
 8009a58:	d00b      	beq.n	8009a72 <_svfiprintf_r+0x7e>
 8009a5a:	465b      	mov	r3, fp
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff ff6b 	bl	800993c <__ssputs_r>
 8009a66:	3001      	adds	r0, #1
 8009a68:	f000 80a7 	beq.w	8009bba <_svfiprintf_r+0x1c6>
 8009a6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a6e:	445a      	add	r2, fp
 8009a70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a72:	f89a 3000 	ldrb.w	r3, [sl]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 809f 	beq.w	8009bba <_svfiprintf_r+0x1c6>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a82:	f10a 0a01 	add.w	sl, sl, #1
 8009a86:	9304      	str	r3, [sp, #16]
 8009a88:	9307      	str	r3, [sp, #28]
 8009a8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a94:	4654      	mov	r4, sl
 8009a96:	2205      	movs	r2, #5
 8009a98:	484f      	ldr	r0, [pc, #316]	@ (8009bd8 <_svfiprintf_r+0x1e4>)
 8009a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9e:	f000 fa5f 	bl	8009f60 <memchr>
 8009aa2:	9a04      	ldr	r2, [sp, #16]
 8009aa4:	b9d8      	cbnz	r0, 8009ade <_svfiprintf_r+0xea>
 8009aa6:	06d0      	lsls	r0, r2, #27
 8009aa8:	bf44      	itt	mi
 8009aaa:	2320      	movmi	r3, #32
 8009aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ab0:	0711      	lsls	r1, r2, #28
 8009ab2:	bf44      	itt	mi
 8009ab4:	232b      	movmi	r3, #43	@ 0x2b
 8009ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aba:	f89a 3000 	ldrb.w	r3, [sl]
 8009abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ac0:	d015      	beq.n	8009aee <_svfiprintf_r+0xfa>
 8009ac2:	9a07      	ldr	r2, [sp, #28]
 8009ac4:	4654      	mov	r4, sl
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f04f 0c0a 	mov.w	ip, #10
 8009acc:	4621      	mov	r1, r4
 8009ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ad2:	3b30      	subs	r3, #48	@ 0x30
 8009ad4:	2b09      	cmp	r3, #9
 8009ad6:	d94b      	bls.n	8009b70 <_svfiprintf_r+0x17c>
 8009ad8:	b1b0      	cbz	r0, 8009b08 <_svfiprintf_r+0x114>
 8009ada:	9207      	str	r2, [sp, #28]
 8009adc:	e014      	b.n	8009b08 <_svfiprintf_r+0x114>
 8009ade:	eba0 0308 	sub.w	r3, r0, r8
 8009ae2:	46a2      	mov	sl, r4
 8009ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	9304      	str	r3, [sp, #16]
 8009aec:	e7d2      	b.n	8009a94 <_svfiprintf_r+0xa0>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	1d19      	adds	r1, r3, #4
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	9103      	str	r1, [sp, #12]
 8009af8:	bfbb      	ittet	lt
 8009afa:	425b      	neglt	r3, r3
 8009afc:	f042 0202 	orrlt.w	r2, r2, #2
 8009b00:	9307      	strge	r3, [sp, #28]
 8009b02:	9307      	strlt	r3, [sp, #28]
 8009b04:	bfb8      	it	lt
 8009b06:	9204      	strlt	r2, [sp, #16]
 8009b08:	7823      	ldrb	r3, [r4, #0]
 8009b0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b0c:	d10a      	bne.n	8009b24 <_svfiprintf_r+0x130>
 8009b0e:	7863      	ldrb	r3, [r4, #1]
 8009b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b12:	d132      	bne.n	8009b7a <_svfiprintf_r+0x186>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	3402      	adds	r4, #2
 8009b18:	1d1a      	adds	r2, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b20:	9203      	str	r2, [sp, #12]
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009be8 <_svfiprintf_r+0x1f4>
 8009b28:	2203      	movs	r2, #3
 8009b2a:	7821      	ldrb	r1, [r4, #0]
 8009b2c:	4650      	mov	r0, sl
 8009b2e:	f000 fa17 	bl	8009f60 <memchr>
 8009b32:	b138      	cbz	r0, 8009b44 <_svfiprintf_r+0x150>
 8009b34:	eba0 000a 	sub.w	r0, r0, sl
 8009b38:	2240      	movs	r2, #64	@ 0x40
 8009b3a:	9b04      	ldr	r3, [sp, #16]
 8009b3c:	3401      	adds	r4, #1
 8009b3e:	4082      	lsls	r2, r0
 8009b40:	4313      	orrs	r3, r2
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b48:	2206      	movs	r2, #6
 8009b4a:	4824      	ldr	r0, [pc, #144]	@ (8009bdc <_svfiprintf_r+0x1e8>)
 8009b4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b50:	f000 fa06 	bl	8009f60 <memchr>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d036      	beq.n	8009bc6 <_svfiprintf_r+0x1d2>
 8009b58:	4b21      	ldr	r3, [pc, #132]	@ (8009be0 <_svfiprintf_r+0x1ec>)
 8009b5a:	bb1b      	cbnz	r3, 8009ba4 <_svfiprintf_r+0x1b0>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	f023 0307 	bic.w	r3, r3, #7
 8009b64:	3308      	adds	r3, #8
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6a:	4433      	add	r3, r6
 8009b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b6e:	e76a      	b.n	8009a46 <_svfiprintf_r+0x52>
 8009b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b74:	460c      	mov	r4, r1
 8009b76:	2001      	movs	r0, #1
 8009b78:	e7a8      	b.n	8009acc <_svfiprintf_r+0xd8>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	3401      	adds	r4, #1
 8009b7e:	f04f 0c0a 	mov.w	ip, #10
 8009b82:	4619      	mov	r1, r3
 8009b84:	9305      	str	r3, [sp, #20]
 8009b86:	4620      	mov	r0, r4
 8009b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b8c:	3a30      	subs	r2, #48	@ 0x30
 8009b8e:	2a09      	cmp	r2, #9
 8009b90:	d903      	bls.n	8009b9a <_svfiprintf_r+0x1a6>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0c6      	beq.n	8009b24 <_svfiprintf_r+0x130>
 8009b96:	9105      	str	r1, [sp, #20]
 8009b98:	e7c4      	b.n	8009b24 <_svfiprintf_r+0x130>
 8009b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7f0      	b.n	8009b86 <_svfiprintf_r+0x192>
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	a904      	add	r1, sp, #16
 8009baa:	4638      	mov	r0, r7
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	4b0d      	ldr	r3, [pc, #52]	@ (8009be4 <_svfiprintf_r+0x1f0>)
 8009bb0:	f3af 8000 	nop.w
 8009bb4:	1c42      	adds	r2, r0, #1
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	d1d6      	bne.n	8009b68 <_svfiprintf_r+0x174>
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	065b      	lsls	r3, r3, #25
 8009bbe:	f53f af2d 	bmi.w	8009a1c <_svfiprintf_r+0x28>
 8009bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bc4:	e72c      	b.n	8009a20 <_svfiprintf_r+0x2c>
 8009bc6:	ab03      	add	r3, sp, #12
 8009bc8:	462a      	mov	r2, r5
 8009bca:	a904      	add	r1, sp, #16
 8009bcc:	4638      	mov	r0, r7
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	4b04      	ldr	r3, [pc, #16]	@ (8009be4 <_svfiprintf_r+0x1f0>)
 8009bd2:	f000 f87d 	bl	8009cd0 <_printf_i>
 8009bd6:	e7ed      	b.n	8009bb4 <_svfiprintf_r+0x1c0>
 8009bd8:	0800a1ac 	.word	0x0800a1ac
 8009bdc:	0800a1b6 	.word	0x0800a1b6
 8009be0:	00000000 	.word	0x00000000
 8009be4:	0800993d 	.word	0x0800993d
 8009be8:	0800a1b2 	.word	0x0800a1b2

08009bec <_printf_common>:
 8009bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	4698      	mov	r8, r3
 8009bf4:	688a      	ldr	r2, [r1, #8]
 8009bf6:	4607      	mov	r7, r0
 8009bf8:	690b      	ldr	r3, [r1, #16]
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c00:	4293      	cmp	r3, r2
 8009c02:	bfb8      	it	lt
 8009c04:	4613      	movlt	r3, r2
 8009c06:	6033      	str	r3, [r6, #0]
 8009c08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c0c:	b10a      	cbz	r2, 8009c12 <_printf_common+0x26>
 8009c0e:	3301      	adds	r3, #1
 8009c10:	6033      	str	r3, [r6, #0]
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	0699      	lsls	r1, r3, #26
 8009c16:	bf42      	ittt	mi
 8009c18:	6833      	ldrmi	r3, [r6, #0]
 8009c1a:	3302      	addmi	r3, #2
 8009c1c:	6033      	strmi	r3, [r6, #0]
 8009c1e:	6825      	ldr	r5, [r4, #0]
 8009c20:	f015 0506 	ands.w	r5, r5, #6
 8009c24:	d106      	bne.n	8009c34 <_printf_common+0x48>
 8009c26:	f104 0a19 	add.w	sl, r4, #25
 8009c2a:	68e3      	ldr	r3, [r4, #12]
 8009c2c:	6832      	ldr	r2, [r6, #0]
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	42ab      	cmp	r3, r5
 8009c32:	dc2b      	bgt.n	8009c8c <_printf_common+0xa0>
 8009c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	3b00      	subs	r3, #0
 8009c3c:	bf18      	it	ne
 8009c3e:	2301      	movne	r3, #1
 8009c40:	0692      	lsls	r2, r2, #26
 8009c42:	d430      	bmi.n	8009ca6 <_printf_common+0xba>
 8009c44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c48:	4641      	mov	r1, r8
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	47c8      	blx	r9
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d023      	beq.n	8009c9a <_printf_common+0xae>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	341a      	adds	r4, #26
 8009c56:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009c5a:	f003 0306 	and.w	r3, r3, #6
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	bf0a      	itet	eq
 8009c62:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009c66:	2500      	movne	r5, #0
 8009c68:	6833      	ldreq	r3, [r6, #0]
 8009c6a:	f04f 0600 	mov.w	r6, #0
 8009c6e:	bf08      	it	eq
 8009c70:	1aed      	subeq	r5, r5, r3
 8009c72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c76:	bf08      	it	eq
 8009c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	bfc4      	itt	gt
 8009c80:	1a9b      	subgt	r3, r3, r2
 8009c82:	18ed      	addgt	r5, r5, r3
 8009c84:	42b5      	cmp	r5, r6
 8009c86:	d11a      	bne.n	8009cbe <_printf_common+0xd2>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	e008      	b.n	8009c9e <_printf_common+0xb2>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	4652      	mov	r2, sl
 8009c90:	4641      	mov	r1, r8
 8009c92:	4638      	mov	r0, r7
 8009c94:	47c8      	blx	r9
 8009c96:	3001      	adds	r0, #1
 8009c98:	d103      	bne.n	8009ca2 <_printf_common+0xb6>
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca2:	3501      	adds	r5, #1
 8009ca4:	e7c1      	b.n	8009c2a <_printf_common+0x3e>
 8009ca6:	18e1      	adds	r1, r4, r3
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	2030      	movs	r0, #48	@ 0x30
 8009cac:	3302      	adds	r3, #2
 8009cae:	4422      	add	r2, r4
 8009cb0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cbc:	e7c2      	b.n	8009c44 <_printf_common+0x58>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	47c8      	blx	r9
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d0e6      	beq.n	8009c9a <_printf_common+0xae>
 8009ccc:	3601      	adds	r6, #1
 8009cce:	e7d9      	b.n	8009c84 <_printf_common+0x98>

08009cd0 <_printf_i>:
 8009cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	7e0f      	ldrb	r7, [r1, #24]
 8009cd6:	4691      	mov	r9, r2
 8009cd8:	4680      	mov	r8, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	2f78      	cmp	r7, #120	@ 0x78
 8009cde:	469a      	mov	sl, r3
 8009ce0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ce6:	d807      	bhi.n	8009cf8 <_printf_i+0x28>
 8009ce8:	2f62      	cmp	r7, #98	@ 0x62
 8009cea:	d80a      	bhi.n	8009d02 <_printf_i+0x32>
 8009cec:	2f00      	cmp	r7, #0
 8009cee:	f000 80d1 	beq.w	8009e94 <_printf_i+0x1c4>
 8009cf2:	2f58      	cmp	r7, #88	@ 0x58
 8009cf4:	f000 80b8 	beq.w	8009e68 <_printf_i+0x198>
 8009cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d00:	e03a      	b.n	8009d78 <_printf_i+0xa8>
 8009d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d06:	2b15      	cmp	r3, #21
 8009d08:	d8f6      	bhi.n	8009cf8 <_printf_i+0x28>
 8009d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8009d10 <_printf_i+0x40>)
 8009d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d10:	08009d69 	.word	0x08009d69
 8009d14:	08009d7d 	.word	0x08009d7d
 8009d18:	08009cf9 	.word	0x08009cf9
 8009d1c:	08009cf9 	.word	0x08009cf9
 8009d20:	08009cf9 	.word	0x08009cf9
 8009d24:	08009cf9 	.word	0x08009cf9
 8009d28:	08009d7d 	.word	0x08009d7d
 8009d2c:	08009cf9 	.word	0x08009cf9
 8009d30:	08009cf9 	.word	0x08009cf9
 8009d34:	08009cf9 	.word	0x08009cf9
 8009d38:	08009cf9 	.word	0x08009cf9
 8009d3c:	08009e7b 	.word	0x08009e7b
 8009d40:	08009da7 	.word	0x08009da7
 8009d44:	08009e35 	.word	0x08009e35
 8009d48:	08009cf9 	.word	0x08009cf9
 8009d4c:	08009cf9 	.word	0x08009cf9
 8009d50:	08009e9d 	.word	0x08009e9d
 8009d54:	08009cf9 	.word	0x08009cf9
 8009d58:	08009da7 	.word	0x08009da7
 8009d5c:	08009cf9 	.word	0x08009cf9
 8009d60:	08009cf9 	.word	0x08009cf9
 8009d64:	08009e3d 	.word	0x08009e3d
 8009d68:	6833      	ldr	r3, [r6, #0]
 8009d6a:	1d1a      	adds	r2, r3, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6032      	str	r2, [r6, #0]
 8009d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e09c      	b.n	8009eb6 <_printf_i+0x1e6>
 8009d7c:	6833      	ldr	r3, [r6, #0]
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	1d19      	adds	r1, r3, #4
 8009d82:	6031      	str	r1, [r6, #0]
 8009d84:	0606      	lsls	r6, r0, #24
 8009d86:	d501      	bpl.n	8009d8c <_printf_i+0xbc>
 8009d88:	681d      	ldr	r5, [r3, #0]
 8009d8a:	e003      	b.n	8009d94 <_printf_i+0xc4>
 8009d8c:	0645      	lsls	r5, r0, #25
 8009d8e:	d5fb      	bpl.n	8009d88 <_printf_i+0xb8>
 8009d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d94:	2d00      	cmp	r5, #0
 8009d96:	da03      	bge.n	8009da0 <_printf_i+0xd0>
 8009d98:	232d      	movs	r3, #45	@ 0x2d
 8009d9a:	426d      	negs	r5, r5
 8009d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009da0:	4858      	ldr	r0, [pc, #352]	@ (8009f04 <_printf_i+0x234>)
 8009da2:	230a      	movs	r3, #10
 8009da4:	e011      	b.n	8009dca <_printf_i+0xfa>
 8009da6:	6821      	ldr	r1, [r4, #0]
 8009da8:	6833      	ldr	r3, [r6, #0]
 8009daa:	0608      	lsls	r0, r1, #24
 8009dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8009db0:	d402      	bmi.n	8009db8 <_printf_i+0xe8>
 8009db2:	0649      	lsls	r1, r1, #25
 8009db4:	bf48      	it	mi
 8009db6:	b2ad      	uxthmi	r5, r5
 8009db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dba:	6033      	str	r3, [r6, #0]
 8009dbc:	4851      	ldr	r0, [pc, #324]	@ (8009f04 <_printf_i+0x234>)
 8009dbe:	bf14      	ite	ne
 8009dc0:	230a      	movne	r3, #10
 8009dc2:	2308      	moveq	r3, #8
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dca:	6866      	ldr	r6, [r4, #4]
 8009dcc:	2e00      	cmp	r6, #0
 8009dce:	60a6      	str	r6, [r4, #8]
 8009dd0:	db05      	blt.n	8009dde <_printf_i+0x10e>
 8009dd2:	6821      	ldr	r1, [r4, #0]
 8009dd4:	432e      	orrs	r6, r5
 8009dd6:	f021 0104 	bic.w	r1, r1, #4
 8009dda:	6021      	str	r1, [r4, #0]
 8009ddc:	d04b      	beq.n	8009e76 <_printf_i+0x1a6>
 8009dde:	4616      	mov	r6, r2
 8009de0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009de4:	fb03 5711 	mls	r7, r3, r1, r5
 8009de8:	5dc7      	ldrb	r7, [r0, r7]
 8009dea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dee:	462f      	mov	r7, r5
 8009df0:	460d      	mov	r5, r1
 8009df2:	42bb      	cmp	r3, r7
 8009df4:	d9f4      	bls.n	8009de0 <_printf_i+0x110>
 8009df6:	2b08      	cmp	r3, #8
 8009df8:	d10b      	bne.n	8009e12 <_printf_i+0x142>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	07df      	lsls	r7, r3, #31
 8009dfe:	d508      	bpl.n	8009e12 <_printf_i+0x142>
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	6861      	ldr	r1, [r4, #4]
 8009e04:	4299      	cmp	r1, r3
 8009e06:	bfde      	ittt	le
 8009e08:	2330      	movle	r3, #48	@ 0x30
 8009e0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e12:	1b92      	subs	r2, r2, r6
 8009e14:	6122      	str	r2, [r4, #16]
 8009e16:	464b      	mov	r3, r9
 8009e18:	aa03      	add	r2, sp, #12
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f8cd a000 	str.w	sl, [sp]
 8009e22:	f7ff fee3 	bl	8009bec <_printf_common>
 8009e26:	3001      	adds	r0, #1
 8009e28:	d14a      	bne.n	8009ec0 <_printf_i+0x1f0>
 8009e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2e:	b004      	add	sp, #16
 8009e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	f043 0320 	orr.w	r3, r3, #32
 8009e3a:	6023      	str	r3, [r4, #0]
 8009e3c:	2778      	movs	r7, #120	@ 0x78
 8009e3e:	4832      	ldr	r0, [pc, #200]	@ (8009f08 <_printf_i+0x238>)
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e46:	061f      	lsls	r7, r3, #24
 8009e48:	6831      	ldr	r1, [r6, #0]
 8009e4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e4e:	d402      	bmi.n	8009e56 <_printf_i+0x186>
 8009e50:	065f      	lsls	r7, r3, #25
 8009e52:	bf48      	it	mi
 8009e54:	b2ad      	uxthmi	r5, r5
 8009e56:	6031      	str	r1, [r6, #0]
 8009e58:	07d9      	lsls	r1, r3, #31
 8009e5a:	bf44      	itt	mi
 8009e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e60:	6023      	strmi	r3, [r4, #0]
 8009e62:	b11d      	cbz	r5, 8009e6c <_printf_i+0x19c>
 8009e64:	2310      	movs	r3, #16
 8009e66:	e7ad      	b.n	8009dc4 <_printf_i+0xf4>
 8009e68:	4826      	ldr	r0, [pc, #152]	@ (8009f04 <_printf_i+0x234>)
 8009e6a:	e7e9      	b.n	8009e40 <_printf_i+0x170>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	f023 0320 	bic.w	r3, r3, #32
 8009e72:	6023      	str	r3, [r4, #0]
 8009e74:	e7f6      	b.n	8009e64 <_printf_i+0x194>
 8009e76:	4616      	mov	r6, r2
 8009e78:	e7bd      	b.n	8009df6 <_printf_i+0x126>
 8009e7a:	6833      	ldr	r3, [r6, #0]
 8009e7c:	6825      	ldr	r5, [r4, #0]
 8009e7e:	1d18      	adds	r0, r3, #4
 8009e80:	6961      	ldr	r1, [r4, #20]
 8009e82:	6030      	str	r0, [r6, #0]
 8009e84:	062e      	lsls	r6, r5, #24
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	d501      	bpl.n	8009e8e <_printf_i+0x1be>
 8009e8a:	6019      	str	r1, [r3, #0]
 8009e8c:	e002      	b.n	8009e94 <_printf_i+0x1c4>
 8009e8e:	0668      	lsls	r0, r5, #25
 8009e90:	d5fb      	bpl.n	8009e8a <_printf_i+0x1ba>
 8009e92:	8019      	strh	r1, [r3, #0]
 8009e94:	2300      	movs	r3, #0
 8009e96:	4616      	mov	r6, r2
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	e7bc      	b.n	8009e16 <_printf_i+0x146>
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	1d1a      	adds	r2, r3, #4
 8009ea2:	6032      	str	r2, [r6, #0]
 8009ea4:	681e      	ldr	r6, [r3, #0]
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f000 f859 	bl	8009f60 <memchr>
 8009eae:	b108      	cbz	r0, 8009eb4 <_printf_i+0x1e4>
 8009eb0:	1b80      	subs	r0, r0, r6
 8009eb2:	6060      	str	r0, [r4, #4]
 8009eb4:	6863      	ldr	r3, [r4, #4]
 8009eb6:	6123      	str	r3, [r4, #16]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ebe:	e7aa      	b.n	8009e16 <_printf_i+0x146>
 8009ec0:	6923      	ldr	r3, [r4, #16]
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	47d0      	blx	sl
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d0ad      	beq.n	8009e2a <_printf_i+0x15a>
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	079b      	lsls	r3, r3, #30
 8009ed2:	d413      	bmi.n	8009efc <_printf_i+0x22c>
 8009ed4:	68e0      	ldr	r0, [r4, #12]
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	4298      	cmp	r0, r3
 8009eda:	bfb8      	it	lt
 8009edc:	4618      	movlt	r0, r3
 8009ede:	e7a6      	b.n	8009e2e <_printf_i+0x15e>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4632      	mov	r2, r6
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	47d0      	blx	sl
 8009eea:	3001      	adds	r0, #1
 8009eec:	d09d      	beq.n	8009e2a <_printf_i+0x15a>
 8009eee:	3501      	adds	r5, #1
 8009ef0:	68e3      	ldr	r3, [r4, #12]
 8009ef2:	9903      	ldr	r1, [sp, #12]
 8009ef4:	1a5b      	subs	r3, r3, r1
 8009ef6:	42ab      	cmp	r3, r5
 8009ef8:	dcf2      	bgt.n	8009ee0 <_printf_i+0x210>
 8009efa:	e7eb      	b.n	8009ed4 <_printf_i+0x204>
 8009efc:	2500      	movs	r5, #0
 8009efe:	f104 0619 	add.w	r6, r4, #25
 8009f02:	e7f5      	b.n	8009ef0 <_printf_i+0x220>
 8009f04:	0800a1bd 	.word	0x0800a1bd
 8009f08:	0800a1ce 	.word	0x0800a1ce

08009f0c <memmove>:
 8009f0c:	4288      	cmp	r0, r1
 8009f0e:	b510      	push	{r4, lr}
 8009f10:	eb01 0402 	add.w	r4, r1, r2
 8009f14:	d902      	bls.n	8009f1c <memmove+0x10>
 8009f16:	4284      	cmp	r4, r0
 8009f18:	4623      	mov	r3, r4
 8009f1a:	d807      	bhi.n	8009f2c <memmove+0x20>
 8009f1c:	1e43      	subs	r3, r0, #1
 8009f1e:	42a1      	cmp	r1, r4
 8009f20:	d008      	beq.n	8009f34 <memmove+0x28>
 8009f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f2a:	e7f8      	b.n	8009f1e <memmove+0x12>
 8009f2c:	4402      	add	r2, r0
 8009f2e:	4601      	mov	r1, r0
 8009f30:	428a      	cmp	r2, r1
 8009f32:	d100      	bne.n	8009f36 <memmove+0x2a>
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f3e:	e7f7      	b.n	8009f30 <memmove+0x24>

08009f40 <_sbrk_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	2300      	movs	r3, #0
 8009f44:	4d05      	ldr	r5, [pc, #20]	@ (8009f5c <_sbrk_r+0x1c>)
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f7 ff96 	bl	8001e7c <_sbrk>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_sbrk_r+0x1a>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_sbrk_r+0x1a>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	20000648 	.word	0x20000648

08009f60 <memchr>:
 8009f60:	b2c9      	uxtb	r1, r1
 8009f62:	4603      	mov	r3, r0
 8009f64:	4402      	add	r2, r0
 8009f66:	b510      	push	{r4, lr}
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	d101      	bne.n	8009f72 <memchr+0x12>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e003      	b.n	8009f7a <memchr+0x1a>
 8009f72:	7804      	ldrb	r4, [r0, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	428c      	cmp	r4, r1
 8009f78:	d1f6      	bne.n	8009f68 <memchr+0x8>
 8009f7a:	bd10      	pop	{r4, pc}

08009f7c <_realloc_r>:
 8009f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f80:	4607      	mov	r7, r0
 8009f82:	4614      	mov	r4, r2
 8009f84:	460d      	mov	r5, r1
 8009f86:	b921      	cbnz	r1, 8009f92 <_realloc_r+0x16>
 8009f88:	4611      	mov	r1, r2
 8009f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8e:	f7ff bc49 	b.w	8009824 <_malloc_r>
 8009f92:	b92a      	cbnz	r2, 8009fa0 <_realloc_r+0x24>
 8009f94:	4625      	mov	r5, r4
 8009f96:	f7ff fbd9 	bl	800974c <_free_r>
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	f000 f81a 	bl	8009fd8 <_malloc_usable_size_r>
 8009fa4:	4284      	cmp	r4, r0
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	d802      	bhi.n	8009fb0 <_realloc_r+0x34>
 8009faa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fae:	d8f4      	bhi.n	8009f9a <_realloc_r+0x1e>
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f7ff fc36 	bl	8009824 <_malloc_r>
 8009fb8:	4680      	mov	r8, r0
 8009fba:	b908      	cbnz	r0, 8009fc0 <_realloc_r+0x44>
 8009fbc:	4645      	mov	r5, r8
 8009fbe:	e7ec      	b.n	8009f9a <_realloc_r+0x1e>
 8009fc0:	42b4      	cmp	r4, r6
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	bf28      	it	cs
 8009fc8:	4632      	movcs	r2, r6
 8009fca:	f7ff fbb1 	bl	8009730 <memcpy>
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff fbbb 	bl	800974c <_free_r>
 8009fd6:	e7f1      	b.n	8009fbc <_realloc_r+0x40>

08009fd8 <_malloc_usable_size_r>:
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f18      	subs	r0, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfbc      	itt	lt
 8009fe2:	580b      	ldrlt	r3, [r1, r0]
 8009fe4:	18c0      	addlt	r0, r0, r3
 8009fe6:	4770      	bx	lr

08009fe8 <_init>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	bf00      	nop
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr

08009ff4 <_fini>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr
