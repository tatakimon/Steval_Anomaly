
DMA_DHCX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000177  08009b88  08009b88  0000ab88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d00  08009d00  0000ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d08  08009d08  0000ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009d0c  08009d0c  0000ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  08009d10  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b4  2000005c  08009d6c  0000b05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000610  08009d6c  0000b610  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a8f0  00000000  00000000  0000b092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002820  00000000  00000000  00025982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b8  00000000  00000000  000281a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dd1  00000000  00000000  00029360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6b6  00000000  00000000  0002a131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018719  00000000  00000000  000647e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018309f  00000000  00000000  0007cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fff9f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f5c  00000000  00000000  001fffe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00204f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	08009b70 	.word	0x08009b70

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	08009b70 	.word	0x08009b70

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <cycles_now>:
static inline void cycles_init(void){
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CYCCNT = 0;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}
static inline uint32_t cycles_now(void){ return DWT->CYCCNT; }
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <cycles_now+0x14>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e0001000 	.word	0xe0001000

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0b2      	sub	sp, #200	@ 0xc8
 8000610:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f001 fa8f 	bl	8001b34 <HAL_Init>

  /* Configure the System Power */
 // SystemPower_Config();

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f8db 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 fa43 	bl	8000aa4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800061e:	f000 f93d 	bl	800089c <MX_GPDMA1_Init>
  //MX_ICACHE_Init();
  //MX_RTC_Init();
  //MX_SAI1_Init();
  //MX_SDMMC1_SD_Init();
  //MX_SPI1_Init();
  MX_SPI2_Init();
 8000622:	f000 f983 	bl	800092c <MX_SPI2_Init>
  //MX_SPI3_Init();
  //MX_TAMP_RTC_Init();
  //MX_TIM3_Init();
  MX_USART2_UART_Init();
 8000626:	f000 f9f1 	bl	8000a0c <MX_USART2_UART_Init>




  // Make sure CS idles high
  HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000630:	4861      	ldr	r0, [pc, #388]	@ (80007b8 <main+0x1ac>)
 8000632:	f002 fe37 	bl	80032a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000636:	2005      	movs	r0, #5
 8000638:	f001 fb42 	bl	8001cc0 <HAL_Delay>

  // Configure the sensor
  dhcx_init();
 800063c:	f000 fd38 	bl	80010b0 <dhcx_init>

  // Optional: WHO_AM_I check
  uint8_t who=0;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (HAL_OK == dhcx_read_dma(DHCX_REG_WHOAMI, &who, 1)) {
 8000646:	f107 038f 	add.w	r3, r7, #143	@ 0x8f
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	200f      	movs	r0, #15
 8000650:	f000 fcca 	bl	8000fe8 <dhcx_read_dma>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d111      	bne.n	800067e <main+0x72>
    char msg[40];
    int n = snprintf(msg, sizeof(msg), "DHCX WHO_AM_I=0x%02X\r\n", who);
 800065a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800065e:	4638      	mov	r0, r7
 8000660:	4a56      	ldr	r2, [pc, #344]	@ (80007bc <main+0x1b0>)
 8000662:	2128      	movs	r1, #40	@ 0x28
 8000664:	f008 fdbe 	bl	80091e4 <sniprintf>
 8000668:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    // Replace with your UART instance if different
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, n, HAL_MAX_DELAY);
 800066c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000670:	b29a      	uxth	r2, r3
 8000672:	4639      	mov	r1, r7
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	4851      	ldr	r0, [pc, #324]	@ (80007c0 <main+0x1b4>)
 800067a:	f008 f851 	bl	8008720 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dhcx_both_ready()) {
 800067e:	f000 fd27 	bl	80010d0 <dhcx_both_ready>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0fa      	beq.n	800067e <main+0x72>
	      dhcx_raw_t r;
	      if (HAL_OK == dhcx_read_gyro_accel_dma(&r)) {
 8000688:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fd3b 	bl	8001108 <dhcx_read_gyro_accel_dma>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f2      	bne.n	800067e <main+0x72>
	          int32_t gx_mdps = (int32_t)r.gx * 70;
 8000698:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 800069c:	461a      	mov	r2, r3
 800069e:	2346      	movs	r3, #70	@ 0x46
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	          int32_t gy_mdps = (int32_t)r.gy * 70;
 80006a8:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80006ac:	461a      	mov	r2, r3
 80006ae:	2346      	movs	r3, #70	@ 0x46
 80006b0:	fb02 f303 	mul.w	r3, r2, r3
 80006b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	          int32_t gz_mdps = (int32_t)r.gz * 70;
 80006b8:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 80006bc:	461a      	mov	r2, r3
 80006be:	2346      	movs	r3, #70	@ 0x46
 80006c0:	fb02 f303 	mul.w	r3, r2, r3
 80006c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	          int32_t ax_mg = ((int32_t)r.ax * 61 + (r.ax >= 0 ? 500 : -500)) / 1000;
 80006c8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80006cc:	461a      	mov	r2, r3
 80006ce:	4613      	mov	r3, r2
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 80006dc:	2a00      	cmp	r2, #0
 80006de:	db02      	blt.n	80006e6 <main+0xda>
 80006e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006e4:	e000      	b.n	80006e8 <main+0xdc>
 80006e6:	4a37      	ldr	r2, [pc, #220]	@ (80007c4 <main+0x1b8>)
 80006e8:	4413      	add	r3, r2
 80006ea:	4a37      	ldr	r2, [pc, #220]	@ (80007c8 <main+0x1bc>)
 80006ec:	fb82 1203 	smull	r1, r2, r2, r3
 80006f0:	1192      	asrs	r2, r2, #6
 80006f2:	17db      	asrs	r3, r3, #31
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	          int32_t ay_mg = ((int32_t)r.ay * 61 + (r.ay >= 0 ? 500 : -500)) / 1000;
 80006fa:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 80006fe:	461a      	mov	r2, r3
 8000700:	4613      	mov	r3, r2
 8000702:	011b      	lsls	r3, r3, #4
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	@ 0x88
 800070e:	2a00      	cmp	r2, #0
 8000710:	db02      	blt.n	8000718 <main+0x10c>
 8000712:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000716:	e000      	b.n	800071a <main+0x10e>
 8000718:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <main+0x1b8>)
 800071a:	4413      	add	r3, r2
 800071c:	4a2a      	ldr	r2, [pc, #168]	@ (80007c8 <main+0x1bc>)
 800071e:	fb82 1203 	smull	r1, r2, r2, r3
 8000722:	1192      	asrs	r2, r2, #6
 8000724:	17db      	asrs	r3, r3, #31
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	          int32_t az_mg = ((int32_t)r.az * 61 + (r.az >= 0 ? 500 : -500)) / 1000;
 800072c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	@ 0x8a
 8000730:	461a      	mov	r2, r3
 8000732:	4613      	mov	r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 8000740:	2a00      	cmp	r2, #0
 8000742:	db02      	blt.n	800074a <main+0x13e>
 8000744:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000748:	e000      	b.n	800074c <main+0x140>
 800074a:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <main+0x1b8>)
 800074c:	4413      	add	r3, r2
 800074e:	4a1e      	ldr	r2, [pc, #120]	@ (80007c8 <main+0x1bc>)
 8000750:	fb82 1203 	smull	r1, r2, r2, r3
 8000754:	1192      	asrs	r2, r2, #6
 8000756:	17db      	asrs	r3, r3, #31
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	          char line[128];  // 96 would also work
	          int n = snprintf(line, sizeof(line),
 800075e:	4638      	mov	r0, r7
 8000760:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000764:	9304      	str	r3, [sp, #16]
 8000766:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800076a:	9303      	str	r3, [sp, #12]
 800076c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <main+0x1c0>)
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	f008 fd2d 	bl	80091e4 <sniprintf>
 800078a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	                           "G[mdps]=%ld %ld %ld | A[mg]=%ld %ld %ld\r\n",
	                           (long)gx_mdps, (long)gy_mdps, (long)gz_mdps,
	                           (long)ax_mg,   (long)ay_mg,   (long)az_mg);

	          if (n > 0 && n < (int)sizeof(line)) {
 800078e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000792:	2b00      	cmp	r3, #0
 8000794:	f77f af73 	ble.w	800067e <main+0x72>
 8000798:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800079c:	2b7f      	cmp	r3, #127	@ 0x7f
 800079e:	f73f af6e 	bgt.w	800067e <main+0x72>
	              HAL_UART_Transmit(&huart2, (uint8_t*)line, n, HAL_MAX_DELAY);
 80007a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4639      	mov	r1, r7
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <main+0x1b4>)
 80007b0:	f007 ffb6 	bl	8008720 <HAL_UART_Transmit>
	  if (dhcx_both_ready()) {
 80007b4:	e763      	b.n	800067e <main+0x72>
 80007b6:	bf00      	nop
 80007b8:	42021c00 	.word	0x42021c00
 80007bc:	08009b88 	.word	0x08009b88
 80007c0:	200003d8 	.word	0x200003d8
 80007c4:	fffffe0c 	.word	0xfffffe0c
 80007c8:	10624dd3 	.word	0x10624dd3
 80007cc:	08009ba0 	.word	0x08009ba0

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09e      	sub	sp, #120	@ 0x78
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2260      	movs	r2, #96	@ 0x60
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f008 fd36 	bl	8009250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
 80007f2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007f8:	f002 fda8 	bl	800334c <HAL_PWREx_ControlVoltageScaling>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000802:	f000 fcd4 	bl	80011ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000806:	232b      	movs	r3, #43	@ 0x2b
 8000808:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000820:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	2303      	movs	r3, #3
 8000830:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800083a:	230a      	movs	r3, #10
 800083c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800084a:	230c      	movs	r3, #12
 800084c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fe34 	bl	80034c4 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000862:	f000 fca4 	bl	80011ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	231f      	movs	r3, #31
 8000868:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	2104      	movs	r1, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fcfa 	bl	800427c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800088e:	f000 fc8e 	bl	80011ae <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3778      	adds	r7, #120	@ 0x78
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_GPDMA1_Init+0x8c>)
 80008a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000928 <MX_GPDMA1_Init+0x8c>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_GPDMA1_Init+0x8c>)
 80008b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	201d      	movs	r0, #29
 80008c6:	f001 fad7 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80008ca:	201d      	movs	r0, #29
 80008cc:	f001 faee 	bl	8001eac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	201e      	movs	r0, #30
 80008d6:	f001 facf 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80008da:	201e      	movs	r0, #30
 80008dc:	f001 fae6 	bl	8001eac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	201f      	movs	r0, #31
 80008e6:	f001 fac7 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 80008ea:	201f      	movs	r0, #31
 80008ec:	f001 fade 	bl	8001eac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2020      	movs	r0, #32
 80008f6:	f001 fabf 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80008fa:	2020      	movs	r0, #32
 80008fc:	f001 fad6 	bl	8001eac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2021      	movs	r0, #33	@ 0x21
 8000906:	f001 fab7 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 800090a:	2021      	movs	r0, #33	@ 0x21
 800090c:	f001 face 	bl	8001eac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	2022      	movs	r0, #34	@ 0x22
 8000916:	f001 faaf 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 800091a:	2022      	movs	r0, #34	@ 0x22
 800091c:	f001 fac6 	bl	8001eac <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	46020c00 	.word	0x46020c00

0800092c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800093c:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 800093e:	4a31      	ldr	r2, [pc, #196]	@ (8000a04 <MX_SPI2_Init+0xd8>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000944:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000948:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000952:	2207      	movs	r2, #7
 8000954:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000956:	4b2a      	ldr	r3, [pc, #168]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095c:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000962:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000964:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000968:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 800096c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000970:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000972:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000978:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000984:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000986:	2207      	movs	r2, #7
 8000988:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 800098c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000992:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 8000994:	2200      	movs	r2, #0
 8000996:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 800099a:	2200      	movs	r2, #0
 800099c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009b6:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009bc:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009c8:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009ca:	f006 fd07 	bl	80073dc <HAL_SPI_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 80009d4:	f000 fbeb 	bl	80011ae <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_SPI2_Init+0xdc>)
 80009de:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_SPI2_Init+0xd4>)
 80009ea:	f007 fe08 	bl	80085fe <HAL_SPIEx_SetConfigAutonomousMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80009f4:	f000 fbdb 	bl	80011ae <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000258 	.word	0x20000258
 8000a04:	40003800 	.word	0x40003800
 8000a08:	10010000 	.word	0x10010000

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <MX_USART2_UART_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a56:	f007 fe13 	bl	8008680 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 fba5 	bl	80011ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a68:	f008 faf2 	bl	8009050 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 fb9c 	bl	80011ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a7a:	f008 fb27 	bl	80090cc <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 fb93 	bl	80011ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_USART2_UART_Init+0x90>)
 8000a8a:	f008 faa8 	bl	8008fde <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 fb8b 	bl	80011ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200003d8 	.word	0x200003d8
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	@ 0x38
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	4bbf      	ldr	r3, [pc, #764]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac0:	4abd      	ldr	r2, [pc, #756]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aca:	4bbb      	ldr	r3, [pc, #748]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	623b      	str	r3, [r7, #32]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ad8:	4bb7      	ldr	r3, [pc, #732]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ade:	4ab6      	ldr	r2, [pc, #728]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ae8:	4bb3      	ldr	r3, [pc, #716]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af6:	4bb0      	ldr	r3, [pc, #704]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000afc:	4aae      	ldr	r2, [pc, #696]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b06:	4bac      	ldr	r3, [pc, #688]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	4ba8      	ldr	r3, [pc, #672]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b1a:	4aa7      	ldr	r2, [pc, #668]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b24:	4ba4      	ldr	r3, [pc, #656]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4ba1      	ldr	r3, [pc, #644]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b38:	4a9f      	ldr	r2, [pc, #636]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b42:	4b9d      	ldr	r3, [pc, #628]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b50:	4b99      	ldr	r3, [pc, #612]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b56:	4a98      	ldr	r2, [pc, #608]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b60:	4b95      	ldr	r3, [pc, #596]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b92      	ldr	r3, [pc, #584]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b74:	4a90      	ldr	r2, [pc, #576]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b7e:	4b8e      	ldr	r3, [pc, #568]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b8a      	ldr	r3, [pc, #552]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b92:	4a89      	ldr	r2, [pc, #548]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9c:	4b86      	ldr	r3, [pc, #536]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000baa:	4b83      	ldr	r3, [pc, #524]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb0:	4a81      	ldr	r2, [pc, #516]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000bb2:	f043 0320 	orr.w	r3, r3, #32
 8000bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bba:	4b7f      	ldr	r3, [pc, #508]	@ (8000db8 <MX_GPIO_Init+0x314>)
 8000bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc0:	f003 0320 	and.w	r3, r3, #32
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8000bce:	487b      	ldr	r0, [pc, #492]	@ (8000dbc <MX_GPIO_Init+0x318>)
 8000bd0:	f002 fb68 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2181      	movs	r1, #129	@ 0x81
 8000bd8:	4879      	ldr	r0, [pc, #484]	@ (8000dc0 <MX_GPIO_Init+0x31c>)
 8000bda:	f002 fb63 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000be4:	4875      	ldr	r0, [pc, #468]	@ (8000dbc <MX_GPIO_Init+0x318>)
 8000be6:	f002 fb5d 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2102      	movs	r1, #2
 8000bee:	4875      	ldr	r0, [pc, #468]	@ (8000dc4 <MX_GPIO_Init+0x320>)
 8000bf0:	f002 fb58 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bfa:	4873      	ldr	r0, [pc, #460]	@ (8000dc8 <MX_GPIO_Init+0x324>)
 8000bfc:	f002 fb52 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8000c00:	2340      	movs	r3, #64	@ 0x40
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	4b71      	ldr	r3, [pc, #452]	@ (8000dcc <MX_GPIO_Init+0x328>)
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	486b      	ldr	r0, [pc, #428]	@ (8000dc0 <MX_GPIO_Init+0x31c>)
 8000c14:	f002 f966 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8000c18:	f248 0362 	movw	r3, #32866	@ 0x8062
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4868      	ldr	r0, [pc, #416]	@ (8000dd0 <MX_GPIO_Init+0x32c>)
 8000c2e:	f002 f959 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 8000c32:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	485c      	ldr	r0, [pc, #368]	@ (8000dbc <MX_GPIO_Init+0x318>)
 8000c4c:	f002 f94a 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8000c50:	2324      	movs	r3, #36	@ 0x24
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4857      	ldr	r0, [pc, #348]	@ (8000dc0 <MX_GPIO_Init+0x31c>)
 8000c64:	f002 f93e 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8000c68:	f24a 2301 	movw	r3, #41473	@ 0xa201
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4855      	ldr	r0, [pc, #340]	@ (8000dd4 <MX_GPIO_Init+0x330>)
 8000c7e:	f002 f931 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8000c82:	2381      	movs	r3, #129	@ 0x81
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4849      	ldr	r0, [pc, #292]	@ (8000dc0 <MX_GPIO_Init+0x31c>)
 8000c9a:	f002 f923 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4843      	ldr	r0, [pc, #268]	@ (8000dc4 <MX_GPIO_Init+0x320>)
 8000cb6:	f002 f915 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 8000cba:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	483b      	ldr	r0, [pc, #236]	@ (8000dbc <MX_GPIO_Init+0x318>)
 8000cd0:	f002 f908 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8000cd4:	2381      	movs	r3, #129	@ 0x81
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000dcc <MX_GPIO_Init+0x328>)
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4837      	ldr	r0, [pc, #220]	@ (8000dc4 <MX_GPIO_Init+0x320>)
 8000ce8:	f002 f8fc 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8000cec:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf2:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <MX_GPIO_Init+0x328>)
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4835      	ldr	r0, [pc, #212]	@ (8000dd8 <MX_GPIO_Init+0x334>)
 8000d02:	f002 f8ef 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8000d06:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482b      	ldr	r0, [pc, #172]	@ (8000dc8 <MX_GPIO_Init+0x324>)
 8000d1c:	f002 f8e2 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8000d20:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d26:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <MX_GPIO_Init+0x328>)
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4824      	ldr	r0, [pc, #144]	@ (8000dc8 <MX_GPIO_Init+0x324>)
 8000d36:	f002 f8d5 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 8000d3a:	f240 1301 	movw	r3, #257	@ 0x101
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4823      	ldr	r0, [pc, #140]	@ (8000ddc <MX_GPIO_Init+0x338>)
 8000d50:	f002 f8c8 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 8000d54:	230c      	movs	r3, #12
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <MX_GPIO_Init+0x33c>)
 8000d68:	f002 f8bc 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	@ (8000dc8 <MX_GPIO_Init+0x324>)
 8000d86:	f002 f8ad 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_GPIO_Init+0x328>)
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_GPIO_Init+0x330>)
 8000da0:	f002 f8a0 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8000da4:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	e015      	b.n	8000de4 <MX_GPIO_Init+0x340>
 8000db8:	46020c00 	.word	0x46020c00
 8000dbc:	42021c00 	.word	0x42021c00
 8000dc0:	42022000 	.word	0x42022000
 8000dc4:	42021000 	.word	0x42021000
 8000dc8:	42021400 	.word	0x42021400
 8000dcc:	10110000 	.word	0x10110000
 8000dd0:	42021800 	.word	0x42021800
 8000dd4:	42020c00 	.word	0x42020c00
 8000dd8:	42020400 	.word	0x42020400
 8000ddc:	42020000 	.word	0x42020000
 8000de0:	42020800 	.word	0x42020800
 8000de4:	4619      	mov	r1, r3
 8000de6:	4842      	ldr	r0, [pc, #264]	@ (8000ef0 <MX_GPIO_Init+0x44c>)
 8000de8:	f002 f87c 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8000dec:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	483c      	ldr	r0, [pc, #240]	@ (8000ef4 <MX_GPIO_Init+0x450>)
 8000e02:	f002 f86f 	bl	8002ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2107      	movs	r1, #7
 8000e0a:	200b      	movs	r0, #11
 8000e0c:	f001 f834 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e10:	200b      	movs	r0, #11
 8000e12:	f001 f84b 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2107      	movs	r1, #7
 8000e1a:	200c      	movs	r0, #12
 8000e1c:	f001 f82c 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e20:	200c      	movs	r0, #12
 8000e22:	f001 f843 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2107      	movs	r1, #7
 8000e2a:	200d      	movs	r0, #13
 8000e2c:	f001 f824 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e30:	200d      	movs	r0, #13
 8000e32:	f001 f83b 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2107      	movs	r1, #7
 8000e3a:	200e      	movs	r0, #14
 8000e3c:	f001 f81c 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e40:	200e      	movs	r0, #14
 8000e42:	f001 f833 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2107      	movs	r1, #7
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f001 f814 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e50:	200f      	movs	r0, #15
 8000e52:	f001 f82b 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2107      	movs	r1, #7
 8000e5a:	2010      	movs	r0, #16
 8000e5c:	f001 f80c 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000e60:	2010      	movs	r0, #16
 8000e62:	f001 f823 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2107      	movs	r1, #7
 8000e6a:	2011      	movs	r0, #17
 8000e6c:	f001 f804 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8000e70:	2011      	movs	r0, #17
 8000e72:	f001 f81b 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2107      	movs	r1, #7
 8000e7a:	2012      	movs	r0, #18
 8000e7c:	f000 fffc 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8000e80:	2012      	movs	r0, #18
 8000e82:	f001 f813 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2107      	movs	r1, #7
 8000e8a:	2013      	movs	r0, #19
 8000e8c:	f000 fff4 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8000e90:	2013      	movs	r0, #19
 8000e92:	f001 f80b 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2107      	movs	r1, #7
 8000e9a:	2014      	movs	r0, #20
 8000e9c:	f000 ffec 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8000ea0:	2014      	movs	r0, #20
 8000ea2:	f001 f803 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2107      	movs	r1, #7
 8000eaa:	2015      	movs	r0, #21
 8000eac:	f000 ffe4 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000eb0:	2015      	movs	r0, #21
 8000eb2:	f000 fffb 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2107      	movs	r1, #7
 8000eba:	2016      	movs	r0, #22
 8000ebc:	f000 ffdc 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000ec0:	2016      	movs	r0, #22
 8000ec2:	f000 fff3 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2107      	movs	r1, #7
 8000eca:	2018      	movs	r0, #24
 8000ecc:	f000 ffd4 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000ed0:	2018      	movs	r0, #24
 8000ed2:	f000 ffeb 	bl	8001eac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2107      	movs	r1, #7
 8000eda:	2019      	movs	r0, #25
 8000edc:	f000 ffcc 	bl	8001e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8000ee0:	2019      	movs	r0, #25
 8000ee2:	f000 ffe3 	bl	8001eac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3738      	adds	r7, #56	@ 0x38
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	42020400 	.word	0x42020400
 8000ef4:	42021000 	.word	0x42021000

08000ef8 <cs_low>:
extern SPI_HandleTypeDef hspi2;
static volatile uint8_t spi2_dma_done = 0;   // define ONCE in this file


// ---------- Chip Select helpers (use CubeMX macros) ----------
static inline void cs_low (void){ HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_RESET); }
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f02:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <cs_low+0x14>)
 8000f04:	f002 f9ce 	bl	80032a4 <HAL_GPIO_WritePin>
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	42021c00 	.word	0x42021c00

08000f10 <cs_high>:
static inline void cs_high(void){ HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);  }
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f1a:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <cs_high+0x14>)
 8000f1c:	f002 f9c2 	bl	80032a4 <HAL_GPIO_WritePin>
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	42021c00 	.word	0x42021c00

08000f28 <HAL_SPI_TxRxCpltCallback>:


// DMA complete ISR: take a *cycle* timestamp as soon as possible
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI2){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d106      	bne.n	8000f48 <HAL_SPI_TxRxCpltCallback+0x20>
    t_spi2_cb = DWT->CYCCNT;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <HAL_SPI_TxRxCpltCallback+0x30>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_SPI_TxRxCpltCallback+0x34>)
 8000f40:	6013      	str	r3, [r2, #0]
    spi2_dma_done = 1;
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
  }
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40003800 	.word	0x40003800
 8000f58:	e0001000 	.word	0xe0001000
 8000f5c:	20000474 	.word	0x20000474
 8000f60:	2000047c 	.word	0x2000047c

08000f64 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI2){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <HAL_SPI_ErrorCallback+0x2c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <HAL_SPI_ErrorCallback+0x20>
    t_spi2_cb = DWT->CYCCNT;
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <HAL_SPI_ErrorCallback+0x30>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <HAL_SPI_ErrorCallback+0x34>)
 8000f7c:	6013      	str	r3, [r2, #0]
    spi2_dma_done = 1;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <HAL_SPI_ErrorCallback+0x38>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
  }
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40003800 	.word	0x40003800
 8000f94:	e0001000 	.word	0xe0001000
 8000f98:	20000474 	.word	0x20000474
 8000f9c:	2000047c 	.word	0x2000047c

08000fa0 <dhcx_write>:


// ---------- Low-level write (blocking) ----------
static HAL_StatusTypeDef dhcx_write(uint8_t reg, uint8_t val){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
  uint8_t tx[2] = { (uint8_t)(reg & 0x7F), val }; // MSB=0 => write
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	733b      	strb	r3, [r7, #12]
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	737b      	strb	r3, [r7, #13]
  cs_low();
 8000fbe:	f7ff ff9b 	bl	8000ef8 <cs_low>
  HAL_StatusTypeDef st = HAL_SPI_Transmit(&hspi2, tx, 2, HAL_MAX_DELAY);
 8000fc2:	f107 010c 	add.w	r1, r7, #12
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <dhcx_write+0x44>)
 8000fce:	f006 fb1b 	bl	8007608 <HAL_SPI_Transmit>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  cs_high();
 8000fd6:	f7ff ff9b 	bl	8000f10 <cs_high>
  return st;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000258 	.word	0x20000258

08000fe8 <dhcx_read_dma>:

// dev_read_dma with timing stamps
static HAL_StatusTypeDef dhcx_read_dma(uint8_t reg, uint8_t* dst, uint16_t len){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
  static uint8_t spi_tx[32];
  static uint8_t spi_rx[32];
  if (len + 1 > sizeof(spi_tx)) return HAL_ERROR;
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d901      	bls.n	8001004 <dhcx_read_dma+0x1c>
 8001000:	2301      	movs	r3, #1
 8001002:	e03f      	b.n	8001084 <dhcx_read_dma+0x9c>

  spi_tx[0] = 0x80 | (reg & 0x7F);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <dhcx_read_dma+0xa4>)
 800100e:	701a      	strb	r2, [r3, #0]
  memset(&spi_tx[1], 0, len);
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	461a      	mov	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	481e      	ldr	r0, [pc, #120]	@ (8001090 <dhcx_read_dma+0xa8>)
 8001018:	f008 f91a 	bl	8009250 <memset>

  spi2_dma_done = 0;
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <dhcx_read_dma+0xac>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
  cs_low();
 8001022:	f7ff ff69 	bl	8000ef8 <cs_low>

  t_spi2_start = cycles_now();
 8001026:	f7ff fae5 	bl	80005f4 <cycles_now>
 800102a:	4603      	mov	r3, r0
 800102c:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <dhcx_read_dma+0xb0>)
 800102e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef st = HAL_SPI_TransmitReceive_DMA(&hspi2, spi_tx, spi_rx, len+1);
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	4a19      	ldr	r2, [pc, #100]	@ (800109c <dhcx_read_dma+0xb4>)
 8001038:	4914      	ldr	r1, [pc, #80]	@ (800108c <dhcx_read_dma+0xa4>)
 800103a:	4819      	ldr	r0, [pc, #100]	@ (80010a0 <dhcx_read_dma+0xb8>)
 800103c:	f006 fcf8 	bl	8007a30 <HAL_SPI_TransmitReceive_DMA>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
  t_spi2_callret = cycles_now();
 8001044:	f7ff fad6 	bl	80005f4 <cycles_now>
 8001048:	4603      	mov	r3, r0
 800104a:	4a16      	ldr	r2, [pc, #88]	@ (80010a4 <dhcx_read_dma+0xbc>)
 800104c:	6013      	str	r3, [r2, #0]

  if (st != HAL_OK){
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <dhcx_read_dma+0x74>
    cs_high();
 8001054:	f7ff ff5c 	bl	8000f10 <cs_high>
    return st;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	e013      	b.n	8001084 <dhcx_read_dma+0x9c>
  }

  while (!spi2_dma_done) { /* busy-wait for this demo */ }
 800105c:	bf00      	nop
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <dhcx_read_dma+0xac>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0fa      	beq.n	800105e <dhcx_read_dma+0x76>

  cs_high();
 8001068:	f7ff ff52 	bl	8000f10 <cs_high>
  t_spi2_done = cycles_now();
 800106c:	f7ff fac2 	bl	80005f4 <cycles_now>
 8001070:	4603      	mov	r3, r0
 8001072:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <dhcx_read_dma+0xc0>)
 8001074:	6013      	str	r3, [r2, #0]

  memcpy(dst, &spi_rx[1], len);
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	461a      	mov	r2, r3
 800107a:	490c      	ldr	r1, [pc, #48]	@ (80010ac <dhcx_read_dma+0xc4>)
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f008 f91b 	bl	80092b8 <memcpy>
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000480 	.word	0x20000480
 8001090:	20000481 	.word	0x20000481
 8001094:	2000047c 	.word	0x2000047c
 8001098:	2000046c 	.word	0x2000046c
 800109c:	200004a0 	.word	0x200004a0
 80010a0:	20000258 	.word	0x20000258
 80010a4:	20000470 	.word	0x20000470
 80010a8:	20000478 	.word	0x20000478
 80010ac:	200004a1 	.word	0x200004a1

080010b0 <dhcx_init>:
#define DHCX_FS_XL_2G     (0x00u<<2)
#define DHCX_FS_G_2000DPS (0x03u<<2)
#endif

// ---------- Sensor init / poll / burst read ----------
static void dhcx_init(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  dhcx_write(DHCX_REG_CTRL3_C, DHCX_BDU | DHCX_IF_INC);
 80010b4:	2144      	movs	r1, #68	@ 0x44
 80010b6:	2012      	movs	r0, #18
 80010b8:	f7ff ff72 	bl	8000fa0 <dhcx_write>
  dhcx_write(DHCX_REG_CTRL2_G,  (uint8_t)((DHCX_ODR_6k66<<4) | DHCX_FS_G_2000DPS));
 80010bc:	21ac      	movs	r1, #172	@ 0xac
 80010be:	2011      	movs	r0, #17
 80010c0:	f7ff ff6e 	bl	8000fa0 <dhcx_write>
  dhcx_write(DHCX_REG_CTRL1_XL, (uint8_t)((DHCX_ODR_6k66<<4) | DHCX_FS_XL_2G));
 80010c4:	21a0      	movs	r1, #160	@ 0xa0
 80010c6:	2010      	movs	r0, #16
 80010c8:	f7ff ff6a 	bl	8000fa0 <dhcx_write>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <dhcx_both_ready>:

static uint8_t dhcx_both_ready(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  uint8_t s=0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if (HAL_OK != dhcx_read_dma(DHCX_REG_STATUS, &s, 1)) return 0;
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	201e      	movs	r0, #30
 80010e2:	f7ff ff81 	bl	8000fe8 <dhcx_read_dma>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <dhcx_both_ready+0x20>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e007      	b.n	8001100 <dhcx_both_ready+0x30>
  return (s & 0x03u) == 0x03u;  // GDA|XLDA
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	bf0c      	ite	eq
 80010fa:	2301      	moveq	r3, #1
 80010fc:	2300      	movne	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <dhcx_read_gyro_accel_dma>:

static HAL_StatusTypeDef dhcx_read_gyro_accel_dma(dhcx_raw_t* out){
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint8_t b[12];
  HAL_StatusTypeDef st = dhcx_read_dma(DHCX_REG_OUTX_L_G, b, sizeof(b));
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	220c      	movs	r2, #12
 8001116:	4619      	mov	r1, r3
 8001118:	2022      	movs	r0, #34	@ 0x22
 800111a:	f7ff ff65 	bl	8000fe8 <dhcx_read_dma>
 800111e:	4603      	mov	r3, r0
 8001120:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <dhcx_read_gyro_accel_dma+0x24>
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	e03c      	b.n	80011a6 <dhcx_read_gyro_accel_dma+0x9e>

  out->gx = (int16_t)((b[1]<<8) | b[0]);
 800112c:	7a7b      	ldrb	r3, [r7, #9]
 800112e:	b21b      	sxth	r3, r3
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7a3b      	ldrb	r3, [r7, #8]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	801a      	strh	r2, [r3, #0]
  out->gy = (int16_t)((b[3]<<8) | b[2]);
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	b21b      	sxth	r3, r3
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	805a      	strh	r2, [r3, #2]
  out->gz = (int16_t)((b[5]<<8) | b[4]);
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	b21b      	sxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	7b3b      	ldrb	r3, [r7, #12]
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21a      	sxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	809a      	strh	r2, [r3, #4]
  out->ax = (int16_t)((b[7]<<8) | b[6]);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	b21b      	sxth	r3, r3
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	80da      	strh	r2, [r3, #6]
  out->ay = (int16_t)((b[9]<<8) | b[8]);
 800117c:	7c7b      	ldrb	r3, [r7, #17]
 800117e:	b21b      	sxth	r3, r3
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7c3b      	ldrb	r3, [r7, #16]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	811a      	strh	r2, [r3, #8]
  out->az = (int16_t)((b[11]<<8)| b[10]);
 8001190:	7cfb      	ldrb	r3, [r7, #19]
 8001192:	b21b      	sxth	r3, r3
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	7cbb      	ldrb	r3, [r7, #18]
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21a      	sxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	815a      	strh	r2, [r3, #10]
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b2:	b672      	cpsid	i
}
 80011b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <Error_Handler+0x8>
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_MspInit+0x38>)
 80011c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_MspInit+0x38>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_MspInit+0x38>)
 80011d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 80011e0:	f002 f940 	bl	8003464 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 80011e4:	f002 f94e 	bl	8003484 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 80011e8:	f002 f95c 	bl	80034a4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	46020c00 	.word	0x46020c00

080011f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0c4      	sub	sp, #272	@ 0x110
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001202:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001206:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800121c:	22c8      	movs	r2, #200	@ 0xc8
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f008 f815 	bl	8009250 <memset>
  if(hspi->Instance==SPI1)
 8001226:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800122a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4ab0      	ldr	r2, [pc, #704]	@ (80014f4 <HAL_SPI_MspInit+0x2fc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d147      	bne.n	80012c8 <HAL_SPI_MspInit+0xd0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001238:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001244:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fbe3 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 800125c:	f7ff ffa7 	bl	80011ae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001260:	4ba5      	ldr	r3, [pc, #660]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001262:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001266:	4aa4      	ldr	r2, [pc, #656]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001268:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800126c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001270:	4ba1      	ldr	r3, [pc, #644]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800127e:	4b9e      	ldr	r3, [pc, #632]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001284:	4a9c      	ldr	r2, [pc, #624]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800128a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800128e:	4b9a      	ldr	r3, [pc, #616]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 800129c:	231c      	movs	r3, #28
 800129e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012b4:	2305      	movs	r3, #5
 80012b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ba:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80012be:	4619      	mov	r1, r3
 80012c0:	488e      	ldr	r0, [pc, #568]	@ (80014fc <HAL_SPI_MspInit+0x304>)
 80012c2:	f001 fe0f 	bl	8002ee4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012c6:	e1d3      	b.n	8001670 <HAL_SPI_MspInit+0x478>
  else if(hspi->Instance==SPI2)
 80012c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a8a      	ldr	r2, [pc, #552]	@ (8001500 <HAL_SPI_MspInit+0x308>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	f040 8120 	bne.w	800151c <HAL_SPI_MspInit+0x324>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80012dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fb92 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 80012fe:	f7ff ff56 	bl	80011ae <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001302:	4b7d      	ldr	r3, [pc, #500]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001304:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001308:	4a7b      	ldr	r2, [pc, #492]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001312:	4b79      	ldr	r3, [pc, #484]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001314:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001320:	4b75      	ldr	r3, [pc, #468]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001326:	4a74      	ldr	r2, [pc, #464]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001330:	4b71      	ldr	r3, [pc, #452]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133a:	623b      	str	r3, [r7, #32]
 800133c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b6e      	ldr	r3, [pc, #440]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001344:	4a6c      	ldr	r2, [pc, #432]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800134e:	4b6a      	ldr	r3, [pc, #424]	@ (80014f8 <HAL_SPI_MspInit+0x300>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800135c:	230a      	movs	r3, #10
 800135e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001374:	2305      	movs	r3, #5
 8001376:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800137a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800137e:	4619      	mov	r1, r3
 8001380:	4860      	ldr	r0, [pc, #384]	@ (8001504 <HAL_SPI_MspInit+0x30c>)
 8001382:	f001 fdaf 	bl	8002ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001386:	2308      	movs	r3, #8
 8001388:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800139e:	2305      	movs	r3, #5
 80013a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80013a8:	4619      	mov	r1, r3
 80013aa:	4857      	ldr	r0, [pc, #348]	@ (8001508 <HAL_SPI_MspInit+0x310>)
 80013ac:	f001 fd9a 	bl	8002ee4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80013b0:	4b56      	ldr	r3, [pc, #344]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013b2:	4a57      	ldr	r2, [pc, #348]	@ (8001510 <HAL_SPI_MspInit+0x318>)
 80013b4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 80013b6:	4b55      	ldr	r3, [pc, #340]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013b8:	2209      	movs	r2, #9
 80013ba:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80013bc:	4b53      	ldr	r3, [pc, #332]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c2:	4b52      	ldr	r3, [pc, #328]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 80013ca:	4b50      	ldr	r3, [pc, #320]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 80013d0:	4b4e      	ldr	r3, [pc, #312]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80013d6:	4b4d      	ldr	r3, [pc, #308]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80013dc:	4b4b      	ldr	r3, [pc, #300]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80013e2:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013e8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80013ea:	4b48      	ldr	r3, [pc, #288]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 80013f0:	4b46      	ldr	r3, [pc, #280]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80013f6:	4b45      	ldr	r3, [pc, #276]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80013fc:	4b43      	ldr	r3, [pc, #268]	@ (800150c <HAL_SPI_MspInit+0x314>)
 80013fe:	2200      	movs	r2, #0
 8001400:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8001402:	4b42      	ldr	r3, [pc, #264]	@ (800150c <HAL_SPI_MspInit+0x314>)
 8001404:	2200      	movs	r2, #0
 8001406:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001408:	4840      	ldr	r0, [pc, #256]	@ (800150c <HAL_SPI_MspInit+0x314>)
 800140a:	f000 fe11 	bl	8002030 <HAL_DMA_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8001414:	f7ff fecb 	bl	80011ae <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8001418:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800141c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a3a      	ldr	r2, [pc, #232]	@ (800150c <HAL_SPI_MspInit+0x314>)
 8001424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001428:	4a38      	ldr	r2, [pc, #224]	@ (800150c <HAL_SPI_MspInit+0x314>)
 800142a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800142e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001436:	2110      	movs	r1, #16
 8001438:	4834      	ldr	r0, [pc, #208]	@ (800150c <HAL_SPI_MspInit+0x314>)
 800143a:	f001 f9ad 	bl	8002798 <HAL_DMA_ConfigChannelAttributes>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_SPI_MspInit+0x250>
      Error_Handler();
 8001444:	f7ff feb3 	bl	80011ae <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001448:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 800144a:	4a33      	ldr	r2, [pc, #204]	@ (8001518 <HAL_SPI_MspInit+0x320>)
 800144c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 800144e:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001450:	2208      	movs	r2, #8
 8001452:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001454:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800145a:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 8001466:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001468:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800146c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 800147c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001480:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001484:	2201      	movs	r2, #1
 8001486:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001488:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 800148a:	2201      	movs	r2, #1
 800148c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001490:	2200      	movs	r2, #0
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 8001496:	2200      	movs	r2, #0
 8001498:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 800149c:	2200      	movs	r2, #0
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80014a0:	481c      	ldr	r0, [pc, #112]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 80014a2:	f000 fdc5 	bl	8002030 <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_SPI_MspInit+0x2b8>
      Error_Handler();
 80014ac:	f7ff fe7f 	bl	80011ae <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 80014b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 80014bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80014c0:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 80014c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014ce:	2110      	movs	r1, #16
 80014d0:	4810      	ldr	r0, [pc, #64]	@ (8001514 <HAL_SPI_MspInit+0x31c>)
 80014d2:	f001 f961 	bl	8002798 <HAL_DMA_ConfigChannelAttributes>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 80014dc:	f7ff fe67 	bl	80011ae <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	203c      	movs	r0, #60	@ 0x3c
 80014e6:	f000 fcc7 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80014ea:	203c      	movs	r0, #60	@ 0x3c
 80014ec:	f000 fcde 	bl	8001eac <HAL_NVIC_EnableIRQ>
}
 80014f0:	e0be      	b.n	8001670 <HAL_SPI_MspInit+0x478>
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	46020c00 	.word	0x46020c00
 80014fc:	42021800 	.word	0x42021800
 8001500:	40003800 	.word	0x40003800
 8001504:	42022000 	.word	0x42022000
 8001508:	42020c00 	.word	0x42020c00
 800150c:	200002e8 	.word	0x200002e8
 8001510:	400200d0 	.word	0x400200d0
 8001514:	20000360 	.word	0x20000360
 8001518:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 800151c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001520:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a54      	ldr	r2, [pc, #336]	@ (800167c <HAL_SPI_MspInit+0x484>)
 800152a:	4293      	cmp	r3, r2
 800152c:	f040 80a0 	bne.w	8001670 <HAL_SPI_MspInit+0x478>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001530:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 800153c:	2310      	movs	r3, #16
 800153e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001542:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fa68 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_SPI_MspInit+0x35e>
      Error_Handler();
 8001552:	f7ff fe2c 	bl	80011ae <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001556:	4b4a      	ldr	r3, [pc, #296]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 8001558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800155c:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 8001568:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001574:	4b42      	ldr	r3, [pc, #264]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 8001576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157a:	4a41      	ldr	r2, [pc, #260]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 800157c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001580:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001584:	4b3e      	ldr	r3, [pc, #248]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 8001586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800158a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 8001594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001598:	4a39      	ldr	r2, [pc, #228]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015a2:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a8:	f003 0201 	and.w	r2, r3, #1
 80015ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015be:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 80015c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <HAL_SPI_MspInit+0x488>)
 80015d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d6:	f003 0202 	and.w	r2, r3, #2
 80015da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ec:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001608:	2306      	movs	r3, #6
 800160a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800160e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001612:	4619      	mov	r1, r3
 8001614:	481b      	ldr	r0, [pc, #108]	@ (8001684 <HAL_SPI_MspInit+0x48c>)
 8001616:	f001 fc65 	bl	8002ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800161a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800161e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001634:	2306      	movs	r3, #6
 8001636:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800163e:	4619      	mov	r1, r3
 8001640:	4811      	ldr	r0, [pc, #68]	@ (8001688 <HAL_SPI_MspInit+0x490>)
 8001642:	f001 fc4f 	bl	8002ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001646:	2330      	movs	r3, #48	@ 0x30
 8001648:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800165e:	2306      	movs	r3, #6
 8001660:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001668:	4619      	mov	r1, r3
 800166a:	4808      	ldr	r0, [pc, #32]	@ (800168c <HAL_SPI_MspInit+0x494>)
 800166c:	f001 fc3a 	bl	8002ee4 <HAL_GPIO_Init>
}
 8001670:	bf00      	nop
 8001672:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	46002000 	.word	0x46002000
 8001680:	46020c00 	.word	0x46020c00
 8001684:	42021800 	.word	0x42021800
 8001688:	42020000 	.word	0x42020000
 800168c:	42020400 	.word	0x42020400

08001690 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0c0      	sub	sp, #256	@ 0x100
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	22c8      	movs	r2, #200	@ 0xc8
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f007 fdcd 	bl	8009250 <memset>
  if(huart->Instance==USART2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001834 <HAL_UART_MspInit+0x1a4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d145      	bne.n	800174c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016c0:	f04f 0202 	mov.w	r2, #2
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 f9a1 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80016e0:	f7ff fd65 	bl	80011ae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e4:	4b54      	ldr	r3, [pc, #336]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80016e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016ea:	4a53      	ldr	r2, [pc, #332]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016f4:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80016f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	4b4d      	ldr	r3, [pc, #308]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 8001704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001708:	4a4b      	ldr	r2, [pc, #300]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001712:	4b49      	ldr	r3, [pc, #292]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 8001714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8001720:	2370      	movs	r3, #112	@ 0x70
 8001722:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001738:	2307      	movs	r3, #7
 800173a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001742:	4619      	mov	r1, r3
 8001744:	483d      	ldr	r0, [pc, #244]	@ (800183c <HAL_UART_MspInit+0x1ac>)
 8001746:	f001 fbcd 	bl	8002ee4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800174a:	e06e      	b.n	800182a <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3b      	ldr	r2, [pc, #236]	@ (8001840 <HAL_UART_MspInit+0x1b0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d169      	bne.n	800182a <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001756:	f04f 0204 	mov.w	r2, #4
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001762:	2300      	movs	r3, #0
 8001764:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	4618      	mov	r0, r3
 800176c:	f003 f956 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_UART_MspInit+0xea>
      Error_Handler();
 8001776:	f7ff fd1a 	bl	80011ae <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800177a:	4b2f      	ldr	r3, [pc, #188]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 800177c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001780:	4a2d      	ldr	r2, [pc, #180]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001786:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 800178c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 800179a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179e:	4a26      	ldr	r2, [pc, #152]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a8:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80017aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80017b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_UART_MspInit+0x1a8>)
 80017c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80017d4:	23a0      	movs	r3, #160	@ 0xa0
 80017d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	@ (8001844 <HAL_UART_MspInit+0x1b4>)
 80017fa:	f001 fb73 	bl	8002ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80017fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001802:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_UART_MspInit+0x1ac>)
 8001826:	f001 fb5d 	bl	8002ee4 <HAL_GPIO_Init>
}
 800182a:	bf00      	nop
 800182c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40004400 	.word	0x40004400
 8001838:	46020c00 	.word	0x46020c00
 800183c:	42020c00 	.word	0x42020c00
 8001840:	40004800 	.word	0x40004800
 8001844:	42020000 	.word	0x42020000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <MemManage_Handler+0x4>

08001860 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 f9ef 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f001 fd12 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 80018b8:	2002      	movs	r0, #2
 80018ba:	f001 fd0b 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 80018c6:	2004      	movs	r0, #4
 80018c8:	f001 fd04 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 80018d4:	2008      	movs	r0, #8
 80018d6:	f001 fcfd 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}

080018de <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 80018e2:	2010      	movs	r0, #16
 80018e4:	f001 fcf6 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 80018f0:	2020      	movs	r0, #32
 80018f2:	f001 fcef 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}

080018fa <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 80018fe:	2040      	movs	r0, #64	@ 0x40
 8001900:	f001 fce8 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 800190c:	2080      	movs	r0, #128	@ 0x80
 800190e:	f001 fce1 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}

08001916 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 800191a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800191e:	f001 fcd9 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}

08001926 <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 800192a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800192e:	f001 fcd1 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}

08001936 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 800193a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800193e:	f001 fcc9 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 800194a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800194e:	f001 fcc1 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}

08001956 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 800195a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800195e:	f001 fcb9 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}

08001966 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800196a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800196e:	f001 fcb1 	bl	80032d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <GPDMA1_Channel0_IRQHandler+0x10>)
 800197e:	f000 fd9e 	bl	80024be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000360 	.word	0x20000360

0800198c <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <GPDMA1_Channel1_IRQHandler+0x10>)
 8001992:	f000 fd94 	bl	80024be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e8 	.word	0x200002e8

080019a0 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <GPDMA1_Channel2_IRQHandler+0x10>)
 80019a6:	f000 fd8a 	bl	80024be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200001e0 	.word	0x200001e0

080019b4 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <GPDMA1_Channel3_IRQHandler+0x10>)
 80019ba:	f000 fd80 	bl	80024be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000168 	.word	0x20000168

080019c8 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <GPDMA1_Channel4_IRQHandler+0x10>)
 80019ce:	f000 fd76 	bl	80024be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200000f0 	.word	0x200000f0

080019dc <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <GPDMA1_Channel5_IRQHandler+0x10>)
 80019e2:	f000 fd6c 	bl	80024be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000078 	.word	0x20000078

080019f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <SPI2_IRQHandler+0x10>)
 80019f6:	f006 faa9 	bl	8007f4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000258 	.word	0x20000258

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f007 fc14 	bl	8009260 <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200c0000 	.word	0x200c0000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	200004c0 	.word	0x200004c0
 8001a6c:	20000610 	.word	0x20000610

08001a70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a74:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <SystemInit+0x68>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ad8 <SystemInit+0x68>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <SystemInit+0x6c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <SystemInit+0x6c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <SystemInit+0x6c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <SystemInit+0x6c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <SystemInit+0x6c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <SystemInit+0x6c>)
 8001aa2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001aa6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <SystemInit+0x6c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <SystemInit+0x6c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <SystemInit+0x6c>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <SystemInit+0x6c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac4:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <SystemInit+0x68>)
 8001ac6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aca:	609a      	str	r2, [r3, #8]
  #endif
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	46020c00 	.word	0x46020c00

08001ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae4:	f7ff ffc4 	bl	8001a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ae8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aea:	e003      	b.n	8001af4 <LoopCopyDataInit>

08001aec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001af0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001af2:	3104      	adds	r1, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001af4:	480a      	ldr	r0, [pc, #40]	@ (8001b20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001af6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001af8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001afa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001afc:	d3f6      	bcc.n	8001aec <CopyDataInit>
	ldr	r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b00:	e002      	b.n	8001b08 <LoopFillZerobss>

08001b02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b04:	f842 3b04 	str.w	r3, [r2], #4

08001b08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b08:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <LoopForever+0x16>)
	cmp	r2, r3
 8001b0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b0c:	d3f9      	bcc.n	8001b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f007 fbad 	bl	800926c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b12:	f7fe fd7b 	bl	800060c <main>

08001b16 <LoopForever>:

LoopForever:
    b LoopForever
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b18:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001b1c:	08009d10 	.word	0x08009d10
	ldr	r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b24:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001b28:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001b2c:	20000610 	.word	0x20000610

08001b30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_Init+0x50>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a11      	ldr	r2, [pc, #68]	@ (8001b84 <HAL_Init+0x50>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 f98c 	bl	8001e62 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b4a:	f002 fd89 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <HAL_Init+0x54>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <HAL_Init+0x58>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_Init+0x5c>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b64:	2004      	movs	r0, #4
 8001b66:	f000 f9d1 	bl	8001f0c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	f000 f812 	bl	8001b94 <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e002      	b.n	8001b80 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7a:	f7ff fb1f 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000
 8001b88:	46020c00 	.word	0x46020c00
 8001b8c:	08009bcc 	.word	0x08009bcc
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001ba0:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <HAL_InitTick+0xdc>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e05c      	b.n	8001c66 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001bac:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <HAL_InitTick+0xe0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c78 <HAL_InitTick+0xe4>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <HAL_InitTick+0xdc>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e037      	b.n	8001c42 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001bd2:	f000 f9f3 	bl	8001fbc <HAL_SYSTICK_GetCLKSourceConfig>
 8001bd6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d023      	beq.n	8001c26 <HAL_InitTick+0x92>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d82d      	bhi.n	8001c40 <HAL_InitTick+0xac>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_InitTick+0x5e>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d00d      	beq.n	8001c0c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001bf0:	e026      	b.n	8001c40 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_InitTick+0xe4>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <HAL_InitTick+0xdc>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001c00:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	60fb      	str	r3, [r7, #12]
        break;
 8001c0a:	e01a      	b.n	8001c42 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_InitTick+0xdc>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c1a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	60fb      	str	r3, [r7, #12]
        break;
 8001c24:	e00d      	b.n	8001c42 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_InitTick+0xdc>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	60fb      	str	r3, [r7, #12]
        break;
 8001c3e:	e000      	b.n	8001c42 <HAL_InitTick+0xae>
        break;
 8001c40:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f940 	bl	8001ec8 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e009      	b.n	8001c66 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c52:	2200      	movs	r2, #0
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5a:	f000 f90d 	bl	8001e78 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001c5e:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_InitTick+0xe8>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	e000e010 	.word	0xe000e010
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	200004c4 	.word	0x200004c4

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200004c4 	.word	0x200004c4

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	@ (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	@ (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	@ (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff4c 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e86:	f7ff ff63 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001e8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7ff ffb3 	bl	8001dfc <NVIC_EncodePriority>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff82 	bl	8001da8 <__NVIC_SetPriority>
}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff56 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00d      	b.n	8001efa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <HAL_SYSTICK_Config+0x40>)
 8001ef2:	f043 0303 	orr.w	r3, r3, #3
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d844      	bhi.n	8001fa4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f43 	.word	0x08001f43
 8001f24:	08001f61 	.word	0x08001f61
 8001f28:	08001f83 	.word	0x08001f83
 8001f2c:	08001fa5 	.word	0x08001fa5
 8001f30:	08001f35 	.word	0x08001f35
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f34:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6013      	str	r3, [r2, #0]
      break;
 8001f40:	e031      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f54:	4a18      	ldr	r2, [pc, #96]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f5e:	e022      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f76:	4a10      	ldr	r2, [pc, #64]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f80:	e011      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f94:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f98:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001fa2:	e000      	b.n	8001fa6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001fa4:	bf00      	nop
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010
 8001fb8:	46020c00 	.word	0x46020c00

08001fbc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001fc2:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	e021      	b.n	8002018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001fd4:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001fde:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fe6:	d011      	beq.n	800200c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fee:	d810      	bhi.n	8002012 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ffc:	d003      	beq.n	8002006 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001ffe:	e008      	b.n	8002012 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
        break;
 8002004:	e008      	b.n	8002018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002006:	2301      	movs	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
        break;
 800200a:	e005      	b.n	8002018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800200c:	2302      	movs	r3, #2
 800200e:	607b      	str	r3, [r7, #4]
        break;
 8002010:	e002      	b.n	8002018 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
        break;
 8002016:	bf00      	nop
    }
  }
  return systick_source;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010
 800202c:	46020c00 	.word	0x46020c00

08002030 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff fe36 	bl	8001ca8 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0f0      	b.n	800222a <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a79      	ldr	r2, [pc, #484]	@ (8002234 <HAL_DMA_Init+0x204>)
 800204e:	4293      	cmp	r3, r2
 8002050:	f000 809f 	beq.w	8002192 <HAL_DMA_Init+0x162>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a77      	ldr	r2, [pc, #476]	@ (8002238 <HAL_DMA_Init+0x208>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f000 8099 	beq.w	8002192 <HAL_DMA_Init+0x162>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a75      	ldr	r2, [pc, #468]	@ (800223c <HAL_DMA_Init+0x20c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	f000 8093 	beq.w	8002192 <HAL_DMA_Init+0x162>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a73      	ldr	r2, [pc, #460]	@ (8002240 <HAL_DMA_Init+0x210>)
 8002072:	4293      	cmp	r3, r2
 8002074:	f000 808d 	beq.w	8002192 <HAL_DMA_Init+0x162>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a71      	ldr	r2, [pc, #452]	@ (8002244 <HAL_DMA_Init+0x214>)
 800207e:	4293      	cmp	r3, r2
 8002080:	f000 8087 	beq.w	8002192 <HAL_DMA_Init+0x162>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6f      	ldr	r2, [pc, #444]	@ (8002248 <HAL_DMA_Init+0x218>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f000 8081 	beq.w	8002192 <HAL_DMA_Init+0x162>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6d      	ldr	r2, [pc, #436]	@ (800224c <HAL_DMA_Init+0x21c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d07b      	beq.n	8002192 <HAL_DMA_Init+0x162>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a6c      	ldr	r2, [pc, #432]	@ (8002250 <HAL_DMA_Init+0x220>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d076      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002254 <HAL_DMA_Init+0x224>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d071      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a69      	ldr	r2, [pc, #420]	@ (8002258 <HAL_DMA_Init+0x228>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d06c      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a67      	ldr	r2, [pc, #412]	@ (800225c <HAL_DMA_Init+0x22c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d067      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a66      	ldr	r2, [pc, #408]	@ (8002260 <HAL_DMA_Init+0x230>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d062      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a64      	ldr	r2, [pc, #400]	@ (8002264 <HAL_DMA_Init+0x234>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d05d      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a63      	ldr	r2, [pc, #396]	@ (8002268 <HAL_DMA_Init+0x238>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d058      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a61      	ldr	r2, [pc, #388]	@ (800226c <HAL_DMA_Init+0x23c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d053      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a60      	ldr	r2, [pc, #384]	@ (8002270 <HAL_DMA_Init+0x240>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d04e      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002274 <HAL_DMA_Init+0x244>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d049      	beq.n	8002192 <HAL_DMA_Init+0x162>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5d      	ldr	r2, [pc, #372]	@ (8002278 <HAL_DMA_Init+0x248>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d044      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5b      	ldr	r2, [pc, #364]	@ (800227c <HAL_DMA_Init+0x24c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d03f      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5a      	ldr	r2, [pc, #360]	@ (8002280 <HAL_DMA_Init+0x250>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d03a      	beq.n	8002192 <HAL_DMA_Init+0x162>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_DMA_Init+0x254>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d035      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a57      	ldr	r2, [pc, #348]	@ (8002288 <HAL_DMA_Init+0x258>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d030      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a55      	ldr	r2, [pc, #340]	@ (800228c <HAL_DMA_Init+0x25c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02b      	beq.n	8002192 <HAL_DMA_Init+0x162>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a54      	ldr	r2, [pc, #336]	@ (8002290 <HAL_DMA_Init+0x260>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d026      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a52      	ldr	r2, [pc, #328]	@ (8002294 <HAL_DMA_Init+0x264>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d021      	beq.n	8002192 <HAL_DMA_Init+0x162>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a51      	ldr	r2, [pc, #324]	@ (8002298 <HAL_DMA_Init+0x268>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01c      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a4f      	ldr	r2, [pc, #316]	@ (800229c <HAL_DMA_Init+0x26c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d017      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4e      	ldr	r2, [pc, #312]	@ (80022a0 <HAL_DMA_Init+0x270>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d012      	beq.n	8002192 <HAL_DMA_Init+0x162>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a4c      	ldr	r2, [pc, #304]	@ (80022a4 <HAL_DMA_Init+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00d      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a4b      	ldr	r2, [pc, #300]	@ (80022a8 <HAL_DMA_Init+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d008      	beq.n	8002192 <HAL_DMA_Init+0x162>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a49      	ldr	r2, [pc, #292]	@ (80022ac <HAL_DMA_Init+0x27c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <HAL_DMA_Init+0x162>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a48      	ldr	r2, [pc, #288]	@ (80022b0 <HAL_DMA_Init+0x280>)
 8002190:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10e      	bne.n	80021c4 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0206 	orr.w	r2, r2, #6
 80021da:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80021dc:	e00f      	b.n	80021fe <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80021de:	f7ff fd63 	bl	8001ca8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d908      	bls.n	80021fe <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2210      	movs	r2, #16
 80021f0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e015      	b.n	800222a <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e8      	bne.n	80021de <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fb25 	bl	800285c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020050 	.word	0x40020050
 8002238:	50020050 	.word	0x50020050
 800223c:	400200d0 	.word	0x400200d0
 8002240:	500200d0 	.word	0x500200d0
 8002244:	40020150 	.word	0x40020150
 8002248:	50020150 	.word	0x50020150
 800224c:	400201d0 	.word	0x400201d0
 8002250:	500201d0 	.word	0x500201d0
 8002254:	40020250 	.word	0x40020250
 8002258:	50020250 	.word	0x50020250
 800225c:	400202d0 	.word	0x400202d0
 8002260:	500202d0 	.word	0x500202d0
 8002264:	40020350 	.word	0x40020350
 8002268:	50020350 	.word	0x50020350
 800226c:	400203d0 	.word	0x400203d0
 8002270:	500203d0 	.word	0x500203d0
 8002274:	40020450 	.word	0x40020450
 8002278:	50020450 	.word	0x50020450
 800227c:	400204d0 	.word	0x400204d0
 8002280:	500204d0 	.word	0x500204d0
 8002284:	40020550 	.word	0x40020550
 8002288:	50020550 	.word	0x50020550
 800228c:	400205d0 	.word	0x400205d0
 8002290:	500205d0 	.word	0x500205d0
 8002294:	40020650 	.word	0x40020650
 8002298:	50020650 	.word	0x50020650
 800229c:	400206d0 	.word	0x400206d0
 80022a0:	500206d0 	.word	0x500206d0
 80022a4:	40020750 	.word	0x40020750
 80022a8:	50020750 	.word	0x50020750
 80022ac:	400207d0 	.word	0x400207d0
 80022b0:	500207d0 	.word	0x500207d0

080022b4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e04f      	b.n	800236c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_DMA_Start_IT+0x26>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e048      	b.n	800236c <HAL_DMA_Start_IT+0xb8>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d136      	bne.n	800235c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fa84 	bl	8002810 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002316:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002346:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e007      	b.n	800236c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2240      	movs	r2, #64	@ 0x40
 8002360:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800237c:	f7ff fc94 	bl	8001ca8 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e06b      	b.n	8002464 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d008      	beq.n	80023aa <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e05c      	b.n	8002464 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0204 	orr.w	r2, r2, #4
 80023b8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2205      	movs	r2, #5
 80023be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80023c2:	e020      	b.n	8002406 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80023c4:	f7ff fc70 	bl	8001ca8 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d919      	bls.n	8002406 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f6:	2201      	movs	r2, #1
 80023f8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e02e      	b.n	8002464 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0d7      	beq.n	80023c4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0202 	orr.w	r2, r2, #2
 8002422:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002434:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800244e:	2201      	movs	r2, #1
 8002450:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e019      	b.n	80024b2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e00e      	b.n	80024b2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2204      	movs	r2, #4
 8002498:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80024ce:	f023 030f 	bic.w	r3, r3, #15
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024dc:	3b50      	subs	r3, #80	@ 0x50
 80024de:	09db      	lsrs	r3, r3, #7
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2201      	movs	r2, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 813b 	beq.w	8002774 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d011      	beq.n	8002530 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002522:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800253a:	2b00      	cmp	r3, #0
 800253c:	d011      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002554:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d011      	beq.n	8002594 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002586:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f043 0204 	orr.w	r2, r3, #4
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d011      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025b8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	f043 0208 	orr.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025ea:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d04c      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d045      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002620:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b04      	cmp	r3, #4
 800262c:	d12e      	bne.n	800268c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800263c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0202 	orr.w	r2, r2, #2
 800264c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	2201      	movs	r2, #1
 8002668:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d07a      	beq.n	8002778 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
        }

        return;
 800268a:	e075      	b.n	8002778 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2205      	movs	r2, #5
 8002690:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d039      	beq.n	8002726 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d032      	beq.n	8002726 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d012      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d111      	bne.n	8002704 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ec:	2201      	movs	r2, #1
 80026ee:	731a      	strb	r2, [r3, #12]
 80026f0:	e008      	b.n	8002704 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800270c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	2b00      	cmp	r3, #0
 800272c:	d025      	beq.n	800277a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0202 	orr.w	r2, r2, #2
 800273c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800274a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002756:	2201      	movs	r2, #1
 8002758:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
 8002772:	e002      	b.n	800277a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002778:	bf00      	nop
    }
  }
}
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e02b      	b.n	8002804 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80027b4:	f023 030f 	bic.w	r3, r3, #15
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c2:	3b50      	subs	r3, #80	@ 0x50
 80027c4:	09db      	lsrs	r3, r3, #7
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2201      	movs	r2, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f003 0311 	and.w	r3, r3, #17
 80027e2:	2b11      	cmp	r3, #17
 80027e4:	d106      	bne.n	80027f4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	e006      	b.n	8002802 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	401a      	ands	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	b291      	uxth	r1, r2
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800283c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	430a      	orrs	r2, r1
 800287c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a53      	ldr	r2, [pc, #332]	@ (80029e8 <DMA_Init+0x18c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	f000 80a0 	beq.w	80029e2 <DMA_Init+0x186>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a51      	ldr	r2, [pc, #324]	@ (80029ec <DMA_Init+0x190>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	f000 809a 	beq.w	80029e2 <DMA_Init+0x186>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a4f      	ldr	r2, [pc, #316]	@ (80029f0 <DMA_Init+0x194>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f000 8094 	beq.w	80029e2 <DMA_Init+0x186>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4d      	ldr	r2, [pc, #308]	@ (80029f4 <DMA_Init+0x198>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	f000 808e 	beq.w	80029e2 <DMA_Init+0x186>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4b      	ldr	r2, [pc, #300]	@ (80029f8 <DMA_Init+0x19c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	f000 8088 	beq.w	80029e2 <DMA_Init+0x186>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a49      	ldr	r2, [pc, #292]	@ (80029fc <DMA_Init+0x1a0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	f000 8082 	beq.w	80029e2 <DMA_Init+0x186>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a47      	ldr	r2, [pc, #284]	@ (8002a00 <DMA_Init+0x1a4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d07c      	beq.n	80029e2 <DMA_Init+0x186>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a45      	ldr	r2, [pc, #276]	@ (8002a04 <DMA_Init+0x1a8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d077      	beq.n	80029e2 <DMA_Init+0x186>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a44      	ldr	r2, [pc, #272]	@ (8002a08 <DMA_Init+0x1ac>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d072      	beq.n	80029e2 <DMA_Init+0x186>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a42      	ldr	r2, [pc, #264]	@ (8002a0c <DMA_Init+0x1b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d06d      	beq.n	80029e2 <DMA_Init+0x186>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a41      	ldr	r2, [pc, #260]	@ (8002a10 <DMA_Init+0x1b4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d068      	beq.n	80029e2 <DMA_Init+0x186>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3f      	ldr	r2, [pc, #252]	@ (8002a14 <DMA_Init+0x1b8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d063      	beq.n	80029e2 <DMA_Init+0x186>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a18 <DMA_Init+0x1bc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d05e      	beq.n	80029e2 <DMA_Init+0x186>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a3c      	ldr	r2, [pc, #240]	@ (8002a1c <DMA_Init+0x1c0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d059      	beq.n	80029e2 <DMA_Init+0x186>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3b      	ldr	r2, [pc, #236]	@ (8002a20 <DMA_Init+0x1c4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d054      	beq.n	80029e2 <DMA_Init+0x186>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a39      	ldr	r2, [pc, #228]	@ (8002a24 <DMA_Init+0x1c8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d04f      	beq.n	80029e2 <DMA_Init+0x186>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a38      	ldr	r2, [pc, #224]	@ (8002a28 <DMA_Init+0x1cc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d04a      	beq.n	80029e2 <DMA_Init+0x186>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a36      	ldr	r2, [pc, #216]	@ (8002a2c <DMA_Init+0x1d0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d045      	beq.n	80029e2 <DMA_Init+0x186>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <DMA_Init+0x1d4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d040      	beq.n	80029e2 <DMA_Init+0x186>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a33      	ldr	r2, [pc, #204]	@ (8002a34 <DMA_Init+0x1d8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d03b      	beq.n	80029e2 <DMA_Init+0x186>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a32      	ldr	r2, [pc, #200]	@ (8002a38 <DMA_Init+0x1dc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d036      	beq.n	80029e2 <DMA_Init+0x186>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a30      	ldr	r2, [pc, #192]	@ (8002a3c <DMA_Init+0x1e0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d031      	beq.n	80029e2 <DMA_Init+0x186>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2f      	ldr	r2, [pc, #188]	@ (8002a40 <DMA_Init+0x1e4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d02c      	beq.n	80029e2 <DMA_Init+0x186>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2d      	ldr	r2, [pc, #180]	@ (8002a44 <DMA_Init+0x1e8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d027      	beq.n	80029e2 <DMA_Init+0x186>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2c      	ldr	r2, [pc, #176]	@ (8002a48 <DMA_Init+0x1ec>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <DMA_Init+0x186>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a4c <DMA_Init+0x1f0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <DMA_Init+0x186>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a29      	ldr	r2, [pc, #164]	@ (8002a50 <DMA_Init+0x1f4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d018      	beq.n	80029e2 <DMA_Init+0x186>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a27      	ldr	r2, [pc, #156]	@ (8002a54 <DMA_Init+0x1f8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <DMA_Init+0x186>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a26      	ldr	r2, [pc, #152]	@ (8002a58 <DMA_Init+0x1fc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <DMA_Init+0x186>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a24      	ldr	r2, [pc, #144]	@ (8002a5c <DMA_Init+0x200>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <DMA_Init+0x186>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a23      	ldr	r2, [pc, #140]	@ (8002a60 <DMA_Init+0x204>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <DMA_Init+0x186>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <DMA_Init+0x208>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d142      	bne.n	8002a68 <DMA_Init+0x20c>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e041      	b.n	8002a6a <DMA_Init+0x20e>
 80029e6:	bf00      	nop
 80029e8:	40020050 	.word	0x40020050
 80029ec:	50020050 	.word	0x50020050
 80029f0:	400200d0 	.word	0x400200d0
 80029f4:	500200d0 	.word	0x500200d0
 80029f8:	40020150 	.word	0x40020150
 80029fc:	50020150 	.word	0x50020150
 8002a00:	400201d0 	.word	0x400201d0
 8002a04:	500201d0 	.word	0x500201d0
 8002a08:	40020250 	.word	0x40020250
 8002a0c:	50020250 	.word	0x50020250
 8002a10:	400202d0 	.word	0x400202d0
 8002a14:	500202d0 	.word	0x500202d0
 8002a18:	40020350 	.word	0x40020350
 8002a1c:	50020350 	.word	0x50020350
 8002a20:	400203d0 	.word	0x400203d0
 8002a24:	500203d0 	.word	0x500203d0
 8002a28:	40020450 	.word	0x40020450
 8002a2c:	50020450 	.word	0x50020450
 8002a30:	400204d0 	.word	0x400204d0
 8002a34:	500204d0 	.word	0x500204d0
 8002a38:	40020550 	.word	0x40020550
 8002a3c:	50020550 	.word	0x50020550
 8002a40:	400205d0 	.word	0x400205d0
 8002a44:	500205d0 	.word	0x500205d0
 8002a48:	40020650 	.word	0x40020650
 8002a4c:	50020650 	.word	0x50020650
 8002a50:	400206d0 	.word	0x400206d0
 8002a54:	500206d0 	.word	0x500206d0
 8002a58:	40020750 	.word	0x40020750
 8002a5c:	50020750 	.word	0x50020750
 8002a60:	400207d0 	.word	0x400207d0
 8002a64:	500207d0 	.word	0x500207d0
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	051b      	lsls	r3, r3, #20
 8002a7a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002a7e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	3b01      	subs	r3, #1
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002a8c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac6:	f040 80b0 	bne.w	8002c2a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a82      	ldr	r2, [pc, #520]	@ (8002cd8 <DMA_Init+0x47c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	f000 80a0 	beq.w	8002c16 <DMA_Init+0x3ba>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a80      	ldr	r2, [pc, #512]	@ (8002cdc <DMA_Init+0x480>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	f000 809a 	beq.w	8002c16 <DMA_Init+0x3ba>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce0 <DMA_Init+0x484>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	f000 8094 	beq.w	8002c16 <DMA_Init+0x3ba>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce4 <DMA_Init+0x488>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	f000 808e 	beq.w	8002c16 <DMA_Init+0x3ba>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7a      	ldr	r2, [pc, #488]	@ (8002ce8 <DMA_Init+0x48c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	f000 8088 	beq.w	8002c16 <DMA_Init+0x3ba>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a78      	ldr	r2, [pc, #480]	@ (8002cec <DMA_Init+0x490>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	f000 8082 	beq.w	8002c16 <DMA_Init+0x3ba>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a76      	ldr	r2, [pc, #472]	@ (8002cf0 <DMA_Init+0x494>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d07c      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a74      	ldr	r2, [pc, #464]	@ (8002cf4 <DMA_Init+0x498>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d077      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a73      	ldr	r2, [pc, #460]	@ (8002cf8 <DMA_Init+0x49c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d072      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a71      	ldr	r2, [pc, #452]	@ (8002cfc <DMA_Init+0x4a0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d06d      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a70      	ldr	r2, [pc, #448]	@ (8002d00 <DMA_Init+0x4a4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d068      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6e      	ldr	r2, [pc, #440]	@ (8002d04 <DMA_Init+0x4a8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d063      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6d      	ldr	r2, [pc, #436]	@ (8002d08 <DMA_Init+0x4ac>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d05e      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d0c <DMA_Init+0x4b0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d059      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6a      	ldr	r2, [pc, #424]	@ (8002d10 <DMA_Init+0x4b4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d054      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a68      	ldr	r2, [pc, #416]	@ (8002d14 <DMA_Init+0x4b8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04f      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a67      	ldr	r2, [pc, #412]	@ (8002d18 <DMA_Init+0x4bc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d04a      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a65      	ldr	r2, [pc, #404]	@ (8002d1c <DMA_Init+0x4c0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d045      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a64      	ldr	r2, [pc, #400]	@ (8002d20 <DMA_Init+0x4c4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d040      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a62      	ldr	r2, [pc, #392]	@ (8002d24 <DMA_Init+0x4c8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d03b      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a61      	ldr	r2, [pc, #388]	@ (8002d28 <DMA_Init+0x4cc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d036      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a5f      	ldr	r2, [pc, #380]	@ (8002d2c <DMA_Init+0x4d0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d031      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d30 <DMA_Init+0x4d4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d02c      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5c      	ldr	r2, [pc, #368]	@ (8002d34 <DMA_Init+0x4d8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d027      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5b      	ldr	r2, [pc, #364]	@ (8002d38 <DMA_Init+0x4dc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d022      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a59      	ldr	r2, [pc, #356]	@ (8002d3c <DMA_Init+0x4e0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01d      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a58      	ldr	r2, [pc, #352]	@ (8002d40 <DMA_Init+0x4e4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d018      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a56      	ldr	r2, [pc, #344]	@ (8002d44 <DMA_Init+0x4e8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a55      	ldr	r2, [pc, #340]	@ (8002d48 <DMA_Init+0x4ec>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00e      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a53      	ldr	r2, [pc, #332]	@ (8002d4c <DMA_Init+0x4f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d009      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a52      	ldr	r2, [pc, #328]	@ (8002d50 <DMA_Init+0x4f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <DMA_Init+0x3ba>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a50      	ldr	r2, [pc, #320]	@ (8002d54 <DMA_Init+0x4f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <DMA_Init+0x3be>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <DMA_Init+0x3c0>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e008      	b.n	8002c3c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c32:	d103      	bne.n	8002c3c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c3a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c42:	4b45      	ldr	r3, [pc, #276]	@ (8002d58 <DMA_Init+0x4fc>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	68f9      	ldr	r1, [r7, #12]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a36      	ldr	r2, [pc, #216]	@ (8002d38 <DMA_Init+0x4dc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d022      	beq.n	8002ca8 <DMA_Init+0x44c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a35      	ldr	r2, [pc, #212]	@ (8002d3c <DMA_Init+0x4e0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d01d      	beq.n	8002ca8 <DMA_Init+0x44c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a33      	ldr	r2, [pc, #204]	@ (8002d40 <DMA_Init+0x4e4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d018      	beq.n	8002ca8 <DMA_Init+0x44c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a32      	ldr	r2, [pc, #200]	@ (8002d44 <DMA_Init+0x4e8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d013      	beq.n	8002ca8 <DMA_Init+0x44c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a30      	ldr	r2, [pc, #192]	@ (8002d48 <DMA_Init+0x4ec>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00e      	beq.n	8002ca8 <DMA_Init+0x44c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d4c <DMA_Init+0x4f0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d009      	beq.n	8002ca8 <DMA_Init+0x44c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2d      	ldr	r2, [pc, #180]	@ (8002d50 <DMA_Init+0x4f4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <DMA_Init+0x44c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d54 <DMA_Init+0x4f8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d101      	bne.n	8002cac <DMA_Init+0x450>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <DMA_Init+0x452>
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40020050 	.word	0x40020050
 8002cdc:	50020050 	.word	0x50020050
 8002ce0:	400200d0 	.word	0x400200d0
 8002ce4:	500200d0 	.word	0x500200d0
 8002ce8:	40020150 	.word	0x40020150
 8002cec:	50020150 	.word	0x50020150
 8002cf0:	400201d0 	.word	0x400201d0
 8002cf4:	500201d0 	.word	0x500201d0
 8002cf8:	40020250 	.word	0x40020250
 8002cfc:	50020250 	.word	0x50020250
 8002d00:	400202d0 	.word	0x400202d0
 8002d04:	500202d0 	.word	0x500202d0
 8002d08:	40020350 	.word	0x40020350
 8002d0c:	50020350 	.word	0x50020350
 8002d10:	400203d0 	.word	0x400203d0
 8002d14:	500203d0 	.word	0x500203d0
 8002d18:	40020450 	.word	0x40020450
 8002d1c:	50020450 	.word	0x50020450
 8002d20:	400204d0 	.word	0x400204d0
 8002d24:	500204d0 	.word	0x500204d0
 8002d28:	40020550 	.word	0x40020550
 8002d2c:	50020550 	.word	0x50020550
 8002d30:	400205d0 	.word	0x400205d0
 8002d34:	500205d0 	.word	0x500205d0
 8002d38:	40020650 	.word	0x40020650
 8002d3c:	50020650 	.word	0x50020650
 8002d40:	400206d0 	.word	0x400206d0
 8002d44:	500206d0 	.word	0x500206d0
 8002d48:	40020750 	.word	0x40020750
 8002d4c:	50020750 	.word	0x50020750
 8002d50:	400207d0 	.word	0x400207d0
 8002d54:	500207d0 	.word	0x500207d0
 8002d58:	3cc03180 	.word	0x3cc03180

08002d5c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_DMAEx_List_Start_IT+0x16>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e082      	b.n	8002e7c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d7c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d88:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d005      	beq.n	8002d9c <HAL_DMAEx_List_Start_IT+0x40>
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d16a      	bne.n	8002e6c <HAL_DMAEx_List_Start_IT+0x110>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d067      	beq.n	8002e6c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d157      	bne.n	8002e58 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_DMAEx_List_Start_IT+0x5a>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e062      	b.n	8002e7c <HAL_DMAEx_List_Start_IT+0x120>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dca:	2202      	movs	r2, #2
 8002dcc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002dea:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e1a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f107 010c 	add.w	r1, r7, #12
 8002e26:	2200      	movs	r2, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f82b 	bl	8002e84 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	0c0b      	lsrs	r3, r1, #16
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e007      	b.n	8002e7c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2240      	movs	r2, #64	@ 0x40
 8002e70:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00c      	beq.n	8002eb6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <DMA_List_GetCLLRNodeInfo+0x58>)
 8002ea6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00f      	beq.n	8002ece <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002eb4:	e00b      	b.n	8002ece <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002ec0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2205      	movs	r2, #5
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	fe010000 	.word	0xfe010000
 8002ee0:	f8010000 	.word	0xf8010000

08002ee4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	@ 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ef6:	e1c2      	b.n	800327e <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 81b2 	beq.w	8003278 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a55      	ldr	r2, [pc, #340]	@ (800306c <HAL_GPIO_Init+0x188>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d15d      	bne.n	8002fd8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002f22:	2201      	movs	r2, #1
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0201 	and.w	r2, r3, #1
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002f4c:	4a48      	ldr	r2, [pc, #288]	@ (8003070 <HAL_GPIO_Init+0x18c>)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f54:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002f56:	4a46      	ldr	r2, [pc, #280]	@ (8003070 <HAL_GPIO_Init+0x18c>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220b      	movs	r2, #11
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	69f9      	ldr	r1, [r7, #28]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e067      	b.n	80030a8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x104>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b12      	cmp	r3, #18
 8002fe6:	d145      	bne.n	8003074 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	4013      	ands	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4313      	orrs	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69f9      	ldr	r1, [r7, #28]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	4013      	ands	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	4313      	orrs	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e01e      	b.n	80030a8 <HAL_GPIO_Init+0x1c4>
 800306a:	bf00      	nop
 800306c:	46020000 	.word	0x46020000
 8003070:	08009c24 	.word	0x08009c24
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	4013      	ands	r3, r2
 800308a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d00b      	beq.n	80030c8 <HAL_GPIO_Init+0x1e4>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d007      	beq.n	80030c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030bc:	2b11      	cmp	r3, #17
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	4013      	ands	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80030fe:	2201      	movs	r2, #1
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	4013      	ands	r3, r2
 800310c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0201 	and.w	r2, r3, #1
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d107      	bne.n	8003142 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8003136:	2b03      	cmp	r3, #3
 8003138:	d11b      	bne.n	8003172 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d017      	beq.n	8003172 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	4013      	ands	r3, r2
 8003158:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	4313      	orrs	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d07c      	beq.n	8003278 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800317e:	4a47      	ldr	r2, [pc, #284]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3318      	adds	r3, #24
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	4013      	ands	r3, r2
 80031a0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	0a9a      	lsrs	r2, r3, #10
 80031a6:	4b3e      	ldr	r3, [pc, #248]	@ (80032a0 <HAL_GPIO_Init+0x3bc>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	f002 0203 	and.w	r2, r2, #3
 80031b0:	00d2      	lsls	r2, r2, #3
 80031b2:	4093      	lsls	r3, r2
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80031ba:	4938      	ldr	r1, [pc, #224]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3318      	adds	r3, #24
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80031c8:	4b34      	ldr	r3, [pc, #208]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80031f2:	4b2a      	ldr	r3, [pc, #168]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	4013      	ands	r3, r2
 8003200:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003216:	4a21      	ldr	r2, [pc, #132]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800321c:	4b1f      	ldr	r3, [pc, #124]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003222:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	4013      	ands	r3, r2
 800322c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003242:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800324a:	4b14      	ldr	r3, [pc, #80]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 800324c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003250:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	4013      	ands	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003270:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <HAL_GPIO_Init+0x3b8>)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3301      	adds	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	f47f ae35 	bne.w	8002ef8 <HAL_GPIO_Init+0x14>
  }
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	3724      	adds	r7, #36	@ 0x24
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	46022000 	.word	0x46022000
 80032a0:	002f7f7f 	.word	0x002f7f7f

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80032ea:	4a0c      	ldr	r2, [pc, #48]	@ (800331c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f814 	bl	8003320 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80032f8:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003304:	4a05      	ldr	r2, [pc, #20]	@ (800331c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f812 	bl	8003336 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	46022000 	.word	0x46022000

08003320 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003354:	4b39      	ldr	r3, [pc, #228]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800335c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d10b      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336c:	d905      	bls.n	800337a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800336e:	4b33      	ldr	r3, [pc, #204]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a32      	ldr	r2, [pc, #200]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003378:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e057      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d90a      	bls.n	800339c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003386:	4b2d      	ldr	r3, [pc, #180]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4313      	orrs	r3, r2
 8003392:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003398:	60d3      	str	r3, [r2, #12]
 800339a:	e007      	b.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800339c:	4b27      	ldr	r3, [pc, #156]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80033a4:	4925      	ldr	r1, [pc, #148]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033ac:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a24      	ldr	r2, [pc, #144]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2232      	movs	r2, #50	@ 0x32
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a21      	ldr	r2, [pc, #132]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033ca:	e002      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033d2:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f3      	bne.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01b      	beq.n	8003422 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	2232      	movs	r2, #50	@ 0x32
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	4a11      	ldr	r2, [pc, #68]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003408:	e002      	b.n	8003410 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003410:	4b0a      	ldr	r3, [pc, #40]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f3      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e000      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	46020800 	.word	0x46020800
 8003440:	20000000 	.word	0x20000000
 8003444:	10624dd3 	.word	0x10624dd3

08003448 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <HAL_PWREx_GetVoltageRange+0x18>)
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	46020800 	.word	0x46020800

08003464 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_PWREx_EnableVddUSB+0x1c>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_PWREx_EnableVddUSB+0x1c>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003472:	6113      	str	r3, [r2, #16]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	46020800 	.word	0x46020800

08003484 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	4a04      	ldr	r2, [pc, #16]	@ (80034a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800348e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003492:	6113      	str	r3, [r2, #16]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	46020800 	.word	0x46020800

080034a4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_PWREx_EnableVddA+0x1c>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_PWREx_EnableVddA+0x1c>)
 80034ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034b2:	6113      	str	r3, [r2, #16]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	46020800 	.word	0x46020800

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08e      	sub	sp, #56	@ 0x38
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f000 bec8 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	4b99      	ldr	r3, [pc, #612]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	4b96      	ldr	r3, [pc, #600]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 816c 	beq.w	80037d8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_RCC_OscConfig+0x52>
 8003506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003508:	2b0c      	cmp	r3, #12
 800350a:	f040 80de 	bne.w	80036ca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003510:	2b01      	cmp	r3, #1
 8003512:	f040 80da 	bne.w	80036ca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f000 bea5 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003528:	4b86      	ldr	r3, [pc, #536]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_RCC_OscConfig+0x7a>
 8003534:	4b83      	ldr	r3, [pc, #524]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800353c:	e005      	b.n	800354a <HAL_RCC_OscConfig+0x86>
 800353e:	4b81      	ldr	r3, [pc, #516]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800354a:	4293      	cmp	r3, r2
 800354c:	d255      	bcs.n	80035fa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	4618      	mov	r0, r3
 800355a:	f001 f9d9 	bl	8004910 <RCC_SetFlashLatencyFromMSIRange>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f000 be82 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800356a:	4b76      	ldr	r3, [pc, #472]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4a75      	ldr	r2, [pc, #468]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003570:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	4b73      	ldr	r3, [pc, #460]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	4970      	ldr	r1, [pc, #448]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003584:	4313      	orrs	r3, r2
 8003586:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003590:	d309      	bcc.n	80035a6 <HAL_RCC_OscConfig+0xe2>
 8003592:	4b6c      	ldr	r3, [pc, #432]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 021f 	bic.w	r2, r3, #31
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4969      	ldr	r1, [pc, #420]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60cb      	str	r3, [r1, #12]
 80035a4:	e07e      	b.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0a      	bge.n	80035c4 <HAL_RCC_OscConfig+0x100>
 80035ae:	4b65      	ldr	r3, [pc, #404]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	015b      	lsls	r3, r3, #5
 80035bc:	4961      	ldr	r1, [pc, #388]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
 80035c2:	e06f      	b.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035cc:	d30a      	bcc.n	80035e4 <HAL_RCC_OscConfig+0x120>
 80035ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	4959      	ldr	r1, [pc, #356]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	60cb      	str	r3, [r1, #12]
 80035e2:	e05f      	b.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
 80035e4:	4b57      	ldr	r3, [pc, #348]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	03db      	lsls	r3, r3, #15
 80035f2:	4954      	ldr	r1, [pc, #336]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
 80035f8:	e054      	b.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035fa:	4b52      	ldr	r3, [pc, #328]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4a51      	ldr	r2, [pc, #324]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003604:	6093      	str	r3, [r2, #8]
 8003606:	4b4f      	ldr	r3, [pc, #316]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	494c      	ldr	r1, [pc, #304]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003620:	d309      	bcc.n	8003636 <HAL_RCC_OscConfig+0x172>
 8003622:	4b48      	ldr	r3, [pc, #288]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f023 021f 	bic.w	r2, r3, #31
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4945      	ldr	r1, [pc, #276]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003630:	4313      	orrs	r3, r2
 8003632:	60cb      	str	r3, [r1, #12]
 8003634:	e028      	b.n	8003688 <HAL_RCC_OscConfig+0x1c4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	da0a      	bge.n	8003654 <HAL_RCC_OscConfig+0x190>
 800363e:	4b41      	ldr	r3, [pc, #260]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	493d      	ldr	r1, [pc, #244]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800364e:	4313      	orrs	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]
 8003652:	e019      	b.n	8003688 <HAL_RCC_OscConfig+0x1c4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d30a      	bcc.n	8003674 <HAL_RCC_OscConfig+0x1b0>
 800365e:	4b39      	ldr	r3, [pc, #228]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	4935      	ldr	r1, [pc, #212]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800366e:	4313      	orrs	r3, r2
 8003670:	60cb      	str	r3, [r1, #12]
 8003672:	e009      	b.n	8003688 <HAL_RCC_OscConfig+0x1c4>
 8003674:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	03db      	lsls	r3, r3, #15
 8003682:	4930      	ldr	r1, [pc, #192]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003684:	4313      	orrs	r3, r2
 8003686:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10a      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	4618      	mov	r0, r3
 8003694:	f001 f93c 	bl	8004910 <RCC_SetFlashLatencyFromMSIRange>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f000 bde5 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80036a4:	f001 f8de 	bl	8004864 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036a8:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <HAL_RCC_OscConfig+0x284>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fa71 	bl	8001b94 <HAL_InitTick>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80036b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 808a 	beq.w	80037d6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80036c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036c6:	f000 bdd2 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d066      	beq.n	80037a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80036d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80036de:	f7fe fae3 	bl	8001ca8 <HAL_GetTick>
 80036e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036e4:	e009      	b.n	80036fa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e6:	f7fe fadf 	bl	8001ca8 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d902      	bls.n	80036fa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	f000 bdba 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036fa:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0ef      	beq.n	80036e6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003706:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4a0e      	ldr	r2, [pc, #56]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800370c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003710:	6093      	str	r3, [r2, #8]
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	4909      	ldr	r1, [pc, #36]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800372c:	d30e      	bcc.n	800374c <HAL_RCC_OscConfig+0x288>
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 021f 	bic.w	r2, r3, #31
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4902      	ldr	r1, [pc, #8]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e04a      	b.n	80037d8 <HAL_RCC_OscConfig+0x314>
 8003742:	bf00      	nop
 8003744:	46020c00 	.word	0x46020c00
 8003748:	20000004 	.word	0x20000004
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	da0a      	bge.n	800376a <HAL_RCC_OscConfig+0x2a6>
 8003754:	4b98      	ldr	r3, [pc, #608]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	015b      	lsls	r3, r3, #5
 8003762:	4995      	ldr	r1, [pc, #596]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	60cb      	str	r3, [r1, #12]
 8003768:	e036      	b.n	80037d8 <HAL_RCC_OscConfig+0x314>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003772:	d30a      	bcc.n	800378a <HAL_RCC_OscConfig+0x2c6>
 8003774:	4b90      	ldr	r3, [pc, #576]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	029b      	lsls	r3, r3, #10
 8003782:	498d      	ldr	r1, [pc, #564]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	60cb      	str	r3, [r1, #12]
 8003788:	e026      	b.n	80037d8 <HAL_RCC_OscConfig+0x314>
 800378a:	4b8b      	ldr	r3, [pc, #556]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	03db      	lsls	r3, r3, #15
 8003798:	4987      	ldr	r1, [pc, #540]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80037a0:	4b85      	ldr	r3, [pc, #532]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a84      	ldr	r2, [pc, #528]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037ac:	f7fe fa7c 	bl	8001ca8 <HAL_GetTick>
 80037b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80037b2:	e009      	b.n	80037c8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037b4:	f7fe fa78 	bl	8001ca8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d902      	bls.n	80037c8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	f000 bd53 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80037c8:	4b7b      	ldr	r3, [pc, #492]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ef      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
 80037d4:	e000      	b.n	80037d8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 808b 	beq.w	80038fc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80037e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_OscConfig+0x334>
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d17d      	bne.n	80038fc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f000 bd34 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x35a>
 8003810:	4b69      	ldr	r3, [pc, #420]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a68      	ldr	r2, [pc, #416]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e041      	b.n	80038a2 <HAL_RCC_OscConfig+0x3de>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003826:	d112      	bne.n	800384e <HAL_RCC_OscConfig+0x38a>
 8003828:	4b63      	ldr	r3, [pc, #396]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a62      	ldr	r2, [pc, #392]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800382e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b60      	ldr	r3, [pc, #384]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a5f      	ldr	r2, [pc, #380]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800383a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b5d      	ldr	r3, [pc, #372]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5c      	ldr	r2, [pc, #368]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e029      	b.n	80038a2 <HAL_RCC_OscConfig+0x3de>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003856:	d112      	bne.n	800387e <HAL_RCC_OscConfig+0x3ba>
 8003858:	4b57      	ldr	r3, [pc, #348]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a56      	ldr	r2, [pc, #344]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800385e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b54      	ldr	r3, [pc, #336]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a53      	ldr	r2, [pc, #332]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800386a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b51      	ldr	r3, [pc, #324]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a50      	ldr	r2, [pc, #320]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e011      	b.n	80038a2 <HAL_RCC_OscConfig+0x3de>
 800387e:	4b4e      	ldr	r3, [pc, #312]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a4d      	ldr	r2, [pc, #308]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b4b      	ldr	r3, [pc, #300]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4a      	ldr	r2, [pc, #296]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003890:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b48      	ldr	r3, [pc, #288]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a47      	ldr	r2, [pc, #284]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800389c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80038aa:	f7fe f9fd 	bl	8001ca8 <HAL_GetTick>
 80038ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b0:	e009      	b.n	80038c6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b2:	f7fe f9f9 	bl	8001ca8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	@ 0x64
 80038be:	d902      	bls.n	80038c6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	f000 bcd4 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c6:	4b3c      	ldr	r3, [pc, #240]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ef      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3ee>
 80038d2:	e013      	b.n	80038fc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80038d4:	f7fe f9e8 	bl	8001ca8 <HAL_GetTick>
 80038d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038da:	e009      	b.n	80038f0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fe f9e4 	bl	8001ca8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	@ 0x64
 80038e8:	d902      	bls.n	80038f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	f000 bcbf 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f0:	4b31      	ldr	r3, [pc, #196]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ef      	bne.n	80038dc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d05f      	beq.n	80039c8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	2b04      	cmp	r3, #4
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x456>
 800390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003910:	2b0c      	cmp	r3, #12
 8003912:	d114      	bne.n	800393e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	2b02      	cmp	r3, #2
 8003918:	d111      	bne.n	800393e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f000 bca3 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b23      	ldr	r3, [pc, #140]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	4920      	ldr	r1, [pc, #128]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800393c:	e044      	b.n	80039c8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d024      	beq.n	8003990 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003946:	4b1c      	ldr	r3, [pc, #112]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003950:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003952:	f7fe f9a9 	bl	8001ca8 <HAL_GetTick>
 8003956:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	e009      	b.n	800396e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe f9a5 	bl	8001ca8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d902      	bls.n	800396e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	f000 bc80 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800396e:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0ef      	beq.n	800395a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	490b      	ldr	r1, [pc, #44]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	610b      	str	r3, [r1, #16]
 800398e:	e01b      	b.n	80039c8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003990:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <HAL_RCC_OscConfig+0x4f4>)
 8003996:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800399c:	f7fe f984 	bl	8001ca8 <HAL_GetTick>
 80039a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fe f980 	bl	8001ca8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d904      	bls.n	80039bc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	f000 bc5b 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
 80039b8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039bc:	4baf      	ldr	r3, [pc, #700]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ed      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80c8 	beq.w	8003b66 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039dc:	4ba7      	ldr	r3, [pc, #668]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d111      	bne.n	8003a0e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4ba4      	ldr	r3, [pc, #656]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 80039ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f0:	4aa2      	ldr	r2, [pc, #648]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80039fa:	4ba0      	ldr	r3, [pc, #640]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 80039fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a0e:	4b9c      	ldr	r3, [pc, #624]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d119      	bne.n	8003a4e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003a1a:	4b99      	ldr	r3, [pc, #612]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	4a98      	ldr	r2, [pc, #608]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fe f93f 	bl	8001ca8 <HAL_GetTick>
 8003a2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a2c:	e009      	b.n	8003a42 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fe f93b 	bl	8001ca8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	f000 bc16 	b.w	800426e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a42:	4b8f      	ldr	r3, [pc, #572]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d05f      	beq.n	8003b16 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003a56:	4b89      	ldr	r3, [pc, #548]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a5c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d037      	beq.n	8003adc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e3f4      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01b      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a94:	4a79      	ldr	r2, [pc, #484]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003a96:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003a9e:	f7fe f903 	bl	8001ca8 <HAL_GetTick>
 8003aa2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa6:	f7fe f8ff 	bl	8001ca8 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e3da      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ab8:	4b70      	ldr	r3, [pc, #448]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ef      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003acc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4969      	ldr	r1, [pc, #420]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003adc:	4b67      	ldr	r3, [pc, #412]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ae2:	4a66      	ldr	r2, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003ae4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003aec:	f7fe f8dc 	bl	8001ca8 <HAL_GetTick>
 8003af0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe f8d8 	bl	8001ca8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e3b3      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b06:	4b5d      	ldr	r3, [pc, #372]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <HAL_RCC_OscConfig+0x630>
 8003b14:	e01b      	b.n	8003b4e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003b16:	4b59      	ldr	r3, [pc, #356]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b1c:	4a57      	ldr	r2, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b1e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003b22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003b26:	f7fe f8bf 	bl	8001ca8 <HAL_GetTick>
 8003b2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fe f8bb 	bl	8001ca8 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e396      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b40:	4b4e      	ldr	r3, [pc, #312]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1ef      	bne.n	8003b2e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b4e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b49      	ldr	r3, [pc, #292]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5c:	4a47      	ldr	r2, [pc, #284]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8111 	beq.w	8003d96 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b40      	ldr	r3, [pc, #256]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d111      	bne.n	8003bac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b88:	4b3c      	ldr	r3, [pc, #240]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003b98:	4b38      	ldr	r3, [pc, #224]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bac:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d118      	bne.n	8003bea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003bb8:	4b31      	ldr	r3, [pc, #196]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	4a30      	ldr	r2, [pc, #192]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc4:	f7fe f870 	bl	8001ca8 <HAL_GetTick>
 8003bc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bcc:	f7fe f86c 	bl	8001ca8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e347      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003bde:	4b28      	ldr	r3, [pc, #160]	@ (8003c80 <HAL_RCC_OscConfig+0x7bc>)
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01f      	beq.n	8003c36 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d010      	beq.n	8003c24 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c08:	4a1c      	ldr	r2, [pc, #112]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c12:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c18:	4a18      	ldr	r2, [pc, #96]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c22:	e018      	b.n	8003c56 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c24:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c2a:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c34:	e00f      	b.n	8003c56 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c36:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c7c <HAL_RCC_OscConfig+0x7b8>)
 8003c4e:	f023 0304 	bic.w	r3, r3, #4
 8003c52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d057      	beq.n	8003d0e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f823 	bl	8001ca8 <HAL_GetTick>
 8003c62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c64:	e00e      	b.n	8003c84 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe f81f 	bl	8001ca8 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d905      	bls.n	8003c84 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e2f8      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
 8003c7c:	46020c00 	.word	0x46020c00
 8003c80:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	4b9c      	ldr	r3, [pc, #624]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0e9      	beq.n	8003c66 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01b      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c9e:	4b96      	ldr	r3, [pc, #600]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca4:	4a94      	ldr	r2, [pc, #592]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003caa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fd fffa 	bl	8001ca8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e2d3      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003cc6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0ed      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x7ec>
 8003cd4:	e053      	b.n	8003d7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cd6:	4b88      	ldr	r3, [pc, #544]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cdc:	4a86      	ldr	r2, [pc, #536]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd ffde 	bl	8001ca8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e2b7      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ed      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x824>
 8003d0c:	e037      	b.n	8003d7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003d0e:	f7fd ffcb 	bl	8001ca8 <HAL_GetTick>
 8003d12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd ffc7 	bl	8001ca8 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e2a0      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d2c:	4b72      	ldr	r3, [pc, #456]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ed      	bne.n	8003d16 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01a      	beq.n	8003d7e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d48:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fd ffa5 	bl	8001ca8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e27e      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d70:	4b61      	ldr	r3, [pc, #388]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ed      	bne.n	8003d5a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d7e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b5c      	ldr	r3, [pc, #368]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003d8e:	f023 0304 	bic.w	r3, r3, #4
 8003d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d036      	beq.n	8003e10 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d019      	beq.n	8003dde <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003daa:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a52      	ldr	r2, [pc, #328]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003db4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003db6:	f7fd ff77 	bl	8001ca8 <HAL_GetTick>
 8003dba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dbe:	f7fd ff73 	bl	8001ca8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e24e      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003dd0:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x8fa>
 8003ddc:	e018      	b.n	8003e10 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003dde:	4b46      	ldr	r3, [pc, #280]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a45      	ldr	r2, [pc, #276]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003de8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003dea:	f7fd ff5d 	bl	8001ca8 <HAL_GetTick>
 8003dee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df2:	f7fd ff59 	bl	8001ca8 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e234      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e04:	4b3c      	ldr	r3, [pc, #240]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d036      	beq.n	8003e8a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d019      	beq.n	8003e58 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003e24:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a33      	ldr	r2, [pc, #204]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e30:	f7fd ff3a 	bl	8001ca8 <HAL_GetTick>
 8003e34:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003e38:	f7fd ff36 	bl	8001ca8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e211      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x974>
 8003e56:	e018      	b.n	8003e8a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003e58:	4b27      	ldr	r3, [pc, #156]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e64:	f7fd ff20 	bl	8001ca8 <HAL_GetTick>
 8003e68:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003e6c:	f7fd ff1c 	bl	8001ca8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1f7      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d07f      	beq.n	8003f96 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d062      	beq.n	8003f64 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003e9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4a15      	ldr	r2, [pc, #84]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ea8:	6093      	str	r3, [r2, #8]
 8003eaa:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	4910      	ldr	r1, [pc, #64]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ec4:	d309      	bcc.n	8003eda <HAL_RCC_OscConfig+0xa16>
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f023 021f 	bic.w	r2, r3, #31
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4909      	ldr	r1, [pc, #36]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
 8003ed8:	e02a      	b.n	8003f30 <HAL_RCC_OscConfig+0xa6c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da0c      	bge.n	8003efc <HAL_RCC_OscConfig+0xa38>
 8003ee2:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	015b      	lsls	r3, r3, #5
 8003ef0:	4901      	ldr	r1, [pc, #4]	@ (8003ef8 <HAL_RCC_OscConfig+0xa34>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60cb      	str	r3, [r1, #12]
 8003ef6:	e01b      	b.n	8003f30 <HAL_RCC_OscConfig+0xa6c>
 8003ef8:	46020c00 	.word	0x46020c00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f04:	d30a      	bcc.n	8003f1c <HAL_RCC_OscConfig+0xa58>
 8003f06:	4ba1      	ldr	r3, [pc, #644]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	499d      	ldr	r1, [pc, #628]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60cb      	str	r3, [r1, #12]
 8003f1a:	e009      	b.n	8003f30 <HAL_RCC_OscConfig+0xa6c>
 8003f1c:	4b9b      	ldr	r3, [pc, #620]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	03db      	lsls	r3, r3, #15
 8003f2a:	4998      	ldr	r1, [pc, #608]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003f30:	4b96      	ldr	r3, [pc, #600]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a95      	ldr	r2, [pc, #596]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f36:	f043 0310 	orr.w	r3, r3, #16
 8003f3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f3c:	f7fd feb4 	bl	8001ca8 <HAL_GetTick>
 8003f40:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003f44:	f7fd feb0 	bl	8001ca8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e18b      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003f56:	4b8d      	ldr	r3, [pc, #564]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xa80>
 8003f62:	e018      	b.n	8003f96 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003f64:	4b89      	ldr	r3, [pc, #548]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a88      	ldr	r2, [pc, #544]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f6a:	f023 0310 	bic.w	r3, r3, #16
 8003f6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f70:	f7fd fe9a 	bl	8001ca8 <HAL_GetTick>
 8003f74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003f78:	f7fd fe96 	bl	8001ca8 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e171      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f8a:	4b80      	ldr	r3, [pc, #512]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8166 	beq.w	800426c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa6:	4b79      	ldr	r3, [pc, #484]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	f000 80f2 	beq.w	8004198 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	f040 80c5 	bne.w	8004148 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b73      	ldr	r3, [pc, #460]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a72      	ldr	r2, [pc, #456]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003fc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fca:	f7fd fe6d 	bl	8001ca8 <HAL_GetTick>
 8003fce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fd fe69 	bl	8001ca8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e144      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003fe4:	4b69      	ldr	r3, [pc, #420]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff0:	4b66      	ldr	r3, [pc, #408]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d111      	bne.n	8004022 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	4b63      	ldr	r3, [pc, #396]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004004:	4a61      	ldr	r2, [pc, #388]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800400e:	4b5f      	ldr	r3, [pc, #380]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004022:	4b5b      	ldr	r3, [pc, #364]	@ (8004190 <HAL_RCC_OscConfig+0xccc>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800402a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800402e:	d102      	bne.n	8004036 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004036:	4b56      	ldr	r3, [pc, #344]	@ (8004190 <HAL_RCC_OscConfig+0xccc>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4a55      	ldr	r2, [pc, #340]	@ (8004190 <HAL_RCC_OscConfig+0xccc>)
 800403c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004040:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004042:	4b52      	ldr	r3, [pc, #328]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004056:	3a01      	subs	r2, #1
 8004058:	0212      	lsls	r2, r2, #8
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004060:	430a      	orrs	r2, r1
 8004062:	494a      	ldr	r1, [pc, #296]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004064:	4313      	orrs	r3, r2
 8004066:	628b      	str	r3, [r1, #40]	@ 0x28
 8004068:	4b48      	ldr	r3, [pc, #288]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 800406a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800406c:	4b49      	ldr	r3, [pc, #292]	@ (8004194 <HAL_RCC_OscConfig+0xcd0>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004074:	3a01      	subs	r2, #1
 8004076:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800407e:	3a01      	subs	r2, #1
 8004080:	0252      	lsls	r2, r2, #9
 8004082:	b292      	uxth	r2, r2
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800408a:	3a01      	subs	r2, #1
 800408c:	0412      	lsls	r2, r2, #16
 800408e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004098:	3a01      	subs	r2, #1
 800409a:	0612      	lsls	r2, r2, #24
 800409c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80040a0:	430a      	orrs	r2, r1
 80040a2:	493a      	ldr	r1, [pc, #232]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80040a8:	4b38      	ldr	r3, [pc, #224]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	4a37      	ldr	r2, [pc, #220]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040ae:	f023 0310 	bic.w	r3, r3, #16
 80040b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	4a34      	ldr	r2, [pc, #208]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80040be:	4b33      	ldr	r3, [pc, #204]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	4a32      	ldr	r2, [pc, #200]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040c4:	f043 0310 	orr.w	r3, r3, #16
 80040c8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80040ca:	4b30      	ldr	r3, [pc, #192]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	f023 020c 	bic.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	492d      	ldr	r1, [pc, #180]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80040dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d105      	bne.n	80040f0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80040e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004190 <HAL_RCC_OscConfig+0xccc>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <HAL_RCC_OscConfig+0xccc>)
 80040ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040ee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80040f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80040f8:	4b24      	ldr	r3, [pc, #144]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 80040fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040fe:	4a23      	ldr	r2, [pc, #140]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004100:	f023 0304 	bic.w	r3, r3, #4
 8004104:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004108:	4b20      	ldr	r3, [pc, #128]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1f      	ldr	r2, [pc, #124]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004114:	f7fd fdc8 	bl	8001ca8 <HAL_GetTick>
 8004118:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fd fdc4 	bl	8001ca8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e09f      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800412e:	4b17      	ldr	r3, [pc, #92]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800413a:	4b14      	ldr	r3, [pc, #80]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	4a13      	ldr	r2, [pc, #76]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004144:	6293      	str	r3, [r2, #40]	@ 0x28
 8004146:	e091      	b.n	800426c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b10      	ldr	r3, [pc, #64]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a0f      	ldr	r2, [pc, #60]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 800414e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004152:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004154:	f7fd fda8 	bl	8001ca8 <HAL_GetTick>
 8004158:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fda4 	bl	8001ca8 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e07f      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800417a:	4b04      	ldr	r3, [pc, #16]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 800417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417e:	4a03      	ldr	r2, [pc, #12]	@ (800418c <HAL_RCC_OscConfig+0xcc8>)
 8004180:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	6293      	str	r3, [r2, #40]	@ 0x28
 800418a:	e06f      	b.n	800426c <HAL_RCC_OscConfig+0xda8>
 800418c:	46020c00 	.word	0x46020c00
 8004190:	46020800 	.word	0x46020800
 8004194:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004198:	4b37      	ldr	r3, [pc, #220]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 800419a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800419e:	4b36      	ldr	r3, [pc, #216]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 80041a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d039      	beq.n	8004220 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0203 	and.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d132      	bne.n	8004220 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d129      	bne.n	8004220 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d122      	bne.n	8004220 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d11a      	bne.n	8004220 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	0a5b      	lsrs	r3, r3, #9
 80041ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d111      	bne.n	8004220 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	0c1b      	lsrs	r3, r3, #16
 8004200:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004208:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d108      	bne.n	8004220 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	0e1b      	lsrs	r3, r3, #24
 8004212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e024      	b.n	800426e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004224:	4b14      	ldr	r3, [pc, #80]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	08db      	lsrs	r3, r3, #3
 800422a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004232:	429a      	cmp	r2, r3
 8004234:	d01a      	beq.n	800426c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004236:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	4a0f      	ldr	r2, [pc, #60]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 800423c:	f023 0310 	bic.w	r3, r3, #16
 8004240:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd fd31 	bl	8001ca8 <HAL_GetTick>
 8004246:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004248:	bf00      	nop
 800424a:	f7fd fd2d 	bl	8001ca8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004252:	4293      	cmp	r3, r2
 8004254:	d0f9      	beq.n	800424a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	4a07      	ldr	r2, [pc, #28]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	4a04      	ldr	r2, [pc, #16]	@ (8004278 <HAL_RCC_OscConfig+0xdb4>)
 8004266:	f043 0310 	orr.w	r3, r3, #16
 800426a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3738      	adds	r7, #56	@ 0x38
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	46020c00 	.word	0x46020c00

0800427c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e1d9      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b9b      	ldr	r3, [pc, #620]	@ (8004500 <HAL_RCC_ClockConfig+0x284>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d910      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b98      	ldr	r3, [pc, #608]	@ (8004500 <HAL_RCC_ClockConfig+0x284>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 020f 	bic.w	r2, r3, #15
 80042a6:	4996      	ldr	r1, [pc, #600]	@ (8004500 <HAL_RCC_ClockConfig+0x284>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b94      	ldr	r3, [pc, #592]	@ (8004500 <HAL_RCC_ClockConfig+0x284>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e1c1      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042d8:	429a      	cmp	r2, r3
 80042da:	d908      	bls.n	80042ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80042dc:	4b89      	ldr	r3, [pc, #548]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	4986      	ldr	r1, [pc, #536]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	4b81      	ldr	r3, [pc, #516]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004308:	429a      	cmp	r2, r3
 800430a:	d909      	bls.n	8004320 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800430c:	4b7d      	ldr	r3, [pc, #500]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	497a      	ldr	r1, [pc, #488]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 800431c:	4313      	orrs	r3, r2
 800431e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	4b74      	ldr	r3, [pc, #464]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004338:	429a      	cmp	r2, r3
 800433a:	d908      	bls.n	800434e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800433c:	4b71      	ldr	r3, [pc, #452]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	496e      	ldr	r1, [pc, #440]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 800434a:	4313      	orrs	r3, r2
 800434c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d010      	beq.n	800437c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	4b69      	ldr	r3, [pc, #420]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	429a      	cmp	r2, r3
 8004368:	d908      	bls.n	800437c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800436a:	4b66      	ldr	r3, [pc, #408]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	4963      	ldr	r1, [pc, #396]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004378:	4313      	orrs	r3, r2
 800437a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80d2 	beq.w	800452e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d143      	bne.n	800441e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004396:	4b5b      	ldr	r3, [pc, #364]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d110      	bne.n	80043c6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b57      	ldr	r3, [pc, #348]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043aa:	4a56      	ldr	r2, [pc, #344]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80043b4:	4b53      	ldr	r3, [pc, #332]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80043c6:	f7fd fc6f 	bl	8001ca8 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80043cc:	4b4e      	ldr	r3, [pc, #312]	@ (8004508 <HAL_RCC_ClockConfig+0x28c>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00f      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80043da:	f7fd fc65 	bl	8001ca8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e12b      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80043ec:	4b46      	ldr	r3, [pc, #280]	@ (8004508 <HAL_RCC_ClockConfig+0x28c>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043fe:	4b41      	ldr	r3, [pc, #260]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004404:	4a3f      	ldr	r2, [pc, #252]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004406:	f023 0304 	bic.w	r3, r3, #4
 800440a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800440e:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d121      	bne.n	800445e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e112      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004426:	4b37      	ldr	r3, [pc, #220]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d115      	bne.n	800445e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e106      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800443e:	4b31      	ldr	r3, [pc, #196]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e0fa      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444e:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0f2      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800445e:	4b29      	ldr	r3, [pc, #164]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f023 0203 	bic.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4926      	ldr	r1, [pc, #152]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 800446c:	4313      	orrs	r3, r2
 800446e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004470:	f7fd fc1a 	bl	8001ca8 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d112      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fd fc12 	bl	8001ca8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0d6      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004496:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d1ee      	bne.n	8004480 <HAL_RCC_ClockConfig+0x204>
 80044a2:	e044      	b.n	800452e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d112      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ae:	f7fd fbfb 	bl	8001ca8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0bf      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d1ee      	bne.n	80044ae <HAL_RCC_ClockConfig+0x232>
 80044d0:	e02d      	b.n	800452e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d123      	bne.n	8004522 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044dc:	f7fd fbe4 	bl	8001ca8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0a8      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044f2:	4b04      	ldr	r3, [pc, #16]	@ (8004504 <HAL_RCC_ClockConfig+0x288>)
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ee      	bne.n	80044dc <HAL_RCC_ClockConfig+0x260>
 80044fe:	e016      	b.n	800452e <HAL_RCC_ClockConfig+0x2b2>
 8004500:	40022000 	.word	0x40022000
 8004504:	46020c00 	.word	0x46020c00
 8004508:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fd fbcc 	bl	8001ca8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e090      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004522:	4b4a      	ldr	r3, [pc, #296]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d1ee      	bne.n	800450c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d010      	beq.n	800455c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	4b43      	ldr	r3, [pc, #268]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	429a      	cmp	r2, r3
 8004548:	d208      	bcs.n	800455c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800454a:	4b40      	ldr	r3, [pc, #256]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 020f 	bic.w	r2, r3, #15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	493d      	ldr	r1, [pc, #244]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800455c:	4b3c      	ldr	r3, [pc, #240]	@ (8004650 <HAL_RCC_ClockConfig+0x3d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d210      	bcs.n	800458c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <HAL_RCC_ClockConfig+0x3d4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 020f 	bic.w	r2, r3, #15
 8004572:	4937      	ldr	r1, [pc, #220]	@ (8004650 <HAL_RCC_ClockConfig+0x3d4>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b35      	ldr	r3, [pc, #212]	@ (8004650 <HAL_RCC_ClockConfig+0x3d4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e05b      	b.n	8004644 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d208      	bcs.n	80045ba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4925      	ldr	r1, [pc, #148]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d012      	beq.n	80045ec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	4b20      	ldr	r3, [pc, #128]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d209      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80045d8:	4b1c      	ldr	r3, [pc, #112]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4919      	ldr	r1, [pc, #100]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	4b13      	ldr	r3, [pc, #76]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004604:	429a      	cmp	r2, r3
 8004606:	d208      	bcs.n	800461a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004608:	4b10      	ldr	r3, [pc, #64]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	490d      	ldr	r1, [pc, #52]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800461a:	f000 f821 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 800461e:	4602      	mov	r2, r0
 8004620:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <HAL_RCC_ClockConfig+0x3d0>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	490a      	ldr	r1, [pc, #40]	@ (8004654 <HAL_RCC_ClockConfig+0x3d8>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
 8004630:	4a09      	ldr	r2, [pc, #36]	@ (8004658 <HAL_RCC_ClockConfig+0x3dc>)
 8004632:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004634:	4b09      	ldr	r3, [pc, #36]	@ (800465c <HAL_RCC_ClockConfig+0x3e0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fd faab 	bl	8001b94 <HAL_InitTick>
 800463e:	4603      	mov	r3, r0
 8004640:	73fb      	strb	r3, [r7, #15]

  return status;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	46020c00 	.word	0x46020c00
 8004650:	40022000 	.word	0x40022000
 8004654:	08009bcc 	.word	0x08009bcc
 8004658:	20000000 	.word	0x20000000
 800465c:	20000004 	.word	0x20000004

08004660 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	b08b      	sub	sp, #44	@ 0x2c
 8004664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466e:	4b78      	ldr	r3, [pc, #480]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004678:	4b75      	ldr	r3, [pc, #468]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x34>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b0c      	cmp	r3, #12
 800468c:	d121      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d11e      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004694:	4b6e      	ldr	r3, [pc, #440]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80046a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046a6:	0b1b      	lsrs	r3, r3, #12
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ae:	e005      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80046b0:	4b67      	ldr	r3, [pc, #412]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	0f1b      	lsrs	r3, r3, #28
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046bc:	4a65      	ldr	r2, [pc, #404]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d110      	bne.n	80046ee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046d0:	e00d      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d102      	bne.n	80046e4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046de:	4b5e      	ldr	r3, [pc, #376]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	e004      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80046ec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	f040 80a5 	bne.w	8004840 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80046f6:	4b56      	ldr	r3, [pc, #344]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004700:	4b53      	ldr	r3, [pc, #332]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	0a1b      	lsrs	r3, r3, #8
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800470e:	4b50      	ldr	r3, [pc, #320]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800471a:	4b4d      	ldr	r3, [pc, #308]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	08db      	lsrs	r3, r3, #3
 8004720:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d003      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0xe4>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d022      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x128>
 8004742:	e043      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800485c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	4b3e      	ldr	r3, [pc, #248]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004766:	ed97 6a01 	vldr	s12, [r7, #4]
 800476a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004860 <HAL_RCC_GetSysClockFreq+0x200>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004786:	e046      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800485c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479a:	4b2d      	ldr	r3, [pc, #180]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800479c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047aa:	ed97 6a01 	vldr	s12, [r7, #4]
 80047ae:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004860 <HAL_RCC_GetSysClockFreq+0x200>
 80047b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ca:	e024      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ec:	ee07 3a90 	vmov	s15, r3
 80047f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047f4:	ed97 6a01 	vldr	s12, [r7, #4]
 80047f8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004860 <HAL_RCC_GetSysClockFreq+0x200>
 80047fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004800:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004804:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004808:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800480c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004810:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004814:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004816:	4b0e      	ldr	r3, [pc, #56]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481a:	0e1b      	lsrs	r3, r3, #24
 800481c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004820:	3301      	adds	r3, #1
 8004822:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800482e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483a:	ee17 3a90 	vmov	r3, s15
 800483e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004840:	6a3b      	ldr	r3, [r7, #32]
}
 8004842:	4618      	mov	r0, r3
 8004844:	372c      	adds	r7, #44	@ 0x2c
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	46020c00 	.word	0x46020c00
 8004854:	08009be4 	.word	0x08009be4
 8004858:	00f42400 	.word	0x00f42400
 800485c:	4b742400 	.word	0x4b742400
 8004860:	46000000 	.word	0x46000000

08004864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004868:	f7ff fefa 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b07      	ldr	r3, [pc, #28]	@ (800488c <HAL_RCC_GetHCLKFreq+0x28>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	4906      	ldr	r1, [pc, #24]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004878:	5ccb      	ldrb	r3, [r1, r3]
 800487a:	fa22 f303 	lsr.w	r3, r2, r3
 800487e:	4a05      	ldr	r2, [pc, #20]	@ (8004894 <HAL_RCC_GetHCLKFreq+0x30>)
 8004880:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004882:	4b04      	ldr	r3, [pc, #16]	@ (8004894 <HAL_RCC_GetHCLKFreq+0x30>)
 8004884:	681b      	ldr	r3, [r3, #0]
}
 8004886:	4618      	mov	r0, r3
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	46020c00 	.word	0x46020c00
 8004890:	08009bcc 	.word	0x08009bcc
 8004894:	20000000 	.word	0x20000000

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800489c:	f7ff ffe2 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	46020c00 	.word	0x46020c00
 80048bc:	08009bdc 	.word	0x08009bdc

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80048c4:	f7ff ffce 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	@ (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	46020c00 	.word	0x46020c00
 80048e4:	08009bdc 	.word	0x08009bdc

080048e8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80048ec:	f7ff ffba 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_RCC_GetPCLK3Freq+0x20>)
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4903      	ldr	r1, [pc, #12]	@ (800490c <HAL_RCC_GetPCLK3Freq+0x24>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	46020c00 	.word	0x46020c00
 800490c:	08009bdc 	.word	0x08009bdc

08004910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004918:	4b3e      	ldr	r3, [pc, #248]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004926:	f7fe fd8f 	bl	8003448 <HAL_PWREx_GetVoltageRange>
 800492a:	6178      	str	r0, [r7, #20]
 800492c:	e019      	b.n	8004962 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	4b39      	ldr	r3, [pc, #228]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004934:	4a37      	ldr	r2, [pc, #220]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800493e:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800494c:	f7fe fd7c 	bl	8003448 <HAL_PWREx_GetVoltageRange>
 8004950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b30      	ldr	r3, [pc, #192]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004958:	4a2e      	ldr	r2, [pc, #184]	@ (8004a14 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800495a:	f023 0304 	bic.w	r3, r3, #4
 800495e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004968:	d003      	beq.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004970:	d109      	bne.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004978:	d202      	bcs.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800497a:	2301      	movs	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800497e:	e033      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004984:	e030      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800498c:	d208      	bcs.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d102      	bne.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004996:	2303      	movs	r3, #3
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	e025      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e035      	b.n	8004a0c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049a6:	d90f      	bls.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049b4:	d902      	bls.n	80049bc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e015      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80049bc:	2301      	movs	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e012      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	e00f      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ce:	d109      	bne.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d6:	d102      	bne.n	80049de <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80049d8:	2301      	movs	r3, #1
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e004      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80049de:	2302      	movs	r3, #2
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e001      	b.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80049e4:	2301      	movs	r3, #1
 80049e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f023 020f 	bic.w	r2, r3, #15
 80049f0:	4909      	ldr	r1, [pc, #36]	@ (8004a18 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80049f8:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d001      	beq.n	8004a0a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	46020c00 	.word	0x46020c00
 8004a18:	40022000 	.word	0x40022000

08004a1c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b0ba      	sub	sp, #232	@ 0xe8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f002 0401 	and.w	r4, r2, #1
 8004a40:	2500      	movs	r5, #0
 8004a42:	ea54 0305 	orrs.w	r3, r4, r5
 8004a46:	d00b      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a48:	4bcb      	ldr	r3, [pc, #812]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a4e:	f023 0103 	bic.w	r1, r3, #3
 8004a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a58:	4ac7      	ldr	r2, [pc, #796]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f002 0802 	and.w	r8, r2, #2
 8004a6c:	f04f 0900 	mov.w	r9, #0
 8004a70:	ea58 0309 	orrs.w	r3, r8, r9
 8004a74:	d00b      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004a76:	4bc0      	ldr	r3, [pc, #768]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a7c:	f023 010c 	bic.w	r1, r3, #12
 8004a80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	4abc      	ldr	r2, [pc, #752]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f002 0a04 	and.w	sl, r2, #4
 8004a9a:	f04f 0b00 	mov.w	fp, #0
 8004a9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004aa2:	d00b      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004aa4:	4bb4      	ldr	r3, [pc, #720]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aaa:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab4:	4ab0      	ldr	r2, [pc, #704]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f002 0308 	and.w	r3, r2, #8
 8004ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ad2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004adc:	4ba6      	ldr	r3, [pc, #664]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ae2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aec:	4aa2      	ldr	r2, [pc, #648]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aee:	430b      	orrs	r3, r1
 8004af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f002 0310 	and.w	r3, r2, #16
 8004b00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4313      	orrs	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004b14:	4b98      	ldr	r3, [pc, #608]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b24:	4a94      	ldr	r2, [pc, #592]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b26:	430b      	orrs	r3, r1
 8004b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	f002 0320 	and.w	r3, r2, #32
 8004b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b46:	460b      	mov	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004b4c:	4b8a      	ldr	r3, [pc, #552]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b52:	f023 0107 	bic.w	r1, r3, #7
 8004b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b5c:	4a86      	ldr	r2, [pc, #536]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004b84:	4b7c      	ldr	r3, [pc, #496]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b94:	4a78      	ldr	r2, [pc, #480]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b96:	430b      	orrs	r3, r1
 8004b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bb2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bea:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004bf4:	4b60      	ldr	r3, [pc, #384]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	4a5c      	ldr	r2, [pc, #368]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c06:	430b      	orrs	r3, r1
 8004c08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c2c:	4b52      	ldr	r3, [pc, #328]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c32:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3c:	4a4e      	ldr	r2, [pc, #312]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004c50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4313      	orrs	r3, r2
 8004c62:	d00b      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004c64:	4b44      	ldr	r3, [pc, #272]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c6a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c74:	4a40      	ldr	r2, [pc, #256]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c76:	430b      	orrs	r3, r1
 8004c78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c92:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004c96:	460b      	mov	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	d00b      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004c9c:	4b36      	ldr	r3, [pc, #216]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ca2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cac:	4a32      	ldr	r2, [pc, #200]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d00c      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004cd4:	4b28      	ldr	r3, [pc, #160]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce6:	4a24      	ldr	r2, [pc, #144]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d04f      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	2b80      	cmp	r3, #128	@ 0x80
 8004d14:	d02d      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	d827      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d1a:	2b60      	cmp	r3, #96	@ 0x60
 8004d1c:	d02e      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d1e:	2b60      	cmp	r3, #96	@ 0x60
 8004d20:	d823      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d22:	2b40      	cmp	r3, #64	@ 0x40
 8004d24:	d006      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004d26:	2b40      	cmp	r3, #64	@ 0x40
 8004d28:	d81f      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d011      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004d32:	e01a      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d34:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	4a0f      	ldr	r2, [pc, #60]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d40:	e01d      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d46:	3308      	adds	r3, #8
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 fa17 	bl	800717c <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d54:	e013      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d5a:	332c      	adds	r3, #44	@ 0x2c
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 faa5 	bl	80072ac <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d68:	e009      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d70:	e005      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004d72:	bf00      	nop
 8004d74:	e003      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004d76:	bf00      	nop
 8004d78:	46020c00 	.word	0x46020c00
        break;
 8004d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004d86:	4bb6      	ldr	r3, [pc, #728]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d8c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d98:	4ab1      	ldr	r2, [pc, #708]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004da0:	e003      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004da6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004db6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004db8:	2300      	movs	r3, #0
 8004dba:	677b      	str	r3, [r7, #116]	@ 0x74
 8004dbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	d053      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd2:	d033      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd8:	d82c      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dde:	d02f      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de4:	d826      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dea:	d008      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df0:	d820      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dfa:	d011      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004dfc:	e01a      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dfe:	4b98      	ldr	r3, [pc, #608]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e02:	4a97      	ldr	r2, [pc, #604]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e08:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e0a:	e01a      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e10:	3308      	adds	r3, #8
 8004e12:	4618      	mov	r0, r3
 8004e14:	f002 f9b2 	bl	800717c <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e1e:	e010      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e24:	332c      	adds	r3, #44	@ 0x2c
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 fa40 	bl	80072ac <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e32:	e006      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e3a:	e002      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e42:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004e4a:	4b85      	ldr	r3, [pc, #532]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e50:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e5c:	4a80      	ldr	r2, [pc, #512]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e64:	e003      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e6a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e80:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d046      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e92:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e96:	d028      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004e98:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e9c:	d821      	bhi.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004e9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ea2:	d022      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ea8:	d81b      	bhi.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004eaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eae:	d01c      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004eb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eb4:	d815      	bhi.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eba:	d008      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec0:	d80f      	bhi.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d011      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eca:	d00e      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004ecc:	e009      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f002 f951 	bl	800717c <RCCEx_PLL2_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ee0:	e004      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ee8:	e000      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10d      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004efa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f06:	4a56      	ldr	r2, [pc, #344]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f0e:	e003      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f26:	2300      	movs	r3, #0
 8004f28:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f2a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	d03f      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d81e      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004f40:	a201      	add	r2, pc, #4	@ (adr r2, 8004f48 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f87 	.word	0x08004f87
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6b 	.word	0x08004f6b
 8004f54:	08004f87 	.word	0x08004f87
 8004f58:	08004f87 	.word	0x08004f87
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f5c:	4b40      	ldr	r3, [pc, #256]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	4a3f      	ldr	r2, [pc, #252]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f66:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004f68:	e00e      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f6e:	332c      	adds	r3, #44	@ 0x2c
 8004f70:	4618      	mov	r0, r3
 8004f72:	f002 f99b 	bl	80072ac <RCCEx_PLL3_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f7c:	e004      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004f86:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004f90:	4b33      	ldr	r3, [pc, #204]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f96:	f023 0107 	bic.w	r1, r3, #7
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004faa:	e003      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fb0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	d04d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fdc:	d028      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004fde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fe2:	d821      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004fe4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fe8:	d024      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004fea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fee:	d81b      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ff4:	d00e      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004ff6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ffa:	d815      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01b      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005004:	d110      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005006:	4b16      	ldr	r3, [pc, #88]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005010:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005012:	e012      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005018:	332c      	adds	r3, #44	@ 0x2c
 800501a:	4618      	mov	r0, r3
 800501c:	f002 f946 	bl	80072ac <RCCEx_PLL3_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005026:	e008      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800502e:	e004      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005030:	bf00      	nop
 8005032:	e002      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005034:	bf00      	nop
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005038:	bf00      	nop
    }
    if (ret == HAL_OK)
 800503a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d110      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005042:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005048:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800504c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005054:	4a02      	ldr	r2, [pc, #8]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005056:	430b      	orrs	r3, r1
 8005058:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800505c:	e006      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800505e:	bf00      	nop
 8005060:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005068:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800506c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005078:	653b      	str	r3, [r7, #80]	@ 0x50
 800507a:	2300      	movs	r3, #0
 800507c:	657b      	str	r3, [r7, #84]	@ 0x54
 800507e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005082:	460b      	mov	r3, r1
 8005084:	4313      	orrs	r3, r2
 8005086:	f000 80b5 	beq.w	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005090:	4b9d      	ldr	r3, [pc, #628]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d113      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509e:	4b9a      	ldr	r3, [pc, #616]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a4:	4a98      	ldr	r2, [pc, #608]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80050ae:	4b96      	ldr	r3, [pc, #600]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050c6:	4b91      	ldr	r3, [pc, #580]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	4a90      	ldr	r2, [pc, #576]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d2:	f7fc fde9 	bl	8001ca8 <HAL_GetTick>
 80050d6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050da:	e00b      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050dc:	f7fc fde4 	bl	8001ca8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d903      	bls.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050f2:	e005      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050f4:	4b85      	ldr	r3, [pc, #532]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ed      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005100:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d165      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005108:	4b7f      	ldr	r3, [pc, #508]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800510a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800510e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d023      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800511e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005122:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512a:	4293      	cmp	r3, r2
 800512c:	d01b      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800512e:	4b76      	ldr	r3, [pc, #472]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005138:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800513c:	4b72      	ldr	r3, [pc, #456]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800513e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005142:	4a71      	ldr	r2, [pc, #452]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800514c:	4b6e      	ldr	r3, [pc, #440]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800514e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005152:	4a6d      	ldr	r2, [pc, #436]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005158:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800515c:	4a6a      	ldr	r2, [pc, #424]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005162:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d019      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fc fd99 	bl	8001ca8 <HAL_GetTick>
 8005176:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517a:	e00d      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fc fd94 	bl	8001ca8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005186:	1ad2      	subs	r2, r2, r3
 8005188:	f241 3388 	movw	r3, #5000	@ 0x1388
 800518c:	429a      	cmp	r2, r3
 800518e:	d903      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005196:	e006      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005198:	4b5b      	ldr	r3, [pc, #364]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800519a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0ea      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80051a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80051ae:	4b56      	ldr	r3, [pc, #344]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051c0:	4a51      	ldr	r2, [pc, #324]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051c2:	430b      	orrs	r3, r1
 80051c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051c8:	e008      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051ce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80051d2:	e003      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051dc:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d107      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e4:	4b48      	ldr	r3, [pc, #288]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ea:	4a47      	ldr	r2, [pc, #284]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051ec:	f023 0304 	bic.w	r3, r3, #4
 80051f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80051f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005200:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005202:	2300      	movs	r3, #0
 8005204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005206:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d042      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005214:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005218:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800521c:	d022      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800521e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005222:	d81b      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005228:	d011      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800522a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800522e:	d815      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d019      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005238:	d110      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800523a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800523e:	3308      	adds	r3, #8
 8005240:	4618      	mov	r0, r3
 8005242:	f001 ff9b 	bl	800717c <RCCEx_PLL2_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800524c:	e00d      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524e:	4b2e      	ldr	r3, [pc, #184]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005258:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800525a:	e006      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005262:	e002      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005264:	bf00      	nop
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005268:	bf00      	nop
    }
    if (ret == HAL_OK)
 800526a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10d      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005272:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005278:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800527c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005284:	4a20      	ldr	r2, [pc, #128]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005286:	430b      	orrs	r3, r1
 8005288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800528c:	e003      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005292:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80052a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052a4:	2300      	movs	r3, #0
 80052a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d032      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80052b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052be:	d00b      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80052c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c4:	d804      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80052ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ce:	d007      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052d6:	e004      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80052d8:	bf00      	nop
 80052da:	e002      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80052e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d112      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80052ea:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052fc:	4a02      	ldr	r2, [pc, #8]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052fe:	430b      	orrs	r3, r1
 8005300:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005304:	e008      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005306:	bf00      	nop
 8005308:	46020c00 	.word	0x46020c00
 800530c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005310:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005314:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005324:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005326:	2300      	movs	r3, #0
 8005328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800532a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d00c      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005334:	4b98      	ldr	r3, [pc, #608]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800533a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800533e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005346:	4a94      	ldr	r2, [pc, #592]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005348:	430b      	orrs	r3, r1
 800534a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800534e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800535a:	633b      	str	r3, [r7, #48]	@ 0x30
 800535c:	2300      	movs	r3, #0
 800535e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005360:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005364:	460b      	mov	r3, r1
 8005366:	4313      	orrs	r3, r2
 8005368:	d019      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800536a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800536e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005376:	d105      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005378:	4b87      	ldr	r3, [pc, #540]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	4a86      	ldr	r2, [pc, #536]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800537e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005382:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005384:	4b84      	ldr	r3, [pc, #528]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800538a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800538e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005396:	4a80      	ldr	r2, [pc, #512]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005398:	430b      	orrs	r3, r1
 800539a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ac:	2300      	movs	r3, #0
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053b4:	460b      	mov	r3, r1
 80053b6:	4313      	orrs	r3, r2
 80053b8:	d00c      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80053ba:	4b77      	ldr	r3, [pc, #476]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053cc:	4972      	ldr	r1, [pc, #456]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80053d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d00c      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80053f0:	4b69      	ldr	r3, [pc, #420]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005402:	4965      	ldr	r1, [pc, #404]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800540a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	2300      	movs	r3, #0
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005420:	460b      	mov	r3, r1
 8005422:	4313      	orrs	r3, r2
 8005424:	d00c      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005426:	4b5c      	ldr	r3, [pc, #368]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800542c:	f023 0218 	bic.w	r2, r3, #24
 8005430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005434:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005438:	4957      	ldr	r1, [pc, #348]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005456:	460b      	mov	r3, r1
 8005458:	4313      	orrs	r3, r2
 800545a:	d032      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800545c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005460:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005468:	d105      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546a:	4b4b      	ldr	r3, [pc, #300]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	4a4a      	ldr	r2, [pc, #296]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005474:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800547a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800547e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005482:	d108      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005488:	3308      	adds	r3, #8
 800548a:	4618      	mov	r0, r3
 800548c:	f001 fe76 	bl	800717c <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8005496:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10d      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800549e:	4b3e      	ldr	r3, [pc, #248]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054b0:	4939      	ldr	r1, [pc, #228]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80054b8:	e003      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054be:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80054c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054d8:	460b      	mov	r3, r1
 80054da:	4313      	orrs	r3, r2
 80054dc:	d03a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80054de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ea:	d00e      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80054ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054f0:	d815      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d017      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80054f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054fa:	d110      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054fc:	4b26      	ldr	r3, [pc, #152]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	4a25      	ldr	r2, [pc, #148]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005506:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005508:	e00e      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800550a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800550e:	3308      	adds	r3, #8
 8005510:	4618      	mov	r0, r3
 8005512:	f001 fe33 	bl	800717c <RCCEx_PLL2_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800551c:	e004      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005526:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005528:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10d      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005530:	4b19      	ldr	r3, [pc, #100]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005536:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800553a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005542:	4915      	ldr	r1, [pc, #84]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800554a:	e003      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005550:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	2300      	movs	r3, #0
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	e9d7 1200 	ldrd	r1, r2, [r7]
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	d00c      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005570:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005576:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800557a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800557e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005582:	4905      	ldr	r1, [pc, #20]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800558a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800558e:	4618      	mov	r0, r3
 8005590:	37e8      	adds	r7, #232	@ 0xe8
 8005592:	46bd      	mov	sp, r7
 8005594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005598:	46020c00 	.word	0x46020c00

0800559c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	@ 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80055a4:	4ba6      	ldr	r3, [pc, #664]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ac:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80055ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80055b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	3301      	adds	r3, #1
 80055c4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80055c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80055d2:	4b9b      	ldr	r3, [pc, #620]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	08db      	lsrs	r3, r3, #3
 80055d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ea:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d062      	beq.n	80056ba <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	f200 8081 	bhi.w	80056fe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d024      	beq.n	800564c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d17a      	bne.n	80056fe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005612:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005844 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561a:	4b89      	ldr	r3, [pc, #548]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800561c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800562a:	ed97 6a02 	vldr	s12, [r7, #8]
 800562e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005632:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005636:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800563a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800563e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800564a:	e08f      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800564c:	4b7c      	ldr	r3, [pc, #496]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005658:	4b79      	ldr	r3, [pc, #484]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	0f1b      	lsrs	r3, r3, #28
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	e006      	b.n	8005672 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005664:	4b76      	ldr	r3, [pc, #472]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	0f1b      	lsrs	r3, r3, #28
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	4a76      	ldr	r2, [pc, #472]	@ (800584c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005698:	ed97 6a02 	vldr	s12, [r7, #8]
 800569c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056b8:	e058      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005844 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80056c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80056e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056fc:	e036      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056fe:	4b50      	ldr	r3, [pc, #320]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800570a:	4b4d      	ldr	r3, [pc, #308]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	0f1b      	lsrs	r3, r3, #28
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	e006      	b.n	8005724 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005716:	4b4a      	ldr	r3, [pc, #296]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	0f1b      	lsrs	r3, r3, #28
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	4a49      	ldr	r2, [pc, #292]	@ (800584c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a02 	vldr	s12, [r7, #8]
 800574e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005848 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800576a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800576c:	4b34      	ldr	r3, [pc, #208]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d017      	beq.n	80057a8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005778:	4b31      	ldr	r3, [pc, #196]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800577a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577c:	0a5b      	lsrs	r3, r3, #9
 800577e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800578a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800578e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005792:	edd7 6a07 	vldr	s13, [r7, #28]
 8005796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579e:	ee17 2a90 	vmov	r2, s15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e002      	b.n	80057ae <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80057ae:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d017      	beq.n	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057ba:	4b21      	ldr	r3, [pc, #132]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057be:	0c1b      	lsrs	r3, r3, #16
 80057c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80057cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057d0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e0:	ee17 2a90 	vmov	r2, s15
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	605a      	str	r2, [r3, #4]
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057fc:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	0e1b      	lsrs	r3, r3, #24
 8005802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800580e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005812:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005816:	edd7 6a07 	vldr	s13, [r7, #28]
 800581a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005822:	ee17 2a90 	vmov	r2, s15
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800582a:	e002      	b.n	8005832 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	609a      	str	r2, [r3, #8]
}
 8005832:	bf00      	nop
 8005834:	3724      	adds	r7, #36	@ 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	46020c00 	.word	0x46020c00
 8005844:	4b742400 	.word	0x4b742400
 8005848:	46000000 	.word	0x46000000
 800584c:	08009be4 	.word	0x08009be4

08005850 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	@ 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005858:	4ba6      	ldr	r3, [pc, #664]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005860:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005862:	4ba4      	ldr	r3, [pc, #656]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800586c:	4ba1      	ldr	r3, [pc, #644]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	3301      	adds	r3, #1
 8005878:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800587a:	4b9e      	ldr	r3, [pc, #632]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005886:	4b9b      	ldr	r3, [pc, #620]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	08db      	lsrs	r3, r3, #3
 800588c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d062      	beq.n	800596e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	f200 8081 	bhi.w	80059b2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d024      	beq.n	8005900 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d17a      	bne.n	80059b2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b89      	ldr	r3, [pc, #548]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058fe:	e08f      	b.n	8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005900:	4b7c      	ldr	r3, [pc, #496]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800590c:	4b79      	ldr	r3, [pc, #484]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	0f1b      	lsrs	r3, r3, #28
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	e006      	b.n	8005926 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005918:	4b76      	ldr	r3, [pc, #472]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800591a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	0f1b      	lsrs	r3, r3, #28
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	4a76      	ldr	r2, [pc, #472]	@ (8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005950:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005960:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800596c:	e058      	b.n	8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005978:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800597c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005980:	4b5c      	ldr	r3, [pc, #368]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005988:	ee07 3a90 	vmov	s15, r3
 800598c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005990:	ed97 6a02 	vldr	s12, [r7, #8]
 8005994:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005998:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800599c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059b0:	e036      	b.n	8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80059b2:	4b50      	ldr	r3, [pc, #320]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80059be:	4b4d      	ldr	r3, [pc, #308]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	0f1b      	lsrs	r3, r3, #28
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	e006      	b.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80059ca:	4b4a      	ldr	r3, [pc, #296]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	0f1b      	lsrs	r3, r3, #28
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	4a49      	ldr	r2, [pc, #292]	@ (8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80059da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a02:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a1e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005a20:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d017      	beq.n	8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a2c:	4b31      	ldr	r3, [pc, #196]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a30:	0a5b      	lsrs	r3, r3, #9
 8005a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a42:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a52:	ee17 2a90 	vmov	r2, s15
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005a62:	4b24      	ldr	r3, [pc, #144]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d017      	beq.n	8005a9e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a6e:	4b21      	ldr	r3, [pc, #132]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a72:	0c1b      	lsrs	r3, r3, #16
 8005a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005a80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a84:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a94:	ee17 2a90 	vmov	r2, s15
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	605a      	str	r2, [r3, #4]
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005aa4:	4b13      	ldr	r3, [pc, #76]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d017      	beq.n	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ab0:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad6:	ee17 2a90 	vmov	r2, s15
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ade:	e002      	b.n	8005ae6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
}
 8005ae6:	bf00      	nop
 8005ae8:	3724      	adds	r7, #36	@ 0x24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	46020c00 	.word	0x46020c00
 8005af8:	4b742400 	.word	0x4b742400
 8005afc:	46000000 	.word	0x46000000
 8005b00:	08009be4 	.word	0x08009be4

08005b04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	@ 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005b0c:	4ba6      	ldr	r3, [pc, #664]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b14:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005b16:	4ba4      	ldr	r3, [pc, #656]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005b20:	4ba1      	ldr	r3, [pc, #644]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b24:	0a1b      	lsrs	r3, r3, #8
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005b2e:	4b9e      	ldr	r3, [pc, #632]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3e:	08db      	lsrs	r3, r3, #3
 8005b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d062      	beq.n	8005c22 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	f200 8081 	bhi.w	8005c66 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d024      	beq.n	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d17a      	bne.n	8005c66 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b82:	4b89      	ldr	r3, [pc, #548]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b96:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005bb2:	e08f      	b.n	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005bb4:	4b7c      	ldr	r3, [pc, #496]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005bc0:	4b79      	ldr	r3, [pc, #484]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	0f1b      	lsrs	r3, r3, #28
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	e006      	b.n	8005bda <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005bcc:	4b76      	ldr	r3, [pc, #472]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	0f1b      	lsrs	r3, r3, #28
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	4a76      	ldr	r2, [pc, #472]	@ (8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c00:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c04:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c20:	e058      	b.n	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c34:	4b5c      	ldr	r3, [pc, #368]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c44:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c48:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c64:	e036      	b.n	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c66:	4b50      	ldr	r3, [pc, #320]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005c72:	4b4d      	ldr	r3, [pc, #308]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0f1b      	lsrs	r3, r3, #28
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	e006      	b.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	0f1b      	lsrs	r3, r3, #28
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	4a49      	ldr	r2, [pc, #292]	@ (8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cb6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cd2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005cd4:	4b34      	ldr	r3, [pc, #208]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ce0:	4b31      	ldr	r3, [pc, #196]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce4:	0a5b      	lsrs	r3, r3, #9
 8005ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d06:	ee17 2a90 	vmov	r2, s15
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e002      	b.n	8005d16 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005d16:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d017      	beq.n	8005d52 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d22:	4b21      	ldr	r3, [pc, #132]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d38:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d48:	ee17 2a90 	vmov	r2, s15
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	e002      	b.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005d58:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d017      	beq.n	8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d64:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	0e1b      	lsrs	r3, r3, #24
 8005d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8a:	ee17 2a90 	vmov	r2, s15
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d92:	e002      	b.n	8005d9a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
}
 8005d9a:	bf00      	nop
 8005d9c:	3724      	adds	r7, #36	@ 0x24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	46020c00 	.word	0x46020c00
 8005dac:	4b742400 	.word	0x4b742400
 8005db0:	46000000 	.word	0x46000000
 8005db4:	08009be4 	.word	0x08009be4

08005db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	@ 0x38
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	d145      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005dce:	4ba7      	ldr	r3, [pc, #668]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005dda:	4ba4      	ldr	r3, [pc, #656]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d108      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dee:	d104      	bne.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005df0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df6:	f001 b9b3 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005dfa:	4b9c      	ldr	r3, [pc, #624]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e08:	d114      	bne.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e10:	d110      	bne.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e12:	4b96      	ldr	r3, [pc, #600]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e20:	d103      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005e22:	23fa      	movs	r3, #250	@ 0xfa
 8005e24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e26:	f001 b99b 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005e2a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e2e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e30:	f001 b996 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005e34:	4b8d      	ldr	r3, [pc, #564]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e40:	d107      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e48:	d103      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005e4a:	4b89      	ldr	r3, [pc, #548]	@ (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4e:	f001 b987 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e56:	f001 b983 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005e62:	430b      	orrs	r3, r1
 8005e64:	d151      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e66:	4b81      	ldr	r3, [pc, #516]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e6c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005e70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	2b80      	cmp	r3, #128	@ 0x80
 8005e76:	d035      	beq.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	2b80      	cmp	r3, #128	@ 0x80
 8005e7c:	d841      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	2b60      	cmp	r3, #96	@ 0x60
 8005e82:	d02a      	beq.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	2b60      	cmp	r3, #96	@ 0x60
 8005e88:	d83b      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	2b40      	cmp	r3, #64	@ 0x40
 8005e8e:	d009      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d835      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d012      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005ea2:	e02e      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fb77 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb2:	f001 b955 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb6:	f107 0318 	add.w	r3, r7, #24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fcc8 	bl	8005850 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ec4:	f001 b94c 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec8:	f107 030c 	add.w	r3, r7, #12
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fe19 	bl	8005b04 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ed6:	f001 b943 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005eda:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ee0:	f001 b93e 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ee4:	4b61      	ldr	r3, [pc, #388]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef0:	d103      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005ef2:	4b60      	ldr	r3, [pc, #384]	@ (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ef6:	f001 b933 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005efe:	f001 b92f 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f06:	f001 b92b 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005f12:	430b      	orrs	r3, r1
 8005f14:	d158      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005f16:	4b55      	ldr	r3, [pc, #340]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f28:	d03b      	beq.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f30:	d846      	bhi.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f38:	d02e      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f40:	d83e      	bhi.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f48:	d00b      	beq.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f50:	d836      	bhi.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00d      	beq.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f5e:	d012      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005f60:	e02e      	b.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fb18 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f70:	f001 b8f6 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f74:	f107 0318 	add.w	r3, r7, #24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fc69 	bl	8005850 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f82:	f001 b8ed 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fdba 	bl	8005b04 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f94:	f001 b8e4 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f98:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f9e:	f001 b8df 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fa2:	4b32      	ldr	r3, [pc, #200]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fae:	d103      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005fb0:	4b30      	ldr	r3, [pc, #192]	@ (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fb4:	f001 b8d4 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fbc:	f001 b8d0 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fc4:	f001 b8cc 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fcc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	d126      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005fd4:	4b25      	ldr	r3, [pc, #148]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005fe0:	4b22      	ldr	r3, [pc, #136]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fec:	d106      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff8:	f001 b8b2 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006008:	d107      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006010:	d103      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006012:	4b19      	ldr	r3, [pc, #100]	@ (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
 8006016:	f001 b8a3 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
 800601e:	f001 b89f 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006026:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800602a:	430b      	orrs	r3, r1
 800602c:	d16e      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800602e:	4b0f      	ldr	r3, [pc, #60]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006034:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006038:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006040:	d03d      	beq.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006048:	d85c      	bhi.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006050:	d014      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006058:	d854      	bhi.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01f      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006066:	d012      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006068:	e04c      	b.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800606a:	bf00      	nop
 800606c:	46020c00 	.word	0x46020c00
 8006070:	0007a120 	.word	0x0007a120
 8006074:	00f42400 	.word	0x00f42400
 8006078:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800607c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fa8b 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800608a:	f001 b869 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800608e:	f107 0318 	add.w	r3, r7, #24
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fbdc 	bl	8005850 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800609c:	f001 b860 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80060a0:	4ba7      	ldr	r3, [pc, #668]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ac:	d103      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80060ae:	4ba5      	ldr	r3, [pc, #660]	@ (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80060b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060b2:	f001 b855 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060ba:	f001 b851 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80060be:	4ba0      	ldr	r3, [pc, #640]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d118      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060ca:	4b9d      	ldr	r3, [pc, #628]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80060d6:	4b9a      	ldr	r3, [pc, #616]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0e1b      	lsrs	r3, r3, #24
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80060e2:	4b97      	ldr	r3, [pc, #604]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	0e1b      	lsrs	r3, r3, #24
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	4a95      	ldr	r2, [pc, #596]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060f8:	f001 b832 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006100:	f001 b82e 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006108:	f001 b82a 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800610c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006110:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006114:	430b      	orrs	r3, r1
 8006116:	d17f      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006118:	4b89      	ldr	r3, [pc, #548]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800611a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800611e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006122:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	2b00      	cmp	r3, #0
 8006128:	d165      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800612a:	4b85      	ldr	r3, [pc, #532]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800612c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006130:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006134:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800613c:	d034      	beq.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006144:	d853      	bhi.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800614c:	d00b      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006154:	d84b      	bhi.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006162:	d009      	beq.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006164:	e043      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fa16 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006174:	f000 bff4 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006178:	f107 0318 	add.w	r3, r7, #24
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fb67 	bl	8005850 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006186:	f000 bfeb 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800618a:	4b6d      	ldr	r3, [pc, #436]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006196:	d103      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006198:	4b6a      	ldr	r3, [pc, #424]	@ (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800619a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800619c:	f000 bfe0 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061a4:	f000 bfdc 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80061a8:	4b65      	ldr	r3, [pc, #404]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d118      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061b4:	4b62      	ldr	r3, [pc, #392]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80061c0:	4b5f      	ldr	r3, [pc, #380]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	0e1b      	lsrs	r3, r3, #24
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	e006      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80061cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	0e1b      	lsrs	r3, r3, #24
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	4a5b      	ldr	r2, [pc, #364]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80061e2:	f000 bfbd 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061ea:	f000 bfb9 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061f2:	f000 bfb5 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061fc:	d108      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f9ca 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
 800620c:	f000 bfa8 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
 8006214:	f000 bfa4 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621c:	1e51      	subs	r1, r2, #1
 800621e:	430b      	orrs	r3, r1
 8006220:	d136      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006222:	4b47      	ldr	r3, [pc, #284]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006234:	f7fe fb44 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8006238:	6378      	str	r0, [r7, #52]	@ 0x34
 800623a:	f000 bf91 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	2b01      	cmp	r3, #1
 8006242:	d104      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006244:	f7fe fa0c 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006248:	6378      	str	r0, [r7, #52]	@ 0x34
 800624a:	f000 bf89 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800624e:	4b3c      	ldr	r3, [pc, #240]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800625a:	d106      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	2b02      	cmp	r3, #2
 8006260:	d103      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006262:	4b3a      	ldr	r3, [pc, #232]	@ (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006264:	637b      	str	r3, [r7, #52]	@ 0x34
 8006266:	f000 bf7b 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800626a:	4b35      	ldr	r3, [pc, #212]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800626c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d107      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	2b03      	cmp	r3, #3
 800627c:	d104      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
 8006284:	f000 bf6c 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
 800628c:	f000 bf68 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006294:	1e91      	subs	r1, r2, #2
 8006296:	430b      	orrs	r3, r1
 8006298:	d136      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800629a:	4b29      	ldr	r3, [pc, #164]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800629c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7fe faf4 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80062b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80062b2:	f000 bf55 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d104      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062bc:	f7fe f9d0 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 80062c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80062c2:	f000 bf4d 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80062c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d2:	d106      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d103      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80062da:	4b1c      	ldr	r3, [pc, #112]	@ (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80062dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062de:	f000 bf3f 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80062e2:	4b17      	ldr	r3, [pc, #92]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80062e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d107      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	2b0c      	cmp	r3, #12
 80062f4:	d104      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80062f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fc:	f000 bf30 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	637b      	str	r3, [r7, #52]	@ 0x34
 8006304:	f000 bf2c 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630c:	1f11      	subs	r1, r2, #4
 800630e:	430b      	orrs	r3, r1
 8006310:	d13f      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006312:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006318:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800631c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006324:	f7fe fab8 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8006328:	6378      	str	r0, [r7, #52]	@ 0x34
 800632a:	f000 bf19 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	2b10      	cmp	r3, #16
 8006332:	d10d      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006334:	f7fe f994 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006338:	6378      	str	r0, [r7, #52]	@ 0x34
 800633a:	f000 bf11 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800633e:	bf00      	nop
 8006340:	46020c00 	.word	0x46020c00
 8006344:	02dc6c00 	.word	0x02dc6c00
 8006348:	08009be4 	.word	0x08009be4
 800634c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006350:	4ba6      	ldr	r3, [pc, #664]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800635c:	d106      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	2b20      	cmp	r3, #32
 8006362:	d103      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006364:	4ba2      	ldr	r3, [pc, #648]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006366:	637b      	str	r3, [r7, #52]	@ 0x34
 8006368:	f000 befa 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800636c:	4b9f      	ldr	r3, [pc, #636]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800636e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d107      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	2b30      	cmp	r3, #48	@ 0x30
 800637e:	d104      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
 8006386:	f000 beeb 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
 800638e:	f000 bee7 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006396:	f1a2 0108 	sub.w	r1, r2, #8
 800639a:	430b      	orrs	r3, r1
 800639c:	d136      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800639e:	4b93      	ldr	r3, [pc, #588]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063b0:	f7fe fa72 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80063b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80063b6:	f000 bed3 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	2b40      	cmp	r3, #64	@ 0x40
 80063be:	d104      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063c0:	f7fe f94e 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 80063c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80063c6:	f000 becb 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80063ca:	4b88      	ldr	r3, [pc, #544]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d106      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	2b80      	cmp	r3, #128	@ 0x80
 80063dc:	d103      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80063de:	4b84      	ldr	r3, [pc, #528]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e2:	f000 bebd 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80063e6:	4b81      	ldr	r3, [pc, #516]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d107      	bne.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80063f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063f8:	d104      	bne.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80063fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006400:	f000 beae 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	637b      	str	r3, [r7, #52]	@ 0x34
 8006408:	f000 beaa 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800640c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006410:	f1a2 0110 	sub.w	r1, r2, #16
 8006414:	430b      	orrs	r3, r1
 8006416:	d139      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006418:	4b74      	ldr	r3, [pc, #464]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800641a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800641e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006422:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800642a:	f7fe fa35 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 800642e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006430:	f000 be96 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643a:	d104      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800643c:	f7fe f910 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006440:	6378      	str	r0, [r7, #52]	@ 0x34
 8006442:	f000 be8d 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006446:	4b69      	ldr	r3, [pc, #420]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006452:	d107      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800645a:	d103      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800645c:	4b64      	ldr	r3, [pc, #400]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006460:	f000 be7e 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006464:	4b61      	ldr	r3, [pc, #388]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d108      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006478:	d104      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800647a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006480:	f000 be6e 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
 8006488:	f000 be6a 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800648c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006490:	f1a2 0120 	sub.w	r1, r2, #32
 8006494:	430b      	orrs	r3, r1
 8006496:	d158      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006498:	4b54      	ldr	r3, [pc, #336]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800649a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80064aa:	f7fe fa1d 	bl	80048e8 <HAL_RCC_GetPCLK3Freq>
 80064ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80064b0:	f000 be56 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d104      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064ba:	f7fe f8d1 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 80064be:	6378      	str	r0, [r7, #52]	@ 0x34
 80064c0:	f000 be4e 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80064c4:	4b49      	ldr	r3, [pc, #292]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d0:	d106      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d103      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80064d8:	4b45      	ldr	r3, [pc, #276]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
 80064dc:	f000 be40 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80064e0:	4b42      	ldr	r3, [pc, #264]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d107      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d104      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80064f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fa:	f000 be31 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80064fe:	4b3b      	ldr	r3, [pc, #236]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b20      	cmp	r3, #32
 8006508:	d11b      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	2b04      	cmp	r3, #4
 800650e:	d118      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006510:	4b36      	ldr	r3, [pc, #216]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800651c:	4b33      	ldr	r3, [pc, #204]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	0e1b      	lsrs	r3, r3, #24
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	e006      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006528:	4b30      	ldr	r3, [pc, #192]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800652a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	0e1b      	lsrs	r3, r3, #24
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	4a2f      	ldr	r2, [pc, #188]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653c:	637b      	str	r3, [r7, #52]	@ 0x34
 800653e:	f000 be0f 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
 8006546:	f000 be0b 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800654a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006552:	430b      	orrs	r3, r1
 8006554:	d172      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006556:	4b25      	ldr	r3, [pc, #148]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800655c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006560:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006568:	d104      	bne.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800656a:	f7fe f879 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 800656e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006570:	f000 bdf6 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800657a:	d108      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800657c:	f107 0318 	add.w	r3, r7, #24
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff f965 	bl	8005850 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	f000 bde9 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006594:	f7fe f966 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8006598:	6378      	str	r0, [r7, #52]	@ 0x34
 800659a:	f000 bde1 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80065a4:	d128      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065a6:	4b11      	ldr	r3, [pc, #68]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d118      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065b2:	4b0e      	ldr	r3, [pc, #56]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80065be:	4b0b      	ldr	r3, [pc, #44]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0e1b      	lsrs	r3, r3, #24
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	e006      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80065ca:	4b08      	ldr	r3, [pc, #32]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	0e1b      	lsrs	r3, r3, #24
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	4a06      	ldr	r2, [pc, #24]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065de:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e0:	f000 bdbe 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e8:	f000 bdba 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80065ec:	46020c00 	.word	0x46020c00
 80065f0:	00f42400 	.word	0x00f42400
 80065f4:	08009be4 	.word	0x08009be4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80065f8:	4baf      	ldr	r3, [pc, #700]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006604:	d107      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800660c:	d103      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800660e:	4bab      	ldr	r3, [pc, #684]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
 8006612:	f000 bda5 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006616:	4ba8      	ldr	r3, [pc, #672]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006622:	d107      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662a:	d103      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800662c:	4ba3      	ldr	r3, [pc, #652]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006630:	f000 bd96 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
 8006638:	f000 bd92 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800663c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006640:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006644:	430b      	orrs	r3, r1
 8006646:	d158      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006648:	4b9b      	ldr	r3, [pc, #620]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800664a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	2b04      	cmp	r3, #4
 8006658:	d84b      	bhi.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800665a:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006699 	.word	0x08006699
 8006664:	08006675 	.word	0x08006675
 8006668:	08006687 	.word	0x08006687
 800666c:	080066a3 	.word	0x080066a3
 8006670:	080066ad 	.word	0x080066ad
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe ff8f 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006682:	f000 bd6d 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006686:	f107 030c 	add.w	r3, r7, #12
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fa3a 	bl	8005b04 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006694:	f000 bd64 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006698:	f7fe f8e4 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 800669c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800669e:	f000 bd5f 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80066a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066a8:	f000 bd5a 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066ac:	4b82      	ldr	r3, [pc, #520]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d118      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066b8:	4b7f      	ldr	r3, [pc, #508]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80066c4:	4b7c      	ldr	r3, [pc, #496]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	0e1b      	lsrs	r3, r3, #24
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	e006      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80066d0:	4b79      	ldr	r3, [pc, #484]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066d6:	041b      	lsls	r3, r3, #16
 80066d8:	0e1b      	lsrs	r3, r3, #24
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	4a78      	ldr	r2, [pc, #480]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80066e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066e6:	f000 bd3b 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ee:	f000 bd37 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066f6:	f000 bd33 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80066fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fe:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006702:	430b      	orrs	r3, r1
 8006704:	d167      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006706:	4b6c      	ldr	r3, [pc, #432]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800670c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006710:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006714:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006718:	d036      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006720:	d855      	bhi.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006728:	d029      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006730:	d84d      	bhi.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006738:	d013      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006740:	d845      	bhi.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d015      	beq.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674e:	d13e      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe ff21 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675e:	f000 bcff 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006762:	f107 030c 	add.w	r3, r7, #12
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff f9cc 	bl	8005b04 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006770:	f000 bcf6 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006774:	f7fe f876 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8006778:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800677a:	f000 bcf1 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800677e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006784:	f000 bcec 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006788:	4b4b      	ldr	r3, [pc, #300]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b20      	cmp	r3, #32
 8006792:	d118      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006794:	4b48      	ldr	r3, [pc, #288]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80067a0:	4b45      	ldr	r3, [pc, #276]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	0e1b      	lsrs	r3, r3, #24
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	e006      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80067ac:	4b42      	ldr	r3, [pc, #264]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80067ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	0e1b      	lsrs	r3, r3, #24
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	4a41      	ldr	r2, [pc, #260]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80067bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067c2:	f000 bccd 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ca:	f000 bcc9 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067d2:	f000 bcc5 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80067d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067da:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80067de:	430b      	orrs	r3, r1
 80067e0:	d14c      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80067e2:	4b35      	ldr	r3, [pc, #212]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80067e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067f4:	f7fe f850 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80067f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80067fa:	f000 bcb1 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006804:	d104      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006806:	f7fd ff2b 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 800680a:	6378      	str	r0, [r7, #52]	@ 0x34
 800680c:	f000 bca8 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006810:	4b29      	ldr	r3, [pc, #164]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800681c:	d107      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006824:	d103      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006826:	4b25      	ldr	r3, [pc, #148]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
 800682a:	f000 bc99 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800682e:	4b22      	ldr	r3, [pc, #136]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b20      	cmp	r3, #32
 8006838:	d11c      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006840:	d118      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006842:	4b1d      	ldr	r3, [pc, #116]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800684e:	4b1a      	ldr	r3, [pc, #104]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	0e1b      	lsrs	r3, r3, #24
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	e006      	b.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800685a:	4b17      	ldr	r3, [pc, #92]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800685c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006860:	041b      	lsls	r3, r3, #16
 8006862:	0e1b      	lsrs	r3, r3, #24
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006870:	f000 bc76 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
 8006878:	f000 bc72 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800687c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006880:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006884:	430b      	orrs	r3, r1
 8006886:	d153      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006888:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800688a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800688e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006892:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800689a:	f7fd fffd 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 800689e:	6378      	str	r0, [r7, #52]	@ 0x34
 80068a0:	f000 bc5e 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068aa:	d10b      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068ac:	f7fd fed8 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 80068b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80068b2:	f000 bc55 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80068b6:	bf00      	nop
 80068b8:	46020c00 	.word	0x46020c00
 80068bc:	00f42400 	.word	0x00f42400
 80068c0:	08009be4 	.word	0x08009be4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80068c4:	4ba1      	ldr	r3, [pc, #644]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d0:	d107      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d8:	d103      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80068da:	4b9d      	ldr	r3, [pc, #628]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80068dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068de:	f000 bc3f 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80068e2:	4b9a      	ldr	r3, [pc, #616]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d11c      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068f4:	d118      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068f6:	4b95      	ldr	r3, [pc, #596]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006902:	4b92      	ldr	r3, [pc, #584]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	0e1b      	lsrs	r3, r3, #24
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	e006      	b.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800690e:	4b8f      	ldr	r3, [pc, #572]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	0e1b      	lsrs	r3, r3, #24
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	4a8d      	ldr	r2, [pc, #564]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800691e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006922:	637b      	str	r3, [r7, #52]	@ 0x34
 8006924:	f000 bc1c 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	637b      	str	r3, [r7, #52]	@ 0x34
 800692c:	f000 bc18 	b.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006934:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006938:	430b      	orrs	r3, r1
 800693a:	d151      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800693c:	4b83      	ldr	r3, [pc, #524]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800693e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006942:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006946:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	2bc0      	cmp	r3, #192	@ 0xc0
 800694c:	d024      	beq.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	2bc0      	cmp	r3, #192	@ 0xc0
 8006952:	d842      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d00d      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	2b80      	cmp	r3, #128	@ 0x80
 800695e:	d83c      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	2b40      	cmp	r3, #64	@ 0x40
 800696a:	d011      	beq.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800696c:	e035      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800696e:	f7fd ffbb 	bl	80048e8 <HAL_RCC_GetPCLK3Freq>
 8006972:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006974:	e3f4      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006976:	4b75      	ldr	r3, [pc, #468]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006982:	d102      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8006984:	4b72      	ldr	r3, [pc, #456]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006988:	e3ea      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800698e:	e3e7      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006990:	f7fd fe66 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006994:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006996:	e3e3      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006998:	4b6c      	ldr	r3, [pc, #432]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d117      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069a4:	4b69      	ldr	r3, [pc, #420]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80069b0:	4b66      	ldr	r3, [pc, #408]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	e006      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80069bc:	4b63      	ldr	r3, [pc, #396]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	0e1b      	lsrs	r3, r3, #24
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	4a62      	ldr	r2, [pc, #392]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80069cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069d2:	e3c5      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069d8:	e3c2      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069de:	e3bf      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80069e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80069e8:	430b      	orrs	r3, r1
 80069ea:	d147      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80069ec:	4b57      	ldr	r3, [pc, #348]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80069ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80069f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069fe:	f7fd ff4b 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8006a02:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a04:	e3ac      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a0c:	d103      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7fd fe27 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006a12:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a14:	e3a4      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006a16:	4b4d      	ldr	r3, [pc, #308]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a22:	d106      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8006a2c:	4b48      	ldr	r3, [pc, #288]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a30:	e396      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006a32:	4b46      	ldr	r3, [pc, #280]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d11b      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a44:	d117      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a46:	4b41      	ldr	r3, [pc, #260]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006a52:	4b3e      	ldr	r3, [pc, #248]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	0e1b      	lsrs	r3, r3, #24
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	e006      	b.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8006a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	0e1b      	lsrs	r3, r3, #24
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	4a39      	ldr	r2, [pc, #228]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	e374      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7a:	e371      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a80:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a84:	430b      	orrs	r3, r1
 8006a86:	d16a      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006a88:	4b30      	ldr	r3, [pc, #192]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d120      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d117      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aa6:	4b29      	ldr	r3, [pc, #164]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8006ab2:	4b26      	ldr	r3, [pc, #152]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	0e1b      	lsrs	r3, r3, #24
 8006ab8:	f003 030f 	and.w	r3, r3, #15
 8006abc:	e006      	b.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006abe:	4b23      	ldr	r3, [pc, #140]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	0e1b      	lsrs	r3, r3, #24
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	4a21      	ldr	r2, [pc, #132]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad4:	e344      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ada:	e341      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006adc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aea:	d112      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af2:	d10e      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006af4:	4b15      	ldr	r3, [pc, #84]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b02:	d102      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8006b04:	23fa      	movs	r3, #250	@ 0xfa
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b08:	e32a      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b0a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b10:	e326      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006b12:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b26:	d102      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006b28:	4b09      	ldr	r3, [pc, #36]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2c:	e318      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006b2e:	4b07      	ldr	r3, [pc, #28]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d10d      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b42:	d109      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8006b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4a:	e309      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006b4c:	46020c00 	.word	0x46020c00
 8006b50:	00f42400 	.word	0x00f42400
 8006b54:	08009be4 	.word	0x08009be4
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5c:	e300      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b62:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006b66:	430b      	orrs	r3, r1
 8006b68:	d164      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006b6a:	4ba2      	ldr	r3, [pc, #648]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d120      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b7c:	4b9d      	ldr	r3, [pc, #628]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d117      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b88:	4b9a      	ldr	r3, [pc, #616]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8006b94:	4b97      	ldr	r3, [pc, #604]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	0e1b      	lsrs	r3, r3, #24
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	e006      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006ba0:	4b94      	ldr	r3, [pc, #592]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	0e1b      	lsrs	r3, r3, #24
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	4a92      	ldr	r2, [pc, #584]	@ (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb6:	e2d3      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bbc:	e2d0      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bcc:	d112      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bd6:	4b87      	ldr	r3, [pc, #540]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006be4:	d102      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8006be6:	23fa      	movs	r3, #250	@ 0xfa
 8006be8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bea:	e2b9      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006bec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bf2:	e2b5      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c00:	d106      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c08:	d102      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8006c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	e2a7      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006c10:	4b78      	ldr	r3, [pc, #480]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c24:	d103      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8006c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2c:	e298      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c32:	e295      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c38:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	d147      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006c40:	4b6c      	ldr	r3, [pc, #432]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c46:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006c4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c52:	f7fd fe21 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8006c56:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c58:	e282      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006c5a:	4b66      	ldr	r3, [pc, #408]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c68:	d112      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c70:	d10e      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c72:	4b60      	ldr	r3, [pc, #384]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c80:	d102      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8006c82:	23fa      	movs	r3, #250	@ 0xfa
 8006c84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c86:	e26b      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c88:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c8e:	e267      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006c90:	4b58      	ldr	r3, [pc, #352]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9c:	d106      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ca4:	d102      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8006ca6:	4b55      	ldr	r3, [pc, #340]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006caa:	e259      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006cac:	4b51      	ldr	r3, [pc, #324]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d107      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006cc0:	d103      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8006cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc8:	e24a      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cce:	e247      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	d12d      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006cdc:	4b45      	ldr	r3, [pc, #276]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ce2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006ce6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006ce8:	4b42      	ldr	r3, [pc, #264]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cf4:	d105      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8006cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d00:	e22e      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d08:	d107      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fc44 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d18:	e222      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d20:	d107      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d22:	f107 0318 	add.w	r3, r7, #24
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fd92 	bl	8005850 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d30:	e216      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d36:	e213      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006d40:	430b      	orrs	r3, r1
 8006d42:	d15d      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d44:	4b2b      	ldr	r3, [pc, #172]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d4a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d56:	d028      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d5e:	d845      	bhi.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d66:	d013      	beq.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d6e:	d83d      	bhi.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d7c:	d004      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006d7e:	e035      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006d80:	f7fd fd9e 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8006d84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d86:	e1eb      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d88:	f7fd fc6a 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006d8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d8e:	e1e7      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d90:	4b18      	ldr	r3, [pc, #96]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d9c:	d102      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006d9e:	4b17      	ldr	r3, [pc, #92]	@ (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006da2:	e1dd      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da8:	e1da      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006daa:	4b12      	ldr	r3, [pc, #72]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d117      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006db6:	4b0f      	ldr	r3, [pc, #60]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	0e1b      	lsrs	r3, r3, #24
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	e006      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	0e1b      	lsrs	r3, r3, #24
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	4a06      	ldr	r2, [pc, #24]	@ (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006de4:	e1bc      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dea:	e1b9      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006df0:	e1b6      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006df2:	bf00      	nop
 8006df4:	46020c00 	.word	0x46020c00
 8006df8:	08009be4 	.word	0x08009be4
 8006dfc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e04:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	d156      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e0c:	4ba5      	ldr	r3, [pc, #660]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e16:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e1e:	d028      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e26:	d845      	bhi.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e2e:	d013      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8006e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e36:	d83d      	bhi.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e44:	d004      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8006e46:	e035      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006e48:	f7fd fd26 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e4e:	e187      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e50:	f7fd fc06 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006e54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e56:	e183      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e58:	4b92      	ldr	r3, [pc, #584]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e64:	d102      	bne.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8006e66:	4b90      	ldr	r3, [pc, #576]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006e68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e6a:	e179      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e70:	e176      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e72:	4b8c      	ldr	r3, [pc, #560]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d117      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e7e:	4b89      	ldr	r3, [pc, #548]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8006e8a:	4b86      	ldr	r3, [pc, #536]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	0e1b      	lsrs	r3, r3, #24
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	e006      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8006e96:	4b83      	ldr	r3, [pc, #524]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e9c:	041b      	lsls	r3, r3, #16
 8006e9e:	0e1b      	lsrs	r3, r3, #24
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	4a81      	ldr	r2, [pc, #516]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eaa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eac:	e158      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eb2:	e155      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eb8:	e152      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebe:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	d177      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006ec6:	4b77      	ldr	r3, [pc, #476]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ecc:	f003 0318 	and.w	r3, r3, #24
 8006ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	2b18      	cmp	r3, #24
 8006ed6:	d86b      	bhi.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8006ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f45 	.word	0x08006f45
 8006ee4:	08006fb1 	.word	0x08006fb1
 8006ee8:	08006fb1 	.word	0x08006fb1
 8006eec:	08006fb1 	.word	0x08006fb1
 8006ef0:	08006fb1 	.word	0x08006fb1
 8006ef4:	08006fb1 	.word	0x08006fb1
 8006ef8:	08006fb1 	.word	0x08006fb1
 8006efc:	08006fb1 	.word	0x08006fb1
 8006f00:	08006f4d 	.word	0x08006f4d
 8006f04:	08006fb1 	.word	0x08006fb1
 8006f08:	08006fb1 	.word	0x08006fb1
 8006f0c:	08006fb1 	.word	0x08006fb1
 8006f10:	08006fb1 	.word	0x08006fb1
 8006f14:	08006fb1 	.word	0x08006fb1
 8006f18:	08006fb1 	.word	0x08006fb1
 8006f1c:	08006fb1 	.word	0x08006fb1
 8006f20:	08006f55 	.word	0x08006f55
 8006f24:	08006fb1 	.word	0x08006fb1
 8006f28:	08006fb1 	.word	0x08006fb1
 8006f2c:	08006fb1 	.word	0x08006fb1
 8006f30:	08006fb1 	.word	0x08006fb1
 8006f34:	08006fb1 	.word	0x08006fb1
 8006f38:	08006fb1 	.word	0x08006fb1
 8006f3c:	08006fb1 	.word	0x08006fb1
 8006f40:	08006f6f 	.word	0x08006f6f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006f44:	f7fd fcd0 	bl	80048e8 <HAL_RCC_GetPCLK3Freq>
 8006f48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f4a:	e109      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f4c:	f7fd fb88 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006f50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f52:	e105      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f54:	4b53      	ldr	r3, [pc, #332]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f60:	d102      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8006f62:	4b51      	ldr	r3, [pc, #324]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006f64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f66:	e0fb      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f6c:	e0f8      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d117      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8006f86:	4b47      	ldr	r3, [pc, #284]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	0e1b      	lsrs	r3, r3, #24
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	e006      	b.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8006f92:	4b44      	ldr	r3, [pc, #272]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	0e1b      	lsrs	r3, r3, #24
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	4a42      	ldr	r2, [pc, #264]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fa8:	e0da      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fae:	e0d7      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fb4:	e0d4      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fba:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	d155      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006fc2:	4b38      	ldr	r3, [pc, #224]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006fc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fc8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006fcc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fd4:	d013      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fdc:	d844      	bhi.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fe4:	d013      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fec:	d83c      	bhi.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d014      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ffa:	d014      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8006ffc:	e034      	b.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ffe:	f107 0318 	add.w	r3, r7, #24
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fc24 	bl	8005850 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800700c:	e0a8      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800700e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007012:	4618      	mov	r0, r3
 8007014:	f7fe fac2 	bl	800559c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800701c:	e0a0      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800701e:	f7fd fb1f 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8007022:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007024:	e09c      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007026:	4b1f      	ldr	r3, [pc, #124]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b20      	cmp	r3, #32
 8007030:	d117      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007032:	4b1c      	ldr	r3, [pc, #112]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800703e:	4b19      	ldr	r3, [pc, #100]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	0e1b      	lsrs	r3, r3, #24
 8007044:	f003 030f 	and.w	r3, r3, #15
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800704a:	4b16      	ldr	r3, [pc, #88]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800704c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007050:	041b      	lsls	r3, r3, #16
 8007052:	0e1b      	lsrs	r3, r3, #24
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	4a14      	ldr	r2, [pc, #80]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800705a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007060:	e07e      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007066:	e07b      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800706c:	e078      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800706e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007072:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007076:	430b      	orrs	r3, r1
 8007078:	d138      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800707a:	4b0a      	ldr	r3, [pc, #40]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800707c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007084:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007086:	4b07      	ldr	r3, [pc, #28]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d10d      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800709a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800709e:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a0:	e05e      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80070a2:	bf00      	nop
 80070a4:	46020c00 	.word	0x46020c00
 80070a8:	00f42400 	.word	0x00f42400
 80070ac:	08009be4 	.word	0x08009be4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80070b0:	4b2e      	ldr	r3, [pc, #184]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80070b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070be:	d112      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c6:	d10e      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070c8:	4b28      	ldr	r3, [pc, #160]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80070ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d6:	d102      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 80070d8:	23fa      	movs	r3, #250	@ 0xfa
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070dc:	e040      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80070de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070e4:	e03c      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ea:	e039      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80070ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80070f4:	430b      	orrs	r3, r1
 80070f6:	d131      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80070f8:	4b1c      	ldr	r3, [pc, #112]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80070fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007102:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007104:	4b19      	ldr	r3, [pc, #100]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007110:	d105      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007118:	4b15      	ldr	r3, [pc, #84]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800711a:	637b      	str	r3, [r7, #52]	@ 0x34
 800711c:	e020      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800711e:	4b13      	ldr	r3, [pc, #76]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800712a:	d106      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007132:	d102      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007134:	4b0f      	ldr	r3, [pc, #60]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
 8007138:	e012      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800713a:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007146:	d106      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800714e:	d102      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007150:	4b09      	ldr	r3, [pc, #36]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
 8007154:	e004      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	637b      	str	r3, [r7, #52]	@ 0x34
 800715a:	e001      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007162:	4618      	mov	r0, r3
 8007164:	3738      	adds	r7, #56	@ 0x38
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	46020c00 	.word	0x46020c00
 8007170:	02dc6c00 	.word	0x02dc6c00
 8007174:	016e3600 	.word	0x016e3600
 8007178:	00f42400 	.word	0x00f42400

0800717c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007184:	4b47      	ldr	r3, [pc, #284]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a46      	ldr	r2, [pc, #280]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 800718a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800718e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007190:	f7fa fd8a 	bl	8001ca8 <HAL_GetTick>
 8007194:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007196:	e008      	b.n	80071aa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007198:	f7fa fd86 	bl	8001ca8 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e077      	b.n	800729a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071aa:	4b3e      	ldr	r3, [pc, #248]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80071b6:	4b3b      	ldr	r3, [pc, #236]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6811      	ldr	r1, [r2, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6852      	ldr	r2, [r2, #4]
 80071ca:	3a01      	subs	r2, #1
 80071cc:	0212      	lsls	r2, r2, #8
 80071ce:	430a      	orrs	r2, r1
 80071d0:	4934      	ldr	r1, [pc, #208]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80071d6:	4b33      	ldr	r3, [pc, #204]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 80071d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071da:	4b33      	ldr	r3, [pc, #204]	@ (80072a8 <RCCEx_PLL2_Config+0x12c>)
 80071dc:	4013      	ands	r3, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6892      	ldr	r2, [r2, #8]
 80071e2:	3a01      	subs	r2, #1
 80071e4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	68d2      	ldr	r2, [r2, #12]
 80071ec:	3a01      	subs	r2, #1
 80071ee:	0252      	lsls	r2, r2, #9
 80071f0:	b292      	uxth	r2, r2
 80071f2:	4311      	orrs	r1, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6912      	ldr	r2, [r2, #16]
 80071f8:	3a01      	subs	r2, #1
 80071fa:	0412      	lsls	r2, r2, #16
 80071fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007200:	4311      	orrs	r1, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6952      	ldr	r2, [r2, #20]
 8007206:	3a01      	subs	r2, #1
 8007208:	0612      	lsls	r2, r2, #24
 800720a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800720e:	430a      	orrs	r2, r1
 8007210:	4924      	ldr	r1, [pc, #144]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007212:	4313      	orrs	r3, r2
 8007214:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007216:	4b23      	ldr	r3, [pc, #140]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	f023 020c 	bic.w	r2, r3, #12
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	4920      	ldr	r1, [pc, #128]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007224:	4313      	orrs	r3, r2
 8007226:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007228:	4b1e      	ldr	r3, [pc, #120]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 800722a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	491c      	ldr	r1, [pc, #112]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007232:	4313      	orrs	r3, r2
 8007234:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007236:	4b1b      	ldr	r3, [pc, #108]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723a:	4a1a      	ldr	r2, [pc, #104]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 800723c:	f023 0310 	bic.w	r3, r3, #16
 8007240:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007242:	4b18      	ldr	r3, [pc, #96]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800724a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	69d2      	ldr	r2, [r2, #28]
 8007252:	00d2      	lsls	r2, r2, #3
 8007254:	4913      	ldr	r1, [pc, #76]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007256:	4313      	orrs	r3, r2
 8007258:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800725a:	4b12      	ldr	r3, [pc, #72]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 800725c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725e:	4a11      	ldr	r2, [pc, #68]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007260:	f043 0310 	orr.w	r3, r3, #16
 8007264:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007266:	4b0f      	ldr	r3, [pc, #60]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a0e      	ldr	r2, [pc, #56]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 800726c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007270:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007272:	f7fa fd19 	bl	8001ca8 <HAL_GetTick>
 8007276:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007278:	e008      	b.n	800728c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800727a:	f7fa fd15 	bl	8001ca8 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e006      	b.n	800729a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800728c:	4b05      	ldr	r3, [pc, #20]	@ (80072a4 <RCCEx_PLL2_Config+0x128>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007298:	2300      	movs	r3, #0

}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	46020c00 	.word	0x46020c00
 80072a8:	80800000 	.word	0x80800000

080072ac <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80072b4:	4b47      	ldr	r3, [pc, #284]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a46      	ldr	r2, [pc, #280]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 80072ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072c0:	f7fa fcf2 	bl	8001ca8 <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072c6:	e008      	b.n	80072da <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072c8:	f7fa fcee 	bl	8001ca8 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d901      	bls.n	80072da <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e077      	b.n	80073ca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072da:	4b3e      	ldr	r3, [pc, #248]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f0      	bne.n	80072c8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80072e6:	4b3b      	ldr	r3, [pc, #236]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6811      	ldr	r1, [r2, #0]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6852      	ldr	r2, [r2, #4]
 80072fa:	3a01      	subs	r2, #1
 80072fc:	0212      	lsls	r2, r2, #8
 80072fe:	430a      	orrs	r2, r1
 8007300:	4934      	ldr	r1, [pc, #208]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007302:	4313      	orrs	r3, r2
 8007304:	630b      	str	r3, [r1, #48]	@ 0x30
 8007306:	4b33      	ldr	r3, [pc, #204]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800730a:	4b33      	ldr	r3, [pc, #204]	@ (80073d8 <RCCEx_PLL3_Config+0x12c>)
 800730c:	4013      	ands	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6892      	ldr	r2, [r2, #8]
 8007312:	3a01      	subs	r2, #1
 8007314:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	68d2      	ldr	r2, [r2, #12]
 800731c:	3a01      	subs	r2, #1
 800731e:	0252      	lsls	r2, r2, #9
 8007320:	b292      	uxth	r2, r2
 8007322:	4311      	orrs	r1, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6912      	ldr	r2, [r2, #16]
 8007328:	3a01      	subs	r2, #1
 800732a:	0412      	lsls	r2, r2, #16
 800732c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007330:	4311      	orrs	r1, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6952      	ldr	r2, [r2, #20]
 8007336:	3a01      	subs	r2, #1
 8007338:	0612      	lsls	r2, r2, #24
 800733a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800733e:	430a      	orrs	r2, r1
 8007340:	4924      	ldr	r1, [pc, #144]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007342:	4313      	orrs	r3, r2
 8007344:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007346:	4b23      	ldr	r3, [pc, #140]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734a:	f023 020c 	bic.w	r2, r3, #12
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	4920      	ldr	r1, [pc, #128]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007354:	4313      	orrs	r3, r2
 8007356:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007358:	4b1e      	ldr	r3, [pc, #120]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 800735a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	491c      	ldr	r1, [pc, #112]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007362:	4313      	orrs	r3, r2
 8007364:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007366:	4b1b      	ldr	r3, [pc, #108]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	4a1a      	ldr	r2, [pc, #104]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 800736c:	f023 0310 	bic.w	r3, r3, #16
 8007370:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007372:	4b18      	ldr	r3, [pc, #96]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800737a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	69d2      	ldr	r2, [r2, #28]
 8007382:	00d2      	lsls	r2, r2, #3
 8007384:	4913      	ldr	r1, [pc, #76]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007386:	4313      	orrs	r3, r2
 8007388:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800738a:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 800738c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738e:	4a11      	ldr	r2, [pc, #68]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007390:	f043 0310 	orr.w	r3, r3, #16
 8007394:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007396:	4b0f      	ldr	r3, [pc, #60]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a0e      	ldr	r2, [pc, #56]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 800739c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073a0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073a2:	f7fa fc81 	bl	8001ca8 <HAL_GetTick>
 80073a6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073a8:	e008      	b.n	80073bc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073aa:	f7fa fc7d 	bl	8001ca8 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e006      	b.n	80073ca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073bc:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <RCCEx_PLL3_Config+0x128>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0f0      	beq.n	80073aa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	46020c00 	.word	0x46020c00
 80073d8:	80800000 	.word	0x80800000

080073dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e0fb      	b.n	80075e6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a7f      	ldr	r2, [pc, #508]	@ (80075f0 <HAL_SPI_Init+0x214>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <HAL_SPI_Init+0x26>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a7d      	ldr	r2, [pc, #500]	@ (80075f4 <HAL_SPI_Init+0x218>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	e000      	b.n	8007404 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007402:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a78      	ldr	r2, [pc, #480]	@ (80075f0 <HAL_SPI_Init+0x214>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <HAL_SPI_Init+0x42>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a76      	ldr	r2, [pc, #472]	@ (80075f4 <HAL_SPI_Init+0x218>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d105      	bne.n	800742a <HAL_SPI_Init+0x4e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b0f      	cmp	r3, #15
 8007424:	d901      	bls.n	800742a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e0dd      	b.n	80075e6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 f8cc 	bl	80085c8 <SPI_GetPacketSize>
 8007430:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a6e      	ldr	r2, [pc, #440]	@ (80075f0 <HAL_SPI_Init+0x214>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d004      	beq.n	8007446 <HAL_SPI_Init+0x6a>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a6c      	ldr	r2, [pc, #432]	@ (80075f4 <HAL_SPI_Init+0x218>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d102      	bne.n	800744c <HAL_SPI_Init+0x70>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d816      	bhi.n	800747a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007450:	4a69      	ldr	r2, [pc, #420]	@ (80075f8 <HAL_SPI_Init+0x21c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a68      	ldr	r2, [pc, #416]	@ (80075fc <HAL_SPI_Init+0x220>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_SPI_Init+0x98>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a66      	ldr	r2, [pc, #408]	@ (8007600 <HAL_SPI_Init+0x224>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_SPI_Init+0x98>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a65      	ldr	r2, [pc, #404]	@ (8007604 <HAL_SPI_Init+0x228>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d104      	bne.n	800747e <HAL_SPI_Init+0xa2>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b10      	cmp	r3, #16
 8007478:	d901      	bls.n	800747e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e0b3      	b.n	80075e6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7f9 feb0 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0201 	bic.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80074ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074c4:	d119      	bne.n	80074fa <HAL_SPI_Init+0x11e>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ce:	d103      	bne.n	80074d8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80074e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074e8:	d107      	bne.n	80074fa <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <HAL_SPI_Init+0x14a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b06      	cmp	r3, #6
 800750c:	d90b      	bls.n	8007526 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e007      	b.n	8007536 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	431a      	orrs	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007548:	ea42 0103 	orr.w	r1, r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800759c:	431a      	orrs	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075a2:	ea42 0103 	orr.w	r1, r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	46002000 	.word	0x46002000
 80075f4:	56002000 	.word	0x56002000
 80075f8:	40013000 	.word	0x40013000
 80075fc:	50013000 	.word	0x50013000
 8007600:	40003800 	.word	0x40003800
 8007604:	50003800 	.word	0x50003800

08007608 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	4613      	mov	r3, r2
 8007616:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3320      	adds	r3, #32
 800761e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a90      	ldr	r2, [pc, #576]	@ (8007868 <HAL_SPI_Transmit+0x260>)
 8007626:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007628:	f7fa fb3e 	bl	8001ca8 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b01      	cmp	r3, #1
 8007638:	d001      	beq.n	800763e <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800763a:	2302      	movs	r3, #2
 800763c:	e1f4      	b.n	8007a28 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_SPI_Transmit+0x42>
 8007644:	88fb      	ldrh	r3, [r7, #6]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e1ec      	b.n	8007a28 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_SPI_Transmit+0x54>
 8007658:	2302      	movs	r3, #2
 800765a:	e1e5      	b.n	8007a28 <HAL_SPI_Transmit+0x420>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2203      	movs	r2, #3
 8007668:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	88fa      	ldrh	r2, [r7, #6]
 800767e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	88fa      	ldrh	r2, [r7, #6]
 8007686:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80076b4:	d108      	bne.n	80076c8 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e009      	b.n	80076dc <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80076da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	0c1b      	lsrs	r3, r3, #16
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	88f9      	ldrh	r1, [r7, #6]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10c      	bne.n	8007728 <HAL_SPI_Transmit+0x120>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007716:	d107      	bne.n	8007728 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d95b      	bls.n	80077e8 <HAL_SPI_Transmit+0x1e0>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a4d      	ldr	r2, [pc, #308]	@ (800786c <HAL_SPI_Transmit+0x264>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d04f      	beq.n	80077da <HAL_SPI_Transmit+0x1d2>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a4c      	ldr	r2, [pc, #304]	@ (8007870 <HAL_SPI_Transmit+0x268>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d04a      	beq.n	80077da <HAL_SPI_Transmit+0x1d2>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a4a      	ldr	r2, [pc, #296]	@ (8007874 <HAL_SPI_Transmit+0x26c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d045      	beq.n	80077da <HAL_SPI_Transmit+0x1d2>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a49      	ldr	r2, [pc, #292]	@ (8007878 <HAL_SPI_Transmit+0x270>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d147      	bne.n	80077e8 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007758:	e03f      	b.n	80077da <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b02      	cmp	r3, #2
 8007766:	d114      	bne.n	8007792 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007778:	1d1a      	adds	r2, r3, #4
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007790:	e023      	b.n	80077da <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007792:	f7fa fa89 	bl	8001ca8 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d803      	bhi.n	80077aa <HAL_SPI_Transmit+0x1a2>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d102      	bne.n	80077b0 <HAL_SPI_Transmit+0x1a8>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d114      	bne.n	80077da <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fe3b 	bl	800842c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e126      	b.n	8007a28 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1b9      	bne.n	800775a <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80077e6:	e0f9      	b.n	80079dc <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	2b07      	cmp	r3, #7
 80077ee:	f240 80ee 	bls.w	80079ce <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80077f2:	e067      	b.n	80078c4 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d13c      	bne.n	800787c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	d918      	bls.n	8007840 <HAL_SPI_Transmit+0x238>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d014      	beq.n	8007840 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007826:	1d1a      	adds	r2, r3, #4
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b02      	subs	r3, #2
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800783e:	e041      	b.n	80078c4 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007844:	881a      	ldrh	r2, [r3, #0]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007866:	e02d      	b.n	80078c4 <HAL_SPI_Transmit+0x2bc>
 8007868:	46002000 	.word	0x46002000
 800786c:	40013000 	.word	0x40013000
 8007870:	50013000 	.word	0x50013000
 8007874:	40003800 	.word	0x40003800
 8007878:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800787c:	f7fa fa14 	bl	8001ca8 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	d803      	bhi.n	8007894 <HAL_SPI_Transmit+0x28c>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d102      	bne.n	800789a <HAL_SPI_Transmit+0x292>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d114      	bne.n	80078c4 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 fdc6 	bl	800842c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e0b1      	b.n	8007a28 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d191      	bne.n	80077f4 <HAL_SPI_Transmit+0x1ec>
 80078d0:	e084      	b.n	80079dc <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d152      	bne.n	8007986 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d918      	bls.n	800791e <HAL_SPI_Transmit+0x316>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	d914      	bls.n	800791e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007904:	1d1a      	adds	r2, r3, #4
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007910:	b29b      	uxth	r3, r3
 8007912:	3b04      	subs	r3, #4
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800791c:	e057      	b.n	80079ce <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b01      	cmp	r3, #1
 8007928:	d917      	bls.n	800795a <HAL_SPI_Transmit+0x352>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d013      	beq.n	800795a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007936:	881a      	ldrh	r2, [r3, #0]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007940:	1c9a      	adds	r2, r3, #2
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b02      	subs	r3, #2
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007958:	e039      	b.n	80079ce <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3320      	adds	r3, #32
 8007964:	7812      	ldrb	r2, [r2, #0]
 8007966:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007984:	e023      	b.n	80079ce <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007986:	f7fa f98f 	bl	8001ca8 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d803      	bhi.n	800799e <HAL_SPI_Transmit+0x396>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d102      	bne.n	80079a4 <HAL_SPI_Transmit+0x39c>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d114      	bne.n	80079ce <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fd41 	bl	800842c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e02c      	b.n	8007a28 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f47f af7b 	bne.w	80078d2 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	2108      	movs	r1, #8
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fdc0 	bl	800856c <SPI_WaitOnFlagUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f8:	f043 0220 	orr.w	r2, r3, #32
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fd12 	bl	800842c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007a26:	2300      	movs	r3, #0
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a91      	ldr	r2, [pc, #580]	@ (8007c88 <HAL_SPI_TransmitReceive_DMA+0x258>)
 8007a44:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d001      	beq.n	8007a56 <HAL_SPI_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8007a52:	2302      	movs	r3, #2
 8007a54:	e274      	b.n	8007f40 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007a62:	887b      	ldrh	r3, [r7, #2]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e269      	b.n	8007f40 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_SPI_TransmitReceive_DMA+0x4a>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e262      	b.n	8007f40 <HAL_SPI_TransmitReceive_DMA+0x510>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2205      	movs	r2, #5
 8007a86:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	887a      	ldrh	r2, [r7, #2]
 8007a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	887a      	ldrh	r2, [r7, #2]
 8007aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	887a      	ldrh	r2, [r7, #2]
 8007ab2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	887a      	ldrh	r2, [r7, #2]
 8007aba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007ad8:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ae8:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b0f      	cmp	r3, #15
 8007af0:	d920      	bls.n	8007b34 <HAL_SPI_TransmitReceive_DMA+0x104>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007af8:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8007afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007afe:	d105      	bne.n	8007b0c <HAL_SPI_TransmitReceive_DMA+0xdc>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b06:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d013      	beq.n	8007b34 <HAL_SPI_TransmitReceive_DMA+0x104>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 8007b10:	4a5e      	ldr	r2, [pc, #376]	@ (8007c8c <HAL_SPI_TransmitReceive_DMA+0x25c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01e      	beq.n	8007b54 <HAL_SPI_TransmitReceive_DMA+0x124>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a5d      	ldr	r2, [pc, #372]	@ (8007c90 <HAL_SPI_TransmitReceive_DMA+0x260>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d019      	beq.n	8007b54 <HAL_SPI_TransmitReceive_DMA+0x124>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a5b      	ldr	r2, [pc, #364]	@ (8007c94 <HAL_SPI_TransmitReceive_DMA+0x264>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d014      	beq.n	8007b54 <HAL_SPI_TransmitReceive_DMA+0x124>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a5a      	ldr	r2, [pc, #360]	@ (8007c98 <HAL_SPI_TransmitReceive_DMA+0x268>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00f      	beq.n	8007b54 <HAL_SPI_TransmitReceive_DMA+0x124>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007b38:	2b07      	cmp	r3, #7
 8007b3a:	d911      	bls.n	8007b60 <HAL_SPI_TransmitReceive_DMA+0x130>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b42:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <HAL_SPI_TransmitReceive_DMA+0x124>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b4e:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d105      	bne.n	8007b60 <HAL_SPI_TransmitReceive_DMA+0x130>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e1ef      	b.n	8007f40 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2b07      	cmp	r3, #7
 8007b66:	d842      	bhi.n	8007bee <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d109      	bne.n	8007b88 <HAL_SPI_TransmitReceive_DMA+0x158>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	105b      	asrs	r3, r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d109      	bne.n	8007ba8 <HAL_SPI_TransmitReceive_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3303      	adds	r3, #3
 8007b9e:	109b      	asrs	r3, r3, #2
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d109      	bne.n	8007bca <HAL_SPI_TransmitReceive_DMA+0x19a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	105b      	asrs	r3, r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd6:	d12f      	bne.n	8007c38 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3303      	adds	r3, #3
 8007be2:	109b      	asrs	r3, r3, #2
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007bec:	e024      	b.n	8007c38 <HAL_SPI_TransmitReceive_DMA+0x208>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	d820      	bhi.n	8007c38 <HAL_SPI_TransmitReceive_DMA+0x208>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d109      	bne.n	8007c16 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	105b      	asrs	r3, r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c22:	d109      	bne.n	8007c38 <HAL_SPI_TransmitReceive_DMA+0x208>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	105b      	asrs	r3, r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c3e:	4a17      	ldr	r2, [pc, #92]	@ (8007c9c <HAL_SPI_TransmitReceive_DMA+0x26c>)
 8007c40:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c48:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <HAL_SPI_TransmitReceive_DMA+0x270>)
 8007c4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c52:	4a14      	ldr	r2, [pc, #80]	@ (8007ca4 <HAL_SPI_TransmitReceive_DMA+0x274>)
 8007c54:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b07      	cmp	r3, #7
 8007c66:	d804      	bhi.n	8007c72 <HAL_SPI_TransmitReceive_DMA+0x242>
  {
    hspi->RxXferCount = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	887a      	ldrh	r2, [r7, #2]
 8007c6c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007c70:	e020      	b.n	8007cb4 <HAL_SPI_TransmitReceive_DMA+0x284>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d816      	bhi.n	8007ca8 <HAL_SPI_TransmitReceive_DMA+0x278>
  {
    hspi->RxXferCount = Size * 2U;
 8007c7a:	887b      	ldrh	r3, [r7, #2]
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007c86:	e015      	b.n	8007cb4 <HAL_SPI_TransmitReceive_DMA+0x284>
 8007c88:	46002000 	.word	0x46002000
 8007c8c:	40013000 	.word	0x40013000
 8007c90:	50013000 	.word	0x50013000
 8007c94:	40003800 	.word	0x40003800
 8007c98:	50003800 	.word	0x50003800
 8007c9c:	08008397 	.word	0x08008397
 8007ca0:	08008345 	.word	0x08008345
 8007ca4:	080083b3 	.word	0x080083b3
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 8007ca8:	887b      	ldrh	r3, [r7, #2]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d02d      	beq.n	8007d20 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d024      	beq.n	8007d1a <HAL_SPI_TransmitReceive_DMA+0x2ea>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fb f824 	bl	8002d5c <HAL_DMAEx_List_Start_IT>
 8007d14:	4603      	mov	r3, r0
 8007d16:	75fb      	strb	r3, [r7, #23]
 8007d18:	e014      	b.n	8007d44 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
    else
    {
      status = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	75fb      	strb	r3, [r7, #23]
 8007d1e:	e011      	b.n	8007d44 <HAL_SPI_TransmitReceive_DMA+0x314>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3330      	adds	r3, #48	@ 0x30
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d32:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007d3a:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007d3c:	f7fa faba 	bl	80022b4 <HAL_DMA_Start_IT>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d011      	beq.n	8007d6e <HAL_SPI_TransmitReceive_DMA+0x33e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d50:	f043 0210 	orr.w	r2, r3, #16
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e0e8      	b.n	8007f40 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d7c:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d84:	2200      	movs	r2, #0
 8007d86:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8e:	2200      	movs	r2, #0
 8007d90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d98:	2200      	movs	r2, #0
 8007d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da2:	4a69      	ldr	r2, [pc, #420]	@ (8007f48 <HAL_SPI_TransmitReceive_DMA+0x518>)
 8007da4:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	2b07      	cmp	r3, #7
 8007dac:	d804      	bhi.n	8007db8 <HAL_SPI_TransmitReceive_DMA+0x388>
  {
    hspi->TxXferCount = Size;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	887a      	ldrh	r2, [r7, #2]
 8007db2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007db6:	e010      	b.n	8007dda <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	2b0f      	cmp	r3, #15
 8007dbe:	d806      	bhi.n	8007dce <HAL_SPI_TransmitReceive_DMA+0x39e>
  {
    hspi->TxXferCount = Size * 2U;
 8007dc0:	887b      	ldrh	r3, [r7, #2]
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dcc:	e005      	b.n	8007dda <HAL_SPI_TransmitReceive_DMA+0x3aa>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8007dce:	887b      	ldrh	r3, [r7, #2]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d02d      	beq.n	8007e46 <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d024      	beq.n	8007e40 <HAL_SPI_TransmitReceive_DMA+0x410>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f103 0220 	add.w	r2, r3, #32
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fa ff91 	bl	8002d5c <HAL_DMAEx_List_Start_IT>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
 8007e3e:	e014      	b.n	8007e6a <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
    else
    {
      status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
 8007e44:	e011      	b.n	8007e6a <HAL_SPI_TransmitReceive_DMA+0x43a>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e50:	4619      	mov	r1, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3320      	adds	r3, #32
 8007e58:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e60:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007e62:	f7fa fa27 	bl	80022b4 <HAL_DMA_Start_IT>
 8007e66:	4603      	mov	r3, r0
 8007e68:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d017      	beq.n	8007ea0 <HAL_SPI_TransmitReceive_DMA+0x470>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fa fa7c 	bl	8002374 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e82:	f043 0210 	orr.w	r2, r3, #16
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e04f      	b.n	8007f40 <HAL_SPI_TransmitReceive_DMA+0x510>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea8:	2b81      	cmp	r3, #129	@ 0x81
 8007eaa:	d10e      	bne.n	8007eca <HAL_SPI_TransmitReceive_DMA+0x49a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb4:	2b81      	cmp	r3, #129	@ 0x81
 8007eb6:	d108      	bne.n	8007eca <HAL_SPI_TransmitReceive_DMA+0x49a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	041b      	lsls	r3, r3, #16
 8007ec6:	6053      	str	r3, [r2, #4]
 8007ec8:	e009      	b.n	8007ede <HAL_SPI_TransmitReceive_DMA+0x4ae>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	0c1b      	lsrs	r3, r3, #16
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	8879      	ldrh	r1, [r7, #2]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	6812      	ldr	r2, [r2, #0]
 8007eda:	430b      	orrs	r3, r1
 8007edc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007eec:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8007efc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0201 	orr.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10c      	bne.n	8007f36 <HAL_SPI_TransmitReceive_DMA+0x506>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f24:	d107      	bne.n	8007f36 <HAL_SPI_TransmitReceive_DMA+0x506>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f34:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	080083b3 	.word	0x080083b3

08007f4c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	@ 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007f64:	6a3a      	ldr	r2, [r7, #32]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007f7e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3330      	adds	r3, #48	@ 0x30
 8007f86:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d010      	beq.n	8007fb4 <HAL_SPI_IRQHandler+0x68>
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007faa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9bf 	bl	8008330 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007fb2:	e19a      	b.n	80082ea <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d113      	bne.n	8007fe6 <HAL_SPI_IRQHandler+0x9a>
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10e      	bne.n	8007fe6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
    handled = 1UL;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10f      	bne.n	8008010 <HAL_SPI_IRQHandler+0xc4>
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008000:	2b00      	cmp	r3, #0
 8008002:	d105      	bne.n	8008010 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
    handled = 1UL;
 800800c:	2301      	movs	r3, #1
 800800e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10f      	bne.n	800803a <HAL_SPI_IRQHandler+0xee>
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800802a:	2b00      	cmp	r3, #0
 800802c:	d105      	bne.n	800803a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
    handled = 1UL;
 8008036:	2301      	movs	r3, #1
 8008038:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 814f 	bne.w	80082e0 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 808b 	beq.w	8008164 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0208 	orr.w	r2, r2, #8
 800805c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	699a      	ldr	r2, [r3, #24]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0210 	orr.w	r2, r2, #16
 800806c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800807c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0208 	bic.w	r2, r2, #8
 800808c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d13d      	bne.n	8008118 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800809c:	e036      	b.n	800810c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b0f      	cmp	r3, #15
 80080a4:	d90b      	bls.n	80080be <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80080b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b6:	1d1a      	adds	r2, r3, #4
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 80080bc:	e01d      	b.n	80080fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2b07      	cmp	r3, #7
 80080c4:	d90b      	bls.n	80080de <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	8812      	ldrh	r2, [r2, #0]
 80080ce:	b292      	uxth	r2, r2
 80080d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080d6:	1c9a      	adds	r2, r3, #2
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	66da      	str	r2, [r3, #108]	@ 0x6c
 80080dc:	e00d      	b.n	80080fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	b2d2      	uxtb	r2, r2
 80080ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1c2      	bne.n	800809e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f987 	bl	800842c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7f8 ff17 	bl	8000f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008136:	e0d8      	b.n	80082ea <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008138:	7cfb      	ldrb	r3, [r7, #19]
 800813a:	2b05      	cmp	r3, #5
 800813c:	d103      	bne.n	8008146 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f8 fef2 	bl	8000f28 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008144:	e0ce      	b.n	80082e4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008146:	7cfb      	ldrb	r3, [r7, #19]
 8008148:	2b04      	cmp	r3, #4
 800814a:	d103      	bne.n	8008154 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8db 	bl	8008308 <HAL_SPI_RxCpltCallback>
    return;
 8008152:	e0c7      	b.n	80082e4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008154:	7cfb      	ldrb	r3, [r7, #19]
 8008156:	2b03      	cmp	r3, #3
 8008158:	f040 80c4 	bne.w	80082e4 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8c9 	bl	80082f4 <HAL_SPI_TxCpltCallback>
    return;
 8008162:	e0bf      	b.n	80082e4 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 80bd 	beq.w	80082ea <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00f      	beq.n	800819a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008180:	f043 0204 	orr.w	r2, r3, #4
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699a      	ldr	r2, [r3, #24]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008198:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00f      	beq.n	80081c4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081aa:	f043 0201 	orr.w	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00f      	beq.n	80081ee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081d4:	f043 0208 	orr.w	r2, r3, #8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f003 0320 	and.w	r3, r3, #32
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00f      	beq.n	8008218 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0220 	orr.w	r2, r2, #32
 8008216:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d062      	beq.n	80082e8 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800824c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008250:	d13e      	bne.n	80082d0 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008260:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008268:	2b00      	cmp	r3, #0
 800826a:	d015      	beq.n	8008298 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008272:	4a1f      	ldr	r2, [pc, #124]	@ (80082f0 <HAL_SPI_IRQHandler+0x3a4>)
 8008274:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827c:	4618      	mov	r0, r3
 800827e:	f7fa f8f5 	bl	800246c <HAL_DMA_Abort_IT>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800828e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d022      	beq.n	80082e8 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a8:	4a11      	ldr	r2, [pc, #68]	@ (80082f0 <HAL_SPI_IRQHandler+0x3a4>)
 80082aa:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fa f8da 	bl	800246c <HAL_DMA_Abort_IT>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d014      	beq.n	80082e8 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80082ce:	e00b      	b.n	80082e8 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7f8 fe43 	bl	8000f64 <HAL_SPI_ErrorCallback>
    return;
 80082de:	e003      	b.n	80082e8 <HAL_SPI_IRQHandler+0x39c>
    return;
 80082e0:	bf00      	nop
 80082e2:	e002      	b.n	80082ea <HAL_SPI_IRQHandler+0x39e>
    return;
 80082e4:	bf00      	nop
 80082e6:	e000      	b.n	80082ea <HAL_SPI_IRQHandler+0x39e>
    return;
 80082e8:	bf00      	nop
  }
}
 80082ea:	3728      	adds	r7, #40	@ 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	080083f9 	.word	0x080083f9

080082f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008350:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b07      	cmp	r3, #7
 800835c:	d017      	beq.n	800838e <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008366:	2b81      	cmp	r3, #129	@ 0x81
 8008368:	d109      	bne.n	800837e <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8008372:	2b81      	cmp	r3, #129	@ 0x81
 8008374:	d103      	bne.n	800837e <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7f8 fdd6 	bl	8000f28 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800837c:	e007      	b.n	800838e <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0208 	orr.w	r2, r2, #8
 800838c:	611a      	str	r2, [r3, #16]
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7ff ffb9 	bl	800831c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083be:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7fa f9dd 	bl	8002780 <HAL_DMA_GetError>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d011      	beq.n	80083f0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f82d 	bl	800842c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083d8:	f043 0210 	orr.w	r2, r3, #16
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7f8 fdba 	bl	8000f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008404:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7f8 fda0 	bl	8000f64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0208 	orr.w	r2, r2, #8
 800844a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699a      	ldr	r2, [r3, #24]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0210 	orr.w	r2, r2, #16
 800845a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0201 	bic.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800848e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b04      	cmp	r3, #4
 800849a:	d014      	beq.n	80084c6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0220 	orr.w	r2, r2, #32
 80084c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d014      	beq.n	80084fc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00f      	beq.n	80084fc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084e2:	f043 0204 	orr.w	r2, r3, #4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699a      	ldr	r2, [r3, #24]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00f      	beq.n	8008526 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800850c:	f043 0201 	orr.w	r2, r3, #1
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008524:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00f      	beq.n	8008550 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008536:	f043 0208 	orr.w	r2, r3, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800854e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800857c:	e010      	b.n	80085a0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800857e:	f7f9 fb93 	bl	8001ca8 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d803      	bhi.n	8008596 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d102      	bne.n	800859c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e00f      	b.n	80085c0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695a      	ldr	r2, [r3, #20]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4013      	ands	r3, r2
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	bf0c      	ite	eq
 80085b0:	2301      	moveq	r3, #1
 80085b2:	2300      	movne	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	461a      	mov	r2, r3
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d0df      	beq.n	800857e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3307      	adds	r3, #7
 80085e6:	08db      	lsrs	r3, r3, #3
 80085e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b01      	cmp	r3, #1
 8008612:	d12e      	bne.n	8008672 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800861a:	2b01      	cmp	r3, #1
 800861c:	d101      	bne.n	8008622 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800861e:	2302      	movs	r3, #2
 8008620:	e028      	b.n	8008674 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0201 	bic.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800864e:	ea42 0103 	orr.w	r1, r2, r3
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	e000      	b.n	8008674 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
  }
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e042      	b.n	8008718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7f8 fff3 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2224      	movs	r2, #36	@ 0x24
 80086ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0201 	bic.w	r2, r2, #1
 80086c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa68 	bl	8008ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f8c3 	bl	800885c <UART_SetConfig>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e01b      	b.n	8008718 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fae7 	bl	8008ce4 <UART_CheckIdleState>
 8008716:	4603      	mov	r3, r0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	@ 0x28
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	4613      	mov	r3, r2
 800872e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008736:	2b20      	cmp	r3, #32
 8008738:	f040 808b 	bne.w	8008852 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_UART_Transmit+0x28>
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e083      	b.n	8008854 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008756:	2b80      	cmp	r3, #128	@ 0x80
 8008758:	d107      	bne.n	800876a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008768:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2221      	movs	r2, #33	@ 0x21
 8008776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800877a:	f7f9 fa95 	bl	8001ca8 <HAL_GetTick>
 800877e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	88fa      	ldrh	r2, [r7, #6]
 8008784:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	88fa      	ldrh	r2, [r7, #6]
 800878c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008798:	d108      	bne.n	80087ac <HAL_UART_Transmit+0x8c>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e003      	b.n	80087b4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087b4:	e030      	b.n	8008818 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2200      	movs	r2, #0
 80087be:	2180      	movs	r1, #128	@ 0x80
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 fb39 	bl	8008e38 <UART_WaitOnFlagUntilTimeout>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e03d      	b.n	8008854 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10b      	bne.n	80087f6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	3302      	adds	r3, #2
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	e007      	b.n	8008806 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	3301      	adds	r3, #1
 8008804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800880c:	b29b      	uxth	r3, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	b29a      	uxth	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1c8      	bne.n	80087b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2200      	movs	r2, #0
 800882c:	2140      	movs	r1, #64	@ 0x40
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fb02 	bl	8008e38 <UART_WaitOnFlagUntilTimeout>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e006      	b.n	8008854 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008852:	2302      	movs	r3, #2
  }
}
 8008854:	4618      	mov	r0, r3
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800885c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008860:	b094      	sub	sp, #80	@ 0x50
 8008862:	af00      	add	r7, sp, #0
 8008864:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800886c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	4b7e      	ldr	r3, [pc, #504]	@ (8008a6c <UART_SetConfig+0x210>)
 8008872:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	431a      	orrs	r2, r3
 800887e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	431a      	orrs	r2, r3
 8008884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	4313      	orrs	r3, r2
 800888a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800888c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4977      	ldr	r1, [pc, #476]	@ (8008a70 <UART_SetConfig+0x214>)
 8008894:	4019      	ands	r1, r3
 8008896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800889c:	430b      	orrs	r3, r1
 800889e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ac:	68d9      	ldr	r1, [r3, #12]
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	ea40 0301 	orr.w	r3, r0, r1
 80088b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b6a      	ldr	r3, [pc, #424]	@ (8008a6c <UART_SetConfig+0x210>)
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d009      	beq.n	80088dc <UART_SetConfig+0x80>
 80088c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4b69      	ldr	r3, [pc, #420]	@ (8008a74 <UART_SetConfig+0x218>)
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d004      	beq.n	80088dc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d8:	4313      	orrs	r3, r2
 80088da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80088e6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f0:	430b      	orrs	r3, r1
 80088f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fa:	f023 000f 	bic.w	r0, r3, #15
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	ea40 0301 	orr.w	r3, r0, r1
 800890a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800890c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	4b59      	ldr	r3, [pc, #356]	@ (8008a78 <UART_SetConfig+0x21c>)
 8008912:	429a      	cmp	r2, r3
 8008914:	d102      	bne.n	800891c <UART_SetConfig+0xc0>
 8008916:	2301      	movs	r3, #1
 8008918:	64bb      	str	r3, [r7, #72]	@ 0x48
 800891a:	e029      	b.n	8008970 <UART_SetConfig+0x114>
 800891c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4b56      	ldr	r3, [pc, #344]	@ (8008a7c <UART_SetConfig+0x220>)
 8008922:	429a      	cmp	r2, r3
 8008924:	d102      	bne.n	800892c <UART_SetConfig+0xd0>
 8008926:	2302      	movs	r3, #2
 8008928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800892a:	e021      	b.n	8008970 <UART_SetConfig+0x114>
 800892c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	4b53      	ldr	r3, [pc, #332]	@ (8008a80 <UART_SetConfig+0x224>)
 8008932:	429a      	cmp	r2, r3
 8008934:	d102      	bne.n	800893c <UART_SetConfig+0xe0>
 8008936:	2304      	movs	r3, #4
 8008938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800893a:	e019      	b.n	8008970 <UART_SetConfig+0x114>
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	4b50      	ldr	r3, [pc, #320]	@ (8008a84 <UART_SetConfig+0x228>)
 8008942:	429a      	cmp	r2, r3
 8008944:	d102      	bne.n	800894c <UART_SetConfig+0xf0>
 8008946:	2308      	movs	r3, #8
 8008948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800894a:	e011      	b.n	8008970 <UART_SetConfig+0x114>
 800894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	4b4d      	ldr	r3, [pc, #308]	@ (8008a88 <UART_SetConfig+0x22c>)
 8008952:	429a      	cmp	r2, r3
 8008954:	d102      	bne.n	800895c <UART_SetConfig+0x100>
 8008956:	2310      	movs	r3, #16
 8008958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800895a:	e009      	b.n	8008970 <UART_SetConfig+0x114>
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	4b42      	ldr	r3, [pc, #264]	@ (8008a6c <UART_SetConfig+0x210>)
 8008962:	429a      	cmp	r2, r3
 8008964:	d102      	bne.n	800896c <UART_SetConfig+0x110>
 8008966:	2320      	movs	r3, #32
 8008968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800896a:	e001      	b.n	8008970 <UART_SetConfig+0x114>
 800896c:	2300      	movs	r3, #0
 800896e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	4b3d      	ldr	r3, [pc, #244]	@ (8008a6c <UART_SetConfig+0x210>)
 8008976:	429a      	cmp	r2, r3
 8008978:	d005      	beq.n	8008986 <UART_SetConfig+0x12a>
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a74 <UART_SetConfig+0x218>)
 8008980:	429a      	cmp	r2, r3
 8008982:	f040 8085 	bne.w	8008a90 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008988:	2200      	movs	r2, #0
 800898a:	623b      	str	r3, [r7, #32]
 800898c:	627a      	str	r2, [r7, #36]	@ 0x24
 800898e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008992:	f7fd fa11 	bl	8005db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008996:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80e8 	beq.w	8008b70 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a4:	4a39      	ldr	r2, [pc, #228]	@ (8008a8c <UART_SetConfig+0x230>)
 80089a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089aa:	461a      	mov	r2, r3
 80089ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4413      	add	r3, r2
 80089be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d305      	bcc.n	80089d0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d903      	bls.n	80089d8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80089d6:	e048      	b.n	8008a6a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089da:	2200      	movs	r2, #0
 80089dc:	61bb      	str	r3, [r7, #24]
 80089de:	61fa      	str	r2, [r7, #28]
 80089e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e4:	4a29      	ldr	r2, [pc, #164]	@ (8008a8c <UART_SetConfig+0x230>)
 80089e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2200      	movs	r2, #0
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	617a      	str	r2, [r7, #20]
 80089f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089fa:	f7f7 fc3d 	bl	8000278 <__aeabi_uldivmod>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4610      	mov	r0, r2
 8008a04:	4619      	mov	r1, r3
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	020b      	lsls	r3, r1, #8
 8008a10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a14:	0202      	lsls	r2, r0, #8
 8008a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a18:	6849      	ldr	r1, [r1, #4]
 8008a1a:	0849      	lsrs	r1, r1, #1
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4605      	mov	r5, r0
 8008a22:	eb12 0804 	adds.w	r8, r2, r4
 8008a26:	eb43 0905 	adc.w	r9, r3, r5
 8008a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	60fa      	str	r2, [r7, #12]
 8008a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f7 fc1c 	bl	8000278 <__aeabi_uldivmod>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4613      	mov	r3, r2
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a4e:	d308      	bcc.n	8008a62 <UART_SetConfig+0x206>
 8008a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a56:	d204      	bcs.n	8008a62 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a5e:	60da      	str	r2, [r3, #12]
 8008a60:	e003      	b.n	8008a6a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008a68:	e082      	b.n	8008b70 <UART_SetConfig+0x314>
 8008a6a:	e081      	b.n	8008b70 <UART_SetConfig+0x314>
 8008a6c:	46002400 	.word	0x46002400
 8008a70:	cfff69f3 	.word	0xcfff69f3
 8008a74:	56002400 	.word	0x56002400
 8008a78:	40013800 	.word	0x40013800
 8008a7c:	40004400 	.word	0x40004400
 8008a80:	40004800 	.word	0x40004800
 8008a84:	40004c00 	.word	0x40004c00
 8008a88:	40005000 	.word	0x40005000
 8008a8c:	08009ca4 	.word	0x08009ca4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a98:	d13c      	bne.n	8008b14 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	603b      	str	r3, [r7, #0]
 8008aa0:	607a      	str	r2, [r7, #4]
 8008aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aa6:	f7fd f987 	bl	8005db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008aaa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d05e      	beq.n	8008b70 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab6:	4a39      	ldr	r2, [pc, #228]	@ (8008b9c <UART_SetConfig+0x340>)
 8008ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac4:	005a      	lsls	r2, r3, #1
 8008ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	441a      	add	r2, r3
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	2b0f      	cmp	r3, #15
 8008adc:	d916      	bls.n	8008b0c <UART_SetConfig+0x2b0>
 8008ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae4:	d212      	bcs.n	8008b0c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f023 030f 	bic.w	r3, r3, #15
 8008aee:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af2:	085b      	lsrs	r3, r3, #1
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008afe:	4313      	orrs	r3, r2
 8008b00:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008b08:	60da      	str	r2, [r3, #12]
 8008b0a:	e031      	b.n	8008b70 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008b12:	e02d      	b.n	8008b70 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b16:	2200      	movs	r2, #0
 8008b18:	469a      	mov	sl, r3
 8008b1a:	4693      	mov	fp, r2
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	4659      	mov	r1, fp
 8008b20:	f7fd f94a 	bl	8005db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b24:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d021      	beq.n	8008b70 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	4a1a      	ldr	r2, [pc, #104]	@ (8008b9c <UART_SetConfig+0x340>)
 8008b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	441a      	add	r2, r3
 8008b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	d909      	bls.n	8008b6a <UART_SetConfig+0x30e>
 8008b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b5c:	d205      	bcs.n	8008b6a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60da      	str	r2, [r3, #12]
 8008b68:	e002      	b.n	8008b70 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b72:	2201      	movs	r2, #1
 8008b74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b82:	2200      	movs	r2, #0
 8008b84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b88:	2200      	movs	r2, #0
 8008b8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3750      	adds	r7, #80	@ 0x50
 8008b94:	46bd      	mov	sp, r7
 8008b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b9a:	bf00      	nop
 8008b9c:	08009ca4 	.word	0x08009ca4

08008ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	f003 0308 	and.w	r3, r3, #8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c34:	f003 0310 	and.w	r3, r3, #16
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00a      	beq.n	8008c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01a      	beq.n	8008cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c9e:	d10a      	bne.n	8008cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	605a      	str	r2, [r3, #4]
  }
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b098      	sub	sp, #96	@ 0x60
 8008ce8:	af02      	add	r7, sp, #8
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cf4:	f7f8 ffd8 	bl	8001ca8 <HAL_GetTick>
 8008cf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d12f      	bne.n	8008d68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d10:	2200      	movs	r2, #0
 8008d12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f88e 	bl	8008e38 <UART_WaitOnFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d022      	beq.n	8008d68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e6      	bne.n	8008d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2220      	movs	r2, #32
 8008d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e063      	b.n	8008e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0304 	and.w	r3, r3, #4
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d149      	bne.n	8008e0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f857 	bl	8008e38 <UART_WaitOnFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d03c      	beq.n	8008e0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db6:	e841 2300 	strex	r3, r2, [r1]
 8008dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e6      	bne.n	8008d90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008de2:	61fa      	str	r2, [r7, #28]
 8008de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	69b9      	ldr	r1, [r7, #24]
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	617b      	str	r3, [r7, #20]
   return(result);
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e5      	bne.n	8008dc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e012      	b.n	8008e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3758      	adds	r7, #88	@ 0x58
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	603b      	str	r3, [r7, #0]
 8008e44:	4613      	mov	r3, r2
 8008e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e48:	e04f      	b.n	8008eea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e50:	d04b      	beq.n	8008eea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e52:	f7f8 ff29 	bl	8001ca8 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d302      	bcc.n	8008e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e04e      	b.n	8008f0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d037      	beq.n	8008eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b80      	cmp	r3, #128	@ 0x80
 8008e7e:	d034      	beq.n	8008eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b40      	cmp	r3, #64	@ 0x40
 8008e84:	d031      	beq.n	8008eea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d110      	bne.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2208      	movs	r2, #8
 8008e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 f838 	bl	8008f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e029      	b.n	8008f0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ec4:	d111      	bne.n	8008eea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 f81e 	bl	8008f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e00f      	b.n	8008f0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69da      	ldr	r2, [r3, #28]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	bf0c      	ite	eq
 8008efa:	2301      	moveq	r3, #1
 8008efc:	2300      	movne	r3, #0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d0a0      	beq.n	8008e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b095      	sub	sp, #84	@ 0x54
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f22:	e853 3f00 	ldrex	r3, [r3]
 8008f26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e6      	bne.n	8008f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3308      	adds	r3, #8
 8008f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f62:	f023 0301 	bic.w	r3, r3, #1
 8008f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e3      	bne.n	8008f4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d118      	bne.n	8008fbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f023 0310 	bic.w	r3, r3, #16
 8008fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008faa:	61bb      	str	r3, [r7, #24]
 8008fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6979      	ldr	r1, [r7, #20]
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e6      	bne.n	8008f8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fd2:	bf00      	nop
 8008fd4:	3754      	adds	r7, #84	@ 0x54
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e027      	b.n	8009044 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2224      	movs	r2, #36	@ 0x24
 8009000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0201 	bic.w	r2, r2, #1
 800901a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009022:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009064:	2302      	movs	r3, #2
 8009066:	e02d      	b.n	80090c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2224      	movs	r2, #36	@ 0x24
 8009074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0201 	bic.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f84f 	bl	8009148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d101      	bne.n	80090e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090e0:	2302      	movs	r3, #2
 80090e2:	e02d      	b.n	8009140 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2224      	movs	r2, #36	@ 0x24
 80090f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 0201 	bic.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	430a      	orrs	r2, r1
 800911e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f811 	bl	8009148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2220      	movs	r2, #32
 8009132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009154:	2b00      	cmp	r3, #0
 8009156:	d108      	bne.n	800916a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009168:	e031      	b.n	80091ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800916a:	2308      	movs	r3, #8
 800916c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800916e:	2308      	movs	r3, #8
 8009170:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	0e5b      	lsrs	r3, r3, #25
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	0f5b      	lsrs	r3, r3, #29
 800918a:	b2db      	uxtb	r3, r3
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	7b3a      	ldrb	r2, [r7, #12]
 8009196:	4911      	ldr	r1, [pc, #68]	@ (80091dc <UARTEx_SetNbDataToProcess+0x94>)
 8009198:	5c8a      	ldrb	r2, [r1, r2]
 800919a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800919e:	7b3a      	ldrb	r2, [r7, #12]
 80091a0:	490f      	ldr	r1, [pc, #60]	@ (80091e0 <UARTEx_SetNbDataToProcess+0x98>)
 80091a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	7b7a      	ldrb	r2, [r7, #13]
 80091b4:	4909      	ldr	r1, [pc, #36]	@ (80091dc <UARTEx_SetNbDataToProcess+0x94>)
 80091b6:	5c8a      	ldrb	r2, [r1, r2]
 80091b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091bc:	7b7a      	ldrb	r2, [r7, #13]
 80091be:	4908      	ldr	r1, [pc, #32]	@ (80091e0 <UARTEx_SetNbDataToProcess+0x98>)
 80091c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	08009cbc 	.word	0x08009cbc
 80091e0:	08009cc4 	.word	0x08009cc4

080091e4 <sniprintf>:
 80091e4:	b40c      	push	{r2, r3}
 80091e6:	4b19      	ldr	r3, [pc, #100]	@ (800924c <sniprintf+0x68>)
 80091e8:	b530      	push	{r4, r5, lr}
 80091ea:	1e0c      	subs	r4, r1, #0
 80091ec:	b09d      	sub	sp, #116	@ 0x74
 80091ee:	681d      	ldr	r5, [r3, #0]
 80091f0:	da08      	bge.n	8009204 <sniprintf+0x20>
 80091f2:	238b      	movs	r3, #139	@ 0x8b
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	b01d      	add	sp, #116	@ 0x74
 80091fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009200:	b002      	add	sp, #8
 8009202:	4770      	bx	lr
 8009204:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009208:	9002      	str	r0, [sp, #8]
 800920a:	9006      	str	r0, [sp, #24]
 800920c:	a902      	add	r1, sp, #8
 800920e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009212:	f04f 0300 	mov.w	r3, #0
 8009216:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009218:	4628      	mov	r0, r5
 800921a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800921c:	bf14      	ite	ne
 800921e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009222:	4623      	moveq	r3, r4
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800922c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009230:	ab21      	add	r3, sp, #132	@ 0x84
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	f000 f9a2 	bl	800957c <_svfiprintf_r>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	bfbc      	itt	lt
 800923c:	238b      	movlt	r3, #139	@ 0x8b
 800923e:	602b      	strlt	r3, [r5, #0]
 8009240:	2c00      	cmp	r4, #0
 8009242:	d0da      	beq.n	80091fa <sniprintf+0x16>
 8009244:	9b02      	ldr	r3, [sp, #8]
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	e7d6      	b.n	80091fa <sniprintf+0x16>
 800924c:	2000000c 	.word	0x2000000c

08009250 <memset>:
 8009250:	4402      	add	r2, r0
 8009252:	4603      	mov	r3, r0
 8009254:	4293      	cmp	r3, r2
 8009256:	d100      	bne.n	800925a <memset+0xa>
 8009258:	4770      	bx	lr
 800925a:	f803 1b01 	strb.w	r1, [r3], #1
 800925e:	e7f9      	b.n	8009254 <memset+0x4>

08009260 <__errno>:
 8009260:	4b01      	ldr	r3, [pc, #4]	@ (8009268 <__errno+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	2000000c 	.word	0x2000000c

0800926c <__libc_init_array>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4d0d      	ldr	r5, [pc, #52]	@ (80092a4 <__libc_init_array+0x38>)
 8009270:	2600      	movs	r6, #0
 8009272:	4c0d      	ldr	r4, [pc, #52]	@ (80092a8 <__libc_init_array+0x3c>)
 8009274:	1b64      	subs	r4, r4, r5
 8009276:	10a4      	asrs	r4, r4, #2
 8009278:	42a6      	cmp	r6, r4
 800927a:	d109      	bne.n	8009290 <__libc_init_array+0x24>
 800927c:	4d0b      	ldr	r5, [pc, #44]	@ (80092ac <__libc_init_array+0x40>)
 800927e:	2600      	movs	r6, #0
 8009280:	4c0b      	ldr	r4, [pc, #44]	@ (80092b0 <__libc_init_array+0x44>)
 8009282:	f000 fc75 	bl	8009b70 <_init>
 8009286:	1b64      	subs	r4, r4, r5
 8009288:	10a4      	asrs	r4, r4, #2
 800928a:	42a6      	cmp	r6, r4
 800928c:	d105      	bne.n	800929a <__libc_init_array+0x2e>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	f855 3b04 	ldr.w	r3, [r5], #4
 8009294:	3601      	adds	r6, #1
 8009296:	4798      	blx	r3
 8009298:	e7ee      	b.n	8009278 <__libc_init_array+0xc>
 800929a:	f855 3b04 	ldr.w	r3, [r5], #4
 800929e:	3601      	adds	r6, #1
 80092a0:	4798      	blx	r3
 80092a2:	e7f2      	b.n	800928a <__libc_init_array+0x1e>
 80092a4:	08009d08 	.word	0x08009d08
 80092a8:	08009d08 	.word	0x08009d08
 80092ac:	08009d08 	.word	0x08009d08
 80092b0:	08009d0c 	.word	0x08009d0c

080092b4 <__retarget_lock_acquire_recursive>:
 80092b4:	4770      	bx	lr

080092b6 <__retarget_lock_release_recursive>:
 80092b6:	4770      	bx	lr

080092b8 <memcpy>:
 80092b8:	440a      	add	r2, r1
 80092ba:	1e43      	subs	r3, r0, #1
 80092bc:	4291      	cmp	r1, r2
 80092be:	d100      	bne.n	80092c2 <memcpy+0xa>
 80092c0:	4770      	bx	lr
 80092c2:	b510      	push	{r4, lr}
 80092c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c8:	4291      	cmp	r1, r2
 80092ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ce:	d1f9      	bne.n	80092c4 <memcpy+0xc>
 80092d0:	bd10      	pop	{r4, pc}
	...

080092d4 <_free_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4605      	mov	r5, r0
 80092d8:	2900      	cmp	r1, #0
 80092da:	d041      	beq.n	8009360 <_free_r+0x8c>
 80092dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e0:	1f0c      	subs	r4, r1, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfb8      	it	lt
 80092e6:	18e4      	addlt	r4, r4, r3
 80092e8:	f000 f8e0 	bl	80094ac <__malloc_lock>
 80092ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009364 <_free_r+0x90>)
 80092ee:	6813      	ldr	r3, [r2, #0]
 80092f0:	b933      	cbnz	r3, 8009300 <_free_r+0x2c>
 80092f2:	6063      	str	r3, [r4, #4]
 80092f4:	6014      	str	r4, [r2, #0]
 80092f6:	4628      	mov	r0, r5
 80092f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fc:	f000 b8dc 	b.w	80094b8 <__malloc_unlock>
 8009300:	42a3      	cmp	r3, r4
 8009302:	d908      	bls.n	8009316 <_free_r+0x42>
 8009304:	6820      	ldr	r0, [r4, #0]
 8009306:	1821      	adds	r1, r4, r0
 8009308:	428b      	cmp	r3, r1
 800930a:	bf01      	itttt	eq
 800930c:	6819      	ldreq	r1, [r3, #0]
 800930e:	685b      	ldreq	r3, [r3, #4]
 8009310:	1809      	addeq	r1, r1, r0
 8009312:	6021      	streq	r1, [r4, #0]
 8009314:	e7ed      	b.n	80092f2 <_free_r+0x1e>
 8009316:	461a      	mov	r2, r3
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	b10b      	cbz	r3, 8009320 <_free_r+0x4c>
 800931c:	42a3      	cmp	r3, r4
 800931e:	d9fa      	bls.n	8009316 <_free_r+0x42>
 8009320:	6811      	ldr	r1, [r2, #0]
 8009322:	1850      	adds	r0, r2, r1
 8009324:	42a0      	cmp	r0, r4
 8009326:	d10b      	bne.n	8009340 <_free_r+0x6c>
 8009328:	6820      	ldr	r0, [r4, #0]
 800932a:	4401      	add	r1, r0
 800932c:	1850      	adds	r0, r2, r1
 800932e:	6011      	str	r1, [r2, #0]
 8009330:	4283      	cmp	r3, r0
 8009332:	d1e0      	bne.n	80092f6 <_free_r+0x22>
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	4408      	add	r0, r1
 800933a:	6053      	str	r3, [r2, #4]
 800933c:	6010      	str	r0, [r2, #0]
 800933e:	e7da      	b.n	80092f6 <_free_r+0x22>
 8009340:	d902      	bls.n	8009348 <_free_r+0x74>
 8009342:	230c      	movs	r3, #12
 8009344:	602b      	str	r3, [r5, #0]
 8009346:	e7d6      	b.n	80092f6 <_free_r+0x22>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	1821      	adds	r1, r4, r0
 800934c:	428b      	cmp	r3, r1
 800934e:	bf02      	ittt	eq
 8009350:	6819      	ldreq	r1, [r3, #0]
 8009352:	685b      	ldreq	r3, [r3, #4]
 8009354:	1809      	addeq	r1, r1, r0
 8009356:	6063      	str	r3, [r4, #4]
 8009358:	bf08      	it	eq
 800935a:	6021      	streq	r1, [r4, #0]
 800935c:	6054      	str	r4, [r2, #4]
 800935e:	e7ca      	b.n	80092f6 <_free_r+0x22>
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	2000060c 	.word	0x2000060c

08009368 <sbrk_aligned>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	4e0f      	ldr	r6, [pc, #60]	@ (80093a8 <sbrk_aligned+0x40>)
 800936c:	460c      	mov	r4, r1
 800936e:	4605      	mov	r5, r0
 8009370:	6831      	ldr	r1, [r6, #0]
 8009372:	b911      	cbnz	r1, 800937a <sbrk_aligned+0x12>
 8009374:	f000 fba8 	bl	8009ac8 <_sbrk_r>
 8009378:	6030      	str	r0, [r6, #0]
 800937a:	4621      	mov	r1, r4
 800937c:	4628      	mov	r0, r5
 800937e:	f000 fba3 	bl	8009ac8 <_sbrk_r>
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	d103      	bne.n	800938e <sbrk_aligned+0x26>
 8009386:	f04f 34ff 	mov.w	r4, #4294967295
 800938a:	4620      	mov	r0, r4
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	1cc4      	adds	r4, r0, #3
 8009390:	f024 0403 	bic.w	r4, r4, #3
 8009394:	42a0      	cmp	r0, r4
 8009396:	d0f8      	beq.n	800938a <sbrk_aligned+0x22>
 8009398:	1a21      	subs	r1, r4, r0
 800939a:	4628      	mov	r0, r5
 800939c:	f000 fb94 	bl	8009ac8 <_sbrk_r>
 80093a0:	3001      	adds	r0, #1
 80093a2:	d1f2      	bne.n	800938a <sbrk_aligned+0x22>
 80093a4:	e7ef      	b.n	8009386 <sbrk_aligned+0x1e>
 80093a6:	bf00      	nop
 80093a8:	20000608 	.word	0x20000608

080093ac <_malloc_r>:
 80093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	1ccd      	adds	r5, r1, #3
 80093b2:	4606      	mov	r6, r0
 80093b4:	f025 0503 	bic.w	r5, r5, #3
 80093b8:	3508      	adds	r5, #8
 80093ba:	2d0c      	cmp	r5, #12
 80093bc:	bf38      	it	cc
 80093be:	250c      	movcc	r5, #12
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	db01      	blt.n	80093c8 <_malloc_r+0x1c>
 80093c4:	42a9      	cmp	r1, r5
 80093c6:	d904      	bls.n	80093d2 <_malloc_r+0x26>
 80093c8:	230c      	movs	r3, #12
 80093ca:	6033      	str	r3, [r6, #0]
 80093cc:	2000      	movs	r0, #0
 80093ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094a8 <_malloc_r+0xfc>
 80093d6:	f000 f869 	bl	80094ac <__malloc_lock>
 80093da:	f8d8 3000 	ldr.w	r3, [r8]
 80093de:	461c      	mov	r4, r3
 80093e0:	bb44      	cbnz	r4, 8009434 <_malloc_r+0x88>
 80093e2:	4629      	mov	r1, r5
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff ffbf 	bl	8009368 <sbrk_aligned>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	4604      	mov	r4, r0
 80093ee:	d158      	bne.n	80094a2 <_malloc_r+0xf6>
 80093f0:	f8d8 4000 	ldr.w	r4, [r8]
 80093f4:	4627      	mov	r7, r4
 80093f6:	2f00      	cmp	r7, #0
 80093f8:	d143      	bne.n	8009482 <_malloc_r+0xd6>
 80093fa:	2c00      	cmp	r4, #0
 80093fc:	d04b      	beq.n	8009496 <_malloc_r+0xea>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	4639      	mov	r1, r7
 8009402:	4630      	mov	r0, r6
 8009404:	eb04 0903 	add.w	r9, r4, r3
 8009408:	f000 fb5e 	bl	8009ac8 <_sbrk_r>
 800940c:	4581      	cmp	r9, r0
 800940e:	d142      	bne.n	8009496 <_malloc_r+0xea>
 8009410:	6821      	ldr	r1, [r4, #0]
 8009412:	4630      	mov	r0, r6
 8009414:	1a6d      	subs	r5, r5, r1
 8009416:	4629      	mov	r1, r5
 8009418:	f7ff ffa6 	bl	8009368 <sbrk_aligned>
 800941c:	3001      	adds	r0, #1
 800941e:	d03a      	beq.n	8009496 <_malloc_r+0xea>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	442b      	add	r3, r5
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	f8d8 3000 	ldr.w	r3, [r8]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	bb62      	cbnz	r2, 8009488 <_malloc_r+0xdc>
 800942e:	f8c8 7000 	str.w	r7, [r8]
 8009432:	e00f      	b.n	8009454 <_malloc_r+0xa8>
 8009434:	6822      	ldr	r2, [r4, #0]
 8009436:	1b52      	subs	r2, r2, r5
 8009438:	d420      	bmi.n	800947c <_malloc_r+0xd0>
 800943a:	2a0b      	cmp	r2, #11
 800943c:	d917      	bls.n	800946e <_malloc_r+0xc2>
 800943e:	1961      	adds	r1, r4, r5
 8009440:	42a3      	cmp	r3, r4
 8009442:	6025      	str	r5, [r4, #0]
 8009444:	bf18      	it	ne
 8009446:	6059      	strne	r1, [r3, #4]
 8009448:	6863      	ldr	r3, [r4, #4]
 800944a:	bf08      	it	eq
 800944c:	f8c8 1000 	streq.w	r1, [r8]
 8009450:	5162      	str	r2, [r4, r5]
 8009452:	604b      	str	r3, [r1, #4]
 8009454:	4630      	mov	r0, r6
 8009456:	f000 f82f 	bl	80094b8 <__malloc_unlock>
 800945a:	f104 000b 	add.w	r0, r4, #11
 800945e:	1d23      	adds	r3, r4, #4
 8009460:	f020 0007 	bic.w	r0, r0, #7
 8009464:	1ac2      	subs	r2, r0, r3
 8009466:	bf1c      	itt	ne
 8009468:	1a1b      	subne	r3, r3, r0
 800946a:	50a3      	strne	r3, [r4, r2]
 800946c:	e7af      	b.n	80093ce <_malloc_r+0x22>
 800946e:	6862      	ldr	r2, [r4, #4]
 8009470:	42a3      	cmp	r3, r4
 8009472:	bf0c      	ite	eq
 8009474:	f8c8 2000 	streq.w	r2, [r8]
 8009478:	605a      	strne	r2, [r3, #4]
 800947a:	e7eb      	b.n	8009454 <_malloc_r+0xa8>
 800947c:	4623      	mov	r3, r4
 800947e:	6864      	ldr	r4, [r4, #4]
 8009480:	e7ae      	b.n	80093e0 <_malloc_r+0x34>
 8009482:	463c      	mov	r4, r7
 8009484:	687f      	ldr	r7, [r7, #4]
 8009486:	e7b6      	b.n	80093f6 <_malloc_r+0x4a>
 8009488:	461a      	mov	r2, r3
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	42a3      	cmp	r3, r4
 800948e:	d1fb      	bne.n	8009488 <_malloc_r+0xdc>
 8009490:	2300      	movs	r3, #0
 8009492:	6053      	str	r3, [r2, #4]
 8009494:	e7de      	b.n	8009454 <_malloc_r+0xa8>
 8009496:	230c      	movs	r3, #12
 8009498:	4630      	mov	r0, r6
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f000 f80c 	bl	80094b8 <__malloc_unlock>
 80094a0:	e794      	b.n	80093cc <_malloc_r+0x20>
 80094a2:	6005      	str	r5, [r0, #0]
 80094a4:	e7d6      	b.n	8009454 <_malloc_r+0xa8>
 80094a6:	bf00      	nop
 80094a8:	2000060c 	.word	0x2000060c

080094ac <__malloc_lock>:
 80094ac:	4801      	ldr	r0, [pc, #4]	@ (80094b4 <__malloc_lock+0x8>)
 80094ae:	f7ff bf01 	b.w	80092b4 <__retarget_lock_acquire_recursive>
 80094b2:	bf00      	nop
 80094b4:	20000604 	.word	0x20000604

080094b8 <__malloc_unlock>:
 80094b8:	4801      	ldr	r0, [pc, #4]	@ (80094c0 <__malloc_unlock+0x8>)
 80094ba:	f7ff befc 	b.w	80092b6 <__retarget_lock_release_recursive>
 80094be:	bf00      	nop
 80094c0:	20000604 	.word	0x20000604

080094c4 <__ssputs_r>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	461f      	mov	r7, r3
 80094ca:	688e      	ldr	r6, [r1, #8]
 80094cc:	4682      	mov	sl, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	42be      	cmp	r6, r7
 80094d2:	4690      	mov	r8, r2
 80094d4:	680b      	ldr	r3, [r1, #0]
 80094d6:	d82d      	bhi.n	8009534 <__ssputs_r+0x70>
 80094d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094e0:	d026      	beq.n	8009530 <__ssputs_r+0x6c>
 80094e2:	6965      	ldr	r5, [r4, #20]
 80094e4:	6909      	ldr	r1, [r1, #16]
 80094e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094ea:	eba3 0901 	sub.w	r9, r3, r1
 80094ee:	1c7b      	adds	r3, r7, #1
 80094f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094f4:	444b      	add	r3, r9
 80094f6:	106d      	asrs	r5, r5, #1
 80094f8:	429d      	cmp	r5, r3
 80094fa:	bf38      	it	cc
 80094fc:	461d      	movcc	r5, r3
 80094fe:	0553      	lsls	r3, r2, #21
 8009500:	d527      	bpl.n	8009552 <__ssputs_r+0x8e>
 8009502:	4629      	mov	r1, r5
 8009504:	f7ff ff52 	bl	80093ac <_malloc_r>
 8009508:	4606      	mov	r6, r0
 800950a:	b360      	cbz	r0, 8009566 <__ssputs_r+0xa2>
 800950c:	464a      	mov	r2, r9
 800950e:	6921      	ldr	r1, [r4, #16]
 8009510:	f7ff fed2 	bl	80092b8 <memcpy>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800951a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	6126      	str	r6, [r4, #16]
 8009522:	444e      	add	r6, r9
 8009524:	6165      	str	r5, [r4, #20]
 8009526:	eba5 0509 	sub.w	r5, r5, r9
 800952a:	6026      	str	r6, [r4, #0]
 800952c:	463e      	mov	r6, r7
 800952e:	60a5      	str	r5, [r4, #8]
 8009530:	42be      	cmp	r6, r7
 8009532:	d900      	bls.n	8009536 <__ssputs_r+0x72>
 8009534:	463e      	mov	r6, r7
 8009536:	4632      	mov	r2, r6
 8009538:	4641      	mov	r1, r8
 800953a:	6820      	ldr	r0, [r4, #0]
 800953c:	f000 faaa 	bl	8009a94 <memmove>
 8009540:	68a3      	ldr	r3, [r4, #8]
 8009542:	2000      	movs	r0, #0
 8009544:	1b9b      	subs	r3, r3, r6
 8009546:	60a3      	str	r3, [r4, #8]
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	4433      	add	r3, r6
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	462a      	mov	r2, r5
 8009554:	f000 fad6 	bl	8009b04 <_realloc_r>
 8009558:	4606      	mov	r6, r0
 800955a:	2800      	cmp	r0, #0
 800955c:	d1e0      	bne.n	8009520 <__ssputs_r+0x5c>
 800955e:	6921      	ldr	r1, [r4, #16]
 8009560:	4650      	mov	r0, sl
 8009562:	f7ff feb7 	bl	80092d4 <_free_r>
 8009566:	230c      	movs	r3, #12
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	f8ca 3000 	str.w	r3, [sl]
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	e7e9      	b.n	800954e <__ssputs_r+0x8a>
	...

0800957c <_svfiprintf_r>:
 800957c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009580:	4698      	mov	r8, r3
 8009582:	898b      	ldrh	r3, [r1, #12]
 8009584:	b09d      	sub	sp, #116	@ 0x74
 8009586:	4607      	mov	r7, r0
 8009588:	061b      	lsls	r3, r3, #24
 800958a:	460d      	mov	r5, r1
 800958c:	4614      	mov	r4, r2
 800958e:	d510      	bpl.n	80095b2 <_svfiprintf_r+0x36>
 8009590:	690b      	ldr	r3, [r1, #16]
 8009592:	b973      	cbnz	r3, 80095b2 <_svfiprintf_r+0x36>
 8009594:	2140      	movs	r1, #64	@ 0x40
 8009596:	f7ff ff09 	bl	80093ac <_malloc_r>
 800959a:	6028      	str	r0, [r5, #0]
 800959c:	6128      	str	r0, [r5, #16]
 800959e:	b930      	cbnz	r0, 80095ae <_svfiprintf_r+0x32>
 80095a0:	230c      	movs	r3, #12
 80095a2:	603b      	str	r3, [r7, #0]
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	b01d      	add	sp, #116	@ 0x74
 80095aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ae:	2340      	movs	r3, #64	@ 0x40
 80095b0:	616b      	str	r3, [r5, #20]
 80095b2:	2300      	movs	r3, #0
 80095b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b8:	f04f 0901 	mov.w	r9, #1
 80095bc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009760 <_svfiprintf_r+0x1e4>
 80095c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c2:	2320      	movs	r3, #32
 80095c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095c8:	2330      	movs	r3, #48	@ 0x30
 80095ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ce:	4623      	mov	r3, r4
 80095d0:	469a      	mov	sl, r3
 80095d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d6:	b10a      	cbz	r2, 80095dc <_svfiprintf_r+0x60>
 80095d8:	2a25      	cmp	r2, #37	@ 0x25
 80095da:	d1f9      	bne.n	80095d0 <_svfiprintf_r+0x54>
 80095dc:	ebba 0b04 	subs.w	fp, sl, r4
 80095e0:	d00b      	beq.n	80095fa <_svfiprintf_r+0x7e>
 80095e2:	465b      	mov	r3, fp
 80095e4:	4622      	mov	r2, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7ff ff6b 	bl	80094c4 <__ssputs_r>
 80095ee:	3001      	adds	r0, #1
 80095f0:	f000 80a7 	beq.w	8009742 <_svfiprintf_r+0x1c6>
 80095f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f6:	445a      	add	r2, fp
 80095f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80095fa:	f89a 3000 	ldrb.w	r3, [sl]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 809f 	beq.w	8009742 <_svfiprintf_r+0x1c6>
 8009604:	2300      	movs	r3, #0
 8009606:	f04f 32ff 	mov.w	r2, #4294967295
 800960a:	f10a 0a01 	add.w	sl, sl, #1
 800960e:	9304      	str	r3, [sp, #16]
 8009610:	9307      	str	r3, [sp, #28]
 8009612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009616:	931a      	str	r3, [sp, #104]	@ 0x68
 8009618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800961c:	4654      	mov	r4, sl
 800961e:	2205      	movs	r2, #5
 8009620:	484f      	ldr	r0, [pc, #316]	@ (8009760 <_svfiprintf_r+0x1e4>)
 8009622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009626:	f000 fa5f 	bl	8009ae8 <memchr>
 800962a:	9a04      	ldr	r2, [sp, #16]
 800962c:	b9d8      	cbnz	r0, 8009666 <_svfiprintf_r+0xea>
 800962e:	06d0      	lsls	r0, r2, #27
 8009630:	bf44      	itt	mi
 8009632:	2320      	movmi	r3, #32
 8009634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009638:	0711      	lsls	r1, r2, #28
 800963a:	bf44      	itt	mi
 800963c:	232b      	movmi	r3, #43	@ 0x2b
 800963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009642:	f89a 3000 	ldrb.w	r3, [sl]
 8009646:	2b2a      	cmp	r3, #42	@ 0x2a
 8009648:	d015      	beq.n	8009676 <_svfiprintf_r+0xfa>
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	4654      	mov	r4, sl
 800964e:	2000      	movs	r0, #0
 8009650:	f04f 0c0a 	mov.w	ip, #10
 8009654:	4621      	mov	r1, r4
 8009656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965a:	3b30      	subs	r3, #48	@ 0x30
 800965c:	2b09      	cmp	r3, #9
 800965e:	d94b      	bls.n	80096f8 <_svfiprintf_r+0x17c>
 8009660:	b1b0      	cbz	r0, 8009690 <_svfiprintf_r+0x114>
 8009662:	9207      	str	r2, [sp, #28]
 8009664:	e014      	b.n	8009690 <_svfiprintf_r+0x114>
 8009666:	eba0 0308 	sub.w	r3, r0, r8
 800966a:	46a2      	mov	sl, r4
 800966c:	fa09 f303 	lsl.w	r3, r9, r3
 8009670:	4313      	orrs	r3, r2
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	e7d2      	b.n	800961c <_svfiprintf_r+0xa0>
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	1d19      	adds	r1, r3, #4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	9103      	str	r1, [sp, #12]
 8009680:	bfbb      	ittet	lt
 8009682:	425b      	neglt	r3, r3
 8009684:	f042 0202 	orrlt.w	r2, r2, #2
 8009688:	9307      	strge	r3, [sp, #28]
 800968a:	9307      	strlt	r3, [sp, #28]
 800968c:	bfb8      	it	lt
 800968e:	9204      	strlt	r2, [sp, #16]
 8009690:	7823      	ldrb	r3, [r4, #0]
 8009692:	2b2e      	cmp	r3, #46	@ 0x2e
 8009694:	d10a      	bne.n	80096ac <_svfiprintf_r+0x130>
 8009696:	7863      	ldrb	r3, [r4, #1]
 8009698:	2b2a      	cmp	r3, #42	@ 0x2a
 800969a:	d132      	bne.n	8009702 <_svfiprintf_r+0x186>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	3402      	adds	r4, #2
 80096a0:	1d1a      	adds	r2, r3, #4
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096a8:	9203      	str	r2, [sp, #12]
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009770 <_svfiprintf_r+0x1f4>
 80096b0:	2203      	movs	r2, #3
 80096b2:	7821      	ldrb	r1, [r4, #0]
 80096b4:	4650      	mov	r0, sl
 80096b6:	f000 fa17 	bl	8009ae8 <memchr>
 80096ba:	b138      	cbz	r0, 80096cc <_svfiprintf_r+0x150>
 80096bc:	eba0 000a 	sub.w	r0, r0, sl
 80096c0:	2240      	movs	r2, #64	@ 0x40
 80096c2:	9b04      	ldr	r3, [sp, #16]
 80096c4:	3401      	adds	r4, #1
 80096c6:	4082      	lsls	r2, r0
 80096c8:	4313      	orrs	r3, r2
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	2206      	movs	r2, #6
 80096d2:	4824      	ldr	r0, [pc, #144]	@ (8009764 <_svfiprintf_r+0x1e8>)
 80096d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096d8:	f000 fa06 	bl	8009ae8 <memchr>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d036      	beq.n	800974e <_svfiprintf_r+0x1d2>
 80096e0:	4b21      	ldr	r3, [pc, #132]	@ (8009768 <_svfiprintf_r+0x1ec>)
 80096e2:	bb1b      	cbnz	r3, 800972c <_svfiprintf_r+0x1b0>
 80096e4:	9b03      	ldr	r3, [sp, #12]
 80096e6:	3307      	adds	r3, #7
 80096e8:	f023 0307 	bic.w	r3, r3, #7
 80096ec:	3308      	adds	r3, #8
 80096ee:	9303      	str	r3, [sp, #12]
 80096f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f2:	4433      	add	r3, r6
 80096f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096f6:	e76a      	b.n	80095ce <_svfiprintf_r+0x52>
 80096f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096fc:	460c      	mov	r4, r1
 80096fe:	2001      	movs	r0, #1
 8009700:	e7a8      	b.n	8009654 <_svfiprintf_r+0xd8>
 8009702:	2300      	movs	r3, #0
 8009704:	3401      	adds	r4, #1
 8009706:	f04f 0c0a 	mov.w	ip, #10
 800970a:	4619      	mov	r1, r3
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	4620      	mov	r0, r4
 8009710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009714:	3a30      	subs	r2, #48	@ 0x30
 8009716:	2a09      	cmp	r2, #9
 8009718:	d903      	bls.n	8009722 <_svfiprintf_r+0x1a6>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0c6      	beq.n	80096ac <_svfiprintf_r+0x130>
 800971e:	9105      	str	r1, [sp, #20]
 8009720:	e7c4      	b.n	80096ac <_svfiprintf_r+0x130>
 8009722:	fb0c 2101 	mla	r1, ip, r1, r2
 8009726:	4604      	mov	r4, r0
 8009728:	2301      	movs	r3, #1
 800972a:	e7f0      	b.n	800970e <_svfiprintf_r+0x192>
 800972c:	ab03      	add	r3, sp, #12
 800972e:	462a      	mov	r2, r5
 8009730:	a904      	add	r1, sp, #16
 8009732:	4638      	mov	r0, r7
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	4b0d      	ldr	r3, [pc, #52]	@ (800976c <_svfiprintf_r+0x1f0>)
 8009738:	f3af 8000 	nop.w
 800973c:	1c42      	adds	r2, r0, #1
 800973e:	4606      	mov	r6, r0
 8009740:	d1d6      	bne.n	80096f0 <_svfiprintf_r+0x174>
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	065b      	lsls	r3, r3, #25
 8009746:	f53f af2d 	bmi.w	80095a4 <_svfiprintf_r+0x28>
 800974a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800974c:	e72c      	b.n	80095a8 <_svfiprintf_r+0x2c>
 800974e:	ab03      	add	r3, sp, #12
 8009750:	462a      	mov	r2, r5
 8009752:	a904      	add	r1, sp, #16
 8009754:	4638      	mov	r0, r7
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	4b04      	ldr	r3, [pc, #16]	@ (800976c <_svfiprintf_r+0x1f0>)
 800975a:	f000 f87d 	bl	8009858 <_printf_i>
 800975e:	e7ed      	b.n	800973c <_svfiprintf_r+0x1c0>
 8009760:	08009ccc 	.word	0x08009ccc
 8009764:	08009cd6 	.word	0x08009cd6
 8009768:	00000000 	.word	0x00000000
 800976c:	080094c5 	.word	0x080094c5
 8009770:	08009cd2 	.word	0x08009cd2

08009774 <_printf_common>:
 8009774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009778:	4616      	mov	r6, r2
 800977a:	4698      	mov	r8, r3
 800977c:	688a      	ldr	r2, [r1, #8]
 800977e:	4607      	mov	r7, r0
 8009780:	690b      	ldr	r3, [r1, #16]
 8009782:	460c      	mov	r4, r1
 8009784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009788:	4293      	cmp	r3, r2
 800978a:	bfb8      	it	lt
 800978c:	4613      	movlt	r3, r2
 800978e:	6033      	str	r3, [r6, #0]
 8009790:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009794:	b10a      	cbz	r2, 800979a <_printf_common+0x26>
 8009796:	3301      	adds	r3, #1
 8009798:	6033      	str	r3, [r6, #0]
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	0699      	lsls	r1, r3, #26
 800979e:	bf42      	ittt	mi
 80097a0:	6833      	ldrmi	r3, [r6, #0]
 80097a2:	3302      	addmi	r3, #2
 80097a4:	6033      	strmi	r3, [r6, #0]
 80097a6:	6825      	ldr	r5, [r4, #0]
 80097a8:	f015 0506 	ands.w	r5, r5, #6
 80097ac:	d106      	bne.n	80097bc <_printf_common+0x48>
 80097ae:	f104 0a19 	add.w	sl, r4, #25
 80097b2:	68e3      	ldr	r3, [r4, #12]
 80097b4:	6832      	ldr	r2, [r6, #0]
 80097b6:	1a9b      	subs	r3, r3, r2
 80097b8:	42ab      	cmp	r3, r5
 80097ba:	dc2b      	bgt.n	8009814 <_printf_common+0xa0>
 80097bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	3b00      	subs	r3, #0
 80097c4:	bf18      	it	ne
 80097c6:	2301      	movne	r3, #1
 80097c8:	0692      	lsls	r2, r2, #26
 80097ca:	d430      	bmi.n	800982e <_printf_common+0xba>
 80097cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097d0:	4641      	mov	r1, r8
 80097d2:	4638      	mov	r0, r7
 80097d4:	47c8      	blx	r9
 80097d6:	3001      	adds	r0, #1
 80097d8:	d023      	beq.n	8009822 <_printf_common+0xae>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	341a      	adds	r4, #26
 80097de:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80097e2:	f003 0306 	and.w	r3, r3, #6
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	bf0a      	itet	eq
 80097ea:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80097ee:	2500      	movne	r5, #0
 80097f0:	6833      	ldreq	r3, [r6, #0]
 80097f2:	f04f 0600 	mov.w	r6, #0
 80097f6:	bf08      	it	eq
 80097f8:	1aed      	subeq	r5, r5, r3
 80097fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80097fe:	bf08      	it	eq
 8009800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009804:	4293      	cmp	r3, r2
 8009806:	bfc4      	itt	gt
 8009808:	1a9b      	subgt	r3, r3, r2
 800980a:	18ed      	addgt	r5, r5, r3
 800980c:	42b5      	cmp	r5, r6
 800980e:	d11a      	bne.n	8009846 <_printf_common+0xd2>
 8009810:	2000      	movs	r0, #0
 8009812:	e008      	b.n	8009826 <_printf_common+0xb2>
 8009814:	2301      	movs	r3, #1
 8009816:	4652      	mov	r2, sl
 8009818:	4641      	mov	r1, r8
 800981a:	4638      	mov	r0, r7
 800981c:	47c8      	blx	r9
 800981e:	3001      	adds	r0, #1
 8009820:	d103      	bne.n	800982a <_printf_common+0xb6>
 8009822:	f04f 30ff 	mov.w	r0, #4294967295
 8009826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982a:	3501      	adds	r5, #1
 800982c:	e7c1      	b.n	80097b2 <_printf_common+0x3e>
 800982e:	18e1      	adds	r1, r4, r3
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	2030      	movs	r0, #48	@ 0x30
 8009834:	3302      	adds	r3, #2
 8009836:	4422      	add	r2, r4
 8009838:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800983c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009844:	e7c2      	b.n	80097cc <_printf_common+0x58>
 8009846:	2301      	movs	r3, #1
 8009848:	4622      	mov	r2, r4
 800984a:	4641      	mov	r1, r8
 800984c:	4638      	mov	r0, r7
 800984e:	47c8      	blx	r9
 8009850:	3001      	adds	r0, #1
 8009852:	d0e6      	beq.n	8009822 <_printf_common+0xae>
 8009854:	3601      	adds	r6, #1
 8009856:	e7d9      	b.n	800980c <_printf_common+0x98>

08009858 <_printf_i>:
 8009858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	7e0f      	ldrb	r7, [r1, #24]
 800985e:	4691      	mov	r9, r2
 8009860:	4680      	mov	r8, r0
 8009862:	460c      	mov	r4, r1
 8009864:	2f78      	cmp	r7, #120	@ 0x78
 8009866:	469a      	mov	sl, r3
 8009868:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800986a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800986e:	d807      	bhi.n	8009880 <_printf_i+0x28>
 8009870:	2f62      	cmp	r7, #98	@ 0x62
 8009872:	d80a      	bhi.n	800988a <_printf_i+0x32>
 8009874:	2f00      	cmp	r7, #0
 8009876:	f000 80d1 	beq.w	8009a1c <_printf_i+0x1c4>
 800987a:	2f58      	cmp	r7, #88	@ 0x58
 800987c:	f000 80b8 	beq.w	80099f0 <_printf_i+0x198>
 8009880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009888:	e03a      	b.n	8009900 <_printf_i+0xa8>
 800988a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800988e:	2b15      	cmp	r3, #21
 8009890:	d8f6      	bhi.n	8009880 <_printf_i+0x28>
 8009892:	a101      	add	r1, pc, #4	@ (adr r1, 8009898 <_printf_i+0x40>)
 8009894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009898:	080098f1 	.word	0x080098f1
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009881 	.word	0x08009881
 80098a4:	08009881 	.word	0x08009881
 80098a8:	08009881 	.word	0x08009881
 80098ac:	08009881 	.word	0x08009881
 80098b0:	08009905 	.word	0x08009905
 80098b4:	08009881 	.word	0x08009881
 80098b8:	08009881 	.word	0x08009881
 80098bc:	08009881 	.word	0x08009881
 80098c0:	08009881 	.word	0x08009881
 80098c4:	08009a03 	.word	0x08009a03
 80098c8:	0800992f 	.word	0x0800992f
 80098cc:	080099bd 	.word	0x080099bd
 80098d0:	08009881 	.word	0x08009881
 80098d4:	08009881 	.word	0x08009881
 80098d8:	08009a25 	.word	0x08009a25
 80098dc:	08009881 	.word	0x08009881
 80098e0:	0800992f 	.word	0x0800992f
 80098e4:	08009881 	.word	0x08009881
 80098e8:	08009881 	.word	0x08009881
 80098ec:	080099c5 	.word	0x080099c5
 80098f0:	6833      	ldr	r3, [r6, #0]
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6032      	str	r2, [r6, #0]
 80098f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009900:	2301      	movs	r3, #1
 8009902:	e09c      	b.n	8009a3e <_printf_i+0x1e6>
 8009904:	6833      	ldr	r3, [r6, #0]
 8009906:	6820      	ldr	r0, [r4, #0]
 8009908:	1d19      	adds	r1, r3, #4
 800990a:	6031      	str	r1, [r6, #0]
 800990c:	0606      	lsls	r6, r0, #24
 800990e:	d501      	bpl.n	8009914 <_printf_i+0xbc>
 8009910:	681d      	ldr	r5, [r3, #0]
 8009912:	e003      	b.n	800991c <_printf_i+0xc4>
 8009914:	0645      	lsls	r5, r0, #25
 8009916:	d5fb      	bpl.n	8009910 <_printf_i+0xb8>
 8009918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800991c:	2d00      	cmp	r5, #0
 800991e:	da03      	bge.n	8009928 <_printf_i+0xd0>
 8009920:	232d      	movs	r3, #45	@ 0x2d
 8009922:	426d      	negs	r5, r5
 8009924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009928:	4858      	ldr	r0, [pc, #352]	@ (8009a8c <_printf_i+0x234>)
 800992a:	230a      	movs	r3, #10
 800992c:	e011      	b.n	8009952 <_printf_i+0xfa>
 800992e:	6821      	ldr	r1, [r4, #0]
 8009930:	6833      	ldr	r3, [r6, #0]
 8009932:	0608      	lsls	r0, r1, #24
 8009934:	f853 5b04 	ldr.w	r5, [r3], #4
 8009938:	d402      	bmi.n	8009940 <_printf_i+0xe8>
 800993a:	0649      	lsls	r1, r1, #25
 800993c:	bf48      	it	mi
 800993e:	b2ad      	uxthmi	r5, r5
 8009940:	2f6f      	cmp	r7, #111	@ 0x6f
 8009942:	6033      	str	r3, [r6, #0]
 8009944:	4851      	ldr	r0, [pc, #324]	@ (8009a8c <_printf_i+0x234>)
 8009946:	bf14      	ite	ne
 8009948:	230a      	movne	r3, #10
 800994a:	2308      	moveq	r3, #8
 800994c:	2100      	movs	r1, #0
 800994e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009952:	6866      	ldr	r6, [r4, #4]
 8009954:	2e00      	cmp	r6, #0
 8009956:	60a6      	str	r6, [r4, #8]
 8009958:	db05      	blt.n	8009966 <_printf_i+0x10e>
 800995a:	6821      	ldr	r1, [r4, #0]
 800995c:	432e      	orrs	r6, r5
 800995e:	f021 0104 	bic.w	r1, r1, #4
 8009962:	6021      	str	r1, [r4, #0]
 8009964:	d04b      	beq.n	80099fe <_printf_i+0x1a6>
 8009966:	4616      	mov	r6, r2
 8009968:	fbb5 f1f3 	udiv	r1, r5, r3
 800996c:	fb03 5711 	mls	r7, r3, r1, r5
 8009970:	5dc7      	ldrb	r7, [r0, r7]
 8009972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009976:	462f      	mov	r7, r5
 8009978:	460d      	mov	r5, r1
 800997a:	42bb      	cmp	r3, r7
 800997c:	d9f4      	bls.n	8009968 <_printf_i+0x110>
 800997e:	2b08      	cmp	r3, #8
 8009980:	d10b      	bne.n	800999a <_printf_i+0x142>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	07df      	lsls	r7, r3, #31
 8009986:	d508      	bpl.n	800999a <_printf_i+0x142>
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	6861      	ldr	r1, [r4, #4]
 800998c:	4299      	cmp	r1, r3
 800998e:	bfde      	ittt	le
 8009990:	2330      	movle	r3, #48	@ 0x30
 8009992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800999a:	1b92      	subs	r2, r2, r6
 800999c:	6122      	str	r2, [r4, #16]
 800999e:	464b      	mov	r3, r9
 80099a0:	aa03      	add	r2, sp, #12
 80099a2:	4621      	mov	r1, r4
 80099a4:	4640      	mov	r0, r8
 80099a6:	f8cd a000 	str.w	sl, [sp]
 80099aa:	f7ff fee3 	bl	8009774 <_printf_common>
 80099ae:	3001      	adds	r0, #1
 80099b0:	d14a      	bne.n	8009a48 <_printf_i+0x1f0>
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	b004      	add	sp, #16
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	f043 0320 	orr.w	r3, r3, #32
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	2778      	movs	r7, #120	@ 0x78
 80099c6:	4832      	ldr	r0, [pc, #200]	@ (8009a90 <_printf_i+0x238>)
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099ce:	061f      	lsls	r7, r3, #24
 80099d0:	6831      	ldr	r1, [r6, #0]
 80099d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80099d6:	d402      	bmi.n	80099de <_printf_i+0x186>
 80099d8:	065f      	lsls	r7, r3, #25
 80099da:	bf48      	it	mi
 80099dc:	b2ad      	uxthmi	r5, r5
 80099de:	6031      	str	r1, [r6, #0]
 80099e0:	07d9      	lsls	r1, r3, #31
 80099e2:	bf44      	itt	mi
 80099e4:	f043 0320 	orrmi.w	r3, r3, #32
 80099e8:	6023      	strmi	r3, [r4, #0]
 80099ea:	b11d      	cbz	r5, 80099f4 <_printf_i+0x19c>
 80099ec:	2310      	movs	r3, #16
 80099ee:	e7ad      	b.n	800994c <_printf_i+0xf4>
 80099f0:	4826      	ldr	r0, [pc, #152]	@ (8009a8c <_printf_i+0x234>)
 80099f2:	e7e9      	b.n	80099c8 <_printf_i+0x170>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	f023 0320 	bic.w	r3, r3, #32
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	e7f6      	b.n	80099ec <_printf_i+0x194>
 80099fe:	4616      	mov	r6, r2
 8009a00:	e7bd      	b.n	800997e <_printf_i+0x126>
 8009a02:	6833      	ldr	r3, [r6, #0]
 8009a04:	6825      	ldr	r5, [r4, #0]
 8009a06:	1d18      	adds	r0, r3, #4
 8009a08:	6961      	ldr	r1, [r4, #20]
 8009a0a:	6030      	str	r0, [r6, #0]
 8009a0c:	062e      	lsls	r6, r5, #24
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	d501      	bpl.n	8009a16 <_printf_i+0x1be>
 8009a12:	6019      	str	r1, [r3, #0]
 8009a14:	e002      	b.n	8009a1c <_printf_i+0x1c4>
 8009a16:	0668      	lsls	r0, r5, #25
 8009a18:	d5fb      	bpl.n	8009a12 <_printf_i+0x1ba>
 8009a1a:	8019      	strh	r1, [r3, #0]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4616      	mov	r6, r2
 8009a20:	6123      	str	r3, [r4, #16]
 8009a22:	e7bc      	b.n	800999e <_printf_i+0x146>
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	2100      	movs	r1, #0
 8009a28:	1d1a      	adds	r2, r3, #4
 8009a2a:	6032      	str	r2, [r6, #0]
 8009a2c:	681e      	ldr	r6, [r3, #0]
 8009a2e:	6862      	ldr	r2, [r4, #4]
 8009a30:	4630      	mov	r0, r6
 8009a32:	f000 f859 	bl	8009ae8 <memchr>
 8009a36:	b108      	cbz	r0, 8009a3c <_printf_i+0x1e4>
 8009a38:	1b80      	subs	r0, r0, r6
 8009a3a:	6060      	str	r0, [r4, #4]
 8009a3c:	6863      	ldr	r3, [r4, #4]
 8009a3e:	6123      	str	r3, [r4, #16]
 8009a40:	2300      	movs	r3, #0
 8009a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a46:	e7aa      	b.n	800999e <_printf_i+0x146>
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	4640      	mov	r0, r8
 8009a50:	47d0      	blx	sl
 8009a52:	3001      	adds	r0, #1
 8009a54:	d0ad      	beq.n	80099b2 <_printf_i+0x15a>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	079b      	lsls	r3, r3, #30
 8009a5a:	d413      	bmi.n	8009a84 <_printf_i+0x22c>
 8009a5c:	68e0      	ldr	r0, [r4, #12]
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	4298      	cmp	r0, r3
 8009a62:	bfb8      	it	lt
 8009a64:	4618      	movlt	r0, r3
 8009a66:	e7a6      	b.n	80099b6 <_printf_i+0x15e>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4640      	mov	r0, r8
 8009a70:	47d0      	blx	sl
 8009a72:	3001      	adds	r0, #1
 8009a74:	d09d      	beq.n	80099b2 <_printf_i+0x15a>
 8009a76:	3501      	adds	r5, #1
 8009a78:	68e3      	ldr	r3, [r4, #12]
 8009a7a:	9903      	ldr	r1, [sp, #12]
 8009a7c:	1a5b      	subs	r3, r3, r1
 8009a7e:	42ab      	cmp	r3, r5
 8009a80:	dcf2      	bgt.n	8009a68 <_printf_i+0x210>
 8009a82:	e7eb      	b.n	8009a5c <_printf_i+0x204>
 8009a84:	2500      	movs	r5, #0
 8009a86:	f104 0619 	add.w	r6, r4, #25
 8009a8a:	e7f5      	b.n	8009a78 <_printf_i+0x220>
 8009a8c:	08009cdd 	.word	0x08009cdd
 8009a90:	08009cee 	.word	0x08009cee

08009a94 <memmove>:
 8009a94:	4288      	cmp	r0, r1
 8009a96:	b510      	push	{r4, lr}
 8009a98:	eb01 0402 	add.w	r4, r1, r2
 8009a9c:	d902      	bls.n	8009aa4 <memmove+0x10>
 8009a9e:	4284      	cmp	r4, r0
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	d807      	bhi.n	8009ab4 <memmove+0x20>
 8009aa4:	1e43      	subs	r3, r0, #1
 8009aa6:	42a1      	cmp	r1, r4
 8009aa8:	d008      	beq.n	8009abc <memmove+0x28>
 8009aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ab2:	e7f8      	b.n	8009aa6 <memmove+0x12>
 8009ab4:	4402      	add	r2, r0
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	428a      	cmp	r2, r1
 8009aba:	d100      	bne.n	8009abe <memmove+0x2a>
 8009abc:	bd10      	pop	{r4, pc}
 8009abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ac6:	e7f7      	b.n	8009ab8 <memmove+0x24>

08009ac8 <_sbrk_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	2300      	movs	r3, #0
 8009acc:	4d05      	ldr	r5, [pc, #20]	@ (8009ae4 <_sbrk_r+0x1c>)
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7f7 ff96 	bl	8001a04 <_sbrk>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_sbrk_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_sbrk_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	20000600 	.word	0x20000600

08009ae8 <memchr>:
 8009ae8:	b2c9      	uxtb	r1, r1
 8009aea:	4603      	mov	r3, r0
 8009aec:	4402      	add	r2, r0
 8009aee:	b510      	push	{r4, lr}
 8009af0:	4293      	cmp	r3, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	d101      	bne.n	8009afa <memchr+0x12>
 8009af6:	2000      	movs	r0, #0
 8009af8:	e003      	b.n	8009b02 <memchr+0x1a>
 8009afa:	7804      	ldrb	r4, [r0, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	428c      	cmp	r4, r1
 8009b00:	d1f6      	bne.n	8009af0 <memchr+0x8>
 8009b02:	bd10      	pop	{r4, pc}

08009b04 <_realloc_r>:
 8009b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b08:	4607      	mov	r7, r0
 8009b0a:	4614      	mov	r4, r2
 8009b0c:	460d      	mov	r5, r1
 8009b0e:	b921      	cbnz	r1, 8009b1a <_realloc_r+0x16>
 8009b10:	4611      	mov	r1, r2
 8009b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b16:	f7ff bc49 	b.w	80093ac <_malloc_r>
 8009b1a:	b92a      	cbnz	r2, 8009b28 <_realloc_r+0x24>
 8009b1c:	4625      	mov	r5, r4
 8009b1e:	f7ff fbd9 	bl	80092d4 <_free_r>
 8009b22:	4628      	mov	r0, r5
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	f000 f81a 	bl	8009b60 <_malloc_usable_size_r>
 8009b2c:	4284      	cmp	r4, r0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	d802      	bhi.n	8009b38 <_realloc_r+0x34>
 8009b32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b36:	d8f4      	bhi.n	8009b22 <_realloc_r+0x1e>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	f7ff fc36 	bl	80093ac <_malloc_r>
 8009b40:	4680      	mov	r8, r0
 8009b42:	b908      	cbnz	r0, 8009b48 <_realloc_r+0x44>
 8009b44:	4645      	mov	r5, r8
 8009b46:	e7ec      	b.n	8009b22 <_realloc_r+0x1e>
 8009b48:	42b4      	cmp	r4, r6
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	bf28      	it	cs
 8009b50:	4632      	movcs	r2, r6
 8009b52:	f7ff fbb1 	bl	80092b8 <memcpy>
 8009b56:	4629      	mov	r1, r5
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f7ff fbbb 	bl	80092d4 <_free_r>
 8009b5e:	e7f1      	b.n	8009b44 <_realloc_r+0x40>

08009b60 <_malloc_usable_size_r>:
 8009b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b64:	1f18      	subs	r0, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfbc      	itt	lt
 8009b6a:	580b      	ldrlt	r3, [r1, r0]
 8009b6c:	18c0      	addlt	r0, r0, r3
 8009b6e:	4770      	bx	lr

08009b70 <_init>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	bf00      	nop
 8009b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b76:	bc08      	pop	{r3}
 8009b78:	469e      	mov	lr, r3
 8009b7a:	4770      	bx	lr

08009b7c <_fini>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	bf00      	nop
 8009b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b82:	bc08      	pop	{r3}
 8009b84:	469e      	mov	lr, r3
 8009b86:	4770      	bx	lr
