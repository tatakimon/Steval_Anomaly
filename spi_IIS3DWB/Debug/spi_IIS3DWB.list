
spi_IIS3DWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c628  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800c860  0800c860  0000d860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cab8  0800cab8  0000dab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cac0  0800cac0  0000dac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cac4  0800cac4  0000dac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000000  0800cac8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000062c  20000078  0800cb40  0000e078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006a4  0800cb40  0000e6a4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d4e8  00000000  00000000  0000e0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca4  00000000  00000000  0002b596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  0002e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001041  00000000  00000000  0002f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af1f  00000000  00000000  00030739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d46e  00000000  00000000  0006b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001840d3  00000000  00000000  00088ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020cb99  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e40  00000000  00000000  0020cbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  00212a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000078 	.word	0x20000078
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c848 	.word	0x0800c848

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000007c 	.word	0x2000007c
 8000274:	0800c848 	.word	0x0800c848

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <cs_low>:

/*

*/

static inline void cs_low (const spi_dev_t *d){ HAL_GPIO_WritePin(d->cs_port, d->cs_pin, GPIO_PIN_RESET); }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6858      	ldr	r0, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	891b      	ldrh	r3, [r3, #8]
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	f004 fb8e 	bl	8004d38 <HAL_GPIO_WritePin>
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <cs_high>:
static inline void cs_high(const spi_dev_t *d){ HAL_GPIO_WritePin(d->cs_port, d->cs_pin, GPIO_PIN_SET); }
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6858      	ldr	r0, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	891b      	ldrh	r3, [r3, #8]
 8000634:	2201      	movs	r2, #1
 8000636:	4619      	mov	r1, r3
 8000638:	f004 fb7e 	bl	8004d38 <HAL_GPIO_WritePin>
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <dev_write>:

HAL_StatusTypeDef dev_write(const spi_dev_t *d, uint8_t reg, const uint8_t *data, uint16_t len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	461a      	mov	r2, r3
 8000650:	460b      	mov	r3, r1
 8000652:	72fb      	strb	r3, [r7, #11]
 8000654:	4613      	mov	r3, r2
 8000656:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef st;
    cs_low(d);
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f7ff ffd3 	bl	8000604 <cs_low>
    st  = HAL_SPI_Transmit(d->spi, &reg, 1, 100);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f107 010b 	add.w	r1, r7, #11
 8000666:	2364      	movs	r3, #100	@ 0x64
 8000668:	2201      	movs	r2, #1
 800066a:	f009 fc6b 	bl	8009f44 <HAL_SPI_Transmit>
 800066e:	4603      	mov	r3, r0
 8000670:	75fb      	strb	r3, [r7, #23]
    if (st==HAL_OK && len) st = HAL_SPI_Transmit(d->spi, (uint8_t*)data, len, 100);
 8000672:	7dfb      	ldrb	r3, [r7, #23]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10b      	bne.n	8000690 <dev_write+0x4c>
 8000678:	893b      	ldrh	r3, [r7, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <dev_write+0x4c>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	893a      	ldrh	r2, [r7, #8]
 8000684:	2364      	movs	r3, #100	@ 0x64
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f009 fc5c 	bl	8009f44 <HAL_SPI_Transmit>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
    cs_high(d);
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ffc7 	bl	8000624 <cs_high>
    return st;
 8000696:	7dfb      	ldrb	r3, [r7, #23]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <dev_read>:

HAL_StatusTypeDef dev_read(const spi_dev_t *d, uint8_t reg, uint8_t *data, uint16_t len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	607a      	str	r2, [r7, #4]
 80006aa:	461a      	mov	r2, r3
 80006ac:	460b      	mov	r3, r1
 80006ae:	72fb      	strb	r3, [r7, #11]
 80006b0:	4613      	mov	r3, r2
 80006b2:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef st;
    uint8_t cmd = reg | 0x80U; // RW bit = 1 for read
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	75bb      	strb	r3, [r7, #22]
    cs_low(d);
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f7ff ffa0 	bl	8000604 <cs_low>
    st  = HAL_SPI_Transmit(d->spi, &cmd, 1, 100);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	f107 0116 	add.w	r1, r7, #22
 80006cc:	2364      	movs	r3, #100	@ 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	f009 fc38 	bl	8009f44 <HAL_SPI_Transmit>
 80006d4:	4603      	mov	r3, r0
 80006d6:	75fb      	strb	r3, [r7, #23]
    if (st==HAL_OK && len) st = HAL_SPI_Receive(d->spi, data, len, 100);
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d10b      	bne.n	80006f6 <dev_read+0x56>
 80006de:	893b      	ldrh	r3, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <dev_read+0x56>
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	893a      	ldrh	r2, [r7, #8]
 80006ea:	2364      	movs	r3, #100	@ 0x64
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	f009 fe3d 	bl	800a36c <HAL_SPI_Receive>
 80006f2:	4603      	mov	r3, r0
 80006f4:	75fb      	strb	r3, [r7, #23]
    cs_high(d);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff ff94 	bl	8000624 <cs_high>
    return st;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <spi2_set_mode0>:


/* SPI2 mode switchers: IIS3DWB=Mode0, ISM330DHCX=Mode3 */
static void spi2_set_mode0(void){ hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE; HAL_SPI_DeInit(&hspi2); HAL_SPI_Init(&hspi2); }
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <spi2_set_mode0+0x20>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <spi2_set_mode0+0x20>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	4803      	ldr	r0, [pc, #12]	@ (8000728 <spi2_set_mode0+0x20>)
 800071a:	f009 fbe9 	bl	8009ef0 <HAL_SPI_DeInit>
 800071e:	4802      	ldr	r0, [pc, #8]	@ (8000728 <spi2_set_mode0+0x20>)
 8000720:	f009 fad0 	bl	8009cc4 <HAL_SPI_Init>
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200002c8 	.word	0x200002c8

0800072c <iis3dwb_init>:




static void iis3dwb_init(const spi_dev_t *dev)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  spi2_set_mode0();                 // DWB needs mode 0
 8000734:	f7ff ffe8 	bl	8000708 <spi2_set_mode0>
  uint8_t ctrl1 = 0xA0;             // ODR + FS=±2g
 8000738:	23a0      	movs	r3, #160	@ 0xa0
 800073a:	73fb      	strb	r3, [r7, #15]
  dev_write(dev, DWB_CTRL1_XL, &ctrl1, 1);
 800073c:	f107 020f 	add.w	r2, r7, #15
 8000740:	2301      	movs	r3, #1
 8000742:	2110      	movs	r1, #16
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff7d 	bl	8000644 <dev_write>

  uint8_t c12_13[2] = { DWB_CTRL3_C_BDU | DWB_CTRL3_C_IF_INC, DWB_CTRL4_C_I2C_DIS };
 800074a:	f240 4344 	movw	r3, #1092	@ 0x444
 800074e:	81bb      	strh	r3, [r7, #12]
  dev_write(dev, DWB_CTRL3_C, c12_13, 2);
 8000750:	f107 020c 	add.w	r2, r7, #12
 8000754:	2302      	movs	r3, #2
 8000756:	2112      	movs	r1, #18
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff73 	bl	8000644 <dev_write>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <i2c2_scan_first_device>:




static uint16_t i2c2_scan_first_device(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    for (uint8_t a = 0x08; a <= 0x77; ++a)
 800076e:	2308      	movs	r3, #8
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	e013      	b.n	800079c <i2c2_scan_first_device+0x34>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (a << 1), 2, 5) == HAL_OK)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	b29b      	uxth	r3, r3
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b299      	uxth	r1, r3
 800077c:	2305      	movs	r3, #5
 800077e:	2202      	movs	r2, #2
 8000780:	480a      	ldr	r0, [pc, #40]	@ (80007ac <i2c2_scan_first_device+0x44>)
 8000782:	f004 fdf7 	bl	8005374 <HAL_I2C_IsDeviceReady>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d104      	bne.n	8000796 <i2c2_scan_first_device+0x2e>
            return (a << 1);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	b29b      	uxth	r3, r3
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	b29b      	uxth	r3, r3
 8000794:	e006      	b.n	80007a4 <i2c2_scan_first_device+0x3c>
    for (uint8_t a = 0x08; a <= 0x77; ++a)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	3301      	adds	r3, #1
 800079a:	71fb      	strb	r3, [r7, #7]
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b77      	cmp	r3, #119	@ 0x77
 80007a0:	d9e8      	bls.n	8000774 <i2c2_scan_first_device+0xc>
    return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000184 	.word	0x20000184

080007b0 <stts22h_find_and_start>:

/* Call this ONCE at startup */
static void stts22h_find_and_start(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09a      	sub	sp, #104	@ 0x68
 80007b4:	af04      	add	r7, sp, #16
    uint8_t who = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Try the 4 known STTS22H addresses first
    for (size_t i = 0; i < sizeof(stts22h_candidates); ++i)
 80007bc:	2300      	movs	r3, #0
 80007be:	657b      	str	r3, [r7, #84]	@ 0x54
 80007c0:	e023      	b.n	800080a <stts22h_find_and_start+0x5a>
    {
        uint16_t addr8 = (uint16_t)stts22h_candidates[i] << 1;   // HAL wants 8-bit
 80007c2:	4a46      	ldr	r2, [pc, #280]	@ (80008dc <stts22h_find_and_start+0x12c>)
 80007c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
        if (HAL_I2C_Mem_Read(&hi2c2, addr8, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 80007d0:	f8b7 1052 	ldrh.w	r1, [r7, #82]	@ 0x52
 80007d4:	2332      	movs	r3, #50	@ 0x32
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	2301      	movs	r3, #1
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	2201      	movs	r2, #1
 80007e6:	483e      	ldr	r0, [pc, #248]	@ (80008e0 <stts22h_find_and_start+0x130>)
 80007e8:	f004 fcaa 	bl	8005140 <HAL_I2C_Mem_Read>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d108      	bne.n	8000804 <stts22h_find_and_start+0x54>
            who == 0xA0)    // WHO_AM_I expected = 0xA0
 80007f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
        if (HAL_I2C_Mem_Read(&hi2c2, addr8, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 80007f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80007f8:	d104      	bne.n	8000804 <stts22h_find_and_start+0x54>
        {
            stts22h_addr = addr8;
 80007fa:	4a3a      	ldr	r2, [pc, #232]	@ (80008e4 <stts22h_find_and_start+0x134>)
 80007fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000800:	8013      	strh	r3, [r2, #0]
            break;
 8000802:	e005      	b.n	8000810 <stts22h_find_and_start+0x60>
    for (size_t i = 0; i < sizeof(stts22h_candidates); ++i)
 8000804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000806:	3301      	adds	r3, #1
 8000808:	657b      	str	r3, [r7, #84]	@ 0x54
 800080a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800080c:	2b03      	cmp	r3, #3
 800080e:	d9d8      	bls.n	80007c2 <stts22h_find_and_start+0x12>
        }
    }

    // If still unknown, do a generic bus scan
    if (stts22h_addr == 0) {
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <stts22h_find_and_start+0x134>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d121      	bne.n	800085c <stts22h_find_and_start+0xac>
        uint16_t found = i2c2_scan_first_device();
 8000818:	f7ff ffa6 	bl	8000768 <i2c2_scan_first_device>
 800081c:	4603      	mov	r3, r0
 800081e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        if (found) {
 8000822:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000826:	2b00      	cmp	r3, #0
 8000828:	d018      	beq.n	800085c <stts22h_find_and_start+0xac>
            // optional: verify it's really STTS22H
            if (HAL_I2C_Mem_Read(&hi2c2, found, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 800082a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800082e:	2332      	movs	r3, #50	@ 0x32
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2301      	movs	r3, #1
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	2201      	movs	r2, #1
 8000840:	4827      	ldr	r0, [pc, #156]	@ (80008e0 <stts22h_find_and_start+0x130>)
 8000842:	f004 fc7d 	bl	8005140 <HAL_I2C_Mem_Read>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d107      	bne.n	800085c <stts22h_find_and_start+0xac>
                who == 0xA0)
 800084c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
            if (HAL_I2C_Mem_Read(&hi2c2, found, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 8000850:	2ba0      	cmp	r3, #160	@ 0xa0
 8000852:	d103      	bne.n	800085c <stts22h_find_and_start+0xac>
                stts22h_addr = found;
 8000854:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <stts22h_find_and_start+0x134>)
 8000856:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800085a:	8013      	strh	r3, [r2, #0]
        }
    }

    // If found, configure continuous mode: BDU=1, IF_ADD_INC=1, FREERUN/ODR bits set
    if (stts22h_addr) {
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <stts22h_find_and_start+0x134>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d02a      	beq.n	80008ba <stts22h_find_and_start+0x10a>
        uint8_t ctrl = 0x4C;                              // BDU=1, IF_ADD_INC=1, ODR>0
 8000864:	234c      	movs	r3, #76	@ 0x4c
 8000866:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        (void)HAL_I2C_Mem_Write(&hi2c2, stts22h_addr, 0x04, I2C_MEMADD_SIZE_8BIT, &ctrl, 1, 100);
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <stts22h_find_and_start+0x134>)
 800086c:	8819      	ldrh	r1, [r3, #0]
 800086e:	2364      	movs	r3, #100	@ 0x64
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	2301      	movs	r3, #1
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	2204      	movs	r2, #4
 8000880:	4817      	ldr	r0, [pc, #92]	@ (80008e0 <stts22h_find_and_start+0x130>)
 8000882:	f004 fb49 	bl	8004f18 <HAL_I2C_Mem_Write>
        HAL_Delay(2);
 8000886:	2002      	movs	r0, #2
 8000888:	f002 f864 	bl	8002954 <HAL_Delay>

        // (optional) print what we found
        char msg[64];
        int n = snprintf(msg, sizeof(msg), "STTS22H @0x%02X WHO=0x%02X\r\n",
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <stts22h_find_and_start+0x134>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	b29b      	uxth	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800089a:	1d38      	adds	r0, r7, #4
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	4613      	mov	r3, r2
 80008a0:	4a11      	ldr	r2, [pc, #68]	@ (80008e8 <stts22h_find_and_start+0x138>)
 80008a2:	2140      	movs	r1, #64	@ 0x40
 80008a4:	f00b f940 	bl	800bb28 <sniprintf>
 80008a8:	64b8      	str	r0, [r7, #72]	@ 0x48
                         (unsigned)(stts22h_addr>>1), (unsigned)who);
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)n, 50);
 80008aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	1d39      	adds	r1, r7, #4
 80008b0:	2332      	movs	r3, #50	@ 0x32
 80008b2:	480e      	ldr	r0, [pc, #56]	@ (80008ec <stts22h_find_and_start+0x13c>)
 80008b4:	f00a fbd6 	bl	800b064 <HAL_UART_Transmit>
    } else {
        const char *msg = "STTS22H not found on I2C2\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 50);
    }
}
 80008b8:	e00b      	b.n	80008d2 <stts22h_find_and_start+0x122>
        const char *msg = "STTS22H not found on I2C2\r\n";
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <stts22h_find_and_start+0x140>)
 80008bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 50);
 80008be:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80008c0:	f7ff fcda 	bl	8000278 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	2332      	movs	r3, #50	@ 0x32
 80008ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80008cc:	4807      	ldr	r0, [pc, #28]	@ (80008ec <stts22h_find_and_start+0x13c>)
 80008ce:	f00a fbc9 	bl	800b064 <HAL_UART_Transmit>
}
 80008d2:	bf00      	nop
 80008d4:	3758      	adds	r7, #88	@ 0x58
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	0800c948 	.word	0x0800c948
 80008e0:	20000184 	.word	0x20000184
 80008e4:	20000000 	.word	0x20000000
 80008e8:	0800c860 	.word	0x0800c860
 80008ec:	200004c0 	.word	0x200004c0
 80008f0:	0800c880 	.word	0x0800c880

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	ed2d 8b02 	vpush	{d8}
 80008fa:	b0c9      	sub	sp, #292	@ 0x124
 80008fc:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f001 ff63 	bl	80027c8 <HAL_Init>

  /* Configure the System Power */
 // SystemPower_Config();

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 fbeb 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 fd4d 	bl	80013a4 <MX_GPIO_Init>
  //MX_ADC1_Init();
  //MX_ADF1_Init();
  //MX_MDF1_Init();
  //MX_DAC1_Init();
  //MX_I2C1_Init();
  MX_I2C2_Init();
 800090a:	f000 fc4d 	bl	80011a8 <MX_I2C2_Init>

  stts22h_find_and_start();
 800090e:	f7ff ff4f 	bl	80007b0 <stts22h_find_and_start>





  HAL_Delay(5);
 8000912:	2005      	movs	r0, #5
 8000914:	f002 f81e 	bl	8002954 <HAL_Delay>

  // If you want to print all devices:
  // i2c2_scan_and_print_all();

  extern uint16_t stts22h_addr;      // your global address variable
  uint16_t found = i2c2_scan_first_device();
 8000918:	f7ff ff26 	bl	8000768 <i2c2_scan_first_device>
 800091c:	4603      	mov	r3, r0
 800091e:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
  if (found) {
 8000922:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <main+0x3e>
      stts22h_addr = 126;          // set to the detected 8-bit address
 800092a:	4b72      	ldr	r3, [pc, #456]	@ (8000af4 <main+0x200>)
 800092c:	227e      	movs	r2, #126	@ 0x7e
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	e002      	b.n	8000938 <main+0x44>
  } else {
      stts22h_addr = (0x3C << 1);    // fallback to the usual STTS22H address
 8000932:	4b70      	ldr	r3, [pc, #448]	@ (8000af4 <main+0x200>)
 8000934:	2278      	movs	r2, #120	@ 0x78
 8000936:	801a      	strh	r2, [r3, #0]
  //MX_ICACHE_Init();
  //MX_RTC_Init();
  //MX_SAI1_Init();
  //MX_SDMMC1_SD_Init();
  //MX_SPI1_Init();
  MX_SPI2_Init();
 8000938:	f000 fc76 	bl	8001228 <MX_SPI2_Init>

  /* After MX_SPI2_Init(); do once */
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;   // mode 0
 800093c:	4b6e      	ldr	r3, [pc, #440]	@ (8000af8 <main+0x204>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000942:	4b6d      	ldr	r3, [pc, #436]	@ (8000af8 <main+0x204>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  HAL_SPI_DeInit(&hspi2);
 8000948:	486b      	ldr	r0, [pc, #428]	@ (8000af8 <main+0x204>)
 800094a:	f009 fad1 	bl	8009ef0 <HAL_SPI_DeInit>
  HAL_SPI_Init(&hspi2);
 800094e:	486a      	ldr	r0, [pc, #424]	@ (8000af8 <main+0x204>)
 8000950:	f009 f9b8 	bl	8009cc4 <HAL_SPI_Init>
  //MX_SPI3_Init();
  //MX_TAMP_RTC_Init();
  //MX_TIM3_Init();
  MX_USART2_UART_Init();
 8000954:	f000 fcd8 	bl	8001308 <MX_USART2_UART_Init>
	//static spi_dev_t DWB, ISM;
	//DWB.spi    = &hspi2;  DWB.cs_port = CS_DWB_GPIO_Port;  DWB.cs_pin = CS_DWB_Pin;
	//ISM.spi    = &hspi2;  ISM.cs_port = CS_DHCX_GPIO_Port; ISM.cs_pin = CS_DHCX_Pin;

	/* Idle-high CS */
	cs_high(&DWB);
 8000958:	4868      	ldr	r0, [pc, #416]	@ (8000afc <main+0x208>)
 800095a:	f7ff fe63 	bl	8000624 <cs_high>
	cs_high(&ISM);
 800095e:	4868      	ldr	r0, [pc, #416]	@ (8000b00 <main+0x20c>)
 8000960:	f7ff fe60 	bl	8000624 <cs_high>

	/* ---- Init ISM330DHCX (Mode 3) ---- */
	//spi2_set_mode3();
	uint8_t who_ism = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	( void ) dev_read(&ISM, DHCX_WHO_AM_I, &who_ism, 1);   // expect 0x6B
 800096a:	f107 0277 	add.w	r2, r7, #119	@ 0x77
 800096e:	2301      	movs	r3, #1
 8000970:	210f      	movs	r1, #15
 8000972:	4863      	ldr	r0, [pc, #396]	@ (8000b00 <main+0x20c>)
 8000974:	f7ff fe94 	bl	80006a0 <dev_read>

	uint8_t v;
	v = 0x44; (void) dev_write(&ISM, DHCX_CTRL3_C, &v, 1); // BDU=1, IF_INC=1
 8000978:	2344      	movs	r3, #68	@ 0x44
 800097a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800097e:	f107 0276 	add.w	r2, r7, #118	@ 0x76
 8000982:	2301      	movs	r3, #1
 8000984:	2112      	movs	r1, #18
 8000986:	485e      	ldr	r0, [pc, #376]	@ (8000b00 <main+0x20c>)
 8000988:	f7ff fe5c 	bl	8000644 <dev_write>
	v = 0x40; (void) dev_write(&ISM, DHCX_CTRL1_XL, &v, 1); // XL 104 Hz, ±2g
 800098c:	2340      	movs	r3, #64	@ 0x40
 800098e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8000992:	f107 0276 	add.w	r2, r7, #118	@ 0x76
 8000996:	2301      	movs	r3, #1
 8000998:	2110      	movs	r1, #16
 800099a:	4859      	ldr	r0, [pc, #356]	@ (8000b00 <main+0x20c>)
 800099c:	f7ff fe52 	bl	8000644 <dev_write>
	v = 0x40; (void) dev_write(&ISM, DHCX_CTRL2_G,  &v, 1); // G  104 Hz (optional)
 80009a0:	2340      	movs	r3, #64	@ 0x40
 80009a2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80009a6:	f107 0276 	add.w	r2, r7, #118	@ 0x76
 80009aa:	2301      	movs	r3, #1
 80009ac:	2111      	movs	r1, #17
 80009ae:	4854      	ldr	r0, [pc, #336]	@ (8000b00 <main+0x20c>)
 80009b0:	f7ff fe48 	bl	8000644 <dev_write>

	/* ---- Init IIS3DWB (Mode 0) ---- */
	iis3dwb_init(&DWB);
 80009b4:	4851      	ldr	r0, [pc, #324]	@ (8000afc <main+0x208>)
 80009b6:	f7ff feb9 	bl	800072c <iis3dwb_init>

	/* Return SPI to mode-0 so your loop can start with DWB */
	//spi2_set_mode0();

	/* Greeting */
	const char *hello = "VCP alive\r\n";
 80009ba:	4b52      	ldr	r3, [pc, #328]	@ (8000b04 <main+0x210>)
 80009bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), 100);
 80009c0:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80009c4:	f7ff fc58 	bl	8000278 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	2364      	movs	r3, #100	@ 0x64
 80009ce:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80009d2:	484d      	ldr	r0, [pc, #308]	@ (8000b08 <main+0x214>)
 80009d4:	f00a fb46 	bl	800b064 <HAL_UART_Transmit>





	uint8_t who = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	HAL_I2C_Mem_Read(&hi2c2, stts22h_addr, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 100);
 80009de:	4b45      	ldr	r3, [pc, #276]	@ (8000af4 <main+0x200>)
 80009e0:	8819      	ldrh	r1, [r3, #0]
 80009e2:	2364      	movs	r3, #100	@ 0x64
 80009e4:	9302      	str	r3, [sp, #8]
 80009e6:	2301      	movs	r3, #1
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	f107 0375 	add.w	r3, r7, #117	@ 0x75
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	2201      	movs	r2, #1
 80009f4:	4845      	ldr	r0, [pc, #276]	@ (8000b0c <main+0x218>)
 80009f6:	f004 fba3 	bl	8005140 <HAL_I2C_Mem_Read>
	  {
	      /* -------- IIS3DWB accel (SPI2, mode-0) -------- */
	      //spi2_set_mode0();   // keep if ISM needs mode-3; delete if both work in mode-0

	      uint8_t st;
	      if (dev_read(&DWB,DWB_STATUS, &st, 1) == HAL_OK && (st & 0x01))
 80009fa:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80009fe:	2301      	movs	r3, #1
 8000a00:	211e      	movs	r1, #30
 8000a02:	483e      	ldr	r0, [pc, #248]	@ (8000afc <main+0x208>)
 8000a04:	f7ff fe4c 	bl	80006a0 <dev_read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 81c2 	bne.w	8000d94 <main+0x4a0>
 8000a10:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 81bb 	beq.w	8000d94 <main+0x4a0>
	      {
	          uint8_t d[6];
	          if (dev_read(&DWB,DWB_OUTX_L, d, 6) == HAL_OK)
 8000a1e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000a22:	2306      	movs	r3, #6
 8000a24:	2128      	movs	r1, #40	@ 0x28
 8000a26:	4835      	ldr	r0, [pc, #212]	@ (8000afc <main+0x208>)
 8000a28:	f7ff fe3a 	bl	80006a0 <dev_read>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 81b0 	bne.w	8000d94 <main+0x4a0>
	          {
	              int16_t x = (int16_t)((uint16_t)d[1] << 8 | d[0]);
 8000a34:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
	              int16_t y = (int16_t)((uint16_t)d[3] << 8 | d[2]);
 8000a4a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
	              int16_t z = (int16_t)((uint16_t)d[5] << 8 | d[4]);
 8000a60:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6

	              int32_t x_mg_i = ((int32_t)x * 61 + (x >= 0 ? 500 : -500)) / 1000;
 8000a76:	f9b7 20ea 	ldrsh.w	r2, [r7, #234]	@ 0xea
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	f9b7 20ea 	ldrsh.w	r2, [r7, #234]	@ 0xea
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	db02      	blt.n	8000a92 <main+0x19e>
 8000a8c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a90:	e000      	b.n	8000a94 <main+0x1a0>
 8000a92:	4a1f      	ldr	r2, [pc, #124]	@ (8000b10 <main+0x21c>)
 8000a94:	4413      	add	r3, r2
 8000a96:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <main+0x220>)
 8000a98:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9c:	1192      	asrs	r2, r2, #6
 8000a9e:	17db      	asrs	r3, r3, #31
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	              int32_t y_mg_i = ((int32_t)y * 61 + (y >= 0 ? 500 : -500)) / 1000;
 8000aa6:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	@ 0xe8
 8000aaa:	4613      	mov	r3, r2
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	@ 0xe8
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	db02      	blt.n	8000ac2 <main+0x1ce>
 8000abc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ac0:	e000      	b.n	8000ac4 <main+0x1d0>
 8000ac2:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <main+0x21c>)
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <main+0x220>)
 8000ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8000acc:	1192      	asrs	r2, r2, #6
 8000ace:	17db      	asrs	r3, r3, #31
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	              int32_t z_mg_i = ((int32_t)z * 61 + (z >= 0 ? 500 : -500)) / 1000;
 8000ad6:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	@ 0xe6
 8000ada:	4613      	mov	r3, r2
 8000adc:	011b      	lsls	r3, r3, #4
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	@ 0xe6
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	db15      	blt.n	8000b18 <main+0x224>
 8000aec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000af0:	e013      	b.n	8000b1a <main+0x226>
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000
 8000af8:	200002c8 	.word	0x200002c8
 8000afc:	20000004 	.word	0x20000004
 8000b00:	20000010 	.word	0x20000010
 8000b04:	0800c89c 	.word	0x0800c89c
 8000b08:	200004c0 	.word	0x200004c0
 8000b0c:	20000184 	.word	0x20000184
 8000b10:	fffffe0c 	.word	0xfffffe0c
 8000b14:	10624dd3 	.word	0x10624dd3
 8000b18:	4ade      	ldr	r2, [pc, #888]	@ (8000e94 <main+0x5a0>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4ade      	ldr	r2, [pc, #888]	@ (8000e98 <main+0x5a4>)
 8000b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b22:	1192      	asrs	r2, r2, #6
 8000b24:	17db      	asrs	r3, r3, #31
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8


	              int32_t gmag_mg = (int32_t)lroundf(
	                  sqrtf( (float)x_mg_i * (float)x_mg_i +
 8000b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b44:	ee27 7a27 	vmul.f32	s14, s14, s15
	                         (float)y_mg_i * (float)y_mg_i +
 8000b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
	                  sqrtf( (float)x_mg_i * (float)x_mg_i +
 8000b64:	ee37 7a27 	vadd.f32	s14, s14, s15
	                         (float)z_mg_i * (float)z_mg_i ));
 8000b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
	              int32_t gmag_mg = (int32_t)lroundf(
 8000b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b88:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8c:	f00b fc94 	bl	800c4b8 <sqrtf>
 8000b90:	eef0 7a40 	vmov.f32	s15, s0
 8000b94:	eeb0 0a67 	vmov.f32	s0, s15
 8000b98:	f00b fcac 	bl	800c4f4 <lroundf>
 8000b9c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	              /* Convert mg -> g for angle math */
	              float xf = x_mg_i * 0.001f;
 8000ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bac:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8000e9c <main+0x5a8>
 8000bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb4:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
	              float yf = y_mg_i * 0.001f;
 8000bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000bbc:	ee07 3a90 	vmov	s15, r3
 8000bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc4:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8000e9c <main+0x5a8>
 8000bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bcc:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
	              float zf = z_mg_i * 0.001f;
 8000bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8000e9c <main+0x5a8>
 8000be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be4:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8

	              /* classic tilt from accel-only */
	              float roll_deg  = atan2f(yf, zf) * 57.29578f;
 8000be8:	edd7 0a32 	vldr	s1, [r7, #200]	@ 0xc8
 8000bec:	ed97 0a33 	vldr	s0, [r7, #204]	@ 0xcc
 8000bf0:	f00b fc5f 	bl	800c4b2 <atan2f>
 8000bf4:	eef0 7a40 	vmov.f32	s15, s0
 8000bf8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8000ea0 <main+0x5ac>
 8000bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c00:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	              float pitch_deg = atan2f(-xf, sqrtf(yf*yf + zf*zf)) * 57.29578f;
 8000c04:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8000c08:	eeb1 8a67 	vneg.f32	s16, s15
 8000c0c:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8000c10:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c14:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8000c18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c20:	eeb0 0a67 	vmov.f32	s0, s15
 8000c24:	f00b fc48 	bl	800c4b8 <sqrtf>
 8000c28:	eef0 7a40 	vmov.f32	s15, s0
 8000c2c:	eef0 0a67 	vmov.f32	s1, s15
 8000c30:	eeb0 0a48 	vmov.f32	s0, s16
 8000c34:	f00b fc3d 	bl	800c4b2 <atan2f>
 8000c38:	eef0 7a40 	vmov.f32	s15, s0
 8000c3c:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8000ea0 <main+0x5ac>
 8000c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c44:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0


	              /* keep print integer-only: centi-degrees */
	              int32_t roll_cd  = (int32_t)lroundf(roll_deg  * 100.0f);
 8000c48:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8000c4c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8000ea4 <main+0x5b0>
 8000c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c54:	eeb0 0a67 	vmov.f32	s0, s15
 8000c58:	f00b fc4c 	bl	800c4f4 <lroundf>
 8000c5c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
	              int32_t pitch_cd = (int32_t)lroundf(pitch_deg * 100.0f);
 8000c60:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8000c64:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8000ea4 <main+0x5b0>
 8000c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c70:	f00b fc40 	bl	800c4f4 <lroundf>
 8000c74:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8


	              /* -- temperature over I2C2 (STTS22H) -- */
	              uint8_t tbuf[2];
	              int32_t t_centi = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	              if (HAL_I2C_Mem_Read(&hi2c2, stts22h_addr, 0x06, I2C_MEMADD_SIZE_8BIT, tbuf, 2, 50) == HAL_OK)
 8000c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ea8 <main+0x5b4>)
 8000c80:	8819      	ldrh	r1, [r3, #0]
 8000c82:	2332      	movs	r3, #50	@ 0x32
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	2302      	movs	r3, #2
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2301      	movs	r3, #1
 8000c92:	2206      	movs	r2, #6
 8000c94:	4885      	ldr	r0, [pc, #532]	@ (8000eac <main+0x5b8>)
 8000c96:	f004 fa53 	bl	8005140 <HAL_I2C_Mem_Read>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10e      	bne.n	8000cbe <main+0x3ca>
	              {
	                  int16_t rawt = (int16_t)((uint16_t)tbuf[1] << 8 | tbuf[0]);  // 0.01 °C / LSB
 8000ca0:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	                  t_centi = (int32_t)rawt;
 8000cb6:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8000cba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	              }
	              char line[96];   // <-- add this
	              int n = snprintf(line, sizeof(line),
 8000cbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	@ (8000eb0 <main+0x5bc>)
 8000cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc8:	1152      	asrs	r2, r2, #5
 8000cca:	17db      	asrs	r3, r3, #31
 8000ccc:	1ad1      	subs	r1, r2, r3
	                "DWB-> x=%ld, y=%ld, z=%ld, g=%ld, roll=%ld.%02ld, pitch=%ld.%02ld, t=%ld.%02ld degC \r\n",
	                (long)x_mg_i, (long)y_mg_i, (long)z_mg_i,
	                (long)gmag_mg,
	                (long)(roll_cd/100),  (long)labs(roll_cd % 100),
 8000cce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8000cd2:	4b77      	ldr	r3, [pc, #476]	@ (8000eb0 <main+0x5bc>)
 8000cd4:	fb83 0302 	smull	r0, r3, r3, r2
 8000cd8:	1158      	asrs	r0, r3, #5
 8000cda:	17d3      	asrs	r3, r2, #31
 8000cdc:	1ac3      	subs	r3, r0, r3
 8000cde:	2064      	movs	r0, #100	@ 0x64
 8000ce0:	fb00 f303 	mul.w	r3, r0, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
	              int n = snprintf(line, sizeof(line),
 8000ce6:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000cea:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8000eb0 <main+0x5bc>)
 8000cf4:	fb82 4203 	smull	r4, r2, r2, r3
 8000cf8:	1152      	asrs	r2, r2, #5
 8000cfa:	17db      	asrs	r3, r3, #31
 8000cfc:	1ad4      	subs	r4, r2, r3
	                (long)(pitch_cd/100), (long)labs(pitch_cd % 100),
 8000cfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8000d02:	4b6b      	ldr	r3, [pc, #428]	@ (8000eb0 <main+0x5bc>)
 8000d04:	fb83 5302 	smull	r5, r3, r3, r2
 8000d08:	115d      	asrs	r5, r3, #5
 8000d0a:	17d3      	asrs	r3, r2, #31
 8000d0c:	1aeb      	subs	r3, r5, r3
 8000d0e:	2564      	movs	r5, #100	@ 0x64
 8000d10:	fb05 f303 	mul.w	r3, r5, r3
 8000d14:	1ad3      	subs	r3, r2, r3
	              int n = snprintf(line, sizeof(line),
 8000d16:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8000d1a:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 8000d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000d22:	4a63      	ldr	r2, [pc, #396]	@ (8000eb0 <main+0x5bc>)
 8000d24:	fb82 6203 	smull	r6, r2, r2, r3
 8000d28:	1152      	asrs	r2, r2, #5
 8000d2a:	17db      	asrs	r3, r3, #31
 8000d2c:	1ad6      	subs	r6, r2, r3
	                (long)(t_centi/100),  (long)labs(t_centi % 100));
 8000d2e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d32:	4b5f      	ldr	r3, [pc, #380]	@ (8000eb0 <main+0x5bc>)
 8000d34:	fb83 c302 	smull	ip, r3, r3, r2
 8000d38:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8000d3c:	17d3      	asrs	r3, r2, #31
 8000d3e:	ebac 0303 	sub.w	r3, ip, r3
 8000d42:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8000d46:	fb0c f303 	mul.w	r3, ip, r3
 8000d4a:	1ad3      	subs	r3, r2, r3
	              int n = snprintf(line, sizeof(line),
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	bfb8      	it	lt
 8000d50:	425b      	neglt	r3, r3
 8000d52:	46bc      	mov	ip, r7
 8000d54:	9308      	str	r3, [sp, #32]
 8000d56:	9607      	str	r6, [sp, #28]
 8000d58:	9506      	str	r5, [sp, #24]
 8000d5a:	9405      	str	r4, [sp, #20]
 8000d5c:	9004      	str	r0, [sp, #16]
 8000d5e:	9103      	str	r1, [sp, #12]
 8000d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000d76:	4a4f      	ldr	r2, [pc, #316]	@ (8000eb4 <main+0x5c0>)
 8000d78:	2160      	movs	r1, #96	@ 0x60
 8000d7a:	4660      	mov	r0, ip
 8000d7c:	f00a fed4 	bl	800bb28 <sniprintf>
 8000d80:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
	              HAL_UART_Transmit(&huart2, (uint8_t*)line, (uint16_t)n, 50);
 8000d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4639      	mov	r1, r7
 8000d8c:	2332      	movs	r3, #50	@ 0x32
 8000d8e:	484a      	ldr	r0, [pc, #296]	@ (8000eb8 <main+0x5c4>)
 8000d90:	f00a f968 	bl	800b064 <HAL_UART_Transmit>
	      }

	      /* -------- ISM330DHCX accel (SPI2, mode-3) -------- */
	     // spi2_set_mode3();   // switch SPI2 to ISM mode (keep only if needed)

	      uint8_t s2 = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	      if (dev_read(&ISM, DHCX_STATUS, &s2, 1) == HAL_OK && (s2 & 0x01))   // XLDA
 8000d9a:	f107 0273 	add.w	r2, r7, #115	@ 0x73
 8000d9e:	2301      	movs	r3, #1
 8000da0:	211e      	movs	r1, #30
 8000da2:	4846      	ldr	r0, [pc, #280]	@ (8000ebc <main+0x5c8>)
 8000da4:	f7ff fc7c 	bl	80006a0 <dev_read>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 8181 	bne.w	80010b2 <main+0x7be>
 8000db0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 817a 	beq.w	80010b2 <main+0x7be>
	      {
	          uint8_t b[6];
	          if (dev_read(&ISM, DHCX_OUTX_L_A, b, 6) == HAL_OK)
 8000dbe:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	2128      	movs	r1, #40	@ 0x28
 8000dc6:	483d      	ldr	r0, [pc, #244]	@ (8000ebc <main+0x5c8>)
 8000dc8:	f7ff fc6a 	bl	80006a0 <dev_read>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 816f 	bne.w	80010b2 <main+0x7be>
	          {
	              int16_t ix = (int16_t)((uint16_t)b[1] << 8 | b[0]);
 8000dd4:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
	              int16_t iy = (int16_t)((uint16_t)b[3] << 8 | b[2]);
 8000dea:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	              int16_t iz = (int16_t)((uint16_t)b[5] << 8 | b[4]);
 8000e00:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

	              int32_t ix_mg = ((int32_t)ix * 61 + (ix >= 0 ? 500 : -500)) / 1000;
 8000e16:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	db02      	blt.n	8000e32 <main+0x53e>
 8000e2c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e30:	e000      	b.n	8000e34 <main+0x540>
 8000e32:	4a18      	ldr	r2, [pc, #96]	@ (8000e94 <main+0x5a0>)
 8000e34:	4413      	add	r3, r2
 8000e36:	4a18      	ldr	r2, [pc, #96]	@ (8000e98 <main+0x5a4>)
 8000e38:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3c:	1192      	asrs	r2, r2, #6
 8000e3e:	17db      	asrs	r3, r3, #31
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	              int32_t iy_mg = ((int32_t)iy * 61 + (iy >= 0 ? 500 : -500)) / 1000;
 8000e46:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	db02      	blt.n	8000e62 <main+0x56e>
 8000e5c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e60:	e000      	b.n	8000e64 <main+0x570>
 8000e62:	4a0c      	ldr	r2, [pc, #48]	@ (8000e94 <main+0x5a0>)
 8000e64:	4413      	add	r3, r2
 8000e66:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <main+0x5a4>)
 8000e68:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6c:	1192      	asrs	r2, r2, #6
 8000e6e:	17db      	asrs	r3, r3, #31
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	              int32_t iz_mg = ((int32_t)iz * 61 + (iz >= 0 ? 500 : -500)) / 1000;
 8000e76:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	db19      	blt.n	8000ec0 <main+0x5cc>
 8000e8c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e90:	e017      	b.n	8000ec2 <main+0x5ce>
 8000e92:	bf00      	nop
 8000e94:	fffffe0c 	.word	0xfffffe0c
 8000e98:	10624dd3 	.word	0x10624dd3
 8000e9c:	3a83126f 	.word	0x3a83126f
 8000ea0:	42652ee1 	.word	0x42652ee1
 8000ea4:	42c80000 	.word	0x42c80000
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000184 	.word	0x20000184
 8000eb0:	51eb851f 	.word	0x51eb851f
 8000eb4:	0800c8a8 	.word	0x0800c8a8
 8000eb8:	200004c0 	.word	0x200004c0
 8000ebc:	20000010 	.word	0x20000010
 8000ec0:	4a7e      	ldr	r2, [pc, #504]	@ (80010bc <main+0x7c8>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a7e      	ldr	r2, [pc, #504]	@ (80010c0 <main+0x7cc>)
 8000ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eca:	1192      	asrs	r2, r2, #6
 8000ecc:	17db      	asrs	r3, r3, #31
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


	              int32_t gmag_mg = (int32_t)lroundf(
	             	                  sqrtf( (float)ix_mg * (float)ix_mg +
 8000ed4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eec:	ee27 7a27 	vmul.f32	s14, s14, s15
	             	                         (float)iy_mg * (float)iy_mg +
 8000ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000efc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
	             	                  sqrtf( (float)ix_mg * (float)ix_mg +
 8000f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
	             	                         (float)iz_mg * (float)iz_mg ));
 8000f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
	              int32_t gmag_mg = (int32_t)lroundf(
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	eeb0 0a67 	vmov.f32	s0, s15
 8000f34:	f00b fac0 	bl	800c4b8 <sqrtf>
 8000f38:	eef0 7a40 	vmov.f32	s15, s0
 8000f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f40:	f00b fad8 	bl	800c4f4 <lroundf>
 8000f44:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

	             	              /* Convert mg -> g for angle math */
	             	              float xf = ix_mg * 0.001f;
 8000f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f54:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80010c4 <main+0x7d0>
 8000f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	             	              float yf = iy_mg * 0.001f;
 8000f60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80010c4 <main+0x7d0>
 8000f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f74:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	             	              float zf = iz_mg * 0.001f;
 8000f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80010c4 <main+0x7d0>
 8000f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c

	             	              /* classic tilt from accel-only */
	             	              float roll_deg  = atan2f(yf, zf) * 57.29578f;
 8000f90:	edd7 0a23 	vldr	s1, [r7, #140]	@ 0x8c
 8000f94:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 8000f98:	f00b fa8b 	bl	800c4b2 <atan2f>
 8000f9c:	eef0 7a40 	vmov.f32	s15, s0
 8000fa0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80010c8 <main+0x7d4>
 8000fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa8:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	             	              float pitch_deg = atan2f(-xf, sqrtf(yf*yf + zf*zf)) * 57.29578f;
 8000fac:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8000fb0:	eeb1 8a67 	vneg.f32	s16, s15
 8000fb4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000fb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000fbc:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000fc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	f00b fa74 	bl	800c4b8 <sqrtf>
 8000fd0:	eef0 7a40 	vmov.f32	s15, s0
 8000fd4:	eef0 0a67 	vmov.f32	s1, s15
 8000fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8000fdc:	f00b fa69 	bl	800c4b2 <atan2f>
 8000fe0:	eef0 7a40 	vmov.f32	s15, s0
 8000fe4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80010c8 <main+0x7d4>
 8000fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fec:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84


	             	              /* keep print integer-only: centi-degrees */
	             	              int32_t roll_cd  = (int32_t)lroundf(roll_deg  * 100.0f);
 8000ff0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ff4:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80010cc <main+0x7d8>
 8000ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8001000:	f00b fa78 	bl	800c4f4 <lroundf>
 8001004:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	             	              int32_t pitch_cd = (int32_t)lroundf(pitch_deg * 100.0f);
 8001008:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800100c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80010cc <main+0x7d8>
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	eeb0 0a67 	vmov.f32	s0, s15
 8001018:	f00b fa6c 	bl	800c4f4 <lroundf>
 800101c:	67f8      	str	r0, [r7, #124]	@ 0x7c




	              char line2[96];
	              int n2 = snprintf(line2, sizeof(line2),
 800101e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001022:	4a2b      	ldr	r2, [pc, #172]	@ (80010d0 <main+0x7dc>)
 8001024:	fb82 1203 	smull	r1, r2, r2, r3
 8001028:	1152      	asrs	r2, r2, #5
 800102a:	17db      	asrs	r3, r3, #31
 800102c:	1ad1      	subs	r1, r2, r3
	                "ISM-> ax=%ld, ay=%ld, az=%ld, g=%ld, roll=%ld.%02ld, pitch=%ld.%02ld\r\n",
	                (long)ix_mg, (long)iy_mg, (long)iz_mg,
	                (long)gmag_mg,
	                (long)(roll_cd/100),  (long)labs(roll_cd % 100),
 800102e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001032:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <main+0x7dc>)
 8001034:	fb83 0302 	smull	r0, r3, r3, r2
 8001038:	1158      	asrs	r0, r3, #5
 800103a:	17d3      	asrs	r3, r2, #31
 800103c:	1ac3      	subs	r3, r0, r3
 800103e:	2064      	movs	r0, #100	@ 0x64
 8001040:	fb00 f303 	mul.w	r3, r0, r3
 8001044:	1ad3      	subs	r3, r2, r3
	              int n2 = snprintf(line2, sizeof(line2),
 8001046:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800104a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800104e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001050:	4a1f      	ldr	r2, [pc, #124]	@ (80010d0 <main+0x7dc>)
 8001052:	fb82 4203 	smull	r4, r2, r2, r3
 8001056:	1152      	asrs	r2, r2, #5
 8001058:	17db      	asrs	r3, r3, #31
 800105a:	1ad4      	subs	r4, r2, r3
	                (long)(pitch_cd/100), (long)labs(pitch_cd % 100));
 800105c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <main+0x7dc>)
 8001060:	fb83 5302 	smull	r5, r3, r3, r2
 8001064:	115d      	asrs	r5, r3, #5
 8001066:	17d3      	asrs	r3, r2, #31
 8001068:	1aeb      	subs	r3, r5, r3
 800106a:	2564      	movs	r5, #100	@ 0x64
 800106c:	fb05 f303 	mul.w	r3, r5, r3
 8001070:	1ad3      	subs	r3, r2, r3
	              int n2 = snprintf(line2, sizeof(line2),
 8001072:	2b00      	cmp	r3, #0
 8001074:	bfb8      	it	lt
 8001076:	425b      	neglt	r3, r3
 8001078:	463d      	mov	r5, r7
 800107a:	9306      	str	r3, [sp, #24]
 800107c:	9405      	str	r4, [sp, #20]
 800107e:	9004      	str	r0, [sp, #16]
 8001080:	9103      	str	r1, [sp, #12]
 8001082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001098:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <main+0x7e0>)
 800109a:	2160      	movs	r1, #96	@ 0x60
 800109c:	4628      	mov	r0, r5
 800109e:	f00a fd43 	bl	800bb28 <sniprintf>
 80010a2:	67b8      	str	r0, [r7, #120]	@ 0x78
	              HAL_UART_Transmit(&huart2, (uint8_t*)line2, (uint16_t)n2, 50);
 80010a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4639      	mov	r1, r7
 80010aa:	2332      	movs	r3, #50	@ 0x32
 80010ac:	480a      	ldr	r0, [pc, #40]	@ (80010d8 <main+0x7e4>)
 80010ae:	f009 ffd9 	bl	800b064 <HAL_UART_Transmit>
	      }

	      /* Back to IIS3DWB mode for the next loop (only needed if ISM really needs mode-3) */
	      //spi2_set_mode0();

	      HAL_Delay(100);   // one delay for both sensors
 80010b2:	2064      	movs	r0, #100	@ 0x64
 80010b4:	f001 fc4e 	bl	8002954 <HAL_Delay>
	  {
 80010b8:	e49f      	b.n	80009fa <main+0x106>
 80010ba:	bf00      	nop
 80010bc:	fffffe0c 	.word	0xfffffe0c
 80010c0:	10624dd3 	.word	0x10624dd3
 80010c4:	3a83126f 	.word	0x3a83126f
 80010c8:	42652ee1 	.word	0x42652ee1
 80010cc:	42c80000 	.word	0x42c80000
 80010d0:	51eb851f 	.word	0x51eb851f
 80010d4:	0800c900 	.word	0x0800c900
 80010d8:	200004c0 	.word	0x200004c0

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09e      	sub	sp, #120	@ 0x78
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2260      	movs	r2, #96	@ 0x60
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00a fd52 	bl	800bb94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001100:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001104:	f004 fd96 	bl	8005c34 <HAL_PWREx_ControlVoltageScaling>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800110e:	f000 fb73 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001112:	232b      	movs	r3, #43	@ 0x2b
 8001114:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001116:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001126:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800112c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	2303      	movs	r3, #3
 800113c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001146:	230a      	movs	r3, #10
 8001148:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800114a:	2302      	movs	r3, #2
 800114c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800114e:	2302      	movs	r3, #2
 8001150:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001152:	2301      	movs	r3, #1
 8001154:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001156:	230c      	movs	r3, #12
 8001158:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	4618      	mov	r0, r3
 8001164:	f004 fe22 	bl	8005dac <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800116e:	f000 fb43 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	231f      	movs	r3, #31
 8001174:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2303      	movs	r3, #3
 8001178:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	2104      	movs	r1, #4
 800118e:	4618      	mov	r0, r3
 8001190:	f005 fce8 	bl	8006b64 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800119a:	f000 fb2d 	bl	80017f8 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3778      	adds	r7, #120	@ 0x78
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_I2C2_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <MX_I2C2_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_I2C2_Init+0x74>)
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <MX_I2C2_Init+0x7c>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_I2C2_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_I2C2_Init+0x74>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_I2C2_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_I2C2_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C2_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C2_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <MX_I2C2_Init+0x74>)
 80011e4:	f003 fdfc 	bl	8004de0 <HAL_I2C_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ee:	f000 fb03 	bl	80017f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4809      	ldr	r0, [pc, #36]	@ (800121c <MX_I2C2_Init+0x74>)
 80011f6:	f004 fc85 	bl	8005b04 <HAL_I2CEx_ConfigAnalogFilter>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001200:	f000 fafa 	bl	80017f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_I2C2_Init+0x74>)
 8001208:	f004 fcc7 	bl	8005b9a <HAL_I2CEx_ConfigDigitalFilter>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 faf1 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000184 	.word	0x20000184
 8001220:	40005800 	.word	0x40005800
 8001224:	00f07bff 	.word	0x00f07bff

08001228 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001238:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <MX_SPI2_Init+0xd4>)
 800123a:	4a31      	ldr	r2, [pc, #196]	@ (8001300 <MX_SPI2_Init+0xd8>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001240:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001244:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800124c:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <MX_SPI2_Init+0xd4>)
 800124e:	2207      	movs	r2, #7
 8001250:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <MX_SPI2_Init+0xd4>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800125e:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001260:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001264:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001268:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800126c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001274:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_SPI2_Init+0xd4>)
 800127c:	2200      	movs	r2, #0
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001282:	2207      	movs	r2, #7
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001290:	2200      	movs	r2, #0
 8001292:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_SPI2_Init+0xd4>)
 8001296:	2200      	movs	r2, #0
 8001298:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_SPI2_Init+0xd4>)
 800129c:	2200      	movs	r2, #0
 800129e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012c6:	f008 fcfd 	bl	8009cc4 <HAL_SPI_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 80012d0:	f000 fa92 	bl	80017f8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_SPI2_Init+0xdc>)
 80012da:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_SPI2_Init+0xd4>)
 80012e6:	f009 fe2c 	bl	800af42 <HAL_SPIEx_SetConfigAutonomousMode>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80012f0:	f000 fa82 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200002c8 	.word	0x200002c8
 8001300:	40003800 	.word	0x40003800
 8001304:	10010000 	.word	0x10010000

08001308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800130c:	4b23      	ldr	r3, [pc, #140]	@ (800139c <MX_USART2_UART_Init+0x94>)
 800130e:	4a24      	ldr	r2, [pc, #144]	@ (80013a0 <MX_USART2_UART_Init+0x98>)
 8001310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001312:	4b22      	ldr	r3, [pc, #136]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <MX_USART2_UART_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_USART2_UART_Init+0x94>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001338:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_USART2_UART_Init+0x94>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_USART2_UART_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4812      	ldr	r0, [pc, #72]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001354:	f009 fe36 	bl	800afc4 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800135e:	f000 fa4b 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001366:	f00a fb15 	bl	800b994 <HAL_UARTEx_SetTxFifoThreshold>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001370:	f000 fa42 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4809      	ldr	r0, [pc, #36]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001378:	f00a fb4a 	bl	800ba10 <HAL_UARTEx_SetRxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001382:	f000 fa39 	bl	80017f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_USART2_UART_Init+0x94>)
 8001388:	f00a facb 	bl	800b922 <HAL_UARTEx_DisableFifoMode>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001392:	f000 fa31 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200004c0 	.word	0x200004c0
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	@ 0x38
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	4bbf      	ldr	r3, [pc, #764]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c0:	4abd      	ldr	r2, [pc, #756]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ca:	4bbb      	ldr	r3, [pc, #748]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	623b      	str	r3, [r7, #32]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013d8:	4bb7      	ldr	r3, [pc, #732]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013de:	4ab6      	ldr	r2, [pc, #728]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013e8:	4bb3      	ldr	r3, [pc, #716]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f6:	4bb0      	ldr	r3, [pc, #704]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	4aae      	ldr	r2, [pc, #696]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80013fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001402:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001406:	4bac      	ldr	r3, [pc, #688]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4ba8      	ldr	r3, [pc, #672]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141a:	4aa7      	ldr	r2, [pc, #668]	@ (80016b8 <MX_GPIO_Init+0x314>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001424:	4ba4      	ldr	r3, [pc, #656]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4ba1      	ldr	r3, [pc, #644]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001438:	4a9f      	ldr	r2, [pc, #636]	@ (80016b8 <MX_GPIO_Init+0x314>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001442:	4b9d      	ldr	r3, [pc, #628]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001450:	4b99      	ldr	r3, [pc, #612]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001456:	4a98      	ldr	r2, [pc, #608]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001460:	4b95      	ldr	r3, [pc, #596]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b92      	ldr	r3, [pc, #584]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001474:	4a90      	ldr	r2, [pc, #576]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800147e:	4b8e      	ldr	r3, [pc, #568]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148c:	4b8a      	ldr	r3, [pc, #552]	@ (80016b8 <MX_GPIO_Init+0x314>)
 800148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001492:	4a89      	ldr	r2, [pc, #548]	@ (80016b8 <MX_GPIO_Init+0x314>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800149c:	4b86      	ldr	r3, [pc, #536]	@ (80016b8 <MX_GPIO_Init+0x314>)
 800149e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014aa:	4b83      	ldr	r3, [pc, #524]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80014ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b0:	4a81      	ldr	r2, [pc, #516]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80014b2:	f043 0320 	orr.w	r3, r3, #32
 80014b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ba:	4b7f      	ldr	r3, [pc, #508]	@ (80016b8 <MX_GPIO_Init+0x314>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 80014ce:	487b      	ldr	r0, [pc, #492]	@ (80016bc <MX_GPIO_Init+0x318>)
 80014d0:	f003 fc32 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2181      	movs	r1, #129	@ 0x81
 80014d8:	4879      	ldr	r0, [pc, #484]	@ (80016c0 <MX_GPIO_Init+0x31c>)
 80014da:	f003 fc2d 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80014e4:	4875      	ldr	r0, [pc, #468]	@ (80016bc <MX_GPIO_Init+0x318>)
 80014e6:	f003 fc27 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2102      	movs	r1, #2
 80014ee:	4875      	ldr	r0, [pc, #468]	@ (80016c4 <MX_GPIO_Init+0x320>)
 80014f0:	f003 fc22 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014fa:	4873      	ldr	r0, [pc, #460]	@ (80016c8 <MX_GPIO_Init+0x324>)
 80014fc:	f003 fc1c 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8001500:	2340      	movs	r3, #64	@ 0x40
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001504:	4b71      	ldr	r3, [pc, #452]	@ (80016cc <MX_GPIO_Init+0x328>)
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	486b      	ldr	r0, [pc, #428]	@ (80016c0 <MX_GPIO_Init+0x31c>)
 8001514:	f003 f952 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8001518:	f248 0362 	movw	r3, #32866	@ 0x8062
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151e:	2303      	movs	r3, #3
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4868      	ldr	r0, [pc, #416]	@ (80016d0 <MX_GPIO_Init+0x32c>)
 800152e:	f003 f945 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 8001532:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	485c      	ldr	r0, [pc, #368]	@ (80016bc <MX_GPIO_Init+0x318>)
 800154c:	f003 f936 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8001550:	2324      	movs	r3, #36	@ 0x24
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001554:	2303      	movs	r3, #3
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4857      	ldr	r0, [pc, #348]	@ (80016c0 <MX_GPIO_Init+0x31c>)
 8001564:	f003 f92a 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8001568:	f24a 2301 	movw	r3, #41473	@ 0xa201
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4855      	ldr	r0, [pc, #340]	@ (80016d4 <MX_GPIO_Init+0x330>)
 800157e:	f003 f91d 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8001582:	2381      	movs	r3, #129	@ 0x81
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4849      	ldr	r0, [pc, #292]	@ (80016c0 <MX_GPIO_Init+0x31c>)
 800159a:	f003 f90f 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 800159e:	2302      	movs	r3, #2
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4843      	ldr	r0, [pc, #268]	@ (80016c4 <MX_GPIO_Init+0x320>)
 80015b6:	f003 f901 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 80015ba:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c0:	2303      	movs	r3, #3
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	483b      	ldr	r0, [pc, #236]	@ (80016bc <MX_GPIO_Init+0x318>)
 80015d0:	f003 f8f4 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 80015d4:	2381      	movs	r3, #129	@ 0x81
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d8:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <MX_GPIO_Init+0x328>)
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4837      	ldr	r0, [pc, #220]	@ (80016c4 <MX_GPIO_Init+0x320>)
 80015e8:	f003 f8e8 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 80015ec:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f2:	4b36      	ldr	r3, [pc, #216]	@ (80016cc <MX_GPIO_Init+0x328>)
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4835      	ldr	r0, [pc, #212]	@ (80016d8 <MX_GPIO_Init+0x334>)
 8001602:	f003 f8db 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8001606:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160c:	2303      	movs	r3, #3
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	482b      	ldr	r0, [pc, #172]	@ (80016c8 <MX_GPIO_Init+0x324>)
 800161c:	f003 f8ce 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8001620:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001626:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <MX_GPIO_Init+0x328>)
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	4824      	ldr	r0, [pc, #144]	@ (80016c8 <MX_GPIO_Init+0x324>)
 8001636:	f003 f8c1 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 800163a:	f240 1301 	movw	r3, #257	@ 0x101
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	4823      	ldr	r0, [pc, #140]	@ (80016dc <MX_GPIO_Init+0x338>)
 8001650:	f003 f8b4 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 8001654:	230c      	movs	r3, #12
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001658:	2303      	movs	r3, #3
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	481e      	ldr	r0, [pc, #120]	@ (80016e0 <MX_GPIO_Init+0x33c>)
 8001668:	f003 f8a8 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 800166c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	4810      	ldr	r0, [pc, #64]	@ (80016c8 <MX_GPIO_Init+0x324>)
 8001686:	f003 f899 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 800168a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_GPIO_Init+0x328>)
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <MX_GPIO_Init+0x330>)
 80016a0:	f003 f88c 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 80016a4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b6:	e015      	b.n	80016e4 <MX_GPIO_Init+0x340>
 80016b8:	46020c00 	.word	0x46020c00
 80016bc:	42021c00 	.word	0x42021c00
 80016c0:	42022000 	.word	0x42022000
 80016c4:	42021000 	.word	0x42021000
 80016c8:	42021400 	.word	0x42021400
 80016cc:	10110000 	.word	0x10110000
 80016d0:	42021800 	.word	0x42021800
 80016d4:	42020c00 	.word	0x42020c00
 80016d8:	42020400 	.word	0x42020400
 80016dc:	42020000 	.word	0x42020000
 80016e0:	42020800 	.word	0x42020800
 80016e4:	4619      	mov	r1, r3
 80016e6:	4842      	ldr	r0, [pc, #264]	@ (80017f0 <MX_GPIO_Init+0x44c>)
 80016e8:	f003 f868 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 80016ec:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f2:	2303      	movs	r3, #3
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	483c      	ldr	r0, [pc, #240]	@ (80017f4 <MX_GPIO_Init+0x450>)
 8001702:	f003 f85b 	bl	80047bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2107      	movs	r1, #7
 800170a:	200b      	movs	r0, #11
 800170c:	f001 fa22 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001710:	200b      	movs	r0, #11
 8001712:	f001 fa39 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2107      	movs	r1, #7
 800171a:	200c      	movs	r0, #12
 800171c:	f001 fa1a 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001720:	200c      	movs	r0, #12
 8001722:	f001 fa31 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2107      	movs	r1, #7
 800172a:	200d      	movs	r0, #13
 800172c:	f001 fa12 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001730:	200d      	movs	r0, #13
 8001732:	f001 fa29 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2107      	movs	r1, #7
 800173a:	200e      	movs	r0, #14
 800173c:	f001 fa0a 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001740:	200e      	movs	r0, #14
 8001742:	f001 fa21 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2107      	movs	r1, #7
 800174a:	200f      	movs	r0, #15
 800174c:	f001 fa02 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001750:	200f      	movs	r0, #15
 8001752:	f001 fa19 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2107      	movs	r1, #7
 800175a:	2010      	movs	r0, #16
 800175c:	f001 f9fa 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001760:	2010      	movs	r0, #16
 8001762:	f001 fa11 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2107      	movs	r1, #7
 800176a:	2011      	movs	r0, #17
 800176c:	f001 f9f2 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8001770:	2011      	movs	r0, #17
 8001772:	f001 fa09 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2107      	movs	r1, #7
 800177a:	2012      	movs	r0, #18
 800177c:	f001 f9ea 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8001780:	2012      	movs	r0, #18
 8001782:	f001 fa01 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2107      	movs	r1, #7
 800178a:	2013      	movs	r0, #19
 800178c:	f001 f9e2 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001790:	2013      	movs	r0, #19
 8001792:	f001 f9f9 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2107      	movs	r1, #7
 800179a:	2014      	movs	r0, #20
 800179c:	f001 f9da 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 80017a0:	2014      	movs	r0, #20
 80017a2:	f001 f9f1 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2107      	movs	r1, #7
 80017aa:	2015      	movs	r0, #21
 80017ac:	f001 f9d2 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 80017b0:	2015      	movs	r0, #21
 80017b2:	f001 f9e9 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2107      	movs	r1, #7
 80017ba:	2016      	movs	r0, #22
 80017bc:	f001 f9ca 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 80017c0:	2016      	movs	r0, #22
 80017c2:	f001 f9e1 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2107      	movs	r1, #7
 80017ca:	2018      	movs	r0, #24
 80017cc:	f001 f9c2 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80017d0:	2018      	movs	r0, #24
 80017d2:	f001 f9d9 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2107      	movs	r1, #7
 80017da:	2019      	movs	r0, #25
 80017dc:	f001 f9ba 	bl	8002b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 80017e0:	2019      	movs	r0, #25
 80017e2:	f001 f9d1 	bl	8002b88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	@ 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	42020400 	.word	0x42020400
 80017f4:	42021000 	.word	0x42021000

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <Error_Handler+0x8>

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_MspInit+0x38>)
 800180c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001810:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <HAL_MspInit+0x38>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_MspInit+0x38>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001828:	f004 fa90 	bl	8005d4c <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 800182c:	f004 fa9e 	bl	8005d6c <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8001830:	f004 faac 	bl	8005d8c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	46020c00 	.word	0x46020c00

08001840 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0c2      	sub	sp, #264	@ 0x108
 8001844:	af00      	add	r7, sp, #0
 8001846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800184a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800184e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001860:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001864:	22c8      	movs	r2, #200	@ 0xc8
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f00a f993 	bl	800bb94 <memset>
  if(hi2c->Instance==I2C1)
 800186e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4aaa      	ldr	r2, [pc, #680]	@ (8001b24 <HAL_I2C_MspInit+0x2e4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d147      	bne.n	8001910 <HAL_I2C_MspInit+0xd0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001880:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fd34 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80018a2:	f7ff ffa9 	bl	80017f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4ba0      	ldr	r3, [pc, #640]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ac:	4a9e      	ldr	r2, [pc, #632]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80018b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80018c4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80018c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018cc:	2312      	movs	r3, #18
 80018ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018de:	2304      	movs	r3, #4
 80018e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4890      	ldr	r0, [pc, #576]	@ (8001b2c <HAL_I2C_MspInit+0x2ec>)
 80018ec:	f002 ff66 	bl	80047bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80018f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018f6:	4a8c      	ldr	r2, [pc, #560]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80018f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001900:	4b89      	ldr	r3, [pc, #548]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 8001902:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001906:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800190e:	e16d      	b.n	8001bec <HAL_I2C_MspInit+0x3ac>
  else if(hi2c->Instance==I2C2)
 8001910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a84      	ldr	r2, [pc, #528]	@ (8001b30 <HAL_I2C_MspInit+0x2f0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	f040 8114 	bne.w	8001b4c <HAL_I2C_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001924:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001936:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800193a:	4618      	mov	r0, r3
 800193c:	f005 fce2 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8001946:	f7ff ff57 	bl	80017f8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800194a:	4b77      	ldr	r3, [pc, #476]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 800194c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001950:	4a75      	ldr	r2, [pc, #468]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800195a:	4b73      	ldr	r3, [pc, #460]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 800195c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001968:	4b6f      	ldr	r3, [pc, #444]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 800196a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800196e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001974:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001978:	4b6b      	ldr	r3, [pc, #428]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 800197a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001986:	2301      	movs	r3, #1
 8001988:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	2312      	movs	r3, #18
 800198e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800199e:	2304      	movs	r3, #4
 80019a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4862      	ldr	r0, [pc, #392]	@ (8001b34 <HAL_I2C_MspInit+0x2f4>)
 80019ac:	f002 ff06 	bl	80047bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019b0:	2310      	movs	r3, #16
 80019b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b6:	2312      	movs	r3, #18
 80019b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c8:	2304      	movs	r3, #4
 80019ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ce:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4858      	ldr	r0, [pc, #352]	@ (8001b38 <HAL_I2C_MspInit+0x2f8>)
 80019d6:	f002 fef1 	bl	80047bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019da:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80019dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019e0:	4a51      	ldr	r2, [pc, #324]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80019e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80019ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001b28 <HAL_I2C_MspInit+0x2e8>)
 80019ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80019f8:	4b50      	ldr	r3, [pc, #320]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 80019fa:	4a51      	ldr	r2, [pc, #324]	@ (8001b40 <HAL_I2C_MspInit+0x300>)
 80019fc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 80019fe:	4b4f      	ldr	r3, [pc, #316]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a00:	2210      	movs	r2, #16
 8001a02:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001a04:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a10:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001a12:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a14:	2208      	movs	r2, #8
 8001a16:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001a18:	4b48      	ldr	r3, [pc, #288]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001a1e:	4b47      	ldr	r3, [pc, #284]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001a24:	4b45      	ldr	r3, [pc, #276]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a2a:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001a30:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001a36:	4b41      	ldr	r3, [pc, #260]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a42:	4b3e      	ldr	r3, [pc, #248]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001a48:	4b3c      	ldr	r3, [pc, #240]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001a4e:	483b      	ldr	r0, [pc, #236]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a50:	f001 f96a 	bl	8002d28 <HAL_DMA_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_MspInit+0x21e>
      Error_Handler();
 8001a5a:	f7ff fecd 	bl	80017f8 <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8001a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a34      	ldr	r2, [pc, #208]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a6c:	4a33      	ldr	r2, [pc, #204]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	482f      	ldr	r0, [pc, #188]	@ (8001b3c <HAL_I2C_MspInit+0x2fc>)
 8001a7e:	f001 fcf9 	bl	8003474 <HAL_DMA_ConfigChannelAttributes>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 8001a88:	f7ff feb6 	bl	80017f8 <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b48 <HAL_I2C_MspInit+0x308>)
 8001a90:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 8001a92:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001a94:	220f      	movs	r2, #15
 8001a96:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001a98:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001aac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ab0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001abe:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001ae2:	4818      	ldr	r0, [pc, #96]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001ae4:	f001 f920 	bl	8002d28 <HAL_DMA_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_MspInit+0x2b2>
      Error_Handler();
 8001aee:	f7ff fe83 	bl	80017f8 <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 8001af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001afe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b00:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b0e:	2110      	movs	r1, #16
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <HAL_I2C_MspInit+0x304>)
 8001b12:	f001 fcaf 	bl	8003474 <HAL_DMA_ConfigChannelAttributes>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d067      	beq.n	8001bec <HAL_I2C_MspInit+0x3ac>
      Error_Handler();
 8001b1c:	f7ff fe6c 	bl	80017f8 <Error_Handler>
}
 8001b20:	e064      	b.n	8001bec <HAL_I2C_MspInit+0x3ac>
 8001b22:	bf00      	nop
 8001b24:	40005400 	.word	0x40005400
 8001b28:	46020c00 	.word	0x46020c00
 8001b2c:	42020400 	.word	0x42020400
 8001b30:	40005800 	.word	0x40005800
 8001b34:	42021400 	.word	0x42021400
 8001b38:	42021c00 	.word	0x42021c00
 8001b3c:	200001d8 	.word	0x200001d8
 8001b40:	400201d0 	.word	0x400201d0
 8001b44:	20000250 	.word	0x20000250
 8001b48:	40020150 	.word	0x40020150
  else if(hi2c->Instance==I2C3)
 8001b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a27      	ldr	r2, [pc, #156]	@ (8001bf8 <HAL_I2C_MspInit+0x3b8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d146      	bne.n	8001bec <HAL_I2C_MspInit+0x3ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 fbc5 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_MspInit+0x344>
      Error_Handler();
 8001b80:	f7ff fe3a 	bl	80017f8 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <HAL_I2C_MspInit+0x3bc>)
 8001b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_I2C_MspInit+0x3bc>)
 8001b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_I2C_MspInit+0x3bc>)
 8001b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ba2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001baa:	2312      	movs	r3, #18
 8001bac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480d      	ldr	r0, [pc, #52]	@ (8001c00 <HAL_I2C_MspInit+0x3c0>)
 8001bca:	f002 fdf7 	bl	80047bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_I2C_MspInit+0x3bc>)
 8001bd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001bd4:	4a09      	ldr	r2, [pc, #36]	@ (8001bfc <HAL_I2C_MspInit+0x3bc>)
 8001bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bda:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <HAL_I2C_MspInit+0x3bc>)
 8001be0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	bf00      	nop
 8001bee:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	46002800 	.word	0x46002800
 8001bfc:	46020c00 	.word	0x46020c00
 8001c00:	42021800 	.word	0x42021800

08001c04 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0de      	sub	sp, #376	@ 0x178
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c0e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c12:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c24:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c28:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	23c8      	movs	r3, #200	@ 0xc8
 8001c30:	461a      	mov	r2, r3
 8001c32:	2100      	movs	r1, #0
 8001c34:	f009 ffae 	bl	800bb94 <memset>
  if(hspi->Instance==SPI1)
 8001c38:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c3c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a31      	ldr	r2, [pc, #196]	@ (8001d0c <HAL_SPI_MspInit+0x108>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d166      	bne.n	8001d18 <HAL_SPI_MspInit+0x114>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c4a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c4e:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001c52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001c5e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c62:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c6a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 fb46 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 8001c7e:	f7ff fdbb 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c82:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <HAL_SPI_MspInit+0x10c>)
 8001c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c88:	4a21      	ldr	r2, [pc, #132]	@ (8001d10 <HAL_SPI_MspInit+0x10c>)
 8001c8a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c8e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <HAL_SPI_MspInit+0x10c>)
 8001c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c98:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001c9c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ca0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001caa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cae:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cb0:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_SPI_MspInit+0x10c>)
 8001cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <HAL_SPI_MspInit+0x10c>)
 8001cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <HAL_SPI_MspInit+0x10c>)
 8001cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001cca:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001cce:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001cd8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cdc:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8001cde:	231c      	movs	r3, #28
 8001ce0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cfc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001d00:	4619      	mov	r1, r3
 8001d02:	4804      	ldr	r0, [pc, #16]	@ (8001d14 <HAL_SPI_MspInit+0x110>)
 8001d04:	f002 fd5a 	bl	80047bc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d08:	e290      	b.n	800222c <HAL_SPI_MspInit+0x628>
 8001d0a:	bf00      	nop
 8001d0c:	40013000 	.word	0x40013000
 8001d10:	46020c00 	.word	0x46020c00
 8001d14:	42021800 	.word	0x42021800
  else if(hspi->Instance==SPI2)
 8001d18:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d1c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4ace      	ldr	r2, [pc, #824]	@ (8002060 <HAL_SPI_MspInit+0x45c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	f040 81be 	bne.w	80020a8 <HAL_SPI_MspInit+0x4a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001d2c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d30:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001d34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8001d40:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 fad6 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_SPI_MspInit+0x15e>
      Error_Handler();
 8001d5e:	f7ff fd4b 	bl	80017f8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d62:	4bc0      	ldr	r3, [pc, #768]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d68:	4abe      	ldr	r2, [pc, #760]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d72:	4bbc      	ldr	r3, [pc, #752]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d78:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001d7c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d80:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d8e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d90:	4bb4      	ldr	r3, [pc, #720]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d96:	4ab3      	ldr	r2, [pc, #716]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001da0:	4bb0      	ldr	r3, [pc, #704]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001daa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001db8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001dbc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbe:	4ba9      	ldr	r3, [pc, #676]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc4:	4aa7      	ldr	r2, [pc, #668]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dce:	4ba5      	ldr	r3, [pc, #660]	@ (8002064 <HAL_SPI_MspInit+0x460>)
 8001dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dd4:	f003 0208 	and.w	r2, r3, #8
 8001dd8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ddc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001de6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001dea:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001dec:	230a      	movs	r3, #10
 8001dee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e04:	2305      	movs	r3, #5
 8001e06:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e0a:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4895      	ldr	r0, [pc, #596]	@ (8002068 <HAL_SPI_MspInit+0x464>)
 8001e12:	f002 fcd3 	bl	80047bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e16:	2308      	movs	r3, #8
 8001e18:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e34:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001e38:	4619      	mov	r1, r3
 8001e3a:	488c      	ldr	r0, [pc, #560]	@ (800206c <HAL_SPI_MspInit+0x468>)
 8001e3c:	f002 fcbe 	bl	80047bc <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001e40:	2321      	movs	r3, #33	@ 0x21
 8001e42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 8001e46:	2309      	movs	r3, #9
 8001e48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8001ea2:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001ea6:	4972      	ldr	r1, [pc, #456]	@ (8002070 <HAL_SPI_MspInit+0x46c>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 fecb 	bl	8003c44 <HAL_DMAEx_List_BuildNode>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_SPI_MspInit+0x2b4>
      Error_Handler();
 8001eb4:	f7ff fca0 	bl	80017f8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8001eb8:	4a6d      	ldr	r2, [pc, #436]	@ (8002070 <HAL_SPI_MspInit+0x46c>)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	486d      	ldr	r0, [pc, #436]	@ (8002074 <HAL_SPI_MspInit+0x470>)
 8001ebe:	f001 fed7 	bl	8003c70 <HAL_DMAEx_List_InsertNode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_SPI_MspInit+0x2c8>
      Error_Handler();
 8001ec8:	f7ff fc96 	bl	80017f8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8001ecc:	4869      	ldr	r0, [pc, #420]	@ (8002074 <HAL_SPI_MspInit+0x470>)
 8001ece:	f001 ff98 	bl	8003e02 <HAL_DMAEx_List_SetCircularMode>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_SPI_MspInit+0x2d8>
      Error_Handler();
 8001ed8:	f7ff fc8e 	bl	80017f8 <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001edc:	4b66      	ldr	r3, [pc, #408]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001ede:	4a67      	ldr	r2, [pc, #412]	@ (800207c <HAL_SPI_MspInit+0x478>)
 8001ee0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ee2:	4b65      	ldr	r3, [pc, #404]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001ee8:	4b63      	ldr	r3, [pc, #396]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001eee:	4b62      	ldr	r3, [pc, #392]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001ef4:	4b60      	ldr	r3, [pc, #384]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001efa:	4b5f      	ldr	r3, [pc, #380]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001efc:	2281      	movs	r2, #129	@ 0x81
 8001efe:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001f00:	485d      	ldr	r0, [pc, #372]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001f02:	f001 fd73 	bl	80039ec <HAL_DMAEx_List_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_SPI_MspInit+0x30c>
      Error_Handler();
 8001f0c:	f7ff fc74 	bl	80017f8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8001f10:	4958      	ldr	r1, [pc, #352]	@ (8002074 <HAL_SPI_MspInit+0x470>)
 8001f12:	4859      	ldr	r0, [pc, #356]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001f14:	f001 ffd6 	bl	8003ec4 <HAL_DMAEx_List_LinkQ>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_SPI_MspInit+0x31e>
      Error_Handler();
 8001f1e:	f7ff fc6b 	bl	80017f8 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8001f22:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f26:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001f32:	4a51      	ldr	r2, [pc, #324]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001f34:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f38:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001f40:	2110      	movs	r1, #16
 8001f42:	484d      	ldr	r0, [pc, #308]	@ (8002078 <HAL_SPI_MspInit+0x474>)
 8001f44:	f001 fa96 	bl	8003474 <HAL_DMA_ConfigChannelAttributes>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_SPI_MspInit+0x34e>
      Error_Handler();
 8001f4e:	f7ff fc53 	bl	80017f8 <Error_Handler>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001f52:	2321      	movs	r3, #33	@ 0x21
 8001f54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001f70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001f74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001fb4:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001fb8:	4931      	ldr	r1, [pc, #196]	@ (8002080 <HAL_SPI_MspInit+0x47c>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fe42 	bl	8003c44 <HAL_DMAEx_List_BuildNode>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_SPI_MspInit+0x3c6>
      Error_Handler();
 8001fc6:	f7ff fc17 	bl	80017f8 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001fca:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <HAL_SPI_MspInit+0x47c>)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	482d      	ldr	r0, [pc, #180]	@ (8002084 <HAL_SPI_MspInit+0x480>)
 8001fd0:	f001 fe4e 	bl	8003c70 <HAL_DMAEx_List_InsertNode>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_SPI_MspInit+0x3da>
      Error_Handler();
 8001fda:	f7ff fc0d 	bl	80017f8 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001fde:	4829      	ldr	r0, [pc, #164]	@ (8002084 <HAL_SPI_MspInit+0x480>)
 8001fe0:	f001 ff0f 	bl	8003e02 <HAL_DMAEx_List_SetCircularMode>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_SPI_MspInit+0x3ea>
      Error_Handler();
 8001fea:	f7ff fc05 	bl	80017f8 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001fee:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8001ff0:	4a26      	ldr	r2, [pc, #152]	@ (800208c <HAL_SPI_MspInit+0x488>)
 8001ff2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 800200e:	2281      	movs	r2, #129	@ 0x81
 8002010:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002012:	481d      	ldr	r0, [pc, #116]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8002014:	f001 fcea 	bl	80039ec <HAL_DMAEx_List_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_SPI_MspInit+0x41e>
      Error_Handler();
 800201e:	f7ff fbeb 	bl	80017f8 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002022:	4918      	ldr	r1, [pc, #96]	@ (8002084 <HAL_SPI_MspInit+0x480>)
 8002024:	4818      	ldr	r0, [pc, #96]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8002026:	f001 ff4d 	bl	8003ec4 <HAL_DMAEx_List_LinkQ>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_SPI_MspInit+0x430>
      Error_Handler();
 8002030:	f7ff fbe2 	bl	80017f8 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 8002034:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002038:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8002040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002044:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8002046:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800204a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002052:	2110      	movs	r1, #16
 8002054:	480c      	ldr	r0, [pc, #48]	@ (8002088 <HAL_SPI_MspInit+0x484>)
 8002056:	f001 fa0d 	bl	8003474 <HAL_DMA_ConfigChannelAttributes>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	e017      	b.n	8002090 <HAL_SPI_MspInit+0x48c>
 8002060:	40003800 	.word	0x40003800
 8002064:	46020c00 	.word	0x46020c00
 8002068:	42022000 	.word	0x42022000
 800206c:	42020c00 	.word	0x42020c00
 8002070:	20000358 	.word	0x20000358
 8002074:	2000037c 	.word	0x2000037c
 8002078:	20000394 	.word	0x20000394
 800207c:	400200d0 	.word	0x400200d0
 8002080:	2000040c 	.word	0x2000040c
 8002084:	20000430 	.word	0x20000430
 8002088:	20000448 	.word	0x20000448
 800208c:	40020050 	.word	0x40020050
 8002090:	d001      	beq.n	8002096 <HAL_SPI_MspInit+0x492>
      Error_Handler();
 8002092:	f7ff fbb1 	bl	80017f8 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	203c      	movs	r0, #60	@ 0x3c
 800209c:	f000 fd5a 	bl	8002b54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80020a0:	203c      	movs	r0, #60	@ 0x3c
 80020a2:	f000 fd71 	bl	8002b88 <HAL_NVIC_EnableIRQ>
}
 80020a6:	e0c1      	b.n	800222c <HAL_SPI_MspInit+0x628>
  else if(hspi->Instance==SPI3)
 80020a8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80020ac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a60      	ldr	r2, [pc, #384]	@ (8002238 <HAL_SPI_MspInit+0x634>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	f040 80b8 	bne.w	800222c <HAL_SPI_MspInit+0x628>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80020bc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80020c0:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 80020c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 80020d0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80020d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020d8:	2210      	movs	r2, #16
 80020da:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 f90e 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_SPI_MspInit+0x4ee>
      Error_Handler();
 80020ee:	f7ff fb83 	bl	80017f8 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020f2:	4b52      	ldr	r3, [pc, #328]	@ (800223c <HAL_SPI_MspInit+0x638>)
 80020f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80020f8:	4a50      	ldr	r2, [pc, #320]	@ (800223c <HAL_SPI_MspInit+0x638>)
 80020fa:	f043 0320 	orr.w	r3, r3, #32
 80020fe:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002102:	4b4e      	ldr	r3, [pc, #312]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002104:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002108:	f003 0220 	and.w	r2, r3, #32
 800210c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002110:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800211a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800211e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002120:	4b46      	ldr	r3, [pc, #280]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002126:	4a45      	ldr	r2, [pc, #276]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800212c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002130:	4b42      	ldr	r3, [pc, #264]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002136:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800213a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800213e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002148:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800214c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002154:	4a39      	ldr	r2, [pc, #228]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800215e:	4b37      	ldr	r3, [pc, #220]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002164:	f003 0201 	and.w	r2, r3, #1
 8002168:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800216c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002176:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800217a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <HAL_SPI_MspInit+0x638>)
 800217e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002182:	4a2e      	ldr	r2, [pc, #184]	@ (800223c <HAL_SPI_MspInit+0x638>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800218c:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <HAL_SPI_MspInit+0x638>)
 800218e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002192:	f003 0202 	and.w	r2, r3, #2
 8002196:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800219a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021a4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021a8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021c4:	2306      	movs	r3, #6
 80021c6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ca:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80021ce:	4619      	mov	r1, r3
 80021d0:	481b      	ldr	r0, [pc, #108]	@ (8002240 <HAL_SPI_MspInit+0x63c>)
 80021d2:	f002 faf3 	bl	80047bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021da:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f0:	2306      	movs	r3, #6
 80021f2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80021fa:	4619      	mov	r1, r3
 80021fc:	4811      	ldr	r0, [pc, #68]	@ (8002244 <HAL_SPI_MspInit+0x640>)
 80021fe:	f002 fadd 	bl	80047bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002202:	2330      	movs	r3, #48	@ 0x30
 8002204:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800221a:	2306      	movs	r3, #6
 800221c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8002224:	4619      	mov	r1, r3
 8002226:	4808      	ldr	r0, [pc, #32]	@ (8002248 <HAL_SPI_MspInit+0x644>)
 8002228:	f002 fac8 	bl	80047bc <HAL_GPIO_Init>
}
 800222c:	bf00      	nop
 800222e:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	46002000 	.word	0x46002000
 800223c:	46020c00 	.word	0x46020c00
 8002240:	42021800 	.word	0x42021800
 8002244:	42020000 	.word	0x42020000
 8002248:	42020400 	.word	0x42020400

0800224c <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a29      	ldr	r2, [pc, #164]	@ (8002300 <HAL_SPI_MspDeInit+0xb4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10c      	bne.n	8002278 <HAL_SPI_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_SPI_MspDeInit+0xb8>)
 8002260:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002264:	4a27      	ldr	r2, [pc, #156]	@ (8002304 <HAL_SPI_MspDeInit+0xb8>)
 8002266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800226a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2);
 800226e:	211c      	movs	r1, #28
 8002270:	4825      	ldr	r0, [pc, #148]	@ (8002308 <HAL_SPI_MspDeInit+0xbc>)
 8002272:	f002 fc83 	bl	8004b7c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002276:	e03f      	b.n	80022f8 <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a23      	ldr	r2, [pc, #140]	@ (800230c <HAL_SPI_MspDeInit+0xc0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d11f      	bne.n	80022c2 <HAL_SPI_MspDeInit+0x76>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_SPI_MspDeInit+0xb8>)
 8002284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002288:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <HAL_SPI_MspDeInit+0xb8>)
 800228a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800228e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1|GPIO_PIN_3);
 8002292:	210a      	movs	r1, #10
 8002294:	481e      	ldr	r0, [pc, #120]	@ (8002310 <HAL_SPI_MspDeInit+0xc4>)
 8002296:	f002 fc71 	bl	8004b7c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 800229a:	2108      	movs	r1, #8
 800229c:	481d      	ldr	r0, [pc, #116]	@ (8002314 <HAL_SPI_MspDeInit+0xc8>)
 800229e:	f002 fc6d 	bl	8004b7c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fe7f 	bl	8002fac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fe79 	bl	8002fac <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80022ba:	203c      	movs	r0, #60	@ 0x3c
 80022bc:	f000 fc72 	bl	8002ba4 <HAL_NVIC_DisableIRQ>
}
 80022c0:	e01a      	b.n	80022f8 <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI3)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a14      	ldr	r2, [pc, #80]	@ (8002318 <HAL_SPI_MspDeInit+0xcc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d115      	bne.n	80022f8 <HAL_SPI_MspDeInit+0xac>
    __HAL_RCC_SPI3_CLK_DISABLE();
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <HAL_SPI_MspDeInit+0xb8>)
 80022ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002304 <HAL_SPI_MspDeInit+0xb8>)
 80022d4:	f023 0320 	bic.w	r3, r3, #32
 80022d8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 80022dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022e0:	4809      	ldr	r0, [pc, #36]	@ (8002308 <HAL_SPI_MspDeInit+0xbc>)
 80022e2:	f002 fc4b 	bl	8004b7c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 80022e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ea:	480c      	ldr	r0, [pc, #48]	@ (800231c <HAL_SPI_MspDeInit+0xd0>)
 80022ec:	f002 fc46 	bl	8004b7c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4|GPIO_PIN_5);
 80022f0:	2130      	movs	r1, #48	@ 0x30
 80022f2:	480b      	ldr	r0, [pc, #44]	@ (8002320 <HAL_SPI_MspDeInit+0xd4>)
 80022f4:	f002 fc42 	bl	8004b7c <HAL_GPIO_DeInit>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013000 	.word	0x40013000
 8002304:	46020c00 	.word	0x46020c00
 8002308:	42021800 	.word	0x42021800
 800230c:	40003800 	.word	0x40003800
 8002310:	42022000 	.word	0x42022000
 8002314:	42020c00 	.word	0x42020c00
 8002318:	46002000 	.word	0x46002000
 800231c:	42020000 	.word	0x42020000
 8002320:	42020400 	.word	0x42020400

08002324 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0c0      	sub	sp, #256	@ 0x100
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800233c:	f107 0320 	add.w	r3, r7, #32
 8002340:	22c8      	movs	r2, #200	@ 0xc8
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f009 fc25 	bl	800bb94 <memset>
  if(huart->Instance==USART2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5e      	ldr	r2, [pc, #376]	@ (80024c8 <HAL_UART_MspInit+0x1a4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d145      	bne.n	80023e0 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002354:	f04f 0202 	mov.w	r2, #2
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002360:	2300      	movs	r3, #0
 8002362:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	4618      	mov	r0, r3
 800236a:	f004 ffcb 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002374:	f7ff fa40 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002378:	4b54      	ldr	r3, [pc, #336]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 800237a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800237e:	4a53      	ldr	r2, [pc, #332]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 8002380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002384:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002388:	4b50      	ldr	r3, [pc, #320]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 800238a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	4b4d      	ldr	r3, [pc, #308]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 8002398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800239c:	4a4b      	ldr	r2, [pc, #300]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 800239e:	f043 0308 	orr.w	r3, r3, #8
 80023a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023a6:	4b49      	ldr	r3, [pc, #292]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 80023a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 80023b4:	2370      	movs	r3, #112	@ 0x70
 80023b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023cc:	2307      	movs	r3, #7
 80023ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80023d6:	4619      	mov	r1, r3
 80023d8:	483d      	ldr	r0, [pc, #244]	@ (80024d0 <HAL_UART_MspInit+0x1ac>)
 80023da:	f002 f9ef 	bl	80047bc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80023de:	e06e      	b.n	80024be <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3b      	ldr	r2, [pc, #236]	@ (80024d4 <HAL_UART_MspInit+0x1b0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d169      	bne.n	80024be <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023ea:	f04f 0204 	mov.w	r2, #4
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fa:	f107 0320 	add.w	r3, r7, #32
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 ff80 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_UART_MspInit+0xea>
      Error_Handler();
 800240a:	f7ff f9f5 	bl	80017f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800240e:	4b2f      	ldr	r3, [pc, #188]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 8002410:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002414:	4a2d      	ldr	r2, [pc, #180]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 8002416:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800241a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800241e:	4b2b      	ldr	r3, [pc, #172]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 8002420:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002424:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 800242e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002432:	4a26      	ldr	r2, [pc, #152]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800243c:	4b23      	ldr	r3, [pc, #140]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 800243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002450:	4a1e      	ldr	r2, [pc, #120]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <HAL_UART_MspInit+0x1a8>)
 800245c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8002468:	23a0      	movs	r3, #160	@ 0xa0
 800246a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002480:	2307      	movs	r3, #7
 8002482:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800248a:	4619      	mov	r1, r3
 800248c:	4812      	ldr	r0, [pc, #72]	@ (80024d8 <HAL_UART_MspInit+0x1b4>)
 800248e:	f002 f995 	bl	80047bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002492:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002496:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024ac:	2307      	movs	r3, #7
 80024ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <HAL_UART_MspInit+0x1ac>)
 80024ba:	f002 f97f 	bl	80047bc <HAL_GPIO_Init>
}
 80024be:	bf00      	nop
 80024c0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40004400 	.word	0x40004400
 80024cc:	46020c00 	.word	0x46020c00
 80024d0:	42020c00 	.word	0x42020c00
 80024d4:	40004800 	.word	0x40004800
 80024d8:	42020000 	.word	0x42020000

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <NMI_Handler+0x4>

080024e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <MemManage_Handler+0x4>

080024f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <BusFault_Handler+0x4>

080024fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <UsageFault_Handler+0x4>

08002504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002532:	f000 f9ef 	bl	8002914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}

0800253a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 800253e:	2001      	movs	r0, #1
 8002540:	f002 fc12 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 800254c:	2002      	movs	r0, #2
 800254e:	f002 fc0b 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}

08002556 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 800255a:	2004      	movs	r0, #4
 800255c:	f002 fc04 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8002568:	2008      	movs	r0, #8
 800256a:	f002 fbfd 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}

08002572 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8002576:	2010      	movs	r0, #16
 8002578:	f002 fbf6 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8002584:	2020      	movs	r0, #32
 8002586:	f002 fbef 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}

0800258e <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8002592:	2040      	movs	r0, #64	@ 0x40
 8002594:	f002 fbe8 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 80025a0:	2080      	movs	r0, #128	@ 0x80
 80025a2:	f002 fbe1 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}

080025aa <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 80025ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80025b2:	f002 fbd9 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}

080025ba <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 80025be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025c2:	f002 fbd1 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}

080025ca <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 80025ce:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80025d2:	f002 fbc9 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}

080025da <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 80025de:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80025e2:	f002 fbc1 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}

080025ea <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 80025ee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025f2:	f002 fbb9 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}

080025fa <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80025fe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002602:	f002 fbb1 	bl	8004d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002612:	f000 fdce 	bl	80031b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000448 	.word	0x20000448

08002620 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002626:	f000 fdc4 	bl	80031b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000394 	.word	0x20000394

08002634 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <GPDMA1_Channel2_IRQHandler+0x10>)
 800263a:	f000 fdba 	bl	80031b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000250 	.word	0x20000250

08002648 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <GPDMA1_Channel3_IRQHandler+0x10>)
 800264e:	f000 fdb0 	bl	80031b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200001d8 	.word	0x200001d8

0800265c <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <GPDMA1_Channel4_IRQHandler+0x10>)
 8002662:	f000 fda6 	bl	80031b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000010c 	.word	0x2000010c

08002670 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <GPDMA1_Channel5_IRQHandler+0x10>)
 8002676:	f000 fd9c 	bl	80031b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000094 	.word	0x20000094

08002684 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <SPI2_IRQHandler+0x10>)
 800268a:	f008 f951 	bl	800a930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200002c8 	.word	0x200002c8

08002698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a0:	4a14      	ldr	r2, [pc, #80]	@ (80026f4 <_sbrk+0x5c>)
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <_sbrk+0x60>)
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ac:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <_sbrk+0x64>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <_sbrk+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d207      	bcs.n	80026d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c8:	f009 fa6c 	bl	800bba4 <__errno>
 80026cc:	4603      	mov	r3, r0
 80026ce:	220c      	movs	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e009      	b.n	80026ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a05      	ldr	r2, [pc, #20]	@ (80026fc <_sbrk+0x64>)
 80026e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200c0000 	.word	0x200c0000
 80026f8:	00000400 	.word	0x00000400
 80026fc:	20000554 	.word	0x20000554
 8002700:	200006a8 	.word	0x200006a8

08002704 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002708:	4b18      	ldr	r3, [pc, #96]	@ (800276c <SystemInit+0x68>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	4a17      	ldr	r2, [pc, #92]	@ (800276c <SystemInit+0x68>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002718:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <SystemInit+0x6c>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800271e:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <SystemInit+0x6c>)
 8002720:	2200      	movs	r2, #0
 8002722:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <SystemInit+0x6c>)
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <SystemInit+0x6c>)
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <SystemInit+0x6c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0e      	ldr	r2, [pc, #56]	@ (8002770 <SystemInit+0x6c>)
 8002736:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800273a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800273e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <SystemInit+0x6c>)
 8002742:	2200      	movs	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <SystemInit+0x6c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <SystemInit+0x6c>)
 800274c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002750:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <SystemInit+0x6c>)
 8002754:	2200      	movs	r2, #0
 8002756:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SystemInit+0x68>)
 800275a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800275e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	46020c00 	.word	0x46020c00

08002774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027ac <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002778:	f7ff ffc4 	bl	8002704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800277c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800277e:	e003      	b.n	8002788 <LoopCopyDataInit>

08002780 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002782:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002784:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002786:	3104      	adds	r1, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002788:	480a      	ldr	r0, [pc, #40]	@ (80027b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800278c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800278e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002790:	d3f6      	bcc.n	8002780 <CopyDataInit>
	ldr	r2, =_sbss
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002794:	e002      	b.n	800279c <LoopFillZerobss>

08002796 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002796:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002798:	f842 3b04 	str.w	r3, [r2], #4

0800279c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800279c:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <LoopForever+0x16>)
	cmp	r2, r3
 800279e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027a0:	d3f9      	bcc.n	8002796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a2:	f009 fa05 	bl	800bbb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027a6:	f7fe f8a5 	bl	80008f4 <main>

080027aa <LoopForever>:

LoopForever:
    b LoopForever
 80027aa:	e7fe      	b.n	80027aa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80027ac:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80027b0:	0800cac8 	.word	0x0800cac8
	ldr	r0, =_sdata
 80027b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027b8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80027bc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80027c0:	200006a4 	.word	0x200006a4

080027c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC1_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_Init+0x50>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <HAL_Init+0x50>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 f9b0 	bl	8002b3e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027de:	f004 fbb3 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <HAL_Init+0x54>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	490c      	ldr	r1, [pc, #48]	@ (8002820 <HAL_Init+0x58>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002824 <HAL_Init+0x5c>)
 80027f6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80027f8:	2004      	movs	r0, #4
 80027fa:	f000 fa03 	bl	8002c04 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027fe:	200f      	movs	r0, #15
 8002800:	f000 f812 	bl	8002828 <HAL_InitTick>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e002      	b.n	8002814 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800280e:	f7fe fff9 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40022000 	.word	0x40022000
 800281c:	46020c00 	.word	0x46020c00
 8002820:	0800c94c 	.word	0x0800c94c
 8002824:	2000001c 	.word	0x2000001c

08002828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002834:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <HAL_InitTick+0xdc>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e05c      	b.n	80028fa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002840:	4b31      	ldr	r3, [pc, #196]	@ (8002908 <HAL_InitTick+0xe0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d10c      	bne.n	8002866 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800284c:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <HAL_InitTick+0xe4>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b2c      	ldr	r3, [pc, #176]	@ (8002904 <HAL_InitTick+0xdc>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285a:	fbb3 f3f1 	udiv	r3, r3, r1
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e037      	b.n	80028d6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002866:	f000 fa25 	bl	8002cb4 <HAL_SYSTICK_GetCLKSourceConfig>
 800286a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d023      	beq.n	80028ba <HAL_InitTick+0x92>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d82d      	bhi.n	80028d4 <HAL_InitTick+0xac>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_InitTick+0x5e>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d00d      	beq.n	80028a0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002884:	e026      	b.n	80028d4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_InitTick+0xe4>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <HAL_InitTick+0xdc>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002894:	fbb3 f3f1 	udiv	r3, r3, r1
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	60fb      	str	r3, [r7, #12]
        break;
 800289e:	e01a      	b.n	80028d6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028a0:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <HAL_InitTick+0xdc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80028ae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	60fb      	str	r3, [r7, #12]
        break;
 80028b8:	e00d      	b.n	80028d6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_InitTick+0xdc>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	60fb      	str	r3, [r7, #12]
        break;
 80028d2:	e000      	b.n	80028d6 <HAL_InitTick+0xae>
        break;
 80028d4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f972 	bl	8002bc0 <HAL_SYSTICK_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e009      	b.n	80028fa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e6:	2200      	movs	r2, #0
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	f04f 30ff 	mov.w	r0, #4294967295
 80028ee:	f000 f931 	bl	8002b54 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80028f2:	4a07      	ldr	r2, [pc, #28]	@ (8002910 <HAL_InitTick+0xe8>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000024 	.word	0x20000024
 8002908:	e000e010 	.word	0xe000e010
 800290c:	2000001c 	.word	0x2000001c
 8002910:	20000020 	.word	0x20000020

08002914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_IncTick+0x20>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_IncTick+0x24>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <HAL_IncTick+0x24>)
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000024 	.word	0x20000024
 8002938:	20000558 	.word	0x20000558

0800293c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return uwTick;
 8002940:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <HAL_GetTick+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000558 	.word	0x20000558

08002954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff ffee 	bl	800293c <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d005      	beq.n	800297a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_Delay+0x44>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800297a:	bf00      	nop
 800297c:	f7ff ffde 	bl	800293c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	429a      	cmp	r2, r3
 800298a:	d8f7      	bhi.n	800297c <HAL_Delay+0x28>
  {
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000024 	.word	0x20000024

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	@ (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db12      	blt.n	8002a74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	490a      	ldr	r1, [pc, #40]	@ (8002a80 <__NVIC_DisableIRQ+0x44>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a62:	3320      	adds	r3, #32
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a68:	f3bf 8f4f 	dsb	sy
}
 8002a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a6e:	f3bf 8f6f 	isb	sy
}
 8002a72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	@ (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	@ (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	@ 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff28 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b62:	f7ff ff3f 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	6978      	ldr	r0, [r7, #20]
 8002b6e:	f7ff ffb3 	bl	8002ad8 <NVIC_EncodePriority>
 8002b72:	4602      	mov	r2, r0
 8002b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff82 	bl	8002a84 <__NVIC_SetPriority>
}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff32 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ff42 	bl	8002a3c <__NVIC_DisableIRQ>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd0:	d301      	bcc.n	8002bd6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00d      	b.n	8002bf2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <HAL_SYSTICK_Config+0x40>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002bde:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <HAL_SYSTICK_Config+0x40>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_SYSTICK_Config+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a05      	ldr	r2, [pc, #20]	@ (8002c00 <HAL_SYSTICK_Config+0x40>)
 8002bea:	f043 0303 	orr.w	r3, r3, #3
 8002bee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e010 	.word	0xe000e010

08002c04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d844      	bhi.n	8002c9c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002c12:	a201      	add	r2, pc, #4	@ (adr r2, 8002c18 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c3b 	.word	0x08002c3b
 8002c1c:	08002c59 	.word	0x08002c59
 8002c20:	08002c7b 	.word	0x08002c7b
 8002c24:	08002c9d 	.word	0x08002c9d
 8002c28:	08002c2d 	.word	0x08002c2d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6013      	str	r3, [r2, #0]
      break;
 8002c38:	e031      	b.n	8002c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002c46:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4c:	4a18      	ldr	r2, [pc, #96]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c4e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c56:	e022      	b.n	8002c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c6a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c6e:	4a10      	ldr	r2, [pc, #64]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c78:	e011      	b.n	8002c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c8c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c90:	4a07      	ldr	r2, [pc, #28]	@ (8002cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002c9c:	bf00      	nop
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010
 8002cb0:	46020c00 	.word	0x46020c00

08002cb4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002cba:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	e021      	b.n	8002d10 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002ccc:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cd2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002cd6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cde:	d011      	beq.n	8002d04 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ce6:	d810      	bhi.n	8002d0a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cf4:	d003      	beq.n	8002cfe <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002cf6:	e008      	b.n	8002d0a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	607b      	str	r3, [r7, #4]
        break;
 8002cfc:	e008      	b.n	8002d10 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
        break;
 8002d02:	e005      	b.n	8002d10 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002d04:	2302      	movs	r3, #2
 8002d06:	607b      	str	r3, [r7, #4]
        break;
 8002d08:	e002      	b.n	8002d10 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
        break;
 8002d0e:	bf00      	nop
    }
  }
  return systick_source;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e010 	.word	0xe000e010
 8002d24:	46020c00 	.word	0x46020c00

08002d28 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7ff fe04 	bl	800293c <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0f0      	b.n	8002f22 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a79      	ldr	r2, [pc, #484]	@ (8002f2c <HAL_DMA_Init+0x204>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	f000 809f 	beq.w	8002e8a <HAL_DMA_Init+0x162>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a77      	ldr	r2, [pc, #476]	@ (8002f30 <HAL_DMA_Init+0x208>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	f000 8099 	beq.w	8002e8a <HAL_DMA_Init+0x162>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a75      	ldr	r2, [pc, #468]	@ (8002f34 <HAL_DMA_Init+0x20c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	f000 8093 	beq.w	8002e8a <HAL_DMA_Init+0x162>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a73      	ldr	r2, [pc, #460]	@ (8002f38 <HAL_DMA_Init+0x210>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	f000 808d 	beq.w	8002e8a <HAL_DMA_Init+0x162>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a71      	ldr	r2, [pc, #452]	@ (8002f3c <HAL_DMA_Init+0x214>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_DMA_Init+0x162>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6f      	ldr	r2, [pc, #444]	@ (8002f40 <HAL_DMA_Init+0x218>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	f000 8081 	beq.w	8002e8a <HAL_DMA_Init+0x162>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6d      	ldr	r2, [pc, #436]	@ (8002f44 <HAL_DMA_Init+0x21c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d07b      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	@ (8002f48 <HAL_DMA_Init+0x220>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d076      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6a      	ldr	r2, [pc, #424]	@ (8002f4c <HAL_DMA_Init+0x224>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d071      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a69      	ldr	r2, [pc, #420]	@ (8002f50 <HAL_DMA_Init+0x228>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d06c      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a67      	ldr	r2, [pc, #412]	@ (8002f54 <HAL_DMA_Init+0x22c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d067      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a66      	ldr	r2, [pc, #408]	@ (8002f58 <HAL_DMA_Init+0x230>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d062      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a64      	ldr	r2, [pc, #400]	@ (8002f5c <HAL_DMA_Init+0x234>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d05d      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a63      	ldr	r2, [pc, #396]	@ (8002f60 <HAL_DMA_Init+0x238>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d058      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a61      	ldr	r2, [pc, #388]	@ (8002f64 <HAL_DMA_Init+0x23c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d053      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a60      	ldr	r2, [pc, #384]	@ (8002f68 <HAL_DMA_Init+0x240>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04e      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f6c <HAL_DMA_Init+0x244>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d049      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a5d      	ldr	r2, [pc, #372]	@ (8002f70 <HAL_DMA_Init+0x248>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d044      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a5b      	ldr	r2, [pc, #364]	@ (8002f74 <HAL_DMA_Init+0x24c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d03f      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f78 <HAL_DMA_Init+0x250>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d03a      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a58      	ldr	r2, [pc, #352]	@ (8002f7c <HAL_DMA_Init+0x254>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d035      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a57      	ldr	r2, [pc, #348]	@ (8002f80 <HAL_DMA_Init+0x258>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d030      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a55      	ldr	r2, [pc, #340]	@ (8002f84 <HAL_DMA_Init+0x25c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02b      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a54      	ldr	r2, [pc, #336]	@ (8002f88 <HAL_DMA_Init+0x260>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d026      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a52      	ldr	r2, [pc, #328]	@ (8002f8c <HAL_DMA_Init+0x264>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d021      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a51      	ldr	r2, [pc, #324]	@ (8002f90 <HAL_DMA_Init+0x268>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d01c      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a4f      	ldr	r2, [pc, #316]	@ (8002f94 <HAL_DMA_Init+0x26c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d017      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8002f98 <HAL_DMA_Init+0x270>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d012      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4c      	ldr	r2, [pc, #304]	@ (8002f9c <HAL_DMA_Init+0x274>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <HAL_DMA_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a49      	ldr	r2, [pc, #292]	@ (8002fa4 <HAL_DMA_Init+0x27c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <HAL_DMA_Init+0x162>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a48      	ldr	r2, [pc, #288]	@ (8002fa8 <HAL_DMA_Init+0x280>)
 8002e88:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10e      	bne.n	8002ebc <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0206 	orr.w	r2, r2, #6
 8002ed2:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002ed4:	e00f      	b.n	8002ef6 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002ed6:	f7ff fd31 	bl	800293c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d908      	bls.n	8002ef6 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2203      	movs	r2, #3
 8002eee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e015      	b.n	8002f22 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e8      	bne.n	8002ed6 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 faf1 	bl	80034ec <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40020050 	.word	0x40020050
 8002f30:	50020050 	.word	0x50020050
 8002f34:	400200d0 	.word	0x400200d0
 8002f38:	500200d0 	.word	0x500200d0
 8002f3c:	40020150 	.word	0x40020150
 8002f40:	50020150 	.word	0x50020150
 8002f44:	400201d0 	.word	0x400201d0
 8002f48:	500201d0 	.word	0x500201d0
 8002f4c:	40020250 	.word	0x40020250
 8002f50:	50020250 	.word	0x50020250
 8002f54:	400202d0 	.word	0x400202d0
 8002f58:	500202d0 	.word	0x500202d0
 8002f5c:	40020350 	.word	0x40020350
 8002f60:	50020350 	.word	0x50020350
 8002f64:	400203d0 	.word	0x400203d0
 8002f68:	500203d0 	.word	0x500203d0
 8002f6c:	40020450 	.word	0x40020450
 8002f70:	50020450 	.word	0x50020450
 8002f74:	400204d0 	.word	0x400204d0
 8002f78:	500204d0 	.word	0x500204d0
 8002f7c:	40020550 	.word	0x40020550
 8002f80:	50020550 	.word	0x50020550
 8002f84:	400205d0 	.word	0x400205d0
 8002f88:	500205d0 	.word	0x500205d0
 8002f8c:	40020650 	.word	0x40020650
 8002f90:	50020650 	.word	0x50020650
 8002f94:	400206d0 	.word	0x400206d0
 8002f98:	500206d0 	.word	0x500206d0
 8002f9c:	40020750 	.word	0x40020750
 8002fa0:	50020750 	.word	0x50020750
 8002fa4:	400207d0 	.word	0x400207d0
 8002fa8:	500207d0 	.word	0x500207d0

08002fac <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  DMA_TypeDef *p_dma_instance;

  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff fcc2 	bl	800293c <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b9      	b.n	8003138 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002fcc:	f023 030f 	bic.w	r3, r3, #15
 8002fd0:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0206 	orr.w	r2, r2, #6
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002fe2:	e00f      	b.n	8003004 <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002fe4:	f7ff fcaa 	bl	800293c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d908      	bls.n	8003004 <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e099      	b.n	8003138 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e8      	bne.n	8002fe4 <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->Instance->CTR2  = 0U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->Instance->CBR1  = 0U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->Instance->CSAR  = 0U;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->Instance->CDAR  = 0U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->Instance->CLLR  = 0U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3a      	ldr	r2, [pc, #232]	@ (8003140 <HAL_DMA_DeInit+0x194>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_DeInit+0xf6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a38      	ldr	r2, [pc, #224]	@ (8003144 <HAL_DMA_DeInit+0x198>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01d      	beq.n	80030a2 <HAL_DMA_DeInit+0xf6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a37      	ldr	r2, [pc, #220]	@ (8003148 <HAL_DMA_DeInit+0x19c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d018      	beq.n	80030a2 <HAL_DMA_DeInit+0xf6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a35      	ldr	r2, [pc, #212]	@ (800314c <HAL_DMA_DeInit+0x1a0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_DMA_DeInit+0xf6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a34      	ldr	r2, [pc, #208]	@ (8003150 <HAL_DMA_DeInit+0x1a4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_DMA_DeInit+0xf6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a32      	ldr	r2, [pc, #200]	@ (8003154 <HAL_DMA_DeInit+0x1a8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_DMA_DeInit+0xf6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a31      	ldr	r2, [pc, #196]	@ (8003158 <HAL_DMA_DeInit+0x1ac>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_DMA_DeInit+0xf6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a2f      	ldr	r2, [pc, #188]	@ (800315c <HAL_DMA_DeInit+0x1b0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_DMA_DeInit+0xfa>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_DMA_DeInit+0xfc>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->Instance->CBR2 = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	3b50      	subs	r3, #80	@ 0x50
 80030ca:	09db      	lsrs	r3, r3, #7
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	401a      	ands	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80030e6:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hdma->XferHalfCpltCallback = NULL;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	665a      	str	r2, [r3, #100]	@ 0x64
  hdma->XferErrorCallback    = NULL;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	669a      	str	r2, [r3, #104]	@ 0x68
  hdma->XferAbortCallback    = NULL;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  hdma->XferSuspendCallback  = NULL;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40020650 	.word	0x40020650
 8003144:	50020650 	.word	0x50020650
 8003148:	400206d0 	.word	0x400206d0
 800314c:	500206d0 	.word	0x500206d0
 8003150:	40020750 	.word	0x40020750
 8003154:	50020750 	.word	0x50020750
 8003158:	400207d0 	.word	0x400207d0
 800315c:	500207d0 	.word	0x500207d0

08003160 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e019      	b.n	80031a6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d004      	beq.n	8003188 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e00e      	b.n	80031a6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2204      	movs	r2, #4
 800318c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80031c2:	f023 030f 	bic.w	r3, r3, #15
 80031c6:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	3b50      	subs	r3, #80	@ 0x50
 80031d2:	09db      	lsrs	r3, r3, #7
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2201      	movs	r2, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 813b 	beq.w	8003468 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d011      	beq.n	8003224 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003216:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322e:	2b00      	cmp	r3, #0
 8003230:	d011      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003248:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d011      	beq.n	8003288 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800327a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d011      	beq.n	80032ba <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032ac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	f043 0208 	orr.w	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032de:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04c      	beq.n	8003398 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d045      	beq.n	8003398 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003314:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b04      	cmp	r3, #4
 8003320:	d12e      	bne.n	8003380 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003330:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0202 	orr.w	r2, r2, #2
 8003340:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335a:	2201      	movs	r2, #1
 800335c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d07a      	beq.n	800346c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
        }

        return;
 800337e:	e075      	b.n	800346c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2205      	movs	r2, #5
 8003384:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d039      	beq.n	800341a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d032      	beq.n	800341a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d012      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e0:	2201      	movs	r2, #1
 80033e2:	731a      	strb	r2, [r3, #12]
 80033e4:	e008      	b.n	80033f8 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003400:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	2b00      	cmp	r3, #0
 8003420:	d025      	beq.n	800346e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0202 	orr.w	r2, r2, #2
 8003430:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344a:	2201      	movs	r2, #1
 800344c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
 8003466:	e002      	b.n	800346e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <HAL_DMA_IRQHandler+0x2bc>
        return;
 800346c:	bf00      	nop
    }
  }
}
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e02b      	b.n	80034e0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003490:	f023 030f 	bic.w	r3, r3, #15
 8003494:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349e:	3b50      	subs	r3, #80	@ 0x50
 80034a0:	09db      	lsrs	r3, r3, #7
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f003 0311 	and.w	r3, r3, #17
 80034be:	2b11      	cmp	r3, #17
 80034c0:	d106      	bne.n	80034d0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	e006      	b.n	80034de <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	401a      	ands	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	430a      	orrs	r2, r1
 800350c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a53      	ldr	r2, [pc, #332]	@ (8003678 <DMA_Init+0x18c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	f000 80a0 	beq.w	8003672 <DMA_Init+0x186>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a51      	ldr	r2, [pc, #324]	@ (800367c <DMA_Init+0x190>)
 8003538:	4293      	cmp	r3, r2
 800353a:	f000 809a 	beq.w	8003672 <DMA_Init+0x186>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4f      	ldr	r2, [pc, #316]	@ (8003680 <DMA_Init+0x194>)
 8003544:	4293      	cmp	r3, r2
 8003546:	f000 8094 	beq.w	8003672 <DMA_Init+0x186>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a4d      	ldr	r2, [pc, #308]	@ (8003684 <DMA_Init+0x198>)
 8003550:	4293      	cmp	r3, r2
 8003552:	f000 808e 	beq.w	8003672 <DMA_Init+0x186>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a4b      	ldr	r2, [pc, #300]	@ (8003688 <DMA_Init+0x19c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	f000 8088 	beq.w	8003672 <DMA_Init+0x186>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a49      	ldr	r2, [pc, #292]	@ (800368c <DMA_Init+0x1a0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f000 8082 	beq.w	8003672 <DMA_Init+0x186>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a47      	ldr	r2, [pc, #284]	@ (8003690 <DMA_Init+0x1a4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d07c      	beq.n	8003672 <DMA_Init+0x186>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a45      	ldr	r2, [pc, #276]	@ (8003694 <DMA_Init+0x1a8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d077      	beq.n	8003672 <DMA_Init+0x186>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a44      	ldr	r2, [pc, #272]	@ (8003698 <DMA_Init+0x1ac>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d072      	beq.n	8003672 <DMA_Init+0x186>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a42      	ldr	r2, [pc, #264]	@ (800369c <DMA_Init+0x1b0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d06d      	beq.n	8003672 <DMA_Init+0x186>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a41      	ldr	r2, [pc, #260]	@ (80036a0 <DMA_Init+0x1b4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d068      	beq.n	8003672 <DMA_Init+0x186>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3f      	ldr	r2, [pc, #252]	@ (80036a4 <DMA_Init+0x1b8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d063      	beq.n	8003672 <DMA_Init+0x186>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3e      	ldr	r2, [pc, #248]	@ (80036a8 <DMA_Init+0x1bc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d05e      	beq.n	8003672 <DMA_Init+0x186>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3c      	ldr	r2, [pc, #240]	@ (80036ac <DMA_Init+0x1c0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d059      	beq.n	8003672 <DMA_Init+0x186>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3b      	ldr	r2, [pc, #236]	@ (80036b0 <DMA_Init+0x1c4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d054      	beq.n	8003672 <DMA_Init+0x186>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a39      	ldr	r2, [pc, #228]	@ (80036b4 <DMA_Init+0x1c8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d04f      	beq.n	8003672 <DMA_Init+0x186>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a38      	ldr	r2, [pc, #224]	@ (80036b8 <DMA_Init+0x1cc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04a      	beq.n	8003672 <DMA_Init+0x186>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a36      	ldr	r2, [pc, #216]	@ (80036bc <DMA_Init+0x1d0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d045      	beq.n	8003672 <DMA_Init+0x186>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a35      	ldr	r2, [pc, #212]	@ (80036c0 <DMA_Init+0x1d4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d040      	beq.n	8003672 <DMA_Init+0x186>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a33      	ldr	r2, [pc, #204]	@ (80036c4 <DMA_Init+0x1d8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d03b      	beq.n	8003672 <DMA_Init+0x186>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a32      	ldr	r2, [pc, #200]	@ (80036c8 <DMA_Init+0x1dc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d036      	beq.n	8003672 <DMA_Init+0x186>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a30      	ldr	r2, [pc, #192]	@ (80036cc <DMA_Init+0x1e0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d031      	beq.n	8003672 <DMA_Init+0x186>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2f      	ldr	r2, [pc, #188]	@ (80036d0 <DMA_Init+0x1e4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d02c      	beq.n	8003672 <DMA_Init+0x186>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2d      	ldr	r2, [pc, #180]	@ (80036d4 <DMA_Init+0x1e8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d027      	beq.n	8003672 <DMA_Init+0x186>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2c      	ldr	r2, [pc, #176]	@ (80036d8 <DMA_Init+0x1ec>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <DMA_Init+0x186>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2a      	ldr	r2, [pc, #168]	@ (80036dc <DMA_Init+0x1f0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01d      	beq.n	8003672 <DMA_Init+0x186>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a29      	ldr	r2, [pc, #164]	@ (80036e0 <DMA_Init+0x1f4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <DMA_Init+0x186>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a27      	ldr	r2, [pc, #156]	@ (80036e4 <DMA_Init+0x1f8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <DMA_Init+0x186>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a26      	ldr	r2, [pc, #152]	@ (80036e8 <DMA_Init+0x1fc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <DMA_Init+0x186>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a24      	ldr	r2, [pc, #144]	@ (80036ec <DMA_Init+0x200>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <DMA_Init+0x186>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a23      	ldr	r2, [pc, #140]	@ (80036f0 <DMA_Init+0x204>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <DMA_Init+0x186>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <DMA_Init+0x208>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d142      	bne.n	80036f8 <DMA_Init+0x20c>
 8003672:	2301      	movs	r3, #1
 8003674:	e041      	b.n	80036fa <DMA_Init+0x20e>
 8003676:	bf00      	nop
 8003678:	40020050 	.word	0x40020050
 800367c:	50020050 	.word	0x50020050
 8003680:	400200d0 	.word	0x400200d0
 8003684:	500200d0 	.word	0x500200d0
 8003688:	40020150 	.word	0x40020150
 800368c:	50020150 	.word	0x50020150
 8003690:	400201d0 	.word	0x400201d0
 8003694:	500201d0 	.word	0x500201d0
 8003698:	40020250 	.word	0x40020250
 800369c:	50020250 	.word	0x50020250
 80036a0:	400202d0 	.word	0x400202d0
 80036a4:	500202d0 	.word	0x500202d0
 80036a8:	40020350 	.word	0x40020350
 80036ac:	50020350 	.word	0x50020350
 80036b0:	400203d0 	.word	0x400203d0
 80036b4:	500203d0 	.word	0x500203d0
 80036b8:	40020450 	.word	0x40020450
 80036bc:	50020450 	.word	0x50020450
 80036c0:	400204d0 	.word	0x400204d0
 80036c4:	500204d0 	.word	0x500204d0
 80036c8:	40020550 	.word	0x40020550
 80036cc:	50020550 	.word	0x50020550
 80036d0:	400205d0 	.word	0x400205d0
 80036d4:	500205d0 	.word	0x500205d0
 80036d8:	40020650 	.word	0x40020650
 80036dc:	50020650 	.word	0x50020650
 80036e0:	400206d0 	.word	0x400206d0
 80036e4:	500206d0 	.word	0x500206d0
 80036e8:	40020750 	.word	0x40020750
 80036ec:	50020750 	.word	0x50020750
 80036f0:	400207d0 	.word	0x400207d0
 80036f4:	500207d0 	.word	0x500207d0
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d012      	beq.n	8003724 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	051b      	lsls	r3, r3, #20
 800370a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800370e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	3b01      	subs	r3, #1
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800371c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	430a      	orrs	r2, r1
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003756:	f040 80b0 	bne.w	80038ba <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a82      	ldr	r2, [pc, #520]	@ (8003968 <DMA_Init+0x47c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	f000 80a0 	beq.w	80038a6 <DMA_Init+0x3ba>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a80      	ldr	r2, [pc, #512]	@ (800396c <DMA_Init+0x480>)
 800376c:	4293      	cmp	r3, r2
 800376e:	f000 809a 	beq.w	80038a6 <DMA_Init+0x3ba>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7e      	ldr	r2, [pc, #504]	@ (8003970 <DMA_Init+0x484>)
 8003778:	4293      	cmp	r3, r2
 800377a:	f000 8094 	beq.w	80038a6 <DMA_Init+0x3ba>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7c      	ldr	r2, [pc, #496]	@ (8003974 <DMA_Init+0x488>)
 8003784:	4293      	cmp	r3, r2
 8003786:	f000 808e 	beq.w	80038a6 <DMA_Init+0x3ba>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7a      	ldr	r2, [pc, #488]	@ (8003978 <DMA_Init+0x48c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	f000 8088 	beq.w	80038a6 <DMA_Init+0x3ba>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a78      	ldr	r2, [pc, #480]	@ (800397c <DMA_Init+0x490>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f000 8082 	beq.w	80038a6 <DMA_Init+0x3ba>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a76      	ldr	r2, [pc, #472]	@ (8003980 <DMA_Init+0x494>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d07c      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a74      	ldr	r2, [pc, #464]	@ (8003984 <DMA_Init+0x498>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d077      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a73      	ldr	r2, [pc, #460]	@ (8003988 <DMA_Init+0x49c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d072      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a71      	ldr	r2, [pc, #452]	@ (800398c <DMA_Init+0x4a0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d06d      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a70      	ldr	r2, [pc, #448]	@ (8003990 <DMA_Init+0x4a4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d068      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003994 <DMA_Init+0x4a8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d063      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003998 <DMA_Init+0x4ac>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d05e      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6b      	ldr	r2, [pc, #428]	@ (800399c <DMA_Init+0x4b0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d059      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6a      	ldr	r2, [pc, #424]	@ (80039a0 <DMA_Init+0x4b4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d054      	beq.n	80038a6 <DMA_Init+0x3ba>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a68      	ldr	r2, [pc, #416]	@ (80039a4 <DMA_Init+0x4b8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04f      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a67      	ldr	r2, [pc, #412]	@ (80039a8 <DMA_Init+0x4bc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d04a      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a65      	ldr	r2, [pc, #404]	@ (80039ac <DMA_Init+0x4c0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d045      	beq.n	80038a6 <DMA_Init+0x3ba>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a64      	ldr	r2, [pc, #400]	@ (80039b0 <DMA_Init+0x4c4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d040      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a62      	ldr	r2, [pc, #392]	@ (80039b4 <DMA_Init+0x4c8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d03b      	beq.n	80038a6 <DMA_Init+0x3ba>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a61      	ldr	r2, [pc, #388]	@ (80039b8 <DMA_Init+0x4cc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d036      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5f      	ldr	r2, [pc, #380]	@ (80039bc <DMA_Init+0x4d0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d031      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5e      	ldr	r2, [pc, #376]	@ (80039c0 <DMA_Init+0x4d4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d02c      	beq.n	80038a6 <DMA_Init+0x3ba>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5c      	ldr	r2, [pc, #368]	@ (80039c4 <DMA_Init+0x4d8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d027      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5b      	ldr	r2, [pc, #364]	@ (80039c8 <DMA_Init+0x4dc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a59      	ldr	r2, [pc, #356]	@ (80039cc <DMA_Init+0x4e0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01d      	beq.n	80038a6 <DMA_Init+0x3ba>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a58      	ldr	r2, [pc, #352]	@ (80039d0 <DMA_Init+0x4e4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a56      	ldr	r2, [pc, #344]	@ (80039d4 <DMA_Init+0x4e8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <DMA_Init+0x3ba>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a55      	ldr	r2, [pc, #340]	@ (80039d8 <DMA_Init+0x4ec>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a53      	ldr	r2, [pc, #332]	@ (80039dc <DMA_Init+0x4f0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <DMA_Init+0x3ba>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a52      	ldr	r2, [pc, #328]	@ (80039e0 <DMA_Init+0x4f4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <DMA_Init+0x3ba>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a50      	ldr	r2, [pc, #320]	@ (80039e4 <DMA_Init+0x4f8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <DMA_Init+0x3be>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <DMA_Init+0x3c0>
 80038aa:	2300      	movs	r3, #0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e008      	b.n	80038cc <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c2:	d103      	bne.n	80038cc <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ca:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d2:	4b45      	ldr	r3, [pc, #276]	@ (80039e8 <DMA_Init+0x4fc>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2200      	movs	r2, #0
 80038e6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a36      	ldr	r2, [pc, #216]	@ (80039c8 <DMA_Init+0x4dc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <DMA_Init+0x44c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a35      	ldr	r2, [pc, #212]	@ (80039cc <DMA_Init+0x4e0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01d      	beq.n	8003938 <DMA_Init+0x44c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a33      	ldr	r2, [pc, #204]	@ (80039d0 <DMA_Init+0x4e4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <DMA_Init+0x44c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a32      	ldr	r2, [pc, #200]	@ (80039d4 <DMA_Init+0x4e8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <DMA_Init+0x44c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a30      	ldr	r2, [pc, #192]	@ (80039d8 <DMA_Init+0x4ec>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <DMA_Init+0x44c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2f      	ldr	r2, [pc, #188]	@ (80039dc <DMA_Init+0x4f0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <DMA_Init+0x44c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2d      	ldr	r2, [pc, #180]	@ (80039e0 <DMA_Init+0x4f4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <DMA_Init+0x44c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2c      	ldr	r2, [pc, #176]	@ (80039e4 <DMA_Init+0x4f8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <DMA_Init+0x450>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <DMA_Init+0x452>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40020050 	.word	0x40020050
 800396c:	50020050 	.word	0x50020050
 8003970:	400200d0 	.word	0x400200d0
 8003974:	500200d0 	.word	0x500200d0
 8003978:	40020150 	.word	0x40020150
 800397c:	50020150 	.word	0x50020150
 8003980:	400201d0 	.word	0x400201d0
 8003984:	500201d0 	.word	0x500201d0
 8003988:	40020250 	.word	0x40020250
 800398c:	50020250 	.word	0x50020250
 8003990:	400202d0 	.word	0x400202d0
 8003994:	500202d0 	.word	0x500202d0
 8003998:	40020350 	.word	0x40020350
 800399c:	50020350 	.word	0x50020350
 80039a0:	400203d0 	.word	0x400203d0
 80039a4:	500203d0 	.word	0x500203d0
 80039a8:	40020450 	.word	0x40020450
 80039ac:	50020450 	.word	0x50020450
 80039b0:	400204d0 	.word	0x400204d0
 80039b4:	500204d0 	.word	0x500204d0
 80039b8:	40020550 	.word	0x40020550
 80039bc:	50020550 	.word	0x50020550
 80039c0:	400205d0 	.word	0x400205d0
 80039c4:	500205d0 	.word	0x500205d0
 80039c8:	40020650 	.word	0x40020650
 80039cc:	50020650 	.word	0x50020650
 80039d0:	400206d0 	.word	0x400206d0
 80039d4:	500206d0 	.word	0x500206d0
 80039d8:	40020750 	.word	0x40020750
 80039dc:	50020750 	.word	0x50020750
 80039e0:	400207d0 	.word	0x400207d0
 80039e4:	500207d0 	.word	0x500207d0
 80039e8:	3cc03180 	.word	0x3cc03180

080039ec <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80039f4:	f7fe ffa2 	bl	800293c <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0db      	b.n	8003bbc <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc4 <HAL_DMAEx_List_Init+0x1d8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	f000 809f 	beq.w	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a6c      	ldr	r2, [pc, #432]	@ (8003bc8 <HAL_DMAEx_List_Init+0x1dc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	f000 8099 	beq.w	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a6a      	ldr	r2, [pc, #424]	@ (8003bcc <HAL_DMAEx_List_Init+0x1e0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f000 8093 	beq.w	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	@ (8003bd0 <HAL_DMAEx_List_Init+0x1e4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	f000 808d 	beq.w	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a66      	ldr	r2, [pc, #408]	@ (8003bd4 <HAL_DMAEx_List_Init+0x1e8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f000 8087 	beq.w	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a64      	ldr	r2, [pc, #400]	@ (8003bd8 <HAL_DMAEx_List_Init+0x1ec>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	f000 8081 	beq.w	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a62      	ldr	r2, [pc, #392]	@ (8003bdc <HAL_DMAEx_List_Init+0x1f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d07b      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a61      	ldr	r2, [pc, #388]	@ (8003be0 <HAL_DMAEx_List_Init+0x1f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d076      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5f      	ldr	r2, [pc, #380]	@ (8003be4 <HAL_DMAEx_List_Init+0x1f8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d071      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003be8 <HAL_DMAEx_List_Init+0x1fc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d06c      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5c      	ldr	r2, [pc, #368]	@ (8003bec <HAL_DMAEx_List_Init+0x200>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d067      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf0 <HAL_DMAEx_List_Init+0x204>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d062      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a59      	ldr	r2, [pc, #356]	@ (8003bf4 <HAL_DMAEx_List_Init+0x208>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d05d      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_DMAEx_List_Init+0x20c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d058      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a56      	ldr	r2, [pc, #344]	@ (8003bfc <HAL_DMAEx_List_Init+0x210>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d053      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a55      	ldr	r2, [pc, #340]	@ (8003c00 <HAL_DMAEx_List_Init+0x214>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d04e      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a53      	ldr	r2, [pc, #332]	@ (8003c04 <HAL_DMAEx_List_Init+0x218>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d049      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a52      	ldr	r2, [pc, #328]	@ (8003c08 <HAL_DMAEx_List_Init+0x21c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d044      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	@ (8003c0c <HAL_DMAEx_List_Init+0x220>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d03f      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8003c10 <HAL_DMAEx_List_Init+0x224>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d03a      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4d      	ldr	r2, [pc, #308]	@ (8003c14 <HAL_DMAEx_List_Init+0x228>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d035      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8003c18 <HAL_DMAEx_List_Init+0x22c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d030      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4a      	ldr	r2, [pc, #296]	@ (8003c1c <HAL_DMAEx_List_Init+0x230>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02b      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a49      	ldr	r2, [pc, #292]	@ (8003c20 <HAL_DMAEx_List_Init+0x234>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d026      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a47      	ldr	r2, [pc, #284]	@ (8003c24 <HAL_DMAEx_List_Init+0x238>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d021      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a46      	ldr	r2, [pc, #280]	@ (8003c28 <HAL_DMAEx_List_Init+0x23c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01c      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a44      	ldr	r2, [pc, #272]	@ (8003c2c <HAL_DMAEx_List_Init+0x240>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d017      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a43      	ldr	r2, [pc, #268]	@ (8003c30 <HAL_DMAEx_List_Init+0x244>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d012      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a41      	ldr	r2, [pc, #260]	@ (8003c34 <HAL_DMAEx_List_Init+0x248>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00d      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a40      	ldr	r2, [pc, #256]	@ (8003c38 <HAL_DMAEx_List_Init+0x24c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d008      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a3e      	ldr	r2, [pc, #248]	@ (8003c3c <HAL_DMAEx_List_Init+0x250>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <HAL_DMAEx_List_Init+0x162>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8003c40 <HAL_DMAEx_List_Init+0x254>)
 8003b4c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0206 	orr.w	r2, r2, #6
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003b6e:	e00f      	b.n	8003b90 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003b70:	f7fe fee4 	bl	800293c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d908      	bls.n	8003b90 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2210      	movs	r2, #16
 8003b82:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2203      	movs	r2, #3
 8003b88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e015      	b.n	8003bbc <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e8      	bne.n	8003b70 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa26 	bl	8003ff0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40020050 	.word	0x40020050
 8003bc8:	50020050 	.word	0x50020050
 8003bcc:	400200d0 	.word	0x400200d0
 8003bd0:	500200d0 	.word	0x500200d0
 8003bd4:	40020150 	.word	0x40020150
 8003bd8:	50020150 	.word	0x50020150
 8003bdc:	400201d0 	.word	0x400201d0
 8003be0:	500201d0 	.word	0x500201d0
 8003be4:	40020250 	.word	0x40020250
 8003be8:	50020250 	.word	0x50020250
 8003bec:	400202d0 	.word	0x400202d0
 8003bf0:	500202d0 	.word	0x500202d0
 8003bf4:	40020350 	.word	0x40020350
 8003bf8:	50020350 	.word	0x50020350
 8003bfc:	400203d0 	.word	0x400203d0
 8003c00:	500203d0 	.word	0x500203d0
 8003c04:	40020450 	.word	0x40020450
 8003c08:	50020450 	.word	0x50020450
 8003c0c:	400204d0 	.word	0x400204d0
 8003c10:	500204d0 	.word	0x500204d0
 8003c14:	40020550 	.word	0x40020550
 8003c18:	50020550 	.word	0x50020550
 8003c1c:	400205d0 	.word	0x400205d0
 8003c20:	500205d0 	.word	0x500205d0
 8003c24:	40020650 	.word	0x40020650
 8003c28:	50020650 	.word	0x50020650
 8003c2c:	400206d0 	.word	0x400206d0
 8003c30:	500206d0 	.word	0x500206d0
 8003c34:	40020750 	.word	0x40020750
 8003c38:	50020750 	.word	0x50020750
 8003c3c:	400207d0 	.word	0x400207d0
 8003c40:	500207d0 	.word	0x500207d0

08003c44 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_DMAEx_List_BuildNode+0x16>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e004      	b.n	8003c68 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003c5e:	6839      	ldr	r1, [r7, #0]
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fb1d 	bl	80042a0 <DMA_List_BuildNode>

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	@ 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_DMAEx_List_InsertNode+0x18>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0b6      	b.n	8003dfa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d104      	bne.n	8003c9e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2204      	movs	r2, #4
 8003c98:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0ad      	b.n	8003dfa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fc4c 	bl	8004544 <DMA_List_CheckNodesBaseAddresses>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2205      	movs	r2, #5
 8003cb6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e09e      	b.n	8003dfa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fc6d 	bl	80045a4 <DMA_List_CheckNodesTypes>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e08f      	b.n	8003dfa <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003ce6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fc93 	bl	800461c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11a      	bne.n	8003d34 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	e06c      	b.n	8003dec <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d1e:	4013      	ands	r3, r2
 8003d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d24:	4319      	orrs	r1, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	e05b      	b.n	8003dec <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d44:	4013      	ands	r3, r2
 8003d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d4a:	4319      	orrs	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e043      	b.n	8003de2 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8003d5e:	f107 0314 	add.w	r3, r7, #20
 8003d62:	461a      	mov	r2, r3
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fc88 	bl	800467c <DMA_List_FindNode>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d132      	bne.n	8003dd8 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d11a      	bne.n	8003db2 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d8e:	4013      	ands	r3, r2
 8003d90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d94:	4319      	orrs	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003da2:	4013      	ands	r3, r2
 8003da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003da8:	4319      	orrs	r1, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003db0:	e017      	b.n	8003de2 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003db2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003dc8:	4013      	ands	r3, r2
 8003dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dce:	4319      	orrs	r1, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003dd6:	e004      	b.n	8003de2 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2206      	movs	r2, #6
 8003ddc:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00b      	b.n	8003dfa <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3730      	adds	r7, #48	@ 0x30
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b08a      	sub	sp, #40	@ 0x28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e052      	b.n	8003eba <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e049      	b.n	8003eba <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00c      	beq.n	8003e48 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d101      	bne.n	8003e3e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e03d      	b.n	8003eba <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e038      	b.n	8003eba <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d104      	bne.n	8003e5a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2204      	movs	r2, #4
 8003e54:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02f      	b.n	8003eba <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f107 0220 	add.w	r2, r7, #32
 8003e6e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fbd2 	bl	800461c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	461a      	mov	r2, r3
 8003e82:	2100      	movs	r1, #0
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fbf9 	bl	800467c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003e94:	4013      	ands	r3, r2
 8003e96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003e9e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003ea0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3728      	adds	r7, #40	@ 0x28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_DMAEx_List_LinkQ+0x16>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e072      	b.n	8003fc4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ee4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d002      	beq.n	8003ef8 <HAL_DMAEx_List_LinkQ+0x34>
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d108      	bne.n	8003f0a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2240      	movs	r2, #64	@ 0x40
 8003efc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e05c      	b.n	8003fc4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	7b1b      	ldrb	r3, [r3, #12]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d104      	bne.n	8003f1e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e052      	b.n	8003fc4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd0 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_DMAEx_List_LinkQ+0xaa>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a29      	ldr	r2, [pc, #164]	@ (8003fd4 <HAL_DMAEx_List_LinkQ+0x110>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMAEx_List_LinkQ+0xaa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a28      	ldr	r2, [pc, #160]	@ (8003fd8 <HAL_DMAEx_List_LinkQ+0x114>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMAEx_List_LinkQ+0xaa>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a26      	ldr	r2, [pc, #152]	@ (8003fdc <HAL_DMAEx_List_LinkQ+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_DMAEx_List_LinkQ+0xaa>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a25      	ldr	r2, [pc, #148]	@ (8003fe0 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMAEx_List_LinkQ+0xaa>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a23      	ldr	r2, [pc, #140]	@ (8003fe4 <HAL_DMAEx_List_LinkQ+0x120>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_DMAEx_List_LinkQ+0xaa>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <HAL_DMAEx_List_LinkQ+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMAEx_List_LinkQ+0xaa>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a20      	ldr	r2, [pc, #128]	@ (8003fec <HAL_DMAEx_List_LinkQ+0x128>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMAEx_List_LinkQ+0xae>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_DMAEx_List_LinkQ+0xb0>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2203      	movs	r2, #3
 8003f8a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e019      	b.n	8003fc4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f94:	2b81      	cmp	r3, #129	@ 0x81
 8003f96:	d108      	bne.n	8003faa <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10d      	bne.n	8003fbc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00c      	b.n	8003fc4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e003      	b.n	8003fc4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40020650 	.word	0x40020650
 8003fd4:	50020650 	.word	0x50020650
 8003fd8:	400206d0 	.word	0x400206d0
 8003fdc:	500206d0 	.word	0x500206d0
 8003fe0:	40020750 	.word	0x40020750
 8003fe4:	50020750 	.word	0x50020750
 8003fe8:	400207d0 	.word	0x400207d0
 8003fec:	500207d0 	.word	0x500207d0

08003ff0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a85      	ldr	r2, [pc, #532]	@ (8004220 <DMA_List_Init+0x230>)
 800400a:	4293      	cmp	r3, r2
 800400c:	f000 80a0 	beq.w	8004150 <DMA_List_Init+0x160>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a83      	ldr	r2, [pc, #524]	@ (8004224 <DMA_List_Init+0x234>)
 8004016:	4293      	cmp	r3, r2
 8004018:	f000 809a 	beq.w	8004150 <DMA_List_Init+0x160>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a81      	ldr	r2, [pc, #516]	@ (8004228 <DMA_List_Init+0x238>)
 8004022:	4293      	cmp	r3, r2
 8004024:	f000 8094 	beq.w	8004150 <DMA_List_Init+0x160>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a7f      	ldr	r2, [pc, #508]	@ (800422c <DMA_List_Init+0x23c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	f000 808e 	beq.w	8004150 <DMA_List_Init+0x160>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a7d      	ldr	r2, [pc, #500]	@ (8004230 <DMA_List_Init+0x240>)
 800403a:	4293      	cmp	r3, r2
 800403c:	f000 8088 	beq.w	8004150 <DMA_List_Init+0x160>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7b      	ldr	r2, [pc, #492]	@ (8004234 <DMA_List_Init+0x244>)
 8004046:	4293      	cmp	r3, r2
 8004048:	f000 8082 	beq.w	8004150 <DMA_List_Init+0x160>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a79      	ldr	r2, [pc, #484]	@ (8004238 <DMA_List_Init+0x248>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d07c      	beq.n	8004150 <DMA_List_Init+0x160>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a78      	ldr	r2, [pc, #480]	@ (800423c <DMA_List_Init+0x24c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d077      	beq.n	8004150 <DMA_List_Init+0x160>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a76      	ldr	r2, [pc, #472]	@ (8004240 <DMA_List_Init+0x250>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d072      	beq.n	8004150 <DMA_List_Init+0x160>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a75      	ldr	r2, [pc, #468]	@ (8004244 <DMA_List_Init+0x254>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d06d      	beq.n	8004150 <DMA_List_Init+0x160>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a73      	ldr	r2, [pc, #460]	@ (8004248 <DMA_List_Init+0x258>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d068      	beq.n	8004150 <DMA_List_Init+0x160>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a72      	ldr	r2, [pc, #456]	@ (800424c <DMA_List_Init+0x25c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d063      	beq.n	8004150 <DMA_List_Init+0x160>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a70      	ldr	r2, [pc, #448]	@ (8004250 <DMA_List_Init+0x260>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d05e      	beq.n	8004150 <DMA_List_Init+0x160>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6f      	ldr	r2, [pc, #444]	@ (8004254 <DMA_List_Init+0x264>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d059      	beq.n	8004150 <DMA_List_Init+0x160>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6d      	ldr	r2, [pc, #436]	@ (8004258 <DMA_List_Init+0x268>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d054      	beq.n	8004150 <DMA_List_Init+0x160>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6c      	ldr	r2, [pc, #432]	@ (800425c <DMA_List_Init+0x26c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04f      	beq.n	8004150 <DMA_List_Init+0x160>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6a      	ldr	r2, [pc, #424]	@ (8004260 <DMA_List_Init+0x270>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04a      	beq.n	8004150 <DMA_List_Init+0x160>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a69      	ldr	r2, [pc, #420]	@ (8004264 <DMA_List_Init+0x274>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d045      	beq.n	8004150 <DMA_List_Init+0x160>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a67      	ldr	r2, [pc, #412]	@ (8004268 <DMA_List_Init+0x278>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <DMA_List_Init+0x160>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a66      	ldr	r2, [pc, #408]	@ (800426c <DMA_List_Init+0x27c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03b      	beq.n	8004150 <DMA_List_Init+0x160>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a64      	ldr	r2, [pc, #400]	@ (8004270 <DMA_List_Init+0x280>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d036      	beq.n	8004150 <DMA_List_Init+0x160>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a63      	ldr	r2, [pc, #396]	@ (8004274 <DMA_List_Init+0x284>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d031      	beq.n	8004150 <DMA_List_Init+0x160>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a61      	ldr	r2, [pc, #388]	@ (8004278 <DMA_List_Init+0x288>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02c      	beq.n	8004150 <DMA_List_Init+0x160>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a60      	ldr	r2, [pc, #384]	@ (800427c <DMA_List_Init+0x28c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d027      	beq.n	8004150 <DMA_List_Init+0x160>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5e      	ldr	r2, [pc, #376]	@ (8004280 <DMA_List_Init+0x290>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <DMA_List_Init+0x160>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5d      	ldr	r2, [pc, #372]	@ (8004284 <DMA_List_Init+0x294>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01d      	beq.n	8004150 <DMA_List_Init+0x160>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5b      	ldr	r2, [pc, #364]	@ (8004288 <DMA_List_Init+0x298>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <DMA_List_Init+0x160>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5a      	ldr	r2, [pc, #360]	@ (800428c <DMA_List_Init+0x29c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <DMA_List_Init+0x160>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a58      	ldr	r2, [pc, #352]	@ (8004290 <DMA_List_Init+0x2a0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <DMA_List_Init+0x160>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a57      	ldr	r2, [pc, #348]	@ (8004294 <DMA_List_Init+0x2a4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <DMA_List_Init+0x160>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a55      	ldr	r2, [pc, #340]	@ (8004298 <DMA_List_Init+0x2a8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <DMA_List_Init+0x160>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a54      	ldr	r2, [pc, #336]	@ (800429c <DMA_List_Init+0x2ac>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d101      	bne.n	8004154 <DMA_List_Init+0x164>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <DMA_List_Init+0x166>
 8004154:	2300      	movs	r3, #0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	430a      	orrs	r2, r1
 8004176:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2200      	movs	r2, #0
 8004198:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a36      	ldr	r2, [pc, #216]	@ (8004280 <DMA_List_Init+0x290>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <DMA_List_Init+0x202>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a34      	ldr	r2, [pc, #208]	@ (8004284 <DMA_List_Init+0x294>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <DMA_List_Init+0x202>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a33      	ldr	r2, [pc, #204]	@ (8004288 <DMA_List_Init+0x298>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <DMA_List_Init+0x202>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a31      	ldr	r2, [pc, #196]	@ (800428c <DMA_List_Init+0x29c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <DMA_List_Init+0x202>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a30      	ldr	r2, [pc, #192]	@ (8004290 <DMA_List_Init+0x2a0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <DMA_List_Init+0x202>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004294 <DMA_List_Init+0x2a4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <DMA_List_Init+0x202>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004298 <DMA_List_Init+0x2a8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <DMA_List_Init+0x202>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2b      	ldr	r2, [pc, #172]	@ (800429c <DMA_List_Init+0x2ac>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <DMA_List_Init+0x206>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <DMA_List_Init+0x208>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2200      	movs	r2, #0
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2200      	movs	r2, #0
 800420a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40020050 	.word	0x40020050
 8004224:	50020050 	.word	0x50020050
 8004228:	400200d0 	.word	0x400200d0
 800422c:	500200d0 	.word	0x500200d0
 8004230:	40020150 	.word	0x40020150
 8004234:	50020150 	.word	0x50020150
 8004238:	400201d0 	.word	0x400201d0
 800423c:	500201d0 	.word	0x500201d0
 8004240:	40020250 	.word	0x40020250
 8004244:	50020250 	.word	0x50020250
 8004248:	400202d0 	.word	0x400202d0
 800424c:	500202d0 	.word	0x500202d0
 8004250:	40020350 	.word	0x40020350
 8004254:	50020350 	.word	0x50020350
 8004258:	400203d0 	.word	0x400203d0
 800425c:	500203d0 	.word	0x500203d0
 8004260:	40020450 	.word	0x40020450
 8004264:	50020450 	.word	0x50020450
 8004268:	400204d0 	.word	0x400204d0
 800426c:	500204d0 	.word	0x500204d0
 8004270:	40020550 	.word	0x40020550
 8004274:	50020550 	.word	0x50020550
 8004278:	400205d0 	.word	0x400205d0
 800427c:	500205d0 	.word	0x500205d0
 8004280:	40020650 	.word	0x40020650
 8004284:	50020650 	.word	0x50020650
 8004288:	400206d0 	.word	0x400206d0
 800428c:	500206d0 	.word	0x500206d0
 8004290:	40020750 	.word	0x40020750
 8004294:	50020750 	.word	0x50020750
 8004298:	400207d0 	.word	0x400207d0
 800429c:	500207d0 	.word	0x500207d0

080042a0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80042b2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80042b8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80042be:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80042c4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e8:	3b01      	subs	r3, #1
 80042ea:	051b      	lsls	r3, r3, #20
 80042ec:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80042f0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	3b01      	subs	r3, #1
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80042fe:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004300:	431a      	orrs	r2, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	f240 237f 	movw	r3, #639	@ 0x27f
 8004312:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004314:	431a      	orrs	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004322:	d10c      	bne.n	800433e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d011      	beq.n	8004354 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	e00a      	b.n	8004354 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004346:	d105      	bne.n	8004354 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00f      	beq.n	800437c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004368:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004374:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004376:	431a      	orrs	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004380:	b29a      	uxth	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04e      	beq.n	8004430 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439a:	3b01      	subs	r3, #1
 800439c:	0419      	lsls	r1, r3, #16
 800439e:	4b67      	ldr	r3, [pc, #412]	@ (800453c <DMA_List_BuildNode+0x29c>)
 80043a0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80043a2:	431a      	orrs	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	da06      	bge.n	80043be <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	e005      	b.n	80043ca <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da06      	bge.n	80043e0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	e005      	b.n	80043ec <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da06      	bge.n	8004402 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	e005      	b.n	800440e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004412:	2b00      	cmp	r3, #0
 8004414:	da06      	bge.n	8004424 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	609a      	str	r2, [r3, #8]
 8004422:	e005      	b.n	8004430 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d059      	beq.n	8004500 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004450:	2b00      	cmp	r3, #0
 8004452:	da09      	bge.n	8004468 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004458:	425b      	negs	r3, r3
 800445a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	615a      	str	r2, [r3, #20]
 8004466:	e005      	b.n	8004474 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004478:	2b00      	cmp	r3, #0
 800447a:	da0d      	bge.n	8004498 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	425b      	negs	r3, r3
 8004482:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	0419      	lsls	r1, r3, #16
 800448c:	4b2c      	ldr	r3, [pc, #176]	@ (8004540 <DMA_List_BuildNode+0x2a0>)
 800448e:	400b      	ands	r3, r1
 8004490:	431a      	orrs	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	615a      	str	r2, [r3, #20]
 8004496:	e009      	b.n	80044ac <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a0:	0419      	lsls	r1, r3, #16
 80044a2:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <DMA_List_BuildNode+0x2a0>)
 80044a4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80044a6:	431a      	orrs	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da08      	bge.n	80044c6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	425b      	negs	r3, r3
 80044ba:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	b29a      	uxth	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	619a      	str	r2, [r3, #24]
 80044c4:	e004      	b.n	80044d0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da0b      	bge.n	80044f0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044dc:	425b      	negs	r3, r3
 80044de:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80044e8:	431a      	orrs	r2, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	619a      	str	r2, [r3, #24]
 80044ee:	e007      	b.n	8004500 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80044fa:	431a      	orrs	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d006      	beq.n	8004522 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004520:	e005      	b.n	800452e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	07ff0000 	.word	0x07ff0000
 8004540:	1fff0000 	.word	0x1fff0000

08004544 <DMA_List_CheckNodesBaseAddresses>:
#else
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
#endif /* __GNUC__ && !__CC_ARM */
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4313      	orrs	r3, r2
 800455a:	0c1b      	lsrs	r3, r3, #16
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e00a      	b.n	8004586 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e004      	b.n	8004586 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e00e      	b.n	80045e2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e006      	b.n	80045e2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80045f4:	2302      	movs	r3, #2
 80045f6:	e00b      	b.n	8004610 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800460a:	2303      	movs	r3, #3
 800460c:	e000      	b.n	8004610 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00c      	beq.n	800464e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a0d      	ldr	r2, [pc, #52]	@ (8004674 <DMA_List_GetCLLRNodeInfo+0x58>)
 800463e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00f      	beq.n	8004666 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2207      	movs	r2, #7
 800464a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800464c:	e00b      	b.n	8004666 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a08      	ldr	r2, [pc, #32]	@ (8004678 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004658:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2205      	movs	r2, #5
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	fe010000 	.word	0xfe010000
 8004678:	f8010000 	.word	0xf8010000

0800467c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	@ 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d142      	bne.n	8004726 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80046a0:	e01d      	b.n	80046de <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d107      	bne.n	80046b8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e00f      	b.n	80046d8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4413      	add	r3, r2
 80046c8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80046d0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d3dc      	bcc.n	80046a2 <DMA_List_FindNode+0x26>
 80046e8:	e029      	b.n	800473e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e00f      	b.n	8004720 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004718:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	3301      	adds	r3, #1
 8004724:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	429a      	cmp	r2, r3
 800472e:	d206      	bcs.n	800473e <DMA_List_FindNode+0xc2>
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004736:	4013      	ands	r3, r2
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	429a      	cmp	r2, r3
 800473c:	d1d5      	bne.n	80046ea <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800474a:	4013      	ands	r3, r2
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004752:	2301      	movs	r3, #1
 8004754:	e02b      	b.n	80047ae <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	461a      	mov	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00f      	beq.n	80047ac <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	461a      	mov	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800479c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3724      	adds	r7, #36	@ 0x24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	@ 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80047ce:	e1c2      	b.n	8004b56 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 81b2 	beq.w	8004b50 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a55      	ldr	r2, [pc, #340]	@ (8004944 <HAL_GPIO_Init+0x188>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d15d      	bne.n	80048b0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80047fa:	2201      	movs	r2, #1
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	4013      	ands	r3, r2
 8004808:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0201 	and.w	r2, r3, #1
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004824:	4a48      	ldr	r2, [pc, #288]	@ (8004948 <HAL_GPIO_Init+0x18c>)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800482c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800482e:	4a46      	ldr	r2, [pc, #280]	@ (8004948 <HAL_GPIO_Init+0x18c>)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	08da      	lsrs	r2, r3, #3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	3208      	adds	r2, #8
 8004842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004846:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	220f      	movs	r2, #15
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	4013      	ands	r3, r2
 800485c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	220b      	movs	r2, #11
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	4313      	orrs	r3, r2
 8004870:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	08da      	lsrs	r2, r3, #3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3208      	adds	r2, #8
 800487a:	69f9      	ldr	r1, [r7, #28]
 800487c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	2203      	movs	r2, #3
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	4013      	ands	r3, r2
 8004896:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	2202      	movs	r2, #2
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e067      	b.n	8004980 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x104>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b12      	cmp	r3, #18
 80048be:	d145      	bne.n	800494c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	08da      	lsrs	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3208      	adds	r2, #8
 80048c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	220f      	movs	r2, #15
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	08da      	lsrs	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3208      	adds	r2, #8
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	2203      	movs	r2, #3
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	4013      	ands	r3, r2
 8004922:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0203 	and.w	r2, r3, #3
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	4313      	orrs	r3, r2
 8004938:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e01e      	b.n	8004980 <HAL_GPIO_Init+0x1c4>
 8004942:	bf00      	nop
 8004944:	46020000 	.word	0x46020000
 8004948:	0800c9a4 	.word	0x0800c9a4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	4013      	ands	r3, r2
 8004962:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0203 	and.w	r2, r3, #3
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	4313      	orrs	r3, r2
 8004978:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d00b      	beq.n	80049a0 <HAL_GPIO_Init+0x1e4>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d007      	beq.n	80049a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004994:	2b11      	cmp	r3, #17
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b12      	cmp	r3, #18
 800499e:	d130      	bne.n	8004a02 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	2203      	movs	r2, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80049d6:	2201      	movs	r2, #1
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	f003 0201 	and.w	r2, r3, #1
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d107      	bne.n	8004a1a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d11b      	bne.n	8004a4a <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d017      	beq.n	8004a4a <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d07c      	beq.n	8004b50 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004a56:	4a47      	ldr	r2, [pc, #284]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a62:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0a9a      	lsrs	r2, r3, #10
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b78 <HAL_GPIO_Init+0x3bc>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	f002 0203 	and.w	r2, r2, #3
 8004a88:	00d2      	lsls	r2, r2, #3
 8004a8a:	4093      	lsls	r3, r2
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004a92:	4938      	ldr	r1, [pc, #224]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3318      	adds	r3, #24
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004aa0:	4b34      	ldr	r3, [pc, #208]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004aca:	4b2a      	ldr	r3, [pc, #168]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004aee:	4a21      	ldr	r2, [pc, #132]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004af4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004afa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004b1a:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004b22:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b28:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004b48:	4a0a      	ldr	r2, [pc, #40]	@ (8004b74 <HAL_GPIO_Init+0x3b8>)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3301      	adds	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f ae35 	bne.w	80047d0 <HAL_GPIO_Init+0x14>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3724      	adds	r7, #36	@ 0x24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	46022000 	.word	0x46022000
 8004b78:	002f7f7f 	.word	0x002f7f7f

08004b7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	@ 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004b8e:	e0bc      	b.n	8004d0a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004b90:	2201      	movs	r2, #1
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80ad 	beq.w	8004d04 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a5e      	ldr	r2, [pc, #376]	@ (8004d28 <HAL_GPIO_DeInit+0x1ac>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d115      	bne.n	8004bde <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8004bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d2c <HAL_GPIO_DeInit+0x1b0>)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bba:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004bbc:	4a5b      	ldr	r2, [pc, #364]	@ (8004d2c <HAL_GPIO_DeInit+0x1b0>)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8004bc8:	4b57      	ldr	r3, [pc, #348]	@ (8004d28 <HAL_GPIO_DeInit+0x1ac>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	4954      	ldr	r1, [pc, #336]	@ (8004d28 <HAL_GPIO_DeInit+0x1ac>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]
 8004bdc:	e053      	b.n	8004c86 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8004bde:	4a54      	ldr	r2, [pc, #336]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	3318      	adds	r3, #24
 8004be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bea:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	0a9a      	lsrs	r2, r3, #10
 8004c04:	4b4b      	ldr	r3, [pc, #300]	@ (8004d34 <HAL_GPIO_DeInit+0x1b8>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	f002 0203 	and.w	r2, r2, #3
 8004c0e:	00d2      	lsls	r2, r2, #3
 8004c10:	4093      	lsls	r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d136      	bne.n	8004c86 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8004c18:	4b45      	ldr	r3, [pc, #276]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	4943      	ldr	r1, [pc, #268]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8004c2a:	4b41      	ldr	r3, [pc, #260]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	493e      	ldr	r1, [pc, #248]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8004c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	493a      	ldr	r1, [pc, #232]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8004c4a:	4b39      	ldr	r3, [pc, #228]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	4937      	ldr	r1, [pc, #220]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	220f      	movs	r2, #15
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004c68:	4a31      	ldr	r2, [pc, #196]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	3318      	adds	r3, #24
 8004c70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	43da      	mvns	r2, r3
 8004c78:	482d      	ldr	r0, [pc, #180]	@ (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	400a      	ands	r2, r1
 8004c80:	3318      	adds	r3, #24
 8004c82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	2103      	movs	r1, #3
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	431a      	orrs	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	08da      	lsrs	r2, r3, #3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	3208      	adds	r2, #8
 8004ca2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	220f      	movs	r2, #15
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	08d2      	lsrs	r2, r2, #3
 8004cba:	4019      	ands	r1, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3208      	adds	r2, #8
 8004cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	2103      	movs	r1, #3
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	401a      	ands	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	2101      	movs	r1, #1
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	401a      	ands	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	2103      	movs	r1, #3
 8004cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	401a      	ands	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	3301      	adds	r3, #1
 8004d08:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f47f af3c 	bne.w	8004b90 <HAL_GPIO_DeInit+0x14>
  }
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	3724      	adds	r7, #36	@ 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	46020000 	.word	0x46020000
 8004d2c:	0800c9a4 	.word	0x0800c9a4
 8004d30:	46022000 	.word	0x46022000
 8004d34:	002f7f7f 	.word	0x002f7f7f

08004d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]
 8004d44:	4613      	mov	r3, r2
 8004d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d48:	787b      	ldrb	r3, [r7, #1]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004d54:	e002      	b.n	8004d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004d56:	887a      	ldrh	r2, [r7, #2]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004d72:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f814 	bl	8004db4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004d8c:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004d98:	4a05      	ldr	r2, [pc, #20]	@ (8004db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 f812 	bl	8004dca <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	46022000 	.word	0x46022000

08004db4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e08d      	b.n	8004f0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fc fd1a 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	@ 0x24
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	e006      	b.n	8004e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d108      	bne.n	8004e82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	e007      	b.n	8004e92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69d9      	ldr	r1, [r3, #28]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	817b      	strh	r3, [r7, #10]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	813b      	strh	r3, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f040 80f9 	bne.w	8005132 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x34>
 8004f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0ed      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x4e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0e6      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f6e:	f7fd fce5 	bl	800293c <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2319      	movs	r3, #25
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fbc9 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0d1      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2221      	movs	r2, #33	@ 0x21
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2240      	movs	r2, #64	@ 0x40
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fb8:	88f8      	ldrh	r0, [r7, #6]
 8004fba:	893a      	ldrh	r2, [r7, #8]
 8004fbc:	8979      	ldrh	r1, [r7, #10]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fad9 	bl	8005580 <I2C_RequestMemoryWrite>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0a9      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2bff      	cmp	r3, #255	@ 0xff
 8004fe8:	d90e      	bls.n	8005008 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	@ 0xff
 8004fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	8979      	ldrh	r1, [r7, #10]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fd4d 	bl	8005aa0 <I2C_TransferConfig>
 8005006:	e00f      	b.n	8005028 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005016:	b2da      	uxtb	r2, r3
 8005018:	8979      	ldrh	r1, [r7, #10]
 800501a:	2300      	movs	r3, #0
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fd3c 	bl	8005aa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fbcc 	bl	80057ca <I2C_WaitOnTXISFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e07b      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d034      	beq.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d130      	bne.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	@ 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fb45 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e04d      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2bff      	cmp	r3, #255	@ 0xff
 80050a0:	d90e      	bls.n	80050c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	@ 0xff
 80050a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fcf1 	bl	8005aa0 <I2C_TransferConfig>
 80050be:	e00f      	b.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fce0 	bl	8005aa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d19e      	bne.n	8005028 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fbb2 	bl	8005858 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e01a      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2220      	movs	r2, #32
 8005104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <HAL_I2C_Mem_Write+0x224>)
 8005112:	400b      	ands	r3, r1
 8005114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	fe00e800 	.word	0xfe00e800

08005140 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4603      	mov	r3, r0
 8005150:	817b      	strh	r3, [r7, #10]
 8005152:	460b      	mov	r3, r1
 8005154:	813b      	strh	r3, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b20      	cmp	r3, #32
 8005164:	f040 80fd 	bne.w	8005362 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_I2C_Mem_Read+0x34>
 800516e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800517a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0f1      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_I2C_Mem_Read+0x4e>
 800518a:	2302      	movs	r3, #2
 800518c:	e0ea      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005196:	f7fd fbd1 	bl	800293c <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2319      	movs	r3, #25
 80051a2:	2201      	movs	r2, #1
 80051a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fab5 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0d5      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2222      	movs	r2, #34	@ 0x22
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e0:	88f8      	ldrh	r0, [r7, #6]
 80051e2:	893a      	ldrh	r2, [r7, #8]
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4603      	mov	r3, r0
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fa19 	bl	8005628 <I2C_RequestMemoryRead>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0ad      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2bff      	cmp	r3, #255	@ 0xff
 8005210:	d90e      	bls.n	8005230 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	22ff      	movs	r2, #255	@ 0xff
 8005216:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521c:	b2da      	uxtb	r2, r3
 800521e:	8979      	ldrh	r1, [r7, #10]
 8005220:	4b52      	ldr	r3, [pc, #328]	@ (800536c <HAL_I2C_Mem_Read+0x22c>)
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fc39 	bl	8005aa0 <I2C_TransferConfig>
 800522e:	e00f      	b.n	8005250 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523e:	b2da      	uxtb	r2, r3
 8005240:	8979      	ldrh	r1, [r7, #10]
 8005242:	4b4a      	ldr	r3, [pc, #296]	@ (800536c <HAL_I2C_Mem_Read+0x22c>)
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fc28 	bl	8005aa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	2200      	movs	r2, #0
 8005258:	2104      	movs	r1, #4
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fa5c 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e07c      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d034      	beq.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d130      	bne.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	@ 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fa2d 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e04d      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2bff      	cmp	r3, #255	@ 0xff
 80052d0:	d90e      	bls.n	80052f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	22ff      	movs	r2, #255	@ 0xff
 80052d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	8979      	ldrh	r1, [r7, #10]
 80052e0:	2300      	movs	r3, #0
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fbd9 	bl	8005aa0 <I2C_TransferConfig>
 80052ee:	e00f      	b.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	2300      	movs	r3, #0
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fbc8 	bl	8005aa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d19a      	bne.n	8005250 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fa9a 	bl	8005858 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e01a      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2220      	movs	r2, #32
 8005334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <HAL_I2C_Mem_Read+0x230>)
 8005342:	400b      	ands	r3, r1
 8005344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	80002400 	.word	0x80002400
 8005370:	fe00e800 	.word	0xfe00e800

08005374 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	@ 0x28
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	460b      	mov	r3, r1
 8005382:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b20      	cmp	r3, #32
 8005396:	f040 80ed 	bne.w	8005574 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	d101      	bne.n	80053ae <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
 80053ac:	e0e3      	b.n	8005576 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_I2C_IsDeviceReady+0x48>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e0dc      	b.n	8005576 <HAL_I2C_IsDeviceReady+0x202>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2224      	movs	r2, #36	@ 0x24
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_I2C_IsDeviceReady+0x76>
 80053da:	897b      	ldrh	r3, [r7, #10]
 80053dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053e8:	e006      	b.n	80053f8 <HAL_I2C_IsDeviceReady+0x84>
 80053ea:	897b      	ldrh	r3, [r7, #10]
 80053ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80053fe:	f7fd fa9d 	bl	800293c <HAL_GetTick>
 8005402:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005430:	e034      	b.n	800549c <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d01a      	beq.n	8005470 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fd fa7f 	bl	800293c <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <HAL_I2C_IsDeviceReady+0xdc>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10f      	bne.n	8005470 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e082      	b.n	8005576 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b10      	cmp	r3, #16
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800549c:	7fbb      	ldrb	r3, [r7, #30]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <HAL_I2C_IsDeviceReady+0x134>
 80054a2:	7f7b      	ldrb	r3, [r7, #29]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0c4      	beq.n	8005432 <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d027      	beq.n	8005506 <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2200      	movs	r2, #0
 80054be:	2120      	movs	r1, #32
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f929 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d107      	bne.n	80054e4 <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2220      	movs	r2, #32
 80054da:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80054e2:	e026      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e023      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2220      	movs	r2, #32
 80054f0:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e037      	b.n	8005576 <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2210      	movs	r2, #16
 800550c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2200      	movs	r2, #0
 8005516:	2120      	movs	r1, #32
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f8fd 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e003      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2220      	movs	r2, #32
 8005530:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3301      	adds	r3, #1
 8005536:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d904      	bls.n	800554a <HAL_I2C_IsDeviceReady+0x1d6>
 8005540:	7ffb      	ldrb	r3, [r7, #31]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	f63f af3f 	bhi.w	80053d2 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	817b      	strh	r3, [r7, #10]
 8005592:	460b      	mov	r3, r1
 8005594:	813b      	strh	r3, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	b2da      	uxtb	r2, r3
 800559e:	8979      	ldrh	r1, [r7, #10]
 80055a0:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <I2C_RequestMemoryWrite+0xa4>)
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fa79 	bl	8005aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	69b9      	ldr	r1, [r7, #24]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f909 	bl	80057ca <I2C_WaitOnTXISFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e02c      	b.n	800561c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055c8:	893b      	ldrh	r3, [r7, #8]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80055d2:	e015      	b.n	8005600 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055d4:	893b      	ldrh	r3, [r7, #8]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f8ef 	bl	80057ca <I2C_WaitOnTXISFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e012      	b.n	800561c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055f6:	893b      	ldrh	r3, [r7, #8]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2200      	movs	r2, #0
 8005608:	2180      	movs	r1, #128	@ 0x80
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f884 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	80002000 	.word	0x80002000

08005628 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4603      	mov	r3, r0
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	460b      	mov	r3, r1
 800563c:	813b      	strh	r3, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	8979      	ldrh	r1, [r7, #10]
 8005648:	4b20      	ldr	r3, [pc, #128]	@ (80056cc <I2C_RequestMemoryRead+0xa4>)
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	2300      	movs	r3, #0
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fa26 	bl	8005aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	69b9      	ldr	r1, [r7, #24]
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f8b6 	bl	80057ca <I2C_WaitOnTXISFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e02c      	b.n	80056c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005668:	88fb      	ldrh	r3, [r7, #6]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800566e:	893b      	ldrh	r3, [r7, #8]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	629a      	str	r2, [r3, #40]	@ 0x28
 8005678:	e015      	b.n	80056a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800567a:	893b      	ldrh	r3, [r7, #8]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	b29b      	uxth	r3, r3
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	69b9      	ldr	r1, [r7, #24]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f89c 	bl	80057ca <I2C_WaitOnTXISFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e012      	b.n	80056c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800569c:	893b      	ldrh	r3, [r7, #8]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2140      	movs	r1, #64	@ 0x40
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f831 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	80002000 	.word	0x80002000

080056d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d007      	beq.n	800570c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	619a      	str	r2, [r3, #24]
  }
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005728:	e03b      	b.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f8d6 	bl	80058e0 <I2C_IsErrorOccurred>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e041      	b.n	80057c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d02d      	beq.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005746:	f7fd f8f9 	bl	800293c <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d122      	bne.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4013      	ands	r3, r2
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	429a      	cmp	r2, r3
 8005778:	d113      	bne.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e00f      	b.n	80057c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d0b4      	beq.n	800572a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057d6:	e033      	b.n	8005840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f87f 	bl	80058e0 <I2C_IsErrorOccurred>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e031      	b.n	8005850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d025      	beq.n	8005840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fd f8a2 	bl	800293c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11a      	bne.n	8005840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b02      	cmp	r3, #2
 8005816:	d013      	beq.n	8005840 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581c:	f043 0220 	orr.w	r2, r3, #32
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e007      	b.n	8005850 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d1c4      	bne.n	80057d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005864:	e02f      	b.n	80058c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f838 	bl	80058e0 <I2C_IsErrorOccurred>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e02d      	b.n	80058d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fd f85f 	bl	800293c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11a      	bne.n	80058c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b20      	cmp	r3, #32
 800589c:	d013      	beq.n	80058c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e007      	b.n	80058d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d1c8      	bne.n	8005866 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	@ 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d068      	beq.n	80059de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2210      	movs	r2, #16
 8005912:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005914:	e049      	b.n	80059aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d045      	beq.n	80059aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fd f80d 	bl	800293c <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_IsErrorOccurred+0x54>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d13a      	bne.n	80059aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005946:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005956:	d121      	bne.n	800599c <I2C_IsErrorOccurred+0xbc>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800595e:	d01d      	beq.n	800599c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b20      	cmp	r3, #32
 8005964:	d01a      	beq.n	800599c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005974:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005976:	f7fc ffe1 	bl	800293c <HAL_GetTick>
 800597a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800597c:	e00e      	b.n	800599c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800597e:	f7fc ffdd 	bl	800293c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b19      	cmp	r3, #25
 800598a:	d907      	bls.n	800599c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	f043 0320 	orr.w	r3, r3, #32
 8005992:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800599a:	e006      	b.n	80059aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d1e9      	bne.n	800597e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d003      	beq.n	80059c0 <I2C_IsErrorOccurred+0xe0>
 80059b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0aa      	beq.n	8005916 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80059c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2220      	movs	r2, #32
 80059ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	f043 0304 	orr.w	r3, r3, #4
 80059d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f043 0302 	orr.w	r3, r3, #2
 8005a3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01c      	beq.n	8005a8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff fe3b 	bl	80056d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6859      	ldr	r1, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <I2C_IsErrorOccurred+0x1bc>)
 8005a66:	400b      	ands	r3, r1
 8005a68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3728      	adds	r7, #40	@ 0x28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	fe00e800 	.word	0xfe00e800

08005aa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	817b      	strh	r3, [r7, #10]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ab8:	7a7b      	ldrb	r3, [r7, #9]
 8005aba:	041b      	lsls	r3, r3, #16
 8005abc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ac0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ace:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	0d5b      	lsrs	r3, r3, #21
 8005ada:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005ade:	4b08      	ldr	r3, [pc, #32]	@ (8005b00 <I2C_TransferConfig+0x60>)
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	ea02 0103 	and.w	r1, r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	03ff63ff 	.word	0x03ff63ff

08005b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d138      	bne.n	8005b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e032      	b.n	8005b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	@ 0x24
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d139      	bne.n	8005c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e033      	b.n	8005c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2224      	movs	r2, #36	@ 0x24
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005c3c:	4b39      	ldr	r3, [pc, #228]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c44:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d10b      	bne.n	8005c66 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c54:	d905      	bls.n	8005c62 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005c56:	4b33      	ldr	r3, [pc, #204]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4a32      	ldr	r2, [pc, #200]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c60:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e057      	b.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c6c:	d90a      	bls.n	8005c84 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c80:	60d3      	str	r3, [r2, #12]
 8005c82:	e007      	b.n	8005c94 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005c84:	4b27      	ldr	r3, [pc, #156]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005c8c:	4925      	ldr	r1, [pc, #148]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005c94:	4b24      	ldr	r3, [pc, #144]	@ (8005d28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a24      	ldr	r2, [pc, #144]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	099b      	lsrs	r3, r3, #6
 8005ca0:	2232      	movs	r2, #50	@ 0x32
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	4a21      	ldr	r2, [pc, #132]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	099b      	lsrs	r3, r3, #6
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005cb2:	e002      	b.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005cba:	4b1a      	ldr	r3, [pc, #104]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <HAL_PWREx_ControlVoltageScaling+0x98>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f3      	bne.n	8005cb4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01b      	beq.n	8005d0a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005cd2:	4b15      	ldr	r3, [pc, #84]	@ (8005d28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	099b      	lsrs	r3, r3, #6
 8005cde:	2232      	movs	r2, #50	@ 0x32
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	4a11      	ldr	r2, [pc, #68]	@ (8005d2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	099b      	lsrs	r3, r3, #6
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005cf0:	e002      	b.n	8005cf8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f3      	bne.n	8005cf2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e000      	b.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	46020800 	.word	0x46020800
 8005d28:	2000001c 	.word	0x2000001c
 8005d2c:	10624dd3 	.word	0x10624dd3

08005d30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005d34:	4b04      	ldr	r3, [pc, #16]	@ (8005d48 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	46020800 	.word	0x46020800

08005d4c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8005d50:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	4a04      	ldr	r2, [pc, #16]	@ (8005d68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d5a:	6113      	str	r3, [r2, #16]
}
 8005d5c:	bf00      	nop
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	46020800 	.word	0x46020800

08005d6c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005d70:	4b05      	ldr	r3, [pc, #20]	@ (8005d88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	4a04      	ldr	r2, [pc, #16]	@ (8005d88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d7a:	6113      	str	r3, [r2, #16]
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	46020800 	.word	0x46020800

08005d8c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005d90:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <HAL_PWREx_EnableVddA+0x1c>)
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	4a04      	ldr	r2, [pc, #16]	@ (8005da8 <HAL_PWREx_EnableVddA+0x1c>)
 8005d96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d9a:	6113      	str	r3, [r2, #16]
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	46020800 	.word	0x46020800

08005dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08e      	sub	sp, #56	@ 0x38
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f000 bec8 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc6:	4b99      	ldr	r3, [pc, #612]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dd0:	4b96      	ldr	r3, [pc, #600]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 816c 	beq.w	80060c0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <HAL_RCC_OscConfig+0x52>
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	f040 80de 	bne.w	8005fb2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	f040 80da 	bne.w	8005fb2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f000 bea5 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e10:	4b86      	ldr	r3, [pc, #536]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <HAL_RCC_OscConfig+0x7a>
 8005e1c:	4b83      	ldr	r3, [pc, #524]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e24:	e005      	b.n	8005e32 <HAL_RCC_OscConfig+0x86>
 8005e26:	4b81      	ldr	r3, [pc, #516]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d255      	bcs.n	8005ee2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 f9d9 	bl	80071f8 <RCC_SetFlashLatencyFromMSIRange>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f000 be82 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005e52:	4b76      	ldr	r3, [pc, #472]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	4a75      	ldr	r2, [pc, #468]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e5c:	6093      	str	r3, [r2, #8]
 8005e5e:	4b73      	ldr	r3, [pc, #460]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	4970      	ldr	r1, [pc, #448]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e78:	d309      	bcc.n	8005e8e <HAL_RCC_OscConfig+0xe2>
 8005e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f023 021f 	bic.w	r2, r3, #31
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	4969      	ldr	r1, [pc, #420]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60cb      	str	r3, [r1, #12]
 8005e8c:	e07e      	b.n	8005f8c <HAL_RCC_OscConfig+0x1e0>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da0a      	bge.n	8005eac <HAL_RCC_OscConfig+0x100>
 8005e96:	4b65      	ldr	r3, [pc, #404]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	015b      	lsls	r3, r3, #5
 8005ea4:	4961      	ldr	r1, [pc, #388]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60cb      	str	r3, [r1, #12]
 8005eaa:	e06f      	b.n	8005f8c <HAL_RCC_OscConfig+0x1e0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb4:	d30a      	bcc.n	8005ecc <HAL_RCC_OscConfig+0x120>
 8005eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	029b      	lsls	r3, r3, #10
 8005ec4:	4959      	ldr	r1, [pc, #356]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60cb      	str	r3, [r1, #12]
 8005eca:	e05f      	b.n	8005f8c <HAL_RCC_OscConfig+0x1e0>
 8005ecc:	4b57      	ldr	r3, [pc, #348]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	03db      	lsls	r3, r3, #15
 8005eda:	4954      	ldr	r1, [pc, #336]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60cb      	str	r3, [r1, #12]
 8005ee0:	e054      	b.n	8005f8c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005ee2:	4b52      	ldr	r3, [pc, #328]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	4a51      	ldr	r2, [pc, #324]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ee8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	4b4f      	ldr	r3, [pc, #316]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	494c      	ldr	r1, [pc, #304]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005f08:	d309      	bcc.n	8005f1e <HAL_RCC_OscConfig+0x172>
 8005f0a:	4b48      	ldr	r3, [pc, #288]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f023 021f 	bic.w	r2, r3, #31
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	4945      	ldr	r1, [pc, #276]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60cb      	str	r3, [r1, #12]
 8005f1c:	e028      	b.n	8005f70 <HAL_RCC_OscConfig+0x1c4>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da0a      	bge.n	8005f3c <HAL_RCC_OscConfig+0x190>
 8005f26:	4b41      	ldr	r3, [pc, #260]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	015b      	lsls	r3, r3, #5
 8005f34:	493d      	ldr	r1, [pc, #244]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60cb      	str	r3, [r1, #12]
 8005f3a:	e019      	b.n	8005f70 <HAL_RCC_OscConfig+0x1c4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f44:	d30a      	bcc.n	8005f5c <HAL_RCC_OscConfig+0x1b0>
 8005f46:	4b39      	ldr	r3, [pc, #228]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	029b      	lsls	r3, r3, #10
 8005f54:	4935      	ldr	r1, [pc, #212]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60cb      	str	r3, [r1, #12]
 8005f5a:	e009      	b.n	8005f70 <HAL_RCC_OscConfig+0x1c4>
 8005f5c:	4b33      	ldr	r3, [pc, #204]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	03db      	lsls	r3, r3, #15
 8005f6a:	4930      	ldr	r1, [pc, #192]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 f93c 	bl	80071f8 <RCC_SetFlashLatencyFromMSIRange>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f000 bde5 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005f8c:	f001 f8de 	bl	800714c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f90:	4b27      	ldr	r3, [pc, #156]	@ (8006030 <HAL_RCC_OscConfig+0x284>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fc fc47 	bl	8002828 <HAL_InitTick>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 808a 	beq.w	80060be <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005faa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fae:	f000 bdd2 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d066      	beq.n	8006088 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005fba:	4b1c      	ldr	r3, [pc, #112]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005fc6:	f7fc fcb9 	bl	800293c <HAL_GetTick>
 8005fca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005fcc:	e009      	b.n	8005fe2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fce:	f7fc fcb5 	bl	800293c <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d902      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	f000 bdba 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005fe2:	4b12      	ldr	r3, [pc, #72]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ef      	beq.n	8005fce <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005fee:	4b0f      	ldr	r3, [pc, #60]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ff8:	6093      	str	r3, [r2, #8]
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	4909      	ldr	r1, [pc, #36]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8006008:	4313      	orrs	r3, r2
 800600a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006014:	d30e      	bcc.n	8006034 <HAL_RCC_OscConfig+0x288>
 8006016:	4b05      	ldr	r3, [pc, #20]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f023 021f 	bic.w	r2, r3, #31
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	4902      	ldr	r1, [pc, #8]	@ (800602c <HAL_RCC_OscConfig+0x280>)
 8006024:	4313      	orrs	r3, r2
 8006026:	60cb      	str	r3, [r1, #12]
 8006028:	e04a      	b.n	80060c0 <HAL_RCC_OscConfig+0x314>
 800602a:	bf00      	nop
 800602c:	46020c00 	.word	0x46020c00
 8006030:	20000020 	.word	0x20000020
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	da0a      	bge.n	8006052 <HAL_RCC_OscConfig+0x2a6>
 800603c:	4b98      	ldr	r3, [pc, #608]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	015b      	lsls	r3, r3, #5
 800604a:	4995      	ldr	r1, [pc, #596]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800604c:	4313      	orrs	r3, r2
 800604e:	60cb      	str	r3, [r1, #12]
 8006050:	e036      	b.n	80060c0 <HAL_RCC_OscConfig+0x314>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605a:	d30a      	bcc.n	8006072 <HAL_RCC_OscConfig+0x2c6>
 800605c:	4b90      	ldr	r3, [pc, #576]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	498d      	ldr	r1, [pc, #564]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800606c:	4313      	orrs	r3, r2
 800606e:	60cb      	str	r3, [r1, #12]
 8006070:	e026      	b.n	80060c0 <HAL_RCC_OscConfig+0x314>
 8006072:	4b8b      	ldr	r3, [pc, #556]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	03db      	lsls	r3, r3, #15
 8006080:	4987      	ldr	r1, [pc, #540]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	60cb      	str	r3, [r1, #12]
 8006086:	e01b      	b.n	80060c0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006088:	4b85      	ldr	r3, [pc, #532]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a84      	ldr	r2, [pc, #528]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006094:	f7fc fc52 	bl	800293c <HAL_GetTick>
 8006098:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800609a:	e009      	b.n	80060b0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800609c:	f7fc fc4e 	bl	800293c <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d902      	bls.n	80060b0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	f000 bd53 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80060b0:	4b7b      	ldr	r3, [pc, #492]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ef      	bne.n	800609c <HAL_RCC_OscConfig+0x2f0>
 80060bc:	e000      	b.n	80060c0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80060be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 808b 	beq.w	80061e4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_OscConfig+0x334>
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d6:	2b0c      	cmp	r3, #12
 80060d8:	d109      	bne.n	80060ee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d106      	bne.n	80060ee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d17d      	bne.n	80061e4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f000 bd34 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f6:	d106      	bne.n	8006106 <HAL_RCC_OscConfig+0x35a>
 80060f8:	4b69      	ldr	r3, [pc, #420]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a68      	ldr	r2, [pc, #416]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 80060fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e041      	b.n	800618a <HAL_RCC_OscConfig+0x3de>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800610e:	d112      	bne.n	8006136 <HAL_RCC_OscConfig+0x38a>
 8006110:	4b63      	ldr	r3, [pc, #396]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a62      	ldr	r2, [pc, #392]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006116:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	4b60      	ldr	r3, [pc, #384]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5f      	ldr	r2, [pc, #380]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006122:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	4b5d      	ldr	r3, [pc, #372]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5c      	ldr	r2, [pc, #368]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800612e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e029      	b.n	800618a <HAL_RCC_OscConfig+0x3de>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800613e:	d112      	bne.n	8006166 <HAL_RCC_OscConfig+0x3ba>
 8006140:	4b57      	ldr	r3, [pc, #348]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a56      	ldr	r2, [pc, #344]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	4b54      	ldr	r3, [pc, #336]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a53      	ldr	r2, [pc, #332]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	4b51      	ldr	r3, [pc, #324]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a50      	ldr	r2, [pc, #320]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800615e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	e011      	b.n	800618a <HAL_RCC_OscConfig+0x3de>
 8006166:	4b4e      	ldr	r3, [pc, #312]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4d      	ldr	r2, [pc, #308]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800616c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	4b4b      	ldr	r3, [pc, #300]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4a      	ldr	r2, [pc, #296]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006178:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	4b48      	ldr	r3, [pc, #288]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a47      	ldr	r2, [pc, #284]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006184:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006188:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d014      	beq.n	80061bc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006192:	f7fc fbd3 	bl	800293c <HAL_GetTick>
 8006196:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006198:	e009      	b.n	80061ae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800619a:	f7fc fbcf 	bl	800293c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b64      	cmp	r3, #100	@ 0x64
 80061a6:	d902      	bls.n	80061ae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	f000 bcd4 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061ae:	4b3c      	ldr	r3, [pc, #240]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ef      	beq.n	800619a <HAL_RCC_OscConfig+0x3ee>
 80061ba:	e013      	b.n	80061e4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80061bc:	f7fc fbbe 	bl	800293c <HAL_GetTick>
 80061c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061c2:	e009      	b.n	80061d8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c4:	f7fc fbba 	bl	800293c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b64      	cmp	r3, #100	@ 0x64
 80061d0:	d902      	bls.n	80061d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	f000 bcbf 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061d8:	4b31      	ldr	r3, [pc, #196]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1ef      	bne.n	80061c4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05f      	beq.n	80062b0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d005      	beq.n	8006202 <HAL_RCC_OscConfig+0x456>
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d114      	bne.n	8006226 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d111      	bne.n	8006226 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f000 bca3 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006210:	4b23      	ldr	r3, [pc, #140]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	4920      	ldr	r1, [pc, #128]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006224:	e044      	b.n	80062b0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d024      	beq.n	8006278 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800622e:	4b1c      	ldr	r3, [pc, #112]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1b      	ldr	r2, [pc, #108]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006238:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800623a:	f7fc fb7f 	bl	800293c <HAL_GetTick>
 800623e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006240:	e009      	b.n	8006256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006242:	f7fc fb7b 	bl	800293c <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d902      	bls.n	8006256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	f000 bc80 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006256:	4b12      	ldr	r3, [pc, #72]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0ef      	beq.n	8006242 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006262:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	490b      	ldr	r1, [pc, #44]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 8006272:	4313      	orrs	r3, r2
 8006274:	610b      	str	r3, [r1, #16]
 8006276:	e01b      	b.n	80062b0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006278:	4b09      	ldr	r3, [pc, #36]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a08      	ldr	r2, [pc, #32]	@ (80062a0 <HAL_RCC_OscConfig+0x4f4>)
 800627e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006282:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006284:	f7fc fb5a 	bl	800293c <HAL_GetTick>
 8006288:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800628c:	f7fc fb56 	bl	800293c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d904      	bls.n	80062a4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	f000 bc5b 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
 80062a0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062a4:	4baf      	ldr	r3, [pc, #700]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ed      	bne.n	800628c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 80c8 	beq.w	800644e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80062be:	2300      	movs	r3, #0
 80062c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c4:	4ba7      	ldr	r3, [pc, #668]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80062c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d111      	bne.n	80062f6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d2:	4ba4      	ldr	r3, [pc, #656]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80062d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d8:	4aa2      	ldr	r2, [pc, #648]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80062e2:	4ba0      	ldr	r3, [pc, #640]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80062e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80062f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 80062f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d119      	bne.n	8006336 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006302:	4b99      	ldr	r3, [pc, #612]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	4a98      	ldr	r2, [pc, #608]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 8006308:	f043 0301 	orr.w	r3, r3, #1
 800630c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800630e:	f7fc fb15 	bl	800293c <HAL_GetTick>
 8006312:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006314:	e009      	b.n	800632a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006316:	f7fc fb11 	bl	800293c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d902      	bls.n	800632a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	f000 bc16 	b.w	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800632a:	4b8f      	ldr	r3, [pc, #572]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 800632c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0ef      	beq.n	8006316 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d05f      	beq.n	80063fe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800633e:	4b89      	ldr	r3, [pc, #548]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006344:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006350:	429a      	cmp	r2, r3
 8006352:	d037      	beq.n	80063c4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e3f4      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01b      	beq.n	80063ae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006376:	4b7b      	ldr	r3, [pc, #492]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800637c:	4a79      	ldr	r2, [pc, #484]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 800637e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006382:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006386:	f7fc fad9 	bl	800293c <HAL_GetTick>
 800638a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800638e:	f7fc fad5 	bl	800293c <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b05      	cmp	r3, #5
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e3da      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063a0:	4b70      	ldr	r3, [pc, #448]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80063a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1ef      	bne.n	800638e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80063ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80063b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4969      	ldr	r1, [pc, #420]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80063c4:	4b67      	ldr	r3, [pc, #412]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80063c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ca:	4a66      	ldr	r2, [pc, #408]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80063cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80063d4:	f7fc fab2 	bl	800293c <HAL_GetTick>
 80063d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063dc:	f7fc faae 	bl	800293c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b05      	cmp	r3, #5
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e3b3      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80063ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80063f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ef      	beq.n	80063dc <HAL_RCC_OscConfig+0x630>
 80063fc:	e01b      	b.n	8006436 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80063fe:	4b59      	ldr	r3, [pc, #356]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006404:	4a57      	ldr	r2, [pc, #348]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006406:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800640a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800640e:	f7fc fa95 	bl	800293c <HAL_GetTick>
 8006412:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006416:	f7fc fa91 	bl	800293c <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b05      	cmp	r3, #5
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e396      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006428:	4b4e      	ldr	r3, [pc, #312]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 800642a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800642e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1ef      	bne.n	8006416 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006436:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800643e:	4b49      	ldr	r3, [pc, #292]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006444:	4a47      	ldr	r2, [pc, #284]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006446:	f023 0304 	bic.w	r3, r3, #4
 800644a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8111 	beq.w	800667e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006462:	4b40      	ldr	r3, [pc, #256]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d111      	bne.n	8006494 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006470:	4b3c      	ldr	r3, [pc, #240]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006476:	4a3b      	ldr	r2, [pc, #236]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006478:	f043 0304 	orr.w	r3, r3, #4
 800647c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006480:	4b38      	ldr	r3, [pc, #224]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006494:	4b34      	ldr	r3, [pc, #208]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d118      	bne.n	80064d2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064a0:	4b31      	ldr	r3, [pc, #196]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	4a30      	ldr	r2, [pc, #192]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ac:	f7fc fa46 	bl	800293c <HAL_GetTick>
 80064b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b4:	f7fc fa42 	bl	800293c <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e347      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064c6:	4b28      	ldr	r3, [pc, #160]	@ (8006568 <HAL_RCC_OscConfig+0x7bc>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01f      	beq.n	800651e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d010      	beq.n	800650c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80064ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80064ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80064f2:	f043 0304 	orr.w	r3, r3, #4
 80064f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 80064fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006500:	4a18      	ldr	r2, [pc, #96]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800650a:	e018      	b.n	800653e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800650c:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 800650e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006512:	4a14      	ldr	r2, [pc, #80]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800651c:	e00f      	b.n	800653e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800651e:	4b11      	ldr	r3, [pc, #68]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006524:	4a0f      	ldr	r2, [pc, #60]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800652e:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006534:	4a0b      	ldr	r2, [pc, #44]	@ (8006564 <HAL_RCC_OscConfig+0x7b8>)
 8006536:	f023 0304 	bic.w	r3, r3, #4
 800653a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d057      	beq.n	80065f6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006546:	f7fc f9f9 	bl	800293c <HAL_GetTick>
 800654a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800654c:	e00e      	b.n	800656c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654e:	f7fc f9f5 	bl	800293c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655c:	4293      	cmp	r3, r2
 800655e:	d905      	bls.n	800656c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e2f8      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
 8006564:	46020c00 	.word	0x46020c00
 8006568:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800656c:	4b9c      	ldr	r3, [pc, #624]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 800656e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0e9      	beq.n	800654e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01b      	beq.n	80065be <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006586:	4b96      	ldr	r3, [pc, #600]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800658c:	4a94      	ldr	r2, [pc, #592]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 800658e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006596:	e00a      	b.n	80065ae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006598:	f7fc f9d0 	bl	800293c <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e2d3      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80065ae:	4b8c      	ldr	r3, [pc, #560]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80065b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ed      	beq.n	8006598 <HAL_RCC_OscConfig+0x7ec>
 80065bc:	e053      	b.n	8006666 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065be:	4b88      	ldr	r3, [pc, #544]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80065c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c4:	4a86      	ldr	r2, [pc, #536]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80065c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d0:	f7fc f9b4 	bl	800293c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e2b7      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065e6:	4b7e      	ldr	r3, [pc, #504]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80065e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ed      	bne.n	80065d0 <HAL_RCC_OscConfig+0x824>
 80065f4:	e037      	b.n	8006666 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80065f6:	f7fc f9a1 	bl	800293c <HAL_GetTick>
 80065fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065fc:	e00a      	b.n	8006614 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fe:	f7fc f99d 	bl	800293c <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660c:	4293      	cmp	r3, r2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e2a0      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006614:	4b72      	ldr	r3, [pc, #456]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ed      	bne.n	80065fe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006622:	4b6f      	ldr	r3, [pc, #444]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01a      	beq.n	8006666 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006630:	4b6b      	ldr	r3, [pc, #428]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006636:	4a6a      	ldr	r2, [pc, #424]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800663c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006640:	e00a      	b.n	8006658 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006642:	f7fc f97b 	bl	800293c <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e27e      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006658:	4b61      	ldr	r3, [pc, #388]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 800665a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800665e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1ed      	bne.n	8006642 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006666:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800666a:	2b01      	cmp	r3, #1
 800666c:	d107      	bne.n	800667e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800666e:	4b5c      	ldr	r3, [pc, #368]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006674:	4a5a      	ldr	r2, [pc, #360]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006676:	f023 0304 	bic.w	r3, r3, #4
 800667a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d036      	beq.n	80066f8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d019      	beq.n	80066c6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006692:	4b53      	ldr	r3, [pc, #332]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a52      	ldr	r2, [pc, #328]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006698:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800669c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800669e:	f7fc f94d 	bl	800293c <HAL_GetTick>
 80066a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066a6:	f7fc f949 	bl	800293c <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e24e      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80066b8:	4b49      	ldr	r3, [pc, #292]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCC_OscConfig+0x8fa>
 80066c4:	e018      	b.n	80066f8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80066c6:	4b46      	ldr	r3, [pc, #280]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a45      	ldr	r2, [pc, #276]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80066cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066d2:	f7fc f933 	bl	800293c <HAL_GetTick>
 80066d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066da:	f7fc f92f 	bl	800293c <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e234      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066ec:	4b3c      	ldr	r3, [pc, #240]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d036      	beq.n	8006772 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d019      	beq.n	8006740 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800670c:	4b34      	ldr	r3, [pc, #208]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a33      	ldr	r2, [pc, #204]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006716:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006718:	f7fc f910 	bl	800293c <HAL_GetTick>
 800671c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006720:	f7fc f90c 	bl	800293c <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e211      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006732:	4b2b      	ldr	r3, [pc, #172]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x974>
 800673e:	e018      	b.n	8006772 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006740:	4b27      	ldr	r3, [pc, #156]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a26      	ldr	r2, [pc, #152]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800674a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800674c:	f7fc f8f6 	bl	800293c <HAL_GetTick>
 8006750:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006754:	f7fc f8f2 	bl	800293c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e1f7      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006766:	4b1e      	ldr	r3, [pc, #120]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d07f      	beq.n	800687e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006782:	2b00      	cmp	r3, #0
 8006784:	d062      	beq.n	800684c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006786:	4b16      	ldr	r3, [pc, #88]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4a15      	ldr	r2, [pc, #84]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 800678c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006790:	6093      	str	r3, [r2, #8]
 8006792:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	4910      	ldr	r1, [pc, #64]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80067ac:	d309      	bcc.n	80067c2 <HAL_RCC_OscConfig+0xa16>
 80067ae:	4b0c      	ldr	r3, [pc, #48]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f023 021f 	bic.w	r2, r3, #31
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	4909      	ldr	r1, [pc, #36]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	60cb      	str	r3, [r1, #12]
 80067c0:	e02a      	b.n	8006818 <HAL_RCC_OscConfig+0xa6c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0c      	bge.n	80067e4 <HAL_RCC_OscConfig+0xa38>
 80067ca:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	015b      	lsls	r3, r3, #5
 80067d8:	4901      	ldr	r1, [pc, #4]	@ (80067e0 <HAL_RCC_OscConfig+0xa34>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	60cb      	str	r3, [r1, #12]
 80067de:	e01b      	b.n	8006818 <HAL_RCC_OscConfig+0xa6c>
 80067e0:	46020c00 	.word	0x46020c00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ec:	d30a      	bcc.n	8006804 <HAL_RCC_OscConfig+0xa58>
 80067ee:	4ba1      	ldr	r3, [pc, #644]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	029b      	lsls	r3, r3, #10
 80067fc:	499d      	ldr	r1, [pc, #628]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	60cb      	str	r3, [r1, #12]
 8006802:	e009      	b.n	8006818 <HAL_RCC_OscConfig+0xa6c>
 8006804:	4b9b      	ldr	r3, [pc, #620]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	03db      	lsls	r3, r3, #15
 8006812:	4998      	ldr	r1, [pc, #608]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006818:	4b96      	ldr	r3, [pc, #600]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a95      	ldr	r2, [pc, #596]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 800681e:	f043 0310 	orr.w	r3, r3, #16
 8006822:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006824:	f7fc f88a 	bl	800293c <HAL_GetTick>
 8006828:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800682c:	f7fc f886 	bl	800293c <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e18b      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800683e:	4b8d      	ldr	r3, [pc, #564]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0xa80>
 800684a:	e018      	b.n	800687e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800684c:	4b89      	ldr	r3, [pc, #548]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a88      	ldr	r2, [pc, #544]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006852:	f023 0310 	bic.w	r3, r3, #16
 8006856:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006858:	f7fc f870 	bl	800293c <HAL_GetTick>
 800685c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006860:	f7fc f86c 	bl	800293c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e171      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006872:	4b80      	ldr	r3, [pc, #512]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f0      	bne.n	8006860 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8166 	beq.w	8006b54 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006888:	2300      	movs	r3, #0
 800688a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800688e:	4b79      	ldr	r3, [pc, #484]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	2b0c      	cmp	r3, #12
 8006898:	f000 80f2 	beq.w	8006a80 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	f040 80c5 	bne.w	8006a30 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80068a6:	4b73      	ldr	r3, [pc, #460]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a72      	ldr	r2, [pc, #456]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80068ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068b2:	f7fc f843 	bl	800293c <HAL_GetTick>
 80068b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ba:	f7fc f83f 	bl	800293c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e144      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068cc:	4b69      	ldr	r3, [pc, #420]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d8:	4b66      	ldr	r3, [pc, #408]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80068da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d111      	bne.n	800690a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80068e6:	4b63      	ldr	r3, [pc, #396]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80068e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ec:	4a61      	ldr	r2, [pc, #388]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80068ee:	f043 0304 	orr.w	r3, r3, #4
 80068f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80068f6:	4b5f      	ldr	r3, [pc, #380]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80068f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800690a:	4b5b      	ldr	r3, [pc, #364]	@ (8006a78 <HAL_RCC_OscConfig+0xccc>)
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006912:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006916:	d102      	bne.n	800691e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800691e:	4b56      	ldr	r3, [pc, #344]	@ (8006a78 <HAL_RCC_OscConfig+0xccc>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	4a55      	ldr	r2, [pc, #340]	@ (8006a78 <HAL_RCC_OscConfig+0xccc>)
 8006924:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006928:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800692a:	4b52      	ldr	r3, [pc, #328]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800693e:	3a01      	subs	r2, #1
 8006940:	0212      	lsls	r2, r2, #8
 8006942:	4311      	orrs	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006948:	430a      	orrs	r2, r1
 800694a:	494a      	ldr	r1, [pc, #296]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 800694c:	4313      	orrs	r3, r2
 800694e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006950:	4b48      	ldr	r3, [pc, #288]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006954:	4b49      	ldr	r3, [pc, #292]	@ (8006a7c <HAL_RCC_OscConfig+0xcd0>)
 8006956:	4013      	ands	r3, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800695c:	3a01      	subs	r2, #1
 800695e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006966:	3a01      	subs	r2, #1
 8006968:	0252      	lsls	r2, r2, #9
 800696a:	b292      	uxth	r2, r2
 800696c:	4311      	orrs	r1, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006972:	3a01      	subs	r2, #1
 8006974:	0412      	lsls	r2, r2, #16
 8006976:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800697a:	4311      	orrs	r1, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006980:	3a01      	subs	r2, #1
 8006982:	0612      	lsls	r2, r2, #24
 8006984:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006988:	430a      	orrs	r2, r1
 800698a:	493a      	ldr	r1, [pc, #232]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 800698c:	4313      	orrs	r3, r2
 800698e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006990:	4b38      	ldr	r3, [pc, #224]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	4a37      	ldr	r2, [pc, #220]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a0:	4a34      	ldr	r2, [pc, #208]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80069a6:	4b33      	ldr	r3, [pc, #204]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069aa:	4a32      	ldr	r2, [pc, #200]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069ac:	f043 0310 	orr.w	r3, r3, #16
 80069b0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80069b2:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b6:	f023 020c 	bic.w	r2, r3, #12
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069be:	492d      	ldr	r1, [pc, #180]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80069c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d105      	bne.n	80069d8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80069cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006a78 <HAL_RCC_OscConfig+0xccc>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4a29      	ldr	r2, [pc, #164]	@ (8006a78 <HAL_RCC_OscConfig+0xccc>)
 80069d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80069d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d107      	bne.n	80069f0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80069e0:	4b24      	ldr	r3, [pc, #144]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069e6:	4a23      	ldr	r2, [pc, #140]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069e8:	f023 0304 	bic.w	r3, r3, #4
 80069ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80069f0:	4b20      	ldr	r3, [pc, #128]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 80069f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80069fc:	f7fb ff9e 	bl	800293c <HAL_GetTick>
 8006a00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a04:	f7fb ff9a 	bl	800293c <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e09f      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006a16:	4b17      	ldr	r3, [pc, #92]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a22:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	4a13      	ldr	r2, [pc, #76]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a2c:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a2e:	e091      	b.n	8006b54 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006a30:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a0f      	ldr	r2, [pc, #60]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a3c:	f7fb ff7e 	bl	800293c <HAL_GetTick>
 8006a40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a44:	f7fb ff7a 	bl	800293c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e07f      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a56:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006a62:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	4a03      	ldr	r2, [pc, #12]	@ (8006a74 <HAL_RCC_OscConfig+0xcc8>)
 8006a68:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006a6c:	f023 0303 	bic.w	r3, r3, #3
 8006a70:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a72:	e06f      	b.n	8006b54 <HAL_RCC_OscConfig+0xda8>
 8006a74:	46020c00 	.word	0x46020c00
 8006a78:	46020800 	.word	0x46020800
 8006a7c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006a80:	4b37      	ldr	r3, [pc, #220]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a86:	4b36      	ldr	r3, [pc, #216]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d039      	beq.n	8006b08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f003 0203 	and.w	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d132      	bne.n	8006b08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d129      	bne.n	8006b08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d122      	bne.n	8006b08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006acc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d11a      	bne.n	8006b08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	0a5b      	lsrs	r3, r3, #9
 8006ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ade:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d111      	bne.n	8006b08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d108      	bne.n	8006b08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	0e1b      	lsrs	r3, r3, #24
 8006afa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b02:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d001      	beq.n	8006b0c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e024      	b.n	8006b56 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b0c:	4b14      	ldr	r3, [pc, #80]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	08db      	lsrs	r3, r3, #3
 8006b12:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d01a      	beq.n	8006b54 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006b1e:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b22:	4a0f      	ldr	r2, [pc, #60]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006b24:	f023 0310 	bic.w	r3, r3, #16
 8006b28:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2a:	f7fb ff07 	bl	800293c <HAL_GetTick>
 8006b2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006b30:	bf00      	nop
 8006b32:	f7fb ff03 	bl	800293c <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d0f9      	beq.n	8006b32 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b42:	4a07      	ldr	r2, [pc, #28]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006b48:	4b05      	ldr	r3, [pc, #20]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	4a04      	ldr	r2, [pc, #16]	@ (8006b60 <HAL_RCC_OscConfig+0xdb4>)
 8006b4e:	f043 0310 	orr.w	r3, r3, #16
 8006b52:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3738      	adds	r7, #56	@ 0x38
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	46020c00 	.word	0x46020c00

08006b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e1d9      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b78:	4b9b      	ldr	r3, [pc, #620]	@ (8006de8 <HAL_RCC_ClockConfig+0x284>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d910      	bls.n	8006ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b86:	4b98      	ldr	r3, [pc, #608]	@ (8006de8 <HAL_RCC_ClockConfig+0x284>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f023 020f 	bic.w	r2, r3, #15
 8006b8e:	4996      	ldr	r1, [pc, #600]	@ (8006de8 <HAL_RCC_ClockConfig+0x284>)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b96:	4b94      	ldr	r3, [pc, #592]	@ (8006de8 <HAL_RCC_ClockConfig+0x284>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e1c1      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d010      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	4b8c      	ldr	r3, [pc, #560]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d908      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006bc4:	4b89      	ldr	r3, [pc, #548]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	4986      	ldr	r1, [pc, #536]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d012      	beq.n	8006c08 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	4b81      	ldr	r3, [pc, #516]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	091b      	lsrs	r3, r3, #4
 8006bec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d909      	bls.n	8006c08 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006bf4:	4b7d      	ldr	r3, [pc, #500]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	497a      	ldr	r1, [pc, #488]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d010      	beq.n	8006c36 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	4b74      	ldr	r3, [pc, #464]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d908      	bls.n	8006c36 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006c24:	4b71      	ldr	r3, [pc, #452]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	496e      	ldr	r1, [pc, #440]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d010      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	4b69      	ldr	r3, [pc, #420]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d908      	bls.n	8006c64 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006c52:	4b66      	ldr	r3, [pc, #408]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f023 020f 	bic.w	r2, r3, #15
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	4963      	ldr	r1, [pc, #396]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 80d2 	beq.w	8006e16 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006c72:	2300      	movs	r3, #0
 8006c74:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d143      	bne.n	8006d06 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d110      	bne.n	8006cae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006c8c:	4b57      	ldr	r3, [pc, #348]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c92:	4a56      	ldr	r2, [pc, #344]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c94:	f043 0304 	orr.w	r3, r3, #4
 8006c98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c9c:	4b53      	ldr	r3, [pc, #332]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	60bb      	str	r3, [r7, #8]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006caa:	2301      	movs	r3, #1
 8006cac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006cae:	f7fb fe45 	bl	800293c <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8006df0 <HAL_RCC_ClockConfig+0x28c>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00f      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006cc2:	f7fb fe3b 	bl	800293c <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e12b      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006cd4:	4b46      	ldr	r3, [pc, #280]	@ (8006df0 <HAL_RCC_ClockConfig+0x28c>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006ce6:	4b41      	ldr	r3, [pc, #260]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cec:	4a3f      	ldr	r2, [pc, #252]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006cee:	f023 0304 	bic.w	r3, r3, #4
 8006cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d121      	bne.n	8006d46 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e112      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d107      	bne.n	8006d1e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d0e:	4b37      	ldr	r3, [pc, #220]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d115      	bne.n	8006d46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e106      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006d26:	4b31      	ldr	r3, [pc, #196]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e0fa      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d36:	4b2d      	ldr	r3, [pc, #180]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e0f2      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006d46:	4b29      	ldr	r3, [pc, #164]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f023 0203 	bic.w	r2, r3, #3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	4926      	ldr	r1, [pc, #152]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006d58:	f7fb fdf0 	bl	800293c <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d112      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d68:	f7fb fde8 	bl	800293c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e0d6      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 030c 	and.w	r3, r3, #12
 8006d86:	2b0c      	cmp	r3, #12
 8006d88:	d1ee      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x204>
 8006d8a:	e044      	b.n	8006e16 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d112      	bne.n	8006dba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d94:	e00a      	b.n	8006dac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d96:	f7fb fdd1 	bl	800293c <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e0bf      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dac:	4b0f      	ldr	r3, [pc, #60]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d1ee      	bne.n	8006d96 <HAL_RCC_ClockConfig+0x232>
 8006db8:	e02d      	b.n	8006e16 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d123      	bne.n	8006e0a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc4:	f7fb fdba 	bl	800293c <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e0a8      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006dda:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <HAL_RCC_ClockConfig+0x288>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1ee      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0x260>
 8006de6:	e016      	b.n	8006e16 <HAL_RCC_ClockConfig+0x2b2>
 8006de8:	40022000 	.word	0x40022000
 8006dec:	46020c00 	.word	0x46020c00
 8006df0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df4:	f7fb fda2 	bl	800293c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e090      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f003 030c 	and.w	r3, r3, #12
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d1ee      	bne.n	8006df4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d010      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	4b43      	ldr	r3, [pc, #268]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d208      	bcs.n	8006e44 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006e32:	4b40      	ldr	r3, [pc, #256]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f023 020f 	bic.w	r2, r3, #15
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	493d      	ldr	r1, [pc, #244]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e44:	4b3c      	ldr	r3, [pc, #240]	@ (8006f38 <HAL_RCC_ClockConfig+0x3d4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d210      	bcs.n	8006e74 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e52:	4b39      	ldr	r3, [pc, #228]	@ (8006f38 <HAL_RCC_ClockConfig+0x3d4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f023 020f 	bic.w	r2, r3, #15
 8006e5a:	4937      	ldr	r1, [pc, #220]	@ (8006f38 <HAL_RCC_ClockConfig+0x3d4>)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e62:	4b35      	ldr	r3, [pc, #212]	@ (8006f38 <HAL_RCC_ClockConfig+0x3d4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d001      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e05b      	b.n	8006f2c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	4b2b      	ldr	r3, [pc, #172]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d208      	bcs.n	8006ea2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006e90:	4b28      	ldr	r3, [pc, #160]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4925      	ldr	r1, [pc, #148]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d012      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	4b20      	ldr	r3, [pc, #128]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	091b      	lsrs	r3, r3, #4
 8006eb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d209      	bcs.n	8006ed4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	4919      	ldr	r1, [pc, #100]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d010      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	4b13      	ldr	r3, [pc, #76]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d208      	bcs.n	8006f02 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006ef0:	4b10      	ldr	r3, [pc, #64]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	490d      	ldr	r1, [pc, #52]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006f02:	f000 f821 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <HAL_RCC_ClockConfig+0x3d0>)
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	490a      	ldr	r1, [pc, #40]	@ (8006f3c <HAL_RCC_ClockConfig+0x3d8>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	4a09      	ldr	r2, [pc, #36]	@ (8006f40 <HAL_RCC_ClockConfig+0x3dc>)
 8006f1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f1c:	4b09      	ldr	r3, [pc, #36]	@ (8006f44 <HAL_RCC_ClockConfig+0x3e0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fb fc81 	bl	8002828 <HAL_InitTick>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]

  return status;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	46020c00 	.word	0x46020c00
 8006f38:	40022000 	.word	0x40022000
 8006f3c:	0800c94c 	.word	0x0800c94c
 8006f40:	2000001c 	.word	0x2000001c
 8006f44:	20000020 	.word	0x20000020

08006f48 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08b      	sub	sp, #44	@ 0x2c
 8006f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f56:	4b78      	ldr	r3, [pc, #480]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
 8006f5e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f60:	4b75      	ldr	r3, [pc, #468]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x34>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b0c      	cmp	r3, #12
 8006f74:	d121      	bne.n	8006fba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d11e      	bne.n	8006fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d107      	bne.n	8006f98 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006f88:	4b6b      	ldr	r3, [pc, #428]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f8e:	0b1b      	lsrs	r3, r3, #12
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f96:	e005      	b.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006f98:	4b67      	ldr	r3, [pc, #412]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	0f1b      	lsrs	r3, r3, #28
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006fa4:	4a65      	ldr	r2, [pc, #404]	@ (800713c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d110      	bne.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fb8:	e00d      	b.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fba:	4b5f      	ldr	r3, [pc, #380]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f003 030c 	and.w	r3, r3, #12
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d102      	bne.n	8006fcc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006fc8:	623b      	str	r3, [r7, #32]
 8006fca:	e004      	b.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d101      	bne.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006fd4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b0c      	cmp	r3, #12
 8006fda:	f040 80a5 	bne.w	8007128 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006fde:	4b56      	ldr	r3, [pc, #344]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006fe8:	4b53      	ldr	r3, [pc, #332]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ff6:	4b50      	ldr	r3, [pc, #320]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	091b      	lsrs	r3, r3, #4
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007002:	4b4d      	ldr	r3, [pc, #308]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	08db      	lsrs	r3, r3, #3
 8007008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d003      	beq.n	800702c <HAL_RCC_GetSysClockFreq+0xe4>
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d022      	beq.n	8007070 <HAL_RCC_GetSysClockFreq+0x128>
 800702a:	e043      	b.n	80070b4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007144 <HAL_RCC_GetSysClockFreq+0x1fc>
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b3e      	ldr	r3, [pc, #248]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800704e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007052:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x200>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800705e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800706e:	e046      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007144 <HAL_RCC_GetSysClockFreq+0x1fc>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b2d      	ldr	r3, [pc, #180]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007092:	ed97 6a01 	vldr	s12, [r7, #4]
 8007096:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x200>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b2:	e024      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	ee07 3a90 	vmov	s15, r3
 80070c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070dc:	ed97 6a01 	vldr	s12, [r7, #4]
 80070e0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007148 <HAL_RCC_GetSysClockFreq+0x200>
 80070e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80070fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007102:	0e1b      	lsrs	r3, r3, #24
 8007104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007108:	3301      	adds	r3, #1
 800710a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007116:	edd7 6a07 	vldr	s13, [r7, #28]
 800711a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800711e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007122:	ee17 3a90 	vmov	r3, s15
 8007126:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007128:	6a3b      	ldr	r3, [r7, #32]
}
 800712a:	4618      	mov	r0, r3
 800712c:	372c      	adds	r7, #44	@ 0x2c
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	46020c00 	.word	0x46020c00
 800713c:	0800c964 	.word	0x0800c964
 8007140:	00f42400 	.word	0x00f42400
 8007144:	4b742400 	.word	0x4b742400
 8007148:	46000000 	.word	0x46000000

0800714c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007150:	f7ff fefa 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8007154:	4602      	mov	r2, r0
 8007156:	4b07      	ldr	r3, [pc, #28]	@ (8007174 <HAL_RCC_GetHCLKFreq+0x28>)
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	4906      	ldr	r1, [pc, #24]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007160:	5ccb      	ldrb	r3, [r1, r3]
 8007162:	fa22 f303 	lsr.w	r3, r2, r3
 8007166:	4a05      	ldr	r2, [pc, #20]	@ (800717c <HAL_RCC_GetHCLKFreq+0x30>)
 8007168:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800716a:	4b04      	ldr	r3, [pc, #16]	@ (800717c <HAL_RCC_GetHCLKFreq+0x30>)
 800716c:	681b      	ldr	r3, [r3, #0]
}
 800716e:	4618      	mov	r0, r3
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	46020c00 	.word	0x46020c00
 8007178:	0800c94c 	.word	0x0800c94c
 800717c:	2000001c 	.word	0x2000001c

08007180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007184:	f7ff ffe2 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8007188:	4602      	mov	r2, r0
 800718a:	4b05      	ldr	r3, [pc, #20]	@ (80071a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	4903      	ldr	r1, [pc, #12]	@ (80071a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007196:	5ccb      	ldrb	r3, [r1, r3]
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	46020c00 	.word	0x46020c00
 80071a4:	0800c95c 	.word	0x0800c95c

080071a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80071ac:	f7ff ffce 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	4903      	ldr	r1, [pc, #12]	@ (80071cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071be:	5ccb      	ldrb	r3, [r1, r3]
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	46020c00 	.word	0x46020c00
 80071cc:	0800c95c 	.word	0x0800c95c

080071d0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80071d4:	f7ff ffba 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80071d8:	4602      	mov	r2, r0
 80071da:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	4903      	ldr	r1, [pc, #12]	@ (80071f4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80071e6:	5ccb      	ldrb	r3, [r1, r3]
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	46020c00 	.word	0x46020c00
 80071f4:	0800c95c 	.word	0x0800c95c

080071f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007200:	4b3e      	ldr	r3, [pc, #248]	@ (80072fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800720e:	f7fe fd8f 	bl	8005d30 <HAL_PWREx_GetVoltageRange>
 8007212:	6178      	str	r0, [r7, #20]
 8007214:	e019      	b.n	800724a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007216:	4b39      	ldr	r3, [pc, #228]	@ (80072fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800721c:	4a37      	ldr	r2, [pc, #220]	@ (80072fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800721e:	f043 0304 	orr.w	r3, r3, #4
 8007222:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007226:	4b35      	ldr	r3, [pc, #212]	@ (80072fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007234:	f7fe fd7c 	bl	8005d30 <HAL_PWREx_GetVoltageRange>
 8007238:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800723a:	4b30      	ldr	r3, [pc, #192]	@ (80072fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800723c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007240:	4a2e      	ldr	r2, [pc, #184]	@ (80072fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007242:	f023 0304 	bic.w	r3, r3, #4
 8007246:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007250:	d003      	beq.n	800725a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007258:	d109      	bne.n	800726e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007260:	d202      	bcs.n	8007268 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007262:	2301      	movs	r3, #1
 8007264:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007266:	e033      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007268:	2300      	movs	r3, #0
 800726a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800726c:	e030      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007274:	d208      	bcs.n	8007288 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800727c:	d102      	bne.n	8007284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800727e:	2303      	movs	r3, #3
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	e025      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e035      	b.n	80072f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800728e:	d90f      	bls.n	80072b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800729c:	d902      	bls.n	80072a4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	e015      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80072a4:	2301      	movs	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	e012      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	e00f      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072b6:	d109      	bne.n	80072cc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072be:	d102      	bne.n	80072c6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80072c0:	2301      	movs	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	e004      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80072c6:	2302      	movs	r3, #2
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	e001      	b.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80072cc:	2301      	movs	r3, #1
 80072ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80072d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007300 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f023 020f 	bic.w	r2, r3, #15
 80072d8:	4909      	ldr	r1, [pc, #36]	@ (8007300 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80072e0:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d001      	beq.n	80072f2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	46020c00 	.word	0x46020c00
 8007300:	40022000 	.word	0x40022000

08007304 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007308:	b0ba      	sub	sp, #232	@ 0xe8
 800730a:	af00      	add	r7, sp, #0
 800730c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007310:	2300      	movs	r3, #0
 8007312:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007316:	2300      	movs	r3, #0
 8007318:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800731c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f002 0401 	and.w	r4, r2, #1
 8007328:	2500      	movs	r5, #0
 800732a:	ea54 0305 	orrs.w	r3, r4, r5
 800732e:	d00b      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007330:	4bcb      	ldr	r3, [pc, #812]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007336:	f023 0103 	bic.w	r1, r3, #3
 800733a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800733e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007340:	4ac7      	ldr	r2, [pc, #796]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007342:	430b      	orrs	r3, r1
 8007344:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f002 0802 	and.w	r8, r2, #2
 8007354:	f04f 0900 	mov.w	r9, #0
 8007358:	ea58 0309 	orrs.w	r3, r8, r9
 800735c:	d00b      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800735e:	4bc0      	ldr	r3, [pc, #768]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007364:	f023 010c 	bic.w	r1, r3, #12
 8007368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800736c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736e:	4abc      	ldr	r2, [pc, #752]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007370:	430b      	orrs	r3, r1
 8007372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f002 0a04 	and.w	sl, r2, #4
 8007382:	f04f 0b00 	mov.w	fp, #0
 8007386:	ea5a 030b 	orrs.w	r3, sl, fp
 800738a:	d00b      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800738c:	4bb4      	ldr	r3, [pc, #720]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800738e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007392:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800739a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739c:	4ab0      	ldr	r2, [pc, #704]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800739e:	430b      	orrs	r3, r1
 80073a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f002 0308 	and.w	r3, r2, #8
 80073b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073b4:	2300      	movs	r3, #0
 80073b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80073be:	460b      	mov	r3, r1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	d00b      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80073c4:	4ba6      	ldr	r3, [pc, #664]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80073ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d4:	4aa2      	ldr	r2, [pc, #648]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073d6:	430b      	orrs	r3, r1
 80073d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f002 0310 	and.w	r3, r2, #16
 80073e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073ec:	2300      	movs	r3, #0
 80073ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d00b      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80073fc:	4b98      	ldr	r3, [pc, #608]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800740a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800740c:	4a94      	ldr	r2, [pc, #592]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800740e:	430b      	orrs	r3, r1
 8007410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f002 0320 	and.w	r3, r2, #32
 8007420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007424:	2300      	movs	r3, #0
 8007426:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800742a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800742e:	460b      	mov	r3, r1
 8007430:	4313      	orrs	r3, r2
 8007432:	d00b      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007434:	4b8a      	ldr	r3, [pc, #552]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800743a:	f023 0107 	bic.w	r1, r3, #7
 800743e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007444:	4a86      	ldr	r2, [pc, #536]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007446:	430b      	orrs	r3, r1
 8007448:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800744c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800745c:	2300      	movs	r3, #0
 800745e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007462:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007466:	460b      	mov	r3, r1
 8007468:	4313      	orrs	r3, r2
 800746a:	d00b      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800746c:	4b7c      	ldr	r3, [pc, #496]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800746e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007472:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800747a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800747c:	4a78      	ldr	r2, [pc, #480]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800747e:	430b      	orrs	r3, r1
 8007480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007494:	2300      	movs	r3, #0
 8007496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800749a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d00b      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80074a4:	4b6e      	ldr	r3, [pc, #440]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b4:	4a6a      	ldr	r2, [pc, #424]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b6:	430b      	orrs	r3, r1
 80074b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80074c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074cc:	2300      	movs	r3, #0
 80074ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074d2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4313      	orrs	r3, r2
 80074da:	d00b      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80074dc:	4b60      	ldr	r3, [pc, #384]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80074e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ec:	4a5c      	ldr	r2, [pc, #368]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074ee:	430b      	orrs	r3, r1
 80074f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800750a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800750e:	460b      	mov	r3, r1
 8007510:	4313      	orrs	r3, r2
 8007512:	d00b      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007514:	4b52      	ldr	r3, [pc, #328]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800751a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800751e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007524:	4a4e      	ldr	r2, [pc, #312]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007526:	430b      	orrs	r3, r1
 8007528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800752c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007538:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800753c:	2300      	movs	r3, #0
 800753e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007542:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007546:	460b      	mov	r3, r1
 8007548:	4313      	orrs	r3, r2
 800754a:	d00b      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800754c:	4b44      	ldr	r3, [pc, #272]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800754e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007552:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800755a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800755c:	4a40      	ldr	r2, [pc, #256]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800755e:	430b      	orrs	r3, r1
 8007560:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007564:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007574:	2300      	movs	r3, #0
 8007576:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800757a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800757e:	460b      	mov	r3, r1
 8007580:	4313      	orrs	r3, r2
 8007582:	d00b      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007584:	4b36      	ldr	r3, [pc, #216]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800758a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800758e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007594:	4a32      	ldr	r2, [pc, #200]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007596:	430b      	orrs	r3, r1
 8007598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800759c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80075a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d00c      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80075bc:	4b28      	ldr	r3, [pc, #160]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ce:	4a24      	ldr	r2, [pc, #144]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80075d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80075e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075e4:	2300      	movs	r3, #0
 80075e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d04f      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80075f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fa:	2b80      	cmp	r3, #128	@ 0x80
 80075fc:	d02d      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80075fe:	2b80      	cmp	r3, #128	@ 0x80
 8007600:	d827      	bhi.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007602:	2b60      	cmp	r3, #96	@ 0x60
 8007604:	d02e      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007606:	2b60      	cmp	r3, #96	@ 0x60
 8007608:	d823      	bhi.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800760a:	2b40      	cmp	r3, #64	@ 0x40
 800760c:	d006      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d81f      	bhi.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007616:	2b20      	cmp	r3, #32
 8007618:	d011      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800761a:	e01a      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800761c:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	4a0f      	ldr	r2, [pc, #60]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007626:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007628:	e01d      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800762a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800762e:	3308      	adds	r3, #8
 8007630:	4618      	mov	r0, r3
 8007632:	f002 fa17 	bl	8009a64 <RCCEx_PLL2_Config>
 8007636:	4603      	mov	r3, r0
 8007638:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800763c:	e013      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800763e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007642:	332c      	adds	r3, #44	@ 0x2c
 8007644:	4618      	mov	r0, r3
 8007646:	f002 faa5 	bl	8009b94 <RCCEx_PLL3_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007650:	e009      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007658:	e005      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800765a:	bf00      	nop
 800765c:	e003      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800765e:	bf00      	nop
 8007660:	46020c00 	.word	0x46020c00
        break;
 8007664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007666:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10d      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800766e:	4bb6      	ldr	r3, [pc, #728]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007670:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007674:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007680:	4ab1      	ldr	r2, [pc, #708]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007682:	430b      	orrs	r3, r1
 8007684:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007688:	e003      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800768e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800769e:	673b      	str	r3, [r7, #112]	@ 0x70
 80076a0:	2300      	movs	r3, #0
 80076a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80076a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d053      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80076ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ba:	d033      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80076bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c0:	d82c      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80076c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076c6:	d02f      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80076c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076cc:	d826      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80076ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076d2:	d008      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80076d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076d8:	d820      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80076de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076e2:	d011      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80076e4:	e01a      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076e6:	4b98      	ldr	r3, [pc, #608]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80076e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ea:	4a97      	ldr	r2, [pc, #604]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80076ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80076f2:	e01a      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076f8:	3308      	adds	r3, #8
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 f9b2 	bl	8009a64 <RCCEx_PLL2_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007706:	e010      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800770c:	332c      	adds	r3, #44	@ 0x2c
 800770e:	4618      	mov	r0, r3
 8007710:	f002 fa40 	bl	8009b94 <RCCEx_PLL3_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800771a:	e006      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007722:	e002      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800772a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10d      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007732:	4b85      	ldr	r3, [pc, #532]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007734:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007738:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800773c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007744:	4a80      	ldr	r2, [pc, #512]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007746:	430b      	orrs	r3, r1
 8007748:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800774c:	e003      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007752:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007762:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007764:	2300      	movs	r3, #0
 8007766:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007768:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800776c:	460b      	mov	r3, r1
 800776e:	4313      	orrs	r3, r2
 8007770:	d046      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800777a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800777e:	d028      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007780:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007784:	d821      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800778a:	d022      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800778c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007790:	d81b      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007792:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007796:	d01c      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007798:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800779c:	d815      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077a2:	d008      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077a8:	d80f      	bhi.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d011      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80077ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077b2:	d00e      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80077b4:	e009      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077ba:	3308      	adds	r3, #8
 80077bc:	4618      	mov	r0, r3
 80077be:	f002 f951 	bl	8009a64 <RCCEx_PLL2_Config>
 80077c2:	4603      	mov	r3, r0
 80077c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077c8:	e004      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077d0:	e000      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80077d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10d      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80077dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80077de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077e2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80077e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077ee:	4a56      	ldr	r2, [pc, #344]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80077f0:	430b      	orrs	r3, r1
 80077f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80077f6:	e003      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800780c:	663b      	str	r3, [r7, #96]	@ 0x60
 800780e:	2300      	movs	r3, #0
 8007810:	667b      	str	r3, [r7, #100]	@ 0x64
 8007812:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007816:	460b      	mov	r3, r1
 8007818:	4313      	orrs	r3, r2
 800781a:	d03f      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800781c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007824:	2b04      	cmp	r3, #4
 8007826:	d81e      	bhi.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007828:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	0800786f 	.word	0x0800786f
 8007834:	08007845 	.word	0x08007845
 8007838:	08007853 	.word	0x08007853
 800783c:	0800786f 	.word	0x0800786f
 8007840:	0800786f 	.word	0x0800786f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007844:	4b40      	ldr	r3, [pc, #256]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007848:	4a3f      	ldr	r2, [pc, #252]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800784a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800784e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007850:	e00e      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007856:	332c      	adds	r3, #44	@ 0x2c
 8007858:	4618      	mov	r0, r3
 800785a:	f002 f99b 	bl	8009b94 <RCCEx_PLL3_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007864:	e004      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800786c:	e000      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800786e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007870:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10d      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007878:	4b33      	ldr	r3, [pc, #204]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800787a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800787e:	f023 0107 	bic.w	r1, r3, #7
 8007882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788a:	4a2f      	ldr	r2, [pc, #188]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800788c:	430b      	orrs	r3, r1
 800788e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007892:	e003      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007898:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800789c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80078a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078aa:	2300      	movs	r3, #0
 80078ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80078b2:	460b      	mov	r3, r1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	d04d      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80078b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078c4:	d028      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80078c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078ca:	d821      	bhi.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80078cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078d0:	d024      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x618>
 80078d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078d6:	d81b      	bhi.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80078d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078dc:	d00e      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80078de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e2:	d815      	bhi.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01b      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ec:	d110      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078ee:	4b16      	ldr	r3, [pc, #88]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	4a15      	ldr	r2, [pc, #84]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80078f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80078fa:	e012      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007900:	332c      	adds	r3, #44	@ 0x2c
 8007902:	4618      	mov	r0, r3
 8007904:	f002 f946 	bl	8009b94 <RCCEx_PLL3_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800790e:	e008      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007916:	e004      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007920:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007922:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d110      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800792a:	4b07      	ldr	r3, [pc, #28]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800792c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007930:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800793c:	4a02      	ldr	r2, [pc, #8]	@ (8007948 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800793e:	430b      	orrs	r3, r1
 8007940:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007944:	e006      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007946:	bf00      	nop
 8007948:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007950:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007954:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007960:	653b      	str	r3, [r7, #80]	@ 0x50
 8007962:	2300      	movs	r3, #0
 8007964:	657b      	str	r3, [r7, #84]	@ 0x54
 8007966:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800796a:	460b      	mov	r3, r1
 800796c:	4313      	orrs	r3, r2
 800796e:	f000 80b5 	beq.w	8007adc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007972:	2300      	movs	r3, #0
 8007974:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007978:	4b9d      	ldr	r3, [pc, #628]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800797a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d113      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007986:	4b9a      	ldr	r3, [pc, #616]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800798c:	4a98      	ldr	r2, [pc, #608]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800798e:	f043 0304 	orr.w	r3, r3, #4
 8007992:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007996:	4b96      	ldr	r3, [pc, #600]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80079ae:	4b91      	ldr	r3, [pc, #580]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80079b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b2:	4a90      	ldr	r2, [pc, #576]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079ba:	f7fa ffbf 	bl	800293c <HAL_GetTick>
 80079be:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80079c2:	e00b      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079c4:	f7fa ffba 	bl	800293c <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d903      	bls.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80079da:	e005      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80079dc:	4b85      	ldr	r3, [pc, #532]	@ (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0ed      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80079e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d165      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079f0:	4b7f      	ldr	r3, [pc, #508]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80079f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d023      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8007a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01b      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a16:	4b76      	ldr	r3, [pc, #472]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a24:	4b72      	ldr	r3, [pc, #456]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a2a:	4a71      	ldr	r2, [pc, #452]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a34:	4b6e      	ldr	r3, [pc, #440]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a3a:	4a6d      	ldr	r2, [pc, #436]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a44:	4a6a      	ldr	r2, [pc, #424]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d019      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5a:	f7fa ff6f 	bl	800293c <HAL_GetTick>
 8007a5e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a62:	e00d      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a64:	f7fa ff6a 	bl	800293c <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d903      	bls.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007a7e:	e006      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a80:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0ea      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007a8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10d      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007a96:	4b56      	ldr	r3, [pc, #344]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007aa8:	4a51      	ldr	r2, [pc, #324]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007ab0:	e008      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ab6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ac0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ac4:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d107      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007acc:	4b48      	ldr	r3, [pc, #288]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ad2:	4a47      	ldr	r2, [pc, #284]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ad4:	f023 0304 	bic.w	r3, r3, #4
 8007ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aea:	2300      	movs	r3, #0
 8007aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007af2:	460b      	mov	r3, r1
 8007af4:	4313      	orrs	r3, r2
 8007af6:	d042      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007afc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b04:	d022      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007b06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b0a:	d81b      	bhi.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007b0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b10:	d011      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b16:	d815      	bhi.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d019      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8007b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b20:	d110      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b26:	3308      	adds	r3, #8
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 ff9b 	bl	8009a64 <RCCEx_PLL2_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b34:	e00d      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b36:	4b2e      	ldr	r3, [pc, #184]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b40:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007b42:	e006      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b4a:	e002      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007b4c:	bf00      	nop
 8007b4e:	e000      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007b50:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10d      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007b5a:	4b25      	ldr	r3, [pc, #148]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b60:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b6c:	4a20      	ldr	r2, [pc, #128]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b74:	e003      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b7a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b94:	460b      	mov	r3, r1
 8007b96:	4313      	orrs	r3, r2
 8007b98:	d032      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ba6:	d00b      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bac:	d804      	bhi.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb6:	d007      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007bbe:	e004      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007bc0:	bf00      	nop
 8007bc2:	e002      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007bc4:	bf00      	nop
 8007bc6:	e000      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007bc8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007bca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d112      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007bd2:	4b07      	ldr	r3, [pc, #28]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007bd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bd8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007be4:	4a02      	ldr	r2, [pc, #8]	@ (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007be6:	430b      	orrs	r3, r1
 8007be8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bec:	e008      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8007bee:	bf00      	nop
 8007bf0:	46020c00 	.word	0x46020c00
 8007bf4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bfc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c0e:	2300      	movs	r3, #0
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c16:	460b      	mov	r3, r1
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	d00c      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007c1c:	4b98      	ldr	r3, [pc, #608]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c22:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c2e:	4a94      	ldr	r2, [pc, #592]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c30:	430b      	orrs	r3, r1
 8007c32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007c42:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c44:	2300      	movs	r3, #0
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	d019      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c5e:	d105      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c60:	4b87      	ldr	r3, [pc, #540]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c64:	4a86      	ldr	r2, [pc, #536]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c6a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007c6c:	4b84      	ldr	r3, [pc, #528]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c72:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c7e:	4a80      	ldr	r2, [pc, #512]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007c80:	430b      	orrs	r3, r1
 8007c82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c94:	2300      	movs	r3, #0
 8007c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	d00c      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007ca2:	4b77      	ldr	r3, [pc, #476]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ca8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cb4:	4972      	ldr	r1, [pc, #456]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007cc8:	623b      	str	r3, [r7, #32]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007cd8:	4b69      	ldr	r3, [pc, #420]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cde:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ce6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007cea:	4965      	ldr	r1, [pc, #404]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	2300      	movs	r3, #0
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	d00c      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d14:	f023 0218 	bic.w	r2, r3, #24
 8007d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d20:	4957      	ldr	r1, [pc, #348]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007d34:	613b      	str	r3, [r7, #16]
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4313      	orrs	r3, r2
 8007d42:	d032      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d50:	d105      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d52:	4b4b      	ldr	r3, [pc, #300]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d56:	4a4a      	ldr	r2, [pc, #296]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d5c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d6a:	d108      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d70:	3308      	adds	r3, #8
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fe76 	bl	8009a64 <RCCEx_PLL2_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8007d7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007d86:	4b3e      	ldr	r3, [pc, #248]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d98:	4939      	ldr	r1, [pc, #228]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007da0:	e003      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007da6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007db6:	60bb      	str	r3, [r7, #8]
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d03a      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dd2:	d00e      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007dd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dd8:	d815      	bhi.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d017      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007dde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007de2:	d110      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de4:	4b26      	ldr	r3, [pc, #152]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de8:	4a25      	ldr	r2, [pc, #148]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007df0:	e00e      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007df6:	3308      	adds	r3, #8
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fe33 	bl	8009a64 <RCCEx_PLL2_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007e04:	e004      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8007e0e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007e10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10d      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007e18:	4b19      	ldr	r3, [pc, #100]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e2a:	4915      	ldr	r1, [pc, #84]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e38:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e48:	603b      	str	r3, [r7, #0]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	607b      	str	r3, [r7, #4]
 8007e4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	d00c      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007e58:	4b09      	ldr	r3, [pc, #36]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e5e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e6a:	4905      	ldr	r1, [pc, #20]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007e72:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	37e8      	adds	r7, #232	@ 0xe8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e80:	46020c00 	.word	0x46020c00

08007e84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	@ 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007e8c:	4ba6      	ldr	r3, [pc, #664]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007e96:	4ba4      	ldr	r3, [pc, #656]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007ea0:	4ba1      	ldr	r3, [pc, #644]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea4:	0a1b      	lsrs	r3, r3, #8
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	3301      	adds	r3, #1
 8007eac:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007eae:	4b9e      	ldr	r3, [pc, #632]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007eba:	4b9b      	ldr	r3, [pc, #620]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebe:	08db      	lsrs	r3, r3, #3
 8007ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	fb02 f303 	mul.w	r3, r2, r3
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d062      	beq.n	8007fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	f200 8081 	bhi.w	8007fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d024      	beq.n	8007f34 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d17a      	bne.n	8007fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800812c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f02:	4b89      	ldr	r3, [pc, #548]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f16:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f32:	e08f      	b.n	8008054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007f34:	4b7c      	ldr	r3, [pc, #496]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007f40:	4b79      	ldr	r3, [pc, #484]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	0f1b      	lsrs	r3, r3, #28
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	e006      	b.n	8007f5a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007f4c:	4b76      	ldr	r3, [pc, #472]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f52:	041b      	lsls	r3, r3, #16
 8007f54:	0f1b      	lsrs	r3, r3, #28
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	4a76      	ldr	r2, [pc, #472]	@ (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f60:	ee07 3a90 	vmov	s15, r3
 8007f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f80:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f84:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fa0:	e058      	b.n	8008054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800812c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fc8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fe4:	e036      	b.n	8008054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007fe6:	4b50      	ldr	r3, [pc, #320]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	0f1b      	lsrs	r3, r3, #28
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	e006      	b.n	800800c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008004:	041b      	lsls	r3, r3, #16
 8008006:	0f1b      	lsrs	r3, r3, #28
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	4a49      	ldr	r2, [pc, #292]	@ (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800800e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a02 	vldr	s12, [r7, #8]
 8008036:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008130 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008052:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008054:	4b34      	ldr	r3, [pc, #208]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d017      	beq.n	8008090 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008060:	4b31      	ldr	r3, [pc, #196]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008064:	0a5b      	lsrs	r3, r3, #9
 8008066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008076:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800807a:	edd7 6a07 	vldr	s13, [r7, #28]
 800807e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008086:	ee17 2a90 	vmov	r2, s15
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e002      	b.n	8008096 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008096:	4b24      	ldr	r3, [pc, #144]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d017      	beq.n	80080d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080a2:	4b21      	ldr	r3, [pc, #132]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80080b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c8:	ee17 2a90 	vmov	r2, s15
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	605a      	str	r2, [r3, #4]
 80080d0:	e002      	b.n	80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80080d8:	4b13      	ldr	r3, [pc, #76]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d017      	beq.n	8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080e4:	4b10      	ldr	r3, [pc, #64]	@ (8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e8:	0e1b      	lsrs	r3, r3, #24
 80080ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80080f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810a:	ee17 2a90 	vmov	r2, s15
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008112:	e002      	b.n	800811a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	609a      	str	r2, [r3, #8]
}
 800811a:	bf00      	nop
 800811c:	3724      	adds	r7, #36	@ 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	46020c00 	.word	0x46020c00
 800812c:	4b742400 	.word	0x4b742400
 8008130:	46000000 	.word	0x46000000
 8008134:	0800c964 	.word	0x0800c964

08008138 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008138:	b480      	push	{r7}
 800813a:	b089      	sub	sp, #36	@ 0x24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008140:	4ba6      	ldr	r3, [pc, #664]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008148:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800814a:	4ba4      	ldr	r3, [pc, #656]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008154:	4ba1      	ldr	r3, [pc, #644]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008158:	0a1b      	lsrs	r3, r3, #8
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	3301      	adds	r3, #1
 8008160:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008162:	4b9e      	ldr	r3, [pc, #632]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008166:	091b      	lsrs	r3, r3, #4
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800816e:	4b9b      	ldr	r3, [pc, #620]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008172:	08db      	lsrs	r3, r3, #3
 8008174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	fb02 f303 	mul.w	r3, r2, r3
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d062      	beq.n	8008256 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b03      	cmp	r3, #3
 8008194:	f200 8081 	bhi.w	800829a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d024      	beq.n	80081e8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d17a      	bne.n	800829a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80083e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80081b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b6:	4b89      	ldr	r3, [pc, #548]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80081c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80081ca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80081ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80081d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80081d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80081de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081e6:	e08f      	b.n	8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80081e8:	4b7c      	ldr	r3, [pc, #496]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80081f4:	4b79      	ldr	r3, [pc, #484]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	0f1b      	lsrs	r3, r3, #28
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	e006      	b.n	800820e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008200:	4b76      	ldr	r3, [pc, #472]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	0f1b      	lsrs	r3, r3, #28
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	4a76      	ldr	r2, [pc, #472]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008214:	ee07 3a90 	vmov	s15, r3
 8008218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	ee07 3a90 	vmov	s15, r3
 8008230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008234:	ed97 6a02 	vldr	s12, [r7, #8]
 8008238:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800823c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008248:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800824c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008250:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008254:	e058      	b.n	8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008260:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008268:	4b5c      	ldr	r3, [pc, #368]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800826a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800826c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008278:	ed97 6a02 	vldr	s12, [r7, #8]
 800827c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008280:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008284:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800828c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008294:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008298:	e036      	b.n	8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800829a:	4b50      	ldr	r3, [pc, #320]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80082a6:	4b4d      	ldr	r3, [pc, #308]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	0f1b      	lsrs	r3, r3, #28
 80082ac:	f003 030f 	and.w	r3, r3, #15
 80082b0:	e006      	b.n	80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80082b2:	4b4a      	ldr	r3, [pc, #296]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082b8:	041b      	lsls	r3, r3, #16
 80082ba:	0f1b      	lsrs	r3, r3, #28
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	4a49      	ldr	r2, [pc, #292]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80082c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80082ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80082fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008306:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008308:	4b34      	ldr	r3, [pc, #208]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d017      	beq.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008314:	4b31      	ldr	r3, [pc, #196]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008318:	0a5b      	lsrs	r3, r3, #9
 800831a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800832a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800832e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800833a:	ee17 2a90 	vmov	r2, s15
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e002      	b.n	800834a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800834a:	4b24      	ldr	r3, [pc, #144]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800834c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d017      	beq.n	8008386 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008356:	4b21      	ldr	r3, [pc, #132]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835a:	0c1b      	lsrs	r3, r3, #16
 800835c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800836c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008370:	edd7 6a07 	vldr	s13, [r7, #28]
 8008374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800837c:	ee17 2a90 	vmov	r2, s15
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	605a      	str	r2, [r3, #4]
 8008384:	e002      	b.n	800838c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800838c:	4b13      	ldr	r3, [pc, #76]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d017      	beq.n	80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008398:	4b10      	ldr	r3, [pc, #64]	@ (80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800839a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839c:	0e1b      	lsrs	r3, r3, #24
 800839e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80083aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083be:	ee17 2a90 	vmov	r2, s15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083c6:	e002      	b.n	80083ce <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	609a      	str	r2, [r3, #8]
}
 80083ce:	bf00      	nop
 80083d0:	3724      	adds	r7, #36	@ 0x24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	46020c00 	.word	0x46020c00
 80083e0:	4b742400 	.word	0x4b742400
 80083e4:	46000000 	.word	0x46000000
 80083e8:	0800c964 	.word	0x0800c964

080083ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	@ 0x24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80083f4:	4ba6      	ldr	r3, [pc, #664]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80083f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80083fe:	4ba4      	ldr	r3, [pc, #656]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008408:	4ba1      	ldr	r3, [pc, #644]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800840a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840c:	0a1b      	lsrs	r3, r3, #8
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	3301      	adds	r3, #1
 8008414:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008416:	4b9e      	ldr	r3, [pc, #632]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800841a:	091b      	lsrs	r3, r3, #4
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008422:	4b9b      	ldr	r3, [pc, #620]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008426:	08db      	lsrs	r3, r3, #3
 8008428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	fb02 f303 	mul.w	r3, r2, r3
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b03      	cmp	r3, #3
 8008442:	d062      	beq.n	800850a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b03      	cmp	r3, #3
 8008448:	f200 8081 	bhi.w	800854e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d024      	beq.n	800849c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d17a      	bne.n	800854e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846a:	4b89      	ldr	r3, [pc, #548]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800846c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800847a:	ed97 6a02 	vldr	s12, [r7, #8]
 800847e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008482:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800848a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008496:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800849a:	e08f      	b.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800849c:	4b7c      	ldr	r3, [pc, #496]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80084a8:	4b79      	ldr	r3, [pc, #484]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0f1b      	lsrs	r3, r3, #28
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	e006      	b.n	80084c2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80084b4:	4b76      	ldr	r3, [pc, #472]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084ba:	041b      	lsls	r3, r3, #16
 80084bc:	0f1b      	lsrs	r3, r3, #28
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	4a76      	ldr	r2, [pc, #472]	@ (800869c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80084c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80084f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008508:	e058      	b.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008514:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851c:	4b5c      	ldr	r3, [pc, #368]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800851e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008524:	ee07 3a90 	vmov	s15, r3
 8008528:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800852c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008530:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008534:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008538:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800853c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008540:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800854c:	e036      	b.n	80085bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800854e:	4b50      	ldr	r3, [pc, #320]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800855a:	4b4d      	ldr	r3, [pc, #308]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	0f1b      	lsrs	r3, r3, #28
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	e006      	b.n	8008574 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008566:	4b4a      	ldr	r3, [pc, #296]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	0f1b      	lsrs	r3, r3, #28
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	4a49      	ldr	r2, [pc, #292]	@ (800869c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	ee07 3a90 	vmov	s15, r3
 8008588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859a:	ed97 6a02 	vldr	s12, [r7, #8]
 800859e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80085a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80085b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80085bc:	4b34      	ldr	r3, [pc, #208]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d017      	beq.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085c8:	4b31      	ldr	r3, [pc, #196]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085cc:	0a5b      	lsrs	r3, r3, #9
 80085ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80085da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80085e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ee:	ee17 2a90 	vmov	r2, s15
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	e002      	b.n	80085fe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80085fe:	4b24      	ldr	r3, [pc, #144]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d017      	beq.n	800863a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800860a:	4b21      	ldr	r3, [pc, #132]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800860c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800861c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008620:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008624:	edd7 6a07 	vldr	s13, [r7, #28]
 8008628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800862c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008630:	ee17 2a90 	vmov	r2, s15
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]
 8008638:	e002      	b.n	8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008640:	4b13      	ldr	r3, [pc, #76]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d017      	beq.n	800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800864c:	4b10      	ldr	r3, [pc, #64]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800864e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008650:	0e1b      	lsrs	r3, r3, #24
 8008652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800865e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008662:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008666:	edd7 6a07 	vldr	s13, [r7, #28]
 800866a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008672:	ee17 2a90 	vmov	r2, s15
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800867a:	e002      	b.n	8008682 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	609a      	str	r2, [r3, #8]
}
 8008682:	bf00      	nop
 8008684:	3724      	adds	r7, #36	@ 0x24
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	46020c00 	.word	0x46020c00
 8008694:	4b742400 	.word	0x4b742400
 8008698:	46000000 	.word	0x46000000
 800869c:	0800c964 	.word	0x0800c964

080086a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08e      	sub	sp, #56	@ 0x38
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80086aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ae:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80086b2:	430b      	orrs	r3, r1
 80086b4:	d145      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80086b6:	4ba7      	ldr	r3, [pc, #668]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80086c2:	4ba4      	ldr	r3, [pc, #656]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d108      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d6:	d104      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80086d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086de:	f001 b9b3 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80086e2:	4b9c      	ldr	r3, [pc, #624]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086f0:	d114      	bne.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086f8:	d110      	bne.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086fa:	4b96      	ldr	r3, [pc, #600]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008708:	d103      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800870a:	23fa      	movs	r3, #250	@ 0xfa
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800870e:	f001 b99b 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008712:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008716:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008718:	f001 b996 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800871c:	4b8d      	ldr	r3, [pc, #564]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008728:	d107      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800872a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008730:	d103      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008732:	4b89      	ldr	r3, [pc, #548]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
 8008736:	f001 b987 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	637b      	str	r3, [r7, #52]	@ 0x34
 800873e:	f001 b983 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008746:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800874a:	430b      	orrs	r3, r1
 800874c:	d151      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800874e:	4b81      	ldr	r3, [pc, #516]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008754:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	2b80      	cmp	r3, #128	@ 0x80
 800875e:	d035      	beq.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	2b80      	cmp	r3, #128	@ 0x80
 8008764:	d841      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	2b60      	cmp	r3, #96	@ 0x60
 800876a:	d02a      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876e:	2b60      	cmp	r3, #96	@ 0x60
 8008770:	d83b      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008774:	2b40      	cmp	r3, #64	@ 0x40
 8008776:	d009      	beq.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	2b40      	cmp	r3, #64	@ 0x40
 800877c:	d835      	bhi.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00c      	beq.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	2b20      	cmp	r3, #32
 8008788:	d012      	beq.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800878a:	e02e      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800878c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fb77 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800879a:	f001 b955 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800879e:	f107 0318 	add.w	r3, r7, #24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fcc8 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ac:	f001 b94c 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087b0:	f107 030c 	add.w	r3, r7, #12
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff fe19 	bl	80083ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087be:	f001 b943 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80087c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80087c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c8:	f001 b93e 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087cc:	4b61      	ldr	r3, [pc, #388]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087d8:	d103      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80087da:	4b60      	ldr	r3, [pc, #384]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087de:	f001 b933 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087e6:	f001 b92f 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ee:	f001 b92b 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80087f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80087fa:	430b      	orrs	r3, r1
 80087fc:	d158      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80087fe:	4b55      	ldr	r3, [pc, #340]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008804:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008808:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008810:	d03b      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008818:	d846      	bhi.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008820:	d02e      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008828:	d83e      	bhi.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008830:	d00b      	beq.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008838:	d836      	bhi.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00d      	beq.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008846:	d012      	beq.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008848:	e02e      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800884a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff fb18 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008858:	f001 b8f6 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800885c:	f107 0318 	add.w	r3, r7, #24
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fc69 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800886a:	f001 b8ed 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fdba 	bl	80083ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800887c:	f001 b8e4 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008880:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008886:	f001 b8df 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800888a:	4b32      	ldr	r3, [pc, #200]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008896:	d103      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008898:	4b30      	ldr	r3, [pc, #192]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800889a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800889c:	f001 b8d4 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088a4:	f001 b8d0 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088ac:	f001 b8cc 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80088b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80088b8:	430b      	orrs	r3, r1
 80088ba:	d126      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80088bc:	4b25      	ldr	r3, [pc, #148]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80088be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80088c8:	4b22      	ldr	r3, [pc, #136]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088d4:	d106      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80088dc:	4b1f      	ldr	r3, [pc, #124]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80088de:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e0:	f001 b8b2 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80088e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088f0:	d107      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f8:	d103      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80088fa:	4b19      	ldr	r3, [pc, #100]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80088fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fe:	f001 b8a3 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	637b      	str	r3, [r7, #52]	@ 0x34
 8008906:	f001 b89f 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800890a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008912:	430b      	orrs	r3, r1
 8008914:	d16e      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008916:	4b0f      	ldr	r3, [pc, #60]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800891c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008920:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008928:	d03d      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008930:	d85c      	bhi.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008938:	d014      	beq.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008940:	d854      	bhi.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01f      	beq.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800894e:	d012      	beq.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008950:	e04c      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008952:	bf00      	nop
 8008954:	46020c00 	.word	0x46020c00
 8008958:	0007a120 	.word	0x0007a120
 800895c:	00f42400 	.word	0x00f42400
 8008960:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fa8b 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008972:	f001 b869 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008976:	f107 0318 	add.w	r3, r7, #24
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff fbdc 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008984:	f001 b860 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008988:	4ba7      	ldr	r3, [pc, #668]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008994:	d103      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008996:	4ba5      	ldr	r3, [pc, #660]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008998:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800899a:	f001 b855 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089a2:	f001 b851 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80089a6:	4ba0      	ldr	r3, [pc, #640]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d118      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80089b2:	4b9d      	ldr	r3, [pc, #628]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80089be:	4b9a      	ldr	r3, [pc, #616]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	0e1b      	lsrs	r3, r3, #24
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	e006      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80089ca:	4b97      	ldr	r3, [pc, #604]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80089cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089d0:	041b      	lsls	r3, r3, #16
 80089d2:	0e1b      	lsrs	r3, r3, #24
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	4a95      	ldr	r2, [pc, #596]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80089da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089e0:	f001 b832 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089e8:	f001 b82e 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089f0:	f001 b82a 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80089fc:	430b      	orrs	r3, r1
 80089fe:	d17f      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a00:	4b89      	ldr	r3, [pc, #548]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a0a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d165      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008a12:	4b85      	ldr	r3, [pc, #532]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a18:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008a1c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008a24:	d034      	beq.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008a2c:	d853      	bhi.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a34:	d00b      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a3c:	d84b      	bhi.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d016      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a4a:	d009      	beq.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008a4c:	e043      	b.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff fa16 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a5c:	f000 bff4 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a60:	f107 0318 	add.w	r3, r7, #24
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fb67 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a6e:	f000 bfeb 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008a72:	4b6d      	ldr	r3, [pc, #436]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a7e:	d103      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008a80:	4b6a      	ldr	r3, [pc, #424]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008a84:	f000 bfe0 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a8c:	f000 bfdc 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a90:	4b65      	ldr	r3, [pc, #404]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d118      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a9c:	4b62      	ldr	r3, [pc, #392]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	0e1b      	lsrs	r3, r3, #24
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	e006      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008aba:	041b      	lsls	r3, r3, #16
 8008abc:	0e1b      	lsrs	r3, r3, #24
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008aca:	f000 bfbd 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008ad2:	f000 bfb9 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008ada:	f000 bfb5 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ae4:	d108      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f9ca 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af4:	f000 bfa8 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afc:	f000 bfa4 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b04:	1e51      	subs	r1, r2, #1
 8008b06:	430b      	orrs	r3, r1
 8008b08:	d136      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008b0a:	4b47      	ldr	r3, [pc, #284]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008b1c:	f7fe fb44 	bl	80071a8 <HAL_RCC_GetPCLK2Freq>
 8008b20:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b22:	f000 bf91 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d104      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b2c:	f7fe fa0c 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8008b30:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b32:	f000 bf89 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008b36:	4b3c      	ldr	r3, [pc, #240]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b42:	d106      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d103      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b4e:	f000 bf7b 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008b52:	4b35      	ldr	r3, [pc, #212]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d107      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d104      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b6c:	f000 bf6c 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b74:	f000 bf68 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7c:	1e91      	subs	r1, r2, #2
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	d136      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008b82:	4b29      	ldr	r3, [pc, #164]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b88:	f003 030c 	and.w	r3, r3, #12
 8008b8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b94:	f7fe faf4 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8008b98:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b9a:	f000 bf55 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d104      	bne.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ba4:	f7fe f9d0 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8008ba8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008baa:	f000 bf4d 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008bae:	4b1e      	ldr	r3, [pc, #120]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bba:	d106      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d103      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc6:	f000 bf3f 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008bca:	4b17      	ldr	r3, [pc, #92]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d107      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	2b0c      	cmp	r3, #12
 8008bdc:	d104      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be4:	f000 bf30 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bec:	f000 bf2c 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf4:	1f11      	subs	r1, r2, #4
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	d13f      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c0c:	f7fe fab8 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8008c10:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c12:	f000 bf19 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	2b10      	cmp	r3, #16
 8008c1a:	d10d      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c1c:	f7fe f994 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8008c20:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c22:	f000 bf11 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008c26:	bf00      	nop
 8008c28:	46020c00 	.word	0x46020c00
 8008c2c:	02dc6c00 	.word	0x02dc6c00
 8008c30:	0800c964 	.word	0x0800c964
 8008c34:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008c38:	4ba6      	ldr	r3, [pc, #664]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c44:	d106      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d103      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008c4c:	4ba2      	ldr	r3, [pc, #648]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c50:	f000 befa 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008c54:	4b9f      	ldr	r3, [pc, #636]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d107      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	2b30      	cmp	r3, #48	@ 0x30
 8008c66:	d104      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008c68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6e:	f000 beeb 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c76:	f000 bee7 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c7e:	f1a2 0108 	sub.w	r1, r2, #8
 8008c82:	430b      	orrs	r3, r1
 8008c84:	d136      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008c86:	4b93      	ldr	r3, [pc, #588]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d104      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c98:	f7fe fa72 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8008c9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c9e:	f000 bed3 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	2b40      	cmp	r3, #64	@ 0x40
 8008ca6:	d104      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ca8:	f7fe f94e 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8008cac:	6378      	str	r0, [r7, #52]	@ 0x34
 8008cae:	f000 becb 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008cb2:	4b88      	ldr	r3, [pc, #544]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cbe:	d106      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc2:	2b80      	cmp	r3, #128	@ 0x80
 8008cc4:	d103      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008cc6:	4b84      	ldr	r3, [pc, #528]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cca:	f000 bebd 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008cce:	4b81      	ldr	r3, [pc, #516]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d107      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ce0:	d104      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce8:	f000 beae 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf0:	f000 beaa 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cf8:	f1a2 0110 	sub.w	r1, r2, #16
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	d139      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008d00:	4b74      	ldr	r3, [pc, #464]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d0a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008d12:	f7fe fa35 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8008d16:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d18:	f000 be96 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d22:	d104      	bne.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d24:	f7fe f910 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8008d28:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d2a:	f000 be8d 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008d2e:	4b69      	ldr	r3, [pc, #420]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3a:	d107      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d42:	d103      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008d44:	4b64      	ldr	r3, [pc, #400]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d48:	f000 be7e 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008d4c:	4b61      	ldr	r3, [pc, #388]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d108      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d60:	d104      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	f000 be6e 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d70:	f000 be6a 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d78:	f1a2 0120 	sub.w	r1, r2, #32
 8008d7c:	430b      	orrs	r3, r1
 8008d7e:	d158      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008d80:	4b54      	ldr	r3, [pc, #336]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d104      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008d92:	f7fe fa1d 	bl	80071d0 <HAL_RCC_GetPCLK3Freq>
 8008d96:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d98:	f000 be56 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d104      	bne.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008da2:	f7fe f8d1 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8008da6:	6378      	str	r0, [r7, #52]	@ 0x34
 8008da8:	f000 be4e 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008dac:	4b49      	ldr	r3, [pc, #292]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db8:	d106      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d103      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8008dc0:	4b45      	ldr	r3, [pc, #276]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc4:	f000 be40 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008dc8:	4b42      	ldr	r3, [pc, #264]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d107      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d104      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8008ddc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de2:	f000 be31 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008de6:	4b3b      	ldr	r3, [pc, #236]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b20      	cmp	r3, #32
 8008df0:	d11b      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d118      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008df8:	4b36      	ldr	r3, [pc, #216]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008e04:	4b33      	ldr	r3, [pc, #204]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	0e1b      	lsrs	r3, r3, #24
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	e006      	b.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8008e10:	4b30      	ldr	r3, [pc, #192]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e16:	041b      	lsls	r3, r3, #16
 8008e18:	0e1b      	lsrs	r3, r3, #24
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e26:	f000 be0f 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2e:	f000 be0b 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e36:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	d172      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008e3e:	4b25      	ldr	r3, [pc, #148]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e44:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008e48:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e50:	d104      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e52:	f7fe f879 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8008e56:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e58:	f000 bdf6 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e62:	d108      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff f965 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e72:	f000 bde9 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d104      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008e7c:	f7fe f966 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8008e80:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e82:	f000 bde1 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008e8c:	d128      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008e8e:	4b11      	ldr	r3, [pc, #68]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	d118      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	0e1b      	lsrs	r3, r3, #24
 8008eac:	f003 030f 	and.w	r3, r3, #15
 8008eb0:	e006      	b.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8008eb2:	4b08      	ldr	r3, [pc, #32]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008eb8:	041b      	lsls	r3, r3, #16
 8008eba:	0e1b      	lsrs	r3, r3, #24
 8008ebc:	f003 030f 	and.w	r3, r3, #15
 8008ec0:	4a06      	ldr	r2, [pc, #24]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec8:	f000 bdbe 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed0:	f000 bdba 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008ed4:	46020c00 	.word	0x46020c00
 8008ed8:	00f42400 	.word	0x00f42400
 8008edc:	0800c964 	.word	0x0800c964
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008ee0:	4baf      	ldr	r3, [pc, #700]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eec:	d107      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ef4:	d103      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8008ef6:	4bab      	ldr	r3, [pc, #684]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efa:	f000 bda5 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008efe:	4ba8      	ldr	r3, [pc, #672]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f0a:	d107      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f12:	d103      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8008f14:	4ba3      	ldr	r3, [pc, #652]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f18:	f000 bd96 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f20:	f000 bd92 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f28:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	d158      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008f30:	4b9b      	ldr	r3, [pc, #620]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008f32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d84b      	bhi.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8008f42:	a201      	add	r2, pc, #4	@ (adr r2, 8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8008f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f48:	08008f81 	.word	0x08008f81
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008f6f 	.word	0x08008f6f
 8008f54:	08008f8b 	.word	0x08008f8b
 8008f58:	08008f95 	.word	0x08008f95
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe ff8f 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f6a:	f000 bd6d 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6e:	f107 030c 	add.w	r3, r7, #12
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff fa3a 	bl	80083ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f7c:	f000 bd64 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008f80:	f7fe f8e4 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8008f84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f86:	f000 bd5f 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f8a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f90:	f000 bd5a 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008f94:	4b82      	ldr	r3, [pc, #520]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d118      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008fa0:	4b7f      	ldr	r3, [pc, #508]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008fac:	4b7c      	ldr	r3, [pc, #496]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	0e1b      	lsrs	r3, r3, #24
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	e006      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008fb8:	4b79      	ldr	r3, [pc, #484]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008fbe:	041b      	lsls	r3, r3, #16
 8008fc0:	0e1b      	lsrs	r3, r3, #24
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	4a78      	ldr	r2, [pc, #480]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008fce:	f000 bd3b 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fd6:	f000 bd37 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fde:	f000 bd33 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008fea:	430b      	orrs	r3, r1
 8008fec:	d167      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008fee:	4b6c      	ldr	r3, [pc, #432]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ff4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008ff8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009000:	d036      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009008:	d855      	bhi.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009010:	d029      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009018:	d84d      	bhi.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009020:	d013      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009028:	d845      	bhi.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d015      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009036:	d13e      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe ff21 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009046:	f000 bcff 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800904a:	f107 030c 	add.w	r3, r7, #12
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff f9cc 	bl	80083ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009058:	f000 bcf6 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800905c:	f7fe f876 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8009060:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009062:	f000 bcf1 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009066:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800906a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800906c:	f000 bcec 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009070:	4b4b      	ldr	r3, [pc, #300]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b20      	cmp	r3, #32
 800907a:	d118      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800907c:	4b48      	ldr	r3, [pc, #288]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8009088:	4b45      	ldr	r3, [pc, #276]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	0e1b      	lsrs	r3, r3, #24
 800908e:	f003 030f 	and.w	r3, r3, #15
 8009092:	e006      	b.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009094:	4b42      	ldr	r3, [pc, #264]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800909a:	041b      	lsls	r3, r3, #16
 800909c:	0e1b      	lsrs	r3, r3, #24
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	4a41      	ldr	r2, [pc, #260]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80090a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090aa:	f000 bccd 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090b2:	f000 bcc9 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ba:	f000 bcc5 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80090be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80090c6:	430b      	orrs	r3, r1
 80090c8:	d14c      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80090ca:	4b35      	ldr	r3, [pc, #212]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80090cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80090d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80090dc:	f7fe f850 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 80090e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80090e2:	f000 bcb1 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ec:	d104      	bne.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090ee:	f7fd ff2b 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 80090f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80090f4:	f000 bca8 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80090f8:	4b29      	ldr	r3, [pc, #164]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009104:	d107      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800910c:	d103      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800910e:	4b25      	ldr	r3, [pc, #148]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009110:	637b      	str	r3, [r7, #52]	@ 0x34
 8009112:	f000 bc99 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009116:	4b22      	ldr	r3, [pc, #136]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b20      	cmp	r3, #32
 8009120:	d11c      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009128:	d118      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800912a:	4b1d      	ldr	r3, [pc, #116]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8009136:	4b1a      	ldr	r3, [pc, #104]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	0e1b      	lsrs	r3, r3, #24
 800913c:	f003 030f 	and.w	r3, r3, #15
 8009140:	e006      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8009142:	4b17      	ldr	r3, [pc, #92]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009148:	041b      	lsls	r3, r3, #16
 800914a:	0e1b      	lsrs	r3, r3, #24
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	4a15      	ldr	r2, [pc, #84]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
 8009158:	f000 bc76 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009160:	f000 bc72 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009168:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800916c:	430b      	orrs	r3, r1
 800916e:	d153      	bne.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009170:	4b0b      	ldr	r3, [pc, #44]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009176:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800917a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800917c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009182:	f7fd fffd 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8009186:	6378      	str	r0, [r7, #52]	@ 0x34
 8009188:	f000 bc5e 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009192:	d10b      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009194:	f7fd fed8 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8009198:	6378      	str	r0, [r7, #52]	@ 0x34
 800919a:	f000 bc55 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800919e:	bf00      	nop
 80091a0:	46020c00 	.word	0x46020c00
 80091a4:	00f42400 	.word	0x00f42400
 80091a8:	0800c964 	.word	0x0800c964
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80091ac:	4ba1      	ldr	r3, [pc, #644]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b8:	d107      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091c0:	d103      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80091c2:	4b9d      	ldr	r3, [pc, #628]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c6:	f000 bc3f 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80091ca:	4b9a      	ldr	r3, [pc, #616]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d11c      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091dc:	d118      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091de:	4b95      	ldr	r3, [pc, #596]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d005      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80091ea:	4b92      	ldr	r3, [pc, #584]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	0e1b      	lsrs	r3, r3, #24
 80091f0:	f003 030f 	and.w	r3, r3, #15
 80091f4:	e006      	b.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80091f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80091f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091fc:	041b      	lsls	r3, r3, #16
 80091fe:	0e1b      	lsrs	r3, r3, #24
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	4a8d      	ldr	r2, [pc, #564]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800920a:	637b      	str	r3, [r7, #52]	@ 0x34
 800920c:	f000 bc1c 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	637b      	str	r3, [r7, #52]	@ 0x34
 8009214:	f000 bc18 	b.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009220:	430b      	orrs	r3, r1
 8009222:	d151      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009224:	4b83      	ldr	r3, [pc, #524]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800922a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800922e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	2bc0      	cmp	r3, #192	@ 0xc0
 8009234:	d024      	beq.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	2bc0      	cmp	r3, #192	@ 0xc0
 800923a:	d842      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800923c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923e:	2b80      	cmp	r3, #128	@ 0x80
 8009240:	d00d      	beq.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	2b80      	cmp	r3, #128	@ 0x80
 8009246:	d83c      	bhi.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	2b40      	cmp	r3, #64	@ 0x40
 8009252:	d011      	beq.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8009254:	e035      	b.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009256:	f7fd ffbb 	bl	80071d0 <HAL_RCC_GetPCLK3Freq>
 800925a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800925c:	e3f4      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800925e:	4b75      	ldr	r3, [pc, #468]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800926a:	d102      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800926c:	4b72      	ldr	r3, [pc, #456]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009270:	e3ea      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009276:	e3e7      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009278:	f7fd fe66 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 800927c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800927e:	e3e3      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009280:	4b6c      	ldr	r3, [pc, #432]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b20      	cmp	r3, #32
 800928a:	d117      	bne.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800928c:	4b69      	ldr	r3, [pc, #420]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8009298:	4b66      	ldr	r3, [pc, #408]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	0e1b      	lsrs	r3, r3, #24
 800929e:	f003 030f 	and.w	r3, r3, #15
 80092a2:	e006      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80092a4:	4b63      	ldr	r3, [pc, #396]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80092a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092aa:	041b      	lsls	r3, r3, #16
 80092ac:	0e1b      	lsrs	r3, r3, #24
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	4a62      	ldr	r2, [pc, #392]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80092b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80092ba:	e3c5      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092c0:	e3c2      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092c6:	e3bf      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80092c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092cc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80092d0:	430b      	orrs	r3, r1
 80092d2:	d147      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80092d4:	4b57      	ldr	r3, [pc, #348]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80092d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80092de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d103      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80092e6:	f7fd ff4b 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 80092ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80092ec:	e3ac      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092f4:	d103      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80092f6:	f7fd fe27 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 80092fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80092fc:	e3a4      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80092fe:	4b4d      	ldr	r3, [pc, #308]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800930a:	d106      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009312:	d102      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8009314:	4b48      	ldr	r3, [pc, #288]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009316:	637b      	str	r3, [r7, #52]	@ 0x34
 8009318:	e396      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800931a:	4b46      	ldr	r3, [pc, #280]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b20      	cmp	r3, #32
 8009324:	d11b      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800932c:	d117      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800932e:	4b41      	ldr	r3, [pc, #260]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800933a:	4b3e      	ldr	r3, [pc, #248]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	0e1b      	lsrs	r3, r3, #24
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	e006      	b.n	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8009346:	4b3b      	ldr	r3, [pc, #236]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800934c:	041b      	lsls	r3, r3, #16
 800934e:	0e1b      	lsrs	r3, r3, #24
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	4a39      	ldr	r2, [pc, #228]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800935a:	637b      	str	r3, [r7, #52]	@ 0x34
 800935c:	e374      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34
 8009362:	e371      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009368:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800936c:	430b      	orrs	r3, r1
 800936e:	d16a      	bne.n	8009446 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009370:	4b30      	ldr	r3, [pc, #192]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800937a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	2b00      	cmp	r3, #0
 8009380:	d120      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009382:	4b2c      	ldr	r3, [pc, #176]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b20      	cmp	r3, #32
 800938c:	d117      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800938e:	4b29      	ldr	r3, [pc, #164]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800939a:	4b26      	ldr	r3, [pc, #152]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	0e1b      	lsrs	r3, r3, #24
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80093a6:	4b23      	ldr	r3, [pc, #140]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80093a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	0e1b      	lsrs	r3, r3, #24
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	4a21      	ldr	r2, [pc, #132]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80093b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80093bc:	e344      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c2:	e341      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80093c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80093c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d2:	d112      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093da:	d10e      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093dc:	4b15      	ldr	r3, [pc, #84]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80093de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ea:	d102      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80093ec:	23fa      	movs	r3, #250	@ 0xfa
 80093ee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093f0:	e32a      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80093f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093f8:	e326      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80093fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009406:	d106      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940e:	d102      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009410:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
 8009414:	e318      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009416:	4b07      	ldr	r3, [pc, #28]	@ (8009434 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b02      	cmp	r3, #2
 8009422:	d10d      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8009424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800942a:	d109      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800942c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009430:	637b      	str	r3, [r7, #52]	@ 0x34
 8009432:	e309      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009434:	46020c00 	.word	0x46020c00
 8009438:	00f42400 	.word	0x00f42400
 800943c:	0800c964 	.word	0x0800c964
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	637b      	str	r3, [r7, #52]	@ 0x34
 8009444:	e300      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800944e:	430b      	orrs	r3, r1
 8009450:	d164      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009452:	4ba2      	ldr	r3, [pc, #648]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009458:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800945c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	2b00      	cmp	r3, #0
 8009462:	d120      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009464:	4b9d      	ldr	r3, [pc, #628]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b20      	cmp	r3, #32
 800946e:	d117      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009470:	4b9a      	ldr	r3, [pc, #616]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800947c:	4b97      	ldr	r3, [pc, #604]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	0e1b      	lsrs	r3, r3, #24
 8009482:	f003 030f 	and.w	r3, r3, #15
 8009486:	e006      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8009488:	4b94      	ldr	r3, [pc, #592]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800948a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800948e:	041b      	lsls	r3, r3, #16
 8009490:	0e1b      	lsrs	r3, r3, #24
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	4a92      	ldr	r2, [pc, #584]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
 800949e:	e2d3      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a4:	e2d0      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80094a6:	4b8d      	ldr	r3, [pc, #564]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094b4:	d112      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094bc:	d10e      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094be:	4b87      	ldr	r3, [pc, #540]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094cc:	d102      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80094ce:	23fa      	movs	r3, #250	@ 0xfa
 80094d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094d2:	e2b9      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80094d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80094da:	e2b5      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80094dc:	4b7f      	ldr	r3, [pc, #508]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094e8:	d106      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094f0:	d102      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80094f2:	4b7c      	ldr	r3, [pc, #496]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	e2a7      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80094f8:	4b78      	ldr	r3, [pc, #480]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80094fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b02      	cmp	r3, #2
 8009504:	d107      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800950c:	d103      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800950e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
 8009514:	e298      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	637b      	str	r3, [r7, #52]	@ 0x34
 800951a:	e295      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800951c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009520:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009524:	430b      	orrs	r3, r1
 8009526:	d147      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009528:	4b6c      	ldr	r3, [pc, #432]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800952a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800952e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009532:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800953a:	f7fd fe21 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 800953e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009540:	e282      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009542:	4b66      	ldr	r3, [pc, #408]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800954c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009550:	d112      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009558:	d10e      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800955a:	4b60      	ldr	r3, [pc, #384]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800955c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009568:	d102      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800956a:	23fa      	movs	r3, #250	@ 0xfa
 800956c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800956e:	e26b      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009570:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009574:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009576:	e267      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009578:	4b58      	ldr	r3, [pc, #352]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009584:	d106      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800958c:	d102      	bne.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800958e:	4b55      	ldr	r3, [pc, #340]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
 8009592:	e259      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009594:	4b51      	ldr	r3, [pc, #324]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d107      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80095a8:	d103      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80095aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b0:	e24a      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b6:	e247      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80095c0:	430b      	orrs	r3, r1
 80095c2:	d12d      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80095c4:	4b45      	ldr	r3, [pc, #276]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095ca:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80095ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80095d0:	4b42      	ldr	r3, [pc, #264]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095dc:	d105      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d102      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80095e4:	4b3f      	ldr	r3, [pc, #252]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80095e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e8:	e22e      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095f0:	d107      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fc44 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009600:	e222      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009608:	d107      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800960a:	f107 0318 	add.w	r3, r7, #24
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fd92 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
 8009618:	e216      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
 800961e:	e213      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009624:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009628:	430b      	orrs	r3, r1
 800962a:	d15d      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800962c:	4b2b      	ldr	r3, [pc, #172]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800962e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009632:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009636:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800963e:	d028      	beq.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009646:	d845      	bhi.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800964e:	d013      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009656:	d83d      	bhi.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	2b00      	cmp	r3, #0
 800965c:	d004      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009664:	d004      	beq.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009666:	e035      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009668:	f7fd fd9e 	bl	80071a8 <HAL_RCC_GetPCLK2Freq>
 800966c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800966e:	e1eb      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009670:	f7fd fc6a 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8009674:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009676:	e1e7      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009678:	4b18      	ldr	r3, [pc, #96]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009684:	d102      	bne.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009686:	4b17      	ldr	r3, [pc, #92]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009688:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800968a:	e1dd      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009690:	e1da      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009692:	4b12      	ldr	r3, [pc, #72]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b20      	cmp	r3, #32
 800969c:	d117      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800969e:	4b0f      	ldr	r3, [pc, #60]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d005      	beq.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80096aa:	4b0c      	ldr	r3, [pc, #48]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	0e1b      	lsrs	r3, r3, #24
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	e006      	b.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80096b6:	4b09      	ldr	r3, [pc, #36]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80096b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096bc:	041b      	lsls	r3, r3, #16
 80096be:	0e1b      	lsrs	r3, r3, #24
 80096c0:	f003 030f 	and.w	r3, r3, #15
 80096c4:	4a06      	ldr	r2, [pc, #24]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80096c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096cc:	e1bc      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096d2:	e1b9      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096d8:	e1b6      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80096da:	bf00      	nop
 80096dc:	46020c00 	.word	0x46020c00
 80096e0:	0800c964 	.word	0x0800c964
 80096e4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80096e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ec:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80096f0:	430b      	orrs	r3, r1
 80096f2:	d156      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80096f4:	4ba5      	ldr	r3, [pc, #660]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80096f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096fe:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009706:	d028      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800970e:	d845      	bhi.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009716:	d013      	beq.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800971e:	d83d      	bhi.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009722:	2b00      	cmp	r3, #0
 8009724:	d004      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800972c:	d004      	beq.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800972e:	e035      	b.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009730:	f7fd fd26 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8009734:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009736:	e187      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009738:	f7fd fc06 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 800973c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800973e:	e183      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009740:	4b92      	ldr	r3, [pc, #584]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800974c:	d102      	bne.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800974e:	4b90      	ldr	r3, [pc, #576]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009752:	e179      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009754:	2300      	movs	r3, #0
 8009756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009758:	e176      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800975a:	4b8c      	ldr	r3, [pc, #560]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b20      	cmp	r3, #32
 8009764:	d117      	bne.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009766:	4b89      	ldr	r3, [pc, #548]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8009772:	4b86      	ldr	r3, [pc, #536]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	0e1b      	lsrs	r3, r3, #24
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	e006      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800977e:	4b83      	ldr	r3, [pc, #524]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009784:	041b      	lsls	r3, r3, #16
 8009786:	0e1b      	lsrs	r3, r3, #24
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	4a81      	ldr	r2, [pc, #516]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800978e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009794:	e158      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800979a:	e155      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800979c:	2300      	movs	r3, #0
 800979e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097a0:	e152      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80097a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097a6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80097aa:	430b      	orrs	r3, r1
 80097ac:	d177      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80097ae:	4b77      	ldr	r3, [pc, #476]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80097b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097b4:	f003 0318 	and.w	r3, r3, #24
 80097b8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	2b18      	cmp	r3, #24
 80097be:	d86b      	bhi.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80097c0:	a201      	add	r2, pc, #4	@ (adr r2, 80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	0800982d 	.word	0x0800982d
 80097cc:	08009899 	.word	0x08009899
 80097d0:	08009899 	.word	0x08009899
 80097d4:	08009899 	.word	0x08009899
 80097d8:	08009899 	.word	0x08009899
 80097dc:	08009899 	.word	0x08009899
 80097e0:	08009899 	.word	0x08009899
 80097e4:	08009899 	.word	0x08009899
 80097e8:	08009835 	.word	0x08009835
 80097ec:	08009899 	.word	0x08009899
 80097f0:	08009899 	.word	0x08009899
 80097f4:	08009899 	.word	0x08009899
 80097f8:	08009899 	.word	0x08009899
 80097fc:	08009899 	.word	0x08009899
 8009800:	08009899 	.word	0x08009899
 8009804:	08009899 	.word	0x08009899
 8009808:	0800983d 	.word	0x0800983d
 800980c:	08009899 	.word	0x08009899
 8009810:	08009899 	.word	0x08009899
 8009814:	08009899 	.word	0x08009899
 8009818:	08009899 	.word	0x08009899
 800981c:	08009899 	.word	0x08009899
 8009820:	08009899 	.word	0x08009899
 8009824:	08009899 	.word	0x08009899
 8009828:	08009857 	.word	0x08009857
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800982c:	f7fd fcd0 	bl	80071d0 <HAL_RCC_GetPCLK3Freq>
 8009830:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009832:	e109      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009834:	f7fd fb88 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 8009838:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800983a:	e105      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800983c:	4b53      	ldr	r3, [pc, #332]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009848:	d102      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800984a:	4b51      	ldr	r3, [pc, #324]	@ (8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800984c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800984e:	e0fb      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009854:	e0f8      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009856:	4b4d      	ldr	r3, [pc, #308]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0320 	and.w	r3, r3, #32
 800985e:	2b20      	cmp	r3, #32
 8009860:	d117      	bne.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009862:	4b4a      	ldr	r3, [pc, #296]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800986e:	4b47      	ldr	r3, [pc, #284]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	0e1b      	lsrs	r3, r3, #24
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	e006      	b.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800987a:	4b44      	ldr	r3, [pc, #272]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800987c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009880:	041b      	lsls	r3, r3, #16
 8009882:	0e1b      	lsrs	r3, r3, #24
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	4a42      	ldr	r2, [pc, #264]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800988a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009890:	e0da      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009896:	e0d7      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800989c:	e0d4      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800989e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098a2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80098a6:	430b      	orrs	r3, r1
 80098a8:	d155      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80098aa:	4b38      	ldr	r3, [pc, #224]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80098ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80098b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80098b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098bc:	d013      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098c4:	d844      	bhi.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098cc:	d013      	beq.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098d4:	d83c      	bhi.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80098d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d014      	beq.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80098dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098e2:	d014      	beq.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80098e4:	e034      	b.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e6:	f107 0318 	add.w	r3, r7, #24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fc24 	bl	8008138 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f4:	e0a8      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fac2 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009904:	e0a0      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009906:	f7fd fb1f 	bl	8006f48 <HAL_RCC_GetSysClockFreq>
 800990a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800990c:	e09c      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800990e:	4b1f      	ldr	r3, [pc, #124]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b20      	cmp	r3, #32
 8009918:	d117      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800991a:	4b1c      	ldr	r3, [pc, #112]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8009926:	4b19      	ldr	r3, [pc, #100]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	0e1b      	lsrs	r3, r3, #24
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	e006      	b.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009932:	4b16      	ldr	r3, [pc, #88]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	0e1b      	lsrs	r3, r3, #24
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	4a14      	ldr	r2, [pc, #80]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009946:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009948:	e07e      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800994e:	e07b      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009954:	e078      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800995a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800995e:	430b      	orrs	r3, r1
 8009960:	d138      	bne.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009962:	4b0a      	ldr	r3, [pc, #40]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800996c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800996e:	4b07      	ldr	r3, [pc, #28]	@ (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b02      	cmp	r3, #2
 800997a:	d10d      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10a      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8009982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
 8009988:	e05e      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800998a:	bf00      	nop
 800998c:	46020c00 	.word	0x46020c00
 8009990:	00f42400 	.word	0x00f42400
 8009994:	0800c964 	.word	0x0800c964
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009998:	4b2e      	ldr	r3, [pc, #184]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800999a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800999e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099a6:	d112      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ae:	d10e      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099b0:	4b28      	ldr	r3, [pc, #160]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80099b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099be:	d102      	bne.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 80099c0:	23fa      	movs	r3, #250	@ 0xfa
 80099c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099c4:	e040      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80099c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099cc:	e03c      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d2:	e039      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80099d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80099dc:	430b      	orrs	r3, r1
 80099de:	d131      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80099e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80099e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80099ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80099ec:	4b19      	ldr	r3, [pc, #100]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099f8:	d105      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d102      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8009a00:	4b15      	ldr	r3, [pc, #84]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a04:	e020      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a12:	d106      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8009a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a1a:	d102      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8009a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a20:	e012      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009a22:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a2e:	d106      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a36:	d102      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8009a38:	4b09      	ldr	r3, [pc, #36]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8009a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3c:	e004      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a42:	e001      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3738      	adds	r7, #56	@ 0x38
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	46020c00 	.word	0x46020c00
 8009a58:	02dc6c00 	.word	0x02dc6c00
 8009a5c:	016e3600 	.word	0x016e3600
 8009a60:	00f42400 	.word	0x00f42400

08009a64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009a6c:	4b47      	ldr	r3, [pc, #284]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a46      	ldr	r2, [pc, #280]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009a72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a78:	f7f8 ff60 	bl	800293c <HAL_GetTick>
 8009a7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a7e:	e008      	b.n	8009a92 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a80:	f7f8 ff5c 	bl	800293c <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d901      	bls.n	8009a92 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e077      	b.n	8009b82 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a92:	4b3e      	ldr	r3, [pc, #248]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1f0      	bne.n	8009a80 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009aa6:	f023 0303 	bic.w	r3, r3, #3
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6811      	ldr	r1, [r2, #0]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	6852      	ldr	r2, [r2, #4]
 8009ab2:	3a01      	subs	r2, #1
 8009ab4:	0212      	lsls	r2, r2, #8
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	4934      	ldr	r1, [pc, #208]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009abe:	4b33      	ldr	r3, [pc, #204]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009ac0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ac2:	4b33      	ldr	r3, [pc, #204]	@ (8009b90 <RCCEx_PLL2_Config+0x12c>)
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	6892      	ldr	r2, [r2, #8]
 8009aca:	3a01      	subs	r2, #1
 8009acc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	68d2      	ldr	r2, [r2, #12]
 8009ad4:	3a01      	subs	r2, #1
 8009ad6:	0252      	lsls	r2, r2, #9
 8009ad8:	b292      	uxth	r2, r2
 8009ada:	4311      	orrs	r1, r2
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6912      	ldr	r2, [r2, #16]
 8009ae0:	3a01      	subs	r2, #1
 8009ae2:	0412      	lsls	r2, r2, #16
 8009ae4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009ae8:	4311      	orrs	r1, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6952      	ldr	r2, [r2, #20]
 8009aee:	3a01      	subs	r2, #1
 8009af0:	0612      	lsls	r2, r2, #24
 8009af2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009af6:	430a      	orrs	r2, r1
 8009af8:	4924      	ldr	r1, [pc, #144]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009afe:	4b23      	ldr	r3, [pc, #140]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	f023 020c 	bic.w	r2, r3, #12
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	4920      	ldr	r1, [pc, #128]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009b10:	4b1e      	ldr	r3, [pc, #120]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	491c      	ldr	r1, [pc, #112]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b22:	4a1a      	ldr	r2, [pc, #104]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b24:	f023 0310 	bic.w	r3, r3, #16
 8009b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b2a:	4b18      	ldr	r3, [pc, #96]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b32:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	69d2      	ldr	r2, [r2, #28]
 8009b3a:	00d2      	lsls	r2, r2, #3
 8009b3c:	4913      	ldr	r1, [pc, #76]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009b42:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b46:	4a11      	ldr	r2, [pc, #68]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b48:	f043 0310 	orr.w	r3, r3, #16
 8009b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a0e      	ldr	r2, [pc, #56]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b58:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b5a:	f7f8 feef 	bl	800293c <HAL_GetTick>
 8009b5e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b60:	e008      	b.n	8009b74 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b62:	f7f8 feeb 	bl	800293c <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e006      	b.n	8009b82 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b74:	4b05      	ldr	r3, [pc, #20]	@ (8009b8c <RCCEx_PLL2_Config+0x128>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0f0      	beq.n	8009b62 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0

}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	46020c00 	.word	0x46020c00
 8009b90:	80800000 	.word	0x80800000

08009b94 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009b9c:	4b47      	ldr	r3, [pc, #284]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a46      	ldr	r2, [pc, #280]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ba6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ba8:	f7f8 fec8 	bl	800293c <HAL_GetTick>
 8009bac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bae:	e008      	b.n	8009bc2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bb0:	f7f8 fec4 	bl	800293c <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d901      	bls.n	8009bc2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e077      	b.n	8009cb2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1f0      	bne.n	8009bb0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009bce:	4b3b      	ldr	r3, [pc, #236]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009bd6:	f023 0303 	bic.w	r3, r3, #3
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	6811      	ldr	r1, [r2, #0]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	6852      	ldr	r2, [r2, #4]
 8009be2:	3a01      	subs	r2, #1
 8009be4:	0212      	lsls	r2, r2, #8
 8009be6:	430a      	orrs	r2, r1
 8009be8:	4934      	ldr	r1, [pc, #208]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	630b      	str	r3, [r1, #48]	@ 0x30
 8009bee:	4b33      	ldr	r3, [pc, #204]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bf2:	4b33      	ldr	r3, [pc, #204]	@ (8009cc0 <RCCEx_PLL3_Config+0x12c>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6892      	ldr	r2, [r2, #8]
 8009bfa:	3a01      	subs	r2, #1
 8009bfc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	68d2      	ldr	r2, [r2, #12]
 8009c04:	3a01      	subs	r2, #1
 8009c06:	0252      	lsls	r2, r2, #9
 8009c08:	b292      	uxth	r2, r2
 8009c0a:	4311      	orrs	r1, r2
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6912      	ldr	r2, [r2, #16]
 8009c10:	3a01      	subs	r2, #1
 8009c12:	0412      	lsls	r2, r2, #16
 8009c14:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009c18:	4311      	orrs	r1, r2
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6952      	ldr	r2, [r2, #20]
 8009c1e:	3a01      	subs	r2, #1
 8009c20:	0612      	lsls	r2, r2, #24
 8009c22:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009c26:	430a      	orrs	r2, r1
 8009c28:	4924      	ldr	r1, [pc, #144]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009c2e:	4b23      	ldr	r3, [pc, #140]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c32:	f023 020c 	bic.w	r2, r3, #12
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	4920      	ldr	r1, [pc, #128]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009c40:	4b1e      	ldr	r3, [pc, #120]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	491c      	ldr	r1, [pc, #112]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c52:	4a1a      	ldr	r2, [pc, #104]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c54:	f023 0310 	bic.w	r3, r3, #16
 8009c58:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c5a:	4b18      	ldr	r3, [pc, #96]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c62:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	69d2      	ldr	r2, [r2, #28]
 8009c6a:	00d2      	lsls	r2, r2, #3
 8009c6c:	4913      	ldr	r1, [pc, #76]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009c72:	4b12      	ldr	r3, [pc, #72]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c76:	4a11      	ldr	r2, [pc, #68]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c78:	f043 0310 	orr.w	r3, r3, #16
 8009c7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a0e      	ldr	r2, [pc, #56]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c8a:	f7f8 fe57 	bl	800293c <HAL_GetTick>
 8009c8e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c90:	e008      	b.n	8009ca4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c92:	f7f8 fe53 	bl	800293c <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d901      	bls.n	8009ca4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e006      	b.n	8009cb2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ca4:	4b05      	ldr	r3, [pc, #20]	@ (8009cbc <RCCEx_PLL3_Config+0x128>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0f0      	beq.n	8009c92 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	46020c00 	.word	0x46020c00
 8009cc0:	80800000 	.word	0x80800000

08009cc4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e0fb      	b.n	8009ece <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a7f      	ldr	r2, [pc, #508]	@ (8009ed8 <HAL_SPI_Init+0x214>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d004      	beq.n	8009cea <HAL_SPI_Init+0x26>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a7d      	ldr	r2, [pc, #500]	@ (8009edc <HAL_SPI_Init+0x218>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	e000      	b.n	8009cec <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009cea:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a78      	ldr	r2, [pc, #480]	@ (8009ed8 <HAL_SPI_Init+0x214>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d004      	beq.n	8009d06 <HAL_SPI_Init+0x42>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a76      	ldr	r2, [pc, #472]	@ (8009edc <HAL_SPI_Init+0x218>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d105      	bne.n	8009d12 <HAL_SPI_Init+0x4e>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	2b0f      	cmp	r3, #15
 8009d0c:	d901      	bls.n	8009d12 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e0dd      	b.n	8009ece <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 f8fa 	bl	800af0c <SPI_GetPacketSize>
 8009d18:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8009ed8 <HAL_SPI_Init+0x214>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d004      	beq.n	8009d2e <HAL_SPI_Init+0x6a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a6c      	ldr	r2, [pc, #432]	@ (8009edc <HAL_SPI_Init+0x218>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d102      	bne.n	8009d34 <HAL_SPI_Init+0x70>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d816      	bhi.n	8009d62 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d38:	4a69      	ldr	r2, [pc, #420]	@ (8009ee0 <HAL_SPI_Init+0x21c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00e      	beq.n	8009d5c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a68      	ldr	r2, [pc, #416]	@ (8009ee4 <HAL_SPI_Init+0x220>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d009      	beq.n	8009d5c <HAL_SPI_Init+0x98>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a66      	ldr	r2, [pc, #408]	@ (8009ee8 <HAL_SPI_Init+0x224>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d004      	beq.n	8009d5c <HAL_SPI_Init+0x98>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a65      	ldr	r2, [pc, #404]	@ (8009eec <HAL_SPI_Init+0x228>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d104      	bne.n	8009d66 <HAL_SPI_Init+0xa2>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b10      	cmp	r3, #16
 8009d60:	d901      	bls.n	8009d66 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e0b3      	b.n	8009ece <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d106      	bne.n	8009d80 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7f7 ff42 	bl	8001c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f022 0201 	bic.w	r2, r2, #1
 8009d96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009da2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009dac:	d119      	bne.n	8009de2 <HAL_SPI_Init+0x11e>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009db6:	d103      	bne.n	8009dc0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d008      	beq.n	8009dd2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10c      	bne.n	8009de2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dd0:	d107      	bne.n	8009de2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009de0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00f      	beq.n	8009e0e <HAL_SPI_Init+0x14a>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	2b06      	cmp	r3, #6
 8009df4:	d90b      	bls.n	8009e0e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	e007      	b.n	8009e1e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69da      	ldr	r2, [r3, #28]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e26:	431a      	orrs	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e30:	ea42 0103 	orr.w	r1, r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68da      	ldr	r2, [r3, #12]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e72:	431a      	orrs	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e84:	431a      	orrs	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e8a:	ea42 0103 	orr.w	r1, r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	46002000 	.word	0x46002000
 8009edc:	56002000 	.word	0x56002000
 8009ee0:	40013000 	.word	0x40013000
 8009ee4:	50013000 	.word	0x50013000
 8009ee8:	40003800 	.word	0x40003800
 8009eec:	50003800 	.word	0x50003800

08009ef0 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d101      	bne.n	8009f02 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e01b      	b.n	8009f3a <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2202      	movs	r2, #2
 8009f06:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 0201 	bic.w	r2, r2, #1
 8009f18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7f8 f996 	bl	800224c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b088      	sub	sp, #32
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4613      	mov	r3, r2
 8009f52:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3320      	adds	r3, #32
 8009f5a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a90      	ldr	r2, [pc, #576]	@ (800a1a4 <HAL_SPI_Transmit+0x260>)
 8009f62:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f64:	f7f8 fcea 	bl	800293c <HAL_GetTick>
 8009f68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d001      	beq.n	8009f7a <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8009f76:	2302      	movs	r3, #2
 8009f78:	e1f4      	b.n	800a364 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <HAL_SPI_Transmit+0x42>
 8009f80:	88fb      	ldrh	r3, [r7, #6]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e1ec      	b.n	800a364 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d101      	bne.n	8009f98 <HAL_SPI_Transmit+0x54>
 8009f94:	2302      	movs	r3, #2
 8009f96:	e1e5      	b.n	800a364 <HAL_SPI_Transmit+0x420>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	88fa      	ldrh	r2, [r7, #6]
 8009fba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	88fa      	ldrh	r2, [r7, #6]
 8009fc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009ff0:	d108      	bne.n	800a004 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	e009      	b.n	800a018 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a016:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	041b      	lsls	r3, r3, #16
 800a022:	88f9      	ldrh	r1, [r7, #6]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	430b      	orrs	r3, r1
 800a02a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f042 0201 	orr.w	r2, r2, #1
 800a03a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10c      	bne.n	800a064 <HAL_SPI_Transmit+0x120>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a052:	d107      	bne.n	800a064 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	2b0f      	cmp	r3, #15
 800a06a:	d95b      	bls.n	800a124 <HAL_SPI_Transmit+0x1e0>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a4d      	ldr	r2, [pc, #308]	@ (800a1a8 <HAL_SPI_Transmit+0x264>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d04f      	beq.n	800a116 <HAL_SPI_Transmit+0x1d2>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a4c      	ldr	r2, [pc, #304]	@ (800a1ac <HAL_SPI_Transmit+0x268>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d04a      	beq.n	800a116 <HAL_SPI_Transmit+0x1d2>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a4a      	ldr	r2, [pc, #296]	@ (800a1b0 <HAL_SPI_Transmit+0x26c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d045      	beq.n	800a116 <HAL_SPI_Transmit+0x1d2>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a49      	ldr	r2, [pc, #292]	@ (800a1b4 <HAL_SPI_Transmit+0x270>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d147      	bne.n	800a124 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a094:	e03f      	b.n	800a116 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	f003 0302 	and.w	r3, r3, #2
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d114      	bne.n	800a0ce <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6812      	ldr	r2, [r2, #0]
 800a0ae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0b4:	1d1a      	adds	r2, r3, #4
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0cc:	e023      	b.n	800a116 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0ce:	f7f8 fc35 	bl	800293c <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d803      	bhi.n	800a0e6 <HAL_SPI_Transmit+0x1a2>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d102      	bne.n	800a0ec <HAL_SPI_Transmit+0x1a8>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d114      	bne.n	800a116 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fe3f 	bl	800ad70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e126      	b.n	800a364 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1b9      	bne.n	800a096 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a122:	e0f9      	b.n	800a318 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	2b07      	cmp	r3, #7
 800a12a:	f240 80ee 	bls.w	800a30a <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a12e:	e067      	b.n	800a200 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d13c      	bne.n	800a1b8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b01      	cmp	r3, #1
 800a148:	d918      	bls.n	800a17c <HAL_SPI_Transmit+0x238>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d014      	beq.n	800a17c <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6812      	ldr	r2, [r2, #0]
 800a15c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a16e:	b29b      	uxth	r3, r3
 800a170:	3b02      	subs	r3, #2
 800a172:	b29a      	uxth	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a17a:	e041      	b.n	800a200 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a180:	881a      	ldrh	r2, [r3, #0]
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a18a:	1c9a      	adds	r2, r3, #2
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a196:	b29b      	uxth	r3, r3
 800a198:	3b01      	subs	r3, #1
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a1a2:	e02d      	b.n	800a200 <HAL_SPI_Transmit+0x2bc>
 800a1a4:	46002000 	.word	0x46002000
 800a1a8:	40013000 	.word	0x40013000
 800a1ac:	50013000 	.word	0x50013000
 800a1b0:	40003800 	.word	0x40003800
 800a1b4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1b8:	f7f8 fbc0 	bl	800293c <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d803      	bhi.n	800a1d0 <HAL_SPI_Transmit+0x28c>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ce:	d102      	bne.n	800a1d6 <HAL_SPI_Transmit+0x292>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d114      	bne.n	800a200 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fdca 	bl	800ad70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e0b1      	b.n	800a364 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a206:	b29b      	uxth	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d191      	bne.n	800a130 <HAL_SPI_Transmit+0x1ec>
 800a20c:	e084      	b.n	800a318 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d152      	bne.n	800a2c2 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a222:	b29b      	uxth	r3, r3
 800a224:	2b03      	cmp	r3, #3
 800a226:	d918      	bls.n	800a25a <HAL_SPI_Transmit+0x316>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a22c:	2b40      	cmp	r3, #64	@ 0x40
 800a22e:	d914      	bls.n	800a25a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6812      	ldr	r2, [r2, #0]
 800a23a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a240:	1d1a      	adds	r2, r3, #4
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	3b04      	subs	r3, #4
 800a250:	b29a      	uxth	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a258:	e057      	b.n	800a30a <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a260:	b29b      	uxth	r3, r3
 800a262:	2b01      	cmp	r3, #1
 800a264:	d917      	bls.n	800a296 <HAL_SPI_Transmit+0x352>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d013      	beq.n	800a296 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a272:	881a      	ldrh	r2, [r3, #0]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a27c:	1c9a      	adds	r2, r3, #2
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3b02      	subs	r3, #2
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a294:	e039      	b.n	800a30a <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3320      	adds	r3, #32
 800a2a0:	7812      	ldrb	r2, [r2, #0]
 800a2a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2c0:	e023      	b.n	800a30a <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2c2:	f7f8 fb3b 	bl	800293c <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d803      	bhi.n	800a2da <HAL_SPI_Transmit+0x396>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d102      	bne.n	800a2e0 <HAL_SPI_Transmit+0x39c>
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d114      	bne.n	800a30a <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 fd45 	bl	800ad70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e02c      	b.n	800a364 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	f47f af7b 	bne.w	800a20e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2200      	movs	r2, #0
 800a320:	2108      	movs	r1, #8
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f000 fdc4 	bl	800aeb0 <SPI_WaitOnFlagUntilTimeout>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d007      	beq.n	800a33e <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a334:	f043 0220 	orr.w	r2, r3, #32
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 fd16 	bl	800ad70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800a362:	2300      	movs	r3, #0
  }
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	4613      	mov	r3, r2
 800a37a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a380:	095b      	lsrs	r3, r3, #5
 800a382:	b29b      	uxth	r3, r3
 800a384:	3301      	adds	r3, #1
 800a386:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3330      	adds	r3, #48	@ 0x30
 800a38e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a94      	ldr	r2, [pc, #592]	@ (800a5e8 <HAL_SPI_Receive+0x27c>)
 800a396:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a398:	f7f8 fad0 	bl	800293c <HAL_GetTick>
 800a39c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d001      	beq.n	800a3ae <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e2bc      	b.n	800a928 <HAL_SPI_Receive+0x5bc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <HAL_SPI_Receive+0x4e>
 800a3b4:	88fb      	ldrh	r3, [r7, #6]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e2b4      	b.n	800a928 <HAL_SPI_Receive+0x5bc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d101      	bne.n	800a3cc <HAL_SPI_Receive+0x60>
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	e2ad      	b.n	800a928 <HAL_SPI_Receive+0x5bc>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2204      	movs	r2, #4
 800a3d8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	88fa      	ldrh	r2, [r7, #6]
 800a3ee:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	88fa      	ldrh	r2, [r7, #6]
 800a3f6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a424:	d108      	bne.n	800a438 <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	e009      	b.n	800a44c <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a44a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	041b      	lsls	r3, r3, #16
 800a456:	88f9      	ldrh	r1, [r7, #6]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	430b      	orrs	r3, r1
 800a45e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f042 0201 	orr.w	r2, r2, #1
 800a46e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10c      	bne.n	800a498 <HAL_SPI_Receive+0x12c>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a486:	d107      	bne.n	800a498 <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a496:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	2b0f      	cmp	r3, #15
 800a49e:	f240 809c 	bls.w	800a5da <HAL_SPI_Receive+0x26e>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a51      	ldr	r2, [pc, #324]	@ (800a5ec <HAL_SPI_Receive+0x280>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	f000 808e 	beq.w	800a5ca <HAL_SPI_Receive+0x25e>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a4f      	ldr	r2, [pc, #316]	@ (800a5f0 <HAL_SPI_Receive+0x284>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	f000 8088 	beq.w	800a5ca <HAL_SPI_Receive+0x25e>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a4d      	ldr	r2, [pc, #308]	@ (800a5f4 <HAL_SPI_Receive+0x288>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	f000 8082 	beq.w	800a5ca <HAL_SPI_Receive+0x25e>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a4b      	ldr	r2, [pc, #300]	@ (800a5f8 <HAL_SPI_Receive+0x28c>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	f040 8084 	bne.w	800a5da <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a4d2:	e07a      	b.n	800a5ca <HAL_SPI_Receive+0x25e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d114      	bne.n	800a514 <HAL_SPI_Receive+0x1a8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a4f4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4fa:	1d1a      	adds	r2, r3, #4
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a506:	b29b      	uxth	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a512:	e05a      	b.n	800a5ca <HAL_SPI_Receive+0x25e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	8bfa      	ldrh	r2, [r7, #30]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d919      	bls.n	800a556 <HAL_SPI_Receive+0x1ea>
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d014      	beq.n	800a556 <HAL_SPI_Receive+0x1ea>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a534:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a536:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a548:	b29b      	uxth	r3, r3
 800a54a:	3b01      	subs	r3, #1
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a554:	e039      	b.n	800a5ca <HAL_SPI_Receive+0x25e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d010      	beq.n	800a582 <HAL_SPI_Receive+0x216>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a56a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a56e:	d12c      	bne.n	800a5ca <HAL_SPI_Receive+0x25e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a57e:	619a      	str	r2, [r3, #24]
 800a580:	e023      	b.n	800a5ca <HAL_SPI_Receive+0x25e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a582:	f7f8 f9db 	bl	800293c <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d803      	bhi.n	800a59a <HAL_SPI_Receive+0x22e>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d102      	bne.n	800a5a0 <HAL_SPI_Receive+0x234>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d114      	bne.n	800a5ca <HAL_SPI_Receive+0x25e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 fbe5 	bl	800ad70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e1ae      	b.n	800a928 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f47f af7e 	bne.w	800a4d4 <HAL_SPI_Receive+0x168>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a5d8:	e193      	b.n	800a902 <HAL_SPI_Receive+0x596>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	2b07      	cmp	r3, #7
 800a5e0:	f240 8188 	bls.w	800a8f4 <HAL_SPI_Receive+0x588>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a5e4:	e0b0      	b.n	800a748 <HAL_SPI_Receive+0x3dc>
 800a5e6:	bf00      	nop
 800a5e8:	46002000 	.word	0x46002000
 800a5ec:	40013000 	.word	0x40013000
 800a5f0:	50013000 	.word	0x50013000
 800a5f4:	40003800 	.word	0x40003800
 800a5f8:	50003800 	.word	0x50003800
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d114      	bne.n	800a63c <HAL_SPI_Receive+0x2d0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	8812      	ldrh	r2, [r2, #0]
 800a61a:	b292      	uxth	r2, r2
 800a61c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a622:	1c9a      	adds	r2, r3, #2
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a62e:	b29b      	uxth	r3, r3
 800a630:	3b01      	subs	r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a63a:	e085      	b.n	800a748 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a642:	b29b      	uxth	r3, r3
 800a644:	8bfa      	ldrh	r2, [r7, #30]
 800a646:	429a      	cmp	r2, r3
 800a648:	d924      	bls.n	800a694 <HAL_SPI_Receive+0x328>
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01f      	beq.n	800a694 <HAL_SPI_Receive+0x328>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	8812      	ldrh	r2, [r2, #0]
 800a65c:	b292      	uxth	r2, r2
 800a65e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a664:	1c9a      	adds	r2, r3, #2
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	8812      	ldrh	r2, [r2, #0]
 800a672:	b292      	uxth	r2, r2
 800a674:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a67a:	1c9a      	adds	r2, r3, #2
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a686:	b29b      	uxth	r3, r3
 800a688:	3b02      	subs	r3, #2
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a692:	e059      	b.n	800a748 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d119      	bne.n	800a6d4 <HAL_SPI_Receive+0x368>
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d014      	beq.n	800a6d4 <HAL_SPI_Receive+0x368>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	8812      	ldrh	r2, [r2, #0]
 800a6b2:	b292      	uxth	r2, r2
 800a6b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ba:	1c9a      	adds	r2, r3, #2
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a6d2:	e039      	b.n	800a748 <HAL_SPI_Receive+0x3dc>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d010      	beq.n	800a700 <HAL_SPI_Receive+0x394>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6ec:	d12c      	bne.n	800a748 <HAL_SPI_Receive+0x3dc>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	699a      	ldr	r2, [r3, #24]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6fc:	619a      	str	r2, [r3, #24]
 800a6fe:	e023      	b.n	800a748 <HAL_SPI_Receive+0x3dc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a700:	f7f8 f91c 	bl	800293c <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d803      	bhi.n	800a718 <HAL_SPI_Receive+0x3ac>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a716:	d102      	bne.n	800a71e <HAL_SPI_Receive+0x3b2>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d114      	bne.n	800a748 <HAL_SPI_Receive+0x3dc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 fb26 	bl	800ad70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a72a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e0ef      	b.n	800a928 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a74e:	b29b      	uxth	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	f47f af53 	bne.w	800a5fc <HAL_SPI_Receive+0x290>
 800a756:	e0d4      	b.n	800a902 <HAL_SPI_Receive+0x596>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d117      	bne.n	800a79e <HAL_SPI_Receive+0x432>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a77a:	7812      	ldrb	r2, [r2, #0]
 800a77c:	b2d2      	uxtb	r2, r2
 800a77e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a790:	b29b      	uxth	r3, r3
 800a792:	3b01      	subs	r3, #1
 800a794:	b29a      	uxth	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a79c:	e0aa      	b.n	800a8f4 <HAL_SPI_Receive+0x588>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	8bfa      	ldrh	r2, [r7, #30]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d946      	bls.n	800a83a <HAL_SPI_Receive+0x4ce>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d041      	beq.n	800a83a <HAL_SPI_Receive+0x4ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7c2:	7812      	ldrb	r2, [r2, #0]
 800a7c4:	b2d2      	uxtb	r2, r2
 800a7c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7de:	7812      	ldrb	r2, [r2, #0]
 800a7e0:	b2d2      	uxtb	r2, r2
 800a7e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7fa:	7812      	ldrb	r2, [r2, #0]
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a816:	7812      	ldrb	r2, [r2, #0]
 800a818:	b2d2      	uxtb	r2, r2
 800a81a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b04      	subs	r3, #4
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a838:	e05c      	b.n	800a8f4 <HAL_SPI_Receive+0x588>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a840:	b29b      	uxth	r3, r3
 800a842:	2b03      	cmp	r3, #3
 800a844:	d81c      	bhi.n	800a880 <HAL_SPI_Receive+0x514>
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d017      	beq.n	800a880 <HAL_SPI_Receive+0x514>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a85c:	7812      	ldrb	r2, [r2, #0]
 800a85e:	b2d2      	uxtb	r2, r2
 800a860:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a872:	b29b      	uxth	r3, r3
 800a874:	3b01      	subs	r3, #1
 800a876:	b29a      	uxth	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a87e:	e039      	b.n	800a8f4 <HAL_SPI_Receive+0x588>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a886:	2b00      	cmp	r3, #0
 800a888:	d010      	beq.n	800a8ac <HAL_SPI_Receive+0x540>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a898:	d12c      	bne.n	800a8f4 <HAL_SPI_Receive+0x588>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	699a      	ldr	r2, [r3, #24]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8a8:	619a      	str	r2, [r3, #24]
 800a8aa:	e023      	b.n	800a8f4 <HAL_SPI_Receive+0x588>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8ac:	f7f8 f846 	bl	800293c <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d803      	bhi.n	800a8c4 <HAL_SPI_Receive+0x558>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c2:	d102      	bne.n	800a8ca <HAL_SPI_Receive+0x55e>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d114      	bne.n	800a8f4 <HAL_SPI_Receive+0x588>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 fa50 	bl	800ad70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e019      	b.n	800a928 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f47f af2b 	bne.w	800a758 <HAL_SPI_Receive+0x3ec>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fa34 	bl	800ad70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <HAL_SPI_Receive+0x5ba>
  {
    return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <HAL_SPI_Receive+0x5bc>
  }
  else
  {
    return HAL_OK;
 800a926:	2300      	movs	r3, #0
  }
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3720      	adds	r7, #32
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08a      	sub	sp, #40	@ 0x28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a948:	6a3a      	ldr	r2, [r7, #32]
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	4013      	ands	r3, r2
 800a94e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a958:	2300      	movs	r3, #0
 800a95a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a962:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3330      	adds	r3, #48	@ 0x30
 800a96a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a972:	2b00      	cmp	r3, #0
 800a974:	d010      	beq.n	800a998 <HAL_SPI_IRQHandler+0x68>
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	f003 0308 	and.w	r3, r3, #8
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00b      	beq.n	800a998 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	699a      	ldr	r2, [r3, #24]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a98e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f9c9 	bl	800ad28 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a996:	e19a      	b.n	800acce <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d113      	bne.n	800a9ca <HAL_SPI_IRQHandler+0x9a>
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10e      	bne.n	800a9ca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d009      	beq.n	800a9ca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	4798      	blx	r3
    handled = 1UL;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10f      	bne.n	800a9f4 <HAL_SPI_IRQHandler+0xc4>
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d105      	bne.n	800a9f4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	4798      	blx	r3
    handled = 1UL;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10f      	bne.n	800aa1e <HAL_SPI_IRQHandler+0xee>
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	f003 0302 	and.w	r3, r3, #2
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00a      	beq.n	800aa1e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d105      	bne.n	800aa1e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	4798      	blx	r3
    handled = 1UL;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 814f 	bne.w	800acc4 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	f003 0308 	and.w	r3, r3, #8
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 808b 	beq.w	800ab48 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	699a      	ldr	r2, [r3, #24]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0208 	orr.w	r2, r2, #8
 800aa40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	699a      	ldr	r2, [r3, #24]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0210 	orr.w	r2, r2, #16
 800aa50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa60:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	691a      	ldr	r2, [r3, #16]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 0208 	bic.w	r2, r2, #8
 800aa70:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d13d      	bne.n	800aafc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800aa80:	e036      	b.n	800aaf0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	2b0f      	cmp	r3, #15
 800aa88:	d90b      	bls.n	800aaa2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa9a:	1d1a      	adds	r2, r3, #4
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800aaa0:	e01d      	b.n	800aade <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	2b07      	cmp	r3, #7
 800aaa8:	d90b      	bls.n	800aac2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	8812      	ldrh	r2, [r2, #0]
 800aab2:	b292      	uxth	r2, r2
 800aab4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaba:	1c9a      	adds	r2, r3, #2
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	66da      	str	r2, [r3, #108]	@ 0x6c
 800aac0:	e00d      	b.n	800aade <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aace:	7812      	ldrb	r2, [r2, #0]
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1c2      	bne.n	800aa82 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f937 	bl	800ad70 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d003      	beq.n	800ab1c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f8fd 	bl	800ad14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab1a:	e0d8      	b.n	800acce <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ab1c:	7cfb      	ldrb	r3, [r7, #19]
 800ab1e:	2b05      	cmp	r3, #5
 800ab20:	d103      	bne.n	800ab2a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f8ec 	bl	800ad00 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ab28:	e0ce      	b.n	800acc8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ab2a:	7cfb      	ldrb	r3, [r7, #19]
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d103      	bne.n	800ab38 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f8db 	bl	800acec <HAL_SPI_RxCpltCallback>
    return;
 800ab36:	e0c7      	b.n	800acc8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ab38:	7cfb      	ldrb	r3, [r7, #19]
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	f040 80c4 	bne.w	800acc8 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f8c9 	bl	800acd8 <HAL_SPI_TxCpltCallback>
    return;
 800ab46:	e0bf      	b.n	800acc8 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f000 80bd 	beq.w	800acce <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00f      	beq.n	800ab7e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab64:	f043 0204 	orr.w	r2, r3, #4
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	699a      	ldr	r2, [r3, #24]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00f      	beq.n	800aba8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab8e:	f043 0201 	orr.w	r2, r3, #1
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aba6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00f      	beq.n	800abd2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abb8:	f043 0208 	orr.w	r2, r3, #8
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	f003 0320 	and.w	r3, r3, #32
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00f      	beq.n	800abfc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abe2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	699a      	ldr	r2, [r3, #24]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f042 0220 	orr.w	r2, r2, #32
 800abfa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d062      	beq.n	800accc <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 0201 	bic.w	r2, r2, #1
 800ac14:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6812      	ldr	r2, [r2, #0]
 800ac20:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800ac24:	f023 0303 	bic.w	r3, r3, #3
 800ac28:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ac30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ac34:	d13e      	bne.n	800acb4 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ac44:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d015      	beq.n	800ac7c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac56:	4a1f      	ldr	r2, [pc, #124]	@ (800acd4 <HAL_SPI_IRQHandler+0x3a4>)
 800ac58:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7f8 fa7d 	bl	8003160 <HAL_DMA_Abort_IT>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d007      	beq.n	800ac7c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d022      	beq.n	800accc <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac8c:	4a11      	ldr	r2, [pc, #68]	@ (800acd4 <HAL_SPI_IRQHandler+0x3a4>)
 800ac8e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f8 fa62 	bl	8003160 <HAL_DMA_Abort_IT>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d014      	beq.n	800accc <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aca8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800acb2:	e00b      	b.n	800accc <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f829 	bl	800ad14 <HAL_SPI_ErrorCallback>
    return;
 800acc2:	e003      	b.n	800accc <HAL_SPI_IRQHandler+0x39c>
    return;
 800acc4:	bf00      	nop
 800acc6:	e002      	b.n	800acce <HAL_SPI_IRQHandler+0x39e>
    return;
 800acc8:	bf00      	nop
 800acca:	e000      	b.n	800acce <HAL_SPI_IRQHandler+0x39e>
    return;
 800accc:	bf00      	nop
  }
}
 800acce:	3728      	adds	r7, #40	@ 0x28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	0800ad3d 	.word	0x0800ad3d

0800acd8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7ff ffd6 	bl	800ad14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad68:	bf00      	nop
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	699a      	ldr	r2, [r3, #24]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f042 0208 	orr.w	r2, r2, #8
 800ad8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f042 0210 	orr.w	r2, r2, #16
 800ad9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 0201 	bic.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	6812      	ldr	r2, [r2, #0]
 800adba:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800add2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b04      	cmp	r3, #4
 800adde:	d014      	beq.n	800ae0a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00f      	beq.n	800ae0a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	699a      	ldr	r2, [r3, #24]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f042 0220 	orr.w	r2, r2, #32
 800ae08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d014      	beq.n	800ae40 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00f      	beq.n	800ae40 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae26:	f043 0204 	orr.w	r2, r3, #4
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	699a      	ldr	r2, [r3, #24]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00f      	beq.n	800ae6a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae50:	f043 0201 	orr.w	r2, r3, #1
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	699a      	ldr	r2, [r3, #24]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00f      	beq.n	800ae94 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae7a:	f043 0208 	orr.w	r2, r3, #8
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	699a      	ldr	r2, [r3, #24]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aec0:	e010      	b.n	800aee4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aec2:	f7f7 fd3b 	bl	800293c <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d803      	bhi.n	800aeda <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d102      	bne.n	800aee0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e00f      	b.n	800af04 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695a      	ldr	r2, [r3, #20]
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	4013      	ands	r3, r2
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	bf0c      	ite	eq
 800aef4:	2301      	moveq	r3, #1
 800aef6:	2300      	movne	r3, #0
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	461a      	mov	r2, r3
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d0df      	beq.n	800aec2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af18:	095b      	lsrs	r3, r3, #5
 800af1a:	3301      	adds	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	3301      	adds	r3, #1
 800af24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	3307      	adds	r3, #7
 800af2a:	08db      	lsrs	r3, r3, #3
 800af2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	fb02 f303 	mul.w	r3, r2, r3
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800af42:	b480      	push	{r7}
 800af44:	b083      	sub	sp, #12
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b01      	cmp	r3, #1
 800af56:	d12e      	bne.n	800afb6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d101      	bne.n	800af66 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800af62:	2302      	movs	r3, #2
 800af64:	e028      	b.n	800afb8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2202      	movs	r2, #2
 800af72:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f022 0201 	bic.w	r2, r2, #1
 800af84:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800af92:	ea42 0103 	orr.w	r1, r2, r3
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	689a      	ldr	r2, [r3, #8]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e000      	b.n	800afb8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
  }
}
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e042      	b.n	800b05c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d106      	bne.n	800afee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7f7 f99b 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2224      	movs	r2, #36	@ 0x24
 800aff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f022 0201 	bic.w	r2, r2, #1
 800b004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fa68 	bl	800b4e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f8c3 	bl	800b1a0 <UART_SetConfig>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e01b      	b.n	800b05c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	689a      	ldr	r2, [r3, #8]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0201 	orr.w	r2, r2, #1
 800b052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fae7 	bl	800b628 <UART_CheckIdleState>
 800b05a:	4603      	mov	r3, r0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08a      	sub	sp, #40	@ 0x28
 800b068:	af02      	add	r7, sp, #8
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	4613      	mov	r3, r2
 800b072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	f040 808b 	bne.w	800b196 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <HAL_UART_Transmit+0x28>
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e083      	b.n	800b198 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b09a:	2b80      	cmp	r3, #128	@ 0x80
 800b09c:	d107      	bne.n	800b0ae <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0ac:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2221      	movs	r2, #33	@ 0x21
 800b0ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0be:	f7f7 fc3d 	bl	800293c <HAL_GetTick>
 800b0c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	88fa      	ldrh	r2, [r7, #6]
 800b0c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	88fa      	ldrh	r2, [r7, #6]
 800b0d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0dc:	d108      	bne.n	800b0f0 <HAL_UART_Transmit+0x8c>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d104      	bne.n	800b0f0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	61bb      	str	r3, [r7, #24]
 800b0ee:	e003      	b.n	800b0f8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0f8:	e030      	b.n	800b15c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2200      	movs	r2, #0
 800b102:	2180      	movs	r1, #128	@ 0x80
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 fb39 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d005      	beq.n	800b11c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2220      	movs	r2, #32
 800b114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e03d      	b.n	800b198 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10b      	bne.n	800b13a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b130:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	3302      	adds	r3, #2
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	e007      	b.n	800b14a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	781a      	ldrb	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	3301      	adds	r3, #1
 800b148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b150:	b29b      	uxth	r3, r3
 800b152:	3b01      	subs	r3, #1
 800b154:	b29a      	uxth	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b162:	b29b      	uxth	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1c8      	bne.n	800b0fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2200      	movs	r2, #0
 800b170:	2140      	movs	r1, #64	@ 0x40
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f000 fb02 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d005      	beq.n	800b18a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2220      	movs	r2, #32
 800b182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e006      	b.n	800b198 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	e000      	b.n	800b198 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b196:	2302      	movs	r3, #2
  }
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3720      	adds	r7, #32
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1a4:	b094      	sub	sp, #80	@ 0x50
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	4b7e      	ldr	r3, [pc, #504]	@ (800b3b0 <UART_SetConfig+0x210>)
 800b1b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4977      	ldr	r1, [pc, #476]	@ (800b3b4 <UART_SetConfig+0x214>)
 800b1d8:	4019      	ands	r1, r3
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1e0:	430b      	orrs	r3, r1
 800b1e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f0:	68d9      	ldr	r1, [r3, #12]
 800b1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	ea40 0301 	orr.w	r3, r0, r1
 800b1fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	4b6a      	ldr	r3, [pc, #424]	@ (800b3b0 <UART_SetConfig+0x210>)
 800b208:	429a      	cmp	r2, r3
 800b20a:	d009      	beq.n	800b220 <UART_SetConfig+0x80>
 800b20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	4b69      	ldr	r3, [pc, #420]	@ (800b3b8 <UART_SetConfig+0x218>)
 800b212:	429a      	cmp	r2, r3
 800b214:	d004      	beq.n	800b220 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b218:	6a1a      	ldr	r2, [r3, #32]
 800b21a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b21c:	4313      	orrs	r3, r2
 800b21e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b22a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b234:	430b      	orrs	r3, r1
 800b236:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23e:	f023 000f 	bic.w	r0, r3, #15
 800b242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b244:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	ea40 0301 	orr.w	r3, r0, r1
 800b24e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	4b59      	ldr	r3, [pc, #356]	@ (800b3bc <UART_SetConfig+0x21c>)
 800b256:	429a      	cmp	r2, r3
 800b258:	d102      	bne.n	800b260 <UART_SetConfig+0xc0>
 800b25a:	2301      	movs	r3, #1
 800b25c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b25e:	e029      	b.n	800b2b4 <UART_SetConfig+0x114>
 800b260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	4b56      	ldr	r3, [pc, #344]	@ (800b3c0 <UART_SetConfig+0x220>)
 800b266:	429a      	cmp	r2, r3
 800b268:	d102      	bne.n	800b270 <UART_SetConfig+0xd0>
 800b26a:	2302      	movs	r3, #2
 800b26c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b26e:	e021      	b.n	800b2b4 <UART_SetConfig+0x114>
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	4b53      	ldr	r3, [pc, #332]	@ (800b3c4 <UART_SetConfig+0x224>)
 800b276:	429a      	cmp	r2, r3
 800b278:	d102      	bne.n	800b280 <UART_SetConfig+0xe0>
 800b27a:	2304      	movs	r3, #4
 800b27c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b27e:	e019      	b.n	800b2b4 <UART_SetConfig+0x114>
 800b280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	4b50      	ldr	r3, [pc, #320]	@ (800b3c8 <UART_SetConfig+0x228>)
 800b286:	429a      	cmp	r2, r3
 800b288:	d102      	bne.n	800b290 <UART_SetConfig+0xf0>
 800b28a:	2308      	movs	r3, #8
 800b28c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b28e:	e011      	b.n	800b2b4 <UART_SetConfig+0x114>
 800b290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	4b4d      	ldr	r3, [pc, #308]	@ (800b3cc <UART_SetConfig+0x22c>)
 800b296:	429a      	cmp	r2, r3
 800b298:	d102      	bne.n	800b2a0 <UART_SetConfig+0x100>
 800b29a:	2310      	movs	r3, #16
 800b29c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b29e:	e009      	b.n	800b2b4 <UART_SetConfig+0x114>
 800b2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	4b42      	ldr	r3, [pc, #264]	@ (800b3b0 <UART_SetConfig+0x210>)
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d102      	bne.n	800b2b0 <UART_SetConfig+0x110>
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2ae:	e001      	b.n	800b2b4 <UART_SetConfig+0x114>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	4b3d      	ldr	r3, [pc, #244]	@ (800b3b0 <UART_SetConfig+0x210>)
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d005      	beq.n	800b2ca <UART_SetConfig+0x12a>
 800b2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	4b3d      	ldr	r3, [pc, #244]	@ (800b3b8 <UART_SetConfig+0x218>)
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	f040 8085 	bne.w	800b3d4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b2ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	623b      	str	r3, [r7, #32]
 800b2d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b2d6:	f7fd f9e3 	bl	80086a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b2da:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 80e8 	beq.w	800b4b4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e8:	4a39      	ldr	r2, [pc, #228]	@ (800b3d0 <UART_SetConfig+0x230>)
 800b2ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	4413      	add	r3, r2
 800b302:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b304:	429a      	cmp	r2, r3
 800b306:	d305      	bcc.n	800b314 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b30e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b310:	429a      	cmp	r2, r3
 800b312:	d903      	bls.n	800b31c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b31a:	e048      	b.n	800b3ae <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b31c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b31e:	2200      	movs	r2, #0
 800b320:	61bb      	str	r3, [r7, #24]
 800b322:	61fa      	str	r2, [r7, #28]
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b328:	4a29      	ldr	r2, [pc, #164]	@ (800b3d0 <UART_SetConfig+0x230>)
 800b32a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	2200      	movs	r2, #0
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	617a      	str	r2, [r7, #20]
 800b336:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b33a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b33e:	f7f4 ffa3 	bl	8000288 <__aeabi_uldivmod>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4610      	mov	r0, r2
 800b348:	4619      	mov	r1, r3
 800b34a:	f04f 0200 	mov.w	r2, #0
 800b34e:	f04f 0300 	mov.w	r3, #0
 800b352:	020b      	lsls	r3, r1, #8
 800b354:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b358:	0202      	lsls	r2, r0, #8
 800b35a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b35c:	6849      	ldr	r1, [r1, #4]
 800b35e:	0849      	lsrs	r1, r1, #1
 800b360:	2000      	movs	r0, #0
 800b362:	460c      	mov	r4, r1
 800b364:	4605      	mov	r5, r0
 800b366:	eb12 0804 	adds.w	r8, r2, r4
 800b36a:	eb43 0905 	adc.w	r9, r3, r5
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	60bb      	str	r3, [r7, #8]
 800b376:	60fa      	str	r2, [r7, #12]
 800b378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b37c:	4640      	mov	r0, r8
 800b37e:	4649      	mov	r1, r9
 800b380:	f7f4 ff82 	bl	8000288 <__aeabi_uldivmod>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4613      	mov	r3, r2
 800b38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b392:	d308      	bcc.n	800b3a6 <UART_SetConfig+0x206>
 800b394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b39a:	d204      	bcs.n	800b3a6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3a2:	60da      	str	r2, [r3, #12]
 800b3a4:	e003      	b.n	800b3ae <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b3ac:	e082      	b.n	800b4b4 <UART_SetConfig+0x314>
 800b3ae:	e081      	b.n	800b4b4 <UART_SetConfig+0x314>
 800b3b0:	46002400 	.word	0x46002400
 800b3b4:	cfff69f3 	.word	0xcfff69f3
 800b3b8:	56002400 	.word	0x56002400
 800b3bc:	40013800 	.word	0x40013800
 800b3c0:	40004400 	.word	0x40004400
 800b3c4:	40004800 	.word	0x40004800
 800b3c8:	40004c00 	.word	0x40004c00
 800b3cc:	40005000 	.word	0x40005000
 800b3d0:	0800ca24 	.word	0x0800ca24
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3dc:	d13c      	bne.n	800b458 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b3de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	607a      	str	r2, [r7, #4]
 800b3e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3ea:	f7fd f959 	bl	80086a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3ee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d05e      	beq.n	800b4b4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fa:	4a39      	ldr	r2, [pc, #228]	@ (800b4e0 <UART_SetConfig+0x340>)
 800b3fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b400:	461a      	mov	r2, r3
 800b402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b404:	fbb3 f3f2 	udiv	r3, r3, r2
 800b408:	005a      	lsls	r2, r3, #1
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	085b      	lsrs	r3, r3, #1
 800b410:	441a      	add	r2, r3
 800b412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	fbb2 f3f3 	udiv	r3, r2, r3
 800b41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41e:	2b0f      	cmp	r3, #15
 800b420:	d916      	bls.n	800b450 <UART_SetConfig+0x2b0>
 800b422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b428:	d212      	bcs.n	800b450 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	f023 030f 	bic.w	r3, r3, #15
 800b432:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b436:	085b      	lsrs	r3, r3, #1
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	b29a      	uxth	r2, r3
 800b440:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b442:	4313      	orrs	r3, r2
 800b444:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b44c:	60da      	str	r2, [r3, #12]
 800b44e:	e031      	b.n	800b4b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b456:	e02d      	b.n	800b4b4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b45a:	2200      	movs	r2, #0
 800b45c:	469a      	mov	sl, r3
 800b45e:	4693      	mov	fp, r2
 800b460:	4650      	mov	r0, sl
 800b462:	4659      	mov	r1, fp
 800b464:	f7fd f91c 	bl	80086a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b468:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b46a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d021      	beq.n	800b4b4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	4a1a      	ldr	r2, [pc, #104]	@ (800b4e0 <UART_SetConfig+0x340>)
 800b476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b47a:	461a      	mov	r2, r3
 800b47c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b47e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	085b      	lsrs	r3, r3, #1
 800b488:	441a      	add	r2, r3
 800b48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b492:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b496:	2b0f      	cmp	r3, #15
 800b498:	d909      	bls.n	800b4ae <UART_SetConfig+0x30e>
 800b49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b49c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4a0:	d205      	bcs.n	800b4ae <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60da      	str	r2, [r3, #12]
 800b4ac:	e002      	b.n	800b4b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3750      	adds	r7, #80	@ 0x50
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4de:	bf00      	nop
 800b4e0:	0800ca24 	.word	0x0800ca24

0800b4e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f0:	f003 0308 	and.w	r3, r3, #8
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00a      	beq.n	800b50e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00a      	beq.n	800b530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00a      	beq.n	800b552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	430a      	orrs	r2, r1
 800b550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b556:	f003 0304 	and.w	r3, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00a      	beq.n	800b574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	430a      	orrs	r2, r1
 800b572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b578:	f003 0310 	and.w	r3, r3, #16
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00a      	beq.n	800b596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b59a:	f003 0320 	and.w	r3, r3, #32
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01a      	beq.n	800b5fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5e2:	d10a      	bne.n	800b5fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	605a      	str	r2, [r3, #4]
  }
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b098      	sub	sp, #96	@ 0x60
 800b62c:	af02      	add	r7, sp, #8
 800b62e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b638:	f7f7 f980 	bl	800293c <HAL_GetTick>
 800b63c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0308 	and.w	r3, r3, #8
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d12f      	bne.n	800b6ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b64c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b654:	2200      	movs	r2, #0
 800b656:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f88e 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d022      	beq.n	800b6ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b67a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b684:	647b      	str	r3, [r7, #68]	@ 0x44
 800b686:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b68a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e6      	bne.n	800b666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e063      	b.n	800b774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d149      	bne.n	800b74e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f857 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d03c      	beq.n	800b74e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e6      	bne.n	800b6d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	60fb      	str	r3, [r7, #12]
   return(result);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f023 0301 	bic.w	r3, r3, #1
 800b71c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b726:	61fa      	str	r2, [r7, #28]
 800b728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	69b9      	ldr	r1, [r7, #24]
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	617b      	str	r3, [r7, #20]
   return(result);
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e5      	bne.n	800b706 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2220      	movs	r2, #32
 800b73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e012      	b.n	800b774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2220      	movs	r2, #32
 800b752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3758      	adds	r7, #88	@ 0x58
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	4613      	mov	r3, r2
 800b78a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b78c:	e04f      	b.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d04b      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b796:	f7f7 f8d1 	bl	800293c <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d302      	bcc.n	800b7ac <UART_WaitOnFlagUntilTimeout+0x30>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e04e      	b.n	800b84e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d037      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	2b80      	cmp	r3, #128	@ 0x80
 800b7c2:	d034      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2b40      	cmp	r3, #64	@ 0x40
 800b7c8:	d031      	beq.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	69db      	ldr	r3, [r3, #28]
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b08      	cmp	r3, #8
 800b7d6:	d110      	bne.n	800b7fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2208      	movs	r2, #8
 800b7de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 f838 	bl	800b856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2208      	movs	r2, #8
 800b7ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e029      	b.n	800b84e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	69db      	ldr	r3, [r3, #28]
 800b800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b808:	d111      	bne.n	800b82e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f000 f81e 	bl	800b856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2220      	movs	r2, #32
 800b81e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e00f      	b.n	800b84e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	69da      	ldr	r2, [r3, #28]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4013      	ands	r3, r2
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	bf0c      	ite	eq
 800b83e:	2301      	moveq	r3, #1
 800b840:	2300      	movne	r3, #0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	461a      	mov	r2, r3
 800b846:	79fb      	ldrb	r3, [r7, #7]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d0a0      	beq.n	800b78e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b856:	b480      	push	{r7}
 800b858:	b095      	sub	sp, #84	@ 0x54
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b866:	e853 3f00 	ldrex	r3, [r3]
 800b86a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	461a      	mov	r2, r3
 800b87a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b87c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b87e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b880:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b882:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e6      	bne.n	800b85e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3308      	adds	r3, #8
 800b896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	e853 3f00 	ldrex	r3, [r3]
 800b89e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8a6:	f023 0301 	bic.w	r3, r3, #1
 800b8aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8bc:	e841 2300 	strex	r3, r2, [r1]
 800b8c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e3      	bne.n	800b890 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d118      	bne.n	800b902 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f023 0310 	bic.w	r3, r3, #16
 800b8e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8ee:	61bb      	str	r3, [r7, #24]
 800b8f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f2:	6979      	ldr	r1, [r7, #20]
 800b8f4:	69ba      	ldr	r2, [r7, #24]
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e6      	bne.n	800b8d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2220      	movs	r2, #32
 800b906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b916:	bf00      	nop
 800b918:	3754      	adds	r7, #84	@ 0x54
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b930:	2b01      	cmp	r3, #1
 800b932:	d101      	bne.n	800b938 <HAL_UARTEx_DisableFifoMode+0x16>
 800b934:	2302      	movs	r3, #2
 800b936:	e027      	b.n	800b988 <HAL_UARTEx_DisableFifoMode+0x66>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2224      	movs	r2, #36	@ 0x24
 800b944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f022 0201 	bic.w	r2, r2, #1
 800b95e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b966:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2220      	movs	r2, #32
 800b97a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d101      	bne.n	800b9ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	e02d      	b.n	800ba08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2224      	movs	r2, #36	@ 0x24
 800b9b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f022 0201 	bic.w	r2, r2, #1
 800b9d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	430a      	orrs	r2, r1
 800b9e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f84f 	bl	800ba8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba24:	2302      	movs	r3, #2
 800ba26:	e02d      	b.n	800ba84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2224      	movs	r2, #36	@ 0x24
 800ba34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 0201 	bic.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	430a      	orrs	r2, r1
 800ba62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f811 	bl	800ba8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d108      	bne.n	800baae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800baac:	e031      	b.n	800bb12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800baae:	2308      	movs	r3, #8
 800bab0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bab2:	2308      	movs	r3, #8
 800bab4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	0e5b      	lsrs	r3, r3, #25
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	f003 0307 	and.w	r3, r3, #7
 800bac4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	0f5b      	lsrs	r3, r3, #29
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f003 0307 	and.w	r3, r3, #7
 800bad4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bad6:	7bbb      	ldrb	r3, [r7, #14]
 800bad8:	7b3a      	ldrb	r2, [r7, #12]
 800bada:	4911      	ldr	r1, [pc, #68]	@ (800bb20 <UARTEx_SetNbDataToProcess+0x94>)
 800badc:	5c8a      	ldrb	r2, [r1, r2]
 800bade:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bae2:	7b3a      	ldrb	r2, [r7, #12]
 800bae4:	490f      	ldr	r1, [pc, #60]	@ (800bb24 <UARTEx_SetNbDataToProcess+0x98>)
 800bae6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bae8:	fb93 f3f2 	sdiv	r3, r3, r2
 800baec:	b29a      	uxth	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	7b7a      	ldrb	r2, [r7, #13]
 800baf8:	4909      	ldr	r1, [pc, #36]	@ (800bb20 <UARTEx_SetNbDataToProcess+0x94>)
 800bafa:	5c8a      	ldrb	r2, [r1, r2]
 800bafc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb00:	7b7a      	ldrb	r2, [r7, #13]
 800bb02:	4908      	ldr	r1, [pc, #32]	@ (800bb24 <UARTEx_SetNbDataToProcess+0x98>)
 800bb04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb06:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb12:	bf00      	nop
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	0800ca3c 	.word	0x0800ca3c
 800bb24:	0800ca44 	.word	0x0800ca44

0800bb28 <sniprintf>:
 800bb28:	b40c      	push	{r2, r3}
 800bb2a:	4b19      	ldr	r3, [pc, #100]	@ (800bb90 <sniprintf+0x68>)
 800bb2c:	b530      	push	{r4, r5, lr}
 800bb2e:	1e0c      	subs	r4, r1, #0
 800bb30:	b09d      	sub	sp, #116	@ 0x74
 800bb32:	681d      	ldr	r5, [r3, #0]
 800bb34:	da08      	bge.n	800bb48 <sniprintf+0x20>
 800bb36:	238b      	movs	r3, #139	@ 0x8b
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	b01d      	add	sp, #116	@ 0x74
 800bb40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb44:	b002      	add	sp, #8
 800bb46:	4770      	bx	lr
 800bb48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb4c:	9002      	str	r0, [sp, #8]
 800bb4e:	9006      	str	r0, [sp, #24]
 800bb50:	a902      	add	r1, sp, #8
 800bb52:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb56:	f04f 0300 	mov.w	r3, #0
 800bb5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bb60:	bf14      	ite	ne
 800bb62:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb66:	4623      	moveq	r3, r4
 800bb68:	9304      	str	r3, [sp, #16]
 800bb6a:	9307      	str	r3, [sp, #28]
 800bb6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb70:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb74:	ab21      	add	r3, sp, #132	@ 0x84
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	f000 f994 	bl	800bea4 <_svfiprintf_r>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	bfbc      	itt	lt
 800bb80:	238b      	movlt	r3, #139	@ 0x8b
 800bb82:	602b      	strlt	r3, [r5, #0]
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	d0da      	beq.n	800bb3e <sniprintf+0x16>
 800bb88:	9b02      	ldr	r3, [sp, #8]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
 800bb8e:	e7d6      	b.n	800bb3e <sniprintf+0x16>
 800bb90:	20000028 	.word	0x20000028

0800bb94 <memset>:
 800bb94:	4402      	add	r2, r0
 800bb96:	4603      	mov	r3, r0
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d100      	bne.n	800bb9e <memset+0xa>
 800bb9c:	4770      	bx	lr
 800bb9e:	f803 1b01 	strb.w	r1, [r3], #1
 800bba2:	e7f9      	b.n	800bb98 <memset+0x4>

0800bba4 <__errno>:
 800bba4:	4b01      	ldr	r3, [pc, #4]	@ (800bbac <__errno+0x8>)
 800bba6:	6818      	ldr	r0, [r3, #0]
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	20000028 	.word	0x20000028

0800bbb0 <__libc_init_array>:
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	4d0d      	ldr	r5, [pc, #52]	@ (800bbe8 <__libc_init_array+0x38>)
 800bbb4:	2600      	movs	r6, #0
 800bbb6:	4c0d      	ldr	r4, [pc, #52]	@ (800bbec <__libc_init_array+0x3c>)
 800bbb8:	1b64      	subs	r4, r4, r5
 800bbba:	10a4      	asrs	r4, r4, #2
 800bbbc:	42a6      	cmp	r6, r4
 800bbbe:	d109      	bne.n	800bbd4 <__libc_init_array+0x24>
 800bbc0:	4d0b      	ldr	r5, [pc, #44]	@ (800bbf0 <__libc_init_array+0x40>)
 800bbc2:	2600      	movs	r6, #0
 800bbc4:	4c0b      	ldr	r4, [pc, #44]	@ (800bbf4 <__libc_init_array+0x44>)
 800bbc6:	f000 fe3f 	bl	800c848 <_init>
 800bbca:	1b64      	subs	r4, r4, r5
 800bbcc:	10a4      	asrs	r4, r4, #2
 800bbce:	42a6      	cmp	r6, r4
 800bbd0:	d105      	bne.n	800bbde <__libc_init_array+0x2e>
 800bbd2:	bd70      	pop	{r4, r5, r6, pc}
 800bbd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd8:	3601      	adds	r6, #1
 800bbda:	4798      	blx	r3
 800bbdc:	e7ee      	b.n	800bbbc <__libc_init_array+0xc>
 800bbde:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe2:	3601      	adds	r6, #1
 800bbe4:	4798      	blx	r3
 800bbe6:	e7f2      	b.n	800bbce <__libc_init_array+0x1e>
 800bbe8:	0800cac0 	.word	0x0800cac0
 800bbec:	0800cac0 	.word	0x0800cac0
 800bbf0:	0800cac0 	.word	0x0800cac0
 800bbf4:	0800cac4 	.word	0x0800cac4

0800bbf8 <__retarget_lock_acquire_recursive>:
 800bbf8:	4770      	bx	lr

0800bbfa <__retarget_lock_release_recursive>:
 800bbfa:	4770      	bx	lr

0800bbfc <_free_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4605      	mov	r5, r0
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d041      	beq.n	800bc88 <_free_r+0x8c>
 800bc04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc08:	1f0c      	subs	r4, r1, #4
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bfb8      	it	lt
 800bc0e:	18e4      	addlt	r4, r4, r3
 800bc10:	f000 f8e0 	bl	800bdd4 <__malloc_lock>
 800bc14:	4a1d      	ldr	r2, [pc, #116]	@ (800bc8c <_free_r+0x90>)
 800bc16:	6813      	ldr	r3, [r2, #0]
 800bc18:	b933      	cbnz	r3, 800bc28 <_free_r+0x2c>
 800bc1a:	6063      	str	r3, [r4, #4]
 800bc1c:	6014      	str	r4, [r2, #0]
 800bc1e:	4628      	mov	r0, r5
 800bc20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc24:	f000 b8dc 	b.w	800bde0 <__malloc_unlock>
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	d908      	bls.n	800bc3e <_free_r+0x42>
 800bc2c:	6820      	ldr	r0, [r4, #0]
 800bc2e:	1821      	adds	r1, r4, r0
 800bc30:	428b      	cmp	r3, r1
 800bc32:	bf01      	itttt	eq
 800bc34:	6819      	ldreq	r1, [r3, #0]
 800bc36:	685b      	ldreq	r3, [r3, #4]
 800bc38:	1809      	addeq	r1, r1, r0
 800bc3a:	6021      	streq	r1, [r4, #0]
 800bc3c:	e7ed      	b.n	800bc1a <_free_r+0x1e>
 800bc3e:	461a      	mov	r2, r3
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	b10b      	cbz	r3, 800bc48 <_free_r+0x4c>
 800bc44:	42a3      	cmp	r3, r4
 800bc46:	d9fa      	bls.n	800bc3e <_free_r+0x42>
 800bc48:	6811      	ldr	r1, [r2, #0]
 800bc4a:	1850      	adds	r0, r2, r1
 800bc4c:	42a0      	cmp	r0, r4
 800bc4e:	d10b      	bne.n	800bc68 <_free_r+0x6c>
 800bc50:	6820      	ldr	r0, [r4, #0]
 800bc52:	4401      	add	r1, r0
 800bc54:	1850      	adds	r0, r2, r1
 800bc56:	6011      	str	r1, [r2, #0]
 800bc58:	4283      	cmp	r3, r0
 800bc5a:	d1e0      	bne.n	800bc1e <_free_r+0x22>
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4408      	add	r0, r1
 800bc62:	6053      	str	r3, [r2, #4]
 800bc64:	6010      	str	r0, [r2, #0]
 800bc66:	e7da      	b.n	800bc1e <_free_r+0x22>
 800bc68:	d902      	bls.n	800bc70 <_free_r+0x74>
 800bc6a:	230c      	movs	r3, #12
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	e7d6      	b.n	800bc1e <_free_r+0x22>
 800bc70:	6820      	ldr	r0, [r4, #0]
 800bc72:	1821      	adds	r1, r4, r0
 800bc74:	428b      	cmp	r3, r1
 800bc76:	bf02      	ittt	eq
 800bc78:	6819      	ldreq	r1, [r3, #0]
 800bc7a:	685b      	ldreq	r3, [r3, #4]
 800bc7c:	1809      	addeq	r1, r1, r0
 800bc7e:	6063      	str	r3, [r4, #4]
 800bc80:	bf08      	it	eq
 800bc82:	6021      	streq	r1, [r4, #0]
 800bc84:	6054      	str	r4, [r2, #4]
 800bc86:	e7ca      	b.n	800bc1e <_free_r+0x22>
 800bc88:	bd38      	pop	{r3, r4, r5, pc}
 800bc8a:	bf00      	nop
 800bc8c:	200006a0 	.word	0x200006a0

0800bc90 <sbrk_aligned>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	4e0f      	ldr	r6, [pc, #60]	@ (800bcd0 <sbrk_aligned+0x40>)
 800bc94:	460c      	mov	r4, r1
 800bc96:	4605      	mov	r5, r0
 800bc98:	6831      	ldr	r1, [r6, #0]
 800bc9a:	b911      	cbnz	r1, 800bca2 <sbrk_aligned+0x12>
 800bc9c:	f000 fba8 	bl	800c3f0 <_sbrk_r>
 800bca0:	6030      	str	r0, [r6, #0]
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f000 fba3 	bl	800c3f0 <_sbrk_r>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	d103      	bne.n	800bcb6 <sbrk_aligned+0x26>
 800bcae:	f04f 34ff 	mov.w	r4, #4294967295
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
 800bcb6:	1cc4      	adds	r4, r0, #3
 800bcb8:	f024 0403 	bic.w	r4, r4, #3
 800bcbc:	42a0      	cmp	r0, r4
 800bcbe:	d0f8      	beq.n	800bcb2 <sbrk_aligned+0x22>
 800bcc0:	1a21      	subs	r1, r4, r0
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f000 fb94 	bl	800c3f0 <_sbrk_r>
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d1f2      	bne.n	800bcb2 <sbrk_aligned+0x22>
 800bccc:	e7ef      	b.n	800bcae <sbrk_aligned+0x1e>
 800bcce:	bf00      	nop
 800bcd0:	2000069c 	.word	0x2000069c

0800bcd4 <_malloc_r>:
 800bcd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd8:	1ccd      	adds	r5, r1, #3
 800bcda:	4606      	mov	r6, r0
 800bcdc:	f025 0503 	bic.w	r5, r5, #3
 800bce0:	3508      	adds	r5, #8
 800bce2:	2d0c      	cmp	r5, #12
 800bce4:	bf38      	it	cc
 800bce6:	250c      	movcc	r5, #12
 800bce8:	2d00      	cmp	r5, #0
 800bcea:	db01      	blt.n	800bcf0 <_malloc_r+0x1c>
 800bcec:	42a9      	cmp	r1, r5
 800bcee:	d904      	bls.n	800bcfa <_malloc_r+0x26>
 800bcf0:	230c      	movs	r3, #12
 800bcf2:	6033      	str	r3, [r6, #0]
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdd0 <_malloc_r+0xfc>
 800bcfe:	f000 f869 	bl	800bdd4 <__malloc_lock>
 800bd02:	f8d8 3000 	ldr.w	r3, [r8]
 800bd06:	461c      	mov	r4, r3
 800bd08:	bb44      	cbnz	r4, 800bd5c <_malloc_r+0x88>
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7ff ffbf 	bl	800bc90 <sbrk_aligned>
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	4604      	mov	r4, r0
 800bd16:	d158      	bne.n	800bdca <_malloc_r+0xf6>
 800bd18:	f8d8 4000 	ldr.w	r4, [r8]
 800bd1c:	4627      	mov	r7, r4
 800bd1e:	2f00      	cmp	r7, #0
 800bd20:	d143      	bne.n	800bdaa <_malloc_r+0xd6>
 800bd22:	2c00      	cmp	r4, #0
 800bd24:	d04b      	beq.n	800bdbe <_malloc_r+0xea>
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	4639      	mov	r1, r7
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	eb04 0903 	add.w	r9, r4, r3
 800bd30:	f000 fb5e 	bl	800c3f0 <_sbrk_r>
 800bd34:	4581      	cmp	r9, r0
 800bd36:	d142      	bne.n	800bdbe <_malloc_r+0xea>
 800bd38:	6821      	ldr	r1, [r4, #0]
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	1a6d      	subs	r5, r5, r1
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f7ff ffa6 	bl	800bc90 <sbrk_aligned>
 800bd44:	3001      	adds	r0, #1
 800bd46:	d03a      	beq.n	800bdbe <_malloc_r+0xea>
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	442b      	add	r3, r5
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	bb62      	cbnz	r2, 800bdb0 <_malloc_r+0xdc>
 800bd56:	f8c8 7000 	str.w	r7, [r8]
 800bd5a:	e00f      	b.n	800bd7c <_malloc_r+0xa8>
 800bd5c:	6822      	ldr	r2, [r4, #0]
 800bd5e:	1b52      	subs	r2, r2, r5
 800bd60:	d420      	bmi.n	800bda4 <_malloc_r+0xd0>
 800bd62:	2a0b      	cmp	r2, #11
 800bd64:	d917      	bls.n	800bd96 <_malloc_r+0xc2>
 800bd66:	1961      	adds	r1, r4, r5
 800bd68:	42a3      	cmp	r3, r4
 800bd6a:	6025      	str	r5, [r4, #0]
 800bd6c:	bf18      	it	ne
 800bd6e:	6059      	strne	r1, [r3, #4]
 800bd70:	6863      	ldr	r3, [r4, #4]
 800bd72:	bf08      	it	eq
 800bd74:	f8c8 1000 	streq.w	r1, [r8]
 800bd78:	5162      	str	r2, [r4, r5]
 800bd7a:	604b      	str	r3, [r1, #4]
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f000 f82f 	bl	800bde0 <__malloc_unlock>
 800bd82:	f104 000b 	add.w	r0, r4, #11
 800bd86:	1d23      	adds	r3, r4, #4
 800bd88:	f020 0007 	bic.w	r0, r0, #7
 800bd8c:	1ac2      	subs	r2, r0, r3
 800bd8e:	bf1c      	itt	ne
 800bd90:	1a1b      	subne	r3, r3, r0
 800bd92:	50a3      	strne	r3, [r4, r2]
 800bd94:	e7af      	b.n	800bcf6 <_malloc_r+0x22>
 800bd96:	6862      	ldr	r2, [r4, #4]
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	bf0c      	ite	eq
 800bd9c:	f8c8 2000 	streq.w	r2, [r8]
 800bda0:	605a      	strne	r2, [r3, #4]
 800bda2:	e7eb      	b.n	800bd7c <_malloc_r+0xa8>
 800bda4:	4623      	mov	r3, r4
 800bda6:	6864      	ldr	r4, [r4, #4]
 800bda8:	e7ae      	b.n	800bd08 <_malloc_r+0x34>
 800bdaa:	463c      	mov	r4, r7
 800bdac:	687f      	ldr	r7, [r7, #4]
 800bdae:	e7b6      	b.n	800bd1e <_malloc_r+0x4a>
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	42a3      	cmp	r3, r4
 800bdb6:	d1fb      	bne.n	800bdb0 <_malloc_r+0xdc>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	6053      	str	r3, [r2, #4]
 800bdbc:	e7de      	b.n	800bd7c <_malloc_r+0xa8>
 800bdbe:	230c      	movs	r3, #12
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	6033      	str	r3, [r6, #0]
 800bdc4:	f000 f80c 	bl	800bde0 <__malloc_unlock>
 800bdc8:	e794      	b.n	800bcf4 <_malloc_r+0x20>
 800bdca:	6005      	str	r5, [r0, #0]
 800bdcc:	e7d6      	b.n	800bd7c <_malloc_r+0xa8>
 800bdce:	bf00      	nop
 800bdd0:	200006a0 	.word	0x200006a0

0800bdd4 <__malloc_lock>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	@ (800bddc <__malloc_lock+0x8>)
 800bdd6:	f7ff bf0f 	b.w	800bbf8 <__retarget_lock_acquire_recursive>
 800bdda:	bf00      	nop
 800bddc:	20000698 	.word	0x20000698

0800bde0 <__malloc_unlock>:
 800bde0:	4801      	ldr	r0, [pc, #4]	@ (800bde8 <__malloc_unlock+0x8>)
 800bde2:	f7ff bf0a 	b.w	800bbfa <__retarget_lock_release_recursive>
 800bde6:	bf00      	nop
 800bde8:	20000698 	.word	0x20000698

0800bdec <__ssputs_r>:
 800bdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf0:	461f      	mov	r7, r3
 800bdf2:	688e      	ldr	r6, [r1, #8]
 800bdf4:	4682      	mov	sl, r0
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	42be      	cmp	r6, r7
 800bdfa:	4690      	mov	r8, r2
 800bdfc:	680b      	ldr	r3, [r1, #0]
 800bdfe:	d82d      	bhi.n	800be5c <__ssputs_r+0x70>
 800be00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be08:	d026      	beq.n	800be58 <__ssputs_r+0x6c>
 800be0a:	6965      	ldr	r5, [r4, #20]
 800be0c:	6909      	ldr	r1, [r1, #16]
 800be0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be12:	eba3 0901 	sub.w	r9, r3, r1
 800be16:	1c7b      	adds	r3, r7, #1
 800be18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be1c:	444b      	add	r3, r9
 800be1e:	106d      	asrs	r5, r5, #1
 800be20:	429d      	cmp	r5, r3
 800be22:	bf38      	it	cc
 800be24:	461d      	movcc	r5, r3
 800be26:	0553      	lsls	r3, r2, #21
 800be28:	d527      	bpl.n	800be7a <__ssputs_r+0x8e>
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7ff ff52 	bl	800bcd4 <_malloc_r>
 800be30:	4606      	mov	r6, r0
 800be32:	b360      	cbz	r0, 800be8e <__ssputs_r+0xa2>
 800be34:	464a      	mov	r2, r9
 800be36:	6921      	ldr	r1, [r4, #16]
 800be38:	f000 faf8 	bl	800c42c <memcpy>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be46:	81a3      	strh	r3, [r4, #12]
 800be48:	6126      	str	r6, [r4, #16]
 800be4a:	444e      	add	r6, r9
 800be4c:	6165      	str	r5, [r4, #20]
 800be4e:	eba5 0509 	sub.w	r5, r5, r9
 800be52:	6026      	str	r6, [r4, #0]
 800be54:	463e      	mov	r6, r7
 800be56:	60a5      	str	r5, [r4, #8]
 800be58:	42be      	cmp	r6, r7
 800be5a:	d900      	bls.n	800be5e <__ssputs_r+0x72>
 800be5c:	463e      	mov	r6, r7
 800be5e:	4632      	mov	r2, r6
 800be60:	4641      	mov	r1, r8
 800be62:	6820      	ldr	r0, [r4, #0]
 800be64:	f000 faaa 	bl	800c3bc <memmove>
 800be68:	68a3      	ldr	r3, [r4, #8]
 800be6a:	2000      	movs	r0, #0
 800be6c:	1b9b      	subs	r3, r3, r6
 800be6e:	60a3      	str	r3, [r4, #8]
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	4433      	add	r3, r6
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7a:	462a      	mov	r2, r5
 800be7c:	f000 fae3 	bl	800c446 <_realloc_r>
 800be80:	4606      	mov	r6, r0
 800be82:	2800      	cmp	r0, #0
 800be84:	d1e0      	bne.n	800be48 <__ssputs_r+0x5c>
 800be86:	6921      	ldr	r1, [r4, #16]
 800be88:	4650      	mov	r0, sl
 800be8a:	f7ff feb7 	bl	800bbfc <_free_r>
 800be8e:	230c      	movs	r3, #12
 800be90:	f04f 30ff 	mov.w	r0, #4294967295
 800be94:	f8ca 3000 	str.w	r3, [sl]
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	e7e9      	b.n	800be76 <__ssputs_r+0x8a>
	...

0800bea4 <_svfiprintf_r>:
 800bea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	4698      	mov	r8, r3
 800beaa:	898b      	ldrh	r3, [r1, #12]
 800beac:	b09d      	sub	sp, #116	@ 0x74
 800beae:	4607      	mov	r7, r0
 800beb0:	061b      	lsls	r3, r3, #24
 800beb2:	460d      	mov	r5, r1
 800beb4:	4614      	mov	r4, r2
 800beb6:	d510      	bpl.n	800beda <_svfiprintf_r+0x36>
 800beb8:	690b      	ldr	r3, [r1, #16]
 800beba:	b973      	cbnz	r3, 800beda <_svfiprintf_r+0x36>
 800bebc:	2140      	movs	r1, #64	@ 0x40
 800bebe:	f7ff ff09 	bl	800bcd4 <_malloc_r>
 800bec2:	6028      	str	r0, [r5, #0]
 800bec4:	6128      	str	r0, [r5, #16]
 800bec6:	b930      	cbnz	r0, 800bed6 <_svfiprintf_r+0x32>
 800bec8:	230c      	movs	r3, #12
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	b01d      	add	sp, #116	@ 0x74
 800bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed6:	2340      	movs	r3, #64	@ 0x40
 800bed8:	616b      	str	r3, [r5, #20]
 800beda:	2300      	movs	r3, #0
 800bedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bee0:	f04f 0901 	mov.w	r9, #1
 800bee4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800c088 <_svfiprintf_r+0x1e4>
 800bee8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beea:	2320      	movs	r3, #32
 800beec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bef0:	2330      	movs	r3, #48	@ 0x30
 800bef2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bef6:	4623      	mov	r3, r4
 800bef8:	469a      	mov	sl, r3
 800befa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800befe:	b10a      	cbz	r2, 800bf04 <_svfiprintf_r+0x60>
 800bf00:	2a25      	cmp	r2, #37	@ 0x25
 800bf02:	d1f9      	bne.n	800bef8 <_svfiprintf_r+0x54>
 800bf04:	ebba 0b04 	subs.w	fp, sl, r4
 800bf08:	d00b      	beq.n	800bf22 <_svfiprintf_r+0x7e>
 800bf0a:	465b      	mov	r3, fp
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7ff ff6b 	bl	800bdec <__ssputs_r>
 800bf16:	3001      	adds	r0, #1
 800bf18:	f000 80a7 	beq.w	800c06a <_svfiprintf_r+0x1c6>
 800bf1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf1e:	445a      	add	r2, fp
 800bf20:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf22:	f89a 3000 	ldrb.w	r3, [sl]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 809f 	beq.w	800c06a <_svfiprintf_r+0x1c6>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf32:	f10a 0a01 	add.w	sl, sl, #1
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	9307      	str	r3, [sp, #28]
 800bf3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf44:	4654      	mov	r4, sl
 800bf46:	2205      	movs	r2, #5
 800bf48:	484f      	ldr	r0, [pc, #316]	@ (800c088 <_svfiprintf_r+0x1e4>)
 800bf4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4e:	f000 fa5f 	bl	800c410 <memchr>
 800bf52:	9a04      	ldr	r2, [sp, #16]
 800bf54:	b9d8      	cbnz	r0, 800bf8e <_svfiprintf_r+0xea>
 800bf56:	06d0      	lsls	r0, r2, #27
 800bf58:	bf44      	itt	mi
 800bf5a:	2320      	movmi	r3, #32
 800bf5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf60:	0711      	lsls	r1, r2, #28
 800bf62:	bf44      	itt	mi
 800bf64:	232b      	movmi	r3, #43	@ 0x2b
 800bf66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf70:	d015      	beq.n	800bf9e <_svfiprintf_r+0xfa>
 800bf72:	9a07      	ldr	r2, [sp, #28]
 800bf74:	4654      	mov	r4, sl
 800bf76:	2000      	movs	r0, #0
 800bf78:	f04f 0c0a 	mov.w	ip, #10
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf82:	3b30      	subs	r3, #48	@ 0x30
 800bf84:	2b09      	cmp	r3, #9
 800bf86:	d94b      	bls.n	800c020 <_svfiprintf_r+0x17c>
 800bf88:	b1b0      	cbz	r0, 800bfb8 <_svfiprintf_r+0x114>
 800bf8a:	9207      	str	r2, [sp, #28]
 800bf8c:	e014      	b.n	800bfb8 <_svfiprintf_r+0x114>
 800bf8e:	eba0 0308 	sub.w	r3, r0, r8
 800bf92:	46a2      	mov	sl, r4
 800bf94:	fa09 f303 	lsl.w	r3, r9, r3
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	9304      	str	r3, [sp, #16]
 800bf9c:	e7d2      	b.n	800bf44 <_svfiprintf_r+0xa0>
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	1d19      	adds	r1, r3, #4
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	9103      	str	r1, [sp, #12]
 800bfa8:	bfbb      	ittet	lt
 800bfaa:	425b      	neglt	r3, r3
 800bfac:	f042 0202 	orrlt.w	r2, r2, #2
 800bfb0:	9307      	strge	r3, [sp, #28]
 800bfb2:	9307      	strlt	r3, [sp, #28]
 800bfb4:	bfb8      	it	lt
 800bfb6:	9204      	strlt	r2, [sp, #16]
 800bfb8:	7823      	ldrb	r3, [r4, #0]
 800bfba:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfbc:	d10a      	bne.n	800bfd4 <_svfiprintf_r+0x130>
 800bfbe:	7863      	ldrb	r3, [r4, #1]
 800bfc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc2:	d132      	bne.n	800c02a <_svfiprintf_r+0x186>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	3402      	adds	r4, #2
 800bfc8:	1d1a      	adds	r2, r3, #4
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfd0:	9203      	str	r2, [sp, #12]
 800bfd2:	9305      	str	r3, [sp, #20]
 800bfd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c098 <_svfiprintf_r+0x1f4>
 800bfd8:	2203      	movs	r2, #3
 800bfda:	7821      	ldrb	r1, [r4, #0]
 800bfdc:	4650      	mov	r0, sl
 800bfde:	f000 fa17 	bl	800c410 <memchr>
 800bfe2:	b138      	cbz	r0, 800bff4 <_svfiprintf_r+0x150>
 800bfe4:	eba0 000a 	sub.w	r0, r0, sl
 800bfe8:	2240      	movs	r2, #64	@ 0x40
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	3401      	adds	r4, #1
 800bfee:	4082      	lsls	r2, r0
 800bff0:	4313      	orrs	r3, r2
 800bff2:	9304      	str	r3, [sp, #16]
 800bff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff8:	2206      	movs	r2, #6
 800bffa:	4824      	ldr	r0, [pc, #144]	@ (800c08c <_svfiprintf_r+0x1e8>)
 800bffc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c000:	f000 fa06 	bl	800c410 <memchr>
 800c004:	2800      	cmp	r0, #0
 800c006:	d036      	beq.n	800c076 <_svfiprintf_r+0x1d2>
 800c008:	4b21      	ldr	r3, [pc, #132]	@ (800c090 <_svfiprintf_r+0x1ec>)
 800c00a:	bb1b      	cbnz	r3, 800c054 <_svfiprintf_r+0x1b0>
 800c00c:	9b03      	ldr	r3, [sp, #12]
 800c00e:	3307      	adds	r3, #7
 800c010:	f023 0307 	bic.w	r3, r3, #7
 800c014:	3308      	adds	r3, #8
 800c016:	9303      	str	r3, [sp, #12]
 800c018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c01a:	4433      	add	r3, r6
 800c01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c01e:	e76a      	b.n	800bef6 <_svfiprintf_r+0x52>
 800c020:	fb0c 3202 	mla	r2, ip, r2, r3
 800c024:	460c      	mov	r4, r1
 800c026:	2001      	movs	r0, #1
 800c028:	e7a8      	b.n	800bf7c <_svfiprintf_r+0xd8>
 800c02a:	2300      	movs	r3, #0
 800c02c:	3401      	adds	r4, #1
 800c02e:	f04f 0c0a 	mov.w	ip, #10
 800c032:	4619      	mov	r1, r3
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	4620      	mov	r0, r4
 800c038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c03c:	3a30      	subs	r2, #48	@ 0x30
 800c03e:	2a09      	cmp	r2, #9
 800c040:	d903      	bls.n	800c04a <_svfiprintf_r+0x1a6>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d0c6      	beq.n	800bfd4 <_svfiprintf_r+0x130>
 800c046:	9105      	str	r1, [sp, #20]
 800c048:	e7c4      	b.n	800bfd4 <_svfiprintf_r+0x130>
 800c04a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c04e:	4604      	mov	r4, r0
 800c050:	2301      	movs	r3, #1
 800c052:	e7f0      	b.n	800c036 <_svfiprintf_r+0x192>
 800c054:	ab03      	add	r3, sp, #12
 800c056:	462a      	mov	r2, r5
 800c058:	a904      	add	r1, sp, #16
 800c05a:	4638      	mov	r0, r7
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	4b0d      	ldr	r3, [pc, #52]	@ (800c094 <_svfiprintf_r+0x1f0>)
 800c060:	f3af 8000 	nop.w
 800c064:	1c42      	adds	r2, r0, #1
 800c066:	4606      	mov	r6, r0
 800c068:	d1d6      	bne.n	800c018 <_svfiprintf_r+0x174>
 800c06a:	89ab      	ldrh	r3, [r5, #12]
 800c06c:	065b      	lsls	r3, r3, #25
 800c06e:	f53f af2d 	bmi.w	800becc <_svfiprintf_r+0x28>
 800c072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c074:	e72c      	b.n	800bed0 <_svfiprintf_r+0x2c>
 800c076:	ab03      	add	r3, sp, #12
 800c078:	462a      	mov	r2, r5
 800c07a:	a904      	add	r1, sp, #16
 800c07c:	4638      	mov	r0, r7
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4b04      	ldr	r3, [pc, #16]	@ (800c094 <_svfiprintf_r+0x1f0>)
 800c082:	f000 f87d 	bl	800c180 <_printf_i>
 800c086:	e7ed      	b.n	800c064 <_svfiprintf_r+0x1c0>
 800c088:	0800ca4c 	.word	0x0800ca4c
 800c08c:	0800ca56 	.word	0x0800ca56
 800c090:	00000000 	.word	0x00000000
 800c094:	0800bded 	.word	0x0800bded
 800c098:	0800ca52 	.word	0x0800ca52

0800c09c <_printf_common>:
 800c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a0:	4616      	mov	r6, r2
 800c0a2:	4698      	mov	r8, r3
 800c0a4:	688a      	ldr	r2, [r1, #8]
 800c0a6:	4607      	mov	r7, r0
 800c0a8:	690b      	ldr	r3, [r1, #16]
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	bfb8      	it	lt
 800c0b4:	4613      	movlt	r3, r2
 800c0b6:	6033      	str	r3, [r6, #0]
 800c0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0bc:	b10a      	cbz	r2, 800c0c2 <_printf_common+0x26>
 800c0be:	3301      	adds	r3, #1
 800c0c0:	6033      	str	r3, [r6, #0]
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	0699      	lsls	r1, r3, #26
 800c0c6:	bf42      	ittt	mi
 800c0c8:	6833      	ldrmi	r3, [r6, #0]
 800c0ca:	3302      	addmi	r3, #2
 800c0cc:	6033      	strmi	r3, [r6, #0]
 800c0ce:	6825      	ldr	r5, [r4, #0]
 800c0d0:	f015 0506 	ands.w	r5, r5, #6
 800c0d4:	d106      	bne.n	800c0e4 <_printf_common+0x48>
 800c0d6:	f104 0a19 	add.w	sl, r4, #25
 800c0da:	68e3      	ldr	r3, [r4, #12]
 800c0dc:	6832      	ldr	r2, [r6, #0]
 800c0de:	1a9b      	subs	r3, r3, r2
 800c0e0:	42ab      	cmp	r3, r5
 800c0e2:	dc2b      	bgt.n	800c13c <_printf_common+0xa0>
 800c0e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0e8:	6822      	ldr	r2, [r4, #0]
 800c0ea:	3b00      	subs	r3, #0
 800c0ec:	bf18      	it	ne
 800c0ee:	2301      	movne	r3, #1
 800c0f0:	0692      	lsls	r2, r2, #26
 800c0f2:	d430      	bmi.n	800c156 <_printf_common+0xba>
 800c0f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0f8:	4641      	mov	r1, r8
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	47c8      	blx	r9
 800c0fe:	3001      	adds	r0, #1
 800c100:	d023      	beq.n	800c14a <_printf_common+0xae>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	341a      	adds	r4, #26
 800c106:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c10a:	f003 0306 	and.w	r3, r3, #6
 800c10e:	2b04      	cmp	r3, #4
 800c110:	bf0a      	itet	eq
 800c112:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c116:	2500      	movne	r5, #0
 800c118:	6833      	ldreq	r3, [r6, #0]
 800c11a:	f04f 0600 	mov.w	r6, #0
 800c11e:	bf08      	it	eq
 800c120:	1aed      	subeq	r5, r5, r3
 800c122:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c126:	bf08      	it	eq
 800c128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c12c:	4293      	cmp	r3, r2
 800c12e:	bfc4      	itt	gt
 800c130:	1a9b      	subgt	r3, r3, r2
 800c132:	18ed      	addgt	r5, r5, r3
 800c134:	42b5      	cmp	r5, r6
 800c136:	d11a      	bne.n	800c16e <_printf_common+0xd2>
 800c138:	2000      	movs	r0, #0
 800c13a:	e008      	b.n	800c14e <_printf_common+0xb2>
 800c13c:	2301      	movs	r3, #1
 800c13e:	4652      	mov	r2, sl
 800c140:	4641      	mov	r1, r8
 800c142:	4638      	mov	r0, r7
 800c144:	47c8      	blx	r9
 800c146:	3001      	adds	r0, #1
 800c148:	d103      	bne.n	800c152 <_printf_common+0xb6>
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c152:	3501      	adds	r5, #1
 800c154:	e7c1      	b.n	800c0da <_printf_common+0x3e>
 800c156:	18e1      	adds	r1, r4, r3
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	2030      	movs	r0, #48	@ 0x30
 800c15c:	3302      	adds	r3, #2
 800c15e:	4422      	add	r2, r4
 800c160:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c16c:	e7c2      	b.n	800c0f4 <_printf_common+0x58>
 800c16e:	2301      	movs	r3, #1
 800c170:	4622      	mov	r2, r4
 800c172:	4641      	mov	r1, r8
 800c174:	4638      	mov	r0, r7
 800c176:	47c8      	blx	r9
 800c178:	3001      	adds	r0, #1
 800c17a:	d0e6      	beq.n	800c14a <_printf_common+0xae>
 800c17c:	3601      	adds	r6, #1
 800c17e:	e7d9      	b.n	800c134 <_printf_common+0x98>

0800c180 <_printf_i>:
 800c180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c184:	7e0f      	ldrb	r7, [r1, #24]
 800c186:	4691      	mov	r9, r2
 800c188:	4680      	mov	r8, r0
 800c18a:	460c      	mov	r4, r1
 800c18c:	2f78      	cmp	r7, #120	@ 0x78
 800c18e:	469a      	mov	sl, r3
 800c190:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c192:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c196:	d807      	bhi.n	800c1a8 <_printf_i+0x28>
 800c198:	2f62      	cmp	r7, #98	@ 0x62
 800c19a:	d80a      	bhi.n	800c1b2 <_printf_i+0x32>
 800c19c:	2f00      	cmp	r7, #0
 800c19e:	f000 80d1 	beq.w	800c344 <_printf_i+0x1c4>
 800c1a2:	2f58      	cmp	r7, #88	@ 0x58
 800c1a4:	f000 80b8 	beq.w	800c318 <_printf_i+0x198>
 800c1a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1b0:	e03a      	b.n	800c228 <_printf_i+0xa8>
 800c1b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1b6:	2b15      	cmp	r3, #21
 800c1b8:	d8f6      	bhi.n	800c1a8 <_printf_i+0x28>
 800c1ba:	a101      	add	r1, pc, #4	@ (adr r1, 800c1c0 <_printf_i+0x40>)
 800c1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1c0:	0800c219 	.word	0x0800c219
 800c1c4:	0800c22d 	.word	0x0800c22d
 800c1c8:	0800c1a9 	.word	0x0800c1a9
 800c1cc:	0800c1a9 	.word	0x0800c1a9
 800c1d0:	0800c1a9 	.word	0x0800c1a9
 800c1d4:	0800c1a9 	.word	0x0800c1a9
 800c1d8:	0800c22d 	.word	0x0800c22d
 800c1dc:	0800c1a9 	.word	0x0800c1a9
 800c1e0:	0800c1a9 	.word	0x0800c1a9
 800c1e4:	0800c1a9 	.word	0x0800c1a9
 800c1e8:	0800c1a9 	.word	0x0800c1a9
 800c1ec:	0800c32b 	.word	0x0800c32b
 800c1f0:	0800c257 	.word	0x0800c257
 800c1f4:	0800c2e5 	.word	0x0800c2e5
 800c1f8:	0800c1a9 	.word	0x0800c1a9
 800c1fc:	0800c1a9 	.word	0x0800c1a9
 800c200:	0800c34d 	.word	0x0800c34d
 800c204:	0800c1a9 	.word	0x0800c1a9
 800c208:	0800c257 	.word	0x0800c257
 800c20c:	0800c1a9 	.word	0x0800c1a9
 800c210:	0800c1a9 	.word	0x0800c1a9
 800c214:	0800c2ed 	.word	0x0800c2ed
 800c218:	6833      	ldr	r3, [r6, #0]
 800c21a:	1d1a      	adds	r2, r3, #4
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6032      	str	r2, [r6, #0]
 800c220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c224:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c228:	2301      	movs	r3, #1
 800c22a:	e09c      	b.n	800c366 <_printf_i+0x1e6>
 800c22c:	6833      	ldr	r3, [r6, #0]
 800c22e:	6820      	ldr	r0, [r4, #0]
 800c230:	1d19      	adds	r1, r3, #4
 800c232:	6031      	str	r1, [r6, #0]
 800c234:	0606      	lsls	r6, r0, #24
 800c236:	d501      	bpl.n	800c23c <_printf_i+0xbc>
 800c238:	681d      	ldr	r5, [r3, #0]
 800c23a:	e003      	b.n	800c244 <_printf_i+0xc4>
 800c23c:	0645      	lsls	r5, r0, #25
 800c23e:	d5fb      	bpl.n	800c238 <_printf_i+0xb8>
 800c240:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c244:	2d00      	cmp	r5, #0
 800c246:	da03      	bge.n	800c250 <_printf_i+0xd0>
 800c248:	232d      	movs	r3, #45	@ 0x2d
 800c24a:	426d      	negs	r5, r5
 800c24c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c250:	4858      	ldr	r0, [pc, #352]	@ (800c3b4 <_printf_i+0x234>)
 800c252:	230a      	movs	r3, #10
 800c254:	e011      	b.n	800c27a <_printf_i+0xfa>
 800c256:	6821      	ldr	r1, [r4, #0]
 800c258:	6833      	ldr	r3, [r6, #0]
 800c25a:	0608      	lsls	r0, r1, #24
 800c25c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c260:	d402      	bmi.n	800c268 <_printf_i+0xe8>
 800c262:	0649      	lsls	r1, r1, #25
 800c264:	bf48      	it	mi
 800c266:	b2ad      	uxthmi	r5, r5
 800c268:	2f6f      	cmp	r7, #111	@ 0x6f
 800c26a:	6033      	str	r3, [r6, #0]
 800c26c:	4851      	ldr	r0, [pc, #324]	@ (800c3b4 <_printf_i+0x234>)
 800c26e:	bf14      	ite	ne
 800c270:	230a      	movne	r3, #10
 800c272:	2308      	moveq	r3, #8
 800c274:	2100      	movs	r1, #0
 800c276:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c27a:	6866      	ldr	r6, [r4, #4]
 800c27c:	2e00      	cmp	r6, #0
 800c27e:	60a6      	str	r6, [r4, #8]
 800c280:	db05      	blt.n	800c28e <_printf_i+0x10e>
 800c282:	6821      	ldr	r1, [r4, #0]
 800c284:	432e      	orrs	r6, r5
 800c286:	f021 0104 	bic.w	r1, r1, #4
 800c28a:	6021      	str	r1, [r4, #0]
 800c28c:	d04b      	beq.n	800c326 <_printf_i+0x1a6>
 800c28e:	4616      	mov	r6, r2
 800c290:	fbb5 f1f3 	udiv	r1, r5, r3
 800c294:	fb03 5711 	mls	r7, r3, r1, r5
 800c298:	5dc7      	ldrb	r7, [r0, r7]
 800c29a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c29e:	462f      	mov	r7, r5
 800c2a0:	460d      	mov	r5, r1
 800c2a2:	42bb      	cmp	r3, r7
 800c2a4:	d9f4      	bls.n	800c290 <_printf_i+0x110>
 800c2a6:	2b08      	cmp	r3, #8
 800c2a8:	d10b      	bne.n	800c2c2 <_printf_i+0x142>
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	07df      	lsls	r7, r3, #31
 800c2ae:	d508      	bpl.n	800c2c2 <_printf_i+0x142>
 800c2b0:	6923      	ldr	r3, [r4, #16]
 800c2b2:	6861      	ldr	r1, [r4, #4]
 800c2b4:	4299      	cmp	r1, r3
 800c2b6:	bfde      	ittt	le
 800c2b8:	2330      	movle	r3, #48	@ 0x30
 800c2ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2c2:	1b92      	subs	r2, r2, r6
 800c2c4:	6122      	str	r2, [r4, #16]
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	aa03      	add	r2, sp, #12
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	f8cd a000 	str.w	sl, [sp]
 800c2d2:	f7ff fee3 	bl	800c09c <_printf_common>
 800c2d6:	3001      	adds	r0, #1
 800c2d8:	d14a      	bne.n	800c370 <_printf_i+0x1f0>
 800c2da:	f04f 30ff 	mov.w	r0, #4294967295
 800c2de:	b004      	add	sp, #16
 800c2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	f043 0320 	orr.w	r3, r3, #32
 800c2ea:	6023      	str	r3, [r4, #0]
 800c2ec:	2778      	movs	r7, #120	@ 0x78
 800c2ee:	4832      	ldr	r0, [pc, #200]	@ (800c3b8 <_printf_i+0x238>)
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2f6:	061f      	lsls	r7, r3, #24
 800c2f8:	6831      	ldr	r1, [r6, #0]
 800c2fa:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2fe:	d402      	bmi.n	800c306 <_printf_i+0x186>
 800c300:	065f      	lsls	r7, r3, #25
 800c302:	bf48      	it	mi
 800c304:	b2ad      	uxthmi	r5, r5
 800c306:	6031      	str	r1, [r6, #0]
 800c308:	07d9      	lsls	r1, r3, #31
 800c30a:	bf44      	itt	mi
 800c30c:	f043 0320 	orrmi.w	r3, r3, #32
 800c310:	6023      	strmi	r3, [r4, #0]
 800c312:	b11d      	cbz	r5, 800c31c <_printf_i+0x19c>
 800c314:	2310      	movs	r3, #16
 800c316:	e7ad      	b.n	800c274 <_printf_i+0xf4>
 800c318:	4826      	ldr	r0, [pc, #152]	@ (800c3b4 <_printf_i+0x234>)
 800c31a:	e7e9      	b.n	800c2f0 <_printf_i+0x170>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	f023 0320 	bic.w	r3, r3, #32
 800c322:	6023      	str	r3, [r4, #0]
 800c324:	e7f6      	b.n	800c314 <_printf_i+0x194>
 800c326:	4616      	mov	r6, r2
 800c328:	e7bd      	b.n	800c2a6 <_printf_i+0x126>
 800c32a:	6833      	ldr	r3, [r6, #0]
 800c32c:	6825      	ldr	r5, [r4, #0]
 800c32e:	1d18      	adds	r0, r3, #4
 800c330:	6961      	ldr	r1, [r4, #20]
 800c332:	6030      	str	r0, [r6, #0]
 800c334:	062e      	lsls	r6, r5, #24
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	d501      	bpl.n	800c33e <_printf_i+0x1be>
 800c33a:	6019      	str	r1, [r3, #0]
 800c33c:	e002      	b.n	800c344 <_printf_i+0x1c4>
 800c33e:	0668      	lsls	r0, r5, #25
 800c340:	d5fb      	bpl.n	800c33a <_printf_i+0x1ba>
 800c342:	8019      	strh	r1, [r3, #0]
 800c344:	2300      	movs	r3, #0
 800c346:	4616      	mov	r6, r2
 800c348:	6123      	str	r3, [r4, #16]
 800c34a:	e7bc      	b.n	800c2c6 <_printf_i+0x146>
 800c34c:	6833      	ldr	r3, [r6, #0]
 800c34e:	2100      	movs	r1, #0
 800c350:	1d1a      	adds	r2, r3, #4
 800c352:	6032      	str	r2, [r6, #0]
 800c354:	681e      	ldr	r6, [r3, #0]
 800c356:	6862      	ldr	r2, [r4, #4]
 800c358:	4630      	mov	r0, r6
 800c35a:	f000 f859 	bl	800c410 <memchr>
 800c35e:	b108      	cbz	r0, 800c364 <_printf_i+0x1e4>
 800c360:	1b80      	subs	r0, r0, r6
 800c362:	6060      	str	r0, [r4, #4]
 800c364:	6863      	ldr	r3, [r4, #4]
 800c366:	6123      	str	r3, [r4, #16]
 800c368:	2300      	movs	r3, #0
 800c36a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c36e:	e7aa      	b.n	800c2c6 <_printf_i+0x146>
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	4632      	mov	r2, r6
 800c374:	4649      	mov	r1, r9
 800c376:	4640      	mov	r0, r8
 800c378:	47d0      	blx	sl
 800c37a:	3001      	adds	r0, #1
 800c37c:	d0ad      	beq.n	800c2da <_printf_i+0x15a>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	079b      	lsls	r3, r3, #30
 800c382:	d413      	bmi.n	800c3ac <_printf_i+0x22c>
 800c384:	68e0      	ldr	r0, [r4, #12]
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	4298      	cmp	r0, r3
 800c38a:	bfb8      	it	lt
 800c38c:	4618      	movlt	r0, r3
 800c38e:	e7a6      	b.n	800c2de <_printf_i+0x15e>
 800c390:	2301      	movs	r3, #1
 800c392:	4632      	mov	r2, r6
 800c394:	4649      	mov	r1, r9
 800c396:	4640      	mov	r0, r8
 800c398:	47d0      	blx	sl
 800c39a:	3001      	adds	r0, #1
 800c39c:	d09d      	beq.n	800c2da <_printf_i+0x15a>
 800c39e:	3501      	adds	r5, #1
 800c3a0:	68e3      	ldr	r3, [r4, #12]
 800c3a2:	9903      	ldr	r1, [sp, #12]
 800c3a4:	1a5b      	subs	r3, r3, r1
 800c3a6:	42ab      	cmp	r3, r5
 800c3a8:	dcf2      	bgt.n	800c390 <_printf_i+0x210>
 800c3aa:	e7eb      	b.n	800c384 <_printf_i+0x204>
 800c3ac:	2500      	movs	r5, #0
 800c3ae:	f104 0619 	add.w	r6, r4, #25
 800c3b2:	e7f5      	b.n	800c3a0 <_printf_i+0x220>
 800c3b4:	0800ca5d 	.word	0x0800ca5d
 800c3b8:	0800ca6e 	.word	0x0800ca6e

0800c3bc <memmove>:
 800c3bc:	4288      	cmp	r0, r1
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	eb01 0402 	add.w	r4, r1, r2
 800c3c4:	d902      	bls.n	800c3cc <memmove+0x10>
 800c3c6:	4284      	cmp	r4, r0
 800c3c8:	4623      	mov	r3, r4
 800c3ca:	d807      	bhi.n	800c3dc <memmove+0x20>
 800c3cc:	1e43      	subs	r3, r0, #1
 800c3ce:	42a1      	cmp	r1, r4
 800c3d0:	d008      	beq.n	800c3e4 <memmove+0x28>
 800c3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3da:	e7f8      	b.n	800c3ce <memmove+0x12>
 800c3dc:	4402      	add	r2, r0
 800c3de:	4601      	mov	r1, r0
 800c3e0:	428a      	cmp	r2, r1
 800c3e2:	d100      	bne.n	800c3e6 <memmove+0x2a>
 800c3e4:	bd10      	pop	{r4, pc}
 800c3e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ee:	e7f7      	b.n	800c3e0 <memmove+0x24>

0800c3f0 <_sbrk_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	4d05      	ldr	r5, [pc, #20]	@ (800c40c <_sbrk_r+0x1c>)
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	4608      	mov	r0, r1
 800c3fa:	602b      	str	r3, [r5, #0]
 800c3fc:	f7f6 f94c 	bl	8002698 <_sbrk>
 800c400:	1c43      	adds	r3, r0, #1
 800c402:	d102      	bne.n	800c40a <_sbrk_r+0x1a>
 800c404:	682b      	ldr	r3, [r5, #0]
 800c406:	b103      	cbz	r3, 800c40a <_sbrk_r+0x1a>
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	20000694 	.word	0x20000694

0800c410 <memchr>:
 800c410:	b2c9      	uxtb	r1, r1
 800c412:	4603      	mov	r3, r0
 800c414:	4402      	add	r2, r0
 800c416:	b510      	push	{r4, lr}
 800c418:	4293      	cmp	r3, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	d101      	bne.n	800c422 <memchr+0x12>
 800c41e:	2000      	movs	r0, #0
 800c420:	e003      	b.n	800c42a <memchr+0x1a>
 800c422:	7804      	ldrb	r4, [r0, #0]
 800c424:	3301      	adds	r3, #1
 800c426:	428c      	cmp	r4, r1
 800c428:	d1f6      	bne.n	800c418 <memchr+0x8>
 800c42a:	bd10      	pop	{r4, pc}

0800c42c <memcpy>:
 800c42c:	440a      	add	r2, r1
 800c42e:	1e43      	subs	r3, r0, #1
 800c430:	4291      	cmp	r1, r2
 800c432:	d100      	bne.n	800c436 <memcpy+0xa>
 800c434:	4770      	bx	lr
 800c436:	b510      	push	{r4, lr}
 800c438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c43c:	4291      	cmp	r1, r2
 800c43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c442:	d1f9      	bne.n	800c438 <memcpy+0xc>
 800c444:	bd10      	pop	{r4, pc}

0800c446 <_realloc_r>:
 800c446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44a:	4607      	mov	r7, r0
 800c44c:	4614      	mov	r4, r2
 800c44e:	460d      	mov	r5, r1
 800c450:	b921      	cbnz	r1, 800c45c <_realloc_r+0x16>
 800c452:	4611      	mov	r1, r2
 800c454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c458:	f7ff bc3c 	b.w	800bcd4 <_malloc_r>
 800c45c:	b92a      	cbnz	r2, 800c46a <_realloc_r+0x24>
 800c45e:	4625      	mov	r5, r4
 800c460:	f7ff fbcc 	bl	800bbfc <_free_r>
 800c464:	4628      	mov	r0, r5
 800c466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46a:	f000 f81a 	bl	800c4a2 <_malloc_usable_size_r>
 800c46e:	4284      	cmp	r4, r0
 800c470:	4606      	mov	r6, r0
 800c472:	d802      	bhi.n	800c47a <_realloc_r+0x34>
 800c474:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c478:	d8f4      	bhi.n	800c464 <_realloc_r+0x1e>
 800c47a:	4621      	mov	r1, r4
 800c47c:	4638      	mov	r0, r7
 800c47e:	f7ff fc29 	bl	800bcd4 <_malloc_r>
 800c482:	4680      	mov	r8, r0
 800c484:	b908      	cbnz	r0, 800c48a <_realloc_r+0x44>
 800c486:	4645      	mov	r5, r8
 800c488:	e7ec      	b.n	800c464 <_realloc_r+0x1e>
 800c48a:	42b4      	cmp	r4, r6
 800c48c:	4622      	mov	r2, r4
 800c48e:	4629      	mov	r1, r5
 800c490:	bf28      	it	cs
 800c492:	4632      	movcs	r2, r6
 800c494:	f7ff ffca 	bl	800c42c <memcpy>
 800c498:	4629      	mov	r1, r5
 800c49a:	4638      	mov	r0, r7
 800c49c:	f7ff fbae 	bl	800bbfc <_free_r>
 800c4a0:	e7f1      	b.n	800c486 <_realloc_r+0x40>

0800c4a2 <_malloc_usable_size_r>:
 800c4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4a6:	1f18      	subs	r0, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	bfbc      	itt	lt
 800c4ac:	580b      	ldrlt	r3, [r1, r0]
 800c4ae:	18c0      	addlt	r0, r0, r3
 800c4b0:	4770      	bx	lr

0800c4b2 <atan2f>:
 800c4b2:	f000 b84f 	b.w	800c554 <__ieee754_atan2f>
	...

0800c4b8 <sqrtf>:
 800c4b8:	b508      	push	{r3, lr}
 800c4ba:	ed2d 8b02 	vpush	{d8}
 800c4be:	eeb0 8a40 	vmov.f32	s16, s0
 800c4c2:	f000 f843 	bl	800c54c <__ieee754_sqrtf>
 800c4c6:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ce:	d60c      	bvs.n	800c4ea <sqrtf+0x32>
 800c4d0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c4f0 <sqrtf+0x38>
 800c4d4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4dc:	d505      	bpl.n	800c4ea <sqrtf+0x32>
 800c4de:	f7ff fb61 	bl	800bba4 <__errno>
 800c4e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c4e6:	2321      	movs	r3, #33	@ 0x21
 800c4e8:	6003      	str	r3, [r0, #0]
 800c4ea:	ecbd 8b02 	vpop	{d8}
 800c4ee:	bd08      	pop	{r3, pc}
 800c4f0:	00000000 	.word	0x00000000

0800c4f4 <lroundf>:
 800c4f4:	ee10 1a10 	vmov	r1, s0
 800c4f8:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800c4fc:	2900      	cmp	r1, #0
 800c4fe:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800c502:	bfac      	ite	ge
 800c504:	2001      	movge	r0, #1
 800c506:	f04f 30ff 	movlt.w	r0, #4294967295
 800c50a:	2a1e      	cmp	r2, #30
 800c50c:	dc19      	bgt.n	800c542 <lroundf+0x4e>
 800c50e:	2a00      	cmp	r2, #0
 800c510:	da03      	bge.n	800c51a <lroundf+0x26>
 800c512:	3201      	adds	r2, #1
 800c514:	bf18      	it	ne
 800c516:	2000      	movne	r0, #0
 800c518:	4770      	bx	lr
 800c51a:	2a16      	cmp	r2, #22
 800c51c:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800c520:	bfd8      	it	le
 800c522:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800c526:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800c52a:	bfcd      	iteet	gt
 800c52c:	3b96      	subgt	r3, #150	@ 0x96
 800c52e:	4113      	asrle	r3, r2
 800c530:	f1c2 0217 	rsble	r2, r2, #23
 800c534:	fa01 f303 	lslgt.w	r3, r1, r3
 800c538:	bfdc      	itt	le
 800c53a:	185b      	addle	r3, r3, r1
 800c53c:	40d3      	lsrle	r3, r2
 800c53e:	4358      	muls	r0, r3
 800c540:	4770      	bx	lr
 800c542:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c546:	ee17 0a90 	vmov	r0, s15
 800c54a:	4770      	bx	lr

0800c54c <__ieee754_sqrtf>:
 800c54c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c550:	4770      	bx	lr
	...

0800c554 <__ieee754_atan2f>:
 800c554:	ee10 2a90 	vmov	r2, s1
 800c558:	eef0 7a40 	vmov.f32	s15, s0
 800c55c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c560:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c564:	b510      	push	{r4, lr}
 800c566:	d806      	bhi.n	800c576 <__ieee754_atan2f+0x22>
 800c568:	ee10 0a10 	vmov	r0, s0
 800c56c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c570:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c574:	d904      	bls.n	800c580 <__ieee754_atan2f+0x2c>
 800c576:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c57a:	eeb0 0a67 	vmov.f32	s0, s15
 800c57e:	bd10      	pop	{r4, pc}
 800c580:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c584:	d103      	bne.n	800c58e <__ieee754_atan2f+0x3a>
 800c586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c58a:	f000 b881 	b.w	800c690 <atanf>
 800c58e:	1794      	asrs	r4, r2, #30
 800c590:	f004 0402 	and.w	r4, r4, #2
 800c594:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c598:	b93b      	cbnz	r3, 800c5aa <__ieee754_atan2f+0x56>
 800c59a:	2c02      	cmp	r4, #2
 800c59c:	d05c      	beq.n	800c658 <__ieee754_atan2f+0x104>
 800c59e:	2c03      	cmp	r4, #3
 800c5a0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c66c <__ieee754_atan2f+0x118>
 800c5a4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c5a8:	e7e7      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c5aa:	b939      	cbnz	r1, 800c5bc <__ieee754_atan2f+0x68>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800c670 <__ieee754_atan2f+0x11c>
 800c5b2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c674 <__ieee754_atan2f+0x120>
 800c5b6:	fe67 7a27 	vselge.f32	s15, s14, s15
 800c5ba:	e7de      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c5bc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c5c0:	d110      	bne.n	800c5e4 <__ieee754_atan2f+0x90>
 800c5c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5ca:	d107      	bne.n	800c5dc <__ieee754_atan2f+0x88>
 800c5cc:	2c02      	cmp	r4, #2
 800c5ce:	d846      	bhi.n	800c65e <__ieee754_atan2f+0x10a>
 800c5d0:	4b29      	ldr	r3, [pc, #164]	@ (800c678 <__ieee754_atan2f+0x124>)
 800c5d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c5d6:	edd3 7a00 	vldr	s15, [r3]
 800c5da:	e7ce      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c5dc:	2c02      	cmp	r4, #2
 800c5de:	d841      	bhi.n	800c664 <__ieee754_atan2f+0x110>
 800c5e0:	4b26      	ldr	r3, [pc, #152]	@ (800c67c <__ieee754_atan2f+0x128>)
 800c5e2:	e7f6      	b.n	800c5d2 <__ieee754_atan2f+0x7e>
 800c5e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5e8:	d0e0      	beq.n	800c5ac <__ieee754_atan2f+0x58>
 800c5ea:	1a5b      	subs	r3, r3, r1
 800c5ec:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c5f0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c5f4:	da1a      	bge.n	800c62c <__ieee754_atan2f+0xd8>
 800c5f6:	2a00      	cmp	r2, #0
 800c5f8:	da01      	bge.n	800c5fe <__ieee754_atan2f+0xaa>
 800c5fa:	313c      	adds	r1, #60	@ 0x3c
 800c5fc:	db19      	blt.n	800c632 <__ieee754_atan2f+0xde>
 800c5fe:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c602:	f000 f919 	bl	800c838 <fabsf>
 800c606:	f000 f843 	bl	800c690 <atanf>
 800c60a:	eef0 7a40 	vmov.f32	s15, s0
 800c60e:	2c01      	cmp	r4, #1
 800c610:	d012      	beq.n	800c638 <__ieee754_atan2f+0xe4>
 800c612:	2c02      	cmp	r4, #2
 800c614:	d017      	beq.n	800c646 <__ieee754_atan2f+0xf2>
 800c616:	2c00      	cmp	r4, #0
 800c618:	d0af      	beq.n	800c57a <__ieee754_atan2f+0x26>
 800c61a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c680 <__ieee754_atan2f+0x12c>
 800c61e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c622:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c684 <__ieee754_atan2f+0x130>
 800c626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c62a:	e7a6      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c62c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c674 <__ieee754_atan2f+0x120>
 800c630:	e7ed      	b.n	800c60e <__ieee754_atan2f+0xba>
 800c632:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c688 <__ieee754_atan2f+0x134>
 800c636:	e7ea      	b.n	800c60e <__ieee754_atan2f+0xba>
 800c638:	ee17 3a90 	vmov	r3, s15
 800c63c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c640:	ee07 3a90 	vmov	s15, r3
 800c644:	e799      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c646:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c680 <__ieee754_atan2f+0x12c>
 800c64a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c64e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c684 <__ieee754_atan2f+0x130>
 800c652:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c656:	e790      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c658:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c684 <__ieee754_atan2f+0x130>
 800c65c:	e78d      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c65e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c68c <__ieee754_atan2f+0x138>
 800c662:	e78a      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c664:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c688 <__ieee754_atan2f+0x134>
 800c668:	e787      	b.n	800c57a <__ieee754_atan2f+0x26>
 800c66a:	bf00      	nop
 800c66c:	c0490fdb 	.word	0xc0490fdb
 800c670:	bfc90fdb 	.word	0xbfc90fdb
 800c674:	3fc90fdb 	.word	0x3fc90fdb
 800c678:	0800ca8c 	.word	0x0800ca8c
 800c67c:	0800ca80 	.word	0x0800ca80
 800c680:	33bbbd2e 	.word	0x33bbbd2e
 800c684:	40490fdb 	.word	0x40490fdb
 800c688:	00000000 	.word	0x00000000
 800c68c:	3f490fdb 	.word	0x3f490fdb

0800c690 <atanf>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	ee10 5a10 	vmov	r5, s0
 800c696:	eef0 7a40 	vmov.f32	s15, s0
 800c69a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c69e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c6a2:	d30f      	bcc.n	800c6c4 <atanf+0x34>
 800c6a4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c6a8:	d904      	bls.n	800c6b4 <atanf+0x24>
 800c6aa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c6ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c7ec <atanf+0x15c>
 800c6ba:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c7f0 <atanf+0x160>
 800c6be:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800c6c2:	e7f4      	b.n	800c6ae <atanf+0x1e>
 800c6c4:	4b4b      	ldr	r3, [pc, #300]	@ (800c7f4 <atanf+0x164>)
 800c6c6:	429c      	cmp	r4, r3
 800c6c8:	d810      	bhi.n	800c6ec <atanf+0x5c>
 800c6ca:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c6ce:	d20a      	bcs.n	800c6e6 <atanf+0x56>
 800c6d0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c7f8 <atanf+0x168>
 800c6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6d8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c6dc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e4:	dce3      	bgt.n	800c6ae <atanf+0x1e>
 800c6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ea:	e013      	b.n	800c714 <atanf+0x84>
 800c6ec:	f000 f8a4 	bl	800c838 <fabsf>
 800c6f0:	4b42      	ldr	r3, [pc, #264]	@ (800c7fc <atanf+0x16c>)
 800c6f2:	429c      	cmp	r4, r3
 800c6f4:	d84f      	bhi.n	800c796 <atanf+0x106>
 800c6f6:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c6fa:	429c      	cmp	r4, r3
 800c6fc:	d841      	bhi.n	800c782 <atanf+0xf2>
 800c6fe:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c702:	2300      	movs	r3, #0
 800c704:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c708:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c70c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c710:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c714:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c800 <atanf+0x170>
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c804 <atanf+0x174>
 800c71e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c808 <atanf+0x178>
 800c722:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c726:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c72a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c72e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800c80c <atanf+0x17c>
 800c732:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c736:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800c810 <atanf+0x180>
 800c73a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c73e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800c814 <atanf+0x184>
 800c742:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c746:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c818 <atanf+0x188>
 800c74a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c74e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c81c <atanf+0x18c>
 800c752:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c756:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c820 <atanf+0x190>
 800c75a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c75e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800c824 <atanf+0x194>
 800c762:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c766:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c828 <atanf+0x198>
 800c76a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c76e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c772:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c77a:	d121      	bne.n	800c7c0 <atanf+0x130>
 800c77c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c780:	e795      	b.n	800c6ae <atanf+0x1e>
 800c782:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c786:	2301      	movs	r3, #1
 800c788:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c78c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c790:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c794:	e7be      	b.n	800c714 <atanf+0x84>
 800c796:	4b25      	ldr	r3, [pc, #148]	@ (800c82c <atanf+0x19c>)
 800c798:	429c      	cmp	r4, r3
 800c79a:	d80b      	bhi.n	800c7b4 <atanf+0x124>
 800c79c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7a6:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c7aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c7ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7b2:	e7af      	b.n	800c714 <atanf+0x84>
 800c7b4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c7be:	e7a9      	b.n	800c714 <atanf+0x84>
 800c7c0:	4a1b      	ldr	r2, [pc, #108]	@ (800c830 <atanf+0x1a0>)
 800c7c2:	2d00      	cmp	r5, #0
 800c7c4:	491b      	ldr	r1, [pc, #108]	@ (800c834 <atanf+0x1a4>)
 800c7c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c7ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c7ce:	edd3 6a00 	vldr	s13, [r3]
 800c7d2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c7d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7da:	edd2 7a00 	vldr	s15, [r2]
 800c7de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7e2:	bfb8      	it	lt
 800c7e4:	eef1 7a67 	vneglt.f32	s15, s15
 800c7e8:	e761      	b.n	800c6ae <atanf+0x1e>
 800c7ea:	bf00      	nop
 800c7ec:	bfc90fdb 	.word	0xbfc90fdb
 800c7f0:	3fc90fdb 	.word	0x3fc90fdb
 800c7f4:	3edfffff 	.word	0x3edfffff
 800c7f8:	7149f2ca 	.word	0x7149f2ca
 800c7fc:	3f97ffff 	.word	0x3f97ffff
 800c800:	3c8569d7 	.word	0x3c8569d7
 800c804:	3d4bda59 	.word	0x3d4bda59
 800c808:	bd6ef16b 	.word	0xbd6ef16b
 800c80c:	3d886b35 	.word	0x3d886b35
 800c810:	3dba2e6e 	.word	0x3dba2e6e
 800c814:	3e124925 	.word	0x3e124925
 800c818:	3eaaaaab 	.word	0x3eaaaaab
 800c81c:	bd15a221 	.word	0xbd15a221
 800c820:	bd9d8795 	.word	0xbd9d8795
 800c824:	bde38e38 	.word	0xbde38e38
 800c828:	be4ccccd 	.word	0xbe4ccccd
 800c82c:	401bffff 	.word	0x401bffff
 800c830:	0800caa8 	.word	0x0800caa8
 800c834:	0800ca98 	.word	0x0800ca98

0800c838 <fabsf>:
 800c838:	ee10 3a10 	vmov	r3, s0
 800c83c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c840:	ee00 3a10 	vmov	s0, r3
 800c844:	4770      	bx	lr
	...

0800c848 <_init>:
 800c848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c84a:	bf00      	nop
 800c84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84e:	bc08      	pop	{r3}
 800c850:	469e      	mov	lr, r3
 800c852:	4770      	bx	lr

0800c854 <_fini>:
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	bf00      	nop
 800c858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85a:	bc08      	pop	{r3}
 800c85c:	469e      	mov	lr, r3
 800c85e:	4770      	bx	lr
