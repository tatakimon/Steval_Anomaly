
spi_IIS3DWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a564  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000163  0800a79c  0800a79c  0000b79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a900  0800a900  0000b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a908  0800a908  0000b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a90c  0800a90c  0000b90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800a910  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b4  2000005c  0800a96c  0000c05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000610  0800a96c  0000c610  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b7c2  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a3e  00000000  00000000  00027854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012f0  00000000  00000000  0002a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ecd  00000000  00000000  0002b588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ab09  00000000  00000000  0002c455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a775  00000000  00000000  00066f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00183736  00000000  00000000  000816d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00204e09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005520  00000000  00000000  00204e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  0020a36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a784 	.word	0x0800a784

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800a784 	.word	0x0800a784

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <iis3dwb_write>:

/* ---- IIS3DWB minimal driver ---- */


static inline HAL_StatusTypeDef iis3dwb_write(uint8_t reg, const uint8_t *data, uint16_t len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef st;
    DWB_CS_LOW();
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061a:	4812      	ldr	r0, [pc, #72]	@ (8000664 <iis3dwb_write+0x60>)
 800061c:	f002 fe24 	bl	8003268 <HAL_GPIO_WritePin>
    st  = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8000620:	1df9      	adds	r1, r7, #7
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	2201      	movs	r2, #1
 8000626:	4810      	ldr	r0, [pc, #64]	@ (8000668 <iis3dwb_write+0x64>)
 8000628:	f007 fdf4 	bl	8008214 <HAL_SPI_Transmit>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
    if (st == HAL_OK && len) st = HAL_SPI_Transmit(&hspi2, (uint8_t*)data, len, 100);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10a      	bne.n	800064c <iis3dwb_write+0x48>
 8000636:	88bb      	ldrh	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <iis3dwb_write+0x48>
 800063c:	88ba      	ldrh	r2, [r7, #4]
 800063e:	2364      	movs	r3, #100	@ 0x64
 8000640:	6839      	ldr	r1, [r7, #0]
 8000642:	4809      	ldr	r0, [pc, #36]	@ (8000668 <iis3dwb_write+0x64>)
 8000644:	f007 fde6 	bl	8008214 <HAL_SPI_Transmit>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
    DWB_CS_HIGH();
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000652:	4804      	ldr	r0, [pc, #16]	@ (8000664 <iis3dwb_write+0x60>)
 8000654:	f002 fe08 	bl	8003268 <HAL_GPIO_WritePin>
    return st;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	42021400 	.word	0x42021400
 8000668:	200002ac 	.word	0x200002ac

0800066c <iis3dwb_read>:

static inline HAL_StatusTypeDef iis3dwb_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef st;
    uint8_t cmd = reg | 0x80u;   // READ
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73bb      	strb	r3, [r7, #14]
    DWB_CS_LOW();
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800068c:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <iis3dwb_read+0x6c>)
 800068e:	f002 fdeb 	bl	8003268 <HAL_GPIO_WritePin>
    st  = HAL_SPI_Transmit(&hspi2, &cmd, 1, 100);
 8000692:	f107 010e 	add.w	r1, r7, #14
 8000696:	2364      	movs	r3, #100	@ 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	4810      	ldr	r0, [pc, #64]	@ (80006dc <iis3dwb_read+0x70>)
 800069c:	f007 fdba 	bl	8008214 <HAL_SPI_Transmit>
 80006a0:	4603      	mov	r3, r0
 80006a2:	73fb      	strb	r3, [r7, #15]
    if (st == HAL_OK && len) st = HAL_SPI_Receive (&hspi2, data, len, 100);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10a      	bne.n	80006c0 <iis3dwb_read+0x54>
 80006aa:	88bb      	ldrh	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d007      	beq.n	80006c0 <iis3dwb_read+0x54>
 80006b0:	88ba      	ldrh	r2, [r7, #4]
 80006b2:	2364      	movs	r3, #100	@ 0x64
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4809      	ldr	r0, [pc, #36]	@ (80006dc <iis3dwb_read+0x70>)
 80006b8:	f007 ffc0 	bl	800863c <HAL_SPI_Receive>
 80006bc:	4603      	mov	r3, r0
 80006be:	73fb      	strb	r3, [r7, #15]
    DWB_CS_HIGH();
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <iis3dwb_read+0x6c>)
 80006c8:	f002 fdce 	bl	8003268 <HAL_GPIO_WritePin>
    return st;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	42021400 	.word	0x42021400
 80006dc:	200002ac 	.word	0x200002ac

080006e0 <iis3dwb_init>:

static void iis3dwb_init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
    /* CTRL1_XL: enable/ODR (0xA0 as you used) */
    uint8_t ctrl1 = 0xA0;  // ODR + FS=±2 g, LPF2=0  (matches your working setup)
 80006e6:	23a0      	movs	r3, #160	@ 0xa0
 80006e8:	71fb      	strb	r3, [r7, #7]
    iis3dwb_write(REG_CTRL1_XL, &ctrl1, 1);
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	2201      	movs	r2, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	2010      	movs	r0, #16
 80006f2:	f7ff ff87 	bl	8000604 <iis3dwb_write>

    /* Write CTRL3_C and CTRL4_C in one burst starting at 0x12 */
    uint8_t c12_13[2] = { CTRL3_C_BDU | CTRL3_C_IF_INC, CTRL4_C_I2C_DIS };
 80006f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80006fa:	80bb      	strh	r3, [r7, #4]
    iis3dwb_write(REG_CTRL3_C, c12_13, sizeof c12_13);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2202      	movs	r2, #2
 8000700:	4619      	mov	r1, r3
 8000702:	2012      	movs	r0, #18
 8000704:	f7ff ff7e 	bl	8000604 <iis3dwb_write>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0a6      	sub	sp, #152	@ 0x98
 8000714:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f001 fbc1 	bl	8001e9c <HAL_Init>

  /* Configure the System Power */
  //SystemPower_Config();

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f98f 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 faf1 	bl	8000d04 <MX_GPIO_Init>
  //MX_ADC1_Init();
  //MX_ADF1_Init();
  //MX_MDF1_Init();
  //MX_DAC1_Init();
  //MX_I2C1_Init();
  MX_I2C2_Init();
 8000722:	f000 f9f1 	bl	8000b08 <MX_I2C2_Init>

  //------------------------------------------TEMP-----------------------------------------

  /* ---- I2C2 / STTS22H init ---- */
  /* ---- STTS22H over I2C2 (direct HAL, no helpers) ---- */
  uint8_t stts_addr = (0x3C << 1);   // try 0x3C first
 8000726:	2378      	movs	r3, #120	@ 0x78
 8000728:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  HAL_StatusTypeDef ret;
  uint8_t who_i2c = 0, ctrl = 0, v;
 800072c:	2300      	movs	r3, #0
 800072e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000732:	2300      	movs	r3, #0
 8000734:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

  /* WHO_AM_I (0x01) -> expect 0xA0 */
  ret = HAL_I2C_Mem_Read(&hi2c2, stts_addr, 0x01, I2C_MEMADD_SIZE_8BIT, &who_i2c, 1, 100);
 8000738:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800073c:	b299      	uxth	r1, r3
 800073e:	2364      	movs	r3, #100	@ 0x64
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	2301      	movs	r3, #1
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2301      	movs	r3, #1
 800074e:	2201      	movs	r2, #1
 8000750:	48b1      	ldr	r0, [pc, #708]	@ (8000a18 <main+0x308>)
 8000752:	f002 ff8d 	bl	8003670 <HAL_I2C_Mem_Read>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

  /* If NACK or not 0xA0, try other common addresses */
  if (ret != HAL_OK || who_i2c != 0xA0)
 800075c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000760:	2b00      	cmp	r3, #0
 8000762:	d103      	bne.n	800076c <main+0x5c>
 8000764:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000768:	2ba0      	cmp	r3, #160	@ 0xa0
 800076a:	d039      	beq.n	80007e0 <main+0xd0>
  {
      uint8_t tries[] = { (0x38<<1), (0x3E<<1), (0x3F<<1) };
 800076c:	4aab      	ldr	r2, [pc, #684]	@ (8000a1c <main+0x30c>)
 800076e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	4611      	mov	r1, r2
 8000776:	8019      	strh	r1, [r3, #0]
 8000778:	3302      	adds	r3, #2
 800077a:	0c12      	lsrs	r2, r2, #16
 800077c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 3; ++i)
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000784:	e026      	b.n	80007d4 <main+0xc4>
      {
          stts_addr = tries[i];
 8000786:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800078a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
          ret = HAL_I2C_Mem_Read(&hi2c2, stts_addr, 0x01, I2C_MEMADD_SIZE_8BIT, &who_i2c, 1, 100);
 8000796:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800079a:	b299      	uxth	r1, r3
 800079c:	2364      	movs	r3, #100	@ 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	2201      	movs	r2, #1
 80007ae:	489a      	ldr	r0, [pc, #616]	@ (8000a18 <main+0x308>)
 80007b0:	f002 ff5e 	bl	8003670 <HAL_I2C_Mem_Read>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
          if (ret == HAL_OK && who_i2c == 0xA0) break;
 80007ba:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d103      	bne.n	80007ca <main+0xba>
 80007c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80007c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80007c8:	d009      	beq.n	80007de <main+0xce>
      for (int i = 0; i < 3; ++i)
 80007ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80007ce:	3301      	adds	r3, #1
 80007d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80007d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80007d8:	2b02      	cmp	r3, #2
 80007da:	ddd4      	ble.n	8000786 <main+0x76>
 80007dc:	e000      	b.n	80007e0 <main+0xd0>
          if (ret == HAL_OK && who_i2c == 0xA0) break;
 80007de:	bf00      	nop
      }
  }

  /* Enable freerun: BDU=1 (bit6), IF_ADD_INC=1 (bit3), FREERUN=1 (bit2) => 0x4C */
  v = 0x4C;
 80007e0:	234c      	movs	r3, #76	@ 0x4c
 80007e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  HAL_I2C_Mem_Write(&hi2c2, stts_addr, 0x04, I2C_MEMADD_SIZE_8BIT, &v, 1, 100);
 80007e6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80007ea:	b299      	uxth	r1, r3
 80007ec:	2364      	movs	r3, #100	@ 0x64
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2301      	movs	r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	2204      	movs	r2, #4
 80007fe:	4886      	ldr	r0, [pc, #536]	@ (8000a18 <main+0x308>)
 8000800:	f002 fe22 	bl	8003448 <HAL_I2C_Mem_Write>

  /* Read back CTRL (0x04) to confirm -> expect 0x4C */
  HAL_I2C_Mem_Read(&hi2c2, stts_addr, 0x04, I2C_MEMADD_SIZE_8BIT, &ctrl, 1, 100);
 8000804:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000808:	b299      	uxth	r1, r3
 800080a:	2364      	movs	r3, #100	@ 0x64
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	2301      	movs	r3, #1
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	2204      	movs	r2, #4
 800081c:	487e      	ldr	r0, [pc, #504]	@ (8000a18 <main+0x308>)
 800081e:	f002 ff27 	bl	8003670 <HAL_I2C_Mem_Read>

  HAL_Delay(10);
 8000822:	200a      	movs	r0, #10
 8000824:	f001 fc00 	bl	8002028 <HAL_Delay>
  //MX_ICACHE_Init();
  //MX_RTC_Init();
  //MX_SAI1_Init();
  //MX_SDMMC1_SD_Init();
  //MX_SPI1_Init();
  MX_SPI2_Init();
 8000828:	f000 f9ae 	bl	8000b88 <MX_SPI2_Init>
  //MX_SPI3_Init();
  //MX_TAMP_RTC_Init();
  //MX_TIM3_Init();
  MX_USART2_UART_Init();
 800082c:	f000 fa1c 	bl	8000c68 <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */
  const char *hello = "VCP alive\r\n";
 8000830:	4b7b      	ldr	r3, [pc, #492]	@ (8000a20 <main+0x310>)
 8000832:	677b      	str	r3, [r7, #116]	@ 0x74
  HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), 100);
 8000834:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000836:	f7ff fd1f 	bl	8000278 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	2364      	movs	r3, #100	@ 0x64
 8000840:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000842:	4878      	ldr	r0, [pc, #480]	@ (8000a24 <main+0x314>)
 8000844:	f008 fd76 	bl	8009334 <HAL_UART_Transmit>


	uint8_t who;
	(void)who;

	DWB_CS_HIGH();            // optional, but nice to assert idle
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800084e:	4876      	ldr	r0, [pc, #472]	@ (8000a28 <main+0x318>)
 8000850:	f002 fd0a 	bl	8003268 <HAL_GPIO_WritePin>
	iis3dwb_init();
 8000854:	f7ff ff44 	bl	80006e0 <iis3dwb_init>

	#ifdef DEBUG
	iis3dwb_read(REG_WHO_AM_I, &who, 1);   // expect 0x7B
 8000858:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	200f      	movs	r0, #15
 8000862:	f7ff ff03 	bl	800066c <iis3dwb_read>
	#endif

	HAL_Delay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f001 fbde 	bl	8002028 <HAL_Delay>
  while (1)
  {/* USER CODE END WHILE */
	  /* USER CODE BEGIN 3 */

	  uint8_t st;
	  if (iis3dwb_read(REG_STATUS, &st, 1) == HAL_OK && (st & 0x01))
 800086c:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	201e      	movs	r0, #30
 8000876:	f7ff fef9 	bl	800066c <iis3dwb_read>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	f040 80c6 	bne.w	8000a0e <main+0x2fe>
 8000882:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 80bf 	beq.w	8000a0e <main+0x2fe>
	  {
	      uint8_t d[6];
	      if (iis3dwb_read(REG_OUTX_L, d, 6) == HAL_OK)
 8000890:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000894:	2206      	movs	r2, #6
 8000896:	4619      	mov	r1, r3
 8000898:	2028      	movs	r0, #40	@ 0x28
 800089a:	f7ff fee7 	bl	800066c <iis3dwb_read>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f040 80b4 	bne.w	8000a0e <main+0x2fe>
	      {
	          int16_t x = (int16_t)((uint16_t)d[1] << 8 | d[0]);
 80008a6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	          int16_t y = (int16_t)((uint16_t)d[3] << 8 | d[2]);
 80008bc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	          int16_t z = (int16_t)((uint16_t)d[5] << 8 | d[4]);
 80008d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	b21a      	sxth	r2, r3
 80008dc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	          int32_t x_mg_i = ((int32_t)x * 61 + (x >= 0 ? 500 : -500)) / 1000;  // mg, rounded
 80008e8:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	@ 0x72
 80008ec:	4613      	mov	r3, r2
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	@ 0x72
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	db02      	blt.n	8000904 <main+0x1f4>
 80008fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000902:	e000      	b.n	8000906 <main+0x1f6>
 8000904:	4a49      	ldr	r2, [pc, #292]	@ (8000a2c <main+0x31c>)
 8000906:	4413      	add	r3, r2
 8000908:	4a49      	ldr	r2, [pc, #292]	@ (8000a30 <main+0x320>)
 800090a:	fb82 1203 	smull	r1, r2, r2, r3
 800090e:	1192      	asrs	r2, r2, #6
 8000910:	17db      	asrs	r3, r3, #31
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	66bb      	str	r3, [r7, #104]	@ 0x68
	          int32_t y_mg_i = ((int32_t)y * 61 + (y >= 0 ? 500 : -500)) / 1000;
 8000916:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 800091a:	4613      	mov	r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	1a9b      	subs	r3, r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 8000928:	2a00      	cmp	r2, #0
 800092a:	db02      	blt.n	8000932 <main+0x222>
 800092c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000930:	e000      	b.n	8000934 <main+0x224>
 8000932:	4a3e      	ldr	r2, [pc, #248]	@ (8000a2c <main+0x31c>)
 8000934:	4413      	add	r3, r2
 8000936:	4a3e      	ldr	r2, [pc, #248]	@ (8000a30 <main+0x320>)
 8000938:	fb82 1203 	smull	r1, r2, r2, r3
 800093c:	1192      	asrs	r2, r2, #6
 800093e:	17db      	asrs	r3, r3, #31
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	667b      	str	r3, [r7, #100]	@ 0x64
	          int32_t z_mg_i = ((int32_t)z * 61 + (z >= 0 ? 500 : -500)) / 1000;
 8000944:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8000948:	4613      	mov	r3, r2
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8000956:	2a00      	cmp	r2, #0
 8000958:	db02      	blt.n	8000960 <main+0x250>
 800095a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800095e:	e000      	b.n	8000962 <main+0x252>
 8000960:	4a32      	ldr	r2, [pc, #200]	@ (8000a2c <main+0x31c>)
 8000962:	4413      	add	r3, r2
 8000964:	4a32      	ldr	r2, [pc, #200]	@ (8000a30 <main+0x320>)
 8000966:	fb82 1203 	smull	r1, r2, r2, r3
 800096a:	1192      	asrs	r2, r2, #6
 800096c:	17db      	asrs	r3, r3, #31
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	663b      	str	r3, [r7, #96]	@ 0x60

	          char line[64];

	          /* ====== temp over I2C2 ====== */
	          uint8_t tbuf[2];
	          int32_t t_centi = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	67fb      	str	r3, [r7, #124]	@ 0x7c

	          if (HAL_I2C_Mem_Read(&hi2c2,
 8000976:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800097a:	b299      	uxth	r1, r3
 800097c:	2332      	movs	r3, #50	@ 0x32
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2302      	movs	r3, #2
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	2206      	movs	r2, #6
 800098e:	4822      	ldr	r0, [pc, #136]	@ (8000a18 <main+0x308>)
 8000990:	f002 fe6e 	bl	8003670 <HAL_I2C_Mem_Read>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10d      	bne.n	80009b6 <main+0x2a6>
	                                0x06,                   /* STTS22H_TEMP_L */
	                                I2C_MEMADD_SIZE_8BIT,
	                                tbuf, 2, 50) == HAL_OK)
	          {
	        	  /* RIGHT for STTS22H: 0.01 °C per LSB */
	        	  int16_t rawt = (int16_t)((uint16_t)tbuf[1] << 8 | tbuf[0]);
 800099a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800099e:	b21b      	sxth	r3, r3
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	        	  t_centi =(int32_t) rawt;               // centi-deg C already
 80009b0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80009b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	        	  // if you prefer milli-deg: int32_t t_milli = rawt * 10;

	          }
	          /* ====== end temp ====== */

	          int n = snprintf(line, sizeof(line),
 80009b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a34 <main+0x324>)
 80009ba:	fb82 1203 	smull	r1, r2, r2, r3
 80009be:	1152      	asrs	r2, r2, #5
 80009c0:	17db      	asrs	r3, r3, #31
 80009c2:	1ad1      	subs	r1, r2, r3
	                           "x=%ld,y=%ld,z=%ld,t=%ld.%02ld\r\n",
	                           (long)x_mg_i, (long)y_mg_i, (long)z_mg_i,
	                           (long)(t_centi/100), (long)labs(t_centi % 100));
 80009c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <main+0x324>)
 80009c8:	fb83 0302 	smull	r0, r3, r3, r2
 80009cc:	1158      	asrs	r0, r3, #5
 80009ce:	17d3      	asrs	r3, r2, #31
 80009d0:	1ac3      	subs	r3, r0, r3
 80009d2:	2064      	movs	r0, #100	@ 0x64
 80009d4:	fb00 f303 	mul.w	r3, r0, r3
 80009d8:	1ad3      	subs	r3, r2, r3
	          int n = snprintf(line, sizeof(line),
 80009da:	2b00      	cmp	r3, #0
 80009dc:	bfb8      	it	lt
 80009de:	425b      	neglt	r3, r3
 80009e0:	1d38      	adds	r0, r7, #4
 80009e2:	9303      	str	r3, [sp, #12]
 80009e4:	9102      	str	r1, [sp, #8]
 80009e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80009f0:	4a11      	ldr	r2, [pc, #68]	@ (8000a38 <main+0x328>)
 80009f2:	2140      	movs	r1, #64	@ 0x40
 80009f4:	f009 fa00 	bl	8009df8 <sniprintf>
 80009f8:	65b8      	str	r0, [r7, #88]	@ 0x58

	          HAL_UART_Transmit(&huart2, (uint8_t*)line, (uint16_t)n, 50);
 80009fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	1d39      	adds	r1, r7, #4
 8000a00:	2332      	movs	r3, #50	@ 0x32
 8000a02:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <main+0x314>)
 8000a04:	f008 fc96 	bl	8009334 <HAL_UART_Transmit>
	          HAL_Delay(100);
 8000a08:	2064      	movs	r0, #100	@ 0x64
 8000a0a:	f001 fb0d 	bl	8002028 <HAL_Delay>
	      }
	  }

	  HAL_Delay(1);  // loop pacing
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f001 fb0a 	bl	8002028 <HAL_Delay>
  {/* USER CODE END WHILE */
 8000a14:	e72a      	b.n	800086c <main+0x15c>
 8000a16:	bf00      	nop
 8000a18:	20000168 	.word	0x20000168
 8000a1c:	0800a7c8 	.word	0x0800a7c8
 8000a20:	0800a79c 	.word	0x0800a79c
 8000a24:	2000042c 	.word	0x2000042c
 8000a28:	42021400 	.word	0x42021400
 8000a2c:	fffffe0c 	.word	0xfffffe0c
 8000a30:	10624dd3 	.word	0x10624dd3
 8000a34:	51eb851f 	.word	0x51eb851f
 8000a38:	0800a7a8 	.word	0x0800a7a8

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b09e      	sub	sp, #120	@ 0x78
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	2260      	movs	r2, #96	@ 0x60
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f009 fa0a 	bl	8009e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a60:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000a64:	f003 fa78 	bl	8003f58 <HAL_PWREx_ControlVoltageScaling>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000a6e:	f000 fb73 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000a72:	232b      	movs	r3, #43	@ 0x2b
 8000a74:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a8c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0318 	add.w	r3, r7, #24
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 fb04 	bl	80040d0 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ace:	f000 fb43 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	231f      	movs	r3, #31
 8000ad4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2104      	movs	r1, #4
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 f9ca 	bl	8004e88 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000afa:	f000 fb2d 	bl	8001158 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3778      	adds	r7, #120	@ 0x78
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <MX_I2C2_Init+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b14:	4a1b      	ldr	r2, [pc, #108]	@ (8000b84 <MX_I2C2_Init+0x7c>)
 8000b16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b18:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b42:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b44:	f002 fbe4 	bl	8003310 <HAL_I2C_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b4e:	f000 fb03 	bl	8001158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4809      	ldr	r0, [pc, #36]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b56:	f003 f967 	bl	8003e28 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b60:	f000 fafa 	bl	8001158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b68:	f003 f9a9 	bl	8003ebe <HAL_I2CEx_ConfigDigitalFilter>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f000 faf1 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000168 	.word	0x20000168
 8000b80:	40005800 	.word	0x40005800
 8000b84:	00f07bff 	.word	0x00f07bff

08000b88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b98:	4b30      	ldr	r3, [pc, #192]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000b9a:	4a31      	ldr	r2, [pc, #196]	@ (8000c60 <MX_SPI2_Init+0xd8>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000ba0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bae:	2207      	movs	r2, #7
 8000bb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bbe:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bc0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000bc6:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000be8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c26:	f007 f9df 	bl	8007fe8 <HAL_SPI_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000c30:	f000 fa92 	bl	8001158 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_SPI2_Init+0xdc>)
 8000c3a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_SPI2_Init+0xd4>)
 8000c46:	f008 fae4 	bl	8009212 <HAL_SPIEx_SetConfigAutonomousMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000c50:	f000 fa82 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200002ac 	.word	0x200002ac
 8000c60:	40003800 	.word	0x40003800
 8000c64:	10010000 	.word	0x10010000

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c6e:	4a24      	ldr	r2, [pc, #144]	@ (8000d00 <MX_USART2_UART_Init+0x98>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c72:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb2:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cb4:	f008 faee 	bl	8009294 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000cbe:	f000 fa4b 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cc6:	f008 ffcd 	bl	8009c64 <HAL_UARTEx_SetTxFifoThreshold>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000cd0:	f000 fa42 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cd8:	f009 f802 	bl	8009ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000ce2:	f000 fa39 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART2_UART_Init+0x94>)
 8000ce8:	f008 ff83 	bl	8009bf2 <HAL_UARTEx_DisableFifoMode>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cf2:	f000 fa31 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000042c 	.word	0x2000042c
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	@ 0x38
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	4bbf      	ldr	r3, [pc, #764]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d20:	4abd      	ldr	r2, [pc, #756]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d2a:	4bbb      	ldr	r3, [pc, #748]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	623b      	str	r3, [r7, #32]
 8000d36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d38:	4bb7      	ldr	r3, [pc, #732]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3e:	4ab6      	ldr	r2, [pc, #728]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d48:	4bb3      	ldr	r3, [pc, #716]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d56:	4bb0      	ldr	r3, [pc, #704]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5c:	4aae      	ldr	r2, [pc, #696]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d66:	4bac      	ldr	r3, [pc, #688]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	4ba8      	ldr	r3, [pc, #672]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d7a:	4aa7      	ldr	r2, [pc, #668]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d84:	4ba4      	ldr	r3, [pc, #656]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4ba1      	ldr	r3, [pc, #644]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d98:	4a9f      	ldr	r2, [pc, #636]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000da2:	4b9d      	ldr	r3, [pc, #628]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db0:	4b99      	ldr	r3, [pc, #612]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db6:	4a98      	ldr	r2, [pc, #608]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dc0:	4b95      	ldr	r3, [pc, #596]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b92      	ldr	r3, [pc, #584]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dd4:	4a90      	ldr	r2, [pc, #576]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dde:	4b8e      	ldr	r3, [pc, #568]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dec:	4b8a      	ldr	r3, [pc, #552]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df2:	4a89      	ldr	r2, [pc, #548]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dfc:	4b86      	ldr	r3, [pc, #536]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b83      	ldr	r3, [pc, #524]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e10:	4a81      	ldr	r2, [pc, #516]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000e12:	f043 0320 	orr.w	r3, r3, #32
 8000e16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001018 <MX_GPIO_Init+0x314>)
 8000e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e20:	f003 0320 	and.w	r3, r3, #32
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8000e2e:	487b      	ldr	r0, [pc, #492]	@ (800101c <MX_GPIO_Init+0x318>)
 8000e30:	f002 fa1a 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2181      	movs	r1, #129	@ 0x81
 8000e38:	4879      	ldr	r0, [pc, #484]	@ (8001020 <MX_GPIO_Init+0x31c>)
 8000e3a:	f002 fa15 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000e44:	4875      	ldr	r0, [pc, #468]	@ (800101c <MX_GPIO_Init+0x318>)
 8000e46:	f002 fa0f 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4875      	ldr	r0, [pc, #468]	@ (8001024 <MX_GPIO_Init+0x320>)
 8000e50:	f002 fa0a 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e5a:	4873      	ldr	r0, [pc, #460]	@ (8001028 <MX_GPIO_Init+0x324>)
 8000e5c:	f002 fa04 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8000e60:	2340      	movs	r3, #64	@ 0x40
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e64:	4b71      	ldr	r3, [pc, #452]	@ (800102c <MX_GPIO_Init+0x328>)
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	486b      	ldr	r0, [pc, #428]	@ (8001020 <MX_GPIO_Init+0x31c>)
 8000e74:	f002 f818 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8000e78:	f248 0362 	movw	r3, #32866	@ 0x8062
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4868      	ldr	r0, [pc, #416]	@ (8001030 <MX_GPIO_Init+0x32c>)
 8000e8e:	f002 f80b 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 8000e92:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	485c      	ldr	r0, [pc, #368]	@ (800101c <MX_GPIO_Init+0x318>)
 8000eac:	f001 fffc 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 8000eb0:	2324      	movs	r3, #36	@ 0x24
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4857      	ldr	r0, [pc, #348]	@ (8001020 <MX_GPIO_Init+0x31c>)
 8000ec4:	f001 fff0 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8000ec8:	f24a 2301 	movw	r3, #41473	@ 0xa201
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4855      	ldr	r0, [pc, #340]	@ (8001034 <MX_GPIO_Init+0x330>)
 8000ede:	f001 ffe3 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 8000ee2:	2381      	movs	r3, #129	@ 0x81
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4849      	ldr	r0, [pc, #292]	@ (8001020 <MX_GPIO_Init+0x31c>)
 8000efa:	f001 ffd5 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8000efe:	2302      	movs	r3, #2
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	4843      	ldr	r0, [pc, #268]	@ (8001024 <MX_GPIO_Init+0x320>)
 8000f16:	f001 ffc7 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 8000f1a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f20:	2303      	movs	r3, #3
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	483b      	ldr	r0, [pc, #236]	@ (800101c <MX_GPIO_Init+0x318>)
 8000f30:	f001 ffba 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8000f34:	2381      	movs	r3, #129	@ 0x81
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f38:	4b3c      	ldr	r3, [pc, #240]	@ (800102c <MX_GPIO_Init+0x328>)
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4837      	ldr	r0, [pc, #220]	@ (8001024 <MX_GPIO_Init+0x320>)
 8000f48:	f001 ffae 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8000f4c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f52:	4b36      	ldr	r3, [pc, #216]	@ (800102c <MX_GPIO_Init+0x328>)
 8000f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4835      	ldr	r0, [pc, #212]	@ (8001038 <MX_GPIO_Init+0x334>)
 8000f62:	f001 ffa1 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8000f66:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482b      	ldr	r0, [pc, #172]	@ (8001028 <MX_GPIO_Init+0x324>)
 8000f7c:	f001 ff94 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8000f80:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f86:	4b29      	ldr	r3, [pc, #164]	@ (800102c <MX_GPIO_Init+0x328>)
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4824      	ldr	r0, [pc, #144]	@ (8001028 <MX_GPIO_Init+0x324>)
 8000f96:	f001 ff87 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 8000f9a:	f240 1301 	movw	r3, #257	@ 0x101
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4823      	ldr	r0, [pc, #140]	@ (800103c <MX_GPIO_Init+0x338>)
 8000fb0:	f001 ff7a 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481e      	ldr	r0, [pc, #120]	@ (8001040 <MX_GPIO_Init+0x33c>)
 8000fc8:	f001 ff6e 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4810      	ldr	r0, [pc, #64]	@ (8001028 <MX_GPIO_Init+0x324>)
 8000fe6:	f001 ff5f 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_GPIO_Init+0x328>)
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480d      	ldr	r0, [pc, #52]	@ (8001034 <MX_GPIO_Init+0x330>)
 8001000:	f001 ff52 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8001004:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001016:	e015      	b.n	8001044 <MX_GPIO_Init+0x340>
 8001018:	46020c00 	.word	0x46020c00
 800101c:	42021c00 	.word	0x42021c00
 8001020:	42022000 	.word	0x42022000
 8001024:	42021000 	.word	0x42021000
 8001028:	42021400 	.word	0x42021400
 800102c:	10110000 	.word	0x10110000
 8001030:	42021800 	.word	0x42021800
 8001034:	42020c00 	.word	0x42020c00
 8001038:	42020400 	.word	0x42020400
 800103c:	42020000 	.word	0x42020000
 8001040:	42020800 	.word	0x42020800
 8001044:	4619      	mov	r1, r3
 8001046:	4842      	ldr	r0, [pc, #264]	@ (8001150 <MX_GPIO_Init+0x44c>)
 8001048:	f001 ff2e 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 800104c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	483c      	ldr	r0, [pc, #240]	@ (8001154 <MX_GPIO_Init+0x450>)
 8001062:	f001 ff21 	bl	8002ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2107      	movs	r1, #7
 800106a:	200b      	movs	r0, #11
 800106c:	f001 f8b8 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001070:	200b      	movs	r0, #11
 8001072:	f001 f8cf 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2107      	movs	r1, #7
 800107a:	200c      	movs	r0, #12
 800107c:	f001 f8b0 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001080:	200c      	movs	r0, #12
 8001082:	f001 f8c7 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2107      	movs	r1, #7
 800108a:	200d      	movs	r0, #13
 800108c:	f001 f8a8 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001090:	200d      	movs	r0, #13
 8001092:	f001 f8bf 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2107      	movs	r1, #7
 800109a:	200e      	movs	r0, #14
 800109c:	f001 f8a0 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f001 f8b7 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2107      	movs	r1, #7
 80010aa:	200f      	movs	r0, #15
 80010ac:	f001 f898 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010b0:	200f      	movs	r0, #15
 80010b2:	f001 f8af 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2107      	movs	r1, #7
 80010ba:	2010      	movs	r0, #16
 80010bc:	f001 f890 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80010c0:	2010      	movs	r0, #16
 80010c2:	f001 f8a7 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2107      	movs	r1, #7
 80010ca:	2011      	movs	r0, #17
 80010cc:	f001 f888 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 80010d0:	2011      	movs	r0, #17
 80010d2:	f001 f89f 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2107      	movs	r1, #7
 80010da:	2012      	movs	r0, #18
 80010dc:	f001 f880 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80010e0:	2012      	movs	r0, #18
 80010e2:	f001 f897 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2107      	movs	r1, #7
 80010ea:	2013      	movs	r0, #19
 80010ec:	f001 f878 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 80010f0:	2013      	movs	r0, #19
 80010f2:	f001 f88f 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2107      	movs	r1, #7
 80010fa:	2014      	movs	r0, #20
 80010fc:	f001 f870 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8001100:	2014      	movs	r0, #20
 8001102:	f001 f887 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2107      	movs	r1, #7
 800110a:	2015      	movs	r0, #21
 800110c:	f001 f868 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001110:	2015      	movs	r0, #21
 8001112:	f001 f87f 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2107      	movs	r1, #7
 800111a:	2016      	movs	r0, #22
 800111c:	f001 f860 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001120:	2016      	movs	r0, #22
 8001122:	f001 f877 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2107      	movs	r1, #7
 800112a:	2018      	movs	r0, #24
 800112c:	f001 f858 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001130:	2018      	movs	r0, #24
 8001132:	f001 f86f 	bl	8002214 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2107      	movs	r1, #7
 800113a:	2019      	movs	r0, #25
 800113c:	f001 f850 	bl	80021e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8001140:	2019      	movs	r0, #25
 8001142:	f001 f867 	bl	8002214 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001146:	bf00      	nop
 8001148:	3738      	adds	r7, #56	@ 0x38
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	42020400 	.word	0x42020400
 8001154:	42021000 	.word	0x42021000

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <Error_Handler+0x8>

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <HAL_MspInit+0x38>)
 800116c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_MspInit+0x38>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_MspInit+0x38>)
 800117c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001188:	f002 ff72 	bl	8004070 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 800118c:	f002 ff80 	bl	8004090 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8001190:	f002 ff8e 	bl	80040b0 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	46020c00 	.word	0x46020c00

080011a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b0c2      	sub	sp, #264	@ 0x108
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011ae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c4:	22c8      	movs	r2, #200	@ 0xc8
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f008 fe4b 	bl	8009e64 <memset>
  if(hi2c->Instance==I2C1)
 80011ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4aaa      	ldr	r2, [pc, #680]	@ (8001484 <HAL_I2C_MspInit+0x2e4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d147      	bne.n	8001270 <HAL_I2C_MspInit+0xd0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 fa16 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001202:	f7ff ffa9 	bl	8001158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4ba0      	ldr	r3, [pc, #640]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 8001208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120c:	4a9e      	ldr	r2, [pc, #632]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001216:	4b9c      	ldr	r3, [pc, #624]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 8001218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001224:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001228:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122c:	2312      	movs	r3, #18
 800122e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800123e:	2304      	movs	r3, #4
 8001240:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001248:	4619      	mov	r1, r3
 800124a:	4890      	ldr	r0, [pc, #576]	@ (800148c <HAL_I2C_MspInit+0x2ec>)
 800124c:	f001 fe2c 	bl	8002ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001250:	4b8d      	ldr	r3, [pc, #564]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 8001252:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001256:	4a8c      	ldr	r2, [pc, #560]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800125c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001260:	4b89      	ldr	r3, [pc, #548]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 8001262:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126a:	623b      	str	r3, [r7, #32]
 800126c:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800126e:	e16d      	b.n	800154c <HAL_I2C_MspInit+0x3ac>
  else if(hi2c->Instance==I2C2)
 8001270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a84      	ldr	r2, [pc, #528]	@ (8001490 <HAL_I2C_MspInit+0x2f0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	f040 8114 	bne.w	80014ac <HAL_I2C_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001284:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800129a:	4618      	mov	r0, r3
 800129c:	f004 f9c4 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 80012a6:	f7ff ff57 	bl	8001158 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012aa:	4b77      	ldr	r3, [pc, #476]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 80012ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b0:	4a75      	ldr	r2, [pc, #468]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ba:	4b73      	ldr	r3, [pc, #460]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 80012ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 80012da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012fe:	2304      	movs	r3, #4
 8001300:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001304:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001308:	4619      	mov	r1, r3
 800130a:	4862      	ldr	r0, [pc, #392]	@ (8001494 <HAL_I2C_MspInit+0x2f4>)
 800130c:	f001 fdcc 	bl	8002ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001310:	2310      	movs	r3, #16
 8001312:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001316:	2312      	movs	r3, #18
 8001318:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001328:	2304      	movs	r3, #4
 800132a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800132e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001332:	4619      	mov	r1, r3
 8001334:	4858      	ldr	r0, [pc, #352]	@ (8001498 <HAL_I2C_MspInit+0x2f8>)
 8001336:	f001 fdb7 	bl	8002ea8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800133a:	4b53      	ldr	r3, [pc, #332]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 800133c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001340:	4a51      	ldr	r2, [pc, #324]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 8001342:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001346:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800134a:	4b4f      	ldr	r3, [pc, #316]	@ (8001488 <HAL_I2C_MspInit+0x2e8>)
 800134c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001358:	4b50      	ldr	r3, [pc, #320]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 800135a:	4a51      	ldr	r2, [pc, #324]	@ (80014a0 <HAL_I2C_MspInit+0x300>)
 800135c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 800135e:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 8001360:	2210      	movs	r2, #16
 8001362:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001364:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136a:	4b4c      	ldr	r3, [pc, #304]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 800136c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001370:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001372:	4b4a      	ldr	r3, [pc, #296]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 8001374:	2208      	movs	r2, #8
 8001376:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001378:	4b48      	ldr	r3, [pc, #288]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800137e:	4b47      	ldr	r3, [pc, #284]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001384:	4b45      	ldr	r3, [pc, #276]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800138a:	4b44      	ldr	r3, [pc, #272]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001390:	4b42      	ldr	r3, [pc, #264]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 8001392:	2201      	movs	r2, #1
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001396:	4b41      	ldr	r3, [pc, #260]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 8001398:	2201      	movs	r2, #1
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800139c:	4b3f      	ldr	r3, [pc, #252]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80013a2:	4b3e      	ldr	r3, [pc, #248]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80013ae:	483b      	ldr	r0, [pc, #236]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 80013b0:	f000 fff2 	bl	8002398 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_I2C_MspInit+0x21e>
      Error_Handler();
 80013ba:	f7ff fecd 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 80013be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a34      	ldr	r2, [pc, #208]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 80013ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80013cc:	4a33      	ldr	r2, [pc, #204]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 80013ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80013d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80013da:	2110      	movs	r1, #16
 80013dc:	482f      	ldr	r0, [pc, #188]	@ (800149c <HAL_I2C_MspInit+0x2fc>)
 80013de:	f001 faa7 	bl	8002930 <HAL_DMA_ConfigChannelAttributes>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 80013e8:	f7ff feb6 	bl	8001158 <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80013ec:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 80013ee:	4a2e      	ldr	r2, [pc, #184]	@ (80014a8 <HAL_I2C_MspInit+0x308>)
 80013f0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 80013f2:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 80013f4:	220f      	movs	r2, #15
 80013f6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80013f8:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fe:	4b29      	ldr	r3, [pc, #164]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001404:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 800140c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001410:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001426:	2201      	movs	r2, #1
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 800142c:	2201      	movs	r2, #1
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001432:	2200      	movs	r2, #0
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001438:	2200      	movs	r2, #0
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 800143e:	2200      	movs	r2, #0
 8001440:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001442:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001444:	f000 ffa8 	bl	8002398 <HAL_DMA_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_I2C_MspInit+0x2b2>
      Error_Handler();
 800144e:	f7ff fe83 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 8001452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 800145e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001460:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800146e:	2110      	movs	r1, #16
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <HAL_I2C_MspInit+0x304>)
 8001472:	f001 fa5d 	bl	8002930 <HAL_DMA_ConfigChannelAttributes>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d067      	beq.n	800154c <HAL_I2C_MspInit+0x3ac>
      Error_Handler();
 800147c:	f7ff fe6c 	bl	8001158 <Error_Handler>
}
 8001480:	e064      	b.n	800154c <HAL_I2C_MspInit+0x3ac>
 8001482:	bf00      	nop
 8001484:	40005400 	.word	0x40005400
 8001488:	46020c00 	.word	0x46020c00
 800148c:	42020400 	.word	0x42020400
 8001490:	40005800 	.word	0x40005800
 8001494:	42021400 	.word	0x42021400
 8001498:	42021c00 	.word	0x42021c00
 800149c:	200001bc 	.word	0x200001bc
 80014a0:	400201d0 	.word	0x400201d0
 80014a4:	20000234 	.word	0x20000234
 80014a8:	40020150 	.word	0x40020150
  else if(hi2c->Instance==I2C3)
 80014ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80014b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a27      	ldr	r2, [pc, #156]	@ (8001558 <HAL_I2C_MspInit+0x3b8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d146      	bne.n	800154c <HAL_I2C_MspInit+0x3ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 f8a7 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_MspInit+0x344>
      Error_Handler();
 80014e0:	f7ff fe3a 	bl	8001158 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <HAL_I2C_MspInit+0x3bc>)
 80014e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <HAL_I2C_MspInit+0x3bc>)
 80014ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <HAL_I2C_MspInit+0x3bc>)
 80014f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001502:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001506:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800151c:	2304      	movs	r3, #4
 800151e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001522:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001526:	4619      	mov	r1, r3
 8001528:	480d      	ldr	r0, [pc, #52]	@ (8001560 <HAL_I2C_MspInit+0x3c0>)
 800152a:	f001 fcbd 	bl	8002ea8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_I2C_MspInit+0x3bc>)
 8001530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001534:	4a09      	ldr	r2, [pc, #36]	@ (800155c <HAL_I2C_MspInit+0x3bc>)
 8001536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_I2C_MspInit+0x3bc>)
 8001540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	bf00      	nop
 800154e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	46002800 	.word	0x46002800
 800155c:	46020c00 	.word	0x46020c00
 8001560:	42021800 	.word	0x42021800

08001564 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0c4      	sub	sp, #272	@ 0x110
 8001568:	af00      	add	r7, sp, #0
 800156a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800156e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001572:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001588:	22c8      	movs	r2, #200	@ 0xc8
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f008 fc69 	bl	8009e64 <memset>
  if(hspi->Instance==SPI1)
 8001592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4aaf      	ldr	r2, [pc, #700]	@ (800185c <HAL_SPI_MspInit+0x2f8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d147      	bne.n	8001634 <HAL_SPI_MspInit+0xd0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80015b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 f833 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 80015c8:	f7ff fdc6 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015cc:	4ba4      	ldr	r3, [pc, #656]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80015ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015d2:	4aa3      	ldr	r2, [pc, #652]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80015d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015d8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80015de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ea:	4b9d      	ldr	r3, [pc, #628]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80015ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f0:	4a9b      	ldr	r2, [pc, #620]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80015f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015fa:	4b99      	ldr	r3, [pc, #612]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80015fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8001608:	231c      	movs	r3, #28
 800160a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001620:	2305      	movs	r3, #5
 8001622:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001626:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800162a:	4619      	mov	r1, r3
 800162c:	488d      	ldr	r0, [pc, #564]	@ (8001864 <HAL_SPI_MspInit+0x300>)
 800162e:	f001 fc3b 	bl	8002ea8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001632:	e1d1      	b.n	80019d8 <HAL_SPI_MspInit+0x474>
  else if(hspi->Instance==SPI2)
 8001634:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001638:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a89      	ldr	r2, [pc, #548]	@ (8001868 <HAL_SPI_MspInit+0x304>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f040 811e 	bne.w	8001884 <HAL_SPI_MspInit+0x320>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001648:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800165e:	4618      	mov	r0, r3
 8001660:	f003 ffe2 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 800166a:	f7ff fd75 	bl	8001158 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800166e:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 8001670:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001674:	4a7a      	ldr	r2, [pc, #488]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 8001676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800167e:	4b78      	ldr	r3, [pc, #480]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 8001680:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800168c:	4b74      	ldr	r3, [pc, #464]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 800168e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001692:	4a73      	ldr	r2, [pc, #460]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800169c:	4b70      	ldr	r3, [pc, #448]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 800169e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80016ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ba:	4b69      	ldr	r3, [pc, #420]	@ (8001860 <HAL_SPI_MspInit+0x2fc>)
 80016bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80016c8:	230a      	movs	r3, #10
 80016ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e0:	2305      	movs	r3, #5
 80016e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016e6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016ea:	4619      	mov	r1, r3
 80016ec:	485f      	ldr	r0, [pc, #380]	@ (800186c <HAL_SPI_MspInit+0x308>)
 80016ee:	f001 fbdb 	bl	8002ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f2:	2308      	movs	r3, #8
 80016f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800170a:	2305      	movs	r3, #5
 800170c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001710:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001714:	4619      	mov	r1, r3
 8001716:	4856      	ldr	r0, [pc, #344]	@ (8001870 <HAL_SPI_MspInit+0x30c>)
 8001718:	f001 fbc6 	bl	8002ea8 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800171c:	4b55      	ldr	r3, [pc, #340]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 800171e:	4a56      	ldr	r2, [pc, #344]	@ (8001878 <HAL_SPI_MspInit+0x314>)
 8001720:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 8001722:	4b54      	ldr	r3, [pc, #336]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001724:	2209      	movs	r2, #9
 8001726:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001728:	4b52      	ldr	r3, [pc, #328]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172e:	4b51      	ldr	r3, [pc, #324]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001734:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001736:	4b4f      	ldr	r3, [pc, #316]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001738:	2208      	movs	r2, #8
 800173a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 800173c:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001742:	4b4c      	ldr	r3, [pc, #304]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001748:	4b4a      	ldr	r3, [pc, #296]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800174e:	4b49      	ldr	r3, [pc, #292]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001754:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001756:	2201      	movs	r2, #1
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 800175a:	4b46      	ldr	r3, [pc, #280]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 800175c:	2201      	movs	r2, #1
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001760:	4b44      	ldr	r3, [pc, #272]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001762:	2200      	movs	r2, #0
 8001764:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001766:	4b43      	ldr	r3, [pc, #268]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 800176c:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001772:	4840      	ldr	r0, [pc, #256]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001774:	f000 fe10 	bl	8002398 <HAL_DMA_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_SPI_MspInit+0x21e>
      Error_Handler();
 800177e:	f7ff fceb 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8001782:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001786:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a39      	ldr	r2, [pc, #228]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 800178e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001792:	4a38      	ldr	r2, [pc, #224]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 8001794:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001798:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017a0:	2110      	movs	r1, #16
 80017a2:	4834      	ldr	r0, [pc, #208]	@ (8001874 <HAL_SPI_MspInit+0x310>)
 80017a4:	f001 f8c4 	bl	8002930 <HAL_DMA_ConfigChannelAttributes>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 80017ae:	f7ff fcd3 	bl	8001158 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80017b2:	4b32      	ldr	r3, [pc, #200]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017b4:	4a32      	ldr	r2, [pc, #200]	@ (8001880 <HAL_SPI_MspInit+0x31c>)
 80017b6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80017b8:	4b30      	ldr	r3, [pc, #192]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017ba:	2208      	movs	r2, #8
 80017bc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80017be:	4b2f      	ldr	r3, [pc, #188]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80017ca:	4b2c      	ldr	r3, [pc, #176]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017d6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80017d8:	4b28      	ldr	r3, [pc, #160]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80017de:	4b27      	ldr	r3, [pc, #156]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80017e4:	4b25      	ldr	r3, [pc, #148]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80017ea:	4b24      	ldr	r3, [pc, #144]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <HAL_SPI_MspInit+0x318>)
 80017fe:	2200      	movs	r2, #0
 8001800:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <HAL_SPI_MspInit+0x318>)
 8001804:	2200      	movs	r2, #0
 8001806:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001808:	481c      	ldr	r0, [pc, #112]	@ (800187c <HAL_SPI_MspInit+0x318>)
 800180a:	f000 fdc5 	bl	8002398 <HAL_DMA_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_SPI_MspInit+0x2b4>
      Error_Handler();
 8001814:	f7ff fca0 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 8001818:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800181c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a16      	ldr	r2, [pc, #88]	@ (800187c <HAL_SPI_MspInit+0x318>)
 8001824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <HAL_SPI_MspInit+0x318>)
 800182a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800182e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001836:	2110      	movs	r1, #16
 8001838:	4810      	ldr	r0, [pc, #64]	@ (800187c <HAL_SPI_MspInit+0x318>)
 800183a:	f001 f879 	bl	8002930 <HAL_DMA_ConfigChannelAttributes>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_SPI_MspInit+0x2e4>
      Error_Handler();
 8001844:	f7ff fc88 	bl	8001158 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	203c      	movs	r0, #60	@ 0x3c
 800184e:	f000 fcc7 	bl	80021e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001852:	203c      	movs	r0, #60	@ 0x3c
 8001854:	f000 fcde 	bl	8002214 <HAL_NVIC_EnableIRQ>
}
 8001858:	e0be      	b.n	80019d8 <HAL_SPI_MspInit+0x474>
 800185a:	bf00      	nop
 800185c:	40013000 	.word	0x40013000
 8001860:	46020c00 	.word	0x46020c00
 8001864:	42021800 	.word	0x42021800
 8001868:	40003800 	.word	0x40003800
 800186c:	42022000 	.word	0x42022000
 8001870:	42020c00 	.word	0x42020c00
 8001874:	2000033c 	.word	0x2000033c
 8001878:	400200d0 	.word	0x400200d0
 800187c:	200003b4 	.word	0x200003b4
 8001880:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 8001884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001888:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a54      	ldr	r2, [pc, #336]	@ (80019e4 <HAL_SPI_MspInit+0x480>)
 8001892:	4293      	cmp	r3, r2
 8001894:	f040 80a0 	bne.w	80019d8 <HAL_SPI_MspInit+0x474>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001898:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 80018a4:	2310      	movs	r3, #16
 80018a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 feba 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_SPI_MspInit+0x35a>
      Error_Handler();
 80018ba:	f7ff fc4d 	bl	8001158 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018be:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 80018c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80018c4:	4a48      	ldr	r2, [pc, #288]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 80018c6:	f043 0320 	orr.w	r3, r3, #32
 80018ca:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80018ce:	4b46      	ldr	r3, [pc, #280]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 80018d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018dc:	4b42      	ldr	r3, [pc, #264]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 80018de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e2:	4a41      	ldr	r2, [pc, #260]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 80018e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ec:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 80018ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b3b      	ldr	r3, [pc, #236]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 80018fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001900:	4a39      	ldr	r2, [pc, #228]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 800190c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001918:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001922:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001926:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 800192a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800192e:	4a2e      	ldr	r2, [pc, #184]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <HAL_SPI_MspInit+0x484>)
 800193a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193e:	f003 0202 	and.w	r2, r3, #2
 8001942:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001954:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800195a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001964:	2301      	movs	r3, #1
 8001966:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001970:	2306      	movs	r3, #6
 8001972:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001976:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800197a:	4619      	mov	r1, r3
 800197c:	481b      	ldr	r0, [pc, #108]	@ (80019ec <HAL_SPI_MspInit+0x488>)
 800197e:	f001 fa93 	bl	8002ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001986:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800199c:	2306      	movs	r3, #6
 800199e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80019a6:	4619      	mov	r1, r3
 80019a8:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <HAL_SPI_MspInit+0x48c>)
 80019aa:	f001 fa7d 	bl	8002ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019ae:	2330      	movs	r3, #48	@ 0x30
 80019b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019c6:	2306      	movs	r3, #6
 80019c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80019d0:	4619      	mov	r1, r3
 80019d2:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <HAL_SPI_MspInit+0x490>)
 80019d4:	f001 fa68 	bl	8002ea8 <HAL_GPIO_Init>
}
 80019d8:	bf00      	nop
 80019da:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	46002000 	.word	0x46002000
 80019e8:	46020c00 	.word	0x46020c00
 80019ec:	42021800 	.word	0x42021800
 80019f0:	42020000 	.word	0x42020000
 80019f4:	42020400 	.word	0x42020400

080019f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0c0      	sub	sp, #256	@ 0x100
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	22c8      	movs	r2, #200	@ 0xc8
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f008 fa23 	bl	8009e64 <memset>
  if(huart->Instance==USART2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a5e      	ldr	r2, [pc, #376]	@ (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d145      	bne.n	8001ab4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a28:	f04f 0202 	mov.w	r2, #2
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fdf3 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a48:	f7ff fb86 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4c:	4b54      	ldr	r3, [pc, #336]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a52:	4a53      	ldr	r2, [pc, #332]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a58:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a70:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8001a88:	2370      	movs	r3, #112	@ 0x70
 8001a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001aaa:	4619      	mov	r1, r3
 8001aac:	483d      	ldr	r0, [pc, #244]	@ (8001ba4 <HAL_UART_MspInit+0x1ac>)
 8001aae:	f001 f9fb 	bl	8002ea8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ab2:	e06e      	b.n	8001b92 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba8 <HAL_UART_MspInit+0x1b0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d169      	bne.n	8001b92 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001abe:	f04f 0204 	mov.w	r2, #4
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fda8 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_UART_MspInit+0xea>
      Error_Handler();
 8001ade:	f7ff fb3b 	bl	8001158 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001aea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001af2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	4b27      	ldr	r3, [pc, #156]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b06:	4a26      	ldr	r2, [pc, #152]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001b3c:	23a0      	movs	r3, #160	@ 0xa0
 8001b3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b54:	2307      	movs	r3, #7
 8001b56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4812      	ldr	r0, [pc, #72]	@ (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b62:	f001 f9a1 	bl	8002ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001b66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b80:	2307      	movs	r3, #7
 8001b82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b86:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <HAL_UART_MspInit+0x1ac>)
 8001b8e:	f001 f98b 	bl	8002ea8 <HAL_GPIO_Init>
}
 8001b92:	bf00      	nop
 8001b94:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40004400 	.word	0x40004400
 8001ba0:	46020c00 	.word	0x46020c00
 8001ba4:	42020c00 	.word	0x42020c00
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	42020000 	.word	0x42020000

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c06:	f000 f9ef 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f001 fb40 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f001 fb39 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 8001c2e:	2004      	movs	r0, #4
 8001c30:	f001 fb32 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8001c3c:	2008      	movs	r0, #8
 8001c3e:	f001 fb2b 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8001c4a:	2010      	movs	r0, #16
 8001c4c:	f001 fb24 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8001c58:	2020      	movs	r0, #32
 8001c5a:	f001 fb1d 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8001c66:	2040      	movs	r0, #64	@ 0x40
 8001c68:	f001 fb16 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8001c74:	2080      	movs	r0, #128	@ 0x80
 8001c76:	f001 fb0f 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 8001c82:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c86:	f001 fb07 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8001c92:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c96:	f001 faff 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8001ca2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ca6:	f001 faf7 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}

08001cae <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 8001cb2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001cb6:	f001 faef 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 8001cc2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cc6:	f001 fae7 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001cd2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001cd6:	f001 fadf 	bl	8003298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001ce6:	f000 fcc2 	bl	800266e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003b4 	.word	0x200003b4

08001cf4 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001cfa:	f000 fcb8 	bl	800266e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000033c 	.word	0x2000033c

08001d08 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001d0e:	f000 fcae 	bl	800266e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000234 	.word	0x20000234

08001d1c <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <GPDMA1_Channel3_IRQHandler+0x10>)
 8001d22:	f000 fca4 	bl	800266e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200001bc 	.word	0x200001bc

08001d30 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <GPDMA1_Channel4_IRQHandler+0x10>)
 8001d36:	f000 fc9a 	bl	800266e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200000f0 	.word	0x200000f0

08001d44 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001d4a:	f000 fc90 	bl	800266e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000078 	.word	0x20000078

08001d58 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <SPI2_IRQHandler+0x10>)
 8001d5e:	f006 ff4f 	bl	8008c00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200002ac 	.word	0x200002ac

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	@ (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f008 f86a 	bl	8009e74 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200c0000 	.word	0x200c0000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	200004c0 	.word	0x200004c0
 8001dd4:	20000610 	.word	0x20000610

08001dd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <SystemInit+0x68>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de2:	4a17      	ldr	r2, [pc, #92]	@ (8001e40 <SystemInit+0x68>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <SystemInit+0x6c>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <SystemInit+0x6c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <SystemInit+0x6c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <SystemInit+0x6c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <SystemInit+0x6c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0e      	ldr	r2, [pc, #56]	@ (8001e44 <SystemInit+0x6c>)
 8001e0a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001e0e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001e12:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <SystemInit+0x6c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <SystemInit+0x6c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <SystemInit+0x6c>)
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <SystemInit+0x6c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SystemInit+0x68>)
 8001e2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e32:	609a      	str	r2, [r3, #8]
  #endif
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	46020c00 	.word	0x46020c00

08001e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e80 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e4c:	f7ff ffc4 	bl	8001dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e52:	e003      	b.n	8001e5c <LoopCopyDataInit>

08001e54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e5a:	3104      	adds	r1, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e5c:	480a      	ldr	r0, [pc, #40]	@ (8001e88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e64:	d3f6      	bcc.n	8001e54 <CopyDataInit>
	ldr	r2, =_sbss
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e68:	e002      	b.n	8001e70 <LoopFillZerobss>

08001e6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e6c:	f842 3b04 	str.w	r3, [r2], #4

08001e70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <LoopForever+0x16>)
	cmp	r2, r3
 8001e72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e74:	d3f9      	bcc.n	8001e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e76:	f008 f803 	bl	8009e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7a:	f7fe fc49 	bl	8000710 <main>

08001e7e <LoopForever>:

LoopForever:
    b LoopForever
 8001e7e:	e7fe      	b.n	8001e7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e80:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001e84:	0800a910 	.word	0x0800a910
	ldr	r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e8c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001e90:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001e94:	20000610 	.word	0x20000610

08001e98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_Init+0x50>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a11      	ldr	r2, [pc, #68]	@ (8001eec <HAL_Init+0x50>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f98c 	bl	80021ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001eb2:	f003 f9db 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_Init+0x54>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	490c      	ldr	r1, [pc, #48]	@ (8001ef4 <HAL_Init+0x58>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_Init+0x5c>)
 8001eca:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ecc:	2004      	movs	r0, #4
 8001ece:	f000 f9d1 	bl	8002274 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f000 f812 	bl	8001efc <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e002      	b.n	8001ee8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee2:	f7ff f93f 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	46020c00 	.word	0x46020c00
 8001ef4:	0800a7cc 	.word	0x0800a7cc
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <HAL_InitTick+0xdc>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e05c      	b.n	8001fce <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001f14:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_InitTick+0xe0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d10c      	bne.n	8001f3a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <HAL_InitTick+0xe4>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <HAL_InitTick+0xdc>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e037      	b.n	8001faa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001f3a:	f000 f9f3 	bl	8002324 <HAL_SYSTICK_GetCLKSourceConfig>
 8001f3e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d023      	beq.n	8001f8e <HAL_InitTick+0x92>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d82d      	bhi.n	8001fa8 <HAL_InitTick+0xac>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_InitTick+0x5e>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d00d      	beq.n	8001f74 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001f58:	e026      	b.n	8001fa8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_InitTick+0xe4>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <HAL_InitTick+0xdc>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4619      	mov	r1, r3
 8001f64:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001f68:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	60fb      	str	r3, [r7, #12]
        break;
 8001f72:	e01a      	b.n	8001faa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001f74:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_InitTick+0xdc>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f82:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]
        break;
 8001f8c:	e00d      	b.n	8001faa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_InitTick+0xdc>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
        break;
 8001fa6:	e000      	b.n	8001faa <HAL_InitTick+0xae>
        break;
 8001fa8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f940 	bl	8002230 <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e009      	b.n	8001fce <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc2:	f000 f90d 	bl	80021e0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001fc6:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <HAL_InitTick+0xe8>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	e000e010 	.word	0xe000e010
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	@ (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008
 800200c:	200004c4 	.word	0x200004c4

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	200004c4 	.word	0x200004c4

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000008 	.word	0x20000008

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	@ (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	@ (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	@ 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff4c 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ee:	f7ff ff63 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 80021f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7ff ffb3 	bl	8002164 <NVIC_EncodePriority>
 80021fe:	4602      	mov	r2, r0
 8002200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff82 	bl	8002110 <__NVIC_SetPriority>
}
 800220c:	bf00      	nop
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff56 	bl	80020d4 <__NVIC_EnableIRQ>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002240:	d301      	bcc.n	8002246 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002242:	2301      	movs	r3, #1
 8002244:	e00d      	b.n	8002262 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <HAL_SYSTICK_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800224e:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <HAL_SYSTICK_Config+0x40>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_SYSTICK_Config+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a05      	ldr	r2, [pc, #20]	@ (8002270 <HAL_SYSTICK_Config+0x40>)
 800225a:	f043 0303 	orr.w	r3, r3, #3
 800225e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d844      	bhi.n	800230c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002282:	a201      	add	r2, pc, #4	@ (adr r2, 8002288 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	080022ab 	.word	0x080022ab
 800228c:	080022c9 	.word	0x080022c9
 8002290:	080022eb 	.word	0x080022eb
 8002294:	0800230d 	.word	0x0800230d
 8002298:	0800229d 	.word	0x0800229d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6013      	str	r3, [r2, #0]
      break;
 80022a8:	e031      	b.n	800230e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022bc:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80022be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80022c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80022c6:	e022      	b.n	800230e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a13      	ldr	r2, [pc, #76]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80022e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80022e8:	e011      	b.n	800230e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0b      	ldr	r2, [pc, #44]	@ (800231c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80022f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002300:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002302:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800230a:	e000      	b.n	800230e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800230c:	bf00      	nop
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010
 8002320:	46020c00 	.word	0x46020c00

08002324 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002336:	2304      	movs	r3, #4
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	e021      	b.n	8002380 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800233c:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002342:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002346:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800234e:	d011      	beq.n	8002374 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002356:	d810      	bhi.n	800237a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002364:	d003      	beq.n	800236e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002366:	e008      	b.n	800237a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
        break;
 800236c:	e008      	b.n	8002380 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800236e:	2301      	movs	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
        break;
 8002372:	e005      	b.n	8002380 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002374:	2302      	movs	r3, #2
 8002376:	607b      	str	r3, [r7, #4]
        break;
 8002378:	e002      	b.n	8002380 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
        break;
 800237e:	bf00      	nop
    }
  }
  return systick_source;
 8002380:	687b      	ldr	r3, [r7, #4]
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010
 8002394:	46020c00 	.word	0x46020c00

08002398 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff fe36 	bl	8002010 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0f0      	b.n	8002592 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a79      	ldr	r2, [pc, #484]	@ (800259c <HAL_DMA_Init+0x204>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	f000 809f 	beq.w	80024fa <HAL_DMA_Init+0x162>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a77      	ldr	r2, [pc, #476]	@ (80025a0 <HAL_DMA_Init+0x208>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	f000 8099 	beq.w	80024fa <HAL_DMA_Init+0x162>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <HAL_DMA_Init+0x20c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	f000 8093 	beq.w	80024fa <HAL_DMA_Init+0x162>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a73      	ldr	r2, [pc, #460]	@ (80025a8 <HAL_DMA_Init+0x210>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	f000 808d 	beq.w	80024fa <HAL_DMA_Init+0x162>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a71      	ldr	r2, [pc, #452]	@ (80025ac <HAL_DMA_Init+0x214>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	f000 8087 	beq.w	80024fa <HAL_DMA_Init+0x162>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6f      	ldr	r2, [pc, #444]	@ (80025b0 <HAL_DMA_Init+0x218>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f000 8081 	beq.w	80024fa <HAL_DMA_Init+0x162>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6d      	ldr	r2, [pc, #436]	@ (80025b4 <HAL_DMA_Init+0x21c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d07b      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6c      	ldr	r2, [pc, #432]	@ (80025b8 <HAL_DMA_Init+0x220>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d076      	beq.n	80024fa <HAL_DMA_Init+0x162>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6a      	ldr	r2, [pc, #424]	@ (80025bc <HAL_DMA_Init+0x224>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d071      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a69      	ldr	r2, [pc, #420]	@ (80025c0 <HAL_DMA_Init+0x228>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d06c      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a67      	ldr	r2, [pc, #412]	@ (80025c4 <HAL_DMA_Init+0x22c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d067      	beq.n	80024fa <HAL_DMA_Init+0x162>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a66      	ldr	r2, [pc, #408]	@ (80025c8 <HAL_DMA_Init+0x230>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d062      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a64      	ldr	r2, [pc, #400]	@ (80025cc <HAL_DMA_Init+0x234>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d05d      	beq.n	80024fa <HAL_DMA_Init+0x162>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a63      	ldr	r2, [pc, #396]	@ (80025d0 <HAL_DMA_Init+0x238>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d058      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a61      	ldr	r2, [pc, #388]	@ (80025d4 <HAL_DMA_Init+0x23c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d053      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a60      	ldr	r2, [pc, #384]	@ (80025d8 <HAL_DMA_Init+0x240>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d04e      	beq.n	80024fa <HAL_DMA_Init+0x162>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5e      	ldr	r2, [pc, #376]	@ (80025dc <HAL_DMA_Init+0x244>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d049      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5d      	ldr	r2, [pc, #372]	@ (80025e0 <HAL_DMA_Init+0x248>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d044      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <HAL_DMA_Init+0x24c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d03f      	beq.n	80024fa <HAL_DMA_Init+0x162>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5a      	ldr	r2, [pc, #360]	@ (80025e8 <HAL_DMA_Init+0x250>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d03a      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a58      	ldr	r2, [pc, #352]	@ (80025ec <HAL_DMA_Init+0x254>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d035      	beq.n	80024fa <HAL_DMA_Init+0x162>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_DMA_Init+0x258>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d030      	beq.n	80024fa <HAL_DMA_Init+0x162>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a55      	ldr	r2, [pc, #340]	@ (80025f4 <HAL_DMA_Init+0x25c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02b      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a54      	ldr	r2, [pc, #336]	@ (80025f8 <HAL_DMA_Init+0x260>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d026      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a52      	ldr	r2, [pc, #328]	@ (80025fc <HAL_DMA_Init+0x264>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d021      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a51      	ldr	r2, [pc, #324]	@ (8002600 <HAL_DMA_Init+0x268>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01c      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002604 <HAL_DMA_Init+0x26c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d017      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002608 <HAL_DMA_Init+0x270>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d012      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a4c      	ldr	r2, [pc, #304]	@ (800260c <HAL_DMA_Init+0x274>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002610 <HAL_DMA_Init+0x278>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d008      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a49      	ldr	r2, [pc, #292]	@ (8002614 <HAL_DMA_Init+0x27c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <HAL_DMA_Init+0x162>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a48      	ldr	r2, [pc, #288]	@ (8002618 <HAL_DMA_Init+0x280>)
 80024f8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10e      	bne.n	800252c <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0206 	orr.w	r2, r2, #6
 8002542:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002544:	e00f      	b.n	8002566 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002546:	f7ff fd63 	bl	8002010 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b05      	cmp	r3, #5
 8002552:	d908      	bls.n	8002566 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2210      	movs	r2, #16
 8002558:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e015      	b.n	8002592 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e8      	bne.n	8002546 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fa17 	bl	80029a8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40020050 	.word	0x40020050
 80025a0:	50020050 	.word	0x50020050
 80025a4:	400200d0 	.word	0x400200d0
 80025a8:	500200d0 	.word	0x500200d0
 80025ac:	40020150 	.word	0x40020150
 80025b0:	50020150 	.word	0x50020150
 80025b4:	400201d0 	.word	0x400201d0
 80025b8:	500201d0 	.word	0x500201d0
 80025bc:	40020250 	.word	0x40020250
 80025c0:	50020250 	.word	0x50020250
 80025c4:	400202d0 	.word	0x400202d0
 80025c8:	500202d0 	.word	0x500202d0
 80025cc:	40020350 	.word	0x40020350
 80025d0:	50020350 	.word	0x50020350
 80025d4:	400203d0 	.word	0x400203d0
 80025d8:	500203d0 	.word	0x500203d0
 80025dc:	40020450 	.word	0x40020450
 80025e0:	50020450 	.word	0x50020450
 80025e4:	400204d0 	.word	0x400204d0
 80025e8:	500204d0 	.word	0x500204d0
 80025ec:	40020550 	.word	0x40020550
 80025f0:	50020550 	.word	0x50020550
 80025f4:	400205d0 	.word	0x400205d0
 80025f8:	500205d0 	.word	0x500205d0
 80025fc:	40020650 	.word	0x40020650
 8002600:	50020650 	.word	0x50020650
 8002604:	400206d0 	.word	0x400206d0
 8002608:	500206d0 	.word	0x500206d0
 800260c:	40020750 	.word	0x40020750
 8002610:	50020750 	.word	0x50020750
 8002614:	400207d0 	.word	0x400207d0
 8002618:	500207d0 	.word	0x500207d0

0800261c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e019      	b.n	8002662 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d004      	beq.n	8002644 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e00e      	b.n	8002662 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2204      	movs	r2, #4
 8002648:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800267e:	f023 030f 	bic.w	r3, r3, #15
 8002682:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268c:	3b50      	subs	r3, #80	@ 0x50
 800268e:	09db      	lsrs	r3, r3, #7
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2201      	movs	r2, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 813b 	beq.w	8002924 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d011      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002704:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	f043 0202 	orr.w	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d011      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002736:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d011      	beq.n	8002776 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002768:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	f043 0208 	orr.w	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d04c      	beq.n	8002854 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d045      	beq.n	8002854 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d12e      	bne.n	800283c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ec:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0202 	orr.w	r2, r2, #2
 80027fc:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002816:	2201      	movs	r2, #1
 8002818:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07a      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
        }

        return;
 800283a:	e075      	b.n	8002928 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2205      	movs	r2, #5
 8002840:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d039      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d032      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002878:	2b00      	cmp	r3, #0
 800287a:	d012      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289c:	2201      	movs	r2, #1
 800289e:	731a      	strb	r2, [r3, #12]
 80028a0:	e008      	b.n	80028b4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80028bc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d025      	beq.n	800292a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0202 	orr.w	r2, r2, #2
 80028ec:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002906:	2201      	movs	r2, #1
 8002908:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
 8002922:	e002      	b.n	800292a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002924:	bf00      	nop
 8002926:	e000      	b.n	800292a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002928:	bf00      	nop
    }
  }
}
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e02b      	b.n	800299c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800294c:	f023 030f 	bic.w	r3, r3, #15
 8002950:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295a:	3b50      	subs	r3, #80	@ 0x50
 800295c:	09db      	lsrs	r3, r3, #7
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2201      	movs	r2, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f003 0311 	and.w	r3, r3, #17
 800297a:	2b11      	cmp	r3, #17
 800297c:	d106      	bne.n	800298c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e006      	b.n	800299a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	43db      	mvns	r3, r3
 8002994:	401a      	ands	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a53      	ldr	r2, [pc, #332]	@ (8002b34 <DMA_Init+0x18c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	f000 80a0 	beq.w	8002b2e <DMA_Init+0x186>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a51      	ldr	r2, [pc, #324]	@ (8002b38 <DMA_Init+0x190>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f000 809a 	beq.w	8002b2e <DMA_Init+0x186>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a4f      	ldr	r2, [pc, #316]	@ (8002b3c <DMA_Init+0x194>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	f000 8094 	beq.w	8002b2e <DMA_Init+0x186>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b40 <DMA_Init+0x198>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	f000 808e 	beq.w	8002b2e <DMA_Init+0x186>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4b      	ldr	r2, [pc, #300]	@ (8002b44 <DMA_Init+0x19c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	f000 8088 	beq.w	8002b2e <DMA_Init+0x186>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a49      	ldr	r2, [pc, #292]	@ (8002b48 <DMA_Init+0x1a0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	f000 8082 	beq.w	8002b2e <DMA_Init+0x186>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a47      	ldr	r2, [pc, #284]	@ (8002b4c <DMA_Init+0x1a4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d07c      	beq.n	8002b2e <DMA_Init+0x186>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a45      	ldr	r2, [pc, #276]	@ (8002b50 <DMA_Init+0x1a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d077      	beq.n	8002b2e <DMA_Init+0x186>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a44      	ldr	r2, [pc, #272]	@ (8002b54 <DMA_Init+0x1ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d072      	beq.n	8002b2e <DMA_Init+0x186>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	@ (8002b58 <DMA_Init+0x1b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d06d      	beq.n	8002b2e <DMA_Init+0x186>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a41      	ldr	r2, [pc, #260]	@ (8002b5c <DMA_Init+0x1b4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d068      	beq.n	8002b2e <DMA_Init+0x186>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3f      	ldr	r2, [pc, #252]	@ (8002b60 <DMA_Init+0x1b8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d063      	beq.n	8002b2e <DMA_Init+0x186>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b64 <DMA_Init+0x1bc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d05e      	beq.n	8002b2e <DMA_Init+0x186>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3c      	ldr	r2, [pc, #240]	@ (8002b68 <DMA_Init+0x1c0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d059      	beq.n	8002b2e <DMA_Init+0x186>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b6c <DMA_Init+0x1c4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d054      	beq.n	8002b2e <DMA_Init+0x186>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a39      	ldr	r2, [pc, #228]	@ (8002b70 <DMA_Init+0x1c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d04f      	beq.n	8002b2e <DMA_Init+0x186>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a38      	ldr	r2, [pc, #224]	@ (8002b74 <DMA_Init+0x1cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04a      	beq.n	8002b2e <DMA_Init+0x186>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a36      	ldr	r2, [pc, #216]	@ (8002b78 <DMA_Init+0x1d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d045      	beq.n	8002b2e <DMA_Init+0x186>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <DMA_Init+0x1d4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d040      	beq.n	8002b2e <DMA_Init+0x186>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a33      	ldr	r2, [pc, #204]	@ (8002b80 <DMA_Init+0x1d8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d03b      	beq.n	8002b2e <DMA_Init+0x186>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a32      	ldr	r2, [pc, #200]	@ (8002b84 <DMA_Init+0x1dc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d036      	beq.n	8002b2e <DMA_Init+0x186>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a30      	ldr	r2, [pc, #192]	@ (8002b88 <DMA_Init+0x1e0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d031      	beq.n	8002b2e <DMA_Init+0x186>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2f      	ldr	r2, [pc, #188]	@ (8002b8c <DMA_Init+0x1e4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d02c      	beq.n	8002b2e <DMA_Init+0x186>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8002b90 <DMA_Init+0x1e8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d027      	beq.n	8002b2e <DMA_Init+0x186>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b94 <DMA_Init+0x1ec>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <DMA_Init+0x186>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <DMA_Init+0x1f0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01d      	beq.n	8002b2e <DMA_Init+0x186>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a29      	ldr	r2, [pc, #164]	@ (8002b9c <DMA_Init+0x1f4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d018      	beq.n	8002b2e <DMA_Init+0x186>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a27      	ldr	r2, [pc, #156]	@ (8002ba0 <DMA_Init+0x1f8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <DMA_Init+0x186>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <DMA_Init+0x1fc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <DMA_Init+0x186>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a24      	ldr	r2, [pc, #144]	@ (8002ba8 <DMA_Init+0x200>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <DMA_Init+0x186>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <DMA_Init+0x204>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <DMA_Init+0x186>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a21      	ldr	r2, [pc, #132]	@ (8002bb0 <DMA_Init+0x208>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d142      	bne.n	8002bb4 <DMA_Init+0x20c>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e041      	b.n	8002bb6 <DMA_Init+0x20e>
 8002b32:	bf00      	nop
 8002b34:	40020050 	.word	0x40020050
 8002b38:	50020050 	.word	0x50020050
 8002b3c:	400200d0 	.word	0x400200d0
 8002b40:	500200d0 	.word	0x500200d0
 8002b44:	40020150 	.word	0x40020150
 8002b48:	50020150 	.word	0x50020150
 8002b4c:	400201d0 	.word	0x400201d0
 8002b50:	500201d0 	.word	0x500201d0
 8002b54:	40020250 	.word	0x40020250
 8002b58:	50020250 	.word	0x50020250
 8002b5c:	400202d0 	.word	0x400202d0
 8002b60:	500202d0 	.word	0x500202d0
 8002b64:	40020350 	.word	0x40020350
 8002b68:	50020350 	.word	0x50020350
 8002b6c:	400203d0 	.word	0x400203d0
 8002b70:	500203d0 	.word	0x500203d0
 8002b74:	40020450 	.word	0x40020450
 8002b78:	50020450 	.word	0x50020450
 8002b7c:	400204d0 	.word	0x400204d0
 8002b80:	500204d0 	.word	0x500204d0
 8002b84:	40020550 	.word	0x40020550
 8002b88:	50020550 	.word	0x50020550
 8002b8c:	400205d0 	.word	0x400205d0
 8002b90:	500205d0 	.word	0x500205d0
 8002b94:	40020650 	.word	0x40020650
 8002b98:	50020650 	.word	0x50020650
 8002b9c:	400206d0 	.word	0x400206d0
 8002ba0:	500206d0 	.word	0x500206d0
 8002ba4:	40020750 	.word	0x40020750
 8002ba8:	50020750 	.word	0x50020750
 8002bac:	400207d0 	.word	0x400207d0
 8002bb0:	500207d0 	.word	0x500207d0
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002bca:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002bd8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c12:	f040 80b0 	bne.w	8002d76 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a82      	ldr	r2, [pc, #520]	@ (8002e24 <DMA_Init+0x47c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	f000 80a0 	beq.w	8002d62 <DMA_Init+0x3ba>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a80      	ldr	r2, [pc, #512]	@ (8002e28 <DMA_Init+0x480>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f000 809a 	beq.w	8002d62 <DMA_Init+0x3ba>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7e      	ldr	r2, [pc, #504]	@ (8002e2c <DMA_Init+0x484>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	f000 8094 	beq.w	8002d62 <DMA_Init+0x3ba>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e30 <DMA_Init+0x488>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	f000 808e 	beq.w	8002d62 <DMA_Init+0x3ba>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e34 <DMA_Init+0x48c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	f000 8088 	beq.w	8002d62 <DMA_Init+0x3ba>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a78      	ldr	r2, [pc, #480]	@ (8002e38 <DMA_Init+0x490>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	f000 8082 	beq.w	8002d62 <DMA_Init+0x3ba>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a76      	ldr	r2, [pc, #472]	@ (8002e3c <DMA_Init+0x494>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d07c      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a74      	ldr	r2, [pc, #464]	@ (8002e40 <DMA_Init+0x498>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d077      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a73      	ldr	r2, [pc, #460]	@ (8002e44 <DMA_Init+0x49c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d072      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a71      	ldr	r2, [pc, #452]	@ (8002e48 <DMA_Init+0x4a0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d06d      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a70      	ldr	r2, [pc, #448]	@ (8002e4c <DMA_Init+0x4a4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d068      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6e      	ldr	r2, [pc, #440]	@ (8002e50 <DMA_Init+0x4a8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d063      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6d      	ldr	r2, [pc, #436]	@ (8002e54 <DMA_Init+0x4ac>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d05e      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e58 <DMA_Init+0x4b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d059      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6a      	ldr	r2, [pc, #424]	@ (8002e5c <DMA_Init+0x4b4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d054      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a68      	ldr	r2, [pc, #416]	@ (8002e60 <DMA_Init+0x4b8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04f      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a67      	ldr	r2, [pc, #412]	@ (8002e64 <DMA_Init+0x4bc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d04a      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a65      	ldr	r2, [pc, #404]	@ (8002e68 <DMA_Init+0x4c0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d045      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a64      	ldr	r2, [pc, #400]	@ (8002e6c <DMA_Init+0x4c4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d040      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a62      	ldr	r2, [pc, #392]	@ (8002e70 <DMA_Init+0x4c8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d03b      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a61      	ldr	r2, [pc, #388]	@ (8002e74 <DMA_Init+0x4cc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d036      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e78 <DMA_Init+0x4d0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d031      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a5e      	ldr	r2, [pc, #376]	@ (8002e7c <DMA_Init+0x4d4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d02c      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5c      	ldr	r2, [pc, #368]	@ (8002e80 <DMA_Init+0x4d8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d027      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5b      	ldr	r2, [pc, #364]	@ (8002e84 <DMA_Init+0x4dc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d022      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a59      	ldr	r2, [pc, #356]	@ (8002e88 <DMA_Init+0x4e0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01d      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a58      	ldr	r2, [pc, #352]	@ (8002e8c <DMA_Init+0x4e4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d018      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a56      	ldr	r2, [pc, #344]	@ (8002e90 <DMA_Init+0x4e8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a55      	ldr	r2, [pc, #340]	@ (8002e94 <DMA_Init+0x4ec>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00e      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a53      	ldr	r2, [pc, #332]	@ (8002e98 <DMA_Init+0x4f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a52      	ldr	r2, [pc, #328]	@ (8002e9c <DMA_Init+0x4f4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <DMA_Init+0x3ba>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ea0 <DMA_Init+0x4f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <DMA_Init+0x3be>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <DMA_Init+0x3c0>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e008      	b.n	8002d88 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7e:	d103      	bne.n	8002d88 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d86:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d8e:	4b45      	ldr	r3, [pc, #276]	@ (8002ea4 <DMA_Init+0x4fc>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a36      	ldr	r2, [pc, #216]	@ (8002e84 <DMA_Init+0x4dc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d022      	beq.n	8002df4 <DMA_Init+0x44c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a35      	ldr	r2, [pc, #212]	@ (8002e88 <DMA_Init+0x4e0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d01d      	beq.n	8002df4 <DMA_Init+0x44c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a33      	ldr	r2, [pc, #204]	@ (8002e8c <DMA_Init+0x4e4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <DMA_Init+0x44c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a32      	ldr	r2, [pc, #200]	@ (8002e90 <DMA_Init+0x4e8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <DMA_Init+0x44c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a30      	ldr	r2, [pc, #192]	@ (8002e94 <DMA_Init+0x4ec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <DMA_Init+0x44c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2f      	ldr	r2, [pc, #188]	@ (8002e98 <DMA_Init+0x4f0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <DMA_Init+0x44c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e9c <DMA_Init+0x4f4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <DMA_Init+0x44c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <DMA_Init+0x4f8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d101      	bne.n	8002df8 <DMA_Init+0x450>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <DMA_Init+0x452>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40020050 	.word	0x40020050
 8002e28:	50020050 	.word	0x50020050
 8002e2c:	400200d0 	.word	0x400200d0
 8002e30:	500200d0 	.word	0x500200d0
 8002e34:	40020150 	.word	0x40020150
 8002e38:	50020150 	.word	0x50020150
 8002e3c:	400201d0 	.word	0x400201d0
 8002e40:	500201d0 	.word	0x500201d0
 8002e44:	40020250 	.word	0x40020250
 8002e48:	50020250 	.word	0x50020250
 8002e4c:	400202d0 	.word	0x400202d0
 8002e50:	500202d0 	.word	0x500202d0
 8002e54:	40020350 	.word	0x40020350
 8002e58:	50020350 	.word	0x50020350
 8002e5c:	400203d0 	.word	0x400203d0
 8002e60:	500203d0 	.word	0x500203d0
 8002e64:	40020450 	.word	0x40020450
 8002e68:	50020450 	.word	0x50020450
 8002e6c:	400204d0 	.word	0x400204d0
 8002e70:	500204d0 	.word	0x500204d0
 8002e74:	40020550 	.word	0x40020550
 8002e78:	50020550 	.word	0x50020550
 8002e7c:	400205d0 	.word	0x400205d0
 8002e80:	500205d0 	.word	0x500205d0
 8002e84:	40020650 	.word	0x40020650
 8002e88:	50020650 	.word	0x50020650
 8002e8c:	400206d0 	.word	0x400206d0
 8002e90:	500206d0 	.word	0x500206d0
 8002e94:	40020750 	.word	0x40020750
 8002e98:	50020750 	.word	0x50020750
 8002e9c:	400207d0 	.word	0x400207d0
 8002ea0:	500207d0 	.word	0x500207d0
 8002ea4:	3cc03180 	.word	0x3cc03180

08002ea8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002eba:	e1c2      	b.n	8003242 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 81b2 	beq.w	800323c <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a55      	ldr	r2, [pc, #340]	@ (8003030 <HAL_GPIO_Init+0x188>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d15d      	bne.n	8002f9c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0201 	and.w	r2, r3, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002f10:	4a48      	ldr	r2, [pc, #288]	@ (8003034 <HAL_GPIO_Init+0x18c>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f18:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002f1a:	4a46      	ldr	r2, [pc, #280]	@ (8003034 <HAL_GPIO_Init+0x18c>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	08da      	lsrs	r2, r3, #3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	3208      	adds	r2, #8
 8002f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f32:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	220f      	movs	r2, #15
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220b      	movs	r2, #11
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	3208      	adds	r2, #8
 8002f66:	69f9      	ldr	r1, [r7, #28]
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2202      	movs	r2, #2
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e067      	b.n	800306c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x104>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b12      	cmp	r3, #18
 8002faa:	d145      	bne.n	8003038 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	08da      	lsrs	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3208      	adds	r2, #8
 8002ff2:	69f9      	ldr	r1, [r7, #28]
 8002ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	4013      	ands	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4313      	orrs	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e01e      	b.n	800306c <HAL_GPIO_Init+0x1c4>
 800302e:	bf00      	nop
 8003030:	46020000 	.word	0x46020000
 8003034:	0800a824 	.word	0x0800a824
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	4013      	ands	r3, r2
 800304e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	4313      	orrs	r3, r2
 8003064:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d00b      	beq.n	800308c <HAL_GPIO_Init+0x1e4>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d007      	beq.n	800308c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003080:	2b11      	cmp	r3, #17
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b12      	cmp	r3, #18
 800308a:	d130      	bne.n	80030ee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80030c2:	2201      	movs	r2, #1
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0201 	and.w	r2, r3, #1
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d107      	bne.n	8003106 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d11b      	bne.n	8003136 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d017      	beq.n	8003136 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	4013      	ands	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d07c      	beq.n	800323c <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003142:	4a47      	ldr	r2, [pc, #284]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3318      	adds	r3, #24
 800314a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	4013      	ands	r3, r2
 8003164:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	0a9a      	lsrs	r2, r3, #10
 800316a:	4b3e      	ldr	r3, [pc, #248]	@ (8003264 <HAL_GPIO_Init+0x3bc>)
 800316c:	4013      	ands	r3, r2
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	00d2      	lsls	r2, r2, #3
 8003176:	4093      	lsls	r3, r2
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800317e:	4938      	ldr	r1, [pc, #224]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3318      	adds	r3, #24
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800318c:	4b34      	ldr	r3, [pc, #208]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	4013      	ands	r3, r2
 800319a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80031b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80031b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80031da:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80031e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003206:	4a16      	ldr	r2, [pc, #88]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800320e:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 8003210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003214:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	4013      	ands	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003234:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <HAL_GPIO_Init+0x3b8>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3301      	adds	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f ae35 	bne.w	8002ebc <HAL_GPIO_Init+0x14>
  }
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	3724      	adds	r7, #36	@ 0x24
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	46022000 	.word	0x46022000
 8003264:	002f7f7f 	.word	0x002f7f7f

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003278:	787b      	ldrb	r3, [r7, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003284:	e002      	b.n	800328c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80032ae:	4a0c      	ldr	r2, [pc, #48]	@ (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f814 	bl	80032e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80032bc:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80032c8:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f812 	bl	80032fa <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	46022000 	.word	0x46022000

080032e4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e08d      	b.n	800343e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd ff32 	bl	80011a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	@ 0x24
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003360:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003370:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	e006      	b.n	8003398 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003396:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d108      	bne.n	80033b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	e007      	b.n	80033c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69d9      	ldr	r1, [r3, #28]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	461a      	mov	r2, r3
 8003456:	4603      	mov	r3, r0
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	460b      	mov	r3, r1
 800345c:	813b      	strh	r3, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b20      	cmp	r3, #32
 800346c:	f040 80f9 	bne.w	8003662 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_I2C_Mem_Write+0x34>
 8003476:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003482:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0ed      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_I2C_Mem_Write+0x4e>
 8003492:	2302      	movs	r3, #2
 8003494:	e0e6      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800349e:	f7fe fdb7 	bl	8002010 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2319      	movs	r3, #25
 80034aa:	2201      	movs	r2, #1
 80034ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fac3 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0d1      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2221      	movs	r2, #33	@ 0x21
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2240      	movs	r2, #64	@ 0x40
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034e8:	88f8      	ldrh	r0, [r7, #6]
 80034ea:	893a      	ldrh	r2, [r7, #8]
 80034ec:	8979      	ldrh	r1, [r7, #10]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	4603      	mov	r3, r0
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f9d3 	bl	80038a4 <I2C_RequestMemoryWrite>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0a9      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2bff      	cmp	r3, #255	@ 0xff
 8003518:	d90e      	bls.n	8003538 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	@ 0xff
 800351e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003524:	b2da      	uxtb	r2, r3
 8003526:	8979      	ldrh	r1, [r7, #10]
 8003528:	2300      	movs	r3, #0
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fc47 	bl	8003dc4 <I2C_TransferConfig>
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	b2da      	uxtb	r2, r3
 8003548:	8979      	ldrh	r1, [r7, #10]
 800354a:	2300      	movs	r3, #0
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fc36 	bl	8003dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fac6 	bl	8003aee <I2C_WaitOnTXISFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e07b      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d034      	beq.n	8003610 <HAL_I2C_Mem_Write+0x1c8>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d130      	bne.n	8003610 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	2200      	movs	r2, #0
 80035b6:	2180      	movs	r1, #128	@ 0x80
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fa3f 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e04d      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2bff      	cmp	r3, #255	@ 0xff
 80035d0:	d90e      	bls.n	80035f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	22ff      	movs	r2, #255	@ 0xff
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	8979      	ldrh	r1, [r7, #10]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fbeb 	bl	8003dc4 <I2C_TransferConfig>
 80035ee:	e00f      	b.n	8003610 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	8979      	ldrh	r1, [r7, #10]
 8003602:	2300      	movs	r3, #0
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fbda 	bl	8003dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d19e      	bne.n	8003558 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 faac 	bl	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e01a      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2220      	movs	r2, #32
 8003634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_I2C_Mem_Write+0x224>)
 8003642:	400b      	ands	r3, r1
 8003644:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e000      	b.n	8003664 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	fe00e800 	.word	0xfe00e800

08003670 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	4603      	mov	r3, r0
 8003680:	817b      	strh	r3, [r7, #10]
 8003682:	460b      	mov	r3, r1
 8003684:	813b      	strh	r3, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	f040 80fd 	bne.w	8003892 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x34>
 800369e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0f1      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_I2C_Mem_Read+0x4e>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e0ea      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036c6:	f7fe fca3 	bl	8002010 <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	2319      	movs	r3, #25
 80036d2:	2201      	movs	r2, #1
 80036d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f9af 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0d5      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2222      	movs	r2, #34	@ 0x22
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2240      	movs	r2, #64	@ 0x40
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003710:	88f8      	ldrh	r0, [r7, #6]
 8003712:	893a      	ldrh	r2, [r7, #8]
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	4603      	mov	r3, r0
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f913 	bl	800394c <I2C_RequestMemoryRead>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0ad      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2bff      	cmp	r3, #255	@ 0xff
 8003740:	d90e      	bls.n	8003760 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	22ff      	movs	r2, #255	@ 0xff
 8003746:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	b2da      	uxtb	r2, r3
 800374e:	8979      	ldrh	r1, [r7, #10]
 8003750:	4b52      	ldr	r3, [pc, #328]	@ (800389c <HAL_I2C_Mem_Read+0x22c>)
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb33 	bl	8003dc4 <I2C_TransferConfig>
 800375e:	e00f      	b.n	8003780 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376e:	b2da      	uxtb	r2, r3
 8003770:	8979      	ldrh	r1, [r7, #10]
 8003772:	4b4a      	ldr	r3, [pc, #296]	@ (800389c <HAL_I2C_Mem_Read+0x22c>)
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fb22 	bl	8003dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	2200      	movs	r2, #0
 8003788:	2104      	movs	r1, #4
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f956 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07c      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d034      	beq.n	8003840 <HAL_I2C_Mem_Read+0x1d0>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d130      	bne.n	8003840 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	@ 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f927 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e04d      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2bff      	cmp	r3, #255	@ 0xff
 8003800:	d90e      	bls.n	8003820 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	22ff      	movs	r2, #255	@ 0xff
 8003806:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380c:	b2da      	uxtb	r2, r3
 800380e:	8979      	ldrh	r1, [r7, #10]
 8003810:	2300      	movs	r3, #0
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fad3 	bl	8003dc4 <I2C_TransferConfig>
 800381e:	e00f      	b.n	8003840 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	b2da      	uxtb	r2, r3
 8003830:	8979      	ldrh	r1, [r7, #10]
 8003832:	2300      	movs	r3, #0
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fac2 	bl	8003dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d19a      	bne.n	8003780 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f994 	bl	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e01a      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2220      	movs	r2, #32
 8003864:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_I2C_Mem_Read+0x230>)
 8003872:	400b      	ands	r3, r1
 8003874:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
  }
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	80002400 	.word	0x80002400
 80038a0:	fe00e800 	.word	0xfe00e800

080038a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	461a      	mov	r2, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	460b      	mov	r3, r1
 80038b8:	813b      	strh	r3, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <I2C_RequestMemoryWrite+0xa4>)
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fa79 	bl	8003dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	69b9      	ldr	r1, [r7, #24]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f909 	bl	8003aee <I2C_WaitOnTXISFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e02c      	b.n	8003940 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038f6:	e015      	b.n	8003924 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038f8:	893b      	ldrh	r3, [r7, #8]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f8ef 	bl	8003aee <I2C_WaitOnTXISFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e012      	b.n	8003940 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800391a:	893b      	ldrh	r3, [r7, #8]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2200      	movs	r2, #0
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f884 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	80002000 	.word	0x80002000

0800394c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	460b      	mov	r3, r1
 8003960:	813b      	strh	r3, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	4b20      	ldr	r3, [pc, #128]	@ (80039f0 <I2C_RequestMemoryRead+0xa4>)
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fa26 	bl	8003dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	69b9      	ldr	r1, [r7, #24]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f8b6 	bl	8003aee <I2C_WaitOnTXISFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e02c      	b.n	80039e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003992:	893b      	ldrh	r3, [r7, #8]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	629a      	str	r2, [r3, #40]	@ 0x28
 800399c:	e015      	b.n	80039ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800399e:	893b      	ldrh	r3, [r7, #8]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f89c 	bl	8003aee <I2C_WaitOnTXISFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e012      	b.n	80039e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2140      	movs	r1, #64	@ 0x40
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f831 	bl	8003a3c <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	80002000 	.word	0x80002000

080039f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d103      	bne.n	8003a12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d007      	beq.n	8003a30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	619a      	str	r2, [r3, #24]
  }
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a4c:	e03b      	b.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f8d6 	bl	8003c04 <I2C_IsErrorOccurred>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e041      	b.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d02d      	beq.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fad1 	bl	8002010 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d122      	bne.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d113      	bne.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00f      	b.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d0b4      	beq.n	8003a4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003afa:	e033      	b.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f87f 	bl	8003c04 <I2C_IsErrorOccurred>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e031      	b.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d025      	beq.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7fe fa7a 	bl	8002010 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11a      	bne.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d013      	beq.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e007      	b.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d1c4      	bne.n	8003afc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b88:	e02f      	b.n	8003bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f838 	bl	8003c04 <I2C_IsErrorOccurred>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e02d      	b.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fe fa37 	bl	8002010 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11a      	bne.n	8003bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d013      	beq.n	8003bea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e007      	b.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d1c8      	bne.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d068      	beq.n	8003d02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2210      	movs	r2, #16
 8003c36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c38:	e049      	b.n	8003cce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d045      	beq.n	8003cce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fe f9e5 	bl	8002010 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_IsErrorOccurred+0x54>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13a      	bne.n	8003cce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7a:	d121      	bne.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c82:	d01d      	beq.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d01a      	beq.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c9a:	f7fe f9b9 	bl	8002010 <HAL_GetTick>
 8003c9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca0:	e00e      	b.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ca2:	f7fe f9b5 	bl	8002010 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b19      	cmp	r3, #25
 8003cae:	d907      	bls.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f043 0320 	orr.w	r3, r3, #32
 8003cb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cbe:	e006      	b.n	8003cce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d1e9      	bne.n	8003ca2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d003      	beq.n	8003ce4 <I2C_IsErrorOccurred+0xe0>
 8003cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0aa      	beq.n	8003c3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d103      	bne.n	8003cf4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f043 0308 	orr.w	r3, r3, #8
 8003d3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01c      	beq.n	8003db2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff fe3b 	bl	80039f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <I2C_IsErrorOccurred+0x1bc>)
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3728      	adds	r7, #40	@ 0x28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	fe00e800 	.word	0xfe00e800

08003dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	817b      	strh	r3, [r7, #10]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ddc:	7a7b      	ldrb	r3, [r7, #9]
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003de4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003df2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	0d5b      	lsrs	r3, r3, #21
 8003dfe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <I2C_TransferConfig+0x60>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	43db      	mvns	r3, r3
 8003e08:	ea02 0103 	and.w	r1, r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	03ff63ff 	.word	0x03ff63ff

08003e28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d138      	bne.n	8003eb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e032      	b.n	8003eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	@ 0x24
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d139      	bne.n	8003f48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e033      	b.n	8003f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2224      	movs	r2, #36	@ 0x24
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003f60:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f68:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d10b      	bne.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f78:	d905      	bls.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f7a:	4b33      	ldr	r3, [pc, #204]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4a32      	ldr	r2, [pc, #200]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f84:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e057      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f90:	d90a      	bls.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f92:	4b2d      	ldr	r3, [pc, #180]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fa4:	60d3      	str	r3, [r2, #12]
 8003fa6:	e007      	b.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003fa8:	4b27      	ldr	r3, [pc, #156]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003fb0:	4925      	ldr	r1, [pc, #148]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fb8:	4b24      	ldr	r3, [pc, #144]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	2232      	movs	r2, #50	@ 0x32
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	4a21      	ldr	r2, [pc, #132]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003fd6:	e002      	b.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003fde:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f3      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01b      	beq.n	800402e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003ff6:	4b15      	ldr	r3, [pc, #84]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	099b      	lsrs	r3, r3, #6
 8004002:	2232      	movs	r2, #50	@ 0x32
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	4a11      	ldr	r2, [pc, #68]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004014:	e002      	b.n	800401c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b01      	subs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800401c:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f3      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e000      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	46020800 	.word	0x46020800
 800404c:	20000000 	.word	0x20000000
 8004050:	10624dd3 	.word	0x10624dd3

08004054 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004058:	4b04      	ldr	r3, [pc, #16]	@ (800406c <HAL_PWREx_GetVoltageRange+0x18>)
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	46020800 	.word	0x46020800

08004070 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	4a04      	ldr	r2, [pc, #16]	@ (800408c <HAL_PWREx_EnableVddUSB+0x1c>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800407e:	6113      	str	r3, [r2, #16]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	46020800 	.word	0x46020800

08004090 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	4a04      	ldr	r2, [pc, #16]	@ (80040ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800409a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800409e:	6113      	str	r3, [r2, #16]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	46020800 	.word	0x46020800

080040b0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <HAL_PWREx_EnableVddA+0x1c>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4a04      	ldr	r2, [pc, #16]	@ (80040cc <HAL_PWREx_EnableVddA+0x1c>)
 80040ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040be:	6113      	str	r3, [r2, #16]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	46020800 	.word	0x46020800

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08e      	sub	sp, #56	@ 0x38
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f000 bec8 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ea:	4b99      	ldr	r3, [pc, #612]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f4:	4b96      	ldr	r3, [pc, #600]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 816c 	beq.w	80043e4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_RCC_OscConfig+0x52>
 8004112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004114:	2b0c      	cmp	r3, #12
 8004116:	f040 80de 	bne.w	80042d6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800411a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411c:	2b01      	cmp	r3, #1
 800411e:	f040 80da 	bne.w	80042d6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f000 bea5 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004134:	4b86      	ldr	r3, [pc, #536]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <HAL_RCC_OscConfig+0x7a>
 8004140:	4b83      	ldr	r3, [pc, #524]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004148:	e005      	b.n	8004156 <HAL_RCC_OscConfig+0x86>
 800414a:	4b81      	ldr	r3, [pc, #516]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800414c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004156:	4293      	cmp	r3, r2
 8004158:	d255      	bcs.n	8004206 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f9d9 	bl	800551c <RCC_SetFlashLatencyFromMSIRange>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f000 be82 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004176:	4b76      	ldr	r3, [pc, #472]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	4a75      	ldr	r2, [pc, #468]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800417c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004180:	6093      	str	r3, [r2, #8]
 8004182:	4b73      	ldr	r3, [pc, #460]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	4970      	ldr	r1, [pc, #448]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800419c:	d309      	bcc.n	80041b2 <HAL_RCC_OscConfig+0xe2>
 800419e:	4b6c      	ldr	r3, [pc, #432]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f023 021f 	bic.w	r2, r3, #31
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	4969      	ldr	r1, [pc, #420]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60cb      	str	r3, [r1, #12]
 80041b0:	e07e      	b.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da0a      	bge.n	80041d0 <HAL_RCC_OscConfig+0x100>
 80041ba:	4b65      	ldr	r3, [pc, #404]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	015b      	lsls	r3, r3, #5
 80041c8:	4961      	ldr	r1, [pc, #388]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60cb      	str	r3, [r1, #12]
 80041ce:	e06f      	b.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d8:	d30a      	bcc.n	80041f0 <HAL_RCC_OscConfig+0x120>
 80041da:	4b5d      	ldr	r3, [pc, #372]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	029b      	lsls	r3, r3, #10
 80041e8:	4959      	ldr	r1, [pc, #356]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]
 80041ee:	e05f      	b.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
 80041f0:	4b57      	ldr	r3, [pc, #348]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	03db      	lsls	r3, r3, #15
 80041fe:	4954      	ldr	r1, [pc, #336]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004200:	4313      	orrs	r3, r2
 8004202:	60cb      	str	r3, [r1, #12]
 8004204:	e054      	b.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004206:	4b52      	ldr	r3, [pc, #328]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	4a51      	ldr	r2, [pc, #324]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800420c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004210:	6093      	str	r3, [r2, #8]
 8004212:	4b4f      	ldr	r3, [pc, #316]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	494c      	ldr	r1, [pc, #304]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800422c:	d309      	bcc.n	8004242 <HAL_RCC_OscConfig+0x172>
 800422e:	4b48      	ldr	r3, [pc, #288]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f023 021f 	bic.w	r2, r3, #31
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4945      	ldr	r1, [pc, #276]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800423c:	4313      	orrs	r3, r2
 800423e:	60cb      	str	r3, [r1, #12]
 8004240:	e028      	b.n	8004294 <HAL_RCC_OscConfig+0x1c4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	da0a      	bge.n	8004260 <HAL_RCC_OscConfig+0x190>
 800424a:	4b41      	ldr	r3, [pc, #260]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	015b      	lsls	r3, r3, #5
 8004258:	493d      	ldr	r1, [pc, #244]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800425a:	4313      	orrs	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]
 800425e:	e019      	b.n	8004294 <HAL_RCC_OscConfig+0x1c4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004268:	d30a      	bcc.n	8004280 <HAL_RCC_OscConfig+0x1b0>
 800426a:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	4935      	ldr	r1, [pc, #212]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800427a:	4313      	orrs	r3, r2
 800427c:	60cb      	str	r3, [r1, #12]
 800427e:	e009      	b.n	8004294 <HAL_RCC_OscConfig+0x1c4>
 8004280:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	03db      	lsls	r3, r3, #15
 800428e:	4930      	ldr	r1, [pc, #192]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004290:	4313      	orrs	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f93c 	bl	800551c <RCC_SetFlashLatencyFromMSIRange>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f000 bde5 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80042b0:	f001 f8de 	bl	8005470 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042b4:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <HAL_RCC_OscConfig+0x284>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fd fe1f 	bl	8001efc <HAL_InitTick>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80042c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 808a 	beq.w	80043e2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80042ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042d2:	f000 bdd2 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d066      	beq.n	80043ac <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80042de:	4b1c      	ldr	r3, [pc, #112]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042ea:	f7fd fe91 	bl	8002010 <HAL_GetTick>
 80042ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042f0:	e009      	b.n	8004306 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042f2:	f7fd fe8d 	bl	8002010 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d902      	bls.n	8004306 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	f000 bdba 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004306:	4b12      	ldr	r3, [pc, #72]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ef      	beq.n	80042f2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4a0e      	ldr	r2, [pc, #56]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004318:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800431c:	6093      	str	r3, [r2, #8]
 800431e:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	4909      	ldr	r1, [pc, #36]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004338:	d30e      	bcc.n	8004358 <HAL_RCC_OscConfig+0x288>
 800433a:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f023 021f 	bic.w	r2, r3, #31
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4902      	ldr	r1, [pc, #8]	@ (8004350 <HAL_RCC_OscConfig+0x280>)
 8004348:	4313      	orrs	r3, r2
 800434a:	60cb      	str	r3, [r1, #12]
 800434c:	e04a      	b.n	80043e4 <HAL_RCC_OscConfig+0x314>
 800434e:	bf00      	nop
 8004350:	46020c00 	.word	0x46020c00
 8004354:	20000004 	.word	0x20000004
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	da0a      	bge.n	8004376 <HAL_RCC_OscConfig+0x2a6>
 8004360:	4b98      	ldr	r3, [pc, #608]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	015b      	lsls	r3, r3, #5
 800436e:	4995      	ldr	r1, [pc, #596]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	60cb      	str	r3, [r1, #12]
 8004374:	e036      	b.n	80043e4 <HAL_RCC_OscConfig+0x314>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437e:	d30a      	bcc.n	8004396 <HAL_RCC_OscConfig+0x2c6>
 8004380:	4b90      	ldr	r3, [pc, #576]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	498d      	ldr	r1, [pc, #564]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	60cb      	str	r3, [r1, #12]
 8004394:	e026      	b.n	80043e4 <HAL_RCC_OscConfig+0x314>
 8004396:	4b8b      	ldr	r3, [pc, #556]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	03db      	lsls	r3, r3, #15
 80043a4:	4987      	ldr	r1, [pc, #540]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60cb      	str	r3, [r1, #12]
 80043aa:	e01b      	b.n	80043e4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80043ac:	4b85      	ldr	r3, [pc, #532]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a84      	ldr	r2, [pc, #528]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043b8:	f7fd fe2a 	bl	8002010 <HAL_GetTick>
 80043bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043be:	e009      	b.n	80043d4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043c0:	f7fd fe26 	bl	8002010 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d902      	bls.n	80043d4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	f000 bd53 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043d4:	4b7b      	ldr	r3, [pc, #492]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ef      	bne.n	80043c0 <HAL_RCC_OscConfig+0x2f0>
 80043e0:	e000      	b.n	80043e4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 808b 	beq.w	8004508 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_OscConfig+0x334>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d109      	bne.n	8004412 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004400:	2b03      	cmp	r3, #3
 8004402:	d106      	bne.n	8004412 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d17d      	bne.n	8004508 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f000 bd34 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800441a:	d106      	bne.n	800442a <HAL_RCC_OscConfig+0x35a>
 800441c:	4b69      	ldr	r3, [pc, #420]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a68      	ldr	r2, [pc, #416]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e041      	b.n	80044ae <HAL_RCC_OscConfig+0x3de>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004432:	d112      	bne.n	800445a <HAL_RCC_OscConfig+0x38a>
 8004434:	4b63      	ldr	r3, [pc, #396]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a62      	ldr	r2, [pc, #392]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800443a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b60      	ldr	r3, [pc, #384]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5f      	ldr	r2, [pc, #380]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004446:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b5d      	ldr	r3, [pc, #372]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5c      	ldr	r2, [pc, #368]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	e029      	b.n	80044ae <HAL_RCC_OscConfig+0x3de>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004462:	d112      	bne.n	800448a <HAL_RCC_OscConfig+0x3ba>
 8004464:	4b57      	ldr	r3, [pc, #348]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a56      	ldr	r2, [pc, #344]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800446a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b54      	ldr	r3, [pc, #336]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a53      	ldr	r2, [pc, #332]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	4b51      	ldr	r3, [pc, #324]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a50      	ldr	r2, [pc, #320]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e011      	b.n	80044ae <HAL_RCC_OscConfig+0x3de>
 800448a:	4b4e      	ldr	r3, [pc, #312]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4d      	ldr	r2, [pc, #308]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a4a      	ldr	r2, [pc, #296]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800449c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b48      	ldr	r3, [pc, #288]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a47      	ldr	r2, [pc, #284]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80044a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80044ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d014      	beq.n	80044e0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80044b6:	f7fd fdab 	bl	8002010 <HAL_GetTick>
 80044ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044bc:	e009      	b.n	80044d2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044be:	f7fd fda7 	bl	8002010 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	@ 0x64
 80044ca:	d902      	bls.n	80044d2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	f000 bcd4 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d2:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ef      	beq.n	80044be <HAL_RCC_OscConfig+0x3ee>
 80044de:	e013      	b.n	8004508 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80044e0:	f7fd fd96 	bl	8002010 <HAL_GetTick>
 80044e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e6:	e009      	b.n	80044fc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fd fd92 	bl	8002010 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	@ 0x64
 80044f4:	d902      	bls.n	80044fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	f000 bcbf 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044fc:	4b31      	ldr	r3, [pc, #196]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ef      	bne.n	80044e8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d05f      	beq.n	80045d4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	2b04      	cmp	r3, #4
 8004518:	d005      	beq.n	8004526 <HAL_RCC_OscConfig+0x456>
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d114      	bne.n	800454a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	2b02      	cmp	r3, #2
 8004524:	d111      	bne.n	800454a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f000 bca3 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b23      	ldr	r3, [pc, #140]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	4920      	ldr	r1, [pc, #128]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004548:	e044      	b.n	80045d4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d024      	beq.n	800459c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004552:	4b1c      	ldr	r3, [pc, #112]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1b      	ldr	r2, [pc, #108]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800455e:	f7fd fd57 	bl	8002010 <HAL_GetTick>
 8004562:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004564:	e009      	b.n	800457a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004566:	f7fd fd53 	bl	8002010 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d902      	bls.n	800457a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	f000 bc80 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457a:	4b12      	ldr	r3, [pc, #72]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ef      	beq.n	8004566 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	490b      	ldr	r1, [pc, #44]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 8004596:	4313      	orrs	r3, r2
 8004598:	610b      	str	r3, [r1, #16]
 800459a:	e01b      	b.n	80045d4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800459c:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a08      	ldr	r2, [pc, #32]	@ (80045c4 <HAL_RCC_OscConfig+0x4f4>)
 80045a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045a8:	f7fd fd32 	bl	8002010 <HAL_GetTick>
 80045ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fd fd2e 	bl	8002010 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d904      	bls.n	80045c8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	f000 bc5b 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
 80045c4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c8:	4baf      	ldr	r3, [pc, #700]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ed      	bne.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80c8 	beq.w	8004772 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e8:	4ba7      	ldr	r3, [pc, #668]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80045ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d111      	bne.n	800461a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f6:	4ba4      	ldr	r3, [pc, #656]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045fc:	4aa2      	ldr	r2, [pc, #648]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80045fe:	f043 0304 	orr.w	r3, r3, #4
 8004602:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004606:	4ba0      	ldr	r3, [pc, #640]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800461a:	4b9c      	ldr	r3, [pc, #624]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d119      	bne.n	800465a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004626:	4b99      	ldr	r3, [pc, #612]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	4a98      	ldr	r2, [pc, #608]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004632:	f7fd fced 	bl	8002010 <HAL_GetTick>
 8004636:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004638:	e009      	b.n	800464e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fd fce9 	bl	8002010 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d902      	bls.n	800464e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	f000 bc16 	b.w	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800464e:	4b8f      	ldr	r3, [pc, #572]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ef      	beq.n	800463a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d05f      	beq.n	8004722 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004662:	4b89      	ldr	r3, [pc, #548]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004668:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004674:	429a      	cmp	r2, r3
 8004676:	d037      	beq.n	80046e8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e3f4      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800469a:	4b7b      	ldr	r3, [pc, #492]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 800469c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a0:	4a79      	ldr	r2, [pc, #484]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80046a2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80046a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80046aa:	f7fd fcb1 	bl	8002010 <HAL_GetTick>
 80046ae:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b2:	f7fd fcad 	bl	8002010 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e3da      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046c4:	4b70      	ldr	r3, [pc, #448]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80046c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ef      	bne.n	80046b2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80046d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80046d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	4969      	ldr	r1, [pc, #420]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80046e8:	4b67      	ldr	r3, [pc, #412]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80046ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ee:	4a66      	ldr	r2, [pc, #408]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80046f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80046f8:	f7fd fc8a 	bl	8002010 <HAL_GetTick>
 80046fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004700:	f7fd fc86 	bl	8002010 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b05      	cmp	r3, #5
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e3b3      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004712:	4b5d      	ldr	r3, [pc, #372]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ef      	beq.n	8004700 <HAL_RCC_OscConfig+0x630>
 8004720:	e01b      	b.n	800475a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004722:	4b59      	ldr	r3, [pc, #356]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004728:	4a57      	ldr	r2, [pc, #348]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 800472a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800472e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004732:	f7fd fc6d 	bl	8002010 <HAL_GetTick>
 8004736:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fd fc69 	bl	8002010 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b05      	cmp	r3, #5
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e396      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800474c:	4b4e      	ldr	r3, [pc, #312]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 800474e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1ef      	bne.n	800473a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800475a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800475e:	2b01      	cmp	r3, #1
 8004760:	d107      	bne.n	8004772 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b49      	ldr	r3, [pc, #292]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004768:	4a47      	ldr	r2, [pc, #284]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 800476a:	f023 0304 	bic.w	r3, r3, #4
 800476e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8111 	beq.w	80049a2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004786:	4b40      	ldr	r3, [pc, #256]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d111      	bne.n	80047b8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004794:	4b3c      	ldr	r3, [pc, #240]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479a:	4a3b      	ldr	r2, [pc, #236]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047a4:	4b38      	ldr	r3, [pc, #224]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047b8:	4b34      	ldr	r3, [pc, #208]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d118      	bne.n	80047f6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047c4:	4b31      	ldr	r3, [pc, #196]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	4a30      	ldr	r2, [pc, #192]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d0:	f7fd fc1e 	bl	8002010 <HAL_GetTick>
 80047d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d8:	f7fd fc1a 	bl	8002010 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e347      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047ea:	4b28      	ldr	r3, [pc, #160]	@ (800488c <HAL_RCC_OscConfig+0x7bc>)
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01f      	beq.n	8004842 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800481e:	4b1a      	ldr	r3, [pc, #104]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800482e:	e018      	b.n	8004862 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004830:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004836:	4a14      	ldr	r2, [pc, #80]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004840:	e00f      	b.n	8004862 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004842:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004848:	4a0f      	ldr	r2, [pc, #60]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004852:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 8004854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004858:	4a0b      	ldr	r2, [pc, #44]	@ (8004888 <HAL_RCC_OscConfig+0x7b8>)
 800485a:	f023 0304 	bic.w	r3, r3, #4
 800485e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d057      	beq.n	800491a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800486a:	f7fd fbd1 	bl	8002010 <HAL_GetTick>
 800486e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004870:	e00e      	b.n	8004890 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd fbcd 	bl	8002010 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d905      	bls.n	8004890 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e2f8      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
 8004888:	46020c00 	.word	0x46020c00
 800488c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004890:	4b9c      	ldr	r3, [pc, #624]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0e9      	beq.n	8004872 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01b      	beq.n	80048e2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048aa:	4b96      	ldr	r3, [pc, #600]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80048ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b0:	4a94      	ldr	r2, [pc, #592]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80048b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fd fba8 	bl	8002010 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e2d3      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048d2:	4b8c      	ldr	r3, [pc, #560]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80048d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ed      	beq.n	80048bc <HAL_RCC_OscConfig+0x7ec>
 80048e0:	e053      	b.n	800498a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048e2:	4b88      	ldr	r3, [pc, #544]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80048e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e8:	4a86      	ldr	r2, [pc, #536]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80048ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048f2:	e00a      	b.n	800490a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f4:	f7fd fb8c 	bl	8002010 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e2b7      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800490a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 800490c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ed      	bne.n	80048f4 <HAL_RCC_OscConfig+0x824>
 8004918:	e037      	b.n	800498a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800491a:	f7fd fb79 	bl	8002010 <HAL_GetTick>
 800491e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fd fb75 	bl	8002010 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e2a0      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004938:	4b72      	ldr	r3, [pc, #456]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 800493a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ed      	bne.n	8004922 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004946:	4b6f      	ldr	r3, [pc, #444]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004954:	4b6b      	ldr	r3, [pc, #428]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800495a:	4a6a      	ldr	r2, [pc, #424]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 800495c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004960:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004964:	e00a      	b.n	800497c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fd fb53 	bl	8002010 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e27e      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800497c:	4b61      	ldr	r3, [pc, #388]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 800497e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ed      	bne.n	8004966 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800498a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004992:	4b5c      	ldr	r3, [pc, #368]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004998:	4a5a      	ldr	r2, [pc, #360]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 800499a:	f023 0304 	bic.w	r3, r3, #4
 800499e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d036      	beq.n	8004a1c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d019      	beq.n	80049ea <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80049b6:	4b53      	ldr	r3, [pc, #332]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a52      	ldr	r2, [pc, #328]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80049bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049c2:	f7fd fb25 	bl	8002010 <HAL_GetTick>
 80049c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ca:	f7fd fb21 	bl	8002010 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e24e      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049dc:	4b49      	ldr	r3, [pc, #292]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x8fa>
 80049e8:	e018      	b.n	8004a1c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80049ea:	4b46      	ldr	r3, [pc, #280]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a45      	ldr	r2, [pc, #276]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 80049f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049f6:	f7fd fb0b 	bl	8002010 <HAL_GetTick>
 80049fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049fe:	f7fd fb07 	bl	8002010 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e234      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a10:	4b3c      	ldr	r3, [pc, #240]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f0      	bne.n	80049fe <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d036      	beq.n	8004a96 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d019      	beq.n	8004a64 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a30:	4b34      	ldr	r3, [pc, #208]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a33      	ldr	r2, [pc, #204]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a3c:	f7fd fae8 	bl	8002010 <HAL_GetTick>
 8004a40:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a44:	f7fd fae4 	bl	8002010 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e211      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a56:	4b2b      	ldr	r3, [pc, #172]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x974>
 8004a62:	e018      	b.n	8004a96 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004a64:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004a6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a70:	f7fd face 	bl	8002010 <HAL_GetTick>
 8004a74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a78:	f7fd faca 	bl	8002010 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1f7      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d07f      	beq.n	8004ba2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d062      	beq.n	8004b70 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004aaa:	4b16      	ldr	r3, [pc, #88]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a15      	ldr	r2, [pc, #84]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004ab0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ab4:	6093      	str	r3, [r2, #8]
 8004ab6:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	4910      	ldr	r1, [pc, #64]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ad0:	d309      	bcc.n	8004ae6 <HAL_RCC_OscConfig+0xa16>
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f023 021f 	bic.w	r2, r3, #31
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	4909      	ldr	r1, [pc, #36]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60cb      	str	r3, [r1, #12]
 8004ae4:	e02a      	b.n	8004b3c <HAL_RCC_OscConfig+0xa6c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da0c      	bge.n	8004b08 <HAL_RCC_OscConfig+0xa38>
 8004aee:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	015b      	lsls	r3, r3, #5
 8004afc:	4901      	ldr	r1, [pc, #4]	@ (8004b04 <HAL_RCC_OscConfig+0xa34>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60cb      	str	r3, [r1, #12]
 8004b02:	e01b      	b.n	8004b3c <HAL_RCC_OscConfig+0xa6c>
 8004b04:	46020c00 	.word	0x46020c00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b10:	d30a      	bcc.n	8004b28 <HAL_RCC_OscConfig+0xa58>
 8004b12:	4ba1      	ldr	r3, [pc, #644]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	029b      	lsls	r3, r3, #10
 8004b20:	499d      	ldr	r1, [pc, #628]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60cb      	str	r3, [r1, #12]
 8004b26:	e009      	b.n	8004b3c <HAL_RCC_OscConfig+0xa6c>
 8004b28:	4b9b      	ldr	r3, [pc, #620]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	03db      	lsls	r3, r3, #15
 8004b36:	4998      	ldr	r1, [pc, #608]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b3c:	4b96      	ldr	r3, [pc, #600]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a95      	ldr	r2, [pc, #596]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b42:	f043 0310 	orr.w	r3, r3, #16
 8004b46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b48:	f7fd fa62 	bl	8002010 <HAL_GetTick>
 8004b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b50:	f7fd fa5e 	bl	8002010 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e18b      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b62:	4b8d      	ldr	r3, [pc, #564]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0xa80>
 8004b6e:	e018      	b.n	8004ba2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004b70:	4b89      	ldr	r3, [pc, #548]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a88      	ldr	r2, [pc, #544]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b76:	f023 0310 	bic.w	r3, r3, #16
 8004b7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b7c:	f7fd fa48 	bl	8002010 <HAL_GetTick>
 8004b80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b84:	f7fd fa44 	bl	8002010 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e171      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b96:	4b80      	ldr	r3, [pc, #512]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8166 	beq.w	8004e78 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb2:	4b79      	ldr	r3, [pc, #484]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	f000 80f2 	beq.w	8004da4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	f040 80c5 	bne.w	8004d54 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b73      	ldr	r3, [pc, #460]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a72      	ldr	r2, [pc, #456]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004bd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bd4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bd6:	f7fd fa1b 	bl	8002010 <HAL_GetTick>
 8004bda:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fd fa17 	bl	8002010 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e144      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bf0:	4b69      	ldr	r3, [pc, #420]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfc:	4b66      	ldr	r3, [pc, #408]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d111      	bne.n	8004c2e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	4b63      	ldr	r3, [pc, #396]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c10:	4a61      	ldr	r2, [pc, #388]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004c12:	f043 0304 	orr.w	r3, r3, #4
 8004c16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d9c <HAL_RCC_OscConfig+0xccc>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c3a:	d102      	bne.n	8004c42 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c42:	4b56      	ldr	r3, [pc, #344]	@ (8004d9c <HAL_RCC_OscConfig+0xccc>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4a55      	ldr	r2, [pc, #340]	@ (8004d9c <HAL_RCC_OscConfig+0xccc>)
 8004c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c4e:	4b52      	ldr	r3, [pc, #328]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c62:	3a01      	subs	r2, #1
 8004c64:	0212      	lsls	r2, r2, #8
 8004c66:	4311      	orrs	r1, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	494a      	ldr	r1, [pc, #296]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c74:	4b48      	ldr	r3, [pc, #288]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c78:	4b49      	ldr	r3, [pc, #292]	@ (8004da0 <HAL_RCC_OscConfig+0xcd0>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c80:	3a01      	subs	r2, #1
 8004c82:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	0252      	lsls	r2, r2, #9
 8004c8e:	b292      	uxth	r2, r2
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0412      	lsls	r2, r2, #16
 8004c9a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004ca4:	3a01      	subs	r2, #1
 8004ca6:	0612      	lsls	r2, r2, #24
 8004ca8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004cac:	430a      	orrs	r2, r1
 8004cae:	493a      	ldr	r1, [pc, #232]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004cb4:	4b38      	ldr	r3, [pc, #224]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	4a37      	ldr	r2, [pc, #220]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc4:	4a34      	ldr	r2, [pc, #208]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004cca:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	4a32      	ldr	r2, [pc, #200]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004cd0:	f043 0310 	orr.w	r3, r3, #16
 8004cd4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004cd6:	4b30      	ldr	r3, [pc, #192]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	f023 020c 	bic.w	r2, r3, #12
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce2:	492d      	ldr	r1, [pc, #180]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004ce8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d9c <HAL_RCC_OscConfig+0xccc>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	@ (8004d9c <HAL_RCC_OscConfig+0xccc>)
 8004cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cfa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004cfc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d04:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0a:	4a23      	ldr	r2, [pc, #140]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d14:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1f      	ldr	r2, [pc, #124]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d20:	f7fd f976 	bl	8002010 <HAL_GetTick>
 8004d24:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fd f972 	bl	8002010 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e09f      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d3a:	4b17      	ldr	r3, [pc, #92]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	4a13      	ldr	r2, [pc, #76]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d50:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d52:	e091      	b.n	8004e78 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0f      	ldr	r2, [pc, #60]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d5e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d60:	f7fd f956 	bl	8002010 <HAL_GetTick>
 8004d64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fd f952 	bl	8002010 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e07f      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d7a:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	4a03      	ldr	r2, [pc, #12]	@ (8004d98 <HAL_RCC_OscConfig+0xcc8>)
 8004d8c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d90:	f023 0303 	bic.w	r3, r3, #3
 8004d94:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d96:	e06f      	b.n	8004e78 <HAL_RCC_OscConfig+0xda8>
 8004d98:	46020c00 	.word	0x46020c00
 8004d9c:	46020800 	.word	0x46020800
 8004da0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004da4:	4b37      	ldr	r3, [pc, #220]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004daa:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d039      	beq.n	8004e2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0203 	and.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d132      	bne.n	8004e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d129      	bne.n	8004e2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d122      	bne.n	8004e2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d11a      	bne.n	8004e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	0a5b      	lsrs	r3, r3, #9
 8004dfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d111      	bne.n	8004e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	0c1b      	lsrs	r3, r3, #16
 8004e0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e14:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d108      	bne.n	8004e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e024      	b.n	8004e7a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e30:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d01a      	beq.n	8004e78 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	4a0f      	ldr	r2, [pc, #60]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004e48:	f023 0310 	bic.w	r3, r3, #16
 8004e4c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd f8df 	bl	8002010 <HAL_GetTick>
 8004e52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004e54:	bf00      	nop
 8004e56:	f7fd f8db 	bl	8002010 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d0f9      	beq.n	8004e56 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	4a07      	ldr	r2, [pc, #28]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004e6c:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	4a04      	ldr	r2, [pc, #16]	@ (8004e84 <HAL_RCC_OscConfig+0xdb4>)
 8004e72:	f043 0310 	orr.w	r3, r3, #16
 8004e76:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3738      	adds	r7, #56	@ 0x38
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	46020c00 	.word	0x46020c00

08004e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e1d9      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b9b      	ldr	r3, [pc, #620]	@ (800510c <HAL_RCC_ClockConfig+0x284>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d910      	bls.n	8004ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b98      	ldr	r3, [pc, #608]	@ (800510c <HAL_RCC_ClockConfig+0x284>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 020f 	bic.w	r2, r3, #15
 8004eb2:	4996      	ldr	r1, [pc, #600]	@ (800510c <HAL_RCC_ClockConfig+0x284>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b94      	ldr	r3, [pc, #592]	@ (800510c <HAL_RCC_ClockConfig+0x284>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e1c1      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	4b8c      	ldr	r3, [pc, #560]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d908      	bls.n	8004efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004ee8:	4b89      	ldr	r3, [pc, #548]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	4986      	ldr	r1, [pc, #536]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	4b81      	ldr	r3, [pc, #516]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d909      	bls.n	8004f2c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f18:	4b7d      	ldr	r3, [pc, #500]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	497a      	ldr	r1, [pc, #488]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	4b74      	ldr	r3, [pc, #464]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d908      	bls.n	8004f5a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f48:	4b71      	ldr	r3, [pc, #452]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	496e      	ldr	r1, [pc, #440]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	4b69      	ldr	r3, [pc, #420]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d908      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f76:	4b66      	ldr	r3, [pc, #408]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 020f 	bic.w	r2, r3, #15
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	4963      	ldr	r1, [pc, #396]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80d2 	beq.w	800513a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d143      	bne.n	800502a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d110      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	4b57      	ldr	r3, [pc, #348]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fb6:	4a56      	ldr	r2, [pc, #344]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004fc0:	4b53      	ldr	r3, [pc, #332]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8004fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004fd2:	f7fd f81d 	bl	8002010 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8005114 <HAL_RCC_ClockConfig+0x28c>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00f      	beq.n	8005004 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004fe6:	f7fd f813 	bl	8002010 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e12b      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ff8:	4b46      	ldr	r3, [pc, #280]	@ (8005114 <HAL_RCC_ClockConfig+0x28c>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800500a:	4b41      	ldr	r3, [pc, #260]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 800500c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005010:	4a3f      	ldr	r2, [pc, #252]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8005012:	f023 0304 	bic.w	r3, r3, #4
 8005016:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800501a:	4b3d      	ldr	r3, [pc, #244]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d121      	bne.n	800506a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e112      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d107      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005032:	4b37      	ldr	r3, [pc, #220]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d115      	bne.n	800506a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e106      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800504a:	4b31      	ldr	r3, [pc, #196]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0fa      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800505a:	4b2d      	ldr	r3, [pc, #180]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0f2      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b29      	ldr	r3, [pc, #164]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4926      	ldr	r1, [pc, #152]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8005078:	4313      	orrs	r3, r2
 800507a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800507c:	f7fc ffc8 	bl	8002010 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fc ffc0 	bl	8002010 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e0d6      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d1ee      	bne.n	800508c <HAL_RCC_ClockConfig+0x204>
 80050ae:	e044      	b.n	800513a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d112      	bne.n	80050de <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050b8:	e00a      	b.n	80050d0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ba:	f7fc ffa9 	bl	8002010 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e0bf      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d1ee      	bne.n	80050ba <HAL_RCC_ClockConfig+0x232>
 80050dc:	e02d      	b.n	800513a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d123      	bne.n	800512e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fc ff92 	bl	8002010 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0a8      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050fe:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <HAL_RCC_ClockConfig+0x288>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ee      	bne.n	80050e8 <HAL_RCC_ClockConfig+0x260>
 800510a:	e016      	b.n	800513a <HAL_RCC_ClockConfig+0x2b2>
 800510c:	40022000 	.word	0x40022000
 8005110:	46020c00 	.word	0x46020c00
 8005114:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fc ff7a 	bl	8002010 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e090      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800512e:	4b4a      	ldr	r3, [pc, #296]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d1ee      	bne.n	8005118 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d010      	beq.n	8005168 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	4b43      	ldr	r3, [pc, #268]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	429a      	cmp	r2, r3
 8005154:	d208      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005156:	4b40      	ldr	r3, [pc, #256]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f023 020f 	bic.w	r2, r3, #15
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	493d      	ldr	r1, [pc, #244]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 8005164:	4313      	orrs	r3, r2
 8005166:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005168:	4b3c      	ldr	r3, [pc, #240]	@ (800525c <HAL_RCC_ClockConfig+0x3d4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d210      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b39      	ldr	r3, [pc, #228]	@ (800525c <HAL_RCC_ClockConfig+0x3d4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 020f 	bic.w	r2, r3, #15
 800517e:	4937      	ldr	r1, [pc, #220]	@ (800525c <HAL_RCC_ClockConfig+0x3d4>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b35      	ldr	r3, [pc, #212]	@ (800525c <HAL_RCC_ClockConfig+0x3d4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e05b      	b.n	8005250 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d208      	bcs.n	80051c6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b28      	ldr	r3, [pc, #160]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4925      	ldr	r1, [pc, #148]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d012      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	4b20      	ldr	r3, [pc, #128]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d209      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80051e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	4919      	ldr	r1, [pc, #100]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	4b13      	ldr	r3, [pc, #76]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005210:	429a      	cmp	r2, r3
 8005212:	d208      	bcs.n	8005226 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005214:	4b10      	ldr	r3, [pc, #64]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	490d      	ldr	r1, [pc, #52]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 8005222:	4313      	orrs	r3, r2
 8005224:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005226:	f000 f821 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <HAL_RCC_ClockConfig+0x3d0>)
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	490a      	ldr	r1, [pc, #40]	@ (8005260 <HAL_RCC_ClockConfig+0x3d8>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	4a09      	ldr	r2, [pc, #36]	@ (8005264 <HAL_RCC_ClockConfig+0x3dc>)
 800523e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005240:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RCC_ClockConfig+0x3e0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fc fe59 	bl	8001efc <HAL_InitTick>
 800524a:	4603      	mov	r3, r0
 800524c:	73fb      	strb	r3, [r7, #15]

  return status;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	46020c00 	.word	0x46020c00
 800525c:	40022000 	.word	0x40022000
 8005260:	0800a7cc 	.word	0x0800a7cc
 8005264:	20000000 	.word	0x20000000
 8005268:	20000004 	.word	0x20000004

0800526c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	b08b      	sub	sp, #44	@ 0x2c
 8005270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800527a:	4b78      	ldr	r3, [pc, #480]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005284:	4b75      	ldr	r3, [pc, #468]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d121      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d11e      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052a0:	4b6e      	ldr	r3, [pc, #440]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052ac:	4b6b      	ldr	r3, [pc, #428]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052b2:	0b1b      	lsrs	r3, r3, #12
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ba:	e005      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052bc:	4b67      	ldr	r3, [pc, #412]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	0f1b      	lsrs	r3, r3, #28
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052c8:	4a65      	ldr	r2, [pc, #404]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d110      	bne.n	80052fa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052dc:	e00d      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052de:	4b5f      	ldr	r3, [pc, #380]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d102      	bne.n	80052f0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	e004      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80052f8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b0c      	cmp	r3, #12
 80052fe:	f040 80a5 	bne.w	800544c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005302:	4b56      	ldr	r3, [pc, #344]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800530c:	4b53      	ldr	r3, [pc, #332]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800531a:	4b50      	ldr	r3, [pc, #320]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005326:	4b4d      	ldr	r3, [pc, #308]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	08db      	lsrs	r3, r3, #3
 800532c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d003      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xe4>
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d022      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x128>
 800534e:	e043      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005468 <HAL_RCC_GetSysClockFreq+0x1fc>
 800535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005362:	4b3e      	ldr	r3, [pc, #248]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005372:	ed97 6a01 	vldr	s12, [r7, #4]
 8005376:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800546c <HAL_RCC_GetSysClockFreq+0x200>
 800537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005386:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005392:	e046      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005468 <HAL_RCC_GetSysClockFreq+0x1fc>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b2d      	ldr	r3, [pc, #180]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80053ba:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800546c <HAL_RCC_GetSysClockFreq+0x200>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053d6:	e024      	b.n	8005422 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f0:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005400:	ed97 6a01 	vldr	s12, [r7, #4]
 8005404:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800546c <HAL_RCC_GetSysClockFreq+0x200>
 8005408:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800540c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005414:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005420:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005422:	4b0e      	ldr	r3, [pc, #56]	@ (800545c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	0e1b      	lsrs	r3, r3, #24
 8005428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800542c:	3301      	adds	r3, #1
 800542e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800543a:	edd7 6a07 	vldr	s13, [r7, #28]
 800543e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005446:	ee17 3a90 	vmov	r3, s15
 800544a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800544c:	6a3b      	ldr	r3, [r7, #32]
}
 800544e:	4618      	mov	r0, r3
 8005450:	372c      	adds	r7, #44	@ 0x2c
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	46020c00 	.word	0x46020c00
 8005460:	0800a7e4 	.word	0x0800a7e4
 8005464:	00f42400 	.word	0x00f42400
 8005468:	4b742400 	.word	0x4b742400
 800546c:	46000000 	.word	0x46000000

08005470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005474:	f7ff fefa 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b07      	ldr	r3, [pc, #28]	@ (8005498 <HAL_RCC_GetHCLKFreq+0x28>)
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	4906      	ldr	r1, [pc, #24]	@ (800549c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005484:	5ccb      	ldrb	r3, [r1, r3]
 8005486:	fa22 f303 	lsr.w	r3, r2, r3
 800548a:	4a05      	ldr	r2, [pc, #20]	@ (80054a0 <HAL_RCC_GetHCLKFreq+0x30>)
 800548c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800548e:	4b04      	ldr	r3, [pc, #16]	@ (80054a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005490:	681b      	ldr	r3, [r3, #0]
}
 8005492:	4618      	mov	r0, r3
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	46020c00 	.word	0x46020c00
 800549c:	0800a7cc 	.word	0x0800a7cc
 80054a0:	20000000 	.word	0x20000000

080054a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80054a8:	f7ff ffe2 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4903      	ldr	r1, [pc, #12]	@ (80054c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	46020c00 	.word	0x46020c00
 80054c8:	0800a7dc 	.word	0x0800a7dc

080054cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80054d0:	f7ff ffce 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	46020c00 	.word	0x46020c00
 80054f0:	0800a7dc 	.word	0x0800a7dc

080054f4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80054f8:	f7ff ffba 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK3Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	46020c00 	.word	0x46020c00
 8005518:	0800a7dc 	.word	0x0800a7dc

0800551c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005524:	4b3e      	ldr	r3, [pc, #248]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005532:	f7fe fd8f 	bl	8004054 <HAL_PWREx_GetVoltageRange>
 8005536:	6178      	str	r0, [r7, #20]
 8005538:	e019      	b.n	800556e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800553a:	4b39      	ldr	r3, [pc, #228]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800553c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005540:	4a37      	ldr	r2, [pc, #220]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005542:	f043 0304 	orr.w	r3, r3, #4
 8005546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800554a:	4b35      	ldr	r3, [pc, #212]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005558:	f7fe fd7c 	bl	8004054 <HAL_PWREx_GetVoltageRange>
 800555c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800555e:	4b30      	ldr	r3, [pc, #192]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005564:	4a2e      	ldr	r2, [pc, #184]	@ (8005620 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005566:	f023 0304 	bic.w	r3, r3, #4
 800556a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005574:	d003      	beq.n	800557e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800557c:	d109      	bne.n	8005592 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005584:	d202      	bcs.n	800558c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005586:	2301      	movs	r3, #1
 8005588:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800558a:	e033      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005590:	e030      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005598:	d208      	bcs.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055a0:	d102      	bne.n	80055a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055a2:	2303      	movs	r3, #3
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	e025      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e035      	b.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055b2:	d90f      	bls.n	80055d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055c0:	d902      	bls.n	80055c8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e015      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80055c8:	2301      	movs	r3, #1
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	e012      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e00f      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055da:	d109      	bne.n	80055f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e2:	d102      	bne.n	80055ea <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80055e4:	2301      	movs	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e004      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80055ea:	2302      	movs	r3, #2
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	e001      	b.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80055f0:	2301      	movs	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 020f 	bic.w	r2, r3, #15
 80055fc:	4909      	ldr	r1, [pc, #36]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005604:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d001      	beq.n	8005616 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	46020c00 	.word	0x46020c00
 8005624:	40022000 	.word	0x40022000

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800562c:	b0ba      	sub	sp, #232	@ 0xe8
 800562e:	af00      	add	r7, sp, #0
 8005630:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005634:	2300      	movs	r3, #0
 8005636:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800563a:	2300      	movs	r3, #0
 800563c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f002 0401 	and.w	r4, r2, #1
 800564c:	2500      	movs	r5, #0
 800564e:	ea54 0305 	orrs.w	r3, r4, r5
 8005652:	d00b      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005654:	4bcb      	ldr	r3, [pc, #812]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800565a:	f023 0103 	bic.w	r1, r3, #3
 800565e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005664:	4ac7      	ldr	r2, [pc, #796]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005666:	430b      	orrs	r3, r1
 8005668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800566c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f002 0802 	and.w	r8, r2, #2
 8005678:	f04f 0900 	mov.w	r9, #0
 800567c:	ea58 0309 	orrs.w	r3, r8, r9
 8005680:	d00b      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005682:	4bc0      	ldr	r3, [pc, #768]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005688:	f023 010c 	bic.w	r1, r3, #12
 800568c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005692:	4abc      	ldr	r2, [pc, #752]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005694:	430b      	orrs	r3, r1
 8005696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	f002 0a04 	and.w	sl, r2, #4
 80056a6:	f04f 0b00 	mov.w	fp, #0
 80056aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80056ae:	d00b      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80056b0:	4bb4      	ldr	r3, [pc, #720]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c0:	4ab0      	ldr	r2, [pc, #704]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056c2:	430b      	orrs	r3, r1
 80056c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f002 0308 	and.w	r3, r2, #8
 80056d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80056e2:	460b      	mov	r3, r1
 80056e4:	4313      	orrs	r3, r2
 80056e6:	d00b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80056e8:	4ba6      	ldr	r3, [pc, #664]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f8:	4aa2      	ldr	r2, [pc, #648]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f002 0310 	and.w	r3, r2, #16
 800570c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005716:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800571a:	460b      	mov	r3, r1
 800571c:	4313      	orrs	r3, r2
 800571e:	d00b      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005720:	4b98      	ldr	r3, [pc, #608]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005730:	4a94      	ldr	r2, [pc, #592]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005732:	430b      	orrs	r3, r1
 8005734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f002 0320 	and.w	r3, r2, #32
 8005744:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800574e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d00b      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005758:	4b8a      	ldr	r3, [pc, #552]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800575a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800575e:	f023 0107 	bic.w	r1, r3, #7
 8005762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005768:	4a86      	ldr	r2, [pc, #536]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800576a:	430b      	orrs	r3, r1
 800576c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800577c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005780:	2300      	movs	r3, #0
 8005782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005786:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d00b      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005790:	4b7c      	ldr	r3, [pc, #496]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005796:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800579a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800579e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057a0:	4a78      	ldr	r2, [pc, #480]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a2:	430b      	orrs	r3, r1
 80057a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80057b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057c2:	460b      	mov	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80057c8:	4b6e      	ldr	r3, [pc, #440]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80057ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057f0:	2300      	movs	r3, #0
 80057f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057f6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4313      	orrs	r3, r2
 80057fe:	d00b      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005800:	4b60      	ldr	r3, [pc, #384]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005806:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800580a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800580e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005810:	4a5c      	ldr	r2, [pc, #368]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005812:	430b      	orrs	r3, r1
 8005814:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800582e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d00b      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005838:	4b52      	ldr	r3, [pc, #328]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800583a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800583e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005848:	4a4e      	ldr	r2, [pc, #312]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584a:	430b      	orrs	r3, r1
 800584c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800585c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005866:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d00b      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005870:	4b44      	ldr	r3, [pc, #272]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005876:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800587a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005880:	4a40      	ldr	r2, [pc, #256]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005882:	430b      	orrs	r3, r1
 8005884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800589e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d00b      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80058a8:	4b36      	ldr	r3, [pc, #216]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058ae:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80058b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058b8:	4a32      	ldr	r2, [pc, #200]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ba:	430b      	orrs	r3, r1
 80058bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80058c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058d0:	2300      	movs	r3, #0
 80058d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80058da:	460b      	mov	r3, r1
 80058dc:	4313      	orrs	r3, r2
 80058de:	d00c      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80058e0:	4b28      	ldr	r3, [pc, #160]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f2:	4a24      	ldr	r2, [pc, #144]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f4:	430b      	orrs	r3, r1
 80058f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005906:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005908:	2300      	movs	r3, #0
 800590a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800590c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d04f      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	2b80      	cmp	r3, #128	@ 0x80
 8005920:	d02d      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005922:	2b80      	cmp	r3, #128	@ 0x80
 8005924:	d827      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005926:	2b60      	cmp	r3, #96	@ 0x60
 8005928:	d02e      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800592a:	2b60      	cmp	r3, #96	@ 0x60
 800592c:	d823      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800592e:	2b40      	cmp	r3, #64	@ 0x40
 8005930:	d006      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	d81f      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800593a:	2b20      	cmp	r3, #32
 800593c:	d011      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800593e:	e01a      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005940:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	4a0f      	ldr	r2, [pc, #60]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800594a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800594c:	e01d      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800594e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005952:	3308      	adds	r3, #8
 8005954:	4618      	mov	r0, r3
 8005956:	f002 fa17 	bl	8007d88 <RCCEx_PLL2_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005960:	e013      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005966:	332c      	adds	r3, #44	@ 0x2c
 8005968:	4618      	mov	r0, r3
 800596a:	f002 faa5 	bl	8007eb8 <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005974:	e009      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800597c:	e005      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800597e:	bf00      	nop
 8005980:	e003      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005982:	bf00      	nop
 8005984:	46020c00 	.word	0x46020c00
        break;
 8005988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10d      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005992:	4bb6      	ldr	r3, [pc, #728]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005994:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005998:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800599c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	4ab1      	ldr	r2, [pc, #708]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059a6:	430b      	orrs	r3, r1
 80059a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80059ac:	e003      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80059c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80059c4:	2300      	movs	r3, #0
 80059c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80059c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d053      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80059d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059de:	d033      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e4:	d82c      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ea:	d02f      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80059ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f0:	d826      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f6:	d008      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80059f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059fc:	d820      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a06:	d011      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005a08:	e01a      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a0a:	4b98      	ldr	r3, [pc, #608]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	4a97      	ldr	r2, [pc, #604]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a14:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a16:	e01a      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 f9b2 	bl	8007d88 <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a2a:	e010      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a30:	332c      	adds	r3, #44	@ 0x2c
 8005a32:	4618      	mov	r0, r3
 8005a34:	f002 fa40 	bl	8007eb8 <RCCEx_PLL3_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a3e:	e006      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a46:	e002      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10d      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005a56:	4b85      	ldr	r3, [pc, #532]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a5c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a68:	4a80      	ldr	r2, [pc, #512]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a76:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a88:	2300      	movs	r3, #0
 8005a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005a90:	460b      	mov	r3, r1
 8005a92:	4313      	orrs	r3, r2
 8005a94:	d046      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005aa2:	d028      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005aa4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005aa8:	d821      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aae:	d022      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ab4:	d81b      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005ab6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aba:	d01c      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ac0:	d815      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac6:	d008      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005acc:	d80f      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d011      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad6:	d00e      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ad8:	e009      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ade:	3308      	adds	r3, #8
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f002 f951 	bl	8007d88 <RCCEx_PLL2_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005aec:	e004      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005af4:	e000      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005b00:	4b5a      	ldr	r3, [pc, #360]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b06:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b12:	4a56      	ldr	r2, [pc, #344]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b14:	430b      	orrs	r3, r1
 8005b16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b1a:	e003      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005b24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b32:	2300      	movs	r3, #0
 8005b34:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b36:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	d03f      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d81e      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005b93 	.word	0x08005b93
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b77 	.word	0x08005b77
 8005b60:	08005b93 	.word	0x08005b93
 8005b64:	08005b93 	.word	0x08005b93
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b68:	4b40      	ldr	r3, [pc, #256]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b72:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b74:	e00e      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b7a:	332c      	adds	r3, #44	@ 0x2c
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f002 f99b 	bl	8007eb8 <RCCEx_PLL3_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b88:	e004      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005b92:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10d      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005b9c:	4b33      	ldr	r3, [pc, #204]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ba2:	f023 0107 	bic.w	r1, r3, #7
 8005ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bae:	4a2f      	ldr	r2, [pc, #188]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005bb6:	e003      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bbc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bce:	2300      	movs	r3, #0
 8005bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	d04d      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005be4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005be8:	d028      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bee:	d821      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005bf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bf4:	d024      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005bf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bfa:	d81b      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c00:	d00e      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c06:	d815      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c10:	d110      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c12:	4b16      	ldr	r3, [pc, #88]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c16:	4a15      	ldr	r2, [pc, #84]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005c1e:	e012      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c24:	332c      	adds	r3, #44	@ 0x2c
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 f946 	bl	8007eb8 <RCCEx_PLL3_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c32:	e008      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c3a:	e004      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c3c:	bf00      	nop
 8005c3e:	e002      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c40:	bf00      	nop
 8005c42:	e000      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c44:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d110      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005c4e:	4b07      	ldr	r3, [pc, #28]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c60:	4a02      	ldr	r2, [pc, #8]	@ (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c62:	430b      	orrs	r3, r1
 8005c64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c68:	e006      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005c6a:	bf00      	nop
 8005c6c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c74:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c84:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c86:	2300      	movs	r3, #0
 8005c88:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f000 80b5 	beq.w	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d113      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005caa:	4b9a      	ldr	r3, [pc, #616]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cb0:	4a98      	ldr	r2, [pc, #608]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cb2:	f043 0304 	orr.w	r3, r3, #4
 8005cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005cba:	4b96      	ldr	r3, [pc, #600]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005cd2:	4b91      	ldr	r3, [pc, #580]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	4a90      	ldr	r2, [pc, #576]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cde:	f7fc f997 	bl	8002010 <HAL_GetTick>
 8005ce2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce8:	f7fc f992 	bl	8002010 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d903      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005cfe:	e005      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d00:	4b85      	ldr	r3, [pc, #532]	@ (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ed      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005d0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d165      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d14:	4b7f      	ldr	r3, [pc, #508]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d023      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01b      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d3a:	4b76      	ldr	r3, [pc, #472]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d48:	4b72      	ldr	r3, [pc, #456]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d4e:	4a71      	ldr	r2, [pc, #452]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d58:	4b6e      	ldr	r3, [pc, #440]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d68:	4a6a      	ldr	r2, [pc, #424]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d019      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7e:	f7fc f947 	bl	8002010 <HAL_GetTick>
 8005d82:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d86:	e00d      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fc f942 	bl	8002010 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d903      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005da2:	e006      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005da4:	4b5b      	ldr	r3, [pc, #364]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ea      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005db2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10d      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005dba:	4b56      	ldr	r3, [pc, #344]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dc0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005dcc:	4a51      	ldr	r2, [pc, #324]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005dd4:	e008      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005dda:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005dde:	e003      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005de4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005de8:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d107      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df0:	4b48      	ldr	r3, [pc, #288]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df6:	4a47      	ldr	r2, [pc, #284]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0e:	2300      	movs	r3, #0
 8005e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d042      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e24:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e28:	d022      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005e2a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e2e:	d81b      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e34:	d011      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e3a:	d815      	bhi.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d019      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e44:	d110      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 ff9b 	bl	8007d88 <RCCEx_PLL2_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e58:	e00d      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e64:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e6e:	e002      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e74:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005e7e:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e84:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e90:	4a20      	ldr	r2, [pc, #128]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e92:	430b      	orrs	r3, r1
 8005e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e98:	e003      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e9e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	d032      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eca:	d00b      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed0:	d804      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d008      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eda:	d007      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ee2:	e004      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005ee4:	bf00      	nop
 8005ee6:	e002      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005eec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005eee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d112      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005ef6:	4b07      	ldr	r3, [pc, #28]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ef8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005efc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f08:	4a02      	ldr	r2, [pc, #8]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f10:	e008      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005f12:	bf00      	nop
 8005f14:	46020c00 	.word	0x46020c00
 8005f18:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f32:	2300      	movs	r3, #0
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f36:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	d00c      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005f40:	4b98      	ldr	r3, [pc, #608]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f46:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f52:	4a94      	ldr	r2, [pc, #592]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f54:	430b      	orrs	r3, r1
 8005f56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f66:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f68:	2300      	movs	r3, #0
 8005f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005f70:	460b      	mov	r3, r1
 8005f72:	4313      	orrs	r3, r2
 8005f74:	d019      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f82:	d105      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f84:	4b87      	ldr	r3, [pc, #540]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f88:	4a86      	ldr	r2, [pc, #536]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f8e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005f90:	4b84      	ldr	r3, [pc, #528]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f96:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fa2:	4a80      	ldr	r2, [pc, #512]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fbc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d00c      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005fc6:	4b77      	ldr	r3, [pc, #476]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fcc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fd8:	4972      	ldr	r1, [pc, #456]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d00c      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005ffc:	4b69      	ldr	r3, [pc, #420]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006002:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800600a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800600e:	4965      	ldr	r1, [pc, #404]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	2300      	movs	r3, #0
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800602c:	460b      	mov	r3, r1
 800602e:	4313      	orrs	r3, r2
 8006030:	d00c      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006032:	4b5c      	ldr	r3, [pc, #368]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006038:	f023 0218 	bic.w	r2, r3, #24
 800603c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006040:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006044:	4957      	ldr	r1, [pc, #348]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800604c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	d032      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800606c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006074:	d105      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006076:	4b4b      	ldr	r3, [pc, #300]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607a:	4a4a      	ldr	r2, [pc, #296]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800607c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006080:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800608a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800608e:	d108      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006094:	3308      	adds	r3, #8
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fe76 	bl	8007d88 <RCCEx_PLL2_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80060a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10d      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80060aa:	4b3e      	ldr	r3, [pc, #248]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060bc:	4939      	ldr	r1, [pc, #228]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80060c4:	e003      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060ca:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80060ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060e4:	460b      	mov	r3, r1
 80060e6:	4313      	orrs	r3, r2
 80060e8:	d03a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80060ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060f6:	d00e      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80060f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060fc:	d815      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d017      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006106:	d110      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4b26      	ldr	r3, [pc, #152]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	4a25      	ldr	r2, [pc, #148]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006112:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006114:	e00e      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800611a:	3308      	adds	r3, #8
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fe33 	bl	8007d88 <RCCEx_PLL2_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006128:	e004      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006130:	e000      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006132:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006134:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10d      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800613c:	4b19      	ldr	r3, [pc, #100]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800613e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006142:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800614a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800614e:	4915      	ldr	r1, [pc, #84]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006156:	e003      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006158:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800615c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006160:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d00c      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800617c:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800617e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006182:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800618a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800618e:	4905      	ldr	r1, [pc, #20]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006196:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800619a:	4618      	mov	r0, r3
 800619c:	37e8      	adds	r7, #232	@ 0xe8
 800619e:	46bd      	mov	sp, r7
 80061a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a4:	46020c00 	.word	0x46020c00

080061a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b089      	sub	sp, #36	@ 0x24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80061b0:	4ba6      	ldr	r3, [pc, #664]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061ba:	4ba4      	ldr	r3, [pc, #656]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80061c4:	4ba1      	ldr	r3, [pc, #644]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	3301      	adds	r3, #1
 80061d0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061d2:	4b9e      	ldr	r3, [pc, #632]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d6:	091b      	lsrs	r3, r3, #4
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061de:	4b9b      	ldr	r3, [pc, #620]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	08db      	lsrs	r3, r3, #3
 80061e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d062      	beq.n	80062c6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b03      	cmp	r3, #3
 8006204:	f200 8081 	bhi.w	800630a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d024      	beq.n	8006258 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d17a      	bne.n	800630a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006450 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006226:	4b89      	ldr	r3, [pc, #548]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006236:	ed97 6a02 	vldr	s12, [r7, #8]
 800623a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800623e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006242:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006256:	e08f      	b.n	8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006258:	4b7c      	ldr	r3, [pc, #496]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006264:	4b79      	ldr	r3, [pc, #484]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	0f1b      	lsrs	r3, r3, #28
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	e006      	b.n	800627e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006270:	4b76      	ldr	r3, [pc, #472]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	0f1b      	lsrs	r3, r3, #28
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	4a76      	ldr	r2, [pc, #472]	@ (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062a8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c4:	e058      	b.n	8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006450 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80062d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d8:	4b5c      	ldr	r3, [pc, #368]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80062f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006308:	e036      	b.n	8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800630a:	4b50      	ldr	r3, [pc, #320]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006316:	4b4d      	ldr	r3, [pc, #308]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	0f1b      	lsrs	r3, r3, #28
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	e006      	b.n	8006330 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006322:	4b4a      	ldr	r3, [pc, #296]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006328:	041b      	lsls	r3, r3, #16
 800632a:	0f1b      	lsrs	r3, r3, #28
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	4a49      	ldr	r2, [pc, #292]	@ (8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006356:	ed97 6a02 	vldr	s12, [r7, #8]
 800635a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006454 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800635e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800636e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006376:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006378:	4b34      	ldr	r3, [pc, #208]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006384:	4b31      	ldr	r3, [pc, #196]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006388:	0a5b      	lsrs	r3, r3, #9
 800638a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800639a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800639e:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063aa:	ee17 2a90 	vmov	r2, s15
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	e002      	b.n	80063ba <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80063ba:	4b24      	ldr	r3, [pc, #144]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d017      	beq.n	80063f6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063c6:	4b21      	ldr	r3, [pc, #132]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d0:	ee07 3a90 	vmov	s15, r3
 80063d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80063d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063dc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ec:	ee17 2a90 	vmov	r2, s15
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	605a      	str	r2, [r3, #4]
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80063fc:	4b13      	ldr	r3, [pc, #76]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d017      	beq.n	8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006408:	4b10      	ldr	r3, [pc, #64]	@ (800644c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800640a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640c:	0e1b      	lsrs	r3, r3, #24
 800640e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800641a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800641e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006422:	edd7 6a07 	vldr	s13, [r7, #28]
 8006426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642e:	ee17 2a90 	vmov	r2, s15
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006436:	e002      	b.n	800643e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	609a      	str	r2, [r3, #8]
}
 800643e:	bf00      	nop
 8006440:	3724      	adds	r7, #36	@ 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	46020c00 	.word	0x46020c00
 8006450:	4b742400 	.word	0x4b742400
 8006454:	46000000 	.word	0x46000000
 8006458:	0800a7e4 	.word	0x0800a7e4

0800645c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800645c:	b480      	push	{r7}
 800645e:	b089      	sub	sp, #36	@ 0x24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006464:	4ba6      	ldr	r3, [pc, #664]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800646e:	4ba4      	ldr	r3, [pc, #656]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006478:	4ba1      	ldr	r3, [pc, #644]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	3301      	adds	r3, #1
 8006484:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006486:	4b9e      	ldr	r3, [pc, #632]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006492:	4b9b      	ldr	r3, [pc, #620]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	08db      	lsrs	r3, r3, #3
 8006498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d062      	beq.n	800657a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	f200 8081 	bhi.w	80065be <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d024      	beq.n	800650c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d17a      	bne.n	80065be <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064da:	4b89      	ldr	r3, [pc, #548]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800650a:	e08f      	b.n	800662c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800650c:	4b7c      	ldr	r3, [pc, #496]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006518:	4b79      	ldr	r3, [pc, #484]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	0f1b      	lsrs	r3, r3, #28
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	e006      	b.n	8006532 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006524:	4b76      	ldr	r3, [pc, #472]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	0f1b      	lsrs	r3, r3, #28
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	4a76      	ldr	r2, [pc, #472]	@ (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006538:	ee07 3a90 	vmov	s15, r3
 800653c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	ee07 3a90 	vmov	s15, r3
 8006554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006558:	ed97 6a02 	vldr	s12, [r7, #8]
 800655c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006568:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800656c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006574:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006578:	e058      	b.n	800662c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006584:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658c:	4b5c      	ldr	r3, [pc, #368]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800659c:	ed97 6a02 	vldr	s12, [r7, #8]
 80065a0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80065a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065bc:	e036      	b.n	800662c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80065be:	4b50      	ldr	r3, [pc, #320]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80065ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	0f1b      	lsrs	r3, r3, #28
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	e006      	b.n	80065e4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80065d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065dc:	041b      	lsls	r3, r3, #16
 80065de:	0f1b      	lsrs	r3, r3, #28
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	4a49      	ldr	r2, [pc, #292]	@ (800670c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660a:	ed97 6a02 	vldr	s12, [r7, #8]
 800660e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800662a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800662c:	4b34      	ldr	r3, [pc, #208]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d017      	beq.n	8006668 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006638:	4b31      	ldr	r3, [pc, #196]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800663a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663c:	0a5b      	lsrs	r3, r3, #9
 800663e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800664a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800664e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006652:	edd7 6a07 	vldr	s13, [r7, #28]
 8006656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800665a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665e:	ee17 2a90 	vmov	r2, s15
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e002      	b.n	800666e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800666e:	4b24      	ldr	r3, [pc, #144]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d017      	beq.n	80066aa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800667a:	4b21      	ldr	r3, [pc, #132]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800667c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800668c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006690:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006694:	edd7 6a07 	vldr	s13, [r7, #28]
 8006698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800669c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a0:	ee17 2a90 	vmov	r2, s15
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]
 80066a8:	e002      	b.n	80066b0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80066b0:	4b13      	ldr	r3, [pc, #76]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066bc:	4b10      	ldr	r3, [pc, #64]	@ (8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c0:	0e1b      	lsrs	r3, r3, #24
 80066c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80066ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066d2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e2:	ee17 2a90 	vmov	r2, s15
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066ea:	e002      	b.n	80066f2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	609a      	str	r2, [r3, #8]
}
 80066f2:	bf00      	nop
 80066f4:	3724      	adds	r7, #36	@ 0x24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	46020c00 	.word	0x46020c00
 8006704:	4b742400 	.word	0x4b742400
 8006708:	46000000 	.word	0x46000000
 800670c:	0800a7e4 	.word	0x0800a7e4

08006710 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006710:	b480      	push	{r7}
 8006712:	b089      	sub	sp, #36	@ 0x24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006718:	4ba6      	ldr	r3, [pc, #664]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800671a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006720:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006722:	4ba4      	ldr	r3, [pc, #656]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800672c:	4ba1      	ldr	r3, [pc, #644]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800672e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006730:	0a1b      	lsrs	r3, r3, #8
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	3301      	adds	r3, #1
 8006738:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800673a:	4b9e      	ldr	r3, [pc, #632]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006746:	4b9b      	ldr	r3, [pc, #620]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674a:	08db      	lsrs	r3, r3, #3
 800674c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d062      	beq.n	800682e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b03      	cmp	r3, #3
 800676c:	f200 8081 	bhi.w	8006872 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d024      	beq.n	80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d17a      	bne.n	8006872 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006786:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80069b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800678a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678e:	4b89      	ldr	r3, [pc, #548]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800679e:	ed97 6a02 	vldr	s12, [r7, #8]
 80067a2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80069bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80067a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80067ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ba:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80067be:	e08f      	b.n	80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80067c0:	4b7c      	ldr	r3, [pc, #496]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80067cc:	4b79      	ldr	r3, [pc, #484]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	0f1b      	lsrs	r3, r3, #28
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	e006      	b.n	80067e6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80067d8:	4b76      	ldr	r3, [pc, #472]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067de:	041b      	lsls	r3, r3, #16
 80067e0:	0f1b      	lsrs	r3, r3, #28
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	4a76      	ldr	r2, [pc, #472]	@ (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80067e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006810:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80069bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006820:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006828:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800682c:	e058      	b.n	80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006838:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800683c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006840:	4b5c      	ldr	r3, [pc, #368]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006850:	ed97 6a02 	vldr	s12, [r7, #8]
 8006854:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80069bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006858:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800685c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006864:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006870:	e036      	b.n	80068e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006872:	4b50      	ldr	r3, [pc, #320]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800687e:	4b4d      	ldr	r3, [pc, #308]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	0f1b      	lsrs	r3, r3, #28
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	e006      	b.n	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800688a:	4b4a      	ldr	r3, [pc, #296]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800688c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006890:	041b      	lsls	r3, r3, #16
 8006892:	0f1b      	lsrs	r3, r3, #28
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	4a49      	ldr	r2, [pc, #292]	@ (80069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800689a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a02 	vldr	s12, [r7, #8]
 80068c2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80069bc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068de:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80068e0:	4b34      	ldr	r3, [pc, #208]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d017      	beq.n	800691c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068ec:	4b31      	ldr	r3, [pc, #196]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f0:	0a5b      	lsrs	r3, r3, #9
 80068f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80068fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006902:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006906:	edd7 6a07 	vldr	s13, [r7, #28]
 800690a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006912:	ee17 2a90 	vmov	r2, s15
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	e002      	b.n	8006922 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006922:	4b24      	ldr	r3, [pc, #144]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d017      	beq.n	800695e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800692e:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006944:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006948:	edd7 6a07 	vldr	s13, [r7, #28]
 800694c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006954:	ee17 2a90 	vmov	r2, s15
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	e002      	b.n	8006964 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006964:	4b13      	ldr	r3, [pc, #76]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d017      	beq.n	80069a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006970:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006974:	0e1b      	lsrs	r3, r3, #24
 8006976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006986:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800698a:	edd7 6a07 	vldr	s13, [r7, #28]
 800698e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006996:	ee17 2a90 	vmov	r2, s15
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800699e:	e002      	b.n	80069a6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	609a      	str	r2, [r3, #8]
}
 80069a6:	bf00      	nop
 80069a8:	3724      	adds	r7, #36	@ 0x24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	46020c00 	.word	0x46020c00
 80069b8:	4b742400 	.word	0x4b742400
 80069bc:	46000000 	.word	0x46000000
 80069c0:	0800a7e4 	.word	0x0800a7e4

080069c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08e      	sub	sp, #56	@ 0x38
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80069ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80069d6:	430b      	orrs	r3, r1
 80069d8:	d145      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80069da:	4ba7      	ldr	r3, [pc, #668]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80069e6:	4ba4      	ldr	r3, [pc, #656]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d108      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80069f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fa:	d104      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80069fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a02:	f001 b9b3 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006a06:	4b9c      	ldr	r3, [pc, #624]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a14:	d114      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a1c:	d110      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a1e:	4b96      	ldr	r3, [pc, #600]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a2c:	d103      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006a2e:	23fa      	movs	r3, #250	@ 0xfa
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a32:	f001 b99b 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a36:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a3a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a3c:	f001 b996 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006a40:	4b8d      	ldr	r3, [pc, #564]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a54:	d103      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006a56:	4b89      	ldr	r3, [pc, #548]	@ (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	f001 b987 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a62:	f001 b983 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	d151      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006a72:	4b81      	ldr	r3, [pc, #516]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a78:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	2b80      	cmp	r3, #128	@ 0x80
 8006a82:	d035      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	2b80      	cmp	r3, #128	@ 0x80
 8006a88:	d841      	bhi.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	2b60      	cmp	r3, #96	@ 0x60
 8006a8e:	d02a      	beq.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	2b60      	cmp	r3, #96	@ 0x60
 8006a94:	d83b      	bhi.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	2b40      	cmp	r3, #64	@ 0x40
 8006a9a:	d009      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	2b40      	cmp	r3, #64	@ 0x40
 8006aa0:	d835      	bhi.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d012      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006aae:	e02e      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fb77 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006abe:	f001 b955 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac2:	f107 0318 	add.w	r3, r7, #24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fcc8 	bl	800645c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ad0:	f001 b94c 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad4:	f107 030c 	add.w	r3, r7, #12
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff fe19 	bl	8006710 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ae2:	f001 b943 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ae6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aec:	f001 b93e 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006af0:	4b61      	ldr	r3, [pc, #388]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006afc:	d103      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006afe:	4b60      	ldr	r3, [pc, #384]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b02:	f001 b933 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b0a:	f001 b92f 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b12:	f001 b92b 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b1a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	d158      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006b22:	4b55      	ldr	r3, [pc, #340]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b34:	d03b      	beq.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b3c:	d846      	bhi.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b44:	d02e      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b4c:	d83e      	bhi.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b54:	d00b      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b5c:	d836      	bhi.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6a:	d012      	beq.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006b6c:	e02e      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff fb18 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b7c:	f001 b8f6 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b80:	f107 0318 	add.w	r3, r7, #24
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fc69 	bl	800645c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b8e:	f001 b8ed 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b92:	f107 030c 	add.w	r3, r7, #12
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fdba 	bl	8006710 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ba0:	f001 b8e4 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ba4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006baa:	f001 b8df 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bae:	4b32      	ldr	r3, [pc, #200]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bba:	d103      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006bbc:	4b30      	ldr	r3, [pc, #192]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bc0:	f001 b8d4 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bc8:	f001 b8d0 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd0:	f001 b8cc 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	d126      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006be0:	4b25      	ldr	r3, [pc, #148]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006be2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006bec:	4b22      	ldr	r3, [pc, #136]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d103      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006c00:	4b1f      	ldr	r3, [pc, #124]	@ (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c04:	f001 b8b2 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006c08:	4b1b      	ldr	r3, [pc, #108]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c14:	d107      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c1c:	d103      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006c1e:	4b19      	ldr	r3, [pc, #100]	@ (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c22:	f001 b8a3 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2a:	f001 b89f 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c32:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006c36:	430b      	orrs	r3, r1
 8006c38:	d16e      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c40:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006c44:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c4c:	d03d      	beq.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c54:	d85c      	bhi.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c5c:	d014      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c64:	d854      	bhi.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01f      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c72:	d012      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006c74:	e04c      	b.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006c76:	bf00      	nop
 8006c78:	46020c00 	.word	0x46020c00
 8006c7c:	0007a120 	.word	0x0007a120
 8006c80:	00f42400 	.word	0x00f42400
 8006c84:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff fa8b 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c96:	f001 b869 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff fbdc 	bl	800645c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca8:	f001 b860 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006cac:	4ba7      	ldr	r3, [pc, #668]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb8:	d103      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006cba:	4ba5      	ldr	r3, [pc, #660]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cbc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cbe:	f001 b855 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cc6:	f001 b851 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cca:	4ba0      	ldr	r3, [pc, #640]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d118      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006ce2:	4b9a      	ldr	r3, [pc, #616]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	0e1b      	lsrs	r3, r3, #24
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006cee:	4b97      	ldr	r3, [pc, #604]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	0e1b      	lsrs	r3, r3, #24
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	4a95      	ldr	r2, [pc, #596]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d04:	f001 b832 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d0c:	f001 b82e 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d14:	f001 b82a 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006d20:	430b      	orrs	r3, r1
 8006d22:	d17f      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d24:	4b89      	ldr	r3, [pc, #548]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d165      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006d36:	4b85      	ldr	r3, [pc, #532]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d3c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006d40:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d44:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d48:	d034      	beq.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d50:	d853      	bhi.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d58:	d00b      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d60:	d84b      	bhi.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d016      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d6e:	d009      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006d70:	e043      	b.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fa16 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d80:	f000 bff4 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d84:	f107 0318 	add.w	r3, r7, #24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fb67 	bl	800645c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d92:	f000 bfeb 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d96:	4b6d      	ldr	r3, [pc, #436]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006da2:	d103      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006da4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006da8:	f000 bfe0 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006db0:	f000 bfdc 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006db4:	4b65      	ldr	r3, [pc, #404]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d118      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dc0:	4b62      	ldr	r3, [pc, #392]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006dcc:	4b5f      	ldr	r3, [pc, #380]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	0e1b      	lsrs	r3, r3, #24
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	e006      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006dd8:	4b5c      	ldr	r3, [pc, #368]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	4a5b      	ldr	r2, [pc, #364]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dec:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006dee:	f000 bfbd 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006df6:	f000 bfb9 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006dfe:	f000 bfb5 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e08:	d108      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff f9ca 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e18:	f000 bfa8 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e20:	f000 bfa4 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e28:	1e51      	subs	r1, r2, #1
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	d136      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006e2e:	4b47      	ldr	r3, [pc, #284]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006e40:	f7fe fb44 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 8006e44:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e46:	f000 bf91 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d104      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e50:	f7fe fa0c 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006e54:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e56:	f000 bf89 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e66:	d106      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d103      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e72:	f000 bf7b 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006e76:	4b35      	ldr	r3, [pc, #212]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d107      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d104      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e90:	f000 bf6c 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e98:	f000 bf68 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea0:	1e91      	subs	r1, r2, #2
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	d136      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006ea6:	4b29      	ldr	r3, [pc, #164]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eac:	f003 030c 	and.w	r3, r3, #12
 8006eb0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006eb8:	f7fe faf4 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8006ebc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ebe:	f000 bf55 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d104      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ec8:	f7fe f9d0 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006ecc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ece:	f000 bf4d 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ede:	d106      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d103      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eea:	f000 bf3f 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006eee:	4b17      	ldr	r3, [pc, #92]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d107      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	2b0c      	cmp	r3, #12
 8006f00:	d104      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f08:	f000 bf30 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f10:	f000 bf2c 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f18:	1f11      	subs	r1, r2, #4
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	d13f      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f28:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f30:	f7fe fab8 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8006f34:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f36:	f000 bf19 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d10d      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f40:	f7fe f994 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006f44:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f46:	f000 bf11 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006f4a:	bf00      	nop
 8006f4c:	46020c00 	.word	0x46020c00
 8006f50:	02dc6c00 	.word	0x02dc6c00
 8006f54:	0800a7e4 	.word	0x0800a7e4
 8006f58:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006f5c:	4ba6      	ldr	r3, [pc, #664]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f68:	d106      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d103      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006f70:	4ba2      	ldr	r3, [pc, #648]	@ (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f74:	f000 befa 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006f78:	4b9f      	ldr	r3, [pc, #636]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d107      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f88:	2b30      	cmp	r3, #48	@ 0x30
 8006f8a:	d104      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f92:	f000 beeb 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9a:	f000 bee7 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa2:	f1a2 0108 	sub.w	r1, r2, #8
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	d136      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006faa:	4b93      	ldr	r3, [pc, #588]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fb0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fb4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d104      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fbc:	f7fe fa72 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8006fc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fc2:	f000 bed3 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d104      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fcc:	f7fe f94e 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006fd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fd2:	f000 becb 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006fd6:	4b88      	ldr	r3, [pc, #544]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe2:	d106      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	2b80      	cmp	r3, #128	@ 0x80
 8006fe8:	d103      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006fea:	4b84      	ldr	r3, [pc, #528]	@ (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fee:	f000 bebd 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006ff2:	4b81      	ldr	r3, [pc, #516]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d107      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	2bc0      	cmp	r3, #192	@ 0xc0
 8007004:	d104      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
 800700c:	f000 beae 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
 8007014:	f000 beaa 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701c:	f1a2 0110 	sub.w	r1, r2, #16
 8007020:	430b      	orrs	r3, r1
 8007022:	d139      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007024:	4b74      	ldr	r3, [pc, #464]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800702a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800702e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007036:	f7fe fa35 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 800703a:	6378      	str	r0, [r7, #52]	@ 0x34
 800703c:	f000 be96 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007046:	d104      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007048:	f7fe f910 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800704c:	6378      	str	r0, [r7, #52]	@ 0x34
 800704e:	f000 be8d 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007052:	4b69      	ldr	r3, [pc, #420]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800705a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800705e:	d107      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007066:	d103      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007068:	4b64      	ldr	r3, [pc, #400]	@ (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
 800706c:	f000 be7e 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007070:	4b61      	ldr	r3, [pc, #388]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d108      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007084:	d104      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708a:	637b      	str	r3, [r7, #52]	@ 0x34
 800708c:	f000 be6e 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
 8007094:	f000 be6a 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709c:	f1a2 0120 	sub.w	r1, r2, #32
 80070a0:	430b      	orrs	r3, r1
 80070a2:	d158      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80070a4:	4b54      	ldr	r3, [pc, #336]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80070b6:	f7fe fa1d 	bl	80054f4 <HAL_RCC_GetPCLK3Freq>
 80070ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80070bc:	f000 be56 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d104      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070c6:	f7fe f8d1 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80070ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80070cc:	f000 be4e 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80070d0:	4b49      	ldr	r3, [pc, #292]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070dc:	d106      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d103      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80070e4:	4b45      	ldr	r3, [pc, #276]	@ (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e8:	f000 be40 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80070ec:	4b42      	ldr	r3, [pc, #264]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d107      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d104      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007104:	637b      	str	r3, [r7, #52]	@ 0x34
 8007106:	f000 be31 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800710a:	4b3b      	ldr	r3, [pc, #236]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b20      	cmp	r3, #32
 8007114:	d11b      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	2b04      	cmp	r3, #4
 800711a:	d118      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800711c:	4b36      	ldr	r3, [pc, #216]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007128:	4b33      	ldr	r3, [pc, #204]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	0e1b      	lsrs	r3, r3, #24
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	e006      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007134:	4b30      	ldr	r3, [pc, #192]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	0e1b      	lsrs	r3, r3, #24
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	4a2f      	ldr	r2, [pc, #188]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007148:	637b      	str	r3, [r7, #52]	@ 0x34
 800714a:	f000 be0f 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
 8007152:	f000 be0b 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800715a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800715e:	430b      	orrs	r3, r1
 8007160:	d172      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007162:	4b25      	ldr	r3, [pc, #148]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007168:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800716c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007174:	d104      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007176:	f7fe f879 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800717a:	6378      	str	r0, [r7, #52]	@ 0x34
 800717c:	f000 bdf6 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007186:	d108      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007188:	f107 0318 	add.w	r3, r7, #24
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff f965 	bl	800645c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	f000 bde9 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80071a0:	f7fe f966 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 80071a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80071a6:	f000 bde1 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071b0:	d128      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071b2:	4b11      	ldr	r3, [pc, #68]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d118      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071be:	4b0e      	ldr	r3, [pc, #56]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80071ca:	4b0b      	ldr	r3, [pc, #44]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	0e1b      	lsrs	r3, r3, #24
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	e006      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80071d6:	4b08      	ldr	r3, [pc, #32]	@ (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	0e1b      	lsrs	r3, r3, #24
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	4a06      	ldr	r2, [pc, #24]	@ (8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ec:	f000 bdbe 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f4:	f000 bdba 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80071f8:	46020c00 	.word	0x46020c00
 80071fc:	00f42400 	.word	0x00f42400
 8007200:	0800a7e4 	.word	0x0800a7e4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007204:	4baf      	ldr	r3, [pc, #700]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007210:	d107      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007218:	d103      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800721a:	4bab      	ldr	r3, [pc, #684]	@ (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
 800721e:	f000 bda5 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007222:	4ba8      	ldr	r3, [pc, #672]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800722a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800722e:	d107      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007236:	d103      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8007238:	4ba3      	ldr	r3, [pc, #652]	@ (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
 800723c:	f000 bd96 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
 8007244:	f000 bd92 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800724c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007250:	430b      	orrs	r3, r1
 8007252:	d158      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007254:	4b9b      	ldr	r3, [pc, #620]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007256:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	2b04      	cmp	r3, #4
 8007264:	d84b      	bhi.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	080072a5 	.word	0x080072a5
 8007270:	08007281 	.word	0x08007281
 8007274:	08007293 	.word	0x08007293
 8007278:	080072af 	.word	0x080072af
 800727c:	080072b9 	.word	0x080072b9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe ff8f 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800728e:	f000 bd6d 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007292:	f107 030c 	add.w	r3, r7, #12
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff fa3a 	bl	8006710 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072a0:	f000 bd64 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80072a4:	f7fe f8e4 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 80072a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072aa:	f000 bd5f 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80072ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072b4:	f000 bd5a 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072b8:	4b82      	ldr	r3, [pc, #520]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d118      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072c4:	4b7f      	ldr	r3, [pc, #508]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80072d0:	4b7c      	ldr	r3, [pc, #496]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	0e1b      	lsrs	r3, r3, #24
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	e006      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80072dc:	4b79      	ldr	r3, [pc, #484]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	0e1b      	lsrs	r3, r3, #24
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	4a78      	ldr	r2, [pc, #480]	@ (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80072ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072f2:	f000 bd3b 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072fa:	f000 bd37 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007302:	f000 bd33 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800730e:	430b      	orrs	r3, r1
 8007310:	d167      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007312:	4b6c      	ldr	r3, [pc, #432]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007318:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800731c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007324:	d036      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800732c:	d855      	bhi.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007334:	d029      	beq.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8007336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007338:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800733c:	d84d      	bhi.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007344:	d013      	beq.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734c:	d845      	bhi.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	2b00      	cmp	r3, #0
 8007352:	d015      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735a:	d13e      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe ff21 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800736a:	f000 bcff 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff f9cc 	bl	8006710 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800737c:	f000 bcf6 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007380:	f7fe f876 	bl	8005470 <HAL_RCC_GetHCLKFreq>
 8007384:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007386:	f000 bcf1 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800738a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800738e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007390:	f000 bcec 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007394:	4b4b      	ldr	r3, [pc, #300]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b20      	cmp	r3, #32
 800739e:	d118      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073a0:	4b48      	ldr	r3, [pc, #288]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80073ac:	4b45      	ldr	r3, [pc, #276]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	0e1b      	lsrs	r3, r3, #24
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	e006      	b.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80073b8:	4b42      	ldr	r3, [pc, #264]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	0e1b      	lsrs	r3, r3, #24
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	4a41      	ldr	r2, [pc, #260]	@ (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80073c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073ce:	f000 bccd 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d6:	f000 bcc9 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073de:	f000 bcc5 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80073e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80073ea:	430b      	orrs	r3, r1
 80073ec:	d14c      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80073ee:	4b35      	ldr	r3, [pc, #212]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fe f850 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8007404:	6378      	str	r0, [r7, #52]	@ 0x34
 8007406:	f000 bcb1 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007410:	d104      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007412:	f7fd ff2b 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8007416:	6378      	str	r0, [r7, #52]	@ 0x34
 8007418:	f000 bca8 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800741c:	4b29      	ldr	r3, [pc, #164]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007428:	d107      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007430:	d103      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8007432:	4b25      	ldr	r3, [pc, #148]	@ (80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
 8007436:	f000 bc99 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800743a:	4b22      	ldr	r3, [pc, #136]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b20      	cmp	r3, #32
 8007444:	d11c      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800744c:	d118      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800744e:	4b1d      	ldr	r3, [pc, #116]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800745a:	4b1a      	ldr	r3, [pc, #104]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	0e1b      	lsrs	r3, r3, #24
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	e006      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8007466:	4b17      	ldr	r3, [pc, #92]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800746c:	041b      	lsls	r3, r3, #16
 800746e:	0e1b      	lsrs	r3, r3, #24
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	4a15      	ldr	r2, [pc, #84]	@ (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
 800747c:	f000 bc76 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
 8007484:	f000 bc72 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007490:	430b      	orrs	r3, r1
 8007492:	d153      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007494:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800749a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800749e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80074a6:	f7fd fffd 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 80074aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80074ac:	f000 bc5e 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b6:	d10b      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074b8:	f7fd fed8 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80074bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80074be:	f000 bc55 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80074c2:	bf00      	nop
 80074c4:	46020c00 	.word	0x46020c00
 80074c8:	00f42400 	.word	0x00f42400
 80074cc:	0800a7e4 	.word	0x0800a7e4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80074d0:	4ba1      	ldr	r3, [pc, #644]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074dc:	d107      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074e4:	d103      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80074e6:	4b9d      	ldr	r3, [pc, #628]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ea:	f000 bc3f 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80074ee:	4b9a      	ldr	r3, [pc, #616]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d11c      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007500:	d118      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007502:	4b95      	ldr	r3, [pc, #596]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800750e:	4b92      	ldr	r3, [pc, #584]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	0e1b      	lsrs	r3, r3, #24
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	e006      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800751a:	4b8f      	ldr	r3, [pc, #572]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800751c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	0e1b      	lsrs	r3, r3, #24
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	4a8d      	ldr	r2, [pc, #564]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800752a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007530:	f000 bc1c 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
 8007538:	f000 bc18 	b.w	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007544:	430b      	orrs	r3, r1
 8007546:	d151      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007548:	4b83      	ldr	r3, [pc, #524]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800754a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800754e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007552:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007556:	2bc0      	cmp	r3, #192	@ 0xc0
 8007558:	d024      	beq.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	2bc0      	cmp	r3, #192	@ 0xc0
 800755e:	d842      	bhi.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	2b80      	cmp	r3, #128	@ 0x80
 8007564:	d00d      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	2b80      	cmp	r3, #128	@ 0x80
 800756a:	d83c      	bhi.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	2b40      	cmp	r3, #64	@ 0x40
 8007576:	d011      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007578:	e035      	b.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800757a:	f7fd ffbb 	bl	80054f4 <HAL_RCC_GetPCLK3Freq>
 800757e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007580:	e3f4      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007582:	4b75      	ldr	r3, [pc, #468]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800758e:	d102      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8007590:	4b72      	ldr	r3, [pc, #456]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007594:	e3ea      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800759a:	e3e7      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800759c:	f7fd fe66 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80075a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075a2:	e3e3      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d117      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075b0:	4b69      	ldr	r3, [pc, #420]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80075bc:	4b66      	ldr	r3, [pc, #408]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	0e1b      	lsrs	r3, r3, #24
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	e006      	b.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80075c8:	4b63      	ldr	r3, [pc, #396]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	0e1b      	lsrs	r3, r3, #24
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	4a62      	ldr	r2, [pc, #392]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80075d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075de:	e3c5      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075e4:	e3c2      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ea:	e3bf      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80075ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80075f4:	430b      	orrs	r3, r1
 80075f6:	d147      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80075f8:	4b57      	ldr	r3, [pc, #348]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007602:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800760a:	f7fd ff4b 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 800760e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007610:	e3ac      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007618:	d103      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800761a:	f7fd fe27 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800761e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007620:	e3a4      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007622:	4b4d      	ldr	r3, [pc, #308]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800762e:	d106      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007636:	d102      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8007638:	4b48      	ldr	r3, [pc, #288]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
 800763c:	e396      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800763e:	4b46      	ldr	r3, [pc, #280]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b20      	cmp	r3, #32
 8007648:	d11b      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007650:	d117      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007652:	4b41      	ldr	r3, [pc, #260]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d005      	beq.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800765e:	4b3e      	ldr	r3, [pc, #248]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	0e1b      	lsrs	r3, r3, #24
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	e006      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800766a:	4b3b      	ldr	r3, [pc, #236]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800766c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007670:	041b      	lsls	r3, r3, #16
 8007672:	0e1b      	lsrs	r3, r3, #24
 8007674:	f003 030f 	and.w	r3, r3, #15
 8007678:	4a39      	ldr	r2, [pc, #228]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800767a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007680:	e374      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	637b      	str	r3, [r7, #52]	@ 0x34
 8007686:	e371      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007690:	430b      	orrs	r3, r1
 8007692:	d16a      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007694:	4b30      	ldr	r3, [pc, #192]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800769a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800769e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d120      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d117      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076b2:	4b29      	ldr	r3, [pc, #164]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80076be:	4b26      	ldr	r3, [pc, #152]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	0e1b      	lsrs	r3, r3, #24
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	e006      	b.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80076ca:	4b23      	ldr	r3, [pc, #140]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	0e1b      	lsrs	r3, r3, #24
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	4a21      	ldr	r2, [pc, #132]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80076da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076de:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e0:	e344      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e6:	e341      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80076e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f6:	d112      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076fe:	d10e      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007700:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800770a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800770e:	d102      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8007710:	23fa      	movs	r3, #250	@ 0xfa
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007714:	e32a      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007716:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800771a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800771c:	e326      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800771e:	4b0e      	ldr	r3, [pc, #56]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800772a:	d106      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007732:	d102      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8007734:	4b09      	ldr	r3, [pc, #36]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
 8007738:	e318      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800773a:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800773c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b02      	cmp	r3, #2
 8007746:	d10d      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800774e:	d109      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8007750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007754:	637b      	str	r3, [r7, #52]	@ 0x34
 8007756:	e309      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007758:	46020c00 	.word	0x46020c00
 800775c:	00f42400 	.word	0x00f42400
 8007760:	0800a7e4 	.word	0x0800a7e4
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	637b      	str	r3, [r7, #52]	@ 0x34
 8007768:	e300      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800776a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776e:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007772:	430b      	orrs	r3, r1
 8007774:	d164      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007776:	4ba2      	ldr	r3, [pc, #648]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800777c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007780:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	2b00      	cmp	r3, #0
 8007786:	d120      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007788:	4b9d      	ldr	r3, [pc, #628]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b20      	cmp	r3, #32
 8007792:	d117      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007794:	4b9a      	ldr	r3, [pc, #616]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80077a0:	4b97      	ldr	r3, [pc, #604]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	0e1b      	lsrs	r3, r3, #24
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	e006      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80077ac:	4b94      	ldr	r3, [pc, #592]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077b2:	041b      	lsls	r3, r3, #16
 80077b4:	0e1b      	lsrs	r3, r3, #24
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	4a92      	ldr	r2, [pc, #584]	@ (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80077bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c2:	e2d3      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c8:	e2d0      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80077ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077d8:	d112      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e0:	d10e      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077e2:	4b87      	ldr	r3, [pc, #540]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f0:	d102      	bne.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80077f2:	23fa      	movs	r3, #250	@ 0xfa
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077f6:	e2b9      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80077f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077fe:	e2b5      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007800:	4b7f      	ldr	r3, [pc, #508]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780c:	d106      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007814:	d102      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8007816:	4b7c      	ldr	r3, [pc, #496]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007818:	637b      	str	r3, [r7, #52]	@ 0x34
 800781a:	e2a7      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800781c:	4b78      	ldr	r3, [pc, #480]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800781e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d107      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007830:	d103      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8007832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
 8007838:	e298      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	637b      	str	r3, [r7, #52]	@ 0x34
 800783e:	e295      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007844:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007848:	430b      	orrs	r3, r1
 800784a:	d147      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800784c:	4b6c      	ldr	r3, [pc, #432]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800784e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007852:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007856:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800785e:	f7fd fe21 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8007862:	6378      	str	r0, [r7, #52]	@ 0x34
 8007864:	e282      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007866:	4b66      	ldr	r3, [pc, #408]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800786c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007874:	d112      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800787c:	d10e      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800787e:	4b60      	ldr	r3, [pc, #384]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800788c:	d102      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800788e:	23fa      	movs	r3, #250	@ 0xfa
 8007890:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007892:	e26b      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007894:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800789a:	e267      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800789c:	4b58      	ldr	r3, [pc, #352]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078a8:	d106      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078b0:	d102      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80078b2:	4b55      	ldr	r3, [pc, #340]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80078b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b6:	e259      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80078b8:	4b51      	ldr	r3, [pc, #324]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d107      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078cc:	d103      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80078ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d4:	e24a      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078da:	e247      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80078dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80078e4:	430b      	orrs	r3, r1
 80078e6:	d12d      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80078e8:	4b45      	ldr	r3, [pc, #276]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078ee:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80078f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80078f4:	4b42      	ldr	r3, [pc, #264]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007900:	d105      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007908:	4b3f      	ldr	r3, [pc, #252]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
 800790c:	e22e      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007914:	d107      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fc44 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	637b      	str	r3, [r7, #52]	@ 0x34
 8007924:	e222      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800792c:	d107      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800792e:	f107 0318 	add.w	r3, r7, #24
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fd92 	bl	800645c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
 800793c:	e216      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	637b      	str	r3, [r7, #52]	@ 0x34
 8007942:	e213      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007948:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800794c:	430b      	orrs	r3, r1
 800794e:	d15d      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007950:	4b2b      	ldr	r3, [pc, #172]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007956:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800795a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007962:	d028      	beq.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800796a:	d845      	bhi.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007972:	d013      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800797a:	d83d      	bhi.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007988:	d004      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800798a:	e035      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800798c:	f7fd fd9e 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 8007990:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007992:	e1eb      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007994:	f7fd fc6a 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8007998:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800799a:	e1e7      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800799c:	4b18      	ldr	r3, [pc, #96]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a8:	d102      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80079aa:	4b17      	ldr	r3, [pc, #92]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80079ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079ae:	e1dd      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079b4:	e1da      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80079b6:	4b12      	ldr	r3, [pc, #72]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d117      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80079ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	0e1b      	lsrs	r3, r3, #24
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	e006      	b.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80079da:	4b09      	ldr	r3, [pc, #36]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	0e1b      	lsrs	r3, r3, #24
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	4a06      	ldr	r2, [pc, #24]	@ (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80079ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079f0:	e1bc      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079f6:	e1b9      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079fc:	e1b6      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80079fe:	bf00      	nop
 8007a00:	46020c00 	.word	0x46020c00
 8007a04:	0800a7e4 	.word	0x0800a7e4
 8007a08:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a10:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007a14:	430b      	orrs	r3, r1
 8007a16:	d156      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007a18:	4ba5      	ldr	r3, [pc, #660]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a22:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a2a:	d028      	beq.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a32:	d845      	bhi.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3a:	d013      	beq.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a42:	d83d      	bhi.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a50:	d004      	beq.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007a52:	e035      	b.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007a54:	f7fd fd26 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 8007a58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a5a:	e187      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a5c:	f7fd fc06 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8007a60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a62:	e183      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a64:	4b92      	ldr	r3, [pc, #584]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a70:	d102      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007a72:	4b90      	ldr	r3, [pc, #576]	@ (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a76:	e179      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a7c:	e176      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a7e:	4b8c      	ldr	r3, [pc, #560]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d117      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a8a:	4b89      	ldr	r3, [pc, #548]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007a96:	4b86      	ldr	r3, [pc, #536]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	0e1b      	lsrs	r3, r3, #24
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	e006      	b.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8007aa2:	4b83      	ldr	r3, [pc, #524]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	0e1b      	lsrs	r3, r3, #24
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	4a81      	ldr	r2, [pc, #516]	@ (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ab8:	e158      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007abe:	e155      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ac4:	e152      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aca:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	d177      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007ad2:	4b77      	ldr	r3, [pc, #476]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ad8:	f003 0318 	and.w	r3, r3, #24
 8007adc:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	2b18      	cmp	r3, #24
 8007ae2:	d86b      	bhi.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007b51 	.word	0x08007b51
 8007af0:	08007bbd 	.word	0x08007bbd
 8007af4:	08007bbd 	.word	0x08007bbd
 8007af8:	08007bbd 	.word	0x08007bbd
 8007afc:	08007bbd 	.word	0x08007bbd
 8007b00:	08007bbd 	.word	0x08007bbd
 8007b04:	08007bbd 	.word	0x08007bbd
 8007b08:	08007bbd 	.word	0x08007bbd
 8007b0c:	08007b59 	.word	0x08007b59
 8007b10:	08007bbd 	.word	0x08007bbd
 8007b14:	08007bbd 	.word	0x08007bbd
 8007b18:	08007bbd 	.word	0x08007bbd
 8007b1c:	08007bbd 	.word	0x08007bbd
 8007b20:	08007bbd 	.word	0x08007bbd
 8007b24:	08007bbd 	.word	0x08007bbd
 8007b28:	08007bbd 	.word	0x08007bbd
 8007b2c:	08007b61 	.word	0x08007b61
 8007b30:	08007bbd 	.word	0x08007bbd
 8007b34:	08007bbd 	.word	0x08007bbd
 8007b38:	08007bbd 	.word	0x08007bbd
 8007b3c:	08007bbd 	.word	0x08007bbd
 8007b40:	08007bbd 	.word	0x08007bbd
 8007b44:	08007bbd 	.word	0x08007bbd
 8007b48:	08007bbd 	.word	0x08007bbd
 8007b4c:	08007b7b 	.word	0x08007b7b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007b50:	f7fd fcd0 	bl	80054f4 <HAL_RCC_GetPCLK3Freq>
 8007b54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b56:	e109      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007b58:	f7fd fb88 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8007b5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b5e:	e105      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b60:	4b53      	ldr	r3, [pc, #332]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b6c:	d102      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007b6e:	4b51      	ldr	r3, [pc, #324]	@ (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007b70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b72:	e0fb      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b78:	e0f8      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b7a:	4b4d      	ldr	r3, [pc, #308]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d117      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b86:	4b4a      	ldr	r3, [pc, #296]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007b92:	4b47      	ldr	r3, [pc, #284]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	0e1b      	lsrs	r3, r3, #24
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	e006      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007b9e:	4b44      	ldr	r3, [pc, #272]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	0e1b      	lsrs	r3, r3, #24
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	4a42      	ldr	r2, [pc, #264]	@ (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bb4:	e0da      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bba:	e0d7      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bc0:	e0d4      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	d155      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007bce:	4b38      	ldr	r3, [pc, #224]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bd4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007bd8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007be0:	d013      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007be8:	d844      	bhi.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bf0:	d013      	beq.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bf8:	d83c      	bhi.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d014      	beq.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c06:	d014      	beq.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007c08:	e034      	b.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c0a:	f107 0318 	add.w	r3, r7, #24
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fc24 	bl	800645c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c18:	e0a8      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fac2 	bl	80061a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c28:	e0a0      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c2a:	f7fd fb1f 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8007c2e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c30:	e09c      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c32:	4b1f      	ldr	r3, [pc, #124]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d117      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007c4a:	4b19      	ldr	r3, [pc, #100]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	0e1b      	lsrs	r3, r3, #24
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	e006      	b.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007c56:	4b16      	ldr	r3, [pc, #88]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	0e1b      	lsrs	r3, r3, #24
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	4a14      	ldr	r2, [pc, #80]	@ (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c6c:	e07e      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c72:	e07b      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c78:	e078      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c7e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007c82:	430b      	orrs	r3, r1
 8007c84:	d138      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007c86:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c90:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007c92:	4b07      	ldr	r3, [pc, #28]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d10d      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cac:	e05e      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007cae:	bf00      	nop
 8007cb0:	46020c00 	.word	0x46020c00
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	0800a7e4 	.word	0x0800a7e4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cca:	d112      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd2:	d10e      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cd4:	4b28      	ldr	r3, [pc, #160]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ce2:	d102      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007ce4:	23fa      	movs	r3, #250	@ 0xfa
 8007ce6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ce8:	e040      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007cea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cf0:	e03c      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf6:	e039      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007d00:	430b      	orrs	r3, r1
 8007d02:	d131      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007d04:	4b1c      	ldr	r3, [pc, #112]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d0a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d0e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007d10:	4b19      	ldr	r3, [pc, #100]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d1c:	d105      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007d24:	4b15      	ldr	r3, [pc, #84]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d28:	e020      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007d2a:	4b13      	ldr	r3, [pc, #76]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d36:	d106      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d3e:	d102      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007d40:	4b0f      	ldr	r3, [pc, #60]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d44:	e012      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007d46:	4b0c      	ldr	r3, [pc, #48]	@ (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d52:	d106      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d5a:	d102      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007d5c:	4b09      	ldr	r3, [pc, #36]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d60:	e004      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d66:	e001      	b.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3738      	adds	r7, #56	@ 0x38
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	46020c00 	.word	0x46020c00
 8007d7c:	02dc6c00 	.word	0x02dc6c00
 8007d80:	016e3600 	.word	0x016e3600
 8007d84:	00f42400 	.word	0x00f42400

08007d88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007d90:	4b47      	ldr	r3, [pc, #284]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a46      	ldr	r2, [pc, #280]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007d96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d9c:	f7fa f938 	bl	8002010 <HAL_GetTick>
 8007da0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007da2:	e008      	b.n	8007db6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007da4:	f7fa f934 	bl	8002010 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e077      	b.n	8007ea6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007db6:	4b3e      	ldr	r3, [pc, #248]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1f0      	bne.n	8007da4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007dca:	f023 0303 	bic.w	r3, r3, #3
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6811      	ldr	r1, [r2, #0]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6852      	ldr	r2, [r2, #4]
 8007dd6:	3a01      	subs	r2, #1
 8007dd8:	0212      	lsls	r2, r2, #8
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	4934      	ldr	r1, [pc, #208]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007de2:	4b33      	ldr	r3, [pc, #204]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007de6:	4b33      	ldr	r3, [pc, #204]	@ (8007eb4 <RCCEx_PLL2_Config+0x12c>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6892      	ldr	r2, [r2, #8]
 8007dee:	3a01      	subs	r2, #1
 8007df0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	68d2      	ldr	r2, [r2, #12]
 8007df8:	3a01      	subs	r2, #1
 8007dfa:	0252      	lsls	r2, r2, #9
 8007dfc:	b292      	uxth	r2, r2
 8007dfe:	4311      	orrs	r1, r2
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6912      	ldr	r2, [r2, #16]
 8007e04:	3a01      	subs	r2, #1
 8007e06:	0412      	lsls	r2, r2, #16
 8007e08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007e0c:	4311      	orrs	r1, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6952      	ldr	r2, [r2, #20]
 8007e12:	3a01      	subs	r2, #1
 8007e14:	0612      	lsls	r2, r2, #24
 8007e16:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	4924      	ldr	r1, [pc, #144]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007e22:	4b23      	ldr	r3, [pc, #140]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e26:	f023 020c 	bic.w	r2, r3, #12
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	4920      	ldr	r1, [pc, #128]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007e34:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	491c      	ldr	r1, [pc, #112]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007e42:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e46:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e48:	f023 0310 	bic.w	r3, r3, #16
 8007e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e4e:	4b18      	ldr	r3, [pc, #96]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	69d2      	ldr	r2, [r2, #28]
 8007e5e:	00d2      	lsls	r2, r2, #3
 8007e60:	4913      	ldr	r1, [pc, #76]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007e66:	4b12      	ldr	r3, [pc, #72]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	4a11      	ldr	r2, [pc, #68]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e6c:	f043 0310 	orr.w	r3, r3, #16
 8007e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007e72:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a0e      	ldr	r2, [pc, #56]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e7e:	f7fa f8c7 	bl	8002010 <HAL_GetTick>
 8007e82:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e84:	e008      	b.n	8007e98 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e86:	f7fa f8c3 	bl	8002010 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e006      	b.n	8007ea6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e98:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <RCCEx_PLL2_Config+0x128>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0f0      	beq.n	8007e86 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0

}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	46020c00 	.word	0x46020c00
 8007eb4:	80800000 	.word	0x80800000

08007eb8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007ec0:	4b47      	ldr	r3, [pc, #284]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a46      	ldr	r2, [pc, #280]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ecc:	f7fa f8a0 	bl	8002010 <HAL_GetTick>
 8007ed0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ed2:	e008      	b.n	8007ee6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ed4:	f7fa f89c 	bl	8002010 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d901      	bls.n	8007ee6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e077      	b.n	8007fd6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f0      	bne.n	8007ed4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6811      	ldr	r1, [r2, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6852      	ldr	r2, [r2, #4]
 8007f06:	3a01      	subs	r2, #1
 8007f08:	0212      	lsls	r2, r2, #8
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	4934      	ldr	r1, [pc, #208]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	630b      	str	r3, [r1, #48]	@ 0x30
 8007f12:	4b33      	ldr	r3, [pc, #204]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f16:	4b33      	ldr	r3, [pc, #204]	@ (8007fe4 <RCCEx_PLL3_Config+0x12c>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6892      	ldr	r2, [r2, #8]
 8007f1e:	3a01      	subs	r2, #1
 8007f20:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	68d2      	ldr	r2, [r2, #12]
 8007f28:	3a01      	subs	r2, #1
 8007f2a:	0252      	lsls	r2, r2, #9
 8007f2c:	b292      	uxth	r2, r2
 8007f2e:	4311      	orrs	r1, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6912      	ldr	r2, [r2, #16]
 8007f34:	3a01      	subs	r2, #1
 8007f36:	0412      	lsls	r2, r2, #16
 8007f38:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007f3c:	4311      	orrs	r1, r2
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6952      	ldr	r2, [r2, #20]
 8007f42:	3a01      	subs	r2, #1
 8007f44:	0612      	lsls	r2, r2, #24
 8007f46:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	4924      	ldr	r1, [pc, #144]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007f52:	4b23      	ldr	r3, [pc, #140]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f56:	f023 020c 	bic.w	r2, r3, #12
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	4920      	ldr	r1, [pc, #128]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007f64:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	491c      	ldr	r1, [pc, #112]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007f72:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f78:	f023 0310 	bic.w	r3, r3, #16
 8007f7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f7e:	4b18      	ldr	r3, [pc, #96]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	69d2      	ldr	r2, [r2, #28]
 8007f8e:	00d2      	lsls	r2, r2, #3
 8007f90:	4913      	ldr	r1, [pc, #76]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007f96:	4b12      	ldr	r3, [pc, #72]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9a:	4a11      	ldr	r2, [pc, #68]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007f9c:	f043 0310 	orr.w	r3, r3, #16
 8007fa0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fae:	f7fa f82f 	bl	8002010 <HAL_GetTick>
 8007fb2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fb4:	e008      	b.n	8007fc8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fb6:	f7fa f82b 	bl	8002010 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e006      	b.n	8007fd6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fc8:	4b05      	ldr	r3, [pc, #20]	@ (8007fe0 <RCCEx_PLL3_Config+0x128>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0f0      	beq.n	8007fb6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	46020c00 	.word	0x46020c00
 8007fe4:	80800000 	.word	0x80800000

08007fe8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e0fb      	b.n	80081f2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80081fc <HAL_SPI_Init+0x214>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d004      	beq.n	800800e <HAL_SPI_Init+0x26>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a7d      	ldr	r2, [pc, #500]	@ (8008200 <HAL_SPI_Init+0x218>)
 800800a:	4293      	cmp	r3, r2
 800800c:	e000      	b.n	8008010 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800800e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a78      	ldr	r2, [pc, #480]	@ (80081fc <HAL_SPI_Init+0x214>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d004      	beq.n	800802a <HAL_SPI_Init+0x42>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a76      	ldr	r2, [pc, #472]	@ (8008200 <HAL_SPI_Init+0x218>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d105      	bne.n	8008036 <HAL_SPI_Init+0x4e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b0f      	cmp	r3, #15
 8008030:	d901      	bls.n	8008036 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e0dd      	b.n	80081f2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 f8d0 	bl	80091dc <SPI_GetPacketSize>
 800803c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a6e      	ldr	r2, [pc, #440]	@ (80081fc <HAL_SPI_Init+0x214>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d004      	beq.n	8008052 <HAL_SPI_Init+0x6a>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a6c      	ldr	r2, [pc, #432]	@ (8008200 <HAL_SPI_Init+0x218>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d102      	bne.n	8008058 <HAL_SPI_Init+0x70>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b08      	cmp	r3, #8
 8008056:	d816      	bhi.n	8008086 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800805c:	4a69      	ldr	r2, [pc, #420]	@ (8008204 <HAL_SPI_Init+0x21c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a68      	ldr	r2, [pc, #416]	@ (8008208 <HAL_SPI_Init+0x220>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_SPI_Init+0x98>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a66      	ldr	r2, [pc, #408]	@ (800820c <HAL_SPI_Init+0x224>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_SPI_Init+0x98>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a65      	ldr	r2, [pc, #404]	@ (8008210 <HAL_SPI_Init+0x228>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d104      	bne.n	800808a <HAL_SPI_Init+0xa2>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b10      	cmp	r3, #16
 8008084:	d901      	bls.n	800808a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e0b3      	b.n	80081f2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f9 fa60 	bl	8001564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80080c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080d0:	d119      	bne.n	8008106 <HAL_SPI_Init+0x11e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080da:	d103      	bne.n	80080e4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10c      	bne.n	8008106 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080f4:	d107      	bne.n	8008106 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008104:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <HAL_SPI_Init+0x14a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b06      	cmp	r3, #6
 8008118:	d90b      	bls.n	8008132 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	e007      	b.n	8008142 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69da      	ldr	r2, [r3, #28]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814a:	431a      	orrs	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008154:	ea42 0103 	orr.w	r1, r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ae:	ea42 0103 	orr.w	r1, r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	46002000 	.word	0x46002000
 8008200:	56002000 	.word	0x56002000
 8008204:	40013000 	.word	0x40013000
 8008208:	50013000 	.word	0x50013000
 800820c:	40003800 	.word	0x40003800
 8008210:	50003800 	.word	0x50003800

08008214 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af02      	add	r7, sp, #8
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3320      	adds	r3, #32
 800822a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a90      	ldr	r2, [pc, #576]	@ (8008474 <HAL_SPI_Transmit+0x260>)
 8008232:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008234:	f7f9 feec 	bl	8002010 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	d001      	beq.n	800824a <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8008246:	2302      	movs	r3, #2
 8008248:	e1f4      	b.n	8008634 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <HAL_SPI_Transmit+0x42>
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e1ec      	b.n	8008634 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_SPI_Transmit+0x54>
 8008264:	2302      	movs	r3, #2
 8008266:	e1e5      	b.n	8008634 <HAL_SPI_Transmit+0x420>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2203      	movs	r2, #3
 8008274:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80082c0:	d108      	bne.n	80082d4 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e009      	b.n	80082e8 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80082e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	0c1b      	lsrs	r3, r3, #16
 80082f0:	041b      	lsls	r3, r3, #16
 80082f2:	88f9      	ldrh	r1, [r7, #6]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	6812      	ldr	r2, [r2, #0]
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10c      	bne.n	8008334 <HAL_SPI_Transmit+0x120>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008322:	d107      	bne.n	8008334 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b0f      	cmp	r3, #15
 800833a:	d95b      	bls.n	80083f4 <HAL_SPI_Transmit+0x1e0>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a4d      	ldr	r2, [pc, #308]	@ (8008478 <HAL_SPI_Transmit+0x264>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d04f      	beq.n	80083e6 <HAL_SPI_Transmit+0x1d2>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a4c      	ldr	r2, [pc, #304]	@ (800847c <HAL_SPI_Transmit+0x268>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d04a      	beq.n	80083e6 <HAL_SPI_Transmit+0x1d2>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a4a      	ldr	r2, [pc, #296]	@ (8008480 <HAL_SPI_Transmit+0x26c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d045      	beq.n	80083e6 <HAL_SPI_Transmit+0x1d2>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a49      	ldr	r2, [pc, #292]	@ (8008484 <HAL_SPI_Transmit+0x270>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d147      	bne.n	80083f4 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008364:	e03f      	b.n	80083e6 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b02      	cmp	r3, #2
 8008372:	d114      	bne.n	800839e <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008384:	1d1a      	adds	r2, r3, #4
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800839c:	e023      	b.n	80083e6 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800839e:	f7f9 fe37 	bl	8002010 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d803      	bhi.n	80083b6 <HAL_SPI_Transmit+0x1a2>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d102      	bne.n	80083bc <HAL_SPI_Transmit+0x1a8>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d114      	bne.n	80083e6 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fe3f 	bl	8009040 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e126      	b.n	8008634 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1b9      	bne.n	8008366 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80083f2:	e0f9      	b.n	80085e8 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	2b07      	cmp	r3, #7
 80083fa:	f240 80ee 	bls.w	80085da <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80083fe:	e067      	b.n	80084d0 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b02      	cmp	r3, #2
 800840c:	d13c      	bne.n	8008488 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b01      	cmp	r3, #1
 8008418:	d918      	bls.n	800844c <HAL_SPI_Transmit+0x238>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d014      	beq.n	800844c <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6812      	ldr	r2, [r2, #0]
 800842c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800843e:	b29b      	uxth	r3, r3
 8008440:	3b02      	subs	r3, #2
 8008442:	b29a      	uxth	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800844a:	e041      	b.n	80084d0 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008450:	881a      	ldrh	r2, [r3, #0]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800845a:	1c9a      	adds	r2, r3, #2
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008466:	b29b      	uxth	r3, r3
 8008468:	3b01      	subs	r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008472:	e02d      	b.n	80084d0 <HAL_SPI_Transmit+0x2bc>
 8008474:	46002000 	.word	0x46002000
 8008478:	40013000 	.word	0x40013000
 800847c:	50013000 	.word	0x50013000
 8008480:	40003800 	.word	0x40003800
 8008484:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008488:	f7f9 fdc2 	bl	8002010 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d803      	bhi.n	80084a0 <HAL_SPI_Transmit+0x28c>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d102      	bne.n	80084a6 <HAL_SPI_Transmit+0x292>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d114      	bne.n	80084d0 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fdca 	bl	8009040 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e0b1      	b.n	8008634 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d191      	bne.n	8008400 <HAL_SPI_Transmit+0x1ec>
 80084dc:	e084      	b.n	80085e8 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d152      	bne.n	8008592 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d918      	bls.n	800852a <HAL_SPI_Transmit+0x316>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fc:	2b40      	cmp	r3, #64	@ 0x40
 80084fe:	d914      	bls.n	800852a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008510:	1d1a      	adds	r2, r3, #4
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b04      	subs	r3, #4
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008528:	e057      	b.n	80085da <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b01      	cmp	r3, #1
 8008534:	d917      	bls.n	8008566 <HAL_SPI_Transmit+0x352>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d013      	beq.n	8008566 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008542:	881a      	ldrh	r2, [r3, #0]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800854c:	1c9a      	adds	r2, r3, #2
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008558:	b29b      	uxth	r3, r3
 800855a:	3b02      	subs	r3, #2
 800855c:	b29a      	uxth	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008564:	e039      	b.n	80085da <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3320      	adds	r3, #32
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008590:	e023      	b.n	80085da <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008592:	f7f9 fd3d 	bl	8002010 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d803      	bhi.n	80085aa <HAL_SPI_Transmit+0x396>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a8:	d102      	bne.n	80085b0 <HAL_SPI_Transmit+0x39c>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d114      	bne.n	80085da <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 fd45 	bl	8009040 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e02c      	b.n	8008634 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f47f af7b 	bne.w	80084de <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	2108      	movs	r1, #8
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fdc4 	bl	8009180 <SPI_WaitOnFlagUntilTimeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008604:	f043 0220 	orr.w	r2, r3, #32
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fd16 	bl	8009040 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e000      	b.n	8008634 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8008632:	2300      	movs	r3, #0
  }
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	4613      	mov	r3, r2
 800864a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	b29b      	uxth	r3, r3
 8008654:	3301      	adds	r3, #1
 8008656:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3330      	adds	r3, #48	@ 0x30
 800865e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a94      	ldr	r2, [pc, #592]	@ (80088b8 <HAL_SPI_Receive+0x27c>)
 8008666:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008668:	f7f9 fcd2 	bl	8002010 <HAL_GetTick>
 800866c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b01      	cmp	r3, #1
 8008678:	d001      	beq.n	800867e <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 800867a:	2302      	movs	r3, #2
 800867c:	e2bc      	b.n	8008bf8 <HAL_SPI_Receive+0x5bc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_SPI_Receive+0x4e>
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e2b4      	b.n	8008bf8 <HAL_SPI_Receive+0x5bc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008694:	2b01      	cmp	r3, #1
 8008696:	d101      	bne.n	800869c <HAL_SPI_Receive+0x60>
 8008698:	2302      	movs	r3, #2
 800869a:	e2ad      	b.n	8008bf8 <HAL_SPI_Receive+0x5bc>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2204      	movs	r2, #4
 80086a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	88fa      	ldrh	r2, [r7, #6]
 80086c6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80086f4:	d108      	bne.n	8008708 <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	e009      	b.n	800871c <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800871a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	0c1b      	lsrs	r3, r3, #16
 8008724:	041b      	lsls	r3, r3, #16
 8008726:	88f9      	ldrh	r1, [r7, #6]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	430b      	orrs	r3, r1
 800872e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10c      	bne.n	8008768 <HAL_SPI_Receive+0x12c>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008756:	d107      	bne.n	8008768 <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008766:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b0f      	cmp	r3, #15
 800876e:	f240 809c 	bls.w	80088aa <HAL_SPI_Receive+0x26e>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a51      	ldr	r2, [pc, #324]	@ (80088bc <HAL_SPI_Receive+0x280>)
 8008778:	4293      	cmp	r3, r2
 800877a:	f000 808e 	beq.w	800889a <HAL_SPI_Receive+0x25e>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a4f      	ldr	r2, [pc, #316]	@ (80088c0 <HAL_SPI_Receive+0x284>)
 8008784:	4293      	cmp	r3, r2
 8008786:	f000 8088 	beq.w	800889a <HAL_SPI_Receive+0x25e>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a4d      	ldr	r2, [pc, #308]	@ (80088c4 <HAL_SPI_Receive+0x288>)
 8008790:	4293      	cmp	r3, r2
 8008792:	f000 8082 	beq.w	800889a <HAL_SPI_Receive+0x25e>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a4b      	ldr	r2, [pc, #300]	@ (80088c8 <HAL_SPI_Receive+0x28c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	f040 8084 	bne.w	80088aa <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80087a2:	e07a      	b.n	800889a <HAL_SPI_Receive+0x25e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d114      	bne.n	80087e4 <HAL_SPI_Receive+0x1a8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ca:	1d1a      	adds	r2, r3, #4
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	3b01      	subs	r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80087e2:	e05a      	b.n	800889a <HAL_SPI_Receive+0x25e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	8bfa      	ldrh	r2, [r7, #30]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d919      	bls.n	8008826 <HAL_SPI_Receive+0x1ea>
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d014      	beq.n	8008826 <HAL_SPI_Receive+0x1ea>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008804:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008806:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800880c:	1d1a      	adds	r2, r3, #4
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008818:	b29b      	uxth	r3, r3
 800881a:	3b01      	subs	r3, #1
 800881c:	b29a      	uxth	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008824:	e039      	b.n	800889a <HAL_SPI_Receive+0x25e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800882c:	2b00      	cmp	r3, #0
 800882e:	d010      	beq.n	8008852 <HAL_SPI_Receive+0x216>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800883a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800883e:	d12c      	bne.n	800889a <HAL_SPI_Receive+0x25e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800884e:	619a      	str	r2, [r3, #24]
 8008850:	e023      	b.n	800889a <HAL_SPI_Receive+0x25e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008852:	f7f9 fbdd 	bl	8002010 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	429a      	cmp	r2, r3
 8008860:	d803      	bhi.n	800886a <HAL_SPI_Receive+0x22e>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d102      	bne.n	8008870 <HAL_SPI_Receive+0x234>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d114      	bne.n	800889a <HAL_SPI_Receive+0x25e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fbe5 	bl	8009040 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800887c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1ae      	b.n	8008bf8 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f47f af7e 	bne.w	80087a4 <HAL_SPI_Receive+0x168>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80088a8:	e193      	b.n	8008bd2 <HAL_SPI_Receive+0x596>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	2b07      	cmp	r3, #7
 80088b0:	f240 8188 	bls.w	8008bc4 <HAL_SPI_Receive+0x588>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80088b4:	e0b0      	b.n	8008a18 <HAL_SPI_Receive+0x3dc>
 80088b6:	bf00      	nop
 80088b8:	46002000 	.word	0x46002000
 80088bc:	40013000 	.word	0x40013000
 80088c0:	50013000 	.word	0x50013000
 80088c4:	40003800 	.word	0x40003800
 80088c8:	50003800 	.word	0x50003800
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d114      	bne.n	800890c <HAL_SPI_Receive+0x2d0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	8812      	ldrh	r2, [r2, #0]
 80088ea:	b292      	uxth	r2, r2
 80088ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088f2:	1c9a      	adds	r2, r3, #2
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80088fe:	b29b      	uxth	r3, r3
 8008900:	3b01      	subs	r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800890a:	e085      	b.n	8008a18 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008912:	b29b      	uxth	r3, r3
 8008914:	8bfa      	ldrh	r2, [r7, #30]
 8008916:	429a      	cmp	r2, r3
 8008918:	d924      	bls.n	8008964 <HAL_SPI_Receive+0x328>
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01f      	beq.n	8008964 <HAL_SPI_Receive+0x328>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	8812      	ldrh	r2, [r2, #0]
 800892c:	b292      	uxth	r2, r2
 800892e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008934:	1c9a      	adds	r2, r3, #2
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	8812      	ldrh	r2, [r2, #0]
 8008942:	b292      	uxth	r2, r2
 8008944:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800894a:	1c9a      	adds	r2, r3, #2
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008956:	b29b      	uxth	r3, r3
 8008958:	3b02      	subs	r3, #2
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008962:	e059      	b.n	8008a18 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800896a:	b29b      	uxth	r3, r3
 800896c:	2b01      	cmp	r3, #1
 800896e:	d119      	bne.n	80089a4 <HAL_SPI_Receive+0x368>
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <HAL_SPI_Receive+0x368>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	8812      	ldrh	r2, [r2, #0]
 8008982:	b292      	uxth	r2, r2
 8008984:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800898a:	1c9a      	adds	r2, r3, #2
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008996:	b29b      	uxth	r3, r3
 8008998:	3b01      	subs	r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80089a2:	e039      	b.n	8008a18 <HAL_SPI_Receive+0x3dc>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d010      	beq.n	80089d0 <HAL_SPI_Receive+0x394>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089bc:	d12c      	bne.n	8008a18 <HAL_SPI_Receive+0x3dc>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	699a      	ldr	r2, [r3, #24]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089cc:	619a      	str	r2, [r3, #24]
 80089ce:	e023      	b.n	8008a18 <HAL_SPI_Receive+0x3dc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089d0:	f7f9 fb1e 	bl	8002010 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d803      	bhi.n	80089e8 <HAL_SPI_Receive+0x3ac>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d102      	bne.n	80089ee <HAL_SPI_Receive+0x3b2>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d114      	bne.n	8008a18 <HAL_SPI_Receive+0x3dc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fb26 	bl	8009040 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e0ef      	b.n	8008bf8 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f47f af53 	bne.w	80088cc <HAL_SPI_Receive+0x290>
 8008a26:	e0d4      	b.n	8008bd2 <HAL_SPI_Receive+0x596>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d117      	bne.n	8008a6e <HAL_SPI_Receive+0x432>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a4a:	7812      	ldrb	r2, [r2, #0]
 8008a4c:	b2d2      	uxtb	r2, r2
 8008a4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	3b01      	subs	r3, #1
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008a6c:	e0aa      	b.n	8008bc4 <HAL_SPI_Receive+0x588>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	8bfa      	ldrh	r2, [r7, #30]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d946      	bls.n	8008b0a <HAL_SPI_Receive+0x4ce>
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d041      	beq.n	8008b0a <HAL_SPI_Receive+0x4ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a92:	7812      	ldrb	r2, [r2, #0]
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	b2d2      	uxtb	r2, r2
 8008ab2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aca:	7812      	ldrb	r2, [r2, #0]
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ae6:	7812      	ldrb	r2, [r2, #0]
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	3b04      	subs	r3, #4
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008b08:	e05c      	b.n	8008bc4 <HAL_SPI_Receive+0x588>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d81c      	bhi.n	8008b50 <HAL_SPI_Receive+0x514>
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d017      	beq.n	8008b50 <HAL_SPI_Receive+0x514>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b2c:	7812      	ldrb	r2, [r2, #0]
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	3b01      	subs	r3, #1
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008b4e:	e039      	b.n	8008bc4 <HAL_SPI_Receive+0x588>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d010      	beq.n	8008b7c <HAL_SPI_Receive+0x540>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b68:	d12c      	bne.n	8008bc4 <HAL_SPI_Receive+0x588>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699a      	ldr	r2, [r3, #24]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b78:	619a      	str	r2, [r3, #24]
 8008b7a:	e023      	b.n	8008bc4 <HAL_SPI_Receive+0x588>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b7c:	f7f9 fa48 	bl	8002010 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d803      	bhi.n	8008b94 <HAL_SPI_Receive+0x558>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d102      	bne.n	8008b9a <HAL_SPI_Receive+0x55e>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d114      	bne.n	8008bc4 <HAL_SPI_Receive+0x588>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 fa50 	bl	8009040 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ba6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e019      	b.n	8008bf8 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f47f af2b 	bne.w	8008a28 <HAL_SPI_Receive+0x3ec>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 fa34 	bl	8009040 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <HAL_SPI_Receive+0x5ba>
  {
    return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e000      	b.n	8008bf8 <HAL_SPI_Receive+0x5bc>
  }
  else
  {
    return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
  }
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3720      	adds	r7, #32
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08a      	sub	sp, #40	@ 0x28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008c18:	6a3a      	ldr	r2, [r7, #32]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008c32:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3330      	adds	r3, #48	@ 0x30
 8008c3a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d010      	beq.n	8008c68 <HAL_SPI_IRQHandler+0x68>
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c5e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f9c9 	bl	8008ff8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008c66:	e19a      	b.n	8008f9e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d113      	bne.n	8008c9a <HAL_SPI_IRQHandler+0x9a>
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10e      	bne.n	8008c9a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d009      	beq.n	8008c9a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
    handled = 1UL;
 8008c96:	2301      	movs	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10f      	bne.n	8008cc4 <HAL_SPI_IRQHandler+0xc4>
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
    handled = 1UL;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10f      	bne.n	8008cee <HAL_SPI_IRQHandler+0xee>
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	4798      	blx	r3
    handled = 1UL;
 8008cea:	2301      	movs	r3, #1
 8008cec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 814f 	bne.w	8008f94 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 808b 	beq.w	8008e18 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	699a      	ldr	r2, [r3, #24]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0208 	orr.w	r2, r2, #8
 8008d10:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	699a      	ldr	r2, [r3, #24]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f042 0210 	orr.w	r2, r2, #16
 8008d20:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699a      	ldr	r2, [r3, #24]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d30:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 0208 	bic.w	r2, r2, #8
 8008d40:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d13d      	bne.n	8008dcc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008d50:	e036      	b.n	8008dc0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	2b0f      	cmp	r3, #15
 8008d58:	d90b      	bls.n	8008d72 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d64:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d6a:	1d1a      	adds	r2, r3, #4
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008d70:	e01d      	b.n	8008dae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	2b07      	cmp	r3, #7
 8008d78:	d90b      	bls.n	8008d92 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	8812      	ldrh	r2, [r2, #0]
 8008d82:	b292      	uxth	r2, r2
 8008d84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d8a:	1c9a      	adds	r2, r3, #2
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008d90:	e00d      	b.n	8008dae <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1c2      	bne.n	8008d52 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f937 	bl	8009040 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f8fd 	bl	8008fe4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008dea:	e0d8      	b.n	8008f9e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008dec:	7cfb      	ldrb	r3, [r7, #19]
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d103      	bne.n	8008dfa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f8ec 	bl	8008fd0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008df8:	e0ce      	b.n	8008f98 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008dfa:	7cfb      	ldrb	r3, [r7, #19]
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	d103      	bne.n	8008e08 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f8db 	bl	8008fbc <HAL_SPI_RxCpltCallback>
    return;
 8008e06:	e0c7      	b.n	8008f98 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008e08:	7cfb      	ldrb	r3, [r7, #19]
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	f040 80c4 	bne.w	8008f98 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f8c9 	bl	8008fa8 <HAL_SPI_TxCpltCallback>
    return;
 8008e16:	e0bf      	b.n	8008f98 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 80bd 	beq.w	8008f9e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00f      	beq.n	8008e4e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e34:	f043 0204 	orr.w	r2, r3, #4
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699a      	ldr	r2, [r3, #24]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e4c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00f      	beq.n	8008e78 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e5e:	f043 0201 	orr.w	r2, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e76:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00f      	beq.n	8008ea2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e88:	f043 0208 	orr.w	r2, r3, #8
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ea0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00f      	beq.n	8008ecc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0220 	orr.w	r2, r2, #32
 8008eca:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d062      	beq.n	8008f9c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0201 	bic.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008ef4:	f023 0303 	bic.w	r3, r3, #3
 8008ef8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008f00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008f04:	d13e      	bne.n	8008f84 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008f14:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d015      	beq.n	8008f4c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f26:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa4 <HAL_SPI_IRQHandler+0x3a4>)
 8008f28:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7f9 fb73 	bl	800261c <HAL_DMA_Abort_IT>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d007      	beq.n	8008f4c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d022      	beq.n	8008f9c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f5c:	4a11      	ldr	r2, [pc, #68]	@ (8008fa4 <HAL_SPI_IRQHandler+0x3a4>)
 8008f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f9 fb58 	bl	800261c <HAL_DMA_Abort_IT>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d014      	beq.n	8008f9c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008f82:	e00b      	b.n	8008f9c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f829 	bl	8008fe4 <HAL_SPI_ErrorCallback>
    return;
 8008f92:	e003      	b.n	8008f9c <HAL_SPI_IRQHandler+0x39c>
    return;
 8008f94:	bf00      	nop
 8008f96:	e002      	b.n	8008f9e <HAL_SPI_IRQHandler+0x39e>
    return;
 8008f98:	bf00      	nop
 8008f9a:	e000      	b.n	8008f9e <HAL_SPI_IRQHandler+0x39e>
    return;
 8008f9c:	bf00      	nop
  }
}
 8008f9e:	3728      	adds	r7, #40	@ 0x28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	0800900d 	.word	0x0800900d

08008fa8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009018:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff ffd6 	bl	8008fe4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0208 	orr.w	r2, r2, #8
 800905e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0210 	orr.w	r2, r2, #16
 800906e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6812      	ldr	r2, [r2, #0]
 800908a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800908e:	f023 0303 	bic.w	r3, r3, #3
 8009092:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80090a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d014      	beq.n	80090da <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00f      	beq.n	80090da <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	699a      	ldr	r2, [r3, #24]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f042 0220 	orr.w	r2, r2, #32
 80090d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d014      	beq.n	8009110 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00f      	beq.n	8009110 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090f6:	f043 0204 	orr.w	r2, r3, #4
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800910e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00f      	beq.n	800913a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009120:	f043 0201 	orr.w	r2, r3, #1
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	699a      	ldr	r2, [r3, #24]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009138:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00f      	beq.n	8009164 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800914a:	f043 0208 	orr.w	r2, r3, #8
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009162:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8009174:	bf00      	nop
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009190:	e010      	b.n	80091b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009192:	f7f8 ff3d 	bl	8002010 <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d803      	bhi.n	80091aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d102      	bne.n	80091b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e00f      	b.n	80091d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	695a      	ldr	r2, [r3, #20]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4013      	ands	r3, r2
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	bf0c      	ite	eq
 80091c4:	2301      	moveq	r3, #1
 80091c6:	2300      	movne	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d0df      	beq.n	8009192 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e8:	095b      	lsrs	r3, r3, #5
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3307      	adds	r3, #7
 80091fa:	08db      	lsrs	r3, r3, #3
 80091fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	fb02 f303 	mul.w	r3, r2, r3
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	d12e      	bne.n	8009286 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800922e:	2b01      	cmp	r3, #1
 8009230:	d101      	bne.n	8009236 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009232:	2302      	movs	r3, #2
 8009234:	e028      	b.n	8009288 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2202      	movs	r2, #2
 8009242:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0201 	bic.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8009262:	ea42 0103 	orr.w	r1, r2, r3
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	e000      	b.n	8009288 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
  }
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e042      	b.n	800932c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d106      	bne.n	80092be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7f8 fb9d 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2224      	movs	r2, #36	@ 0x24
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0201 	bic.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa68 	bl	80097b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8c3 	bl	8009470 <UART_SetConfig>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d101      	bne.n	80092f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e01b      	b.n	800932c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fae7 	bl	80098f8 <UART_CheckIdleState>
 800932a:	4603      	mov	r3, r0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	@ 0x28
 8009338:	af02      	add	r7, sp, #8
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934a:	2b20      	cmp	r3, #32
 800934c:	f040 808b 	bne.w	8009466 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <HAL_UART_Transmit+0x28>
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e083      	b.n	8009468 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800936a:	2b80      	cmp	r3, #128	@ 0x80
 800936c:	d107      	bne.n	800937e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800937c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2221      	movs	r2, #33	@ 0x21
 800938a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800938e:	f7f8 fe3f 	bl	8002010 <HAL_GetTick>
 8009392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	88fa      	ldrh	r2, [r7, #6]
 80093a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ac:	d108      	bne.n	80093c0 <HAL_UART_Transmit+0x8c>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	61bb      	str	r3, [r7, #24]
 80093be:	e003      	b.n	80093c8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093c8:	e030      	b.n	800942c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2200      	movs	r2, #0
 80093d2:	2180      	movs	r1, #128	@ 0x80
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 fb39 	bl	8009a4c <UART_WaitOnFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e03d      	b.n	8009468 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10b      	bne.n	800940a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009400:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	3302      	adds	r3, #2
 8009406:	61bb      	str	r3, [r7, #24]
 8009408:	e007      	b.n	800941a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	781a      	ldrb	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	3301      	adds	r3, #1
 8009418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009420:	b29b      	uxth	r3, r3
 8009422:	3b01      	subs	r3, #1
 8009424:	b29a      	uxth	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009432:	b29b      	uxth	r3, r3
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1c8      	bne.n	80093ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2200      	movs	r2, #0
 8009440:	2140      	movs	r1, #64	@ 0x40
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fb02 	bl	8009a4c <UART_WaitOnFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e006      	b.n	8009468 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	e000      	b.n	8009468 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009466:	2302      	movs	r3, #2
  }
}
 8009468:	4618      	mov	r0, r3
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009474:	b094      	sub	sp, #80	@ 0x50
 8009476:	af00      	add	r7, sp, #0
 8009478:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4b7e      	ldr	r3, [pc, #504]	@ (8009680 <UART_SetConfig+0x210>)
 8009486:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	431a      	orrs	r2, r3
 8009492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	431a      	orrs	r2, r3
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	4313      	orrs	r3, r2
 800949e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4977      	ldr	r1, [pc, #476]	@ (8009684 <UART_SetConfig+0x214>)
 80094a8:	4019      	ands	r1, r3
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b0:	430b      	orrs	r3, r1
 80094b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80094be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c0:	68d9      	ldr	r1, [r3, #12]
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	ea40 0301 	orr.w	r3, r0, r1
 80094ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b6a      	ldr	r3, [pc, #424]	@ (8009680 <UART_SetConfig+0x210>)
 80094d8:	429a      	cmp	r2, r3
 80094da:	d009      	beq.n	80094f0 <UART_SetConfig+0x80>
 80094dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	4b69      	ldr	r3, [pc, #420]	@ (8009688 <UART_SetConfig+0x218>)
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d004      	beq.n	80094f0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e8:	6a1a      	ldr	r2, [r3, #32]
 80094ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ec:	4313      	orrs	r3, r2
 80094ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80094fa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80094fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009504:	430b      	orrs	r3, r1
 8009506:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950e:	f023 000f 	bic.w	r0, r3, #15
 8009512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009514:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	ea40 0301 	orr.w	r3, r0, r1
 800951e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	4b59      	ldr	r3, [pc, #356]	@ (800968c <UART_SetConfig+0x21c>)
 8009526:	429a      	cmp	r2, r3
 8009528:	d102      	bne.n	8009530 <UART_SetConfig+0xc0>
 800952a:	2301      	movs	r3, #1
 800952c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800952e:	e029      	b.n	8009584 <UART_SetConfig+0x114>
 8009530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	4b56      	ldr	r3, [pc, #344]	@ (8009690 <UART_SetConfig+0x220>)
 8009536:	429a      	cmp	r2, r3
 8009538:	d102      	bne.n	8009540 <UART_SetConfig+0xd0>
 800953a:	2302      	movs	r3, #2
 800953c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800953e:	e021      	b.n	8009584 <UART_SetConfig+0x114>
 8009540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	4b53      	ldr	r3, [pc, #332]	@ (8009694 <UART_SetConfig+0x224>)
 8009546:	429a      	cmp	r2, r3
 8009548:	d102      	bne.n	8009550 <UART_SetConfig+0xe0>
 800954a:	2304      	movs	r3, #4
 800954c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800954e:	e019      	b.n	8009584 <UART_SetConfig+0x114>
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	4b50      	ldr	r3, [pc, #320]	@ (8009698 <UART_SetConfig+0x228>)
 8009556:	429a      	cmp	r2, r3
 8009558:	d102      	bne.n	8009560 <UART_SetConfig+0xf0>
 800955a:	2308      	movs	r3, #8
 800955c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800955e:	e011      	b.n	8009584 <UART_SetConfig+0x114>
 8009560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	4b4d      	ldr	r3, [pc, #308]	@ (800969c <UART_SetConfig+0x22c>)
 8009566:	429a      	cmp	r2, r3
 8009568:	d102      	bne.n	8009570 <UART_SetConfig+0x100>
 800956a:	2310      	movs	r3, #16
 800956c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800956e:	e009      	b.n	8009584 <UART_SetConfig+0x114>
 8009570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	4b42      	ldr	r3, [pc, #264]	@ (8009680 <UART_SetConfig+0x210>)
 8009576:	429a      	cmp	r2, r3
 8009578:	d102      	bne.n	8009580 <UART_SetConfig+0x110>
 800957a:	2320      	movs	r3, #32
 800957c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800957e:	e001      	b.n	8009584 <UART_SetConfig+0x114>
 8009580:	2300      	movs	r3, #0
 8009582:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	4b3d      	ldr	r3, [pc, #244]	@ (8009680 <UART_SetConfig+0x210>)
 800958a:	429a      	cmp	r2, r3
 800958c:	d005      	beq.n	800959a <UART_SetConfig+0x12a>
 800958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b3d      	ldr	r3, [pc, #244]	@ (8009688 <UART_SetConfig+0x218>)
 8009594:	429a      	cmp	r2, r3
 8009596:	f040 8085 	bne.w	80096a4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800959a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800959c:	2200      	movs	r2, #0
 800959e:	623b      	str	r3, [r7, #32]
 80095a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80095a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80095a6:	f7fd fa0d 	bl	80069c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80095aa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80095ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80e8 	beq.w	8009784 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b8:	4a39      	ldr	r2, [pc, #228]	@ (80096a0 <UART_SetConfig+0x230>)
 80095ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095be:	461a      	mov	r2, r3
 80095c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	4613      	mov	r3, r2
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	4413      	add	r3, r2
 80095d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d305      	bcc.n	80095e4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d903      	bls.n	80095ec <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80095ea:	e048      	b.n	800967e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ee:	2200      	movs	r2, #0
 80095f0:	61bb      	str	r3, [r7, #24]
 80095f2:	61fa      	str	r2, [r7, #28]
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	4a29      	ldr	r2, [pc, #164]	@ (80096a0 <UART_SetConfig+0x230>)
 80095fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	2200      	movs	r2, #0
 8009602:	613b      	str	r3, [r7, #16]
 8009604:	617a      	str	r2, [r7, #20]
 8009606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800960a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800960e:	f7f6 fe3b 	bl	8000288 <__aeabi_uldivmod>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4610      	mov	r0, r2
 8009618:	4619      	mov	r1, r3
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	020b      	lsls	r3, r1, #8
 8009624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009628:	0202      	lsls	r2, r0, #8
 800962a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800962c:	6849      	ldr	r1, [r1, #4]
 800962e:	0849      	lsrs	r1, r1, #1
 8009630:	2000      	movs	r0, #0
 8009632:	460c      	mov	r4, r1
 8009634:	4605      	mov	r5, r0
 8009636:	eb12 0804 	adds.w	r8, r2, r4
 800963a:	eb43 0905 	adc.w	r9, r3, r5
 800963e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	60bb      	str	r3, [r7, #8]
 8009646:	60fa      	str	r2, [r7, #12]
 8009648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f6 fe1a 	bl	8000288 <__aeabi_uldivmod>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4613      	mov	r3, r2
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800965c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800965e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009662:	d308      	bcc.n	8009676 <UART_SetConfig+0x206>
 8009664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800966a:	d204      	bcs.n	8009676 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800966c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009672:	60da      	str	r2, [r3, #12]
 8009674:	e003      	b.n	800967e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800967c:	e082      	b.n	8009784 <UART_SetConfig+0x314>
 800967e:	e081      	b.n	8009784 <UART_SetConfig+0x314>
 8009680:	46002400 	.word	0x46002400
 8009684:	cfff69f3 	.word	0xcfff69f3
 8009688:	56002400 	.word	0x56002400
 800968c:	40013800 	.word	0x40013800
 8009690:	40004400 	.word	0x40004400
 8009694:	40004800 	.word	0x40004800
 8009698:	40004c00 	.word	0x40004c00
 800969c:	40005000 	.word	0x40005000
 80096a0:	0800a8a4 	.word	0x0800a8a4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096ac:	d13c      	bne.n	8009728 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80096ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b0:	2200      	movs	r2, #0
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096ba:	f7fd f983 	bl	80069c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80096be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d05e      	beq.n	8009784 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ca:	4a39      	ldr	r2, [pc, #228]	@ (80097b0 <UART_SetConfig+0x340>)
 80096cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096d8:	005a      	lsls	r2, r3, #1
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	085b      	lsrs	r3, r3, #1
 80096e0:	441a      	add	r2, r3
 80096e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ee:	2b0f      	cmp	r3, #15
 80096f0:	d916      	bls.n	8009720 <UART_SetConfig+0x2b0>
 80096f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096f8:	d212      	bcs.n	8009720 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f023 030f 	bic.w	r3, r3, #15
 8009702:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009706:	085b      	lsrs	r3, r3, #1
 8009708:	b29b      	uxth	r3, r3
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	b29a      	uxth	r2, r3
 8009710:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009712:	4313      	orrs	r3, r2
 8009714:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800971c:	60da      	str	r2, [r3, #12]
 800971e:	e031      	b.n	8009784 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009726:	e02d      	b.n	8009784 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800972a:	2200      	movs	r2, #0
 800972c:	469a      	mov	sl, r3
 800972e:	4693      	mov	fp, r2
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	f7fd f946 	bl	80069c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009738:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800973a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d021      	beq.n	8009784 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009744:	4a1a      	ldr	r2, [pc, #104]	@ (80097b0 <UART_SetConfig+0x340>)
 8009746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800974a:	461a      	mov	r2, r3
 800974c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800974e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	085b      	lsrs	r3, r3, #1
 8009758:	441a      	add	r2, r3
 800975a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009766:	2b0f      	cmp	r3, #15
 8009768:	d909      	bls.n	800977e <UART_SetConfig+0x30e>
 800976a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009770:	d205      	bcs.n	800977e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009774:	b29a      	uxth	r2, r3
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60da      	str	r2, [r3, #12]
 800977c:	e002      	b.n	8009784 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	2201      	movs	r2, #1
 8009788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800978c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978e:	2201      	movs	r2, #1
 8009790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	2200      	movs	r2, #0
 8009798:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800979a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979c:	2200      	movs	r2, #0
 800979e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3750      	adds	r7, #80	@ 0x50
 80097a8:	46bd      	mov	sp, r7
 80097aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ae:	bf00      	nop
 80097b0:	0800a8a4 	.word	0x0800a8a4

080097b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009826:	f003 0304 	and.w	r3, r3, #4
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	f003 0310 	and.w	r3, r3, #16
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	d01a      	beq.n	80098ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098b2:	d10a      	bne.n	80098ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00a      	beq.n	80098ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	430a      	orrs	r2, r1
 80098ea:	605a      	str	r2, [r3, #4]
  }
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b098      	sub	sp, #96	@ 0x60
 80098fc:	af02      	add	r7, sp, #8
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009908:	f7f8 fb82 	bl	8002010 <HAL_GetTick>
 800990c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b08      	cmp	r3, #8
 800991a:	d12f      	bne.n	800997c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800991c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009924:	2200      	movs	r2, #0
 8009926:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f88e 	bl	8009a4c <UART_WaitOnFlagUntilTimeout>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d022      	beq.n	800997c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800994a:	653b      	str	r3, [r7, #80]	@ 0x50
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009954:	647b      	str	r3, [r7, #68]	@ 0x44
 8009956:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800995a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e6      	bne.n	8009936 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e063      	b.n	8009a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0304 	and.w	r3, r3, #4
 8009986:	2b04      	cmp	r3, #4
 8009988:	d149      	bne.n	8009a1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800998a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009992:	2200      	movs	r2, #0
 8009994:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f857 	bl	8009a4c <UART_WaitOnFlagUntilTimeout>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d03c      	beq.n	8009a1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	623b      	str	r3, [r7, #32]
   return(result);
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e6      	bne.n	80099a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3308      	adds	r3, #8
 80099dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f023 0301 	bic.w	r3, r3, #1
 80099ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3308      	adds	r3, #8
 80099f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099f6:	61fa      	str	r2, [r7, #28]
 80099f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	69b9      	ldr	r1, [r7, #24]
 80099fc:	69fa      	ldr	r2, [r7, #28]
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	617b      	str	r3, [r7, #20]
   return(result);
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e5      	bne.n	80099d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e012      	b.n	8009a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2220      	movs	r2, #32
 8009a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3758      	adds	r7, #88	@ 0x58
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a5c:	e04f      	b.n	8009afe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d04b      	beq.n	8009afe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a66:	f7f8 fad3 	bl	8002010 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d302      	bcc.n	8009a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e04e      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d037      	beq.n	8009afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b80      	cmp	r3, #128	@ 0x80
 8009a92:	d034      	beq.n	8009afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b40      	cmp	r3, #64	@ 0x40
 8009a98:	d031      	beq.n	8009afe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	f003 0308 	and.w	r3, r3, #8
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	d110      	bne.n	8009aca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2208      	movs	r2, #8
 8009aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 f838 	bl	8009b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e029      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ad8:	d111      	bne.n	8009afe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f81e 	bl	8009b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e00f      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	69da      	ldr	r2, [r3, #28]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4013      	ands	r3, r2
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	bf0c      	ite	eq
 8009b0e:	2301      	moveq	r3, #1
 8009b10:	2300      	movne	r3, #0
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d0a0      	beq.n	8009a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b095      	sub	sp, #84	@ 0x54
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e6      	bne.n	8009b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	e853 3f00 	ldrex	r3, [r3]
 8009b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e3      	bne.n	8009b60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d118      	bne.n	8009bd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f023 0310 	bic.w	r3, r3, #16
 8009bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bbe:	61bb      	str	r3, [r7, #24]
 8009bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6979      	ldr	r1, [r7, #20]
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	613b      	str	r3, [r7, #16]
   return(result);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e6      	bne.n	8009ba0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009be6:	bf00      	nop
 8009be8:	3754      	adds	r7, #84	@ 0x54
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c04:	2302      	movs	r3, #2
 8009c06:	e027      	b.n	8009c58 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2224      	movs	r2, #36	@ 0x24
 8009c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0201 	bic.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d101      	bne.n	8009c7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e02d      	b.n	8009cd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2224      	movs	r2, #36	@ 0x24
 8009c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0201 	bic.w	r2, r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f84f 	bl	8009d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e02d      	b.n	8009d54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2224      	movs	r2, #36	@ 0x24
 8009d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0201 	bic.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f811 	bl	8009d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d108      	bne.n	8009d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d7c:	e031      	b.n	8009de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d7e:	2308      	movs	r3, #8
 8009d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d82:	2308      	movs	r3, #8
 8009d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	0e5b      	lsrs	r3, r3, #25
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	0f5b      	lsrs	r3, r3, #29
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	7b3a      	ldrb	r2, [r7, #12]
 8009daa:	4911      	ldr	r1, [pc, #68]	@ (8009df0 <UARTEx_SetNbDataToProcess+0x94>)
 8009dac:	5c8a      	ldrb	r2, [r1, r2]
 8009dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009db2:	7b3a      	ldrb	r2, [r7, #12]
 8009db4:	490f      	ldr	r1, [pc, #60]	@ (8009df4 <UARTEx_SetNbDataToProcess+0x98>)
 8009db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	7b7a      	ldrb	r2, [r7, #13]
 8009dc8:	4909      	ldr	r1, [pc, #36]	@ (8009df0 <UARTEx_SetNbDataToProcess+0x94>)
 8009dca:	5c8a      	ldrb	r2, [r1, r2]
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009dd0:	7b7a      	ldrb	r2, [r7, #13]
 8009dd2:	4908      	ldr	r1, [pc, #32]	@ (8009df4 <UARTEx_SetNbDataToProcess+0x98>)
 8009dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	0800a8bc 	.word	0x0800a8bc
 8009df4:	0800a8c4 	.word	0x0800a8c4

08009df8 <sniprintf>:
 8009df8:	b40c      	push	{r2, r3}
 8009dfa:	4b19      	ldr	r3, [pc, #100]	@ (8009e60 <sniprintf+0x68>)
 8009dfc:	b530      	push	{r4, r5, lr}
 8009dfe:	1e0c      	subs	r4, r1, #0
 8009e00:	b09d      	sub	sp, #116	@ 0x74
 8009e02:	681d      	ldr	r5, [r3, #0]
 8009e04:	da08      	bge.n	8009e18 <sniprintf+0x20>
 8009e06:	238b      	movs	r3, #139	@ 0x8b
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	b01d      	add	sp, #116	@ 0x74
 8009e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e14:	b002      	add	sp, #8
 8009e16:	4770      	bx	lr
 8009e18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009e1c:	9002      	str	r0, [sp, #8]
 8009e1e:	9006      	str	r0, [sp, #24]
 8009e20:	a902      	add	r1, sp, #8
 8009e22:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e26:	f04f 0300 	mov.w	r3, #0
 8009e2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009e30:	bf14      	ite	ne
 8009e32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e36:	4623      	moveq	r3, r4
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	9307      	str	r3, [sp, #28]
 8009e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e44:	ab21      	add	r3, sp, #132	@ 0x84
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	f000 f994 	bl	800a174 <_svfiprintf_r>
 8009e4c:	1c43      	adds	r3, r0, #1
 8009e4e:	bfbc      	itt	lt
 8009e50:	238b      	movlt	r3, #139	@ 0x8b
 8009e52:	602b      	strlt	r3, [r5, #0]
 8009e54:	2c00      	cmp	r4, #0
 8009e56:	d0da      	beq.n	8009e0e <sniprintf+0x16>
 8009e58:	9b02      	ldr	r3, [sp, #8]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	e7d6      	b.n	8009e0e <sniprintf+0x16>
 8009e60:	2000000c 	.word	0x2000000c

08009e64 <memset>:
 8009e64:	4402      	add	r2, r0
 8009e66:	4603      	mov	r3, r0
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d100      	bne.n	8009e6e <memset+0xa>
 8009e6c:	4770      	bx	lr
 8009e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e72:	e7f9      	b.n	8009e68 <memset+0x4>

08009e74 <__errno>:
 8009e74:	4b01      	ldr	r3, [pc, #4]	@ (8009e7c <__errno+0x8>)
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	2000000c 	.word	0x2000000c

08009e80 <__libc_init_array>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	4d0d      	ldr	r5, [pc, #52]	@ (8009eb8 <__libc_init_array+0x38>)
 8009e84:	2600      	movs	r6, #0
 8009e86:	4c0d      	ldr	r4, [pc, #52]	@ (8009ebc <__libc_init_array+0x3c>)
 8009e88:	1b64      	subs	r4, r4, r5
 8009e8a:	10a4      	asrs	r4, r4, #2
 8009e8c:	42a6      	cmp	r6, r4
 8009e8e:	d109      	bne.n	8009ea4 <__libc_init_array+0x24>
 8009e90:	4d0b      	ldr	r5, [pc, #44]	@ (8009ec0 <__libc_init_array+0x40>)
 8009e92:	2600      	movs	r6, #0
 8009e94:	4c0b      	ldr	r4, [pc, #44]	@ (8009ec4 <__libc_init_array+0x44>)
 8009e96:	f000 fc75 	bl	800a784 <_init>
 8009e9a:	1b64      	subs	r4, r4, r5
 8009e9c:	10a4      	asrs	r4, r4, #2
 8009e9e:	42a6      	cmp	r6, r4
 8009ea0:	d105      	bne.n	8009eae <__libc_init_array+0x2e>
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea8:	3601      	adds	r6, #1
 8009eaa:	4798      	blx	r3
 8009eac:	e7ee      	b.n	8009e8c <__libc_init_array+0xc>
 8009eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb2:	3601      	adds	r6, #1
 8009eb4:	4798      	blx	r3
 8009eb6:	e7f2      	b.n	8009e9e <__libc_init_array+0x1e>
 8009eb8:	0800a908 	.word	0x0800a908
 8009ebc:	0800a908 	.word	0x0800a908
 8009ec0:	0800a908 	.word	0x0800a908
 8009ec4:	0800a90c 	.word	0x0800a90c

08009ec8 <__retarget_lock_acquire_recursive>:
 8009ec8:	4770      	bx	lr

08009eca <__retarget_lock_release_recursive>:
 8009eca:	4770      	bx	lr

08009ecc <_free_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4605      	mov	r5, r0
 8009ed0:	2900      	cmp	r1, #0
 8009ed2:	d041      	beq.n	8009f58 <_free_r+0x8c>
 8009ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed8:	1f0c      	subs	r4, r1, #4
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	bfb8      	it	lt
 8009ede:	18e4      	addlt	r4, r4, r3
 8009ee0:	f000 f8e0 	bl	800a0a4 <__malloc_lock>
 8009ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f5c <_free_r+0x90>)
 8009ee6:	6813      	ldr	r3, [r2, #0]
 8009ee8:	b933      	cbnz	r3, 8009ef8 <_free_r+0x2c>
 8009eea:	6063      	str	r3, [r4, #4]
 8009eec:	6014      	str	r4, [r2, #0]
 8009eee:	4628      	mov	r0, r5
 8009ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef4:	f000 b8dc 	b.w	800a0b0 <__malloc_unlock>
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	d908      	bls.n	8009f0e <_free_r+0x42>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	1821      	adds	r1, r4, r0
 8009f00:	428b      	cmp	r3, r1
 8009f02:	bf01      	itttt	eq
 8009f04:	6819      	ldreq	r1, [r3, #0]
 8009f06:	685b      	ldreq	r3, [r3, #4]
 8009f08:	1809      	addeq	r1, r1, r0
 8009f0a:	6021      	streq	r1, [r4, #0]
 8009f0c:	e7ed      	b.n	8009eea <_free_r+0x1e>
 8009f0e:	461a      	mov	r2, r3
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	b10b      	cbz	r3, 8009f18 <_free_r+0x4c>
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d9fa      	bls.n	8009f0e <_free_r+0x42>
 8009f18:	6811      	ldr	r1, [r2, #0]
 8009f1a:	1850      	adds	r0, r2, r1
 8009f1c:	42a0      	cmp	r0, r4
 8009f1e:	d10b      	bne.n	8009f38 <_free_r+0x6c>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	4401      	add	r1, r0
 8009f24:	1850      	adds	r0, r2, r1
 8009f26:	6011      	str	r1, [r2, #0]
 8009f28:	4283      	cmp	r3, r0
 8009f2a:	d1e0      	bne.n	8009eee <_free_r+0x22>
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	4408      	add	r0, r1
 8009f32:	6053      	str	r3, [r2, #4]
 8009f34:	6010      	str	r0, [r2, #0]
 8009f36:	e7da      	b.n	8009eee <_free_r+0x22>
 8009f38:	d902      	bls.n	8009f40 <_free_r+0x74>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	e7d6      	b.n	8009eee <_free_r+0x22>
 8009f40:	6820      	ldr	r0, [r4, #0]
 8009f42:	1821      	adds	r1, r4, r0
 8009f44:	428b      	cmp	r3, r1
 8009f46:	bf02      	ittt	eq
 8009f48:	6819      	ldreq	r1, [r3, #0]
 8009f4a:	685b      	ldreq	r3, [r3, #4]
 8009f4c:	1809      	addeq	r1, r1, r0
 8009f4e:	6063      	str	r3, [r4, #4]
 8009f50:	bf08      	it	eq
 8009f52:	6021      	streq	r1, [r4, #0]
 8009f54:	6054      	str	r4, [r2, #4]
 8009f56:	e7ca      	b.n	8009eee <_free_r+0x22>
 8009f58:	bd38      	pop	{r3, r4, r5, pc}
 8009f5a:	bf00      	nop
 8009f5c:	2000060c 	.word	0x2000060c

08009f60 <sbrk_aligned>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	4e0f      	ldr	r6, [pc, #60]	@ (8009fa0 <sbrk_aligned+0x40>)
 8009f64:	460c      	mov	r4, r1
 8009f66:	4605      	mov	r5, r0
 8009f68:	6831      	ldr	r1, [r6, #0]
 8009f6a:	b911      	cbnz	r1, 8009f72 <sbrk_aligned+0x12>
 8009f6c:	f000 fba8 	bl	800a6c0 <_sbrk_r>
 8009f70:	6030      	str	r0, [r6, #0]
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 fba3 	bl	800a6c0 <_sbrk_r>
 8009f7a:	1c43      	adds	r3, r0, #1
 8009f7c:	d103      	bne.n	8009f86 <sbrk_aligned+0x26>
 8009f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8009f82:	4620      	mov	r0, r4
 8009f84:	bd70      	pop	{r4, r5, r6, pc}
 8009f86:	1cc4      	adds	r4, r0, #3
 8009f88:	f024 0403 	bic.w	r4, r4, #3
 8009f8c:	42a0      	cmp	r0, r4
 8009f8e:	d0f8      	beq.n	8009f82 <sbrk_aligned+0x22>
 8009f90:	1a21      	subs	r1, r4, r0
 8009f92:	4628      	mov	r0, r5
 8009f94:	f000 fb94 	bl	800a6c0 <_sbrk_r>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d1f2      	bne.n	8009f82 <sbrk_aligned+0x22>
 8009f9c:	e7ef      	b.n	8009f7e <sbrk_aligned+0x1e>
 8009f9e:	bf00      	nop
 8009fa0:	20000608 	.word	0x20000608

08009fa4 <_malloc_r>:
 8009fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fa8:	1ccd      	adds	r5, r1, #3
 8009faa:	4606      	mov	r6, r0
 8009fac:	f025 0503 	bic.w	r5, r5, #3
 8009fb0:	3508      	adds	r5, #8
 8009fb2:	2d0c      	cmp	r5, #12
 8009fb4:	bf38      	it	cc
 8009fb6:	250c      	movcc	r5, #12
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	db01      	blt.n	8009fc0 <_malloc_r+0x1c>
 8009fbc:	42a9      	cmp	r1, r5
 8009fbe:	d904      	bls.n	8009fca <_malloc_r+0x26>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	6033      	str	r3, [r6, #0]
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0a0 <_malloc_r+0xfc>
 8009fce:	f000 f869 	bl	800a0a4 <__malloc_lock>
 8009fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009fd6:	461c      	mov	r4, r3
 8009fd8:	bb44      	cbnz	r4, 800a02c <_malloc_r+0x88>
 8009fda:	4629      	mov	r1, r5
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff ffbf 	bl	8009f60 <sbrk_aligned>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	d158      	bne.n	800a09a <_malloc_r+0xf6>
 8009fe8:	f8d8 4000 	ldr.w	r4, [r8]
 8009fec:	4627      	mov	r7, r4
 8009fee:	2f00      	cmp	r7, #0
 8009ff0:	d143      	bne.n	800a07a <_malloc_r+0xd6>
 8009ff2:	2c00      	cmp	r4, #0
 8009ff4:	d04b      	beq.n	800a08e <_malloc_r+0xea>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	eb04 0903 	add.w	r9, r4, r3
 800a000:	f000 fb5e 	bl	800a6c0 <_sbrk_r>
 800a004:	4581      	cmp	r9, r0
 800a006:	d142      	bne.n	800a08e <_malloc_r+0xea>
 800a008:	6821      	ldr	r1, [r4, #0]
 800a00a:	4630      	mov	r0, r6
 800a00c:	1a6d      	subs	r5, r5, r1
 800a00e:	4629      	mov	r1, r5
 800a010:	f7ff ffa6 	bl	8009f60 <sbrk_aligned>
 800a014:	3001      	adds	r0, #1
 800a016:	d03a      	beq.n	800a08e <_malloc_r+0xea>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	442b      	add	r3, r5
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	f8d8 3000 	ldr.w	r3, [r8]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	bb62      	cbnz	r2, 800a080 <_malloc_r+0xdc>
 800a026:	f8c8 7000 	str.w	r7, [r8]
 800a02a:	e00f      	b.n	800a04c <_malloc_r+0xa8>
 800a02c:	6822      	ldr	r2, [r4, #0]
 800a02e:	1b52      	subs	r2, r2, r5
 800a030:	d420      	bmi.n	800a074 <_malloc_r+0xd0>
 800a032:	2a0b      	cmp	r2, #11
 800a034:	d917      	bls.n	800a066 <_malloc_r+0xc2>
 800a036:	1961      	adds	r1, r4, r5
 800a038:	42a3      	cmp	r3, r4
 800a03a:	6025      	str	r5, [r4, #0]
 800a03c:	bf18      	it	ne
 800a03e:	6059      	strne	r1, [r3, #4]
 800a040:	6863      	ldr	r3, [r4, #4]
 800a042:	bf08      	it	eq
 800a044:	f8c8 1000 	streq.w	r1, [r8]
 800a048:	5162      	str	r2, [r4, r5]
 800a04a:	604b      	str	r3, [r1, #4]
 800a04c:	4630      	mov	r0, r6
 800a04e:	f000 f82f 	bl	800a0b0 <__malloc_unlock>
 800a052:	f104 000b 	add.w	r0, r4, #11
 800a056:	1d23      	adds	r3, r4, #4
 800a058:	f020 0007 	bic.w	r0, r0, #7
 800a05c:	1ac2      	subs	r2, r0, r3
 800a05e:	bf1c      	itt	ne
 800a060:	1a1b      	subne	r3, r3, r0
 800a062:	50a3      	strne	r3, [r4, r2]
 800a064:	e7af      	b.n	8009fc6 <_malloc_r+0x22>
 800a066:	6862      	ldr	r2, [r4, #4]
 800a068:	42a3      	cmp	r3, r4
 800a06a:	bf0c      	ite	eq
 800a06c:	f8c8 2000 	streq.w	r2, [r8]
 800a070:	605a      	strne	r2, [r3, #4]
 800a072:	e7eb      	b.n	800a04c <_malloc_r+0xa8>
 800a074:	4623      	mov	r3, r4
 800a076:	6864      	ldr	r4, [r4, #4]
 800a078:	e7ae      	b.n	8009fd8 <_malloc_r+0x34>
 800a07a:	463c      	mov	r4, r7
 800a07c:	687f      	ldr	r7, [r7, #4]
 800a07e:	e7b6      	b.n	8009fee <_malloc_r+0x4a>
 800a080:	461a      	mov	r2, r3
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	42a3      	cmp	r3, r4
 800a086:	d1fb      	bne.n	800a080 <_malloc_r+0xdc>
 800a088:	2300      	movs	r3, #0
 800a08a:	6053      	str	r3, [r2, #4]
 800a08c:	e7de      	b.n	800a04c <_malloc_r+0xa8>
 800a08e:	230c      	movs	r3, #12
 800a090:	4630      	mov	r0, r6
 800a092:	6033      	str	r3, [r6, #0]
 800a094:	f000 f80c 	bl	800a0b0 <__malloc_unlock>
 800a098:	e794      	b.n	8009fc4 <_malloc_r+0x20>
 800a09a:	6005      	str	r5, [r0, #0]
 800a09c:	e7d6      	b.n	800a04c <_malloc_r+0xa8>
 800a09e:	bf00      	nop
 800a0a0:	2000060c 	.word	0x2000060c

0800a0a4 <__malloc_lock>:
 800a0a4:	4801      	ldr	r0, [pc, #4]	@ (800a0ac <__malloc_lock+0x8>)
 800a0a6:	f7ff bf0f 	b.w	8009ec8 <__retarget_lock_acquire_recursive>
 800a0aa:	bf00      	nop
 800a0ac:	20000604 	.word	0x20000604

0800a0b0 <__malloc_unlock>:
 800a0b0:	4801      	ldr	r0, [pc, #4]	@ (800a0b8 <__malloc_unlock+0x8>)
 800a0b2:	f7ff bf0a 	b.w	8009eca <__retarget_lock_release_recursive>
 800a0b6:	bf00      	nop
 800a0b8:	20000604 	.word	0x20000604

0800a0bc <__ssputs_r>:
 800a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	461f      	mov	r7, r3
 800a0c2:	688e      	ldr	r6, [r1, #8]
 800a0c4:	4682      	mov	sl, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	42be      	cmp	r6, r7
 800a0ca:	4690      	mov	r8, r2
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	d82d      	bhi.n	800a12c <__ssputs_r+0x70>
 800a0d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0d8:	d026      	beq.n	800a128 <__ssputs_r+0x6c>
 800a0da:	6965      	ldr	r5, [r4, #20]
 800a0dc:	6909      	ldr	r1, [r1, #16]
 800a0de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0e2:	eba3 0901 	sub.w	r9, r3, r1
 800a0e6:	1c7b      	adds	r3, r7, #1
 800a0e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0ec:	444b      	add	r3, r9
 800a0ee:	106d      	asrs	r5, r5, #1
 800a0f0:	429d      	cmp	r5, r3
 800a0f2:	bf38      	it	cc
 800a0f4:	461d      	movcc	r5, r3
 800a0f6:	0553      	lsls	r3, r2, #21
 800a0f8:	d527      	bpl.n	800a14a <__ssputs_r+0x8e>
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f7ff ff52 	bl	8009fa4 <_malloc_r>
 800a100:	4606      	mov	r6, r0
 800a102:	b360      	cbz	r0, 800a15e <__ssputs_r+0xa2>
 800a104:	464a      	mov	r2, r9
 800a106:	6921      	ldr	r1, [r4, #16]
 800a108:	f000 faf8 	bl	800a6fc <memcpy>
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	6126      	str	r6, [r4, #16]
 800a11a:	444e      	add	r6, r9
 800a11c:	6165      	str	r5, [r4, #20]
 800a11e:	eba5 0509 	sub.w	r5, r5, r9
 800a122:	6026      	str	r6, [r4, #0]
 800a124:	463e      	mov	r6, r7
 800a126:	60a5      	str	r5, [r4, #8]
 800a128:	42be      	cmp	r6, r7
 800a12a:	d900      	bls.n	800a12e <__ssputs_r+0x72>
 800a12c:	463e      	mov	r6, r7
 800a12e:	4632      	mov	r2, r6
 800a130:	4641      	mov	r1, r8
 800a132:	6820      	ldr	r0, [r4, #0]
 800a134:	f000 faaa 	bl	800a68c <memmove>
 800a138:	68a3      	ldr	r3, [r4, #8]
 800a13a:	2000      	movs	r0, #0
 800a13c:	1b9b      	subs	r3, r3, r6
 800a13e:	60a3      	str	r3, [r4, #8]
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	4433      	add	r3, r6
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14a:	462a      	mov	r2, r5
 800a14c:	f000 fae3 	bl	800a716 <_realloc_r>
 800a150:	4606      	mov	r6, r0
 800a152:	2800      	cmp	r0, #0
 800a154:	d1e0      	bne.n	800a118 <__ssputs_r+0x5c>
 800a156:	6921      	ldr	r1, [r4, #16]
 800a158:	4650      	mov	r0, sl
 800a15a:	f7ff feb7 	bl	8009ecc <_free_r>
 800a15e:	230c      	movs	r3, #12
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	f8ca 3000 	str.w	r3, [sl]
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	e7e9      	b.n	800a146 <__ssputs_r+0x8a>
	...

0800a174 <_svfiprintf_r>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	4698      	mov	r8, r3
 800a17a:	898b      	ldrh	r3, [r1, #12]
 800a17c:	b09d      	sub	sp, #116	@ 0x74
 800a17e:	4607      	mov	r7, r0
 800a180:	061b      	lsls	r3, r3, #24
 800a182:	460d      	mov	r5, r1
 800a184:	4614      	mov	r4, r2
 800a186:	d510      	bpl.n	800a1aa <_svfiprintf_r+0x36>
 800a188:	690b      	ldr	r3, [r1, #16]
 800a18a:	b973      	cbnz	r3, 800a1aa <_svfiprintf_r+0x36>
 800a18c:	2140      	movs	r1, #64	@ 0x40
 800a18e:	f7ff ff09 	bl	8009fa4 <_malloc_r>
 800a192:	6028      	str	r0, [r5, #0]
 800a194:	6128      	str	r0, [r5, #16]
 800a196:	b930      	cbnz	r0, 800a1a6 <_svfiprintf_r+0x32>
 800a198:	230c      	movs	r3, #12
 800a19a:	603b      	str	r3, [r7, #0]
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	b01d      	add	sp, #116	@ 0x74
 800a1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a6:	2340      	movs	r3, #64	@ 0x40
 800a1a8:	616b      	str	r3, [r5, #20]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1b0:	f04f 0901 	mov.w	r9, #1
 800a1b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a358 <_svfiprintf_r+0x1e4>
 800a1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ba:	2320      	movs	r3, #32
 800a1bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1c0:	2330      	movs	r3, #48	@ 0x30
 800a1c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1c6:	4623      	mov	r3, r4
 800a1c8:	469a      	mov	sl, r3
 800a1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ce:	b10a      	cbz	r2, 800a1d4 <_svfiprintf_r+0x60>
 800a1d0:	2a25      	cmp	r2, #37	@ 0x25
 800a1d2:	d1f9      	bne.n	800a1c8 <_svfiprintf_r+0x54>
 800a1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a1d8:	d00b      	beq.n	800a1f2 <_svfiprintf_r+0x7e>
 800a1da:	465b      	mov	r3, fp
 800a1dc:	4622      	mov	r2, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f7ff ff6b 	bl	800a0bc <__ssputs_r>
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f000 80a7 	beq.w	800a33a <_svfiprintf_r+0x1c6>
 800a1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ee:	445a      	add	r2, fp
 800a1f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f000 809f 	beq.w	800a33a <_svfiprintf_r+0x1c6>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a202:	f10a 0a01 	add.w	sl, sl, #1
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	9307      	str	r3, [sp, #28]
 800a20a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a20e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a214:	4654      	mov	r4, sl
 800a216:	2205      	movs	r2, #5
 800a218:	484f      	ldr	r0, [pc, #316]	@ (800a358 <_svfiprintf_r+0x1e4>)
 800a21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21e:	f000 fa5f 	bl	800a6e0 <memchr>
 800a222:	9a04      	ldr	r2, [sp, #16]
 800a224:	b9d8      	cbnz	r0, 800a25e <_svfiprintf_r+0xea>
 800a226:	06d0      	lsls	r0, r2, #27
 800a228:	bf44      	itt	mi
 800a22a:	2320      	movmi	r3, #32
 800a22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a230:	0711      	lsls	r1, r2, #28
 800a232:	bf44      	itt	mi
 800a234:	232b      	movmi	r3, #43	@ 0x2b
 800a236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a23a:	f89a 3000 	ldrb.w	r3, [sl]
 800a23e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a240:	d015      	beq.n	800a26e <_svfiprintf_r+0xfa>
 800a242:	9a07      	ldr	r2, [sp, #28]
 800a244:	4654      	mov	r4, sl
 800a246:	2000      	movs	r0, #0
 800a248:	f04f 0c0a 	mov.w	ip, #10
 800a24c:	4621      	mov	r1, r4
 800a24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a252:	3b30      	subs	r3, #48	@ 0x30
 800a254:	2b09      	cmp	r3, #9
 800a256:	d94b      	bls.n	800a2f0 <_svfiprintf_r+0x17c>
 800a258:	b1b0      	cbz	r0, 800a288 <_svfiprintf_r+0x114>
 800a25a:	9207      	str	r2, [sp, #28]
 800a25c:	e014      	b.n	800a288 <_svfiprintf_r+0x114>
 800a25e:	eba0 0308 	sub.w	r3, r0, r8
 800a262:	46a2      	mov	sl, r4
 800a264:	fa09 f303 	lsl.w	r3, r9, r3
 800a268:	4313      	orrs	r3, r2
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	e7d2      	b.n	800a214 <_svfiprintf_r+0xa0>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	1d19      	adds	r1, r3, #4
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	9103      	str	r1, [sp, #12]
 800a278:	bfbb      	ittet	lt
 800a27a:	425b      	neglt	r3, r3
 800a27c:	f042 0202 	orrlt.w	r2, r2, #2
 800a280:	9307      	strge	r3, [sp, #28]
 800a282:	9307      	strlt	r3, [sp, #28]
 800a284:	bfb8      	it	lt
 800a286:	9204      	strlt	r2, [sp, #16]
 800a288:	7823      	ldrb	r3, [r4, #0]
 800a28a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a28c:	d10a      	bne.n	800a2a4 <_svfiprintf_r+0x130>
 800a28e:	7863      	ldrb	r3, [r4, #1]
 800a290:	2b2a      	cmp	r3, #42	@ 0x2a
 800a292:	d132      	bne.n	800a2fa <_svfiprintf_r+0x186>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	3402      	adds	r4, #2
 800a298:	1d1a      	adds	r2, r3, #4
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2a0:	9203      	str	r2, [sp, #12]
 800a2a2:	9305      	str	r3, [sp, #20]
 800a2a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a368 <_svfiprintf_r+0x1f4>
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	7821      	ldrb	r1, [r4, #0]
 800a2ac:	4650      	mov	r0, sl
 800a2ae:	f000 fa17 	bl	800a6e0 <memchr>
 800a2b2:	b138      	cbz	r0, 800a2c4 <_svfiprintf_r+0x150>
 800a2b4:	eba0 000a 	sub.w	r0, r0, sl
 800a2b8:	2240      	movs	r2, #64	@ 0x40
 800a2ba:	9b04      	ldr	r3, [sp, #16]
 800a2bc:	3401      	adds	r4, #1
 800a2be:	4082      	lsls	r2, r0
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c8:	2206      	movs	r2, #6
 800a2ca:	4824      	ldr	r0, [pc, #144]	@ (800a35c <_svfiprintf_r+0x1e8>)
 800a2cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2d0:	f000 fa06 	bl	800a6e0 <memchr>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d036      	beq.n	800a346 <_svfiprintf_r+0x1d2>
 800a2d8:	4b21      	ldr	r3, [pc, #132]	@ (800a360 <_svfiprintf_r+0x1ec>)
 800a2da:	bb1b      	cbnz	r3, 800a324 <_svfiprintf_r+0x1b0>
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	3307      	adds	r3, #7
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ea:	4433      	add	r3, r6
 800a2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ee:	e76a      	b.n	800a1c6 <_svfiprintf_r+0x52>
 800a2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	e7a8      	b.n	800a24c <_svfiprintf_r+0xd8>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	3401      	adds	r4, #1
 800a2fe:	f04f 0c0a 	mov.w	ip, #10
 800a302:	4619      	mov	r1, r3
 800a304:	9305      	str	r3, [sp, #20]
 800a306:	4620      	mov	r0, r4
 800a308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a30c:	3a30      	subs	r2, #48	@ 0x30
 800a30e:	2a09      	cmp	r2, #9
 800a310:	d903      	bls.n	800a31a <_svfiprintf_r+0x1a6>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0c6      	beq.n	800a2a4 <_svfiprintf_r+0x130>
 800a316:	9105      	str	r1, [sp, #20]
 800a318:	e7c4      	b.n	800a2a4 <_svfiprintf_r+0x130>
 800a31a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a31e:	4604      	mov	r4, r0
 800a320:	2301      	movs	r3, #1
 800a322:	e7f0      	b.n	800a306 <_svfiprintf_r+0x192>
 800a324:	ab03      	add	r3, sp, #12
 800a326:	462a      	mov	r2, r5
 800a328:	a904      	add	r1, sp, #16
 800a32a:	4638      	mov	r0, r7
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <_svfiprintf_r+0x1f0>)
 800a330:	f3af 8000 	nop.w
 800a334:	1c42      	adds	r2, r0, #1
 800a336:	4606      	mov	r6, r0
 800a338:	d1d6      	bne.n	800a2e8 <_svfiprintf_r+0x174>
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	065b      	lsls	r3, r3, #25
 800a33e:	f53f af2d 	bmi.w	800a19c <_svfiprintf_r+0x28>
 800a342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a344:	e72c      	b.n	800a1a0 <_svfiprintf_r+0x2c>
 800a346:	ab03      	add	r3, sp, #12
 800a348:	462a      	mov	r2, r5
 800a34a:	a904      	add	r1, sp, #16
 800a34c:	4638      	mov	r0, r7
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	4b04      	ldr	r3, [pc, #16]	@ (800a364 <_svfiprintf_r+0x1f0>)
 800a352:	f000 f87d 	bl	800a450 <_printf_i>
 800a356:	e7ed      	b.n	800a334 <_svfiprintf_r+0x1c0>
 800a358:	0800a8cc 	.word	0x0800a8cc
 800a35c:	0800a8d6 	.word	0x0800a8d6
 800a360:	00000000 	.word	0x00000000
 800a364:	0800a0bd 	.word	0x0800a0bd
 800a368:	0800a8d2 	.word	0x0800a8d2

0800a36c <_printf_common>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	4616      	mov	r6, r2
 800a372:	4698      	mov	r8, r3
 800a374:	688a      	ldr	r2, [r1, #8]
 800a376:	4607      	mov	r7, r0
 800a378:	690b      	ldr	r3, [r1, #16]
 800a37a:	460c      	mov	r4, r1
 800a37c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a380:	4293      	cmp	r3, r2
 800a382:	bfb8      	it	lt
 800a384:	4613      	movlt	r3, r2
 800a386:	6033      	str	r3, [r6, #0]
 800a388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a38c:	b10a      	cbz	r2, 800a392 <_printf_common+0x26>
 800a38e:	3301      	adds	r3, #1
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	0699      	lsls	r1, r3, #26
 800a396:	bf42      	ittt	mi
 800a398:	6833      	ldrmi	r3, [r6, #0]
 800a39a:	3302      	addmi	r3, #2
 800a39c:	6033      	strmi	r3, [r6, #0]
 800a39e:	6825      	ldr	r5, [r4, #0]
 800a3a0:	f015 0506 	ands.w	r5, r5, #6
 800a3a4:	d106      	bne.n	800a3b4 <_printf_common+0x48>
 800a3a6:	f104 0a19 	add.w	sl, r4, #25
 800a3aa:	68e3      	ldr	r3, [r4, #12]
 800a3ac:	6832      	ldr	r2, [r6, #0]
 800a3ae:	1a9b      	subs	r3, r3, r2
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	dc2b      	bgt.n	800a40c <_printf_common+0xa0>
 800a3b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3b8:	6822      	ldr	r2, [r4, #0]
 800a3ba:	3b00      	subs	r3, #0
 800a3bc:	bf18      	it	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	d430      	bmi.n	800a426 <_printf_common+0xba>
 800a3c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3c8:	4641      	mov	r1, r8
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c8      	blx	r9
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d023      	beq.n	800a41a <_printf_common+0xae>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	341a      	adds	r4, #26
 800a3d6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a3da:	f003 0306 	and.w	r3, r3, #6
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	bf0a      	itet	eq
 800a3e2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a3e6:	2500      	movne	r5, #0
 800a3e8:	6833      	ldreq	r3, [r6, #0]
 800a3ea:	f04f 0600 	mov.w	r6, #0
 800a3ee:	bf08      	it	eq
 800a3f0:	1aed      	subeq	r5, r5, r3
 800a3f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a3f6:	bf08      	it	eq
 800a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	bfc4      	itt	gt
 800a400:	1a9b      	subgt	r3, r3, r2
 800a402:	18ed      	addgt	r5, r5, r3
 800a404:	42b5      	cmp	r5, r6
 800a406:	d11a      	bne.n	800a43e <_printf_common+0xd2>
 800a408:	2000      	movs	r0, #0
 800a40a:	e008      	b.n	800a41e <_printf_common+0xb2>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4652      	mov	r2, sl
 800a410:	4641      	mov	r1, r8
 800a412:	4638      	mov	r0, r7
 800a414:	47c8      	blx	r9
 800a416:	3001      	adds	r0, #1
 800a418:	d103      	bne.n	800a422 <_printf_common+0xb6>
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295
 800a41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a422:	3501      	adds	r5, #1
 800a424:	e7c1      	b.n	800a3aa <_printf_common+0x3e>
 800a426:	18e1      	adds	r1, r4, r3
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	2030      	movs	r0, #48	@ 0x30
 800a42c:	3302      	adds	r3, #2
 800a42e:	4422      	add	r2, r4
 800a430:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a43c:	e7c2      	b.n	800a3c4 <_printf_common+0x58>
 800a43e:	2301      	movs	r3, #1
 800a440:	4622      	mov	r2, r4
 800a442:	4641      	mov	r1, r8
 800a444:	4638      	mov	r0, r7
 800a446:	47c8      	blx	r9
 800a448:	3001      	adds	r0, #1
 800a44a:	d0e6      	beq.n	800a41a <_printf_common+0xae>
 800a44c:	3601      	adds	r6, #1
 800a44e:	e7d9      	b.n	800a404 <_printf_common+0x98>

0800a450 <_printf_i>:
 800a450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a454:	7e0f      	ldrb	r7, [r1, #24]
 800a456:	4691      	mov	r9, r2
 800a458:	4680      	mov	r8, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	2f78      	cmp	r7, #120	@ 0x78
 800a45e:	469a      	mov	sl, r3
 800a460:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a466:	d807      	bhi.n	800a478 <_printf_i+0x28>
 800a468:	2f62      	cmp	r7, #98	@ 0x62
 800a46a:	d80a      	bhi.n	800a482 <_printf_i+0x32>
 800a46c:	2f00      	cmp	r7, #0
 800a46e:	f000 80d1 	beq.w	800a614 <_printf_i+0x1c4>
 800a472:	2f58      	cmp	r7, #88	@ 0x58
 800a474:	f000 80b8 	beq.w	800a5e8 <_printf_i+0x198>
 800a478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a47c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a480:	e03a      	b.n	800a4f8 <_printf_i+0xa8>
 800a482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a486:	2b15      	cmp	r3, #21
 800a488:	d8f6      	bhi.n	800a478 <_printf_i+0x28>
 800a48a:	a101      	add	r1, pc, #4	@ (adr r1, 800a490 <_printf_i+0x40>)
 800a48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a490:	0800a4e9 	.word	0x0800a4e9
 800a494:	0800a4fd 	.word	0x0800a4fd
 800a498:	0800a479 	.word	0x0800a479
 800a49c:	0800a479 	.word	0x0800a479
 800a4a0:	0800a479 	.word	0x0800a479
 800a4a4:	0800a479 	.word	0x0800a479
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a479 	.word	0x0800a479
 800a4b0:	0800a479 	.word	0x0800a479
 800a4b4:	0800a479 	.word	0x0800a479
 800a4b8:	0800a479 	.word	0x0800a479
 800a4bc:	0800a5fb 	.word	0x0800a5fb
 800a4c0:	0800a527 	.word	0x0800a527
 800a4c4:	0800a5b5 	.word	0x0800a5b5
 800a4c8:	0800a479 	.word	0x0800a479
 800a4cc:	0800a479 	.word	0x0800a479
 800a4d0:	0800a61d 	.word	0x0800a61d
 800a4d4:	0800a479 	.word	0x0800a479
 800a4d8:	0800a527 	.word	0x0800a527
 800a4dc:	0800a479 	.word	0x0800a479
 800a4e0:	0800a479 	.word	0x0800a479
 800a4e4:	0800a5bd 	.word	0x0800a5bd
 800a4e8:	6833      	ldr	r3, [r6, #0]
 800a4ea:	1d1a      	adds	r2, r3, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6032      	str	r2, [r6, #0]
 800a4f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e09c      	b.n	800a636 <_printf_i+0x1e6>
 800a4fc:	6833      	ldr	r3, [r6, #0]
 800a4fe:	6820      	ldr	r0, [r4, #0]
 800a500:	1d19      	adds	r1, r3, #4
 800a502:	6031      	str	r1, [r6, #0]
 800a504:	0606      	lsls	r6, r0, #24
 800a506:	d501      	bpl.n	800a50c <_printf_i+0xbc>
 800a508:	681d      	ldr	r5, [r3, #0]
 800a50a:	e003      	b.n	800a514 <_printf_i+0xc4>
 800a50c:	0645      	lsls	r5, r0, #25
 800a50e:	d5fb      	bpl.n	800a508 <_printf_i+0xb8>
 800a510:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a514:	2d00      	cmp	r5, #0
 800a516:	da03      	bge.n	800a520 <_printf_i+0xd0>
 800a518:	232d      	movs	r3, #45	@ 0x2d
 800a51a:	426d      	negs	r5, r5
 800a51c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a520:	4858      	ldr	r0, [pc, #352]	@ (800a684 <_printf_i+0x234>)
 800a522:	230a      	movs	r3, #10
 800a524:	e011      	b.n	800a54a <_printf_i+0xfa>
 800a526:	6821      	ldr	r1, [r4, #0]
 800a528:	6833      	ldr	r3, [r6, #0]
 800a52a:	0608      	lsls	r0, r1, #24
 800a52c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a530:	d402      	bmi.n	800a538 <_printf_i+0xe8>
 800a532:	0649      	lsls	r1, r1, #25
 800a534:	bf48      	it	mi
 800a536:	b2ad      	uxthmi	r5, r5
 800a538:	2f6f      	cmp	r7, #111	@ 0x6f
 800a53a:	6033      	str	r3, [r6, #0]
 800a53c:	4851      	ldr	r0, [pc, #324]	@ (800a684 <_printf_i+0x234>)
 800a53e:	bf14      	ite	ne
 800a540:	230a      	movne	r3, #10
 800a542:	2308      	moveq	r3, #8
 800a544:	2100      	movs	r1, #0
 800a546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a54a:	6866      	ldr	r6, [r4, #4]
 800a54c:	2e00      	cmp	r6, #0
 800a54e:	60a6      	str	r6, [r4, #8]
 800a550:	db05      	blt.n	800a55e <_printf_i+0x10e>
 800a552:	6821      	ldr	r1, [r4, #0]
 800a554:	432e      	orrs	r6, r5
 800a556:	f021 0104 	bic.w	r1, r1, #4
 800a55a:	6021      	str	r1, [r4, #0]
 800a55c:	d04b      	beq.n	800a5f6 <_printf_i+0x1a6>
 800a55e:	4616      	mov	r6, r2
 800a560:	fbb5 f1f3 	udiv	r1, r5, r3
 800a564:	fb03 5711 	mls	r7, r3, r1, r5
 800a568:	5dc7      	ldrb	r7, [r0, r7]
 800a56a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a56e:	462f      	mov	r7, r5
 800a570:	460d      	mov	r5, r1
 800a572:	42bb      	cmp	r3, r7
 800a574:	d9f4      	bls.n	800a560 <_printf_i+0x110>
 800a576:	2b08      	cmp	r3, #8
 800a578:	d10b      	bne.n	800a592 <_printf_i+0x142>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	07df      	lsls	r7, r3, #31
 800a57e:	d508      	bpl.n	800a592 <_printf_i+0x142>
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	6861      	ldr	r1, [r4, #4]
 800a584:	4299      	cmp	r1, r3
 800a586:	bfde      	ittt	le
 800a588:	2330      	movle	r3, #48	@ 0x30
 800a58a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a58e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a592:	1b92      	subs	r2, r2, r6
 800a594:	6122      	str	r2, [r4, #16]
 800a596:	464b      	mov	r3, r9
 800a598:	aa03      	add	r2, sp, #12
 800a59a:	4621      	mov	r1, r4
 800a59c:	4640      	mov	r0, r8
 800a59e:	f8cd a000 	str.w	sl, [sp]
 800a5a2:	f7ff fee3 	bl	800a36c <_printf_common>
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d14a      	bne.n	800a640 <_printf_i+0x1f0>
 800a5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ae:	b004      	add	sp, #16
 800a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	f043 0320 	orr.w	r3, r3, #32
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	2778      	movs	r7, #120	@ 0x78
 800a5be:	4832      	ldr	r0, [pc, #200]	@ (800a688 <_printf_i+0x238>)
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5c6:	061f      	lsls	r7, r3, #24
 800a5c8:	6831      	ldr	r1, [r6, #0]
 800a5ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5ce:	d402      	bmi.n	800a5d6 <_printf_i+0x186>
 800a5d0:	065f      	lsls	r7, r3, #25
 800a5d2:	bf48      	it	mi
 800a5d4:	b2ad      	uxthmi	r5, r5
 800a5d6:	6031      	str	r1, [r6, #0]
 800a5d8:	07d9      	lsls	r1, r3, #31
 800a5da:	bf44      	itt	mi
 800a5dc:	f043 0320 	orrmi.w	r3, r3, #32
 800a5e0:	6023      	strmi	r3, [r4, #0]
 800a5e2:	b11d      	cbz	r5, 800a5ec <_printf_i+0x19c>
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	e7ad      	b.n	800a544 <_printf_i+0xf4>
 800a5e8:	4826      	ldr	r0, [pc, #152]	@ (800a684 <_printf_i+0x234>)
 800a5ea:	e7e9      	b.n	800a5c0 <_printf_i+0x170>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	f023 0320 	bic.w	r3, r3, #32
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	e7f6      	b.n	800a5e4 <_printf_i+0x194>
 800a5f6:	4616      	mov	r6, r2
 800a5f8:	e7bd      	b.n	800a576 <_printf_i+0x126>
 800a5fa:	6833      	ldr	r3, [r6, #0]
 800a5fc:	6825      	ldr	r5, [r4, #0]
 800a5fe:	1d18      	adds	r0, r3, #4
 800a600:	6961      	ldr	r1, [r4, #20]
 800a602:	6030      	str	r0, [r6, #0]
 800a604:	062e      	lsls	r6, r5, #24
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	d501      	bpl.n	800a60e <_printf_i+0x1be>
 800a60a:	6019      	str	r1, [r3, #0]
 800a60c:	e002      	b.n	800a614 <_printf_i+0x1c4>
 800a60e:	0668      	lsls	r0, r5, #25
 800a610:	d5fb      	bpl.n	800a60a <_printf_i+0x1ba>
 800a612:	8019      	strh	r1, [r3, #0]
 800a614:	2300      	movs	r3, #0
 800a616:	4616      	mov	r6, r2
 800a618:	6123      	str	r3, [r4, #16]
 800a61a:	e7bc      	b.n	800a596 <_printf_i+0x146>
 800a61c:	6833      	ldr	r3, [r6, #0]
 800a61e:	2100      	movs	r1, #0
 800a620:	1d1a      	adds	r2, r3, #4
 800a622:	6032      	str	r2, [r6, #0]
 800a624:	681e      	ldr	r6, [r3, #0]
 800a626:	6862      	ldr	r2, [r4, #4]
 800a628:	4630      	mov	r0, r6
 800a62a:	f000 f859 	bl	800a6e0 <memchr>
 800a62e:	b108      	cbz	r0, 800a634 <_printf_i+0x1e4>
 800a630:	1b80      	subs	r0, r0, r6
 800a632:	6060      	str	r0, [r4, #4]
 800a634:	6863      	ldr	r3, [r4, #4]
 800a636:	6123      	str	r3, [r4, #16]
 800a638:	2300      	movs	r3, #0
 800a63a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a63e:	e7aa      	b.n	800a596 <_printf_i+0x146>
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	4632      	mov	r2, r6
 800a644:	4649      	mov	r1, r9
 800a646:	4640      	mov	r0, r8
 800a648:	47d0      	blx	sl
 800a64a:	3001      	adds	r0, #1
 800a64c:	d0ad      	beq.n	800a5aa <_printf_i+0x15a>
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	079b      	lsls	r3, r3, #30
 800a652:	d413      	bmi.n	800a67c <_printf_i+0x22c>
 800a654:	68e0      	ldr	r0, [r4, #12]
 800a656:	9b03      	ldr	r3, [sp, #12]
 800a658:	4298      	cmp	r0, r3
 800a65a:	bfb8      	it	lt
 800a65c:	4618      	movlt	r0, r3
 800a65e:	e7a6      	b.n	800a5ae <_printf_i+0x15e>
 800a660:	2301      	movs	r3, #1
 800a662:	4632      	mov	r2, r6
 800a664:	4649      	mov	r1, r9
 800a666:	4640      	mov	r0, r8
 800a668:	47d0      	blx	sl
 800a66a:	3001      	adds	r0, #1
 800a66c:	d09d      	beq.n	800a5aa <_printf_i+0x15a>
 800a66e:	3501      	adds	r5, #1
 800a670:	68e3      	ldr	r3, [r4, #12]
 800a672:	9903      	ldr	r1, [sp, #12]
 800a674:	1a5b      	subs	r3, r3, r1
 800a676:	42ab      	cmp	r3, r5
 800a678:	dcf2      	bgt.n	800a660 <_printf_i+0x210>
 800a67a:	e7eb      	b.n	800a654 <_printf_i+0x204>
 800a67c:	2500      	movs	r5, #0
 800a67e:	f104 0619 	add.w	r6, r4, #25
 800a682:	e7f5      	b.n	800a670 <_printf_i+0x220>
 800a684:	0800a8dd 	.word	0x0800a8dd
 800a688:	0800a8ee 	.word	0x0800a8ee

0800a68c <memmove>:
 800a68c:	4288      	cmp	r0, r1
 800a68e:	b510      	push	{r4, lr}
 800a690:	eb01 0402 	add.w	r4, r1, r2
 800a694:	d902      	bls.n	800a69c <memmove+0x10>
 800a696:	4284      	cmp	r4, r0
 800a698:	4623      	mov	r3, r4
 800a69a:	d807      	bhi.n	800a6ac <memmove+0x20>
 800a69c:	1e43      	subs	r3, r0, #1
 800a69e:	42a1      	cmp	r1, r4
 800a6a0:	d008      	beq.n	800a6b4 <memmove+0x28>
 800a6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6aa:	e7f8      	b.n	800a69e <memmove+0x12>
 800a6ac:	4402      	add	r2, r0
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	428a      	cmp	r2, r1
 800a6b2:	d100      	bne.n	800a6b6 <memmove+0x2a>
 800a6b4:	bd10      	pop	{r4, pc}
 800a6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6be:	e7f7      	b.n	800a6b0 <memmove+0x24>

0800a6c0 <_sbrk_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4d05      	ldr	r5, [pc, #20]	@ (800a6dc <_sbrk_r+0x1c>)
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	602b      	str	r3, [r5, #0]
 800a6cc:	f7f7 fb4e 	bl	8001d6c <_sbrk>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_sbrk_r+0x1a>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_sbrk_r+0x1a>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20000600 	.word	0x20000600

0800a6e0 <memchr>:
 800a6e0:	b2c9      	uxtb	r1, r1
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	4402      	add	r2, r0
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	d101      	bne.n	800a6f2 <memchr+0x12>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e003      	b.n	800a6fa <memchr+0x1a>
 800a6f2:	7804      	ldrb	r4, [r0, #0]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	428c      	cmp	r4, r1
 800a6f8:	d1f6      	bne.n	800a6e8 <memchr+0x8>
 800a6fa:	bd10      	pop	{r4, pc}

0800a6fc <memcpy>:
 800a6fc:	440a      	add	r2, r1
 800a6fe:	1e43      	subs	r3, r0, #1
 800a700:	4291      	cmp	r1, r2
 800a702:	d100      	bne.n	800a706 <memcpy+0xa>
 800a704:	4770      	bx	lr
 800a706:	b510      	push	{r4, lr}
 800a708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a70c:	4291      	cmp	r1, r2
 800a70e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a712:	d1f9      	bne.n	800a708 <memcpy+0xc>
 800a714:	bd10      	pop	{r4, pc}

0800a716 <_realloc_r>:
 800a716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71a:	4607      	mov	r7, r0
 800a71c:	4614      	mov	r4, r2
 800a71e:	460d      	mov	r5, r1
 800a720:	b921      	cbnz	r1, 800a72c <_realloc_r+0x16>
 800a722:	4611      	mov	r1, r2
 800a724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a728:	f7ff bc3c 	b.w	8009fa4 <_malloc_r>
 800a72c:	b92a      	cbnz	r2, 800a73a <_realloc_r+0x24>
 800a72e:	4625      	mov	r5, r4
 800a730:	f7ff fbcc 	bl	8009ecc <_free_r>
 800a734:	4628      	mov	r0, r5
 800a736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a73a:	f000 f81a 	bl	800a772 <_malloc_usable_size_r>
 800a73e:	4284      	cmp	r4, r0
 800a740:	4606      	mov	r6, r0
 800a742:	d802      	bhi.n	800a74a <_realloc_r+0x34>
 800a744:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a748:	d8f4      	bhi.n	800a734 <_realloc_r+0x1e>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4638      	mov	r0, r7
 800a74e:	f7ff fc29 	bl	8009fa4 <_malloc_r>
 800a752:	4680      	mov	r8, r0
 800a754:	b908      	cbnz	r0, 800a75a <_realloc_r+0x44>
 800a756:	4645      	mov	r5, r8
 800a758:	e7ec      	b.n	800a734 <_realloc_r+0x1e>
 800a75a:	42b4      	cmp	r4, r6
 800a75c:	4622      	mov	r2, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	bf28      	it	cs
 800a762:	4632      	movcs	r2, r6
 800a764:	f7ff ffca 	bl	800a6fc <memcpy>
 800a768:	4629      	mov	r1, r5
 800a76a:	4638      	mov	r0, r7
 800a76c:	f7ff fbae 	bl	8009ecc <_free_r>
 800a770:	e7f1      	b.n	800a756 <_realloc_r+0x40>

0800a772 <_malloc_usable_size_r>:
 800a772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a776:	1f18      	subs	r0, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bfbc      	itt	lt
 800a77c:	580b      	ldrlt	r3, [r1, r0]
 800a77e:	18c0      	addlt	r0, r0, r3
 800a780:	4770      	bx	lr
	...

0800a784 <_init>:
 800a784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a786:	bf00      	nop
 800a788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78a:	bc08      	pop	{r3}
 800a78c:	469e      	mov	lr, r3
 800a78e:	4770      	bx	lr

0800a790 <_fini>:
 800a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a792:	bf00      	nop
 800a794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a796:	bc08      	pop	{r3}
 800a798:	469e      	mov	lr, r3
 800a79a:	4770      	bx	lr
