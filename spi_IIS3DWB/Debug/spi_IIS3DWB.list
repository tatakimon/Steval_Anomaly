
spi_IIS3DWB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c798  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800c9d0  0800c9d0  0000d9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cc60  0800cc60  0000dc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cc68  0800cc68  0000dc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cc6c  0800cc6c  0000dc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  20000000  0800cc70  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000062c  20000078  0800cce8  0000e078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200006a4  0800cce8  0000e6a4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d545  00000000  00000000  0000e0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c8b  00000000  00000000  0002b5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a8  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001035  00000000  00000000  0002f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003af1f  00000000  00000000  0003075d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d4c3  00000000  00000000  0006b67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001840cd  00000000  00000000  00088b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020cc0c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e08  00000000  00000000  0020cc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  00212a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000078 	.word	0x20000078
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c9b8 	.word	0x0800c9b8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000007c 	.word	0x2000007c
 8000274:	0800c9b8 	.word	0x0800c9b8

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b9b0 	b.w	8000600 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002be:	4688      	mov	r8, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	468e      	mov	lr, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d95f      	bls.n	800038e <__udivmoddi4+0xd6>
 80002ce:	fab2 f682 	clz	r6, r2
 80002d2:	b14e      	cbz	r6, 80002e8 <__udivmoddi4+0x30>
 80002d4:	f1c6 0320 	rsb	r3, r6, #32
 80002d8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002dc:	40b7      	lsls	r7, r6
 80002de:	40b4      	lsls	r4, r6
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	0c23      	lsrs	r3, r4, #16
 80002f2:	fbbe f1f8 	udiv	r1, lr, r8
 80002f6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fa:	fb01 f20c 	mul.w	r2, r1, ip
 80002fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f101 30ff 	add.w	r0, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 8154 	bhi.w	80005bc <__udivmoddi4+0x304>
 8000314:	4601      	mov	r1, r0
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	b2a2      	uxth	r2, r4
 800031a:	fbb3 f0f8 	udiv	r0, r3, r8
 800031e:	fb08 3310 	mls	r3, r8, r0, r3
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032a:	4594      	cmp	ip, r2
 800032c:	d90b      	bls.n	8000346 <__udivmoddi4+0x8e>
 800032e:	18ba      	adds	r2, r7, r2
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	bf2c      	ite	cs
 8000336:	2401      	movcs	r4, #1
 8000338:	2400      	movcc	r4, #0
 800033a:	4594      	cmp	ip, r2
 800033c:	d902      	bls.n	8000344 <__udivmoddi4+0x8c>
 800033e:	2c00      	cmp	r4, #0
 8000340:	f000 813f 	beq.w	80005c2 <__udivmoddi4+0x30a>
 8000344:	4618      	mov	r0, r3
 8000346:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034a:	eba2 020c 	sub.w	r2, r2, ip
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa2>
 8000352:	40f2      	lsrs	r2, r6
 8000354:	2300      	movs	r3, #0
 8000356:	e9c5 2300 	strd	r2, r3, [r5]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xb6>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb0>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa2>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d14e      	bne.n	8000414 <__udivmoddi4+0x15c>
 8000376:	4543      	cmp	r3, r8
 8000378:	f0c0 8112 	bcc.w	80005a0 <__udivmoddi4+0x2e8>
 800037c:	4282      	cmp	r2, r0
 800037e:	f240 810f 	bls.w	80005a0 <__udivmoddi4+0x2e8>
 8000382:	4608      	mov	r0, r1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e8      	beq.n	800035a <__udivmoddi4+0xa2>
 8000388:	e9c5 4e00 	strd	r4, lr, [r5]
 800038c:	e7e5      	b.n	800035a <__udivmoddi4+0xa2>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f000 80ac 	beq.w	80004ec <__udivmoddi4+0x234>
 8000394:	fab2 f682 	clz	r6, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	f040 80bb 	bne.w	8000514 <__udivmoddi4+0x25c>
 800039e:	1a8b      	subs	r3, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b2bc      	uxth	r4, r7
 80003a6:	2101      	movs	r1, #1
 80003a8:	0c02      	lsrs	r2, r0, #16
 80003aa:	b280      	uxth	r0, r0
 80003ac:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003b8:	fb04 f20c 	mul.w	r2, r4, ip
 80003bc:	429a      	cmp	r2, r3
 80003be:	d90e      	bls.n	80003de <__udivmoddi4+0x126>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80ec 	beq.w	80005b4 <__udivmoddi4+0x2fc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003e8:	fb04 f408 	mul.w	r4, r4, r8
 80003ec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x154>
 80003f4:	18ba      	adds	r2, r7, r2
 80003f6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fa:	bf2c      	ite	cs
 80003fc:	2001      	movcs	r0, #1
 80003fe:	2000      	movcc	r0, #0
 8000400:	4294      	cmp	r4, r2
 8000402:	d902      	bls.n	800040a <__udivmoddi4+0x152>
 8000404:	2800      	cmp	r0, #0
 8000406:	f000 80d1 	beq.w	80005ac <__udivmoddi4+0x2f4>
 800040a:	4698      	mov	r8, r3
 800040c:	1b12      	subs	r2, r2, r4
 800040e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000412:	e79d      	b.n	8000350 <__udivmoddi4+0x98>
 8000414:	f1c1 0620 	rsb	r6, r1, #32
 8000418:	408b      	lsls	r3, r1
 800041a:	fa08 f401 	lsl.w	r4, r8, r1
 800041e:	fa00 f901 	lsl.w	r9, r0, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa28 f806 	lsr.w	r8, r8, r6
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f306 	lsr.w	r3, r0, r6
 8000432:	0c38      	lsrs	r0, r7, #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fa1f fc87 	uxth.w	ip, r7
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	fbb8 fef0 	udiv	lr, r8, r0
 8000440:	fb00 881e 	mls	r8, r0, lr, r8
 8000444:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000448:	fb0e f80c 	mul.w	r8, lr, ip
 800044c:	45a0      	cmp	r8, r4
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a0      	cmp	r8, r4
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 80b8 	beq.w	80005dc <__udivmoddi4+0x324>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fa1f f883 	uxth.w	r8, r3
 8000476:	fbb4 f3f0 	udiv	r3, r4, r0
 800047a:	fb00 4413 	mls	r4, r0, r3, r4
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000486:	45a4      	cmp	ip, r4
 8000488:	d90e      	bls.n	80004a8 <__udivmoddi4+0x1f0>
 800048a:	193c      	adds	r4, r7, r4
 800048c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000490:	bf2c      	ite	cs
 8000492:	f04f 0801 	movcs.w	r8, #1
 8000496:	f04f 0800 	movcc.w	r8, #0
 800049a:	45a4      	cmp	ip, r4
 800049c:	d903      	bls.n	80004a6 <__udivmoddi4+0x1ee>
 800049e:	f1b8 0f00 	cmp.w	r8, #0
 80004a2:	f000 809f 	beq.w	80005e4 <__udivmoddi4+0x32c>
 80004a6:	4603      	mov	r3, r0
 80004a8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ac:	eba4 040c 	sub.w	r4, r4, ip
 80004b0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b4:	4564      	cmp	r4, ip
 80004b6:	4673      	mov	r3, lr
 80004b8:	46e0      	mov	r8, ip
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x20a>
 80004bc:	d107      	bne.n	80004ce <__udivmoddi4+0x216>
 80004be:	45f1      	cmp	r9, lr
 80004c0:	d205      	bcs.n	80004ce <__udivmoddi4+0x216>
 80004c2:	ebbe 0302 	subs.w	r3, lr, r2
 80004c6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	46e0      	mov	r8, ip
 80004ce:	b15d      	cbz	r5, 80004e8 <__udivmoddi4+0x230>
 80004d0:	ebb9 0203 	subs.w	r2, r9, r3
 80004d4:	eb64 0408 	sbc.w	r4, r4, r8
 80004d8:	fa04 f606 	lsl.w	r6, r4, r6
 80004dc:	fa22 f301 	lsr.w	r3, r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	431e      	orrs	r6, r3
 80004e4:	e9c5 6400 	strd	r6, r4, [r5]
 80004e8:	2100      	movs	r1, #0
 80004ea:	e736      	b.n	800035a <__udivmoddi4+0xa2>
 80004ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f0:	0c01      	lsrs	r1, r0, #16
 80004f2:	4614      	mov	r4, r2
 80004f4:	b280      	uxth	r0, r0
 80004f6:	4696      	mov	lr, r2
 80004f8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fc:	2620      	movs	r6, #32
 80004fe:	4690      	mov	r8, r2
 8000500:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000504:	4610      	mov	r0, r2
 8000506:	fbb1 f1f2 	udiv	r1, r1, r2
 800050a:	eba3 0308 	sub.w	r3, r3, r8
 800050e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000512:	e74b      	b.n	80003ac <__udivmoddi4+0xf4>
 8000514:	40b7      	lsls	r7, r6
 8000516:	f1c6 0320 	rsb	r3, r6, #32
 800051a:	fa01 f206 	lsl.w	r2, r1, r6
 800051e:	fa21 f803 	lsr.w	r8, r1, r3
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	fa20 f303 	lsr.w	r3, r0, r3
 800052a:	b2bc      	uxth	r4, r7
 800052c:	40b0      	lsls	r0, r6
 800052e:	4313      	orrs	r3, r2
 8000530:	0c02      	lsrs	r2, r0, #16
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	b280      	uxth	r0, r0
 8000536:	fbb8 f9fe 	udiv	r9, r8, lr
 800053a:	fb0e 8819 	mls	r8, lr, r9, r8
 800053e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	4588      	cmp	r8, r1
 8000548:	d951      	bls.n	80005ee <__udivmoddi4+0x336>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000550:	bf2c      	ite	cs
 8000552:	f04f 0a01 	movcs.w	sl, #1
 8000556:	f04f 0a00 	movcc.w	sl, #0
 800055a:	4588      	cmp	r8, r1
 800055c:	d902      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800055e:	f1ba 0f00 	cmp.w	sl, #0
 8000562:	d031      	beq.n	80005c8 <__udivmoddi4+0x310>
 8000564:	eba1 0108 	sub.w	r1, r1, r8
 8000568:	fbb1 f9fe 	udiv	r9, r1, lr
 800056c:	fb09 f804 	mul.w	r8, r9, r4
 8000570:	fb0e 1119 	mls	r1, lr, r9, r1
 8000574:	b29b      	uxth	r3, r3
 8000576:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057a:	4543      	cmp	r3, r8
 800057c:	d235      	bcs.n	80005ea <__udivmoddi4+0x332>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f109 31ff 	add.w	r1, r9, #4294967295
 8000584:	bf2c      	ite	cs
 8000586:	f04f 0a01 	movcs.w	sl, #1
 800058a:	f04f 0a00 	movcc.w	sl, #0
 800058e:	4543      	cmp	r3, r8
 8000590:	d2bb      	bcs.n	800050a <__udivmoddi4+0x252>
 8000592:	f1ba 0f00 	cmp.w	sl, #0
 8000596:	d1b8      	bne.n	800050a <__udivmoddi4+0x252>
 8000598:	f1a9 0102 	sub.w	r1, r9, #2
 800059c:	443b      	add	r3, r7
 800059e:	e7b4      	b.n	800050a <__udivmoddi4+0x252>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb68 0203 	sbc.w	r2, r8, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	4696      	mov	lr, r2
 80005aa:	e6eb      	b.n	8000384 <__udivmoddi4+0xcc>
 80005ac:	443a      	add	r2, r7
 80005ae:	f1a8 0802 	sub.w	r8, r8, #2
 80005b2:	e72b      	b.n	800040c <__udivmoddi4+0x154>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	443b      	add	r3, r7
 80005ba:	e710      	b.n	80003de <__udivmoddi4+0x126>
 80005bc:	3902      	subs	r1, #2
 80005be:	443b      	add	r3, r7
 80005c0:	e6a9      	b.n	8000316 <__udivmoddi4+0x5e>
 80005c2:	443a      	add	r2, r7
 80005c4:	3802      	subs	r0, #2
 80005c6:	e6be      	b.n	8000346 <__udivmoddi4+0x8e>
 80005c8:	eba7 0808 	sub.w	r8, r7, r8
 80005cc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d0:	4441      	add	r1, r8
 80005d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d6:	fb09 f804 	mul.w	r8, r9, r4
 80005da:	e7c9      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	e744      	b.n	800046e <__udivmoddi4+0x1b6>
 80005e4:	3b02      	subs	r3, #2
 80005e6:	443c      	add	r4, r7
 80005e8:	e75e      	b.n	80004a8 <__udivmoddi4+0x1f0>
 80005ea:	4649      	mov	r1, r9
 80005ec:	e78d      	b.n	800050a <__udivmoddi4+0x252>
 80005ee:	eba1 0108 	sub.w	r1, r1, r8
 80005f2:	46cc      	mov	ip, r9
 80005f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f8:	fb09 f804 	mul.w	r8, r9, r4
 80005fc:	e7b8      	b.n	8000570 <__udivmoddi4+0x2b8>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <cs_low>:

/*

*/

static inline void cs_low (const spi_dev_t *d){ HAL_GPIO_WritePin(d->cs_port, d->cs_pin, GPIO_PIN_RESET); }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6858      	ldr	r0, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	891b      	ldrh	r3, [r3, #8]
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	f004 fc46 	bl	8004ea8 <HAL_GPIO_WritePin>
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <cs_high>:
static inline void cs_high(const spi_dev_t *d){ HAL_GPIO_WritePin(d->cs_port, d->cs_pin, GPIO_PIN_SET); }
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6858      	ldr	r0, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	891b      	ldrh	r3, [r3, #8]
 8000634:	2201      	movs	r2, #1
 8000636:	4619      	mov	r1, r3
 8000638:	f004 fc36 	bl	8004ea8 <HAL_GPIO_WritePin>
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <dev_write>:

HAL_StatusTypeDef dev_write(const spi_dev_t *d, uint8_t reg, const uint8_t *data, uint16_t len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	461a      	mov	r2, r3
 8000650:	460b      	mov	r3, r1
 8000652:	72fb      	strb	r3, [r7, #11]
 8000654:	4613      	mov	r3, r2
 8000656:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef st;
    cs_low(d);
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f7ff ffd3 	bl	8000604 <cs_low>
    st  = HAL_SPI_Transmit(d->spi, &reg, 1, 100);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	f107 010b 	add.w	r1, r7, #11
 8000666:	2364      	movs	r3, #100	@ 0x64
 8000668:	2201      	movs	r2, #1
 800066a:	f009 fd23 	bl	800a0b4 <HAL_SPI_Transmit>
 800066e:	4603      	mov	r3, r0
 8000670:	75fb      	strb	r3, [r7, #23]
    if (st==HAL_OK && len) st = HAL_SPI_Transmit(d->spi, (uint8_t*)data, len, 100);
 8000672:	7dfb      	ldrb	r3, [r7, #23]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d10b      	bne.n	8000690 <dev_write+0x4c>
 8000678:	893b      	ldrh	r3, [r7, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <dev_write+0x4c>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	893a      	ldrh	r2, [r7, #8]
 8000684:	2364      	movs	r3, #100	@ 0x64
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f009 fd14 	bl	800a0b4 <HAL_SPI_Transmit>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
    cs_high(d);
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff ffc7 	bl	8000624 <cs_high>
    return st;
 8000696:	7dfb      	ldrb	r3, [r7, #23]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <dev_read>:

HAL_StatusTypeDef dev_read(const spi_dev_t *d, uint8_t reg, uint8_t *data, uint16_t len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	607a      	str	r2, [r7, #4]
 80006aa:	461a      	mov	r2, r3
 80006ac:	460b      	mov	r3, r1
 80006ae:	72fb      	strb	r3, [r7, #11]
 80006b0:	4613      	mov	r3, r2
 80006b2:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef st;
    uint8_t cmd = reg | 0x80U; // RW bit = 1 for read
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	75bb      	strb	r3, [r7, #22]
    cs_low(d);
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f7ff ffa0 	bl	8000604 <cs_low>
    st  = HAL_SPI_Transmit(d->spi, &cmd, 1, 100);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	f107 0116 	add.w	r1, r7, #22
 80006cc:	2364      	movs	r3, #100	@ 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	f009 fcf0 	bl	800a0b4 <HAL_SPI_Transmit>
 80006d4:	4603      	mov	r3, r0
 80006d6:	75fb      	strb	r3, [r7, #23]
    if (st==HAL_OK && len) st = HAL_SPI_Receive(d->spi, data, len, 100);
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d10b      	bne.n	80006f6 <dev_read+0x56>
 80006de:	893b      	ldrh	r3, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <dev_read+0x56>
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	893a      	ldrh	r2, [r7, #8]
 80006ea:	2364      	movs	r3, #100	@ 0x64
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	f009 fef5 	bl	800a4dc <HAL_SPI_Receive>
 80006f2:	4603      	mov	r3, r0
 80006f4:	75fb      	strb	r3, [r7, #23]
    cs_high(d);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff ff94 	bl	8000624 <cs_high>
    return st;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <iis3dwb_init>:




static void iis3dwb_init(const spi_dev_t *dev)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  //spi2_set_mode0();                 // DWB needs mode 0
  uint8_t ctrl1 = 0xA0;             // ODR + FS=±2g
 800070e:	23a0      	movs	r3, #160	@ 0xa0
 8000710:	73fb      	strb	r3, [r7, #15]
  dev_write(dev, DWB_CTRL1_XL, &ctrl1, 1);
 8000712:	f107 020f 	add.w	r2, r7, #15
 8000716:	2301      	movs	r3, #1
 8000718:	2110      	movs	r1, #16
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff92 	bl	8000644 <dev_write>

  uint8_t c12_13[2] = { DWB_CTRL3_C_BDU | DWB_CTRL3_C_IF_INC, DWB_CTRL4_C_I2C_DIS };
 8000720:	f240 4344 	movw	r3, #1092	@ 0x444
 8000724:	81bb      	strh	r3, [r7, #12]
  dev_write(dev, DWB_CTRL3_C, c12_13, 2);
 8000726:	f107 020c 	add.w	r2, r7, #12
 800072a:	2302      	movs	r3, #2
 800072c:	2112      	movs	r1, #18
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff88 	bl	8000644 <dev_write>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <i2c2_scan_first_device>:




static uint16_t i2c2_scan_first_device(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
    for (uint8_t a = 0x08; a <= 0x77; ++a)
 8000742:	2308      	movs	r3, #8
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e013      	b.n	8000770 <i2c2_scan_first_device+0x34>
        if (HAL_I2C_IsDeviceReady(&hi2c2, (a << 1), 2, 5) == HAL_OK)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	b29b      	uxth	r3, r3
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	b299      	uxth	r1, r3
 8000750:	2305      	movs	r3, #5
 8000752:	2202      	movs	r2, #2
 8000754:	480a      	ldr	r0, [pc, #40]	@ (8000780 <i2c2_scan_first_device+0x44>)
 8000756:	f004 fec5 	bl	80054e4 <HAL_I2C_IsDeviceReady>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <i2c2_scan_first_device+0x2e>
            return (a << 1);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	b29b      	uxth	r3, r3
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	b29b      	uxth	r3, r3
 8000768:	e006      	b.n	8000778 <i2c2_scan_first_device+0x3c>
    for (uint8_t a = 0x08; a <= 0x77; ++a)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	3301      	adds	r3, #1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b77      	cmp	r3, #119	@ 0x77
 8000774:	d9e8      	bls.n	8000748 <i2c2_scan_first_device+0xc>
    return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000184 	.word	0x20000184

08000784 <stts22h_find_and_start>:

/* Call this ONCE at startup */
static void stts22h_find_and_start(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09a      	sub	sp, #104	@ 0x68
 8000788:	af04      	add	r7, sp, #16
    uint8_t who = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Try the 4 known STTS22H addresses first
    for (size_t i = 0; i < sizeof(stts22h_candidates); ++i)
 8000790:	2300      	movs	r3, #0
 8000792:	657b      	str	r3, [r7, #84]	@ 0x54
 8000794:	e023      	b.n	80007de <stts22h_find_and_start+0x5a>
    {
        uint16_t addr8 = (uint16_t)stts22h_candidates[i] << 1;   // HAL wants 8-bit
 8000796:	4a46      	ldr	r2, [pc, #280]	@ (80008b0 <stts22h_find_and_start+0x12c>)
 8000798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
        if (HAL_I2C_Mem_Read(&hi2c2, addr8, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 80007a4:	f8b7 1052 	ldrh.w	r1, [r7, #82]	@ 0x52
 80007a8:	2332      	movs	r3, #50	@ 0x32
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	2301      	movs	r3, #1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2201      	movs	r2, #1
 80007ba:	483e      	ldr	r0, [pc, #248]	@ (80008b4 <stts22h_find_and_start+0x130>)
 80007bc:	f004 fd78 	bl	80052b0 <HAL_I2C_Mem_Read>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d108      	bne.n	80007d8 <stts22h_find_and_start+0x54>
            who == 0xA0)    // WHO_AM_I expected = 0xA0
 80007c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
        if (HAL_I2C_Mem_Read(&hi2c2, addr8, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 80007ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80007cc:	d104      	bne.n	80007d8 <stts22h_find_and_start+0x54>
        {
            stts22h_addr = addr8;
 80007ce:	4a3a      	ldr	r2, [pc, #232]	@ (80008b8 <stts22h_find_and_start+0x134>)
 80007d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80007d4:	8013      	strh	r3, [r2, #0]
            break;
 80007d6:	e005      	b.n	80007e4 <stts22h_find_and_start+0x60>
    for (size_t i = 0; i < sizeof(stts22h_candidates); ++i)
 80007d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007da:	3301      	adds	r3, #1
 80007dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80007de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d9d8      	bls.n	8000796 <stts22h_find_and_start+0x12>
        }
    }

    // If still unknown, do a generic bus scan
    if (stts22h_addr == 0) {
 80007e4:	4b34      	ldr	r3, [pc, #208]	@ (80008b8 <stts22h_find_and_start+0x134>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d121      	bne.n	8000830 <stts22h_find_and_start+0xac>
        uint16_t found = i2c2_scan_first_device();
 80007ec:	f7ff ffa6 	bl	800073c <i2c2_scan_first_device>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        if (found) {
 80007f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d018      	beq.n	8000830 <stts22h_find_and_start+0xac>
            // optional: verify it's really STTS22H
            if (HAL_I2C_Mem_Read(&hi2c2, found, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 80007fe:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 8000802:	2332      	movs	r3, #50	@ 0x32
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2301      	movs	r3, #1
 8000812:	2201      	movs	r2, #1
 8000814:	4827      	ldr	r0, [pc, #156]	@ (80008b4 <stts22h_find_and_start+0x130>)
 8000816:	f004 fd4b 	bl	80052b0 <HAL_I2C_Mem_Read>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d107      	bne.n	8000830 <stts22h_find_and_start+0xac>
                who == 0xA0)
 8000820:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
            if (HAL_I2C_Mem_Read(&hi2c2, found, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 50) == HAL_OK &&
 8000824:	2ba0      	cmp	r3, #160	@ 0xa0
 8000826:	d103      	bne.n	8000830 <stts22h_find_and_start+0xac>
                stts22h_addr = found;
 8000828:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <stts22h_find_and_start+0x134>)
 800082a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800082e:	8013      	strh	r3, [r2, #0]
        }
    }

    // If found, configure continuous mode: BDU=1, IF_ADD_INC=1, FREERUN/ODR bits set
    if (stts22h_addr) {
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <stts22h_find_and_start+0x134>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d02a      	beq.n	800088e <stts22h_find_and_start+0x10a>
        uint8_t ctrl = 0x4C;                              // BDU=1, IF_ADD_INC=1, ODR>0
 8000838:	234c      	movs	r3, #76	@ 0x4c
 800083a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        (void)HAL_I2C_Mem_Write(&hi2c2, stts22h_addr, 0x04, I2C_MEMADD_SIZE_8BIT, &ctrl, 1, 100);
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <stts22h_find_and_start+0x134>)
 8000840:	8819      	ldrh	r1, [r3, #0]
 8000842:	2364      	movs	r3, #100	@ 0x64
 8000844:	9302      	str	r3, [sp, #8]
 8000846:	2301      	movs	r3, #1
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	2204      	movs	r2, #4
 8000854:	4817      	ldr	r0, [pc, #92]	@ (80008b4 <stts22h_find_and_start+0x130>)
 8000856:	f004 fc17 	bl	8005088 <HAL_I2C_Mem_Write>
        HAL_Delay(2);
 800085a:	2002      	movs	r0, #2
 800085c:	f002 f932 	bl	8002ac4 <HAL_Delay>

        // (optional) print what we found
        char msg[64];
        int n = snprintf(msg, sizeof(msg), "STTS22H @0x%02X WHO=0x%02X\r\n",
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <stts22h_find_and_start+0x134>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	b29b      	uxth	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800086e:	1d38      	adds	r0, r7, #4
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	4613      	mov	r3, r2
 8000874:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <stts22h_find_and_start+0x138>)
 8000876:	2140      	movs	r1, #64	@ 0x40
 8000878:	f00b fa0e 	bl	800bc98 <sniprintf>
 800087c:	64b8      	str	r0, [r7, #72]	@ 0x48
                         (unsigned)(stts22h_addr>>1), (unsigned)who);
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)n, 50);
 800087e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000880:	b29a      	uxth	r2, r3
 8000882:	1d39      	adds	r1, r7, #4
 8000884:	2332      	movs	r3, #50	@ 0x32
 8000886:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <stts22h_find_and_start+0x13c>)
 8000888:	f00a fca4 	bl	800b1d4 <HAL_UART_Transmit>
    } else {
        const char *msg = "STTS22H not found on I2C2\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 50);
    }
}
 800088c:	e00b      	b.n	80008a6 <stts22h_find_and_start+0x122>
        const char *msg = "STTS22H not found on I2C2\r\n";
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <stts22h_find_and_start+0x140>)
 8000890:	64fb      	str	r3, [r7, #76]	@ 0x4c
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 50);
 8000892:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000894:	f7ff fcf0 	bl	8000278 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	2332      	movs	r3, #50	@ 0x32
 800089e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80008a0:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <stts22h_find_and_start+0x13c>)
 80008a2:	f00a fc97 	bl	800b1d4 <HAL_UART_Transmit>
}
 80008a6:	bf00      	nop
 80008a8:	3758      	adds	r7, #88	@ 0x58
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	0800caf0 	.word	0x0800caf0
 80008b4:	20000184 	.word	0x20000184
 80008b8:	20000000 	.word	0x20000000
 80008bc:	0800c9d0 	.word	0x0800c9d0
 80008c0:	200004c0 	.word	0x200004c0
 80008c4:	0800c9f0 	.word	0x0800c9f0

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ca:	ed2d 8b02 	vpush	{d8}
 80008ce:	b0df      	sub	sp, #380	@ 0x17c
 80008d0:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f002 f831 	bl	8002938 <HAL_Init>

  /* Configure the System Power */
 // SystemPower_Config();

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 fcb9 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 fe1b 	bl	8001514 <MX_GPIO_Init>
  //MX_ADC1_Init();
  //MX_ADF1_Init();
  //MX_MDF1_Init();
  //MX_DAC1_Init();
  //MX_I2C1_Init();
  MX_I2C2_Init();
 80008de:	f000 fd1b 	bl	8001318 <MX_I2C2_Init>

  stts22h_find_and_start();
 80008e2:	f7ff ff4f 	bl	8000784 <stts22h_find_and_start>





  HAL_Delay(5);
 80008e6:	2005      	movs	r0, #5
 80008e8:	f002 f8ec 	bl	8002ac4 <HAL_Delay>

  // If you want to print all devices:
  // i2c2_scan_and_print_all();

  extern uint16_t stts22h_addr;      // your global address variable
  uint16_t found = i2c2_scan_first_device();
 80008ec:	f7ff ff26 	bl	800073c <i2c2_scan_first_device>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
  if (found) {
 80008f6:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <main+0x3e>
      stts22h_addr = 126;          // set to the detected 8-bit address
 80008fe:	4b6f      	ldr	r3, [pc, #444]	@ (8000abc <main+0x1f4>)
 8000900:	227e      	movs	r2, #126	@ 0x7e
 8000902:	801a      	strh	r2, [r3, #0]
 8000904:	e002      	b.n	800090c <main+0x44>
  } else {
      stts22h_addr = (0x3C << 1);    // fallback to the usual STTS22H address
 8000906:	4b6d      	ldr	r3, [pc, #436]	@ (8000abc <main+0x1f4>)
 8000908:	2278      	movs	r2, #120	@ 0x78
 800090a:	801a      	strh	r2, [r3, #0]
  //MX_ICACHE_Init();
  //MX_RTC_Init();
  //MX_SAI1_Init();
  //MX_SDMMC1_SD_Init();
  //MX_SPI1_Init();
  MX_SPI2_Init();
 800090c:	f000 fd44 	bl	8001398 <MX_SPI2_Init>

  /* After MX_SPI2_Init(); do once */
  //hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;   // mode 0
  //hspi2.Init.CLKPhase    = SPI_PHASE_1EDGE;
  HAL_SPI_DeInit(&hspi2);
 8000910:	486b      	ldr	r0, [pc, #428]	@ (8000ac0 <main+0x1f8>)
 8000912:	f009 fba5 	bl	800a060 <HAL_SPI_DeInit>
  HAL_SPI_Init(&hspi2);
 8000916:	486a      	ldr	r0, [pc, #424]	@ (8000ac0 <main+0x1f8>)
 8000918:	f009 fa8c 	bl	8009e34 <HAL_SPI_Init>
  //MX_SPI3_Init();
  //MX_TAMP_RTC_Init();
  //MX_TIM3_Init();
  MX_USART2_UART_Init();
 800091c:	f000 fdac 	bl	8001478 <MX_USART2_UART_Init>
	//static spi_dev_t DWB, ISM;
	//DWB.spi    = &hspi2;  DWB.cs_port = CS_DWB_GPIO_Port;  DWB.cs_pin = CS_DWB_Pin;
	//ISM.spi    = &hspi2;  ISM.cs_port = CS_DHCX_GPIO_Port; ISM.cs_pin = CS_DHCX_Pin;

	/* Idle-high CS */
	cs_high(&DWB);
 8000920:	4868      	ldr	r0, [pc, #416]	@ (8000ac4 <main+0x1fc>)
 8000922:	f7ff fe7f 	bl	8000624 <cs_high>
	cs_high(&ISM);
 8000926:	4868      	ldr	r0, [pc, #416]	@ (8000ac8 <main+0x200>)
 8000928:	f7ff fe7c 	bl	8000624 <cs_high>

	/* ---- Init ISM330DHCX (Mode 3) ---- */
	//spi2_set_mode3();
	uint8_t who_ism = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	( void ) dev_read(&ISM, DHCX_WHO_AM_I, &who_ism, 1);   // expect 0x6B
 8000932:	f107 02af 	add.w	r2, r7, #175	@ 0xaf
 8000936:	2301      	movs	r3, #1
 8000938:	210f      	movs	r1, #15
 800093a:	4863      	ldr	r0, [pc, #396]	@ (8000ac8 <main+0x200>)
 800093c:	f7ff feb0 	bl	80006a0 <dev_read>

	uint8_t v;
	v = 0x44; (void) dev_write(&ISM, DHCX_CTRL3_C, &v, 1); // BDU=1, IF_INC=1
 8000940:	2344      	movs	r3, #68	@ 0x44
 8000942:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8000946:	f107 02ae 	add.w	r2, r7, #174	@ 0xae
 800094a:	2301      	movs	r3, #1
 800094c:	2112      	movs	r1, #18
 800094e:	485e      	ldr	r0, [pc, #376]	@ (8000ac8 <main+0x200>)
 8000950:	f7ff fe78 	bl	8000644 <dev_write>
	v = 0x40; (void) dev_write(&ISM, DHCX_CTRL1_XL, &v, 1); // XL 104 Hz, ±2g
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 800095a:	f107 02ae 	add.w	r2, r7, #174	@ 0xae
 800095e:	2301      	movs	r3, #1
 8000960:	2110      	movs	r1, #16
 8000962:	4859      	ldr	r0, [pc, #356]	@ (8000ac8 <main+0x200>)
 8000964:	f7ff fe6e 	bl	8000644 <dev_write>
	v = 0x40; (void) dev_write(&ISM, DHCX_CTRL2_G,  &v, 1); // G  104 Hz (optional)
 8000968:	2340      	movs	r3, #64	@ 0x40
 800096a:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 800096e:	f107 02ae 	add.w	r2, r7, #174	@ 0xae
 8000972:	2301      	movs	r3, #1
 8000974:	2111      	movs	r1, #17
 8000976:	4854      	ldr	r0, [pc, #336]	@ (8000ac8 <main+0x200>)
 8000978:	f7ff fe64 	bl	8000644 <dev_write>

	/* ---- Init IIS3DWB (Mode 0) ---- */
	iis3dwb_init(&DWB);
 800097c:	4851      	ldr	r0, [pc, #324]	@ (8000ac4 <main+0x1fc>)
 800097e:	f7ff fec2 	bl	8000706 <iis3dwb_init>

	/* Return SPI to mode-0 so your loop can start with DWB */
	//spi2_set_mode0();

	/* Greeting */
	const char *hello = "VCP alive\r\n";
 8000982:	4b52      	ldr	r3, [pc, #328]	@ (8000acc <main+0x204>)
 8000984:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	HAL_UART_Transmit(&huart2, (uint8_t*)hello, strlen(hello), 100);
 8000988:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800098c:	f7ff fc74 	bl	8000278 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	2364      	movs	r3, #100	@ 0x64
 8000996:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800099a:	484d      	ldr	r0, [pc, #308]	@ (8000ad0 <main+0x208>)
 800099c:	f00a fc1a 	bl	800b1d4 <HAL_UART_Transmit>





	uint8_t who = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
	HAL_I2C_Mem_Read(&hi2c2, stts22h_addr, 0x01, I2C_MEMADD_SIZE_8BIT, &who, 1, 100);
 80009a6:	4b45      	ldr	r3, [pc, #276]	@ (8000abc <main+0x1f4>)
 80009a8:	8819      	ldrh	r1, [r3, #0]
 80009aa:	2364      	movs	r3, #100	@ 0x64
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	2301      	movs	r3, #1
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	f107 03ad 	add.w	r3, r7, #173	@ 0xad
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2301      	movs	r3, #1
 80009ba:	2201      	movs	r2, #1
 80009bc:	4845      	ldr	r0, [pc, #276]	@ (8000ad4 <main+0x20c>)
 80009be:	f004 fc77 	bl	80052b0 <HAL_I2C_Mem_Read>
	  {
	      /* -------- IIS3DWB accel (SPI2, mode-0) -------- */
	      //spi2_set_mode0();   // keep if ISM needs mode-3; delete if both work in mode-0

	      uint8_t st;
	      if (dev_read(&DWB,DWB_STATUS, &st, 1) == HAL_OK && (st & 0x01))
 80009c2:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80009c6:	2301      	movs	r3, #1
 80009c8:	211e      	movs	r1, #30
 80009ca:	483e      	ldr	r0, [pc, #248]	@ (8000ac4 <main+0x1fc>)
 80009cc:	f7ff fe68 	bl	80006a0 <dev_read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f040 81c4 	bne.w	8000d60 <main+0x498>
 80009d8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f000 81bd 	beq.w	8000d60 <main+0x498>
	      {
	          uint8_t d[6];
	          if (dev_read(&DWB,DWB_OUTX_L, d, 6) == HAL_OK)
 80009e6:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80009ea:	2306      	movs	r3, #6
 80009ec:	2128      	movs	r1, #40	@ 0x28
 80009ee:	4835      	ldr	r0, [pc, #212]	@ (8000ac4 <main+0x1fc>)
 80009f0:	f7ff fe56 	bl	80006a0 <dev_read>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f040 81b2 	bne.w	8000d60 <main+0x498>
	          {
	              int16_t x = (int16_t)((uint16_t)d[1] << 8 | d[0]);
 80009fc:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
	              int16_t y = (int16_t)((uint16_t)d[3] << 8 | d[2]);
 8000a12:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
	              int16_t z = (int16_t)((uint16_t)d[5] << 8 | d[4]);
 8000a28:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e

	              int32_t x_mg_i = ((int32_t)x * 61 + (x >= 0 ? 500 : -500)) / 1000;
 8000a3e:	f9b7 2132 	ldrsh.w	r2, [r7, #306]	@ 0x132
 8000a42:	4613      	mov	r3, r2
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	f9b7 2132 	ldrsh.w	r2, [r7, #306]	@ 0x132
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	db02      	blt.n	8000a5a <main+0x192>
 8000a54:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a58:	e000      	b.n	8000a5c <main+0x194>
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad8 <main+0x210>)
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000adc <main+0x214>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	1192      	asrs	r2, r2, #6
 8000a66:	17db      	asrs	r3, r3, #31
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	              int32_t y_mg_i = ((int32_t)y * 61 + (y >= 0 ? 500 : -500)) / 1000;
 8000a6e:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	@ 0x130
 8000a72:	4613      	mov	r3, r2
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	@ 0x130
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	db02      	blt.n	8000a8a <main+0x1c2>
 8000a84:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a88:	e000      	b.n	8000a8c <main+0x1c4>
 8000a8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ad8 <main+0x210>)
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a13      	ldr	r2, [pc, #76]	@ (8000adc <main+0x214>)
 8000a90:	fb82 1203 	smull	r1, r2, r2, r3
 8000a94:	1192      	asrs	r2, r2, #6
 8000a96:	17db      	asrs	r3, r3, #31
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	              int32_t z_mg_i = ((int32_t)z * 61 + (z >= 0 ? 500 : -500)) / 1000;
 8000a9e:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	@ 0x12e
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	f9b7 212e 	ldrsh.w	r2, [r7, #302]	@ 0x12e
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	db15      	blt.n	8000ae0 <main+0x218>
 8000ab4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ab8:	e013      	b.n	8000ae2 <main+0x21a>
 8000aba:	bf00      	nop
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	200002c8 	.word	0x200002c8
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	0800ca0c 	.word	0x0800ca0c
 8000ad0:	200004c0 	.word	0x200004c0
 8000ad4:	20000184 	.word	0x20000184
 8000ad8:	fffffe0c 	.word	0xfffffe0c
 8000adc:	10624dd3 	.word	0x10624dd3
 8000ae0:	4ad7      	ldr	r2, [pc, #860]	@ (8000e40 <main+0x578>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4ad7      	ldr	r2, [pc, #860]	@ (8000e44 <main+0x57c>)
 8000ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aea:	1192      	asrs	r2, r2, #6
 8000aec:	17db      	asrs	r3, r3, #31
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120


	              int32_t gmag_mg = (int32_t)lroundf(
	                  sqrtf( (float)x_mg_i * (float)x_mg_i +
 8000af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000af8:	ee07 3a90 	vmov	s15, r3
 8000afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
	                         (float)y_mg_i * (float)y_mg_i +
 8000b10:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b20:	ee07 3a90 	vmov	s15, r3
 8000b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
	                  sqrtf( (float)x_mg_i * (float)x_mg_i +
 8000b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
	                         (float)z_mg_i * (float)z_mg_i ));
 8000b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
	              int32_t gmag_mg = (int32_t)lroundf(
 8000b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b50:	eeb0 0a67 	vmov.f32	s0, s15
 8000b54:	f00b fd68 	bl	800c628 <sqrtf>
 8000b58:	eef0 7a40 	vmov.f32	s15, s0
 8000b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b60:	f00b fd80 	bl	800c664 <lroundf>
 8000b64:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c

	              /* Convert mg -> g for angle math */
	              float xf = x_mg_i * 0.001f;
 8000b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b74:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000e48 <main+0x580>
 8000b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7c:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
	              float yf = y_mg_i * 0.001f;
 8000b80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b84:	ee07 3a90 	vmov	s15, r3
 8000b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b8c:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8000e48 <main+0x580>
 8000b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b94:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
	              float zf = z_mg_i * 0.001f;
 8000b98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b9c:	ee07 3a90 	vmov	s15, r3
 8000ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba4:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8000e48 <main+0x580>
 8000ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bac:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110

	              /* classic tilt from accel-only */
	              float roll_deg  = atan2f(yf, zf) * 57.29578f;
 8000bb0:	edd7 0a44 	vldr	s1, [r7, #272]	@ 0x110
 8000bb4:	ed97 0a45 	vldr	s0, [r7, #276]	@ 0x114
 8000bb8:	f00b fd33 	bl	800c622 <atan2f>
 8000bbc:	eef0 7a40 	vmov.f32	s15, s0
 8000bc0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8000e4c <main+0x584>
 8000bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc8:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
	              float pitch_deg = atan2f(-xf, sqrtf(yf*yf + zf*zf)) * 57.29578f;
 8000bcc:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8000bd0:	eeb1 8a67 	vneg.f32	s16, s15
 8000bd4:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8000bd8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000bdc:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 8000be0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bec:	f00b fd1c 	bl	800c628 <sqrtf>
 8000bf0:	eef0 7a40 	vmov.f32	s15, s0
 8000bf4:	eef0 0a67 	vmov.f32	s1, s15
 8000bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8000bfc:	f00b fd11 	bl	800c622 <atan2f>
 8000c00:	eef0 7a40 	vmov.f32	s15, s0
 8000c04:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8000e4c <main+0x584>
 8000c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0c:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108


	              /* keep print integer-only: centi-degrees */
	              int32_t roll_cd  = (int32_t)lroundf(roll_deg  * 100.0f);
 8000c10:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8000c14:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8000e50 <main+0x588>
 8000c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c20:	f00b fd20 	bl	800c664 <lroundf>
 8000c24:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	              int32_t pitch_cd = (int32_t)lroundf(pitch_deg * 100.0f);
 8000c28:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8000c2c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8000e50 <main+0x588>
 8000c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c34:	eeb0 0a67 	vmov.f32	s0, s15
 8000c38:	f00b fd14 	bl	800c664 <lroundf>
 8000c3c:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100


	              /* -- temperature over I2C2 (STTS22H) -- */
	              uint8_t tbuf[2];
	              int32_t t_centi = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	              if (HAL_I2C_Mem_Read(&hi2c2, stts22h_addr, 0x06, I2C_MEMADD_SIZE_8BIT, tbuf, 2, 50) == HAL_OK)
 8000c46:	4b83      	ldr	r3, [pc, #524]	@ (8000e54 <main+0x58c>)
 8000c48:	8819      	ldrh	r1, [r3, #0]
 8000c4a:	2332      	movs	r3, #50	@ 0x32
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	2302      	movs	r3, #2
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	487e      	ldr	r0, [pc, #504]	@ (8000e58 <main+0x590>)
 8000c5e:	f004 fb27 	bl	80052b0 <HAL_I2C_Mem_Read>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10e      	bne.n	8000c86 <main+0x3be>
	              {
	                  int16_t rawt = (int16_t)((uint16_t)tbuf[1] << 8 | tbuf[0]);  // 0.01 °C / LSB
 8000c68:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	                  t_centi = (int32_t)rawt;
 8000c7e:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8000c82:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	              }
	              char line[96];   // <-- add this
	              int n = snprintf(line, sizeof(line),
 8000c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c8a:	4a74      	ldr	r2, [pc, #464]	@ (8000e5c <main+0x594>)
 8000c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c90:	1152      	asrs	r2, r2, #5
 8000c92:	17db      	asrs	r3, r3, #31
 8000c94:	1ad1      	subs	r1, r2, r3
	                "DWB-> x=%ld, y=%ld, z=%ld, g=%ld, roll=%ld.%02ld, pitch=%ld.%02ld, t=%ld.%02ld degC \r\n",
	                (long)x_mg_i, (long)y_mg_i, (long)z_mg_i,
	                (long)gmag_mg,
	                (long)(roll_cd/100),  (long)labs(roll_cd % 100),
 8000c96:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000c9a:	4b70      	ldr	r3, [pc, #448]	@ (8000e5c <main+0x594>)
 8000c9c:	fb83 0302 	smull	r0, r3, r3, r2
 8000ca0:	1158      	asrs	r0, r3, #5
 8000ca2:	17d3      	asrs	r3, r2, #31
 8000ca4:	1ac3      	subs	r3, r0, r3
 8000ca6:	2064      	movs	r0, #100	@ 0x64
 8000ca8:	fb00 f303 	mul.w	r3, r0, r3
 8000cac:	1ad3      	subs	r3, r2, r3
	              int n = snprintf(line, sizeof(line),
 8000cae:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000cb2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000cb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000cba:	4a68      	ldr	r2, [pc, #416]	@ (8000e5c <main+0x594>)
 8000cbc:	fb82 4203 	smull	r4, r2, r2, r3
 8000cc0:	1152      	asrs	r2, r2, #5
 8000cc2:	17db      	asrs	r3, r3, #31
 8000cc4:	1ad4      	subs	r4, r2, r3
	                (long)(pitch_cd/100), (long)labs(pitch_cd % 100),
 8000cc6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8000cca:	4b64      	ldr	r3, [pc, #400]	@ (8000e5c <main+0x594>)
 8000ccc:	fb83 5302 	smull	r5, r3, r3, r2
 8000cd0:	115d      	asrs	r5, r3, #5
 8000cd2:	17d3      	asrs	r3, r2, #31
 8000cd4:	1aeb      	subs	r3, r5, r3
 8000cd6:	2564      	movs	r5, #100	@ 0x64
 8000cd8:	fb05 f303 	mul.w	r3, r5, r3
 8000cdc:	1ad3      	subs	r3, r2, r3
	              int n = snprintf(line, sizeof(line),
 8000cde:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8000ce2:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 8000ce6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000cea:	4a5c      	ldr	r2, [pc, #368]	@ (8000e5c <main+0x594>)
 8000cec:	fb82 6203 	smull	r6, r2, r2, r3
 8000cf0:	1152      	asrs	r2, r2, #5
 8000cf2:	17db      	asrs	r3, r3, #31
 8000cf4:	1ad6      	subs	r6, r2, r3
	                (long)(t_centi/100),  (long)labs(t_centi % 100));
 8000cf6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000cfa:	4b58      	ldr	r3, [pc, #352]	@ (8000e5c <main+0x594>)
 8000cfc:	fb83 c302 	smull	ip, r3, r3, r2
 8000d00:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8000d04:	17d3      	asrs	r3, r2, #31
 8000d06:	ebac 0303 	sub.w	r3, ip, r3
 8000d0a:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8000d0e:	fb0c f303 	mul.w	r3, ip, r3
 8000d12:	1ad3      	subs	r3, r2, r3
	              int n = snprintf(line, sizeof(line),
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bfb8      	it	lt
 8000d18:	425b      	neglt	r3, r3
 8000d1a:	f107 0c14 	add.w	ip, r7, #20
 8000d1e:	9308      	str	r3, [sp, #32]
 8000d20:	9607      	str	r6, [sp, #28]
 8000d22:	9506      	str	r5, [sp, #24]
 8000d24:	9405      	str	r4, [sp, #20]
 8000d26:	9004      	str	r0, [sp, #16]
 8000d28:	9103      	str	r1, [sp, #12]
 8000d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d40:	4a47      	ldr	r2, [pc, #284]	@ (8000e60 <main+0x598>)
 8000d42:	2160      	movs	r1, #96	@ 0x60
 8000d44:	4660      	mov	r0, ip
 8000d46:	f00a ffa7 	bl	800bc98 <sniprintf>
 8000d4a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
	              HAL_UART_Transmit(&huart2, (uint8_t*)line, (uint16_t)n, 50);
 8000d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f107 0114 	add.w	r1, r7, #20
 8000d58:	2332      	movs	r3, #50	@ 0x32
 8000d5a:	4842      	ldr	r0, [pc, #264]	@ (8000e64 <main+0x59c>)
 8000d5c:	f00a fa3a 	bl	800b1d4 <HAL_UART_Transmit>
	      }

	      /* -------- ISM330DHCX accel (SPI2, mode-3) -------- */
	     // spi2_set_mode3();   // switch SPI2 to ISM mode (keep only if needed)

	      uint8_t s2 = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	      if (dev_read(&ISM, DHCX_STATUS, &s2, 1) == HAL_OK && (s2 & 0x03))   // XLDA or GDA
 8000d66:	f107 02ab 	add.w	r2, r7, #171	@ 0xab
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	211e      	movs	r1, #30
 8000d6e:	483e      	ldr	r0, [pc, #248]	@ (8000e68 <main+0x5a0>)
 8000d70:	f7ff fc96 	bl	80006a0 <dev_read>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8253 	bne.w	8001222 <main+0x95a>
 8000d7c:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 824c 	beq.w	8001222 <main+0x95a>
	          /* Start at OUTX_L_G (0x22), NOT OUTX_L_A.
	             Layout with IF_INC=1:
	               b[0..5]  = Gx_L, Gx_H, Gy_L, Gy_H, Gz_L, Gz_H
	               b[6..11] = Ax_L, Ax_H, Ay_L, Ay_H, Az_L, Az_H
	          */
	          if (dev_read(&ISM, DHCX_OUTX_L_A, b, 12) == HAL_OK)
 8000d8a:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8000d8e:	230c      	movs	r3, #12
 8000d90:	2122      	movs	r1, #34	@ 0x22
 8000d92:	4835      	ldr	r0, [pc, #212]	@ (8000e68 <main+0x5a0>)
 8000d94:	f7ff fc84 	bl	80006a0 <dev_read>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8241 	bne.w	8001222 <main+0x95a>
	          {
	        	  /* ---- raw unpack ---- */
	        	          int16_t gx = (int16_t)((uint16_t)b[1]  << 8 | b[0]);
 8000da0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
	        	          int16_t gy = (int16_t)((uint16_t)b[3]  << 8 | b[2]);
 8000db6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
	        	          int16_t gz = (int16_t)((uint16_t)b[5]  << 8 | b[4]);
 8000dcc:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2

	        	          int16_t ax = (int16_t)((uint16_t)b[7]  << 8 | b[6]);
 8000de2:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
	        	          int16_t ay = (int16_t)((uint16_t)b[9]  << 8 | b[8]);
 8000df8:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
	        	          int16_t az = (int16_t)((uint16_t)b[11] << 8 | b[10]);
 8000e0e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec

	        	          /* ---- scale to physical units ---- */
	        	          /* Accel ±2 g: 0.061 mg/LSB (same as your DWB path) */
	        	          int32_t ax_mg = ((int32_t)ax * 61 + (ax >= 0 ? 500 : -500)) / 1000;
 8000e24:	f9b7 20f0 	ldrsh.w	r2, [r7, #240]	@ 0xf0
 8000e28:	4613      	mov	r3, r2
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	f9b7 20f0 	ldrsh.w	r2, [r7, #240]	@ 0xf0
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	db18      	blt.n	8000e6c <main+0x5a4>
 8000e3a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e3e:	e016      	b.n	8000e6e <main+0x5a6>
 8000e40:	fffffe0c 	.word	0xfffffe0c
 8000e44:	10624dd3 	.word	0x10624dd3
 8000e48:	3a83126f 	.word	0x3a83126f
 8000e4c:	42652ee1 	.word	0x42652ee1
 8000e50:	42c80000 	.word	0x42c80000
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000184 	.word	0x20000184
 8000e5c:	51eb851f 	.word	0x51eb851f
 8000e60:	0800ca18 	.word	0x0800ca18
 8000e64:	200004c0 	.word	0x200004c0
 8000e68:	20000010 	.word	0x20000010
 8000e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f58 <main+0x690>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a3a      	ldr	r2, [pc, #232]	@ (8000f5c <main+0x694>)
 8000e72:	fb82 1203 	smull	r1, r2, r2, r3
 8000e76:	1192      	asrs	r2, r2, #6
 8000e78:	17db      	asrs	r3, r3, #31
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	        	          int32_t ay_mg = ((int32_t)ay * 61 + (ay >= 0 ? 500 : -500)) / 1000;
 8000e80:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	@ 0xee
 8000e84:	4613      	mov	r3, r2
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	@ 0xee
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	db02      	blt.n	8000e9c <main+0x5d4>
 8000e96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e9a:	e000      	b.n	8000e9e <main+0x5d6>
 8000e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f58 <main+0x690>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f5c <main+0x694>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	1192      	asrs	r2, r2, #6
 8000ea8:	17db      	asrs	r3, r3, #31
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	        	          int32_t az_mg = ((int32_t)az * 61 + (az >= 0 ? 500 : -500)) / 1000;
 8000eb0:	f9b7 20ec 	ldrsh.w	r2, [r7, #236]	@ 0xec
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f9b7 20ec 	ldrsh.w	r2, [r7, #236]	@ 0xec
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	db02      	blt.n	8000ecc <main+0x604>
 8000ec6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000eca:	e000      	b.n	8000ece <main+0x606>
 8000ecc:	4a22      	ldr	r2, [pc, #136]	@ (8000f58 <main+0x690>)
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <main+0x694>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1192      	asrs	r2, r2, #6
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

	        	          /* Gyro ±245 dps (CTRL2_G=0x40): 8.75 mdps/LSB = 0.00875 dps/LSB */
	        	          /* integer centi-dps (cdps) for gyro: 0.875 cdps per LSB */
	        	          int32_t gx_cdps = ((int32_t)gx * 875 + (gx >= 0 ? 500 : -500)) / 1000;
 8000ee0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8000ee4:	f240 326b 	movw	r2, #875	@ 0x36b
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	f9b7 20f6 	ldrsh.w	r2, [r7, #246]	@ 0xf6
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	db02      	blt.n	8000efa <main+0x632>
 8000ef4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ef8:	e000      	b.n	8000efc <main+0x634>
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <main+0x690>)
 8000efc:	4413      	add	r3, r2
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <main+0x694>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	1192      	asrs	r2, r2, #6
 8000f06:	17db      	asrs	r3, r3, #31
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	        	          int32_t gy_cdps = ((int32_t)gy * 875 + (gy >= 0 ? 500 : -500)) / 1000;
 8000f0e:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	@ 0xf4
 8000f12:	f240 326b 	movw	r2, #875	@ 0x36b
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	f9b7 20f4 	ldrsh.w	r2, [r7, #244]	@ 0xf4
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	db02      	blt.n	8000f28 <main+0x660>
 8000f22:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f26:	e000      	b.n	8000f2a <main+0x662>
 8000f28:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <main+0x690>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <main+0x694>)
 8000f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f32:	1192      	asrs	r2, r2, #6
 8000f34:	17db      	asrs	r3, r3, #31
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	        	          int32_t gz_cdps = ((int32_t)gz * 875 + (gz >= 0 ? 500 : -500)) / 1000;
 8000f3c:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	@ 0xf2
 8000f40:	f240 326b 	movw	r2, #875	@ 0x36b
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	f9b7 20f2 	ldrsh.w	r2, [r7, #242]	@ 0xf2
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	db07      	blt.n	8000f60 <main+0x698>
 8000f50:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f54:	e005      	b.n	8000f62 <main+0x69a>
 8000f56:	bf00      	nop
 8000f58:	fffffe0c 	.word	0xfffffe0c
 8000f5c:	10624dd3 	.word	0x10624dd3
 8000f60:	4ab2      	ldr	r2, [pc, #712]	@ (800122c <main+0x964>)
 8000f62:	4413      	add	r3, r2
 8000f64:	4ab2      	ldr	r2, [pc, #712]	@ (8001230 <main+0x968>)
 8000f66:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6a:	1192      	asrs	r2, r2, #6
 8000f6c:	17db      	asrs	r3, r3, #31
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	        	          /* ---- g-magnitude and tilt (accel-only) ---- */
	        	          int32_t gmag_mg = (int32_t)lroundf(
	        	              sqrtf((float)ax_mg * (float)ax_mg +
 8000f74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
	        	                    (float)ay_mg * (float)ay_mg +
 8000f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	        	              sqrtf((float)ax_mg * (float)ax_mg +
 8000fac:	ee37 7a27 	vadd.f32	s14, s14, s15
	        	                    (float)az_mg * (float)az_mg));
 8000fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	        	          int32_t gmag_mg = (int32_t)lroundf(
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd4:	f00b fb28 	bl	800c628 <sqrtf>
 8000fd8:	eef0 7a40 	vmov.f32	s15, s0
 8000fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe0:	f00b fb40 	bl	800c664 <lroundf>
 8000fe4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

	        	          float xf = ax_mg * 0.001f, yf = ay_mg * 0.001f, zf = az_mg * 0.001f;
 8000fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff4:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001234 <main+0x96c>
 8000ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffc:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
 8001000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100c:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8001234 <main+0x96c>
 8001010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001014:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
 8001018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001024:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001234 <main+0x96c>
 8001028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102c:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	        	          float roll_deg  = atan2f(yf, zf) * 57.29578f;
 8001030:	edd7 0a31 	vldr	s1, [r7, #196]	@ 0xc4
 8001034:	ed97 0a32 	vldr	s0, [r7, #200]	@ 0xc8
 8001038:	f00b faf3 	bl	800c622 <atan2f>
 800103c:	eef0 7a40 	vmov.f32	s15, s0
 8001040:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8001238 <main+0x970>
 8001044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001048:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	        	          float pitch_deg = atan2f(-xf, sqrtf(yf*yf + zf*zf)) * 57.29578f;
 800104c:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8001050:	eeb1 8a67 	vneg.f32	s16, s15
 8001054:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8001058:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800105c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	f00b fadc 	bl	800c628 <sqrtf>
 8001070:	eef0 7a40 	vmov.f32	s15, s0
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	eeb0 0a48 	vmov.f32	s0, s16
 800107c:	f00b fad1 	bl	800c622 <atan2f>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001238 <main+0x970>
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108c:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

	        	          int32_t roll_cd  = (int32_t)lroundf(roll_deg  * 100.0f);  // centi-deg
 8001090:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001094:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800123c <main+0x974>
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	f00b fae0 	bl	800c664 <lroundf>
 80010a4:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	        	          int32_t pitch_cd = (int32_t)lroundf(pitch_deg * 100.0f);
 80010a8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80010ac:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800123c <main+0x974>
 80010b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	f00b fad4 	bl	800c664 <lroundf>
 80010bc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4


	        	          /* ---- print ---- */
	        	          char line2[128];
	        	          int n2 = snprintf(line2, sizeof(line2),
 80010c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80010c4:	4a5e      	ldr	r2, [pc, #376]	@ (8001240 <main+0x978>)
 80010c6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ca:	1152      	asrs	r2, r2, #5
 80010cc:	17db      	asrs	r3, r3, #31
 80010ce:	1ad1      	subs	r1, r2, r3
	        	            "ISM-> ax=%ld, ay=%ld, az=%ld mg, g=%ld mg | "
	        	            "gx=%ld.%02ld, gy=%ld.%02ld, gz=%ld.%02ld dps | "
	        	            "roll=%ld.%02ld, pitch=%ld.%02ld\r\n",
	        	            (long)ax_mg, (long)ay_mg, (long)az_mg, (long)gmag_mg,
	        	            (long)(gx_cdps/100), (long)labs(gx_cdps%100),
 80010d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80010d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001240 <main+0x978>)
 80010d6:	fb83 0302 	smull	r0, r3, r3, r2
 80010da:	1158      	asrs	r0, r3, #5
 80010dc:	17d3      	asrs	r3, r2, #31
 80010de:	1ac3      	subs	r3, r0, r3
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	fb00 f303 	mul.w	r3, r0, r3
 80010e6:	1ad3      	subs	r3, r2, r3
	        	          int n2 = snprintf(line2, sizeof(line2),
 80010e8:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80010ec:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80010f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <main+0x978>)
 80010f6:	fb82 4203 	smull	r4, r2, r2, r3
 80010fa:	1152      	asrs	r2, r2, #5
 80010fc:	17db      	asrs	r3, r3, #31
 80010fe:	1ad4      	subs	r4, r2, r3
	        	            (long)(gy_cdps/100), (long)labs(gy_cdps%100),
 8001100:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8001104:	4b4e      	ldr	r3, [pc, #312]	@ (8001240 <main+0x978>)
 8001106:	fb83 5302 	smull	r5, r3, r3, r2
 800110a:	115d      	asrs	r5, r3, #5
 800110c:	17d3      	asrs	r3, r2, #31
 800110e:	1aeb      	subs	r3, r5, r3
 8001110:	2564      	movs	r5, #100	@ 0x64
 8001112:	fb05 f303 	mul.w	r3, r5, r3
 8001116:	1ad3      	subs	r3, r2, r3
	        	          int n2 = snprintf(line2, sizeof(line2),
 8001118:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800111c:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 8001120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001124:	4a46      	ldr	r2, [pc, #280]	@ (8001240 <main+0x978>)
 8001126:	fb82 6203 	smull	r6, r2, r2, r3
 800112a:	1152      	asrs	r2, r2, #5
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad6      	subs	r6, r2, r3
	        	            (long)(gz_cdps/100), (long)labs(gz_cdps%100),
 8001130:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001134:	4b42      	ldr	r3, [pc, #264]	@ (8001240 <main+0x978>)
 8001136:	fb83 c302 	smull	ip, r3, r3, r2
 800113a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 800113e:	17d3      	asrs	r3, r2, #31
 8001140:	ebac 0303 	sub.w	r3, ip, r3
 8001144:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8001148:	fb0c f303 	mul.w	r3, ip, r3
 800114c:	1ad3      	subs	r3, r2, r3
	        	          int n2 = snprintf(line2, sizeof(line2),
 800114e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001152:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001156:	4613      	mov	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800115e:	4a38      	ldr	r2, [pc, #224]	@ (8001240 <main+0x978>)
 8001160:	fb82 c203 	smull	ip, r2, r2, r3
 8001164:	1152      	asrs	r2, r2, #5
 8001166:	17db      	asrs	r3, r3, #31
 8001168:	1ad2      	subs	r2, r2, r3
 800116a:	60ba      	str	r2, [r7, #8]
	        	            (long)(roll_cd/100),  (long)labs(roll_cd%100),
 800116c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001170:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <main+0x978>)
 8001172:	fb83 c302 	smull	ip, r3, r3, r2
 8001176:	ea4f 1c63 	mov.w	ip, r3, asr #5
 800117a:	17d3      	asrs	r3, r2, #31
 800117c:	ebac 0303 	sub.w	r3, ip, r3
 8001180:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8001184:	fb0c f303 	mul.w	r3, ip, r3
 8001188:	1ad3      	subs	r3, r2, r3
	        	          int n2 = snprintf(line2, sizeof(line2),
 800118a:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
 800118e:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
 8001192:	4663      	mov	r3, ip
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800119a:	4a29      	ldr	r2, [pc, #164]	@ (8001240 <main+0x978>)
 800119c:	fb82 c203 	smull	ip, r2, r2, r3
 80011a0:	1152      	asrs	r2, r2, #5
 80011a2:	17db      	asrs	r3, r3, #31
 80011a4:	1ad2      	subs	r2, r2, r3
 80011a6:	603a      	str	r2, [r7, #0]
	        	            (long)(pitch_cd/100), (long)labs(pitch_cd%100));
 80011a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <main+0x978>)
 80011ae:	fb83 c302 	smull	ip, r3, r3, r2
 80011b2:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80011b6:	17d3      	asrs	r3, r2, #31
 80011b8:	ebac 0303 	sub.w	r3, ip, r3
 80011bc:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80011c0:	fb0c f303 	mul.w	r3, ip, r3
 80011c4:	1ad3      	subs	r3, r2, r3
	        	          int n2 = snprintf(line2, sizeof(line2),
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bfb8      	it	lt
 80011ca:	425b      	neglt	r3, r3
 80011cc:	f107 0c14 	add.w	ip, r7, #20
 80011d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	9308      	str	r3, [sp, #32]
 80011e2:	9607      	str	r6, [sp, #28]
 80011e4:	9506      	str	r5, [sp, #24]
 80011e6:	9405      	str	r4, [sp, #20]
 80011e8:	9004      	str	r0, [sp, #16]
 80011ea:	9103      	str	r1, [sp, #12]
 80011ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001202:	4a10      	ldr	r2, [pc, #64]	@ (8001244 <main+0x97c>)
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	4660      	mov	r0, ip
 8001208:	f00a fd46 	bl	800bc98 <sniprintf>
 800120c:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
	        	          HAL_UART_Transmit(&huart2, (uint8_t*)line2, (uint16_t)n2, 50);
 8001210:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001214:	b29a      	uxth	r2, r3
 8001216:	f107 0114 	add.w	r1, r7, #20
 800121a:	2332      	movs	r3, #50	@ 0x32
 800121c:	480a      	ldr	r0, [pc, #40]	@ (8001248 <main+0x980>)
 800121e:	f009 ffd9 	bl	800b1d4 <HAL_UART_Transmit>
	      }

	      /* Back to IIS3DWB mode for the next loop (only needed if ISM really needs mode-3) */
	      //spi2_set_mode0();

	      HAL_Delay(100);   // one delay for both sensors
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f001 fc4e 	bl	8002ac4 <HAL_Delay>
	  {
 8001228:	f7ff bbcb 	b.w	80009c2 <main+0xfa>
 800122c:	fffffe0c 	.word	0xfffffe0c
 8001230:	10624dd3 	.word	0x10624dd3
 8001234:	3a83126f 	.word	0x3a83126f
 8001238:	42652ee1 	.word	0x42652ee1
 800123c:	42c80000 	.word	0x42c80000
 8001240:	51eb851f 	.word	0x51eb851f
 8001244:	0800ca70 	.word	0x0800ca70
 8001248:	200004c0 	.word	0x200004c0

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09e      	sub	sp, #120	@ 0x78
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2260      	movs	r2, #96	@ 0x60
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f00a fd52 	bl	800bd04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001270:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001274:	f004 fd96 	bl	8005da4 <HAL_PWREx_ControlVoltageScaling>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800127e:	f000 fb73 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001282:	232b      	movs	r3, #43	@ 0x2b
 8001284:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800129c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a6:	2302      	movs	r3, #2
 80012a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012aa:	2303      	movs	r3, #3
 80012ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012b6:	230a      	movs	r3, #10
 80012b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80012c6:	230c      	movs	r3, #12
 80012c8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fe22 	bl	8005f1c <HAL_RCC_OscConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012de:	f000 fb43 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	231f      	movs	r3, #31
 80012e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e6:	2303      	movs	r3, #3
 80012e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	2104      	movs	r1, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 fce8 	bl	8006cd4 <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130a:	f000 fb2d 	bl	8001968 <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3778      	adds	r7, #120	@ 0x78
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_I2C2_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <MX_I2C2_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_I2C2_Init+0x74>)
 8001324:	4a1b      	ldr	r2, [pc, #108]	@ (8001394 <MX_I2C2_Init+0x7c>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_I2C2_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_I2C2_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_I2C2_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_I2C2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_I2C2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_I2C2_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001352:	480e      	ldr	r0, [pc, #56]	@ (800138c <MX_I2C2_Init+0x74>)
 8001354:	f003 fdfc 	bl	8004f50 <HAL_I2C_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800135e:	f000 fb03 	bl	8001968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <MX_I2C2_Init+0x74>)
 8001366:	f004 fc85 	bl	8005c74 <HAL_I2CEx_ConfigAnalogFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 fafa 	bl	8001968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_I2C2_Init+0x74>)
 8001378:	f004 fcc7 	bl	8005d0a <HAL_I2CEx_ConfigDigitalFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 faf1 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000184 	.word	0x20000184
 8001390:	40005800 	.word	0x40005800
 8001394:	00f07bff 	.word	0x00f07bff

08001398 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a8:	4b30      	ldr	r3, [pc, #192]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013aa:	4a31      	ldr	r2, [pc, #196]	@ (8001470 <MX_SPI2_Init+0xd8>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013be:	2207      	movs	r2, #7
 80013c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c2:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c8:	4b28      	ldr	r3, [pc, #160]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e4:	4b21      	ldr	r3, [pc, #132]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013f2:	2207      	movs	r2, #7
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <MX_SPI2_Init+0xd4>)
 80013f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001400:	2200      	movs	r2, #0
 8001402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001406:	2200      	movs	r2, #0
 8001408:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_SPI2_Init+0xd4>)
 800140c:	2200      	movs	r2, #0
 800140e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001412:	2200      	movs	r2, #0
 8001414:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001418:	2200      	movs	r2, #0
 800141a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <MX_SPI2_Init+0xd4>)
 800141e:	2200      	movs	r2, #0
 8001420:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001424:	2200      	movs	r2, #0
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_SPI2_Init+0xd4>)
 800142a:	2200      	movs	r2, #0
 800142c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001430:	2200      	movs	r2, #0
 8001432:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001436:	f008 fcfd 	bl	8009e34 <HAL_SPI_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8001440:	f000 fa92 	bl	8001968 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <MX_SPI2_Init+0xdc>)
 800144a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_SPI2_Init+0xd4>)
 8001456:	f009 fe2c 	bl	800b0b2 <HAL_SPIEx_SetConfigAutonomousMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8001460:	f000 fa82 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002c8 	.word	0x200002c8
 8001470:	40003800 	.word	0x40003800
 8001474:	10010000 	.word	0x10010000

08001478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b23      	ldr	r3, [pc, #140]	@ (800150c <MX_USART2_UART_Init+0x94>)
 800147e:	4a24      	ldr	r2, [pc, #144]	@ (8001510 <MX_USART2_UART_Init+0x98>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001482:	4b22      	ldr	r3, [pc, #136]	@ (800150c <MX_USART2_UART_Init+0x94>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <MX_USART2_UART_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <MX_USART2_UART_Init+0x94>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <MX_USART2_UART_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <MX_USART2_UART_Init+0x94>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4812      	ldr	r0, [pc, #72]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014c4:	f009 fe36 	bl	800b134 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80014ce:	f000 fa4b 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	480d      	ldr	r0, [pc, #52]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014d6:	f00a fb15 	bl	800bb04 <HAL_UARTEx_SetTxFifoThreshold>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80014e0:	f000 fa42 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4809      	ldr	r0, [pc, #36]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014e8:	f00a fb4a 	bl	800bb80 <HAL_UARTEx_SetRxFifoThreshold>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80014f2:	f000 fa39 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_USART2_UART_Init+0x94>)
 80014f8:	f00a facb 	bl	800ba92 <HAL_UARTEx_DisableFifoMode>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001502:	f000 fa31 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200004c0 	.word	0x200004c0
 8001510:	40004400 	.word	0x40004400

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	@ 0x38
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	4bbf      	ldr	r3, [pc, #764]	@ (8001828 <MX_GPIO_Init+0x314>)
 800152c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001530:	4abd      	ldr	r2, [pc, #756]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800153a:	4bbb      	ldr	r3, [pc, #748]	@ (8001828 <MX_GPIO_Init+0x314>)
 800153c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	623b      	str	r3, [r7, #32]
 8001546:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001548:	4bb7      	ldr	r3, [pc, #732]	@ (8001828 <MX_GPIO_Init+0x314>)
 800154a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154e:	4ab6      	ldr	r2, [pc, #728]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001558:	4bb3      	ldr	r3, [pc, #716]	@ (8001828 <MX_GPIO_Init+0x314>)
 800155a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001566:	4bb0      	ldr	r3, [pc, #704]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156c:	4aae      	ldr	r2, [pc, #696]	@ (8001828 <MX_GPIO_Init+0x314>)
 800156e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001572:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001576:	4bac      	ldr	r3, [pc, #688]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001584:	4ba8      	ldr	r3, [pc, #672]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800158a:	4aa7      	ldr	r2, [pc, #668]	@ (8001828 <MX_GPIO_Init+0x314>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001594:	4ba4      	ldr	r3, [pc, #656]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a8:	4a9f      	ldr	r2, [pc, #636]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b2:	4b9d      	ldr	r3, [pc, #628]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c0:	4b99      	ldr	r3, [pc, #612]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c6:	4a98      	ldr	r2, [pc, #608]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d0:	4b95      	ldr	r3, [pc, #596]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b92      	ldr	r3, [pc, #584]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e4:	4a90      	ldr	r2, [pc, #576]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ee:	4b8e      	ldr	r3, [pc, #568]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001828 <MX_GPIO_Init+0x314>)
 80015fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001602:	4a89      	ldr	r2, [pc, #548]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800160c:	4b86      	ldr	r3, [pc, #536]	@ (8001828 <MX_GPIO_Init+0x314>)
 800160e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800161a:	4b83      	ldr	r3, [pc, #524]	@ (8001828 <MX_GPIO_Init+0x314>)
 800161c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001620:	4a81      	ldr	r2, [pc, #516]	@ (8001828 <MX_GPIO_Init+0x314>)
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800162a:	4b7f      	ldr	r3, [pc, #508]	@ (8001828 <MX_GPIO_Init+0x314>)
 800162c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 800163e:	487b      	ldr	r0, [pc, #492]	@ (800182c <MX_GPIO_Init+0x318>)
 8001640:	f003 fc32 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2181      	movs	r1, #129	@ 0x81
 8001648:	4879      	ldr	r0, [pc, #484]	@ (8001830 <MX_GPIO_Init+0x31c>)
 800164a:	f003 fc2d 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_10, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001654:	4875      	ldr	r0, [pc, #468]	@ (800182c <MX_GPIO_Init+0x318>)
 8001656:	f003 fc27 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	2102      	movs	r1, #2
 800165e:	4875      	ldr	r0, [pc, #468]	@ (8001834 <MX_GPIO_Init+0x320>)
 8001660:	f003 fc22 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166a:	4873      	ldr	r0, [pc, #460]	@ (8001838 <MX_GPIO_Init+0x324>)
 800166c:	f003 fc1c 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8001670:	2340      	movs	r3, #64	@ 0x40
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001674:	4b71      	ldr	r3, [pc, #452]	@ (800183c <MX_GPIO_Init+0x328>)
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001680:	4619      	mov	r1, r3
 8001682:	486b      	ldr	r0, [pc, #428]	@ (8001830 <MX_GPIO_Init+0x31c>)
 8001684:	f003 f952 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 8001688:	f248 0362 	movw	r3, #32866	@ 0x8062
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168e:	2303      	movs	r3, #3
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	4868      	ldr	r0, [pc, #416]	@ (8001840 <MX_GPIO_Init+0x32c>)
 800169e:	f003 f945 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin PH12 PH10 CS_DLPC_Pin
                           WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|GPIO_PIN_12|GPIO_PIN_10|CS_DLPC_Pin
 80016a2:	f249 43c0 	movw	r3, #38080	@ 0x94c0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	485c      	ldr	r0, [pc, #368]	@ (800182c <MX_GPIO_Init+0x318>)
 80016bc:	f003 f936 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 80016c0:	2324      	movs	r3, #36	@ 0x24
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c4:	2303      	movs	r3, #3
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4857      	ldr	r0, [pc, #348]	@ (8001830 <MX_GPIO_Init+0x31c>)
 80016d4:	f003 f92a 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 80016d8:	f24a 2301 	movw	r3, #41473	@ 0xa201
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016de:	2303      	movs	r3, #3
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4855      	ldr	r0, [pc, #340]	@ (8001844 <MX_GPIO_Init+0x330>)
 80016ee:	f003 f91d 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 80016f2:	2381      	movs	r3, #129	@ 0x81
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	4849      	ldr	r0, [pc, #292]	@ (8001830 <MX_GPIO_Init+0x31c>)
 800170a:	f003 f90f 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 800170e:	2302      	movs	r3, #2
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	4843      	ldr	r0, [pc, #268]	@ (8001834 <MX_GPIO_Init+0x320>)
 8001726:	f003 f901 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin|STSAFE_RESET_Pin;
 800172a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001730:	2303      	movs	r3, #3
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	483b      	ldr	r0, [pc, #236]	@ (800182c <MX_GPIO_Init+0x318>)
 8001740:	f003 f8f4 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 8001744:	2381      	movs	r3, #129	@ 0x81
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001748:	4b3c      	ldr	r3, [pc, #240]	@ (800183c <MX_GPIO_Init+0x328>)
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4837      	ldr	r0, [pc, #220]	@ (8001834 <MX_GPIO_Init+0x320>)
 8001758:	f003 f8e8 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 800175c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001762:	4b36      	ldr	r3, [pc, #216]	@ (800183c <MX_GPIO_Init+0x328>)
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	4835      	ldr	r0, [pc, #212]	@ (8001848 <MX_GPIO_Init+0x334>)
 8001772:	f003 f8db 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 8001776:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177c:	2303      	movs	r3, #3
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	482b      	ldr	r0, [pc, #172]	@ (8001838 <MX_GPIO_Init+0x324>)
 800178c:	f003 f8ce 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 8001790:	f64c 233e 	movw	r3, #51774	@ 0xca3e
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001796:	4b29      	ldr	r3, [pc, #164]	@ (800183c <MX_GPIO_Init+0x328>)
 8001798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4824      	ldr	r0, [pc, #144]	@ (8001838 <MX_GPIO_Init+0x324>)
 80017a6:	f003 f8c1 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SEL_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin|CHRG_Pin;
 80017aa:	f240 1301 	movw	r3, #257	@ 0x101
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4823      	ldr	r0, [pc, #140]	@ (800184c <MX_GPIO_Init+0x338>)
 80017c0:	f003 f8b4 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 80017c4:	230c      	movs	r3, #12
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c8:	2303      	movs	r3, #3
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	481e      	ldr	r0, [pc, #120]	@ (8001850 <MX_GPIO_Init+0x33c>)
 80017d8:	f003 f8a8 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 80017dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	4810      	ldr	r0, [pc, #64]	@ (8001838 <MX_GPIO_Init+0x324>)
 80017f6:	f003 f899 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 80017fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_GPIO_Init+0x328>)
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_GPIO_Init+0x330>)
 8001810:	f003 f88c 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 8001814:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	2303      	movs	r3, #3
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001826:	e015      	b.n	8001854 <MX_GPIO_Init+0x340>
 8001828:	46020c00 	.word	0x46020c00
 800182c:	42021c00 	.word	0x42021c00
 8001830:	42022000 	.word	0x42022000
 8001834:	42021000 	.word	0x42021000
 8001838:	42021400 	.word	0x42021400
 800183c:	10110000 	.word	0x10110000
 8001840:	42021800 	.word	0x42021800
 8001844:	42020c00 	.word	0x42020c00
 8001848:	42020400 	.word	0x42020400
 800184c:	42020000 	.word	0x42020000
 8001850:	42020800 	.word	0x42020800
 8001854:	4619      	mov	r1, r3
 8001856:	4842      	ldr	r0, [pc, #264]	@ (8001960 <MX_GPIO_Init+0x44c>)
 8001858:	f003 f868 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 800185c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001862:	2303      	movs	r3, #3
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	483c      	ldr	r0, [pc, #240]	@ (8001964 <MX_GPIO_Init+0x450>)
 8001872:	f003 f85b 	bl	800492c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2107      	movs	r1, #7
 800187a:	200b      	movs	r0, #11
 800187c:	f001 fa22 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001880:	200b      	movs	r0, #11
 8001882:	f001 fa39 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2107      	movs	r1, #7
 800188a:	200c      	movs	r0, #12
 800188c:	f001 fa1a 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001890:	200c      	movs	r0, #12
 8001892:	f001 fa31 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2107      	movs	r1, #7
 800189a:	200d      	movs	r0, #13
 800189c:	f001 fa12 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018a0:	200d      	movs	r0, #13
 80018a2:	f001 fa29 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2107      	movs	r1, #7
 80018aa:	200e      	movs	r0, #14
 80018ac:	f001 fa0a 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018b0:	200e      	movs	r0, #14
 80018b2:	f001 fa21 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2107      	movs	r1, #7
 80018ba:	200f      	movs	r0, #15
 80018bc:	f001 fa02 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018c0:	200f      	movs	r0, #15
 80018c2:	f001 fa19 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2107      	movs	r1, #7
 80018ca:	2010      	movs	r0, #16
 80018cc:	f001 f9fa 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80018d0:	2010      	movs	r0, #16
 80018d2:	f001 fa11 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2107      	movs	r1, #7
 80018da:	2011      	movs	r0, #17
 80018dc:	f001 f9f2 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 80018e0:	2011      	movs	r0, #17
 80018e2:	f001 fa09 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2107      	movs	r1, #7
 80018ea:	2012      	movs	r0, #18
 80018ec:	f001 f9ea 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 80018f0:	2012      	movs	r0, #18
 80018f2:	f001 fa01 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2107      	movs	r1, #7
 80018fa:	2013      	movs	r0, #19
 80018fc:	f001 f9e2 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001900:	2013      	movs	r0, #19
 8001902:	f001 f9f9 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2107      	movs	r1, #7
 800190a:	2014      	movs	r0, #20
 800190c:	f001 f9da 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8001910:	2014      	movs	r0, #20
 8001912:	f001 f9f1 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2107      	movs	r1, #7
 800191a:	2015      	movs	r0, #21
 800191c:	f001 f9d2 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001920:	2015      	movs	r0, #21
 8001922:	f001 f9e9 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2107      	movs	r1, #7
 800192a:	2016      	movs	r0, #22
 800192c:	f001 f9ca 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001930:	2016      	movs	r0, #22
 8001932:	f001 f9e1 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2107      	movs	r1, #7
 800193a:	2018      	movs	r0, #24
 800193c:	f001 f9c2 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001940:	2018      	movs	r0, #24
 8001942:	f001 f9d9 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2107      	movs	r1, #7
 800194a:	2019      	movs	r0, #25
 800194c:	f001 f9ba 	bl	8002cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8001950:	2019      	movs	r0, #25
 8001952:	f001 f9d1 	bl	8002cf8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001956:	bf00      	nop
 8001958:	3738      	adds	r7, #56	@ 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	42020400 	.word	0x42020400
 8001964:	42021000 	.word	0x42021000

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <Error_Handler+0x8>

08001974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_MspInit+0x38>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <HAL_MspInit+0x38>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_MspInit+0x38>)
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001998:	f004 fa90 	bl	8005ebc <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 800199c:	f004 fa9e 	bl	8005edc <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 80019a0:	f004 faac 	bl	8005efc <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	46020c00 	.word	0x46020c00

080019b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0c2      	sub	sp, #264	@ 0x108
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019be:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d4:	22c8      	movs	r2, #200	@ 0xc8
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f00a f993 	bl	800bd04 <memset>
  if(hi2c->Instance==I2C1)
 80019de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4aaa      	ldr	r2, [pc, #680]	@ (8001c94 <HAL_I2C_MspInit+0x2e4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d147      	bne.n	8001a80 <HAL_I2C_MspInit+0xd0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019f0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a06:	4618      	mov	r0, r3
 8001a08:	f005 fd34 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001a12:	f7ff ffa9 	bl	8001968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4ba0      	ldr	r3, [pc, #640]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a1c:	4a9e      	ldr	r2, [pc, #632]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a26:	4b9c      	ldr	r3, [pc, #624]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a34:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4890      	ldr	r0, [pc, #576]	@ (8001c9c <HAL_I2C_MspInit+0x2ec>)
 8001a5c:	f002 ff66 	bl	800492c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a60:	4b8d      	ldr	r3, [pc, #564]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a66:	4a8c      	ldr	r2, [pc, #560]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001a68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a6c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a70:	4b89      	ldr	r3, [pc, #548]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a7e:	e16d      	b.n	8001d5c <HAL_I2C_MspInit+0x3ac>
  else if(hi2c->Instance==I2C2)
 8001a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a84      	ldr	r2, [pc, #528]	@ (8001ca0 <HAL_I2C_MspInit+0x2f0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	f040 8114 	bne.w	8001cbc <HAL_I2C_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a94:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fce2 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8001ab6:	f7ff ff57 	bl	8001968 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aba:	4b77      	ldr	r3, [pc, #476]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac0:	4a75      	ldr	r2, [pc, #468]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001ac2:	f043 0320 	orr.w	r3, r3, #32
 8001ac6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aca:	4b73      	ldr	r3, [pc, #460]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ade:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afc:	2312      	movs	r3, #18
 8001afe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b14:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4862      	ldr	r0, [pc, #392]	@ (8001ca4 <HAL_I2C_MspInit+0x2f4>)
 8001b1c:	f002 ff06 	bl	800492c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b20:	2310      	movs	r3, #16
 8001b22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b26:	2312      	movs	r3, #18
 8001b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b3e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4858      	ldr	r0, [pc, #352]	@ (8001ca8 <HAL_I2C_MspInit+0x2f8>)
 8001b46:	f002 fef1 	bl	800492c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b50:	4a51      	ldr	r2, [pc, #324]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001b52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b56:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c98 <HAL_I2C_MspInit+0x2e8>)
 8001b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001b68:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b6a:	4a51      	ldr	r2, [pc, #324]	@ (8001cb0 <HAL_I2C_MspInit+0x300>)
 8001b6c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 8001b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b70:	2210      	movs	r2, #16
 8001b72:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b74:	4b4d      	ldr	r3, [pc, #308]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b80:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001b82:	4b4a      	ldr	r3, [pc, #296]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b84:	2208      	movs	r2, #8
 8001b86:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001b88:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001b8e:	4b47      	ldr	r3, [pc, #284]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001b94:	4b45      	ldr	r3, [pc, #276]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b9a:	4b44      	ldr	r3, [pc, #272]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001ba0:	4b42      	ldr	r3, [pc, #264]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001ba6:	4b41      	ldr	r3, [pc, #260]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001bac:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001bbe:	483b      	ldr	r0, [pc, #236]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001bc0:	f001 f96a 	bl	8002e98 <HAL_DMA_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_MspInit+0x21e>
      Error_Handler();
 8001bca:	f7ff fecd 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8001bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a34      	ldr	r2, [pc, #208]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bdc:	4a33      	ldr	r2, [pc, #204]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bea:	2110      	movs	r1, #16
 8001bec:	482f      	ldr	r0, [pc, #188]	@ (8001cac <HAL_I2C_MspInit+0x2fc>)
 8001bee:	f001 fcf9 	bl	80035e4 <HAL_DMA_ConfigChannelAttributes>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 8001bf8:	f7ff feb6 	bl	8001968 <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8001cb8 <HAL_I2C_MspInit+0x308>)
 8001c00:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 8001c02:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c04:	220f      	movs	r2, #15
 8001c06:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001c08:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c1c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c20:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001c22:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001c52:	4818      	ldr	r0, [pc, #96]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c54:	f001 f920 	bl	8002e98 <HAL_DMA_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_MspInit+0x2b2>
      Error_Handler();
 8001c5e:	f7ff fe83 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 8001c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c70:	4a10      	ldr	r2, [pc, #64]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c7e:	2110      	movs	r1, #16
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <HAL_I2C_MspInit+0x304>)
 8001c82:	f001 fcaf 	bl	80035e4 <HAL_DMA_ConfigChannelAttributes>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d067      	beq.n	8001d5c <HAL_I2C_MspInit+0x3ac>
      Error_Handler();
 8001c8c:	f7ff fe6c 	bl	8001968 <Error_Handler>
}
 8001c90:	e064      	b.n	8001d5c <HAL_I2C_MspInit+0x3ac>
 8001c92:	bf00      	nop
 8001c94:	40005400 	.word	0x40005400
 8001c98:	46020c00 	.word	0x46020c00
 8001c9c:	42020400 	.word	0x42020400
 8001ca0:	40005800 	.word	0x40005800
 8001ca4:	42021400 	.word	0x42021400
 8001ca8:	42021c00 	.word	0x42021c00
 8001cac:	200001d8 	.word	0x200001d8
 8001cb0:	400201d0 	.word	0x400201d0
 8001cb4:	20000250 	.word	0x20000250
 8001cb8:	40020150 	.word	0x40020150
  else if(hi2c->Instance==I2C3)
 8001cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a27      	ldr	r2, [pc, #156]	@ (8001d68 <HAL_I2C_MspInit+0x3b8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d146      	bne.n	8001d5c <HAL_I2C_MspInit+0x3ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 fbc5 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_MspInit+0x344>
      Error_Handler();
 8001cf0:	f7ff fe3a 	bl	8001968 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_I2C_MspInit+0x3bc>)
 8001cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <HAL_I2C_MspInit+0x3bc>)
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_I2C_MspInit+0x3bc>)
 8001d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d12:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d32:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d36:	4619      	mov	r1, r3
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <HAL_I2C_MspInit+0x3c0>)
 8001d3a:	f002 fdf7 	bl	800492c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_I2C_MspInit+0x3bc>)
 8001d40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d44:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_I2C_MspInit+0x3bc>)
 8001d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d4a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <HAL_I2C_MspInit+0x3bc>)
 8001d50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	46002800 	.word	0x46002800
 8001d6c:	46020c00 	.word	0x46020c00
 8001d70:	42021800 	.word	0x42021800

08001d74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0de      	sub	sp, #376	@ 0x178
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d7e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d82:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d94:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d98:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	23c8      	movs	r3, #200	@ 0xc8
 8001da0:	461a      	mov	r2, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	f009 ffae 	bl	800bd04 <memset>
  if(hspi->Instance==SPI1)
 8001da8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a31      	ldr	r2, [pc, #196]	@ (8001e7c <HAL_SPI_MspInit+0x108>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d166      	bne.n	8001e88 <HAL_SPI_MspInit+0x114>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001dba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dbe:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001dc2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001dce:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dd2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001dd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dda:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 fb46 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 8001dee:	f7ff fdbb 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001df2:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <HAL_SPI_MspInit+0x10c>)
 8001df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001df8:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_SPI_MspInit+0x10c>)
 8001dfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dfe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001e02:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <HAL_SPI_MspInit+0x10c>)
 8001e04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e08:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001e0c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e10:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e1e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_SPI_MspInit+0x10c>)
 8001e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e26:	4a16      	ldr	r2, [pc, #88]	@ (8001e80 <HAL_SPI_MspInit+0x10c>)
 8001e28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <HAL_SPI_MspInit+0x10c>)
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e36:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001e3a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e3e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e4c:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8001e4e:	231c      	movs	r3, #28
 8001e50:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e66:	2305      	movs	r3, #5
 8001e68:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e6c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001e70:	4619      	mov	r1, r3
 8001e72:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <HAL_SPI_MspInit+0x110>)
 8001e74:	f002 fd5a 	bl	800492c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e78:	e290      	b.n	800239c <HAL_SPI_MspInit+0x628>
 8001e7a:	bf00      	nop
 8001e7c:	40013000 	.word	0x40013000
 8001e80:	46020c00 	.word	0x46020c00
 8001e84:	42021800 	.word	0x42021800
  else if(hspi->Instance==SPI2)
 8001e88:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e8c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4ace      	ldr	r2, [pc, #824]	@ (80021d0 <HAL_SPI_MspInit+0x45c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 81be 	bne.w	8002218 <HAL_SPI_MspInit+0x4a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e9c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ea0:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8001eb0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001eb4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ebe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f005 fad6 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_SPI_MspInit+0x15e>
      Error_Handler();
 8001ece:	f7ff fd4b 	bl	8001968 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ed2:	4bc0      	ldr	r3, [pc, #768]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ed8:	4abe      	ldr	r2, [pc, #760]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ede:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ee2:	4bbc      	ldr	r3, [pc, #752]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ee8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001eec:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ef0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001efa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001efe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f00:	4bb4      	ldr	r3, [pc, #720]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f06:	4ab3      	ldr	r2, [pc, #716]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f10:	4bb0      	ldr	r3, [pc, #704]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f16:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001f1a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f1e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f28:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001f2c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	4ba9      	ldr	r3, [pc, #676]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f34:	4aa7      	ldr	r2, [pc, #668]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001f36:	f043 0308 	orr.w	r3, r3, #8
 8001f3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f3e:	4ba5      	ldr	r3, [pc, #660]	@ (80021d4 <HAL_SPI_MspInit+0x460>)
 8001f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f44:	f003 0208 	and.w	r2, r3, #8
 8001f48:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f4c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f56:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001f5a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f74:	2305      	movs	r3, #5
 8001f76:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f7a:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4895      	ldr	r0, [pc, #596]	@ (80021d8 <HAL_SPI_MspInit+0x464>)
 8001f82:	f002 fcd3 	bl	800492c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f86:	2308      	movs	r3, #8
 8001f88:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa4:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001fa8:	4619      	mov	r1, r3
 8001faa:	488c      	ldr	r0, [pc, #560]	@ (80021dc <HAL_SPI_MspInit+0x468>)
 8001fac:	f002 fcbe 	bl	800492c <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001fb0:	2321      	movs	r3, #33	@ 0x21
 8001fb2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002012:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002016:	4972      	ldr	r1, [pc, #456]	@ (80021e0 <HAL_SPI_MspInit+0x46c>)
 8002018:	4618      	mov	r0, r3
 800201a:	f001 fecb 	bl	8003db4 <HAL_DMAEx_List_BuildNode>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_SPI_MspInit+0x2b4>
      Error_Handler();
 8002024:	f7ff fca0 	bl	8001968 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002028:	4a6d      	ldr	r2, [pc, #436]	@ (80021e0 <HAL_SPI_MspInit+0x46c>)
 800202a:	2100      	movs	r1, #0
 800202c:	486d      	ldr	r0, [pc, #436]	@ (80021e4 <HAL_SPI_MspInit+0x470>)
 800202e:	f001 fed7 	bl	8003de0 <HAL_DMAEx_List_InsertNode>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_SPI_MspInit+0x2c8>
      Error_Handler();
 8002038:	f7ff fc96 	bl	8001968 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800203c:	4869      	ldr	r0, [pc, #420]	@ (80021e4 <HAL_SPI_MspInit+0x470>)
 800203e:	f001 ff98 	bl	8003f72 <HAL_DMAEx_List_SetCircularMode>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_SPI_MspInit+0x2d8>
      Error_Handler();
 8002048:	f7ff fc8e 	bl	8001968 <Error_Handler>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 800204e:	4a67      	ldr	r2, [pc, #412]	@ (80021ec <HAL_SPI_MspInit+0x478>)
 8002050:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002052:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 8002054:	2200      	movs	r2, #0
 8002056:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002058:	4b63      	ldr	r3, [pc, #396]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 800205a:	2200      	movs	r2, #0
 800205c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800205e:	4b62      	ldr	r3, [pc, #392]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002064:	4b60      	ldr	r3, [pc, #384]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 800206c:	2281      	movs	r2, #129	@ 0x81
 800206e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002070:	485d      	ldr	r0, [pc, #372]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 8002072:	f001 fd73 	bl	8003b5c <HAL_DMAEx_List_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_SPI_MspInit+0x30c>
      Error_Handler();
 800207c:	f7ff fc74 	bl	8001968 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002080:	4958      	ldr	r1, [pc, #352]	@ (80021e4 <HAL_SPI_MspInit+0x470>)
 8002082:	4859      	ldr	r0, [pc, #356]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 8002084:	f001 ffd6 	bl	8004034 <HAL_DMAEx_List_LinkQ>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_SPI_MspInit+0x31e>
      Error_Handler();
 800208e:	f7ff fc6b 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 8002092:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002096:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 800209e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80020a2:	4a51      	ldr	r2, [pc, #324]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 80020a4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80020a8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020b0:	2110      	movs	r1, #16
 80020b2:	484d      	ldr	r0, [pc, #308]	@ (80021e8 <HAL_SPI_MspInit+0x474>)
 80020b4:	f001 fa96 	bl	80035e4 <HAL_DMA_ConfigChannelAttributes>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_SPI_MspInit+0x34e>
      Error_Handler();
 80020be:	f7ff fc53 	bl	8001968 <Error_Handler>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80020c2:	2321      	movs	r3, #33	@ 0x21
 80020c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80020c8:	2308      	movs	r3, #8
 80020ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80020e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80020e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8002124:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002128:	4931      	ldr	r1, [pc, #196]	@ (80021f0 <HAL_SPI_MspInit+0x47c>)
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fe42 	bl	8003db4 <HAL_DMAEx_List_BuildNode>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_SPI_MspInit+0x3c6>
      Error_Handler();
 8002136:	f7ff fc17 	bl	8001968 <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800213a:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <HAL_SPI_MspInit+0x47c>)
 800213c:	2100      	movs	r1, #0
 800213e:	482d      	ldr	r0, [pc, #180]	@ (80021f4 <HAL_SPI_MspInit+0x480>)
 8002140:	f001 fe4e 	bl	8003de0 <HAL_DMAEx_List_InsertNode>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_SPI_MspInit+0x3da>
      Error_Handler();
 800214a:	f7ff fc0d 	bl	8001968 <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800214e:	4829      	ldr	r0, [pc, #164]	@ (80021f4 <HAL_SPI_MspInit+0x480>)
 8002150:	f001 ff0f 	bl	8003f72 <HAL_DMAEx_List_SetCircularMode>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_SPI_MspInit+0x3ea>
      Error_Handler();
 800215a:	f7ff fc05 	bl	8001968 <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800215e:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 8002160:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <HAL_SPI_MspInit+0x488>)
 8002162:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800216a:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 800216c:	2200      	movs	r2, #0
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002170:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 800217e:	2281      	movs	r2, #129	@ 0x81
 8002180:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002182:	481d      	ldr	r0, [pc, #116]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 8002184:	f001 fcea 	bl	8003b5c <HAL_DMAEx_List_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_SPI_MspInit+0x41e>
      Error_Handler();
 800218e:	f7ff fbeb 	bl	8001968 <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002192:	4918      	ldr	r1, [pc, #96]	@ (80021f4 <HAL_SPI_MspInit+0x480>)
 8002194:	4818      	ldr	r0, [pc, #96]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 8002196:	f001 ff4d 	bl	8004034 <HAL_DMAEx_List_LinkQ>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_SPI_MspInit+0x430>
      Error_Handler();
 80021a0:	f7ff fbe2 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 80021a4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021a8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 80021b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80021b4:	4a10      	ldr	r2, [pc, #64]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 80021b6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021ba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80021c2:	2110      	movs	r1, #16
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <HAL_SPI_MspInit+0x484>)
 80021c6:	f001 fa0d 	bl	80035e4 <HAL_DMA_ConfigChannelAttributes>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	e017      	b.n	8002200 <HAL_SPI_MspInit+0x48c>
 80021d0:	40003800 	.word	0x40003800
 80021d4:	46020c00 	.word	0x46020c00
 80021d8:	42022000 	.word	0x42022000
 80021dc:	42020c00 	.word	0x42020c00
 80021e0:	20000358 	.word	0x20000358
 80021e4:	2000037c 	.word	0x2000037c
 80021e8:	20000394 	.word	0x20000394
 80021ec:	400200d0 	.word	0x400200d0
 80021f0:	2000040c 	.word	0x2000040c
 80021f4:	20000430 	.word	0x20000430
 80021f8:	20000448 	.word	0x20000448
 80021fc:	40020050 	.word	0x40020050
 8002200:	d001      	beq.n	8002206 <HAL_SPI_MspInit+0x492>
      Error_Handler();
 8002202:	f7ff fbb1 	bl	8001968 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	203c      	movs	r0, #60	@ 0x3c
 800220c:	f000 fd5a 	bl	8002cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002210:	203c      	movs	r0, #60	@ 0x3c
 8002212:	f000 fd71 	bl	8002cf8 <HAL_NVIC_EnableIRQ>
}
 8002216:	e0c1      	b.n	800239c <HAL_SPI_MspInit+0x628>
  else if(hspi->Instance==SPI3)
 8002218:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800221c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a60      	ldr	r2, [pc, #384]	@ (80023a8 <HAL_SPI_MspInit+0x634>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 80b8 	bne.w	800239c <HAL_SPI_MspInit+0x628>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800222c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002230:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8002234:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8002240:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002244:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002248:	2210      	movs	r2, #16
 800224a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002252:	4618      	mov	r0, r3
 8002254:	f005 f90e 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_SPI_MspInit+0x4ee>
      Error_Handler();
 800225e:	f7ff fb83 	bl	8001968 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002262:	4b52      	ldr	r3, [pc, #328]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 8002264:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002268:	4a50      	ldr	r2, [pc, #320]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 800226a:	f043 0320 	orr.w	r3, r3, #32
 800226e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002272:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 8002274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002278:	f003 0220 	and.w	r2, r3, #32
 800227c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002280:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800228a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800228e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 8002292:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002296:	4a45      	ldr	r2, [pc, #276]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 8002298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800229c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022a0:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 80022a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80022aa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022ae:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022b8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022bc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 80022c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022c4:	4a39      	ldr	r2, [pc, #228]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022ce:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 80022d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022d4:	f003 0201 	and.w	r2, r3, #1
 80022d8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022dc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022ea:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 80022ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f2:	4a2e      	ldr	r2, [pc, #184]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022fc:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <HAL_SPI_MspInit+0x638>)
 80022fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002302:	f003 0202 	and.w	r2, r3, #2
 8002306:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800230a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002314:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002318:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800231a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800231e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002328:	2301      	movs	r3, #1
 800232a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002334:	2306      	movs	r3, #6
 8002336:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800233a:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800233e:	4619      	mov	r1, r3
 8002340:	481b      	ldr	r0, [pc, #108]	@ (80023b0 <HAL_SPI_MspInit+0x63c>)
 8002342:	f002 faf3 	bl	800492c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800234a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002360:	2306      	movs	r3, #6
 8002362:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800236a:	4619      	mov	r1, r3
 800236c:	4811      	ldr	r0, [pc, #68]	@ (80023b4 <HAL_SPI_MspInit+0x640>)
 800236e:	f002 fadd 	bl	800492c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002372:	2330      	movs	r3, #48	@ 0x30
 8002374:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800238a:	2306      	movs	r3, #6
 800238c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8002394:	4619      	mov	r1, r3
 8002396:	4808      	ldr	r0, [pc, #32]	@ (80023b8 <HAL_SPI_MspInit+0x644>)
 8002398:	f002 fac8 	bl	800492c <HAL_GPIO_Init>
}
 800239c:	bf00      	nop
 800239e:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	46002000 	.word	0x46002000
 80023ac:	46020c00 	.word	0x46020c00
 80023b0:	42021800 	.word	0x42021800
 80023b4:	42020000 	.word	0x42020000
 80023b8:	42020400 	.word	0x42020400

080023bc <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a29      	ldr	r2, [pc, #164]	@ (8002470 <HAL_SPI_MspDeInit+0xb4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10c      	bne.n	80023e8 <HAL_SPI_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80023ce:	4b29      	ldr	r3, [pc, #164]	@ (8002474 <HAL_SPI_MspDeInit+0xb8>)
 80023d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023d4:	4a27      	ldr	r2, [pc, #156]	@ (8002474 <HAL_SPI_MspDeInit+0xb8>)
 80023d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023da:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2);
 80023de:	211c      	movs	r1, #28
 80023e0:	4825      	ldr	r0, [pc, #148]	@ (8002478 <HAL_SPI_MspDeInit+0xbc>)
 80023e2:	f002 fc83 	bl	8004cec <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80023e6:	e03f      	b.n	8002468 <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a23      	ldr	r2, [pc, #140]	@ (800247c <HAL_SPI_MspDeInit+0xc0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d11f      	bne.n	8002432 <HAL_SPI_MspDeInit+0x76>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_SPI_MspDeInit+0xb8>)
 80023f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002474 <HAL_SPI_MspDeInit+0xb8>)
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1|GPIO_PIN_3);
 8002402:	210a      	movs	r1, #10
 8002404:	481e      	ldr	r0, [pc, #120]	@ (8002480 <HAL_SPI_MspDeInit+0xc4>)
 8002406:	f002 fc71 	bl	8004cec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3);
 800240a:	2108      	movs	r1, #8
 800240c:	481d      	ldr	r0, [pc, #116]	@ (8002484 <HAL_SPI_MspDeInit+0xc8>)
 800240e:	f002 fc6d 	bl	8004cec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fe7f 	bl	800311c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fe79 	bl	800311c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800242a:	203c      	movs	r0, #60	@ 0x3c
 800242c:	f000 fc72 	bl	8002d14 <HAL_NVIC_DisableIRQ>
}
 8002430:	e01a      	b.n	8002468 <HAL_SPI_MspDeInit+0xac>
  else if(hspi->Instance==SPI3)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <HAL_SPI_MspDeInit+0xcc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d115      	bne.n	8002468 <HAL_SPI_MspDeInit+0xac>
    __HAL_RCC_SPI3_CLK_DISABLE();
 800243c:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <HAL_SPI_MspDeInit+0xb8>)
 800243e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002442:	4a0c      	ldr	r2, [pc, #48]	@ (8002474 <HAL_SPI_MspDeInit+0xb8>)
 8002444:	f023 0320 	bic.w	r3, r3, #32
 8002448:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800244c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002450:	4809      	ldr	r0, [pc, #36]	@ (8002478 <HAL_SPI_MspDeInit+0xbc>)
 8002452:	f002 fc4b 	bl	8004cec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8002456:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800245a:	480c      	ldr	r0, [pc, #48]	@ (800248c <HAL_SPI_MspDeInit+0xd0>)
 800245c:	f002 fc46 	bl	8004cec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4|GPIO_PIN_5);
 8002460:	2130      	movs	r1, #48	@ 0x30
 8002462:	480b      	ldr	r0, [pc, #44]	@ (8002490 <HAL_SPI_MspDeInit+0xd4>)
 8002464:	f002 fc42 	bl	8004cec <HAL_GPIO_DeInit>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40013000 	.word	0x40013000
 8002474:	46020c00 	.word	0x46020c00
 8002478:	42021800 	.word	0x42021800
 800247c:	40003800 	.word	0x40003800
 8002480:	42022000 	.word	0x42022000
 8002484:	42020c00 	.word	0x42020c00
 8002488:	46002000 	.word	0x46002000
 800248c:	42020000 	.word	0x42020000
 8002490:	42020400 	.word	0x42020400

08002494 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0c0      	sub	sp, #256	@ 0x100
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ac:	f107 0320 	add.w	r3, r7, #32
 80024b0:	22c8      	movs	r2, #200	@ 0xc8
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f009 fc25 	bl	800bd04 <memset>
  if(huart->Instance==USART2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5e      	ldr	r2, [pc, #376]	@ (8002638 <HAL_UART_MspInit+0x1a4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d145      	bne.n	8002550 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024c4:	f04f 0202 	mov.w	r2, #2
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 ffcb 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80024e4:	f7ff fa40 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024e8:	4b54      	ldr	r3, [pc, #336]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80024ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024ee:	4a53      	ldr	r2, [pc, #332]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80024f8:	4b50      	ldr	r3, [pc, #320]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80024fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002506:	4b4d      	ldr	r3, [pc, #308]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 8002508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800250c:	4a4b      	ldr	r2, [pc, #300]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002516:	4b49      	ldr	r3, [pc, #292]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 8002518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 8002524:	2370      	movs	r3, #112	@ 0x70
 8002526:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800253c:	2307      	movs	r3, #7
 800253e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002542:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002546:	4619      	mov	r1, r3
 8002548:	483d      	ldr	r0, [pc, #244]	@ (8002640 <HAL_UART_MspInit+0x1ac>)
 800254a:	f002 f9ef 	bl	800492c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800254e:	e06e      	b.n	800262e <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3b      	ldr	r2, [pc, #236]	@ (8002644 <HAL_UART_MspInit+0x1b0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d169      	bne.n	800262e <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800255a:	f04f 0204 	mov.w	r2, #4
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002566:	2300      	movs	r3, #0
 8002568:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256a:	f107 0320 	add.w	r3, r7, #32
 800256e:	4618      	mov	r0, r3
 8002570:	f004 ff80 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_UART_MspInit+0xea>
      Error_Handler();
 800257a:	f7ff f9f5 	bl	8001968 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800257e:	4b2f      	ldr	r3, [pc, #188]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 8002580:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002584:	4a2d      	ldr	r2, [pc, #180]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 8002586:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800258e:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 8002590:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	4b27      	ldr	r3, [pc, #156]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 800259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a2:	4a26      	ldr	r2, [pc, #152]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80025ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80025bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025c0:	4a1e      	ldr	r2, [pc, #120]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025ca:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <HAL_UART_MspInit+0x1a8>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80025d8:	23a0      	movs	r3, #160	@ 0xa0
 80025da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025f0:	2307      	movs	r3, #7
 80025f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80025fa:	4619      	mov	r1, r3
 80025fc:	4812      	ldr	r0, [pc, #72]	@ (8002648 <HAL_UART_MspInit+0x1b4>)
 80025fe:	f002 f995 	bl	800492c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002602:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002606:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800261c:	2307      	movs	r3, #7
 800261e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002622:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	@ (8002640 <HAL_UART_MspInit+0x1ac>)
 800262a:	f002 f97f 	bl	800492c <HAL_GPIO_Init>
}
 800262e:	bf00      	nop
 8002630:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40004400 	.word	0x40004400
 800263c:	46020c00 	.word	0x46020c00
 8002640:	42020c00 	.word	0x42020c00
 8002644:	40004800 	.word	0x40004800
 8002648:	42020000 	.word	0x42020000

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <NMI_Handler+0x4>

08002654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <HardFault_Handler+0x4>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <MemManage_Handler+0x4>

08002664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <UsageFault_Handler+0x4>

08002674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a2:	f000 f9ef 	bl	8002a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}

080026aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f002 fc12 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 80026bc:	2002      	movs	r0, #2
 80026be:	f002 fc0b 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 80026ca:	2004      	movs	r0, #4
 80026cc:	f002 fc04 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 80026d8:	2008      	movs	r0, #8
 80026da:	f002 fbfd 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 80026e6:	2010      	movs	r0, #16
 80026e8:	f002 fbf6 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 80026f4:	2020      	movs	r0, #32
 80026f6:	f002 fbef 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}

080026fe <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8002702:	2040      	movs	r0, #64	@ 0x40
 8002704:	f002 fbe8 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8002710:	2080      	movs	r0, #128	@ 0x80
 8002712:	f002 fbe1 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}

0800271a <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 800271e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002722:	f002 fbd9 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}

0800272a <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 800272e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002732:	f002 fbd1 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 800273e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002742:	f002 fbc9 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}

0800274a <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 800274e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002752:	f002 fbc1 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}

0800275a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 800275e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002762:	f002 fbb9 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}

0800276a <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 800276e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002772:	f002 fbb1 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002782:	f000 fdce 	bl	8003322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000448 	.word	0x20000448

08002790 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002796:	f000 fdc4 	bl	8003322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000394 	.word	0x20000394

080027a4 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <GPDMA1_Channel2_IRQHandler+0x10>)
 80027aa:	f000 fdba 	bl	8003322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000250 	.word	0x20000250

080027b8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <GPDMA1_Channel3_IRQHandler+0x10>)
 80027be:	f000 fdb0 	bl	8003322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200001d8 	.word	0x200001d8

080027cc <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <GPDMA1_Channel4_IRQHandler+0x10>)
 80027d2:	f000 fda6 	bl	8003322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000010c 	.word	0x2000010c

080027e0 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <GPDMA1_Channel5_IRQHandler+0x10>)
 80027e6:	f000 fd9c 	bl	8003322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000094 	.word	0x20000094

080027f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <SPI2_IRQHandler+0x10>)
 80027fa:	f008 f951 	bl	800aaa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200002c8 	.word	0x200002c8

08002808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <_sbrk+0x5c>)
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <_sbrk+0x60>)
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <_sbrk+0x64>)
 8002826:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <_sbrk+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d207      	bcs.n	8002848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002838:	f009 fa6c 	bl	800bd14 <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e009      	b.n	800285c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a05      	ldr	r2, [pc, #20]	@ (800286c <_sbrk+0x64>)
 8002858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200c0000 	.word	0x200c0000
 8002868:	00000400 	.word	0x00000400
 800286c:	20000554 	.word	0x20000554
 8002870:	200006a8 	.word	0x200006a8

08002874 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002878:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <SystemInit+0x68>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	4a17      	ldr	r2, [pc, #92]	@ (80028dc <SystemInit+0x68>)
 8002880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <SystemInit+0x6c>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <SystemInit+0x6c>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <SystemInit+0x6c>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <SystemInit+0x6c>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <SystemInit+0x6c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	@ (80028e0 <SystemInit+0x6c>)
 80028a6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80028aa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80028ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <SystemInit+0x6c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <SystemInit+0x6c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <SystemInit+0x6c>)
 80028bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80028c2:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <SystemInit+0x6c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028c8:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <SystemInit+0x68>)
 80028ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028ce:	609a      	str	r2, [r3, #8]
  #endif
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00
 80028e0:	46020c00 	.word	0x46020c00

080028e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80028e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800291c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028e8:	f7ff ffc4 	bl	8002874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028ee:	e003      	b.n	80028f8 <LoopCopyDataInit>

080028f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80028f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80028f6:	3104      	adds	r1, #4

080028f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80028f8:	480a      	ldr	r0, [pc, #40]	@ (8002924 <LoopForever+0xa>)
	ldr	r3, =_edata
 80028fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <LoopForever+0xe>)
	adds	r2, r0, r1
 80028fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80028fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002900:	d3f6      	bcc.n	80028f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002904:	e002      	b.n	800290c <LoopFillZerobss>

08002906 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002906:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002908:	f842 3b04 	str.w	r3, [r2], #4

0800290c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <LoopForever+0x16>)
	cmp	r2, r3
 800290e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002910:	d3f9      	bcc.n	8002906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002912:	f009 fa05 	bl	800bd20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002916:	f7fd ffd7 	bl	80008c8 <main>

0800291a <LoopForever>:

LoopForever:
    b LoopForever
 800291a:	e7fe      	b.n	800291a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800291c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002920:	0800cc70 	.word	0x0800cc70
	ldr	r0, =_sdata
 8002924:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002928:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 800292c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8002930:	200006a4 	.word	0x200006a4

08002934 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC1_IRQHandler>
	...

08002938 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_Init+0x50>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a11      	ldr	r2, [pc, #68]	@ (8002988 <HAL_Init+0x50>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002948:	2003      	movs	r0, #3
 800294a:	f000 f9b0 	bl	8002cae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800294e:	f004 fbb3 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <HAL_Init+0x54>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	490c      	ldr	r1, [pc, #48]	@ (8002990 <HAL_Init+0x58>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_Init+0x5c>)
 8002966:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002968:	2004      	movs	r0, #4
 800296a:	f000 fa03 	bl	8002d74 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800296e:	200f      	movs	r0, #15
 8002970:	f000 f812 	bl	8002998 <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e002      	b.n	8002984 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800297e:	f7fe fff9 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40022000 	.word	0x40022000
 800298c:	46020c00 	.word	0x46020c00
 8002990:	0800caf4 	.word	0x0800caf4
 8002994:	2000001c 	.word	0x2000001c

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <HAL_InitTick+0xdc>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e05c      	b.n	8002a6a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80029b0:	4b31      	ldr	r3, [pc, #196]	@ (8002a78 <HAL_InitTick+0xe0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d10c      	bne.n	80029d6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80029bc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <HAL_InitTick+0xe4>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <HAL_InitTick+0xdc>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	e037      	b.n	8002a46 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80029d6:	f000 fa25 	bl	8002e24 <HAL_SYSTICK_GetCLKSourceConfig>
 80029da:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d023      	beq.n	8002a2a <HAL_InitTick+0x92>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d82d      	bhi.n	8002a44 <HAL_InitTick+0xac>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_InitTick+0x5e>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d00d      	beq.n	8002a10 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80029f4:	e026      	b.n	8002a44 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80029f6:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <HAL_InitTick+0xe4>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <HAL_InitTick+0xdc>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002a04:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	60fb      	str	r3, [r7, #12]
        break;
 8002a0e:	e01a      	b.n	8002a46 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002a10:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <HAL_InitTick+0xdc>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a1e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	60fb      	str	r3, [r7, #12]
        break;
 8002a28:	e00d      	b.n	8002a46 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_InitTick+0xdc>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	60fb      	str	r3, [r7, #12]
        break;
 8002a42:	e000      	b.n	8002a46 <HAL_InitTick+0xae>
        break;
 8002a44:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f972 	bl	8002d30 <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e009      	b.n	8002a6a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a56:	2200      	movs	r2, #0
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5e:	f000 f931 	bl	8002cc4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002a62:	4a07      	ldr	r2, [pc, #28]	@ (8002a80 <HAL_InitTick+0xe8>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000024 	.word	0x20000024
 8002a78:	e000e010 	.word	0xe000e010
 8002a7c:	2000001c 	.word	0x2000001c
 8002a80:	20000020 	.word	0x20000020

08002a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000024 	.word	0x20000024
 8002aa8:	20000558 	.word	0x20000558

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000558 	.word	0x20000558

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <HAL_Delay+0x44>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000024 	.word	0x20000024

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	@ (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	db12      	blt.n	8002be4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	490a      	ldr	r1, [pc, #40]	@ (8002bf0 <__NVIC_DisableIRQ+0x44>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2001      	movs	r0, #1
 8002bce:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd2:	3320      	adds	r3, #32
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd8:	f3bf 8f4f 	dsb	sy
}
 8002bdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bde:	f3bf 8f6f 	isb	sy
}
 8002be2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	@ (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	@ (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	@ 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
         );
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ff28 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd2:	f7ff ff3f 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	6978      	ldr	r0, [r7, #20]
 8002cde:	f7ff ffb3 	bl	8002c48 <NVIC_EncodePriority>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff82 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff32 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff42 	bl	8002bac <__NVIC_DisableIRQ>
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00d      	b.n	8002d62 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <HAL_SYSTICK_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <HAL_SYSTICK_Config+0x40>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_SYSTICK_Config+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a05      	ldr	r2, [pc, #20]	@ (8002d70 <HAL_SYSTICK_Config+0x40>)
 8002d5a:	f043 0303 	orr.w	r3, r3, #3
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d844      	bhi.n	8002e0c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002d82:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002dab 	.word	0x08002dab
 8002d8c:	08002dc9 	.word	0x08002dc9
 8002d90:	08002deb 	.word	0x08002deb
 8002d94:	08002e0d 	.word	0x08002e0d
 8002d98:	08002d9d 	.word	0x08002d9d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6013      	str	r3, [r2, #0]
      break;
 8002da8:	e031      	b.n	8002e0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002daa:	4b1c      	ldr	r3, [pc, #112]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1b      	ldr	r2, [pc, #108]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002db6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbc:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dbe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002dc6:	e022      	b.n	8002e0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002dc8:	4b14      	ldr	r3, [pc, #80]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a13      	ldr	r2, [pc, #76]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002dd4:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dda:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002dde:	4a10      	ldr	r2, [pc, #64]	@ (8002e20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002de0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002de8:	e011      	b.n	8002e0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002dea:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a0b      	ldr	r2, [pc, #44]	@ (8002e1c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e00:	4a07      	ldr	r2, [pc, #28]	@ (8002e20 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e0a:	e000      	b.n	8002e0e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002e0c:	bf00      	nop
  }
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e010 	.word	0xe000e010
 8002e20:	46020c00 	.word	0x46020c00

08002e24 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002e2a:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002e36:	2304      	movs	r3, #4
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	e021      	b.n	8002e80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002e3c:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002e46:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e4e:	d011      	beq.n	8002e74 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e56:	d810      	bhi.n	8002e7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e64:	d003      	beq.n	8002e6e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002e66:	e008      	b.n	8002e7a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
        break;
 8002e6c:	e008      	b.n	8002e80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
        break;
 8002e72:	e005      	b.n	8002e80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002e74:	2302      	movs	r3, #2
 8002e76:	607b      	str	r3, [r7, #4]
        break;
 8002e78:	e002      	b.n	8002e80 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
        break;
 8002e7e:	bf00      	nop
    }
  }
  return systick_source;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010
 8002e94:	46020c00 	.word	0x46020c00

08002e98 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff fe04 	bl	8002aac <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0f0      	b.n	8003092 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a79      	ldr	r2, [pc, #484]	@ (800309c <HAL_DMA_Init+0x204>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	f000 809f 	beq.w	8002ffa <HAL_DMA_Init+0x162>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a77      	ldr	r2, [pc, #476]	@ (80030a0 <HAL_DMA_Init+0x208>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	f000 8099 	beq.w	8002ffa <HAL_DMA_Init+0x162>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a75      	ldr	r2, [pc, #468]	@ (80030a4 <HAL_DMA_Init+0x20c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	f000 8093 	beq.w	8002ffa <HAL_DMA_Init+0x162>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a73      	ldr	r2, [pc, #460]	@ (80030a8 <HAL_DMA_Init+0x210>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	f000 808d 	beq.w	8002ffa <HAL_DMA_Init+0x162>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a71      	ldr	r2, [pc, #452]	@ (80030ac <HAL_DMA_Init+0x214>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f000 8087 	beq.w	8002ffa <HAL_DMA_Init+0x162>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a6f      	ldr	r2, [pc, #444]	@ (80030b0 <HAL_DMA_Init+0x218>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	f000 8081 	beq.w	8002ffa <HAL_DMA_Init+0x162>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a6d      	ldr	r2, [pc, #436]	@ (80030b4 <HAL_DMA_Init+0x21c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d07b      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6c      	ldr	r2, [pc, #432]	@ (80030b8 <HAL_DMA_Init+0x220>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d076      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	@ (80030bc <HAL_DMA_Init+0x224>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d071      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a69      	ldr	r2, [pc, #420]	@ (80030c0 <HAL_DMA_Init+0x228>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d06c      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a67      	ldr	r2, [pc, #412]	@ (80030c4 <HAL_DMA_Init+0x22c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d067      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a66      	ldr	r2, [pc, #408]	@ (80030c8 <HAL_DMA_Init+0x230>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d062      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a64      	ldr	r2, [pc, #400]	@ (80030cc <HAL_DMA_Init+0x234>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d05d      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a63      	ldr	r2, [pc, #396]	@ (80030d0 <HAL_DMA_Init+0x238>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d058      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a61      	ldr	r2, [pc, #388]	@ (80030d4 <HAL_DMA_Init+0x23c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d053      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a60      	ldr	r2, [pc, #384]	@ (80030d8 <HAL_DMA_Init+0x240>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d04e      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5e      	ldr	r2, [pc, #376]	@ (80030dc <HAL_DMA_Init+0x244>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d049      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80030e0 <HAL_DMA_Init+0x248>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d044      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5b      	ldr	r2, [pc, #364]	@ (80030e4 <HAL_DMA_Init+0x24c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d03f      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80030e8 <HAL_DMA_Init+0x250>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03a      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a58      	ldr	r2, [pc, #352]	@ (80030ec <HAL_DMA_Init+0x254>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d035      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a57      	ldr	r2, [pc, #348]	@ (80030f0 <HAL_DMA_Init+0x258>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d030      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a55      	ldr	r2, [pc, #340]	@ (80030f4 <HAL_DMA_Init+0x25c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02b      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a54      	ldr	r2, [pc, #336]	@ (80030f8 <HAL_DMA_Init+0x260>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d026      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_DMA_Init+0x264>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d021      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a51      	ldr	r2, [pc, #324]	@ (8003100 <HAL_DMA_Init+0x268>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01c      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003104 <HAL_DMA_Init+0x26c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d017      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4e      	ldr	r2, [pc, #312]	@ (8003108 <HAL_DMA_Init+0x270>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d012      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800310c <HAL_DMA_Init+0x274>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4b      	ldr	r2, [pc, #300]	@ (8003110 <HAL_DMA_Init+0x278>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d008      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a49      	ldr	r2, [pc, #292]	@ (8003114 <HAL_DMA_Init+0x27c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <HAL_DMA_Init+0x162>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a48      	ldr	r2, [pc, #288]	@ (8003118 <HAL_DMA_Init+0x280>)
 8002ff8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10e      	bne.n	800302c <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0206 	orr.w	r2, r2, #6
 8003042:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003044:	e00f      	b.n	8003066 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003046:	f7ff fd31 	bl	8002aac <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b05      	cmp	r3, #5
 8003052:	d908      	bls.n	8003066 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2210      	movs	r2, #16
 8003058:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e015      	b.n	8003092 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e8      	bne.n	8003046 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 faf1 	bl	800365c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40020050 	.word	0x40020050
 80030a0:	50020050 	.word	0x50020050
 80030a4:	400200d0 	.word	0x400200d0
 80030a8:	500200d0 	.word	0x500200d0
 80030ac:	40020150 	.word	0x40020150
 80030b0:	50020150 	.word	0x50020150
 80030b4:	400201d0 	.word	0x400201d0
 80030b8:	500201d0 	.word	0x500201d0
 80030bc:	40020250 	.word	0x40020250
 80030c0:	50020250 	.word	0x50020250
 80030c4:	400202d0 	.word	0x400202d0
 80030c8:	500202d0 	.word	0x500202d0
 80030cc:	40020350 	.word	0x40020350
 80030d0:	50020350 	.word	0x50020350
 80030d4:	400203d0 	.word	0x400203d0
 80030d8:	500203d0 	.word	0x500203d0
 80030dc:	40020450 	.word	0x40020450
 80030e0:	50020450 	.word	0x50020450
 80030e4:	400204d0 	.word	0x400204d0
 80030e8:	500204d0 	.word	0x500204d0
 80030ec:	40020550 	.word	0x40020550
 80030f0:	50020550 	.word	0x50020550
 80030f4:	400205d0 	.word	0x400205d0
 80030f8:	500205d0 	.word	0x500205d0
 80030fc:	40020650 	.word	0x40020650
 8003100:	50020650 	.word	0x50020650
 8003104:	400206d0 	.word	0x400206d0
 8003108:	500206d0 	.word	0x500206d0
 800310c:	40020750 	.word	0x40020750
 8003110:	50020750 	.word	0x50020750
 8003114:	400207d0 	.word	0x400207d0
 8003118:	500207d0 	.word	0x500207d0

0800311c <HAL_DMA_DeInit>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *const hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  DMA_TypeDef *p_dma_instance;

  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff fcc2 	bl	8002aac <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_DMA_DeInit+0x18>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b9      	b.n	80032a8 <HAL_DMA_DeInit+0x18c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800313c:	f023 030f 	bic.w	r3, r3, #15
 8003140:	60bb      	str	r3, [r7, #8]

  /* Disable the selected DMA Channel */
  __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0206 	orr.w	r2, r2, #6
 8003150:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003152:	e00f      	b.n	8003174 <HAL_DMA_DeInit+0x58>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003154:	f7ff fcaa 	bl	8002aac <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b05      	cmp	r3, #5
 8003160:	d908      	bls.n	8003174 <HAL_DMA_DeInit+0x58>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2210      	movs	r2, #16
 8003166:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2203      	movs	r2, #3
 800316c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e099      	b.n	80032a8 <HAL_DMA_DeInit+0x18c>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e8      	bne.n	8003154 <HAL_DMA_DeInit+0x38>
    }
  }

  /* Reset DMA Channel registers */
  hdma->Instance->CLBAR = 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
  hdma->Instance->CCR   = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	615a      	str	r2, [r3, #20]
  hdma->Instance->CTR1  = 0U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->Instance->CTR2  = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->Instance->CBR1  = 0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->Instance->CSAR  = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->Instance->CDAR  = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->Instance->CLLR  = 0U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Reset 2D Addressing registers */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3a      	ldr	r2, [pc, #232]	@ (80032b0 <HAL_DMA_DeInit+0x194>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_DeInit+0xf6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a38      	ldr	r2, [pc, #224]	@ (80032b4 <HAL_DMA_DeInit+0x198>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <HAL_DMA_DeInit+0xf6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a37      	ldr	r2, [pc, #220]	@ (80032b8 <HAL_DMA_DeInit+0x19c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_DMA_DeInit+0xf6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a35      	ldr	r2, [pc, #212]	@ (80032bc <HAL_DMA_DeInit+0x1a0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_DMA_DeInit+0xf6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a34      	ldr	r2, [pc, #208]	@ (80032c0 <HAL_DMA_DeInit+0x1a4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_DMA_DeInit+0xf6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a32      	ldr	r2, [pc, #200]	@ (80032c4 <HAL_DMA_DeInit+0x1a8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_DMA_DeInit+0xf6>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a31      	ldr	r2, [pc, #196]	@ (80032c8 <HAL_DMA_DeInit+0x1ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_DeInit+0xf6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2f      	ldr	r2, [pc, #188]	@ (80032cc <HAL_DMA_DeInit+0x1b0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_DMA_DeInit+0xfa>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_DMA_DeInit+0xfc>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_DMA_DeInit+0x110>
  {
    hdma->Instance->CTR3 = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->Instance->CBR2 = 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear privilege attribute */
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	3b50      	subs	r3, #80	@ 0x50
 800323a:	09db      	lsrs	r3, r3, #7
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2101      	movs	r1, #1
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	401a      	ands	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	605a      	str	r2, [r3, #4]
  /* Clear secure attribute */
  CLEAR_BIT(p_dma_instance->SECCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003256:	60da      	str	r2, [r3, #12]
                              DMA_FLAG_TO));

  /* Clean all callbacks */
  hdma->XferCpltCallback     = NULL;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	661a      	str	r2, [r3, #96]	@ 0x60
  hdma->XferHalfCpltCallback = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	665a      	str	r2, [r3, #100]	@ 0x64
  hdma->XferErrorCallback    = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	669a      	str	r2, [r3, #104]	@ 0x68
  hdma->XferAbortCallback    = NULL;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hdma->XferSuspendCallback  = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Clean DMA queue */
  hdma->LinkedListQueue = NULL;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Clean DMA parent */
  if (hdma->Parent != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_DMA_DeInit+0x16e>
  {
    hdma->Parent = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Update DMA channel operation mode */
  hdma->Mode = DMA_NORMAL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40020650 	.word	0x40020650
 80032b4:	50020650 	.word	0x50020650
 80032b8:	400206d0 	.word	0x400206d0
 80032bc:	500206d0 	.word	0x500206d0
 80032c0:	40020750 	.word	0x40020750
 80032c4:	50020750 	.word	0x50020750
 80032c8:	400207d0 	.word	0x400207d0
 80032cc:	500207d0 	.word	0x500207d0

080032d0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e019      	b.n	8003316 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00e      	b.n	8003316 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2204      	movs	r2, #4
 80032fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	3b50      	subs	r3, #80	@ 0x50
 8003342:	09db      	lsrs	r3, r3, #7
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2201      	movs	r2, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 813b 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d011      	beq.n	8003394 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003386:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d011      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033b8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d011      	beq.n	80033f8 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033ea:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	f043 0204 	orr.w	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800341c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	f043 0208 	orr.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d04c      	beq.n	8003508 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d045      	beq.n	8003508 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003484:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b04      	cmp	r3, #4
 8003490:	d12e      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034a0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0202 	orr.w	r2, r2, #2
 80034b0:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ca:	2201      	movs	r2, #1
 80034cc:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2200      	movs	r2, #0
 80034d4:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d07a      	beq.n	80035dc <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
        }

        return;
 80034ee:	e075      	b.n	80035dc <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2205      	movs	r2, #5
 80034f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d039      	beq.n	800358a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d032      	beq.n	800358a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d012      	beq.n	8003556 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003540:	2b00      	cmp	r3, #0
 8003542:	d111      	bne.n	8003568 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003550:	2201      	movs	r2, #1
 8003552:	731a      	strb	r2, [r3, #12]
 8003554:	e008      	b.n	8003568 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003570:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358e:	2b00      	cmp	r3, #0
 8003590:	d025      	beq.n	80035de <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0202 	orr.w	r2, r2, #2
 80035a0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ba:	2201      	movs	r2, #1
 80035bc:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
 80035d6:	e002      	b.n	80035de <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_DMA_IRQHandler+0x2bc>
        return;
 80035dc:	bf00      	nop
    }
  }
}
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e02b      	b.n	8003650 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003600:	f023 030f 	bic.w	r3, r3, #15
 8003604:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	3b50      	subs	r3, #80	@ 0x50
 8003610:	09db      	lsrs	r3, r3, #7
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2201      	movs	r2, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f003 0311 	and.w	r3, r3, #17
 800362e:	2b11      	cmp	r3, #17
 8003630:	d106      	bne.n	8003640 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e006      	b.n	800364e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	430a      	orrs	r2, r1
 800367c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a53      	ldr	r2, [pc, #332]	@ (80037e8 <DMA_Init+0x18c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	f000 80a0 	beq.w	80037e2 <DMA_Init+0x186>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a51      	ldr	r2, [pc, #324]	@ (80037ec <DMA_Init+0x190>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	f000 809a 	beq.w	80037e2 <DMA_Init+0x186>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4f      	ldr	r2, [pc, #316]	@ (80037f0 <DMA_Init+0x194>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	f000 8094 	beq.w	80037e2 <DMA_Init+0x186>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a4d      	ldr	r2, [pc, #308]	@ (80037f4 <DMA_Init+0x198>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	f000 808e 	beq.w	80037e2 <DMA_Init+0x186>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a4b      	ldr	r2, [pc, #300]	@ (80037f8 <DMA_Init+0x19c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	f000 8088 	beq.w	80037e2 <DMA_Init+0x186>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a49      	ldr	r2, [pc, #292]	@ (80037fc <DMA_Init+0x1a0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	f000 8082 	beq.w	80037e2 <DMA_Init+0x186>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a47      	ldr	r2, [pc, #284]	@ (8003800 <DMA_Init+0x1a4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d07c      	beq.n	80037e2 <DMA_Init+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a45      	ldr	r2, [pc, #276]	@ (8003804 <DMA_Init+0x1a8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d077      	beq.n	80037e2 <DMA_Init+0x186>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a44      	ldr	r2, [pc, #272]	@ (8003808 <DMA_Init+0x1ac>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d072      	beq.n	80037e2 <DMA_Init+0x186>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a42      	ldr	r2, [pc, #264]	@ (800380c <DMA_Init+0x1b0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d06d      	beq.n	80037e2 <DMA_Init+0x186>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a41      	ldr	r2, [pc, #260]	@ (8003810 <DMA_Init+0x1b4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d068      	beq.n	80037e2 <DMA_Init+0x186>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3f      	ldr	r2, [pc, #252]	@ (8003814 <DMA_Init+0x1b8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d063      	beq.n	80037e2 <DMA_Init+0x186>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3e      	ldr	r2, [pc, #248]	@ (8003818 <DMA_Init+0x1bc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d05e      	beq.n	80037e2 <DMA_Init+0x186>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3c      	ldr	r2, [pc, #240]	@ (800381c <DMA_Init+0x1c0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d059      	beq.n	80037e2 <DMA_Init+0x186>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3b      	ldr	r2, [pc, #236]	@ (8003820 <DMA_Init+0x1c4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d054      	beq.n	80037e2 <DMA_Init+0x186>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a39      	ldr	r2, [pc, #228]	@ (8003824 <DMA_Init+0x1c8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d04f      	beq.n	80037e2 <DMA_Init+0x186>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a38      	ldr	r2, [pc, #224]	@ (8003828 <DMA_Init+0x1cc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d04a      	beq.n	80037e2 <DMA_Init+0x186>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a36      	ldr	r2, [pc, #216]	@ (800382c <DMA_Init+0x1d0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d045      	beq.n	80037e2 <DMA_Init+0x186>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a35      	ldr	r2, [pc, #212]	@ (8003830 <DMA_Init+0x1d4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d040      	beq.n	80037e2 <DMA_Init+0x186>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a33      	ldr	r2, [pc, #204]	@ (8003834 <DMA_Init+0x1d8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d03b      	beq.n	80037e2 <DMA_Init+0x186>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a32      	ldr	r2, [pc, #200]	@ (8003838 <DMA_Init+0x1dc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d036      	beq.n	80037e2 <DMA_Init+0x186>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a30      	ldr	r2, [pc, #192]	@ (800383c <DMA_Init+0x1e0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d031      	beq.n	80037e2 <DMA_Init+0x186>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2f      	ldr	r2, [pc, #188]	@ (8003840 <DMA_Init+0x1e4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d02c      	beq.n	80037e2 <DMA_Init+0x186>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2d      	ldr	r2, [pc, #180]	@ (8003844 <DMA_Init+0x1e8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d027      	beq.n	80037e2 <DMA_Init+0x186>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2c      	ldr	r2, [pc, #176]	@ (8003848 <DMA_Init+0x1ec>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d022      	beq.n	80037e2 <DMA_Init+0x186>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	@ (800384c <DMA_Init+0x1f0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01d      	beq.n	80037e2 <DMA_Init+0x186>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a29      	ldr	r2, [pc, #164]	@ (8003850 <DMA_Init+0x1f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d018      	beq.n	80037e2 <DMA_Init+0x186>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a27      	ldr	r2, [pc, #156]	@ (8003854 <DMA_Init+0x1f8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <DMA_Init+0x186>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a26      	ldr	r2, [pc, #152]	@ (8003858 <DMA_Init+0x1fc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <DMA_Init+0x186>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a24      	ldr	r2, [pc, #144]	@ (800385c <DMA_Init+0x200>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <DMA_Init+0x186>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a23      	ldr	r2, [pc, #140]	@ (8003860 <DMA_Init+0x204>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <DMA_Init+0x186>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a21      	ldr	r2, [pc, #132]	@ (8003864 <DMA_Init+0x208>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d142      	bne.n	8003868 <DMA_Init+0x20c>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <DMA_Init+0x20e>
 80037e6:	bf00      	nop
 80037e8:	40020050 	.word	0x40020050
 80037ec:	50020050 	.word	0x50020050
 80037f0:	400200d0 	.word	0x400200d0
 80037f4:	500200d0 	.word	0x500200d0
 80037f8:	40020150 	.word	0x40020150
 80037fc:	50020150 	.word	0x50020150
 8003800:	400201d0 	.word	0x400201d0
 8003804:	500201d0 	.word	0x500201d0
 8003808:	40020250 	.word	0x40020250
 800380c:	50020250 	.word	0x50020250
 8003810:	400202d0 	.word	0x400202d0
 8003814:	500202d0 	.word	0x500202d0
 8003818:	40020350 	.word	0x40020350
 800381c:	50020350 	.word	0x50020350
 8003820:	400203d0 	.word	0x400203d0
 8003824:	500203d0 	.word	0x500203d0
 8003828:	40020450 	.word	0x40020450
 800382c:	50020450 	.word	0x50020450
 8003830:	400204d0 	.word	0x400204d0
 8003834:	500204d0 	.word	0x500204d0
 8003838:	40020550 	.word	0x40020550
 800383c:	50020550 	.word	0x50020550
 8003840:	400205d0 	.word	0x400205d0
 8003844:	500205d0 	.word	0x500205d0
 8003848:	40020650 	.word	0x40020650
 800384c:	50020650 	.word	0x50020650
 8003850:	400206d0 	.word	0x400206d0
 8003854:	500206d0 	.word	0x500206d0
 8003858:	40020750 	.word	0x40020750
 800385c:	50020750 	.word	0x50020750
 8003860:	400207d0 	.word	0x400207d0
 8003864:	500207d0 	.word	0x500207d0
 8003868:	2300      	movs	r3, #0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d012      	beq.n	8003894 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	3b01      	subs	r3, #1
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800387e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	3b01      	subs	r3, #1
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800388c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	f040 80b0 	bne.w	8003a2a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a82      	ldr	r2, [pc, #520]	@ (8003ad8 <DMA_Init+0x47c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	f000 80a0 	beq.w	8003a16 <DMA_Init+0x3ba>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a80      	ldr	r2, [pc, #512]	@ (8003adc <DMA_Init+0x480>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	f000 809a 	beq.w	8003a16 <DMA_Init+0x3ba>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ae0 <DMA_Init+0x484>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	f000 8094 	beq.w	8003a16 <DMA_Init+0x3ba>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae4 <DMA_Init+0x488>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	f000 808e 	beq.w	8003a16 <DMA_Init+0x3ba>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a7a      	ldr	r2, [pc, #488]	@ (8003ae8 <DMA_Init+0x48c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	f000 8088 	beq.w	8003a16 <DMA_Init+0x3ba>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a78      	ldr	r2, [pc, #480]	@ (8003aec <DMA_Init+0x490>)
 800390c:	4293      	cmp	r3, r2
 800390e:	f000 8082 	beq.w	8003a16 <DMA_Init+0x3ba>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a76      	ldr	r2, [pc, #472]	@ (8003af0 <DMA_Init+0x494>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d07c      	beq.n	8003a16 <DMA_Init+0x3ba>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a74      	ldr	r2, [pc, #464]	@ (8003af4 <DMA_Init+0x498>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d077      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a73      	ldr	r2, [pc, #460]	@ (8003af8 <DMA_Init+0x49c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d072      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a71      	ldr	r2, [pc, #452]	@ (8003afc <DMA_Init+0x4a0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d06d      	beq.n	8003a16 <DMA_Init+0x3ba>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a70      	ldr	r2, [pc, #448]	@ (8003b00 <DMA_Init+0x4a4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d068      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a6e      	ldr	r2, [pc, #440]	@ (8003b04 <DMA_Init+0x4a8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d063      	beq.n	8003a16 <DMA_Init+0x3ba>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6d      	ldr	r2, [pc, #436]	@ (8003b08 <DMA_Init+0x4ac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d05e      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b0c <DMA_Init+0x4b0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d059      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6a      	ldr	r2, [pc, #424]	@ (8003b10 <DMA_Init+0x4b4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d054      	beq.n	8003a16 <DMA_Init+0x3ba>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a68      	ldr	r2, [pc, #416]	@ (8003b14 <DMA_Init+0x4b8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d04f      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a67      	ldr	r2, [pc, #412]	@ (8003b18 <DMA_Init+0x4bc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d04a      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a65      	ldr	r2, [pc, #404]	@ (8003b1c <DMA_Init+0x4c0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d045      	beq.n	8003a16 <DMA_Init+0x3ba>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a64      	ldr	r2, [pc, #400]	@ (8003b20 <DMA_Init+0x4c4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d040      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a62      	ldr	r2, [pc, #392]	@ (8003b24 <DMA_Init+0x4c8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d03b      	beq.n	8003a16 <DMA_Init+0x3ba>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a61      	ldr	r2, [pc, #388]	@ (8003b28 <DMA_Init+0x4cc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d036      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5f      	ldr	r2, [pc, #380]	@ (8003b2c <DMA_Init+0x4d0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d031      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b30 <DMA_Init+0x4d4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d02c      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003b34 <DMA_Init+0x4d8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d027      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003b38 <DMA_Init+0x4dc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d022      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a59      	ldr	r2, [pc, #356]	@ (8003b3c <DMA_Init+0x4e0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01d      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a58      	ldr	r2, [pc, #352]	@ (8003b40 <DMA_Init+0x4e4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d018      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a56      	ldr	r2, [pc, #344]	@ (8003b44 <DMA_Init+0x4e8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a55      	ldr	r2, [pc, #340]	@ (8003b48 <DMA_Init+0x4ec>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <DMA_Init+0x3ba>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a53      	ldr	r2, [pc, #332]	@ (8003b4c <DMA_Init+0x4f0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d009      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <DMA_Init+0x4f4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <DMA_Init+0x3ba>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a50      	ldr	r2, [pc, #320]	@ (8003b54 <DMA_Init+0x4f8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <DMA_Init+0x3be>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <DMA_Init+0x3c0>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00d      	beq.n	8003a3c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e008      	b.n	8003a3c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a32:	d103      	bne.n	8003a3c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a3a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a42:	4b45      	ldr	r3, [pc, #276]	@ (8003b58 <DMA_Init+0x4fc>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a36      	ldr	r2, [pc, #216]	@ (8003b38 <DMA_Init+0x4dc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <DMA_Init+0x44c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a35      	ldr	r2, [pc, #212]	@ (8003b3c <DMA_Init+0x4e0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01d      	beq.n	8003aa8 <DMA_Init+0x44c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a33      	ldr	r2, [pc, #204]	@ (8003b40 <DMA_Init+0x4e4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <DMA_Init+0x44c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a32      	ldr	r2, [pc, #200]	@ (8003b44 <DMA_Init+0x4e8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <DMA_Init+0x44c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a30      	ldr	r2, [pc, #192]	@ (8003b48 <DMA_Init+0x4ec>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <DMA_Init+0x44c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b4c <DMA_Init+0x4f0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <DMA_Init+0x44c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	@ (8003b50 <DMA_Init+0x4f4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <DMA_Init+0x44c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b54 <DMA_Init+0x4f8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <DMA_Init+0x450>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <DMA_Init+0x452>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40020050 	.word	0x40020050
 8003adc:	50020050 	.word	0x50020050
 8003ae0:	400200d0 	.word	0x400200d0
 8003ae4:	500200d0 	.word	0x500200d0
 8003ae8:	40020150 	.word	0x40020150
 8003aec:	50020150 	.word	0x50020150
 8003af0:	400201d0 	.word	0x400201d0
 8003af4:	500201d0 	.word	0x500201d0
 8003af8:	40020250 	.word	0x40020250
 8003afc:	50020250 	.word	0x50020250
 8003b00:	400202d0 	.word	0x400202d0
 8003b04:	500202d0 	.word	0x500202d0
 8003b08:	40020350 	.word	0x40020350
 8003b0c:	50020350 	.word	0x50020350
 8003b10:	400203d0 	.word	0x400203d0
 8003b14:	500203d0 	.word	0x500203d0
 8003b18:	40020450 	.word	0x40020450
 8003b1c:	50020450 	.word	0x50020450
 8003b20:	400204d0 	.word	0x400204d0
 8003b24:	500204d0 	.word	0x500204d0
 8003b28:	40020550 	.word	0x40020550
 8003b2c:	50020550 	.word	0x50020550
 8003b30:	400205d0 	.word	0x400205d0
 8003b34:	500205d0 	.word	0x500205d0
 8003b38:	40020650 	.word	0x40020650
 8003b3c:	50020650 	.word	0x50020650
 8003b40:	400206d0 	.word	0x400206d0
 8003b44:	500206d0 	.word	0x500206d0
 8003b48:	40020750 	.word	0x40020750
 8003b4c:	50020750 	.word	0x50020750
 8003b50:	400207d0 	.word	0x400207d0
 8003b54:	500207d0 	.word	0x500207d0
 8003b58:	3cc03180 	.word	0x3cc03180

08003b5c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7fe ffa2 	bl	8002aac <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0db      	b.n	8003d2c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6e      	ldr	r2, [pc, #440]	@ (8003d34 <HAL_DMAEx_List_Init+0x1d8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f000 809f 	beq.w	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6c      	ldr	r2, [pc, #432]	@ (8003d38 <HAL_DMAEx_List_Init+0x1dc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f000 8099 	beq.w	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6a      	ldr	r2, [pc, #424]	@ (8003d3c <HAL_DMAEx_List_Init+0x1e0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f000 8093 	beq.w	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	@ (8003d40 <HAL_DMAEx_List_Init+0x1e4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f000 808d 	beq.w	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a66      	ldr	r2, [pc, #408]	@ (8003d44 <HAL_DMAEx_List_Init+0x1e8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f000 8087 	beq.w	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a64      	ldr	r2, [pc, #400]	@ (8003d48 <HAL_DMAEx_List_Init+0x1ec>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f000 8081 	beq.w	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a62      	ldr	r2, [pc, #392]	@ (8003d4c <HAL_DMAEx_List_Init+0x1f0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d07b      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a61      	ldr	r2, [pc, #388]	@ (8003d50 <HAL_DMAEx_List_Init+0x1f4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d076      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5f      	ldr	r2, [pc, #380]	@ (8003d54 <HAL_DMAEx_List_Init+0x1f8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d071      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a5e      	ldr	r2, [pc, #376]	@ (8003d58 <HAL_DMAEx_List_Init+0x1fc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d06c      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5c      	ldr	r2, [pc, #368]	@ (8003d5c <HAL_DMAEx_List_Init+0x200>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d067      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8003d60 <HAL_DMAEx_List_Init+0x204>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d062      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a59      	ldr	r2, [pc, #356]	@ (8003d64 <HAL_DMAEx_List_Init+0x208>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d05d      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a58      	ldr	r2, [pc, #352]	@ (8003d68 <HAL_DMAEx_List_Init+0x20c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d058      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a56      	ldr	r2, [pc, #344]	@ (8003d6c <HAL_DMAEx_List_Init+0x210>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d053      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a55      	ldr	r2, [pc, #340]	@ (8003d70 <HAL_DMAEx_List_Init+0x214>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04e      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a53      	ldr	r2, [pc, #332]	@ (8003d74 <HAL_DMAEx_List_Init+0x218>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d049      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a52      	ldr	r2, [pc, #328]	@ (8003d78 <HAL_DMAEx_List_Init+0x21c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d044      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a50      	ldr	r2, [pc, #320]	@ (8003d7c <HAL_DMAEx_List_Init+0x220>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d03f      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a4f      	ldr	r2, [pc, #316]	@ (8003d80 <HAL_DMAEx_List_Init+0x224>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d03a      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003d84 <HAL_DMAEx_List_Init+0x228>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d035      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a4c      	ldr	r2, [pc, #304]	@ (8003d88 <HAL_DMAEx_List_Init+0x22c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d030      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a4a      	ldr	r2, [pc, #296]	@ (8003d8c <HAL_DMAEx_List_Init+0x230>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02b      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a49      	ldr	r2, [pc, #292]	@ (8003d90 <HAL_DMAEx_List_Init+0x234>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d026      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a47      	ldr	r2, [pc, #284]	@ (8003d94 <HAL_DMAEx_List_Init+0x238>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d021      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a46      	ldr	r2, [pc, #280]	@ (8003d98 <HAL_DMAEx_List_Init+0x23c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01c      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a44      	ldr	r2, [pc, #272]	@ (8003d9c <HAL_DMAEx_List_Init+0x240>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a43      	ldr	r2, [pc, #268]	@ (8003da0 <HAL_DMAEx_List_Init+0x244>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d012      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a41      	ldr	r2, [pc, #260]	@ (8003da4 <HAL_DMAEx_List_Init+0x248>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00d      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a40      	ldr	r2, [pc, #256]	@ (8003da8 <HAL_DMAEx_List_Init+0x24c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d008      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a3e      	ldr	r2, [pc, #248]	@ (8003dac <HAL_DMAEx_List_Init+0x250>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <HAL_DMAEx_List_Init+0x162>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a3d      	ldr	r2, [pc, #244]	@ (8003db0 <HAL_DMAEx_List_Init+0x254>)
 8003cbc:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0206 	orr.w	r2, r2, #6
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003cde:	e00f      	b.n	8003d00 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003ce0:	f7fe fee4 	bl	8002aac <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d908      	bls.n	8003d00 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e015      	b.n	8003d2c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e8      	bne.n	8003ce0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fa26 	bl	8004160 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40020050 	.word	0x40020050
 8003d38:	50020050 	.word	0x50020050
 8003d3c:	400200d0 	.word	0x400200d0
 8003d40:	500200d0 	.word	0x500200d0
 8003d44:	40020150 	.word	0x40020150
 8003d48:	50020150 	.word	0x50020150
 8003d4c:	400201d0 	.word	0x400201d0
 8003d50:	500201d0 	.word	0x500201d0
 8003d54:	40020250 	.word	0x40020250
 8003d58:	50020250 	.word	0x50020250
 8003d5c:	400202d0 	.word	0x400202d0
 8003d60:	500202d0 	.word	0x500202d0
 8003d64:	40020350 	.word	0x40020350
 8003d68:	50020350 	.word	0x50020350
 8003d6c:	400203d0 	.word	0x400203d0
 8003d70:	500203d0 	.word	0x500203d0
 8003d74:	40020450 	.word	0x40020450
 8003d78:	50020450 	.word	0x50020450
 8003d7c:	400204d0 	.word	0x400204d0
 8003d80:	500204d0 	.word	0x500204d0
 8003d84:	40020550 	.word	0x40020550
 8003d88:	50020550 	.word	0x50020550
 8003d8c:	400205d0 	.word	0x400205d0
 8003d90:	500205d0 	.word	0x500205d0
 8003d94:	40020650 	.word	0x40020650
 8003d98:	50020650 	.word	0x50020650
 8003d9c:	400206d0 	.word	0x400206d0
 8003da0:	500206d0 	.word	0x500206d0
 8003da4:	40020750 	.word	0x40020750
 8003da8:	50020750 	.word	0x50020750
 8003dac:	400207d0 	.word	0x400207d0
 8003db0:	500207d0 	.word	0x500207d0

08003db4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_DMAEx_List_BuildNode+0x16>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e004      	b.n	8003dd8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb1d 	bl	8004410 <DMA_List_BuildNode>

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	@ 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_DMAEx_List_InsertNode+0x18>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b6      	b.n	8003f6a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d104      	bne.n	8003e0e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2204      	movs	r2, #4
 8003e08:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0ad      	b.n	8003f6a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fc4c 	bl	80046b4 <DMA_List_CheckNodesBaseAddresses>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2205      	movs	r2, #5
 8003e26:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e09e      	b.n	8003f6a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fc6d 	bl	8004714 <DMA_List_CheckNodesTypes>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2204      	movs	r2, #4
 8003e44:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e08f      	b.n	8003f6a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003e56:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003e5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fc93 	bl	800478c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d11a      	bne.n	8003ea4 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e06c      	b.n	8003f5c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003e8e:	4013      	ands	r3, r2
 8003e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e94:	4319      	orrs	r1, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	e05b      	b.n	8003f5c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eba:	4319      	orrs	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e043      	b.n	8003f52 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fc88 	bl	80047ec <DMA_List_FindNode>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d132      	bne.n	8003f48 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d11a      	bne.n	8003f22 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003efe:	4013      	ands	r3, r2
 8003f00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f04:	4319      	orrs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003f12:	4013      	ands	r3, r2
 8003f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f18:	4319      	orrs	r1, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f20:	e017      	b.n	8003f52 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003f38:	4013      	ands	r3, r2
 8003f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f3e:	4319      	orrs	r1, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f46:	e004      	b.n	8003f52 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2206      	movs	r2, #6
 8003f4c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e00b      	b.n	8003f6a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3730      	adds	r7, #48	@ 0x30
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b08a      	sub	sp, #40	@ 0x28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e052      	b.n	800402a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e049      	b.n	800402a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d101      	bne.n	8003fae <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e03d      	b.n	800402a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e038      	b.n	800402a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d104      	bne.n	8003fca <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02f      	b.n	800402a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f107 0220 	add.w	r2, r7, #32
 8003fde:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fbd2 	bl	800478c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fbf9 	bl	80047ec <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004004:	4013      	ands	r3, r2
 8004006:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4610      	mov	r0, r2
 800400c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800400e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004010:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3728      	adds	r7, #40	@ 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_DMAEx_List_LinkQ+0x16>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e072      	b.n	8004134 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004054:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d002      	beq.n	8004068 <HAL_DMAEx_List_LinkQ+0x34>
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b05      	cmp	r3, #5
 8004066:	d108      	bne.n	800407a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2240      	movs	r2, #64	@ 0x40
 800406c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e05c      	b.n	8004134 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	7b1b      	ldrb	r3, [r3, #12]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d104      	bne.n	800408e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2201      	movs	r2, #1
 8004088:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e052      	b.n	8004134 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2b      	ldr	r2, [pc, #172]	@ (8004140 <HAL_DMAEx_List_LinkQ+0x10c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d022      	beq.n	80040de <HAL_DMAEx_List_LinkQ+0xaa>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a29      	ldr	r2, [pc, #164]	@ (8004144 <HAL_DMAEx_List_LinkQ+0x110>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01d      	beq.n	80040de <HAL_DMAEx_List_LinkQ+0xaa>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a28      	ldr	r2, [pc, #160]	@ (8004148 <HAL_DMAEx_List_LinkQ+0x114>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d018      	beq.n	80040de <HAL_DMAEx_List_LinkQ+0xaa>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a26      	ldr	r2, [pc, #152]	@ (800414c <HAL_DMAEx_List_LinkQ+0x118>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_DMAEx_List_LinkQ+0xaa>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a25      	ldr	r2, [pc, #148]	@ (8004150 <HAL_DMAEx_List_LinkQ+0x11c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_DMAEx_List_LinkQ+0xaa>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a23      	ldr	r2, [pc, #140]	@ (8004154 <HAL_DMAEx_List_LinkQ+0x120>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_DMAEx_List_LinkQ+0xaa>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_DMAEx_List_LinkQ+0x124>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_DMAEx_List_LinkQ+0xaa>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a20      	ldr	r2, [pc, #128]	@ (800415c <HAL_DMAEx_List_LinkQ+0x128>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_DMAEx_List_LinkQ+0xae>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_DMAEx_List_LinkQ+0xb0>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2203      	movs	r2, #3
 80040fa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e019      	b.n	8004134 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004104:	2b81      	cmp	r3, #129	@ 0x81
 8004106:	d108      	bne.n	800411a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10d      	bne.n	800412c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2204      	movs	r2, #4
 8004114:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e00c      	b.n	8004134 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2204      	movs	r2, #4
 8004126:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e003      	b.n	8004134 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40020650 	.word	0x40020650
 8004144:	50020650 	.word	0x50020650
 8004148:	400206d0 	.word	0x400206d0
 800414c:	500206d0 	.word	0x500206d0
 8004150:	40020750 	.word	0x40020750
 8004154:	50020750 	.word	0x50020750
 8004158:	400207d0 	.word	0x400207d0
 800415c:	500207d0 	.word	0x500207d0

08004160 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a85      	ldr	r2, [pc, #532]	@ (8004390 <DMA_List_Init+0x230>)
 800417a:	4293      	cmp	r3, r2
 800417c:	f000 80a0 	beq.w	80042c0 <DMA_List_Init+0x160>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a83      	ldr	r2, [pc, #524]	@ (8004394 <DMA_List_Init+0x234>)
 8004186:	4293      	cmp	r3, r2
 8004188:	f000 809a 	beq.w	80042c0 <DMA_List_Init+0x160>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a81      	ldr	r2, [pc, #516]	@ (8004398 <DMA_List_Init+0x238>)
 8004192:	4293      	cmp	r3, r2
 8004194:	f000 8094 	beq.w	80042c0 <DMA_List_Init+0x160>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a7f      	ldr	r2, [pc, #508]	@ (800439c <DMA_List_Init+0x23c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	f000 808e 	beq.w	80042c0 <DMA_List_Init+0x160>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7d      	ldr	r2, [pc, #500]	@ (80043a0 <DMA_List_Init+0x240>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	f000 8088 	beq.w	80042c0 <DMA_List_Init+0x160>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a7b      	ldr	r2, [pc, #492]	@ (80043a4 <DMA_List_Init+0x244>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f000 8082 	beq.w	80042c0 <DMA_List_Init+0x160>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a79      	ldr	r2, [pc, #484]	@ (80043a8 <DMA_List_Init+0x248>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d07c      	beq.n	80042c0 <DMA_List_Init+0x160>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a78      	ldr	r2, [pc, #480]	@ (80043ac <DMA_List_Init+0x24c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d077      	beq.n	80042c0 <DMA_List_Init+0x160>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a76      	ldr	r2, [pc, #472]	@ (80043b0 <DMA_List_Init+0x250>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d072      	beq.n	80042c0 <DMA_List_Init+0x160>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	@ (80043b4 <DMA_List_Init+0x254>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d06d      	beq.n	80042c0 <DMA_List_Init+0x160>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a73      	ldr	r2, [pc, #460]	@ (80043b8 <DMA_List_Init+0x258>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d068      	beq.n	80042c0 <DMA_List_Init+0x160>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a72      	ldr	r2, [pc, #456]	@ (80043bc <DMA_List_Init+0x25c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d063      	beq.n	80042c0 <DMA_List_Init+0x160>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a70      	ldr	r2, [pc, #448]	@ (80043c0 <DMA_List_Init+0x260>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d05e      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6f      	ldr	r2, [pc, #444]	@ (80043c4 <DMA_List_Init+0x264>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d059      	beq.n	80042c0 <DMA_List_Init+0x160>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6d      	ldr	r2, [pc, #436]	@ (80043c8 <DMA_List_Init+0x268>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d054      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6c      	ldr	r2, [pc, #432]	@ (80043cc <DMA_List_Init+0x26c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d04f      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6a      	ldr	r2, [pc, #424]	@ (80043d0 <DMA_List_Init+0x270>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d04a      	beq.n	80042c0 <DMA_List_Init+0x160>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a69      	ldr	r2, [pc, #420]	@ (80043d4 <DMA_List_Init+0x274>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d045      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a67      	ldr	r2, [pc, #412]	@ (80043d8 <DMA_List_Init+0x278>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d040      	beq.n	80042c0 <DMA_List_Init+0x160>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a66      	ldr	r2, [pc, #408]	@ (80043dc <DMA_List_Init+0x27c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d03b      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a64      	ldr	r2, [pc, #400]	@ (80043e0 <DMA_List_Init+0x280>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d036      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a63      	ldr	r2, [pc, #396]	@ (80043e4 <DMA_List_Init+0x284>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d031      	beq.n	80042c0 <DMA_List_Init+0x160>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a61      	ldr	r2, [pc, #388]	@ (80043e8 <DMA_List_Init+0x288>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d02c      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a60      	ldr	r2, [pc, #384]	@ (80043ec <DMA_List_Init+0x28c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d027      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a5e      	ldr	r2, [pc, #376]	@ (80043f0 <DMA_List_Init+0x290>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d022      	beq.n	80042c0 <DMA_List_Init+0x160>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a5d      	ldr	r2, [pc, #372]	@ (80043f4 <DMA_List_Init+0x294>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d01d      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a5b      	ldr	r2, [pc, #364]	@ (80043f8 <DMA_List_Init+0x298>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d018      	beq.n	80042c0 <DMA_List_Init+0x160>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a5a      	ldr	r2, [pc, #360]	@ (80043fc <DMA_List_Init+0x29c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <DMA_List_Init+0x160>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a58      	ldr	r2, [pc, #352]	@ (8004400 <DMA_List_Init+0x2a0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00e      	beq.n	80042c0 <DMA_List_Init+0x160>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a57      	ldr	r2, [pc, #348]	@ (8004404 <DMA_List_Init+0x2a4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d009      	beq.n	80042c0 <DMA_List_Init+0x160>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a55      	ldr	r2, [pc, #340]	@ (8004408 <DMA_List_Init+0x2a8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <DMA_List_Init+0x160>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a54      	ldr	r2, [pc, #336]	@ (800440c <DMA_List_Init+0x2ac>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d101      	bne.n	80042c4 <DMA_List_Init+0x164>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <DMA_List_Init+0x166>
 80042c4:	2300      	movs	r3, #0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a36      	ldr	r2, [pc, #216]	@ (80043f0 <DMA_List_Init+0x290>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <DMA_List_Init+0x202>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a34      	ldr	r2, [pc, #208]	@ (80043f4 <DMA_List_Init+0x294>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01d      	beq.n	8004362 <DMA_List_Init+0x202>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a33      	ldr	r2, [pc, #204]	@ (80043f8 <DMA_List_Init+0x298>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <DMA_List_Init+0x202>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a31      	ldr	r2, [pc, #196]	@ (80043fc <DMA_List_Init+0x29c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <DMA_List_Init+0x202>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a30      	ldr	r2, [pc, #192]	@ (8004400 <DMA_List_Init+0x2a0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <DMA_List_Init+0x202>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2e      	ldr	r2, [pc, #184]	@ (8004404 <DMA_List_Init+0x2a4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <DMA_List_Init+0x202>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2d      	ldr	r2, [pc, #180]	@ (8004408 <DMA_List_Init+0x2a8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <DMA_List_Init+0x202>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2b      	ldr	r2, [pc, #172]	@ (800440c <DMA_List_Init+0x2ac>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <DMA_List_Init+0x206>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <DMA_List_Init+0x208>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2200      	movs	r2, #0
 800437a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40020050 	.word	0x40020050
 8004394:	50020050 	.word	0x50020050
 8004398:	400200d0 	.word	0x400200d0
 800439c:	500200d0 	.word	0x500200d0
 80043a0:	40020150 	.word	0x40020150
 80043a4:	50020150 	.word	0x50020150
 80043a8:	400201d0 	.word	0x400201d0
 80043ac:	500201d0 	.word	0x500201d0
 80043b0:	40020250 	.word	0x40020250
 80043b4:	50020250 	.word	0x50020250
 80043b8:	400202d0 	.word	0x400202d0
 80043bc:	500202d0 	.word	0x500202d0
 80043c0:	40020350 	.word	0x40020350
 80043c4:	50020350 	.word	0x50020350
 80043c8:	400203d0 	.word	0x400203d0
 80043cc:	500203d0 	.word	0x500203d0
 80043d0:	40020450 	.word	0x40020450
 80043d4:	50020450 	.word	0x50020450
 80043d8:	400204d0 	.word	0x400204d0
 80043dc:	500204d0 	.word	0x500204d0
 80043e0:	40020550 	.word	0x40020550
 80043e4:	50020550 	.word	0x50020550
 80043e8:	400205d0 	.word	0x400205d0
 80043ec:	500205d0 	.word	0x500205d0
 80043f0:	40020650 	.word	0x40020650
 80043f4:	50020650 	.word	0x50020650
 80043f8:	400206d0 	.word	0x400206d0
 80043fc:	500206d0 	.word	0x500206d0
 8004400:	40020750 	.word	0x40020750
 8004404:	50020750 	.word	0x50020750
 8004408:	400207d0 	.word	0x400207d0
 800440c:	500207d0 	.word	0x500207d0

08004410 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004422:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8004428:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800442e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004434:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004452:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	051b      	lsls	r3, r3, #20
 800445c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004460:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	3b01      	subs	r3, #1
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800446e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004470:	431a      	orrs	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	f240 237f 	movw	r3, #639	@ 0x27f
 8004482:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004484:	431a      	orrs	r2, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004492:	d10c      	bne.n	80044ae <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d011      	beq.n	80044c4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e00a      	b.n	80044c4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044b6:	d105      	bne.n	80044c4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00f      	beq.n	80044ec <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80044e4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80044e6:	431a      	orrs	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04e      	beq.n	80045a0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450a:	3b01      	subs	r3, #1
 800450c:	0419      	lsls	r1, r3, #16
 800450e:	4b67      	ldr	r3, [pc, #412]	@ (80046ac <DMA_List_BuildNode+0x29c>)
 8004510:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004512:	431a      	orrs	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451c:	2b00      	cmp	r3, #0
 800451e:	da06      	bge.n	800452e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	e005      	b.n	800453a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453e:	2b00      	cmp	r3, #0
 8004540:	da06      	bge.n	8004550 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	e005      	b.n	800455c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004560:	2b00      	cmp	r3, #0
 8004562:	da06      	bge.n	8004572 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	e005      	b.n	800457e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004582:	2b00      	cmp	r3, #0
 8004584:	da06      	bge.n	8004594 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	e005      	b.n	80045a0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d059      	beq.n	8004670 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da09      	bge.n	80045d8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c8:	425b      	negs	r3, r3
 80045ca:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	615a      	str	r2, [r3, #20]
 80045d6:	e005      	b.n	80045e4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045dc:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da0d      	bge.n	8004608 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	425b      	negs	r3, r3
 80045f2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	0419      	lsls	r1, r3, #16
 80045fc:	4b2c      	ldr	r3, [pc, #176]	@ (80046b0 <DMA_List_BuildNode+0x2a0>)
 80045fe:	400b      	ands	r3, r1
 8004600:	431a      	orrs	r2, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	615a      	str	r2, [r3, #20]
 8004606:	e009      	b.n	800461c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	0419      	lsls	r1, r3, #16
 8004612:	4b27      	ldr	r3, [pc, #156]	@ (80046b0 <DMA_List_BuildNode+0x2a0>)
 8004614:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004616:	431a      	orrs	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	2b00      	cmp	r3, #0
 8004622:	da08      	bge.n	8004636 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004628:	425b      	negs	r3, r3
 800462a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	b29a      	uxth	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	619a      	str	r2, [r3, #24]
 8004634:	e004      	b.n	8004640 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	2b00      	cmp	r3, #0
 8004646:	da0b      	bge.n	8004660 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464c:	425b      	negs	r3, r3
 800464e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004658:	431a      	orrs	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	619a      	str	r2, [r3, #24]
 800465e:	e007      	b.n	8004670 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800466a:	431a      	orrs	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d006      	beq.n	8004692 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004690:	e005      	b.n	800469e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	07ff0000 	.word	0x07ff0000
 80046b0:	1fff0000 	.word	0x1fff0000

080046b4 <DMA_List_CheckNodesBaseAddresses>:
#else
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
#endif /* __GNUC__ && !__CC_ARM */
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	041b      	lsls	r3, r3, #16
 80046ce:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e00a      	b.n	80046f6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e004      	b.n	80046f6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d001      	beq.n	8004706 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e00e      	b.n	8004752 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e006      	b.n	8004752 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004764:	2302      	movs	r3, #2
 8004766:	e00b      	b.n	8004780 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	429a      	cmp	r2, r3
 8004778:	d001      	beq.n	800477e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800477a:	2303      	movs	r3, #3
 800477c:	e000      	b.n	8004780 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <DMA_List_GetCLLRNodeInfo+0x58>)
 80047ae:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00f      	beq.n	80047d6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2207      	movs	r2, #7
 80047ba:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80047bc:	e00b      	b.n	80047d6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a08      	ldr	r2, [pc, #32]	@ (80047e8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80047c8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2205      	movs	r2, #5
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	fe010000 	.word	0xfe010000
 80047e8:	f8010000 	.word	0xf8010000

080047ec <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	@ 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d142      	bne.n	8004896 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004810:	e01d      	b.n	800484e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004822:	4013      	ands	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e00f      	b.n	8004848 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004840:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3301      	adds	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	429a      	cmp	r2, r3
 8004856:	d3dc      	bcc.n	8004812 <DMA_List_FindNode+0x26>
 8004858:	e029      	b.n	80048ae <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e00f      	b.n	8004890 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4413      	add	r3, r2
 8004880:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004888:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	429a      	cmp	r2, r3
 800489e:	d206      	bcs.n	80048ae <DMA_List_FindNode+0xc2>
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80048a6:	4013      	ands	r3, r2
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d1d5      	bne.n	800485a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80048ba:	4013      	ands	r3, r2
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02b      	b.n	800491e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0c1b      	lsrs	r3, r3, #16
 80048d2:	041b      	lsls	r3, r3, #16
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	461a      	mov	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00f      	beq.n	800491c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	461a      	mov	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004908:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800490c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	0c1b      	lsrs	r3, r3, #16
 8004914:	041b      	lsls	r3, r3, #16
 8004916:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3724      	adds	r7, #36	@ 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	@ 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800493e:	e1c2      	b.n	8004cc6 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	4013      	ands	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 81b2 	beq.w	8004cc0 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a55      	ldr	r2, [pc, #340]	@ (8004ab4 <HAL_GPIO_Init+0x188>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d15d      	bne.n	8004a20 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800496a:	2201      	movs	r2, #1
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	4013      	ands	r3, r2
 8004978:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0201 	and.w	r2, r3, #1
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	4313      	orrs	r3, r2
 800498c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004994:	4a48      	ldr	r2, [pc, #288]	@ (8004ab8 <HAL_GPIO_Init+0x18c>)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800499c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800499e:	4a46      	ldr	r2, [pc, #280]	@ (8004ab8 <HAL_GPIO_Init+0x18c>)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	08da      	lsrs	r2, r3, #3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3208      	adds	r2, #8
 80049b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	220f      	movs	r2, #15
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	220b      	movs	r2, #11
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	08da      	lsrs	r2, r3, #3
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3208      	adds	r2, #8
 80049ea:	69f9      	ldr	r1, [r7, #28]
 80049ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e067      	b.n	8004af0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x104>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b12      	cmp	r3, #18
 8004a2e:	d145      	bne.n	8004abc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	08da      	lsrs	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3208      	adds	r2, #8
 8004a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	220f      	movs	r2, #15
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 020f 	and.w	r2, r3, #15
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	08da      	lsrs	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3208      	adds	r2, #8
 8004a76:	69f9      	ldr	r1, [r7, #28]
 8004a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	2203      	movs	r2, #3
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0203 	and.w	r2, r3, #3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e01e      	b.n	8004af0 <HAL_GPIO_Init+0x1c4>
 8004ab2:	bf00      	nop
 8004ab4:	46020000 	.word	0x46020000
 8004ab8:	0800cb4c 	.word	0x0800cb4c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d00b      	beq.n	8004b10 <HAL_GPIO_Init+0x1e4>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d007      	beq.n	8004b10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b04:	2b11      	cmp	r3, #17
 8004b06:	d003      	beq.n	8004b10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b12      	cmp	r3, #18
 8004b0e:	d130      	bne.n	8004b72 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004b46:	2201      	movs	r2, #1
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0201 	and.w	r2, r3, #1
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d107      	bne.n	8004b8a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d11b      	bne.n	8004bba <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d017      	beq.n	8004bba <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	2203      	movs	r2, #3
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d07c      	beq.n	8004cc0 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004bc6:	4a47      	ldr	r2, [pc, #284]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	3318      	adds	r3, #24
 8004bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	220f      	movs	r2, #15
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	0a9a      	lsrs	r2, r3, #10
 8004bee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce8 <HAL_GPIO_Init+0x3bc>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	f002 0203 	and.w	r2, r2, #3
 8004bf8:	00d2      	lsls	r2, r2, #3
 8004bfa:	4093      	lsls	r3, r2
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004c02:	4938      	ldr	r1, [pc, #224]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	089b      	lsrs	r3, r3, #2
 8004c08:	3318      	adds	r3, #24
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c10:	4b34      	ldr	r3, [pc, #208]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004c34:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004c5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004c64:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	4013      	ands	r3, r2
 8004c74:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004c8a:	4a16      	ldr	r2, [pc, #88]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c98:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce4 <HAL_GPIO_Init+0x3b8>)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f ae35 	bne.w	8004940 <HAL_GPIO_Init+0x14>
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3724      	adds	r7, #36	@ 0x24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	46022000 	.word	0x46022000
 8004ce8:	002f7f7f 	.word	0x002f7f7f

08004cec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004cfe:	e0bc      	b.n	8004e7a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004d00:	2201      	movs	r2, #1
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80ad 	beq.w	8004e74 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8004e98 <HAL_GPIO_DeInit+0x1ac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d115      	bne.n	8004d4e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8004d22:	4a5e      	ldr	r2, [pc, #376]	@ (8004e9c <HAL_GPIO_DeInit+0x1b0>)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d2a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004d2c:	4a5b      	ldr	r2, [pc, #364]	@ (8004e9c <HAL_GPIO_DeInit+0x1b0>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8004d38:	4b57      	ldr	r3, [pc, #348]	@ (8004e98 <HAL_GPIO_DeInit+0x1ac>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa01 f303 	lsl.w	r3, r1, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	4954      	ldr	r1, [pc, #336]	@ (8004e98 <HAL_GPIO_DeInit+0x1ac>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]
 8004d4c:	e053      	b.n	8004df6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8004d4e:	4a54      	ldr	r2, [pc, #336]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	3318      	adds	r3, #24
 8004d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	220f      	movs	r2, #15
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0a9a      	lsrs	r2, r3, #10
 8004d74:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea4 <HAL_GPIO_DeInit+0x1b8>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	f002 0203 	and.w	r2, r2, #3
 8004d7e:	00d2      	lsls	r2, r2, #3
 8004d80:	4093      	lsls	r3, r2
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d136      	bne.n	8004df6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8004d88:	4b45      	ldr	r3, [pc, #276]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004d8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	4943      	ldr	r1, [pc, #268]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8004d9a:	4b41      	ldr	r3, [pc, #260]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004d9c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	493e      	ldr	r1, [pc, #248]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8004dac:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	493a      	ldr	r1, [pc, #232]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8004dba:	4b39      	ldr	r3, [pc, #228]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	4937      	ldr	r1, [pc, #220]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004dd8:	4a31      	ldr	r2, [pc, #196]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	3318      	adds	r3, #24
 8004de0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	43da      	mvns	r2, r3
 8004de8:	482d      	ldr	r0, [pc, #180]	@ (8004ea0 <HAL_GPIO_DeInit+0x1b4>)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	089b      	lsrs	r3, r3, #2
 8004dee:	400a      	ands	r2, r1
 8004df0:	3318      	adds	r3, #24
 8004df2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	2103      	movs	r1, #3
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	431a      	orrs	r2, r3
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	08da      	lsrs	r2, r3, #3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	3208      	adds	r2, #8
 8004e12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	220f      	movs	r2, #15
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	08d2      	lsrs	r2, r2, #3
 8004e2a:	4019      	ands	r1, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3208      	adds	r2, #8
 8004e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	401a      	ands	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	401a      	ands	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2103      	movs	r1, #3
 8004e68:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	401a      	ands	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	3301      	adds	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f47f af3c 	bne.w	8004d00 <HAL_GPIO_DeInit+0x14>
  }
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3724      	adds	r7, #36	@ 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	46020000 	.word	0x46020000
 8004e9c:	0800cb4c 	.word	0x0800cb4c
 8004ea0:	46022000 	.word	0x46022000
 8004ea4:	002f7f7f 	.word	0x002f7f7f

08004ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb8:	787b      	ldrb	r3, [r7, #1]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004ec4:	e002      	b.n	8004ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f20 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004eee:	4a0c      	ldr	r2, [pc, #48]	@ (8004f20 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f814 	bl	8004f24 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004efc:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004f08:	4a05      	ldr	r2, [pc, #20]	@ (8004f20 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f812 	bl	8004f3a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	46022000 	.word	0x46022000

08004f24 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	4603      	mov	r3, r0
 8004f42:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e08d      	b.n	800507e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fd1a 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	@ 0x24
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	e006      	b.n	8004fd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d108      	bne.n	8004ff2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	e007      	b.n	8005002 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69d9      	ldr	r1, [r3, #28]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	461a      	mov	r2, r3
 8005096:	4603      	mov	r3, r0
 8005098:	817b      	strh	r3, [r7, #10]
 800509a:	460b      	mov	r3, r1
 800509c:	813b      	strh	r3, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	f040 80f9 	bne.w	80052a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_I2C_Mem_Write+0x34>
 80050b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0ed      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_I2C_Mem_Write+0x4e>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e0e6      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050de:	f7fd fce5 	bl	8002aac <HAL_GetTick>
 80050e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2319      	movs	r3, #25
 80050ea:	2201      	movs	r2, #1
 80050ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fbc9 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0d1      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2221      	movs	r2, #33	@ 0x21
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2240      	movs	r2, #64	@ 0x40
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005120:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005128:	88f8      	ldrh	r0, [r7, #6]
 800512a:	893a      	ldrh	r2, [r7, #8]
 800512c:	8979      	ldrh	r1, [r7, #10]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	4603      	mov	r3, r0
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fad9 	bl	80056f0 <I2C_RequestMemoryWrite>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0a9      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2bff      	cmp	r3, #255	@ 0xff
 8005158:	d90e      	bls.n	8005178 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	@ 0xff
 800515e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005164:	b2da      	uxtb	r2, r3
 8005166:	8979      	ldrh	r1, [r7, #10]
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fd4d 	bl	8005c10 <I2C_TransferConfig>
 8005176:	e00f      	b.n	8005198 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005186:	b2da      	uxtb	r2, r3
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fd3c 	bl	8005c10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fbcc 	bl	800593a <I2C_WaitOnTXISFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e07b      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d034      	beq.n	8005250 <HAL_I2C_Mem_Write+0x1c8>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d130      	bne.n	8005250 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	2200      	movs	r2, #0
 80051f6:	2180      	movs	r1, #128	@ 0x80
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fb45 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e04d      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2bff      	cmp	r3, #255	@ 0xff
 8005210:	d90e      	bls.n	8005230 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	22ff      	movs	r2, #255	@ 0xff
 8005216:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521c:	b2da      	uxtb	r2, r3
 800521e:	8979      	ldrh	r1, [r7, #10]
 8005220:	2300      	movs	r3, #0
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fcf1 	bl	8005c10 <I2C_TransferConfig>
 800522e:	e00f      	b.n	8005250 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523e:	b2da      	uxtb	r2, r3
 8005240:	8979      	ldrh	r1, [r7, #10]
 8005242:	2300      	movs	r3, #0
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fce0 	bl	8005c10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d19e      	bne.n	8005198 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fbb2 	bl	80059c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e01a      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2220      	movs	r2, #32
 8005274:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_I2C_Mem_Write+0x224>)
 8005282:	400b      	ands	r3, r1
 8005284:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	e000      	b.n	80052a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80052a2:	2302      	movs	r3, #2
  }
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	fe00e800 	.word	0xfe00e800

080052b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	4608      	mov	r0, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	461a      	mov	r2, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	817b      	strh	r3, [r7, #10]
 80052c2:	460b      	mov	r3, r1
 80052c4:	813b      	strh	r3, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	f040 80fd 	bne.w	80054d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_I2C_Mem_Read+0x34>
 80052de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0f1      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_I2C_Mem_Read+0x4e>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e0ea      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005306:	f7fd fbd1 	bl	8002aac <HAL_GetTick>
 800530a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2319      	movs	r3, #25
 8005312:	2201      	movs	r2, #1
 8005314:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fab5 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0d5      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2222      	movs	r2, #34	@ 0x22
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2240      	movs	r2, #64	@ 0x40
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a3a      	ldr	r2, [r7, #32]
 8005342:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005350:	88f8      	ldrh	r0, [r7, #6]
 8005352:	893a      	ldrh	r2, [r7, #8]
 8005354:	8979      	ldrh	r1, [r7, #10]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	4603      	mov	r3, r0
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fa19 	bl	8005798 <I2C_RequestMemoryRead>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0ad      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2bff      	cmp	r3, #255	@ 0xff
 8005380:	d90e      	bls.n	80053a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	22ff      	movs	r2, #255	@ 0xff
 8005386:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538c:	b2da      	uxtb	r2, r3
 800538e:	8979      	ldrh	r1, [r7, #10]
 8005390:	4b52      	ldr	r3, [pc, #328]	@ (80054dc <HAL_I2C_Mem_Read+0x22c>)
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fc39 	bl	8005c10 <I2C_TransferConfig>
 800539e:	e00f      	b.n	80053c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	8979      	ldrh	r1, [r7, #10]
 80053b2:	4b4a      	ldr	r3, [pc, #296]	@ (80054dc <HAL_I2C_Mem_Read+0x22c>)
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fc28 	bl	8005c10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	2200      	movs	r2, #0
 80053c8:	2104      	movs	r1, #4
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fa5c 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e07c      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d034      	beq.n	8005480 <HAL_I2C_Mem_Read+0x1d0>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d130      	bne.n	8005480 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	2200      	movs	r2, #0
 8005426:	2180      	movs	r1, #128	@ 0x80
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fa2d 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e04d      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2bff      	cmp	r3, #255	@ 0xff
 8005440:	d90e      	bls.n	8005460 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	22ff      	movs	r2, #255	@ 0xff
 8005446:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800544c:	b2da      	uxtb	r2, r3
 800544e:	8979      	ldrh	r1, [r7, #10]
 8005450:	2300      	movs	r3, #0
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fbd9 	bl	8005c10 <I2C_TransferConfig>
 800545e:	e00f      	b.n	8005480 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546e:	b2da      	uxtb	r2, r3
 8005470:	8979      	ldrh	r1, [r7, #10]
 8005472:	2300      	movs	r3, #0
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fbc8 	bl	8005c10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d19a      	bne.n	80053c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fa9a 	bl	80059c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e01a      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2220      	movs	r2, #32
 80054a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <HAL_I2C_Mem_Read+0x230>)
 80054b2:	400b      	ands	r3, r1
 80054b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e000      	b.n	80054d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
  }
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	80002400 	.word	0x80002400
 80054e0:	fe00e800 	.word	0xfe00e800

080054e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	@ 0x28
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	460b      	mov	r3, r1
 80054f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b20      	cmp	r3, #32
 8005506:	f040 80ed 	bne.w	80056e4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005518:	d101      	bne.n	800551e <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800551a:	2302      	movs	r3, #2
 800551c:	e0e3      	b.n	80056e6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_I2C_IsDeviceReady+0x48>
 8005528:	2302      	movs	r3, #2
 800552a:	e0dc      	b.n	80056e6 <HAL_I2C_IsDeviceReady+0x202>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2224      	movs	r2, #36	@ 0x24
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d107      	bne.n	800555a <HAL_I2C_IsDeviceReady+0x76>
 800554a:	897b      	ldrh	r3, [r7, #10]
 800554c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005550:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005554:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005558:	e006      	b.n	8005568 <HAL_I2C_IsDeviceReady+0x84>
 800555a:	897b      	ldrh	r3, [r7, #10]
 800555c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005560:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005564:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800556e:	f7fd fa9d 	bl	8002aac <HAL_GetTick>
 8005572:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055a0:	e034      	b.n	800560c <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d01a      	beq.n	80055e0 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fd fa7f 	bl	8002aac <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <HAL_I2C_IsDeviceReady+0xdc>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10f      	bne.n	80055e0 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e082      	b.n	80056e6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b10      	cmp	r3, #16
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800560c:	7fbb      	ldrb	r3, [r7, #30]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <HAL_I2C_IsDeviceReady+0x134>
 8005612:	7f7b      	ldrb	r3, [r7, #29]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0c4      	beq.n	80055a2 <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b10      	cmp	r3, #16
 8005624:	d027      	beq.n	8005676 <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	2120      	movs	r1, #32
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f929 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00e      	beq.n	800565a <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005640:	2b04      	cmp	r3, #4
 8005642:	d107      	bne.n	8005654 <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2220      	movs	r2, #32
 800564a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44
 8005652:	e026      	b.n	80056a2 <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e023      	b.n	80056a2 <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2220      	movs	r2, #32
 8005660:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e037      	b.n	80056e6 <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2210      	movs	r2, #16
 800567c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2200      	movs	r2, #0
 8005686:	2120      	movs	r1, #32
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f8fd 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e003      	b.n	80056a2 <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2220      	movs	r2, #32
 80056a0:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	3301      	adds	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d904      	bls.n	80056ba <HAL_I2C_IsDeviceReady+0x1d6>
 80056b0:	7ffb      	ldrb	r3, [r7, #31]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	f63f af3f 	bhi.w	8005542 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	461a      	mov	r2, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	817b      	strh	r3, [r7, #10]
 8005702:	460b      	mov	r3, r1
 8005704:	813b      	strh	r3, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	8979      	ldrh	r1, [r7, #10]
 8005710:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <I2C_RequestMemoryWrite+0xa4>)
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa79 	bl	8005c10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f909 	bl	800593a <I2C_WaitOnTXISFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e02c      	b.n	800578c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005738:	893b      	ldrh	r3, [r7, #8]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	629a      	str	r2, [r3, #40]	@ 0x28
 8005742:	e015      	b.n	8005770 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005744:	893b      	ldrh	r3, [r7, #8]
 8005746:	0a1b      	lsrs	r3, r3, #8
 8005748:	b29b      	uxth	r3, r3
 800574a:	b2da      	uxtb	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	69b9      	ldr	r1, [r7, #24]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f8ef 	bl	800593a <I2C_WaitOnTXISFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e012      	b.n	800578c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005766:	893b      	ldrh	r3, [r7, #8]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2200      	movs	r2, #0
 8005778:	2180      	movs	r1, #128	@ 0x80
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f884 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	80002000 	.word	0x80002000

08005798 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	4608      	mov	r0, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	461a      	mov	r2, r3
 80057a6:	4603      	mov	r3, r0
 80057a8:	817b      	strh	r3, [r7, #10]
 80057aa:	460b      	mov	r3, r1
 80057ac:	813b      	strh	r3, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	8979      	ldrh	r1, [r7, #10]
 80057b8:	4b20      	ldr	r3, [pc, #128]	@ (800583c <I2C_RequestMemoryRead+0xa4>)
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2300      	movs	r3, #0
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fa26 	bl	8005c10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	69b9      	ldr	r1, [r7, #24]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f8b6 	bl	800593a <I2C_WaitOnTXISFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e02c      	b.n	8005832 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d105      	bne.n	80057ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057de:	893b      	ldrh	r3, [r7, #8]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80057e8:	e015      	b.n	8005816 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057ea:	893b      	ldrh	r3, [r7, #8]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	69b9      	ldr	r1, [r7, #24]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f89c 	bl	800593a <I2C_WaitOnTXISFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e012      	b.n	8005832 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800580c:	893b      	ldrh	r3, [r7, #8]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2200      	movs	r2, #0
 800581e:	2140      	movs	r1, #64	@ 0x40
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f831 	bl	8005888 <I2C_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	80002000 	.word	0x80002000

08005840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d103      	bne.n	800585e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d007      	beq.n	800587c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	619a      	str	r2, [r3, #24]
  }
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	4613      	mov	r3, r2
 8005896:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005898:	e03b      	b.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f8d6 	bl	8005a50 <I2C_IsErrorOccurred>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e041      	b.n	8005932 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d02d      	beq.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fd f8f9 	bl	8002aac <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d122      	bne.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d113      	bne.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e00f      	b.n	8005932 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4013      	ands	r3, r2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	429a      	cmp	r2, r3
 800592e:	d0b4      	beq.n	800589a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005946:	e033      	b.n	80059b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f87f 	bl	8005a50 <I2C_IsErrorOccurred>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e031      	b.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d025      	beq.n	80059b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005964:	f7fd f8a2 	bl	8002aac <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11a      	bne.n	80059b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d013      	beq.n	80059b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e007      	b.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d1c4      	bne.n	8005948 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059d4:	e02f      	b.n	8005a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f838 	bl	8005a50 <I2C_IsErrorOccurred>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e02d      	b.n	8005a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ea:	f7fd f85f 	bl	8002aac <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11a      	bne.n	8005a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d013      	beq.n	8005a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e007      	b.n	8005a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d1c8      	bne.n	80059d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	@ 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d068      	beq.n	8005b4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2210      	movs	r2, #16
 8005a82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a84:	e049      	b.n	8005b1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d045      	beq.n	8005b1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a8e:	f7fd f80d 	bl	8002aac <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <I2C_IsErrorOccurred+0x54>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d13a      	bne.n	8005b1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ab6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ac6:	d121      	bne.n	8005b0c <I2C_IsErrorOccurred+0xbc>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ace:	d01d      	beq.n	8005b0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d01a      	beq.n	8005b0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ae4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ae6:	f7fc ffe1 	bl	8002aac <HAL_GetTick>
 8005aea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aec:	e00e      	b.n	8005b0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005aee:	f7fc ffdd 	bl	8002aac <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b19      	cmp	r3, #25
 8005afa:	d907      	bls.n	8005b0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	f043 0320 	orr.w	r3, r3, #32
 8005b02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b0a:	e006      	b.n	8005b1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d1e9      	bne.n	8005aee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d003      	beq.n	8005b30 <I2C_IsErrorOccurred+0xe0>
 8005b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0aa      	beq.n	8005a86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d103      	bne.n	8005b40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	f043 0304 	orr.w	r3, r3, #4
 8005b46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f043 0308 	orr.w	r3, r3, #8
 8005b88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	f043 0302 	orr.w	r3, r3, #2
 8005baa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01c      	beq.n	8005bfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff fe3b 	bl	8005840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <I2C_IsErrorOccurred+0x1bc>)
 8005bd6:	400b      	ands	r3, r1
 8005bd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3728      	adds	r7, #40	@ 0x28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	fe00e800 	.word	0xfe00e800

08005c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	607b      	str	r3, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	817b      	strh	r3, [r7, #10]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c28:	7a7b      	ldrb	r3, [r7, #9]
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c30:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c3e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	0d5b      	lsrs	r3, r3, #21
 8005c4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c4e:	4b08      	ldr	r3, [pc, #32]	@ (8005c70 <I2C_TransferConfig+0x60>)
 8005c50:	430b      	orrs	r3, r1
 8005c52:	43db      	mvns	r3, r3
 8005c54:	ea02 0103 	and.w	r1, r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	03ff63ff 	.word	0x03ff63ff

08005c74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d138      	bne.n	8005cfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e032      	b.n	8005cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	@ 0x24
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e000      	b.n	8005cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
  }
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d139      	bne.n	8005d94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e033      	b.n	8005d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2224      	movs	r2, #36	@ 0x24
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e000      	b.n	8005d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005dac:	4b39      	ldr	r3, [pc, #228]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005db4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc4:	d905      	bls.n	8005dd2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005dc6:	4b33      	ldr	r3, [pc, #204]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	4a32      	ldr	r2, [pc, #200]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dd0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e057      	b.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ddc:	d90a      	bls.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005dde:	4b2d      	ldr	r3, [pc, #180]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	4a2a      	ldr	r2, [pc, #168]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005df0:	60d3      	str	r3, [r2, #12]
 8005df2:	e007      	b.n	8005e04 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005df4:	4b27      	ldr	r3, [pc, #156]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005dfc:	4925      	ldr	r1, [pc, #148]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005e04:	4b24      	ldr	r3, [pc, #144]	@ (8005e98 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a24      	ldr	r2, [pc, #144]	@ (8005e9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	099b      	lsrs	r3, r3, #6
 8005e10:	2232      	movs	r2, #50	@ 0x32
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	4a21      	ldr	r2, [pc, #132]	@ (8005e9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	099b      	lsrs	r3, r3, #6
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005e22:	e002      	b.n	8005e2a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <HAL_PWREx_ControlVoltageScaling+0x98>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f3      	bne.n	8005e24 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01b      	beq.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005e42:	4b15      	ldr	r3, [pc, #84]	@ (8005e98 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a15      	ldr	r2, [pc, #84]	@ (8005e9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	099b      	lsrs	r3, r3, #6
 8005e4e:	2232      	movs	r2, #50	@ 0x32
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	4a11      	ldr	r2, [pc, #68]	@ (8005e9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	099b      	lsrs	r3, r3, #6
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005e60:	e002      	b.n	8005e68 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005e68:	4b0a      	ldr	r3, [pc, #40]	@ (8005e94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f3      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e000      	b.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	46020800 	.word	0x46020800
 8005e98:	2000001c 	.word	0x2000001c
 8005e9c:	10624dd3 	.word	0x10624dd3

08005ea0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005ea4:	4b04      	ldr	r3, [pc, #16]	@ (8005eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	46020800 	.word	0x46020800

08005ebc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8005ec0:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	4a04      	ldr	r2, [pc, #16]	@ (8005ed8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eca:	6113      	str	r3, [r2, #16]
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	46020800 	.word	0x46020800

08005edc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005ee0:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	4a04      	ldr	r2, [pc, #16]	@ (8005ef8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005ee6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eea:	6113      	str	r3, [r2, #16]
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	46020800 	.word	0x46020800

08005efc <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_PWREx_EnableVddA+0x1c>)
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	4a04      	ldr	r2, [pc, #16]	@ (8005f18 <HAL_PWREx_EnableVddA+0x1c>)
 8005f06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f0a:	6113      	str	r3, [r2, #16]
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	46020800 	.word	0x46020800

08005f1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08e      	sub	sp, #56	@ 0x38
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f000 bec8 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f36:	4b99      	ldr	r3, [pc, #612]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f40:	4b96      	ldr	r3, [pc, #600]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 816c 	beq.w	8006230 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_RCC_OscConfig+0x52>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	2b0c      	cmp	r3, #12
 8005f62:	f040 80de 	bne.w	8006122 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f040 80da 	bne.w	8006122 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f000 bea5 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f80:	4b86      	ldr	r3, [pc, #536]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <HAL_RCC_OscConfig+0x7a>
 8005f8c:	4b83      	ldr	r3, [pc, #524]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f94:	e005      	b.n	8005fa2 <HAL_RCC_OscConfig+0x86>
 8005f96:	4b81      	ldr	r3, [pc, #516]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d255      	bcs.n	8006052 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 f9d9 	bl	8007368 <RCC_SetFlashLatencyFromMSIRange>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f000 be82 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005fc2:	4b76      	ldr	r3, [pc, #472]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	4a75      	ldr	r2, [pc, #468]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005fc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005fcc:	6093      	str	r3, [r2, #8]
 8005fce:	4b73      	ldr	r3, [pc, #460]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	4970      	ldr	r1, [pc, #448]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005fe8:	d309      	bcc.n	8005ffe <HAL_RCC_OscConfig+0xe2>
 8005fea:	4b6c      	ldr	r3, [pc, #432]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f023 021f 	bic.w	r2, r3, #31
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4969      	ldr	r1, [pc, #420]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60cb      	str	r3, [r1, #12]
 8005ffc:	e07e      	b.n	80060fc <HAL_RCC_OscConfig+0x1e0>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	da0a      	bge.n	800601c <HAL_RCC_OscConfig+0x100>
 8006006:	4b65      	ldr	r3, [pc, #404]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	015b      	lsls	r3, r3, #5
 8006014:	4961      	ldr	r1, [pc, #388]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006016:	4313      	orrs	r3, r2
 8006018:	60cb      	str	r3, [r1, #12]
 800601a:	e06f      	b.n	80060fc <HAL_RCC_OscConfig+0x1e0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006024:	d30a      	bcc.n	800603c <HAL_RCC_OscConfig+0x120>
 8006026:	4b5d      	ldr	r3, [pc, #372]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	029b      	lsls	r3, r3, #10
 8006034:	4959      	ldr	r1, [pc, #356]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006036:	4313      	orrs	r3, r2
 8006038:	60cb      	str	r3, [r1, #12]
 800603a:	e05f      	b.n	80060fc <HAL_RCC_OscConfig+0x1e0>
 800603c:	4b57      	ldr	r3, [pc, #348]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	03db      	lsls	r3, r3, #15
 800604a:	4954      	ldr	r1, [pc, #336]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 800604c:	4313      	orrs	r3, r2
 800604e:	60cb      	str	r3, [r1, #12]
 8006050:	e054      	b.n	80060fc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006052:	4b52      	ldr	r3, [pc, #328]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4a51      	ldr	r2, [pc, #324]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006058:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800605c:	6093      	str	r3, [r2, #8]
 800605e:	4b4f      	ldr	r3, [pc, #316]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	494c      	ldr	r1, [pc, #304]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 800606c:	4313      	orrs	r3, r2
 800606e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006078:	d309      	bcc.n	800608e <HAL_RCC_OscConfig+0x172>
 800607a:	4b48      	ldr	r3, [pc, #288]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f023 021f 	bic.w	r2, r3, #31
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4945      	ldr	r1, [pc, #276]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006088:	4313      	orrs	r3, r2
 800608a:	60cb      	str	r3, [r1, #12]
 800608c:	e028      	b.n	80060e0 <HAL_RCC_OscConfig+0x1c4>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	da0a      	bge.n	80060ac <HAL_RCC_OscConfig+0x190>
 8006096:	4b41      	ldr	r3, [pc, #260]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	015b      	lsls	r3, r3, #5
 80060a4:	493d      	ldr	r1, [pc, #244]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60cb      	str	r3, [r1, #12]
 80060aa:	e019      	b.n	80060e0 <HAL_RCC_OscConfig+0x1c4>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b4:	d30a      	bcc.n	80060cc <HAL_RCC_OscConfig+0x1b0>
 80060b6:	4b39      	ldr	r3, [pc, #228]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	029b      	lsls	r3, r3, #10
 80060c4:	4935      	ldr	r1, [pc, #212]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60cb      	str	r3, [r1, #12]
 80060ca:	e009      	b.n	80060e0 <HAL_RCC_OscConfig+0x1c4>
 80060cc:	4b33      	ldr	r3, [pc, #204]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	03db      	lsls	r3, r3, #15
 80060da:	4930      	ldr	r1, [pc, #192]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f93c 	bl	8007368 <RCC_SetFlashLatencyFromMSIRange>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f000 bde5 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80060fc:	f001 f8de 	bl	80072bc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006100:	4b27      	ldr	r3, [pc, #156]	@ (80061a0 <HAL_RCC_OscConfig+0x284>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f7fc fc47 	bl	8002998 <HAL_InitTick>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 808a 	beq.w	800622e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800611a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800611e:	f000 bdd2 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d066      	beq.n	80061f8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800612a:	4b1c      	ldr	r3, [pc, #112]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1b      	ldr	r2, [pc, #108]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006136:	f7fc fcb9 	bl	8002aac <HAL_GetTick>
 800613a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800613c:	e009      	b.n	8006152 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800613e:	f7fc fcb5 	bl	8002aac <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d902      	bls.n	8006152 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	f000 bdba 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006152:	4b12      	ldr	r3, [pc, #72]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0ef      	beq.n	800613e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800615e:	4b0f      	ldr	r3, [pc, #60]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4a0e      	ldr	r2, [pc, #56]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006164:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006168:	6093      	str	r3, [r2, #8]
 800616a:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	4909      	ldr	r1, [pc, #36]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006178:	4313      	orrs	r3, r2
 800617a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006184:	d30e      	bcc.n	80061a4 <HAL_RCC_OscConfig+0x288>
 8006186:	4b05      	ldr	r3, [pc, #20]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f023 021f 	bic.w	r2, r3, #31
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	4902      	ldr	r1, [pc, #8]	@ (800619c <HAL_RCC_OscConfig+0x280>)
 8006194:	4313      	orrs	r3, r2
 8006196:	60cb      	str	r3, [r1, #12]
 8006198:	e04a      	b.n	8006230 <HAL_RCC_OscConfig+0x314>
 800619a:	bf00      	nop
 800619c:	46020c00 	.word	0x46020c00
 80061a0:	20000020 	.word	0x20000020
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	da0a      	bge.n	80061c2 <HAL_RCC_OscConfig+0x2a6>
 80061ac:	4b98      	ldr	r3, [pc, #608]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	015b      	lsls	r3, r3, #5
 80061ba:	4995      	ldr	r1, [pc, #596]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	60cb      	str	r3, [r1, #12]
 80061c0:	e036      	b.n	8006230 <HAL_RCC_OscConfig+0x314>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ca:	d30a      	bcc.n	80061e2 <HAL_RCC_OscConfig+0x2c6>
 80061cc:	4b90      	ldr	r3, [pc, #576]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	029b      	lsls	r3, r3, #10
 80061da:	498d      	ldr	r1, [pc, #564]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	60cb      	str	r3, [r1, #12]
 80061e0:	e026      	b.n	8006230 <HAL_RCC_OscConfig+0x314>
 80061e2:	4b8b      	ldr	r3, [pc, #556]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	03db      	lsls	r3, r3, #15
 80061f0:	4987      	ldr	r1, [pc, #540]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60cb      	str	r3, [r1, #12]
 80061f6:	e01b      	b.n	8006230 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80061f8:	4b85      	ldr	r3, [pc, #532]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a84      	ldr	r2, [pc, #528]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006204:	f7fc fc52 	bl	8002aac <HAL_GetTick>
 8006208:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800620a:	e009      	b.n	8006220 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800620c:	f7fc fc4e 	bl	8002aac <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d902      	bls.n	8006220 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	f000 bd53 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006220:	4b7b      	ldr	r3, [pc, #492]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ef      	bne.n	800620c <HAL_RCC_OscConfig+0x2f0>
 800622c:	e000      	b.n	8006230 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800622e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 808b 	beq.w	8006354 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	2b08      	cmp	r3, #8
 8006242:	d005      	beq.n	8006250 <HAL_RCC_OscConfig+0x334>
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	2b0c      	cmp	r3, #12
 8006248:	d109      	bne.n	800625e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800624a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624c:	2b03      	cmp	r3, #3
 800624e:	d106      	bne.n	800625e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d17d      	bne.n	8006354 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f000 bd34 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006266:	d106      	bne.n	8006276 <HAL_RCC_OscConfig+0x35a>
 8006268:	4b69      	ldr	r3, [pc, #420]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a68      	ldr	r2, [pc, #416]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 800626e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	e041      	b.n	80062fa <HAL_RCC_OscConfig+0x3de>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800627e:	d112      	bne.n	80062a6 <HAL_RCC_OscConfig+0x38a>
 8006280:	4b63      	ldr	r3, [pc, #396]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a62      	ldr	r2, [pc, #392]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 8006286:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	4b60      	ldr	r3, [pc, #384]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5f      	ldr	r2, [pc, #380]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 8006292:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b5d      	ldr	r3, [pc, #372]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a5c      	ldr	r2, [pc, #368]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 800629e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	e029      	b.n	80062fa <HAL_RCC_OscConfig+0x3de>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80062ae:	d112      	bne.n	80062d6 <HAL_RCC_OscConfig+0x3ba>
 80062b0:	4b57      	ldr	r3, [pc, #348]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a56      	ldr	r2, [pc, #344]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4b54      	ldr	r3, [pc, #336]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a53      	ldr	r2, [pc, #332]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	4b51      	ldr	r3, [pc, #324]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a50      	ldr	r2, [pc, #320]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e011      	b.n	80062fa <HAL_RCC_OscConfig+0x3de>
 80062d6:	4b4e      	ldr	r3, [pc, #312]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a4d      	ldr	r2, [pc, #308]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	4b48      	ldr	r3, [pc, #288]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a47      	ldr	r2, [pc, #284]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80062f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80062f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d014      	beq.n	800632c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006302:	f7fc fbd3 	bl	8002aac <HAL_GetTick>
 8006306:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006308:	e009      	b.n	800631e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800630a:	f7fc fbcf 	bl	8002aac <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b64      	cmp	r3, #100	@ 0x64
 8006316:	d902      	bls.n	800631e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	f000 bcd4 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800631e:	4b3c      	ldr	r3, [pc, #240]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ef      	beq.n	800630a <HAL_RCC_OscConfig+0x3ee>
 800632a:	e013      	b.n	8006354 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800632c:	f7fc fbbe 	bl	8002aac <HAL_GetTick>
 8006330:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006332:	e009      	b.n	8006348 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006334:	f7fc fbba 	bl	8002aac <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b64      	cmp	r3, #100	@ 0x64
 8006340:	d902      	bls.n	8006348 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	f000 bcbf 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006348:	4b31      	ldr	r3, [pc, #196]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ef      	bne.n	8006334 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05f      	beq.n	8006420 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	2b04      	cmp	r3, #4
 8006364:	d005      	beq.n	8006372 <HAL_RCC_OscConfig+0x456>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2b0c      	cmp	r3, #12
 800636a:	d114      	bne.n	8006396 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	2b02      	cmp	r3, #2
 8006370:	d111      	bne.n	8006396 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f000 bca3 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006380:	4b23      	ldr	r3, [pc, #140]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	4920      	ldr	r1, [pc, #128]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 8006390:	4313      	orrs	r3, r2
 8006392:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006394:	e044      	b.n	8006420 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d024      	beq.n	80063e8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800639e:	4b1c      	ldr	r3, [pc, #112]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80063a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80063aa:	f7fc fb7f 	bl	8002aac <HAL_GetTick>
 80063ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b0:	e009      	b.n	80063c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b2:	f7fc fb7b 	bl	8002aac <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d902      	bls.n	80063c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	f000 bc80 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c6:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0ef      	beq.n	80063b2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80063d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	490b      	ldr	r1, [pc, #44]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	610b      	str	r3, [r1, #16]
 80063e6:	e01b      	b.n	8006420 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80063e8:	4b09      	ldr	r3, [pc, #36]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a08      	ldr	r2, [pc, #32]	@ (8006410 <HAL_RCC_OscConfig+0x4f4>)
 80063ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80063f4:	f7fc fb5a 	bl	8002aac <HAL_GetTick>
 80063f8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063fa:	e00b      	b.n	8006414 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063fc:	f7fc fb56 	bl	8002aac <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d904      	bls.n	8006414 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	f000 bc5b 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
 8006410:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006414:	4baf      	ldr	r3, [pc, #700]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1ed      	bne.n	80063fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80c8 	beq.w	80065be <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006434:	4ba7      	ldr	r3, [pc, #668]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d111      	bne.n	8006466 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006442:	4ba4      	ldr	r3, [pc, #656]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006448:	4aa2      	ldr	r2, [pc, #648]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 800644a:	f043 0304 	orr.w	r3, r3, #4
 800644e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006452:	4ba0      	ldr	r3, [pc, #640]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006466:	4b9c      	ldr	r3, [pc, #624]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d119      	bne.n	80064a6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006472:	4b99      	ldr	r3, [pc, #612]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 8006474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006476:	4a98      	ldr	r2, [pc, #608]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800647e:	f7fc fb15 	bl	8002aac <HAL_GetTick>
 8006482:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006484:	e009      	b.n	800649a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006486:	f7fc fb11 	bl	8002aac <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d902      	bls.n	800649a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	f000 bc16 	b.w	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800649a:	4b8f      	ldr	r3, [pc, #572]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0ef      	beq.n	8006486 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d05f      	beq.n	800656e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80064ae:	4b89      	ldr	r3, [pc, #548]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80064b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064b4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d037      	beq.n	8006534 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d006      	beq.n	80064dc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e3f4      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01b      	beq.n	800651e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80064e6:	4b7b      	ldr	r3, [pc, #492]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80064e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ec:	4a79      	ldr	r2, [pc, #484]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80064ee:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80064f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80064f6:	f7fc fad9 	bl	8002aac <HAL_GetTick>
 80064fa:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064fe:	f7fc fad5 	bl	8002aac <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b05      	cmp	r3, #5
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e3da      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006510:	4b70      	ldr	r3, [pc, #448]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1ef      	bne.n	80064fe <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800651e:	4b6d      	ldr	r3, [pc, #436]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006524:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	4969      	ldr	r1, [pc, #420]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006534:	4b67      	ldr	r3, [pc, #412]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800653a:	4a66      	ldr	r2, [pc, #408]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 800653c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006540:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006544:	f7fc fab2 	bl	8002aac <HAL_GetTick>
 8006548:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800654c:	f7fc faae 	bl	8002aac <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b05      	cmp	r3, #5
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e3b3      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800655e:	4b5d      	ldr	r3, [pc, #372]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0ef      	beq.n	800654c <HAL_RCC_OscConfig+0x630>
 800656c:	e01b      	b.n	80065a6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800656e:	4b59      	ldr	r3, [pc, #356]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006574:	4a57      	ldr	r2, [pc, #348]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006576:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800657a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800657e:	f7fc fa95 	bl	8002aac <HAL_GetTick>
 8006582:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006586:	f7fc fa91 	bl	8002aac <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b05      	cmp	r3, #5
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e396      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006598:	4b4e      	ldr	r3, [pc, #312]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 800659a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800659e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1ef      	bne.n	8006586 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065a6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d107      	bne.n	80065be <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ae:	4b49      	ldr	r3, [pc, #292]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80065b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b4:	4a47      	ldr	r2, [pc, #284]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80065b6:	f023 0304 	bic.w	r3, r3, #4
 80065ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8111 	beq.w	80067ee <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d2:	4b40      	ldr	r3, [pc, #256]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80065d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d111      	bne.n	8006604 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e0:	4b3c      	ldr	r3, [pc, #240]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80065e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065e6:	4a3b      	ldr	r2, [pc, #236]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80065e8:	f043 0304 	orr.w	r3, r3, #4
 80065ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80065f0:	4b38      	ldr	r3, [pc, #224]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80065f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006604:	4b34      	ldr	r3, [pc, #208]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 8006606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d118      	bne.n	8006642 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006610:	4b31      	ldr	r3, [pc, #196]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	4a30      	ldr	r2, [pc, #192]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800661c:	f7fc fa46 	bl	8002aac <HAL_GetTick>
 8006620:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006624:	f7fc fa42 	bl	8002aac <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e347      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006636:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <HAL_RCC_OscConfig+0x7bc>)
 8006638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01f      	beq.n	800668e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d010      	beq.n	800667c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800665a:	4b1e      	ldr	r3, [pc, #120]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 800665c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006660:	4a1c      	ldr	r2, [pc, #112]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800666a:	4b1a      	ldr	r3, [pc, #104]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 800666c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006670:	4a18      	ldr	r2, [pc, #96]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800667a:	e018      	b.n	80066ae <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800667c:	4b15      	ldr	r3, [pc, #84]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 800667e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006682:	4a14      	ldr	r2, [pc, #80]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800668c:	e00f      	b.n	80066ae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800668e:	4b11      	ldr	r3, [pc, #68]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006694:	4a0f      	ldr	r2, [pc, #60]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800669e:	4b0d      	ldr	r3, [pc, #52]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80066a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066a4:	4a0b      	ldr	r2, [pc, #44]	@ (80066d4 <HAL_RCC_OscConfig+0x7b8>)
 80066a6:	f023 0304 	bic.w	r3, r3, #4
 80066aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d057      	beq.n	8006766 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80066b6:	f7fc f9f9 	bl	8002aac <HAL_GetTick>
 80066ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066bc:	e00e      	b.n	80066dc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066be:	f7fc f9f5 	bl	8002aac <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d905      	bls.n	80066dc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e2f8      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
 80066d4:	46020c00 	.word	0x46020c00
 80066d8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066dc:	4b9c      	ldr	r3, [pc, #624]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80066de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0e9      	beq.n	80066be <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01b      	beq.n	800672e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80066f6:	4b96      	ldr	r3, [pc, #600]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80066f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066fc:	4a94      	ldr	r2, [pc, #592]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80066fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006706:	e00a      	b.n	800671e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006708:	f7fc f9d0 	bl	8002aac <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e2d3      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800671e:	4b8c      	ldr	r3, [pc, #560]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ed      	beq.n	8006708 <HAL_RCC_OscConfig+0x7ec>
 800672c:	e053      	b.n	80067d6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800672e:	4b88      	ldr	r3, [pc, #544]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006734:	4a86      	ldr	r2, [pc, #536]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800673a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800673e:	e00a      	b.n	8006756 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006740:	f7fc f9b4 	bl	8002aac <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e2b7      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006756:	4b7e      	ldr	r3, [pc, #504]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800675c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ed      	bne.n	8006740 <HAL_RCC_OscConfig+0x824>
 8006764:	e037      	b.n	80067d6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006766:	f7fc f9a1 	bl	8002aac <HAL_GetTick>
 800676a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800676c:	e00a      	b.n	8006784 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676e:	f7fc f99d 	bl	8002aac <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800677c:	4293      	cmp	r3, r2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e2a0      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006784:	4b72      	ldr	r3, [pc, #456]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1ed      	bne.n	800676e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006792:	4b6f      	ldr	r3, [pc, #444]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01a      	beq.n	80067d6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80067a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80067a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067a6:	4a6a      	ldr	r2, [pc, #424]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80067a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067b0:	e00a      	b.n	80067c8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b2:	f7fc f97b 	bl	8002aac <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e27e      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067c8:	4b61      	ldr	r3, [pc, #388]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80067ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1ed      	bne.n	80067b2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067d6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d107      	bne.n	80067ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067de:	4b5c      	ldr	r3, [pc, #368]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80067e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80067e6:	f023 0304 	bic.w	r3, r3, #4
 80067ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d036      	beq.n	8006868 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d019      	beq.n	8006836 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006802:	4b53      	ldr	r3, [pc, #332]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a52      	ldr	r2, [pc, #328]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800680c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800680e:	f7fc f94d 	bl	8002aac <HAL_GetTick>
 8006812:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006816:	f7fc f949 	bl	8002aac <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e24e      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006828:	4b49      	ldr	r3, [pc, #292]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x8fa>
 8006834:	e018      	b.n	8006868 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006836:	4b46      	ldr	r3, [pc, #280]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a45      	ldr	r2, [pc, #276]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 800683c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006840:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006842:	f7fc f933 	bl	8002aac <HAL_GetTick>
 8006846:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800684a:	f7fc f92f 	bl	8002aac <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e234      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800685c:	4b3c      	ldr	r3, [pc, #240]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006870:	2b00      	cmp	r3, #0
 8006872:	d036      	beq.n	80068e2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	2b00      	cmp	r3, #0
 800687a:	d019      	beq.n	80068b0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800687c:	4b34      	ldr	r3, [pc, #208]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a33      	ldr	r2, [pc, #204]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006886:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006888:	f7fc f910 	bl	8002aac <HAL_GetTick>
 800688c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006890:	f7fc f90c 	bl	8002aac <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e211      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80068a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x974>
 80068ae:	e018      	b.n	80068e2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80068b0:	4b27      	ldr	r3, [pc, #156]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a26      	ldr	r2, [pc, #152]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80068b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80068bc:	f7fc f8f6 	bl	8002aac <HAL_GetTick>
 80068c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80068c4:	f7fc f8f2 	bl	8002aac <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e1f7      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80068d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d07f      	beq.n	80069ee <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d062      	beq.n	80069bc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80068f6:	4b16      	ldr	r3, [pc, #88]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 80068fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006900:	6093      	str	r3, [r2, #8]
 8006902:	4b13      	ldr	r3, [pc, #76]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690e:	4910      	ldr	r1, [pc, #64]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006910:	4313      	orrs	r3, r2
 8006912:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800691c:	d309      	bcc.n	8006932 <HAL_RCC_OscConfig+0xa16>
 800691e:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f023 021f 	bic.w	r2, r3, #31
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	4909      	ldr	r1, [pc, #36]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 800692c:	4313      	orrs	r3, r2
 800692e:	60cb      	str	r3, [r1, #12]
 8006930:	e02a      	b.n	8006988 <HAL_RCC_OscConfig+0xa6c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	da0c      	bge.n	8006954 <HAL_RCC_OscConfig+0xa38>
 800693a:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	015b      	lsls	r3, r3, #5
 8006948:	4901      	ldr	r1, [pc, #4]	@ (8006950 <HAL_RCC_OscConfig+0xa34>)
 800694a:	4313      	orrs	r3, r2
 800694c:	60cb      	str	r3, [r1, #12]
 800694e:	e01b      	b.n	8006988 <HAL_RCC_OscConfig+0xa6c>
 8006950:	46020c00 	.word	0x46020c00
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800695c:	d30a      	bcc.n	8006974 <HAL_RCC_OscConfig+0xa58>
 800695e:	4ba1      	ldr	r3, [pc, #644]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	029b      	lsls	r3, r3, #10
 800696c:	499d      	ldr	r1, [pc, #628]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 800696e:	4313      	orrs	r3, r2
 8006970:	60cb      	str	r3, [r1, #12]
 8006972:	e009      	b.n	8006988 <HAL_RCC_OscConfig+0xa6c>
 8006974:	4b9b      	ldr	r3, [pc, #620]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	03db      	lsls	r3, r3, #15
 8006982:	4998      	ldr	r1, [pc, #608]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006984:	4313      	orrs	r3, r2
 8006986:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006988:	4b96      	ldr	r3, [pc, #600]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a95      	ldr	r2, [pc, #596]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 800698e:	f043 0310 	orr.w	r3, r3, #16
 8006992:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006994:	f7fc f88a 	bl	8002aac <HAL_GetTick>
 8006998:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800699c:	f7fc f886 	bl	8002aac <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e18b      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80069ae:	4b8d      	ldr	r3, [pc, #564]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0xa80>
 80069ba:	e018      	b.n	80069ee <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80069bc:	4b89      	ldr	r3, [pc, #548]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a88      	ldr	r2, [pc, #544]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 80069c2:	f023 0310 	bic.w	r3, r3, #16
 80069c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80069c8:	f7fc f870 	bl	8002aac <HAL_GetTick>
 80069cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80069d0:	f7fc f86c 	bl	8002aac <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e171      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80069e2:	4b80      	ldr	r3, [pc, #512]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 8166 	beq.w	8006cc4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069fe:	4b79      	ldr	r3, [pc, #484]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 030c 	and.w	r3, r3, #12
 8006a06:	2b0c      	cmp	r3, #12
 8006a08:	f000 80f2 	beq.w	8006bf0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f040 80c5 	bne.w	8006ba0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006a16:	4b73      	ldr	r3, [pc, #460]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a72      	ldr	r2, [pc, #456]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a22:	f7fc f843 	bl	8002aac <HAL_GetTick>
 8006a26:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2a:	f7fc f83f 	bl	8002aac <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e144      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a3c:	4b69      	ldr	r3, [pc, #420]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f0      	bne.n	8006a2a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a48:	4b66      	ldr	r3, [pc, #408]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d111      	bne.n	8006a7a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	4b63      	ldr	r3, [pc, #396]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a5c:	4a61      	ldr	r2, [pc, #388]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a5e:	f043 0304 	orr.w	r3, r3, #4
 8006a62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006a66:	4b5f      	ldr	r3, [pc, #380]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006be8 <HAL_RCC_OscConfig+0xccc>)
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a86:	d102      	bne.n	8006a8e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006a8e:	4b56      	ldr	r3, [pc, #344]	@ (8006be8 <HAL_RCC_OscConfig+0xccc>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	4a55      	ldr	r2, [pc, #340]	@ (8006be8 <HAL_RCC_OscConfig+0xccc>)
 8006a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a98:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006a9a:	4b52      	ldr	r3, [pc, #328]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006aae:	3a01      	subs	r2, #1
 8006ab0:	0212      	lsls	r2, r2, #8
 8006ab2:	4311      	orrs	r1, r2
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	494a      	ldr	r1, [pc, #296]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ac0:	4b48      	ldr	r3, [pc, #288]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ac4:	4b49      	ldr	r3, [pc, #292]	@ (8006bec <HAL_RCC_OscConfig+0xcd0>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006acc:	3a01      	subs	r2, #1
 8006ace:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006ad6:	3a01      	subs	r2, #1
 8006ad8:	0252      	lsls	r2, r2, #9
 8006ada:	b292      	uxth	r2, r2
 8006adc:	4311      	orrs	r1, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ae2:	3a01      	subs	r2, #1
 8006ae4:	0412      	lsls	r2, r2, #16
 8006ae6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006aea:	4311      	orrs	r1, r2
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006af0:	3a01      	subs	r2, #1
 8006af2:	0612      	lsls	r2, r2, #24
 8006af4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006af8:	430a      	orrs	r2, r1
 8006afa:	493a      	ldr	r1, [pc, #232]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006b00:	4b38      	ldr	r3, [pc, #224]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	4a37      	ldr	r2, [pc, #220]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b06:	f023 0310 	bic.w	r3, r3, #16
 8006b0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b10:	4a34      	ldr	r2, [pc, #208]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006b16:	4b33      	ldr	r3, [pc, #204]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	4a32      	ldr	r2, [pc, #200]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b1c:	f043 0310 	orr.w	r3, r3, #16
 8006b20:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006b22:	4b30      	ldr	r3, [pc, #192]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b26:	f023 020c 	bic.w	r2, r3, #12
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2e:	492d      	ldr	r1, [pc, #180]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006b34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d105      	bne.n	8006b48 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006be8 <HAL_RCC_OscConfig+0xccc>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4a29      	ldr	r2, [pc, #164]	@ (8006be8 <HAL_RCC_OscConfig+0xccc>)
 8006b42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b46:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006b48:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006b50:	4b24      	ldr	r3, [pc, #144]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b56:	4a23      	ldr	r2, [pc, #140]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b58:	f023 0304 	bic.w	r3, r3, #4
 8006b5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006b60:	4b20      	ldr	r3, [pc, #128]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1f      	ldr	r2, [pc, #124]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b6a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b6c:	f7fb ff9e 	bl	8002aac <HAL_GetTick>
 8006b70:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b74:	f7fb ff9a 	bl	8002aac <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e09f      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006b86:	4b17      	ldr	r3, [pc, #92]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f0      	beq.n	8006b74 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b96:	4a13      	ldr	r2, [pc, #76]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b9c:	6293      	str	r3, [r2, #40]	@ 0x28
 8006b9e:	e091      	b.n	8006cc4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006ba0:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006baa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006bac:	f7fb ff7e 	bl	8002aac <HAL_GetTick>
 8006bb0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fb ff7a 	bl	8002aac <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e07f      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006bc6:	4b07      	ldr	r3, [pc, #28]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006bd2:	4b04      	ldr	r3, [pc, #16]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd6:	4a03      	ldr	r2, [pc, #12]	@ (8006be4 <HAL_RCC_OscConfig+0xcc8>)
 8006bd8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006bdc:	f023 0303 	bic.w	r3, r3, #3
 8006be0:	6293      	str	r3, [r2, #40]	@ 0x28
 8006be2:	e06f      	b.n	8006cc4 <HAL_RCC_OscConfig+0xda8>
 8006be4:	46020c00 	.word	0x46020c00
 8006be8:	46020800 	.word	0x46020800
 8006bec:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006bf0:	4b37      	ldr	r3, [pc, #220]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bf6:	4b36      	ldr	r3, [pc, #216]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d039      	beq.n	8006c78 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f003 0203 	and.w	r2, r3, #3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d132      	bne.n	8006c78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d129      	bne.n	8006c78 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d122      	bne.n	8006c78 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c3c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d11a      	bne.n	8006c78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	0a5b      	lsrs	r3, r3, #9
 8006c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d111      	bne.n	8006c78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	0c1b      	lsrs	r3, r3, #16
 8006c58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c60:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d108      	bne.n	8006c78 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	0e1b      	lsrs	r3, r3, #24
 8006c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c72:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d001      	beq.n	8006c7c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e024      	b.n	8006cc6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006c7c:	4b14      	ldr	r3, [pc, #80]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c80:	08db      	lsrs	r3, r3, #3
 8006c82:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d01a      	beq.n	8006cc4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006c8e:	4b10      	ldr	r3, [pc, #64]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c92:	4a0f      	ldr	r2, [pc, #60]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006c94:	f023 0310 	bic.w	r3, r3, #16
 8006c98:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9a:	f7fb ff07 	bl	8002aac <HAL_GetTick>
 8006c9e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006ca0:	bf00      	nop
 8006ca2:	f7fb ff03 	bl	8002aac <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d0f9      	beq.n	8006ca2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb2:	4a07      	ldr	r2, [pc, #28]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006cb8:	4b05      	ldr	r3, [pc, #20]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	4a04      	ldr	r2, [pc, #16]	@ (8006cd0 <HAL_RCC_OscConfig+0xdb4>)
 8006cbe:	f043 0310 	orr.w	r3, r3, #16
 8006cc2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3738      	adds	r7, #56	@ 0x38
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	46020c00 	.word	0x46020c00

08006cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e1d9      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b9b      	ldr	r3, [pc, #620]	@ (8006f58 <HAL_RCC_ClockConfig+0x284>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d910      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b98      	ldr	r3, [pc, #608]	@ (8006f58 <HAL_RCC_ClockConfig+0x284>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 020f 	bic.w	r2, r3, #15
 8006cfe:	4996      	ldr	r1, [pc, #600]	@ (8006f58 <HAL_RCC_ClockConfig+0x284>)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	4b94      	ldr	r3, [pc, #592]	@ (8006f58 <HAL_RCC_ClockConfig+0x284>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e1c1      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d010      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	4b8c      	ldr	r3, [pc, #560]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d908      	bls.n	8006d46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006d34:	4b89      	ldr	r3, [pc, #548]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	4986      	ldr	r1, [pc, #536]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d012      	beq.n	8006d78 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	4b81      	ldr	r3, [pc, #516]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	091b      	lsrs	r3, r3, #4
 8006d5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d909      	bls.n	8006d78 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006d64:	4b7d      	ldr	r3, [pc, #500]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	497a      	ldr	r1, [pc, #488]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d010      	beq.n	8006da6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	4b74      	ldr	r3, [pc, #464]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d908      	bls.n	8006da6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006d94:	4b71      	ldr	r3, [pc, #452]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	496e      	ldr	r1, [pc, #440]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d010      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	4b69      	ldr	r3, [pc, #420]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d908      	bls.n	8006dd4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006dc2:	4b66      	ldr	r3, [pc, #408]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 020f 	bic.w	r2, r3, #15
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	4963      	ldr	r1, [pc, #396]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80d2 	beq.w	8006f86 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d143      	bne.n	8006e76 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dee:	4b5b      	ldr	r3, [pc, #364]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d110      	bne.n	8006e1e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006dfc:	4b57      	ldr	r3, [pc, #348]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e02:	4a56      	ldr	r2, [pc, #344]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006e04:	f043 0304 	orr.w	r3, r3, #4
 8006e08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006e0c:	4b53      	ldr	r3, [pc, #332]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006e1e:	f7fb fe45 	bl	8002aac <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006e24:	4b4e      	ldr	r3, [pc, #312]	@ (8006f60 <HAL_RCC_ClockConfig+0x28c>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00f      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006e32:	f7fb fe3b 	bl	8002aac <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e12b      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006e44:	4b46      	ldr	r3, [pc, #280]	@ (8006f60 <HAL_RCC_ClockConfig+0x28c>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0f0      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d107      	bne.n	8006e66 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006e56:	4b41      	ldr	r3, [pc, #260]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006e5e:	f023 0304 	bic.w	r3, r3, #4
 8006e62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006e66:	4b3d      	ldr	r3, [pc, #244]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d121      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e112      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e7e:	4b37      	ldr	r3, [pc, #220]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d115      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e106      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d107      	bne.n	8006ea6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006e96:	4b31      	ldr	r3, [pc, #196]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d109      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0fa      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0f2      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006eb6:	4b29      	ldr	r3, [pc, #164]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f023 0203 	bic.w	r2, r3, #3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4926      	ldr	r1, [pc, #152]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006ec8:	f7fb fdf0 	bl	8002aac <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d112      	bne.n	8006efc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed8:	f7fb fde8 	bl	8002aac <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e0d6      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006eee:	4b1b      	ldr	r3, [pc, #108]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	2b0c      	cmp	r3, #12
 8006ef8:	d1ee      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x204>
 8006efa:	e044      	b.n	8006f86 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d112      	bne.n	8006f2a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f06:	f7fb fdd1 	bl	8002aac <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e0bf      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	f003 030c 	and.w	r3, r3, #12
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d1ee      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x232>
 8006f28:	e02d      	b.n	8006f86 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d123      	bne.n	8006f7a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f32:	e00a      	b.n	8006f4a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f34:	f7fb fdba 	bl	8002aac <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e0a8      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f4a:	4b04      	ldr	r3, [pc, #16]	@ (8006f5c <HAL_RCC_ClockConfig+0x288>)
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f003 030c 	and.w	r3, r3, #12
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1ee      	bne.n	8006f34 <HAL_RCC_ClockConfig+0x260>
 8006f56:	e016      	b.n	8006f86 <HAL_RCC_ClockConfig+0x2b2>
 8006f58:	40022000 	.word	0x40022000
 8006f5c:	46020c00 	.word	0x46020c00
 8006f60:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f64:	f7fb fda2 	bl	8002aac <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e090      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d1ee      	bne.n	8006f64 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d010      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	4b43      	ldr	r3, [pc, #268]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d208      	bcs.n	8006fb4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006fa2:	4b40      	ldr	r3, [pc, #256]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f023 020f 	bic.w	r2, r3, #15
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	493d      	ldr	r1, [pc, #244]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80070a8 <HAL_RCC_ClockConfig+0x3d4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d210      	bcs.n	8006fe4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc2:	4b39      	ldr	r3, [pc, #228]	@ (80070a8 <HAL_RCC_ClockConfig+0x3d4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 020f 	bic.w	r2, r3, #15
 8006fca:	4937      	ldr	r1, [pc, #220]	@ (80070a8 <HAL_RCC_ClockConfig+0x3d4>)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd2:	4b35      	ldr	r3, [pc, #212]	@ (80070a8 <HAL_RCC_ClockConfig+0x3d4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e05b      	b.n	800709c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d010      	beq.n	8007012 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d208      	bcs.n	8007012 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007000:	4b28      	ldr	r3, [pc, #160]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4925      	ldr	r1, [pc, #148]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 800700e:	4313      	orrs	r3, r2
 8007010:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d012      	beq.n	8007044 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	4b20      	ldr	r3, [pc, #128]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	091b      	lsrs	r3, r3, #4
 8007028:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800702c:	429a      	cmp	r2, r3
 800702e:	d209      	bcs.n	8007044 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007030:	4b1c      	ldr	r3, [pc, #112]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	4919      	ldr	r1, [pc, #100]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8007040:	4313      	orrs	r3, r2
 8007042:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b00      	cmp	r3, #0
 800704e:	d010      	beq.n	8007072 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800705c:	429a      	cmp	r2, r3
 800705e:	d208      	bcs.n	8007072 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007060:	4b10      	ldr	r3, [pc, #64]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 8007062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007064:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	490d      	ldr	r1, [pc, #52]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 800706e:	4313      	orrs	r3, r2
 8007070:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007072:	f000 f821 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8007076:	4602      	mov	r2, r0
 8007078:	4b0a      	ldr	r3, [pc, #40]	@ (80070a4 <HAL_RCC_ClockConfig+0x3d0>)
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	490a      	ldr	r1, [pc, #40]	@ (80070ac <HAL_RCC_ClockConfig+0x3d8>)
 8007082:	5ccb      	ldrb	r3, [r1, r3]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	4a09      	ldr	r2, [pc, #36]	@ (80070b0 <HAL_RCC_ClockConfig+0x3dc>)
 800708a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800708c:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <HAL_RCC_ClockConfig+0x3e0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f7fb fc81 	bl	8002998 <HAL_InitTick>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]

  return status;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	46020c00 	.word	0x46020c00
 80070a8:	40022000 	.word	0x40022000
 80070ac:	0800caf4 	.word	0x0800caf4
 80070b0:	2000001c 	.word	0x2000001c
 80070b4:	20000020 	.word	0x20000020

080070b8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b08b      	sub	sp, #44	@ 0x2c
 80070bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c6:	4b78      	ldr	r3, [pc, #480]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070d0:	4b75      	ldr	r3, [pc, #468]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <HAL_RCC_GetSysClockFreq+0x34>
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b0c      	cmp	r3, #12
 80070e4:	d121      	bne.n	800712a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d11e      	bne.n	800712a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80070ec:	4b6e      	ldr	r3, [pc, #440]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d107      	bne.n	8007108 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80070f8:	4b6b      	ldr	r3, [pc, #428]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070fe:	0b1b      	lsrs	r3, r3, #12
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	627b      	str	r3, [r7, #36]	@ 0x24
 8007106:	e005      	b.n	8007114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007108:	4b67      	ldr	r3, [pc, #412]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	0f1b      	lsrs	r3, r3, #28
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007114:	4a65      	ldr	r2, [pc, #404]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800711c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d110      	bne.n	8007146 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007128:	e00d      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800712a:	4b5f      	ldr	r3, [pc, #380]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b04      	cmp	r3, #4
 8007134:	d102      	bne.n	800713c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007136:	4b5e      	ldr	r3, [pc, #376]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007138:	623b      	str	r3, [r7, #32]
 800713a:	e004      	b.n	8007146 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b08      	cmp	r3, #8
 8007140:	d101      	bne.n	8007146 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007142:	4b5b      	ldr	r3, [pc, #364]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007144:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b0c      	cmp	r3, #12
 800714a:	f040 80a5 	bne.w	8007298 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800714e:	4b56      	ldr	r3, [pc, #344]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007158:	4b53      	ldr	r3, [pc, #332]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	0a1b      	lsrs	r3, r3, #8
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007166:	4b50      	ldr	r3, [pc, #320]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716a:	091b      	lsrs	r3, r3, #4
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007172:	4b4d      	ldr	r3, [pc, #308]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007176:	08db      	lsrs	r3, r3, #3
 8007178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	fb02 f303 	mul.w	r3, r2, r3
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d003      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0xe4>
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d022      	beq.n	80071e0 <HAL_RCC_GetSysClockFreq+0x128>
 800719a:	e043      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80072b4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80071aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ae:	4b3e      	ldr	r3, [pc, #248]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80071be:	ed97 6a01 	vldr	s12, [r7, #4]
 80071c2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80072b8 <HAL_RCC_GetSysClockFreq+0x200>
 80071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80071ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071de:	e046      	b.n	800726e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80072b4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b2d      	ldr	r3, [pc, #180]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007202:	ed97 6a01 	vldr	s12, [r7, #4]
 8007206:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80072b8 <HAL_RCC_GetSysClockFreq+0x200>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007222:	e024      	b.n	800726e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723c:	4b1a      	ldr	r3, [pc, #104]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800723e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800724c:	ed97 6a01 	vldr	s12, [r7, #4]
 8007250:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80072b8 <HAL_RCC_GetSysClockFreq+0x200>
 8007254:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007258:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800725c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007260:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007268:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800726e:	4b0e      	ldr	r3, [pc, #56]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007272:	0e1b      	lsrs	r3, r3, #24
 8007274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007278:	3301      	adds	r3, #1
 800727a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007286:	edd7 6a07 	vldr	s13, [r7, #28]
 800728a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007292:	ee17 3a90 	vmov	r3, s15
 8007296:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007298:	6a3b      	ldr	r3, [r7, #32]
}
 800729a:	4618      	mov	r0, r3
 800729c:	372c      	adds	r7, #44	@ 0x2c
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	46020c00 	.word	0x46020c00
 80072ac:	0800cb0c 	.word	0x0800cb0c
 80072b0:	00f42400 	.word	0x00f42400
 80072b4:	4b742400 	.word	0x4b742400
 80072b8:	46000000 	.word	0x46000000

080072bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80072c0:	f7ff fefa 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80072c4:	4602      	mov	r2, r0
 80072c6:	4b07      	ldr	r3, [pc, #28]	@ (80072e4 <HAL_RCC_GetHCLKFreq+0x28>)
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	4906      	ldr	r1, [pc, #24]	@ (80072e8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80072d0:	5ccb      	ldrb	r3, [r1, r3]
 80072d2:	fa22 f303 	lsr.w	r3, r2, r3
 80072d6:	4a05      	ldr	r2, [pc, #20]	@ (80072ec <HAL_RCC_GetHCLKFreq+0x30>)
 80072d8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80072da:	4b04      	ldr	r3, [pc, #16]	@ (80072ec <HAL_RCC_GetHCLKFreq+0x30>)
 80072dc:	681b      	ldr	r3, [r3, #0]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	46020c00 	.word	0x46020c00
 80072e8:	0800caf4 	.word	0x0800caf4
 80072ec:	2000001c 	.word	0x2000001c

080072f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80072f4:	f7ff ffe2 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	091b      	lsrs	r3, r3, #4
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	4903      	ldr	r1, [pc, #12]	@ (8007314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007306:	5ccb      	ldrb	r3, [r1, r3]
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	bd80      	pop	{r7, pc}
 8007310:	46020c00 	.word	0x46020c00
 8007314:	0800cb04 	.word	0x0800cb04

08007318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800731c:	f7ff ffce 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	4903      	ldr	r1, [pc, #12]	@ (800733c <HAL_RCC_GetPCLK2Freq+0x24>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007334:	4618      	mov	r0, r3
 8007336:	bd80      	pop	{r7, pc}
 8007338:	46020c00 	.word	0x46020c00
 800733c:	0800cb04 	.word	0x0800cb04

08007340 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007344:	f7ff ffba 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 8007348:	4602      	mov	r2, r0
 800734a:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <HAL_RCC_GetPCLK3Freq+0x20>)
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	4903      	ldr	r1, [pc, #12]	@ (8007364 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007356:	5ccb      	ldrb	r3, [r1, r3]
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800735c:	4618      	mov	r0, r3
 800735e:	bd80      	pop	{r7, pc}
 8007360:	46020c00 	.word	0x46020c00
 8007364:	0800cb04 	.word	0x0800cb04

08007368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007370:	4b3e      	ldr	r3, [pc, #248]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800737e:	f7fe fd8f 	bl	8005ea0 <HAL_PWREx_GetVoltageRange>
 8007382:	6178      	str	r0, [r7, #20]
 8007384:	e019      	b.n	80073ba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007386:	4b39      	ldr	r3, [pc, #228]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800738c:	4a37      	ldr	r2, [pc, #220]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800738e:	f043 0304 	orr.w	r3, r3, #4
 8007392:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007396:	4b35      	ldr	r3, [pc, #212]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073a4:	f7fe fd7c 	bl	8005ea0 <HAL_PWREx_GetVoltageRange>
 80073a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073aa:	4b30      	ldr	r3, [pc, #192]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80073ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b0:	4a2e      	ldr	r2, [pc, #184]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80073b2:	f023 0304 	bic.w	r3, r3, #4
 80073b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073c0:	d003      	beq.n	80073ca <RCC_SetFlashLatencyFromMSIRange+0x62>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073c8:	d109      	bne.n	80073de <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073d0:	d202      	bcs.n	80073d8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80073d2:	2301      	movs	r3, #1
 80073d4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80073d6:	e033      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80073dc:	e030      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e4:	d208      	bcs.n	80073f8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ec:	d102      	bne.n	80073f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80073ee:	2303      	movs	r3, #3
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	e025      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e035      	b.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073fe:	d90f      	bls.n	8007420 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800740c:	d902      	bls.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e015      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007414:	2301      	movs	r3, #1
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	e012      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800741a:	2300      	movs	r3, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	e00f      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007426:	d109      	bne.n	800743c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742e:	d102      	bne.n	8007436 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007430:	2301      	movs	r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	e004      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007436:	2302      	movs	r3, #2
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	e001      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800743c:	2301      	movs	r3, #1
 800743e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007440:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f023 020f 	bic.w	r2, r3, #15
 8007448:	4909      	ldr	r1, [pc, #36]	@ (8007470 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007450:	4b07      	ldr	r3, [pc, #28]	@ (8007470 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d001      	beq.n	8007462 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	46020c00 	.word	0x46020c00
 8007470:	40022000 	.word	0x40022000

08007474 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007478:	b0ba      	sub	sp, #232	@ 0xe8
 800747a:	af00      	add	r7, sp, #0
 800747c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007480:	2300      	movs	r3, #0
 8007482:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007486:	2300      	movs	r3, #0
 8007488:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800748c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f002 0401 	and.w	r4, r2, #1
 8007498:	2500      	movs	r5, #0
 800749a:	ea54 0305 	orrs.w	r3, r4, r5
 800749e:	d00b      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80074a0:	4bcb      	ldr	r3, [pc, #812]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074a6:	f023 0103 	bic.w	r1, r3, #3
 80074aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b0:	4ac7      	ldr	r2, [pc, #796]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b2:	430b      	orrs	r3, r1
 80074b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f002 0802 	and.w	r8, r2, #2
 80074c4:	f04f 0900 	mov.w	r9, #0
 80074c8:	ea58 0309 	orrs.w	r3, r8, r9
 80074cc:	d00b      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80074ce:	4bc0      	ldr	r3, [pc, #768]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074d4:	f023 010c 	bic.w	r1, r3, #12
 80074d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074de:	4abc      	ldr	r2, [pc, #752]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074e0:	430b      	orrs	r3, r1
 80074e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f002 0a04 	and.w	sl, r2, #4
 80074f2:	f04f 0b00 	mov.w	fp, #0
 80074f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80074fa:	d00b      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80074fc:	4bb4      	ldr	r3, [pc, #720]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007502:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800750a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800750c:	4ab0      	ldr	r2, [pc, #704]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800750e:	430b      	orrs	r3, r1
 8007510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f002 0308 	and.w	r3, r2, #8
 8007520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007524:	2300      	movs	r3, #0
 8007526:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800752a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800752e:	460b      	mov	r3, r1
 8007530:	4313      	orrs	r3, r2
 8007532:	d00b      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007534:	4ba6      	ldr	r3, [pc, #664]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800753a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800753e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007544:	4aa2      	ldr	r2, [pc, #648]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007546:	430b      	orrs	r3, r1
 8007548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800754c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f002 0310 	and.w	r3, r2, #16
 8007558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800755c:	2300      	movs	r3, #0
 800755e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007562:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d00b      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800756c:	4b98      	ldr	r3, [pc, #608]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800756e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007572:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800757a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800757c:	4a94      	ldr	r2, [pc, #592]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800757e:	430b      	orrs	r3, r1
 8007580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	f002 0320 	and.w	r3, r2, #32
 8007590:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007594:	2300      	movs	r3, #0
 8007596:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800759a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800759e:	460b      	mov	r3, r1
 80075a0:	4313      	orrs	r3, r2
 80075a2:	d00b      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80075a4:	4b8a      	ldr	r3, [pc, #552]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075aa:	f023 0107 	bic.w	r1, r3, #7
 80075ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b4:	4a86      	ldr	r2, [pc, #536]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075b6:	430b      	orrs	r3, r1
 80075b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80075c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4313      	orrs	r3, r2
 80075da:	d00b      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80075dc:	4b7c      	ldr	r3, [pc, #496]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075e2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80075e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075ec:	4a78      	ldr	r2, [pc, #480]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ee:	430b      	orrs	r3, r1
 80075f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800760a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d00b      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007614:	4b6e      	ldr	r3, [pc, #440]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800761a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800761e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007624:	4a6a      	ldr	r2, [pc, #424]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007626:	430b      	orrs	r3, r1
 8007628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800762c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007638:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800763c:	2300      	movs	r3, #0
 800763e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007642:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007646:	460b      	mov	r3, r1
 8007648:	4313      	orrs	r3, r2
 800764a:	d00b      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800764c:	4b60      	ldr	r3, [pc, #384]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800764e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007652:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800765a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765c:	4a5c      	ldr	r2, [pc, #368]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800765e:	430b      	orrs	r3, r1
 8007660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007674:	2300      	movs	r3, #0
 8007676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800767a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800767e:	460b      	mov	r3, r1
 8007680:	4313      	orrs	r3, r2
 8007682:	d00b      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007684:	4b52      	ldr	r3, [pc, #328]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800768a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800768e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007694:	4a4e      	ldr	r2, [pc, #312]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007696:	430b      	orrs	r3, r1
 8007698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800769c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80076a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076ac:	2300      	movs	r3, #0
 80076ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80076b6:	460b      	mov	r3, r1
 80076b8:	4313      	orrs	r3, r2
 80076ba:	d00b      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80076bc:	4b44      	ldr	r3, [pc, #272]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076c2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80076c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076cc:	4a40      	ldr	r2, [pc, #256]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ce:	430b      	orrs	r3, r1
 80076d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80076e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076e4:	2300      	movs	r3, #0
 80076e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80076ee:	460b      	mov	r3, r1
 80076f0:	4313      	orrs	r3, r2
 80076f2:	d00b      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80076f4:	4b36      	ldr	r3, [pc, #216]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076fa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80076fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007704:	4a32      	ldr	r2, [pc, #200]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007706:	430b      	orrs	r3, r1
 8007708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800770c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007718:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007722:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007726:	460b      	mov	r3, r1
 8007728:	4313      	orrs	r3, r2
 800772a:	d00c      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800772c:	4b28      	ldr	r3, [pc, #160]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800772e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007732:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800773a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773e:	4a24      	ldr	r2, [pc, #144]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007740:	430b      	orrs	r3, r1
 8007742:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007752:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007754:	2300      	movs	r3, #0
 8007756:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007758:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800775c:	460b      	mov	r3, r1
 800775e:	4313      	orrs	r3, r2
 8007760:	d04f      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776a:	2b80      	cmp	r3, #128	@ 0x80
 800776c:	d02d      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x356>
 800776e:	2b80      	cmp	r3, #128	@ 0x80
 8007770:	d827      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007772:	2b60      	cmp	r3, #96	@ 0x60
 8007774:	d02e      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007776:	2b60      	cmp	r3, #96	@ 0x60
 8007778:	d823      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800777a:	2b40      	cmp	r3, #64	@ 0x40
 800777c:	d006      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800777e:	2b40      	cmp	r3, #64	@ 0x40
 8007780:	d81f      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007786:	2b20      	cmp	r3, #32
 8007788:	d011      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800778a:	e01a      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800778c:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800778e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007790:	4a0f      	ldr	r2, [pc, #60]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007796:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007798:	e01d      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800779a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800779e:	3308      	adds	r3, #8
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 fa17 	bl	8009bd4 <RCCEx_PLL2_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077ac:	e013      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077b2:	332c      	adds	r3, #44	@ 0x2c
 80077b4:	4618      	mov	r0, r3
 80077b6:	f002 faa5 	bl	8009d04 <RCCEx_PLL3_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80077c0:	e009      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80077c8:	e005      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80077ca:	bf00      	nop
 80077cc:	e003      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80077ce:	bf00      	nop
 80077d0:	46020c00 	.word	0x46020c00
        break;
 80077d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10d      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80077de:	4bb6      	ldr	r3, [pc, #728]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80077e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077e4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80077e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f0:	4ab1      	ldr	r2, [pc, #708]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80077f2:	430b      	orrs	r3, r1
 80077f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077f8:	e003      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80077fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800780e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007810:	2300      	movs	r3, #0
 8007812:	677b      	str	r3, [r7, #116]	@ 0x74
 8007814:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007818:	460b      	mov	r3, r1
 800781a:	4313      	orrs	r3, r2
 800781c:	d053      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800781e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800782a:	d033      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800782c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007830:	d82c      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007836:	d02f      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800783c:	d826      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800783e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007842:	d008      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007848:	d820      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800784e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007852:	d011      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007854:	e01a      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007856:	4b98      	ldr	r3, [pc, #608]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	4a97      	ldr	r2, [pc, #604]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800785c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007860:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007862:	e01a      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007868:	3308      	adds	r3, #8
 800786a:	4618      	mov	r0, r3
 800786c:	f002 f9b2 	bl	8009bd4 <RCCEx_PLL2_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007876:	e010      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800787c:	332c      	adds	r3, #44	@ 0x2c
 800787e:	4618      	mov	r0, r3
 8007880:	f002 fa40 	bl	8009d04 <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800788a:	e006      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007892:	e002      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10d      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80078a2:	4b85      	ldr	r3, [pc, #532]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80078a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078a8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80078ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078b4:	4a80      	ldr	r2, [pc, #512]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80078b6:	430b      	orrs	r3, r1
 80078b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80078bc:	e003      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078c2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80078c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078d4:	2300      	movs	r3, #0
 80078d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80078dc:	460b      	mov	r3, r1
 80078de:	4313      	orrs	r3, r2
 80078e0:	d046      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80078e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80078ee:	d028      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80078f0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80078f4:	d821      	bhi.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80078f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078fa:	d022      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80078fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007900:	d81b      	bhi.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007902:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007906:	d01c      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007908:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800790c:	d815      	bhi.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800790e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007912:	d008      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007918:	d80f      	bhi.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d011      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800791e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007922:	d00e      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007924:	e009      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800792a:	3308      	adds	r3, #8
 800792c:	4618      	mov	r0, r3
 800792e:	f002 f951 	bl	8009bd4 <RCCEx_PLL2_Config>
 8007932:	4603      	mov	r3, r0
 8007934:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007938:	e004      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007940:	e000      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007944:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10d      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800794c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800794e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007952:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800795a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800795e:	4a56      	ldr	r2, [pc, #344]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007960:	430b      	orrs	r3, r1
 8007962:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007966:	e003      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800796c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800797c:	663b      	str	r3, [r7, #96]	@ 0x60
 800797e:	2300      	movs	r3, #0
 8007980:	667b      	str	r3, [r7, #100]	@ 0x64
 8007982:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007986:	460b      	mov	r3, r1
 8007988:	4313      	orrs	r3, r2
 800798a:	d03f      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800798c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007994:	2b04      	cmp	r3, #4
 8007996:	d81e      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007998:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079df 	.word	0x080079df
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079c3 	.word	0x080079c3
 80079ac:	080079df 	.word	0x080079df
 80079b0:	080079df 	.word	0x080079df
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079b4:	4b40      	ldr	r3, [pc, #256]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	4a3f      	ldr	r2, [pc, #252]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079be:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80079c0:	e00e      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c6:	332c      	adds	r3, #44	@ 0x2c
 80079c8:	4618      	mov	r0, r3
 80079ca:	f002 f99b 	bl	8009d04 <RCCEx_PLL3_Config>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80079d4:	e004      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80079dc:	e000      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80079de:	bf00      	nop
    }
    if (ret == HAL_OK)
 80079e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80079e8:	4b33      	ldr	r3, [pc, #204]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079ee:	f023 0107 	bic.w	r1, r3, #7
 80079f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fa:	4a2f      	ldr	r2, [pc, #188]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a08:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d04d      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a34:	d028      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007a36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a3a:	d821      	bhi.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007a3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a40:	d024      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007a42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a46:	d81b      	bhi.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007a48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a4c:	d00e      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a52:	d815      	bhi.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01b      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5c:	d110      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a5e:	4b16      	ldr	r3, [pc, #88]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	4a15      	ldr	r2, [pc, #84]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a68:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007a6a:	e012      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a70:	332c      	adds	r3, #44	@ 0x2c
 8007a72:	4618      	mov	r0, r3
 8007a74:	f002 f946 	bl	8009d04 <RCCEx_PLL3_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a7e:	e008      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a86:	e004      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007a88:	bf00      	nop
 8007a8a:	e002      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007a8c:	bf00      	nop
 8007a8e:	e000      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007a90:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d110      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007a9a:	4b07      	ldr	r3, [pc, #28]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aa0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007aa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aac:	4a02      	ldr	r2, [pc, #8]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ab4:	e006      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007ab6:	bf00      	nop
 8007ab8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ac0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ad6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f000 80b5 	beq.w	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ae8:	4b9d      	ldr	r3, [pc, #628]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d113      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007af6:	4b9a      	ldr	r3, [pc, #616]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007afc:	4a98      	ldr	r2, [pc, #608]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007afe:	f043 0304 	orr.w	r3, r3, #4
 8007b02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007b06:	4b96      	ldr	r3, [pc, #600]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007b1e:	4b91      	ldr	r3, [pc, #580]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b22:	4a90      	ldr	r2, [pc, #576]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b2a:	f7fa ffbf 	bl	8002aac <HAL_GetTick>
 8007b2e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007b32:	e00b      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b34:	f7fa ffba 	bl	8002aac <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d903      	bls.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b4a:	e005      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007b4c:	4b85      	ldr	r3, [pc, #532]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0ed      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8007b58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d165      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b60:	4b7f      	ldr	r3, [pc, #508]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d023      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8007b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01b      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b86:	4b76      	ldr	r3, [pc, #472]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b94:	4b72      	ldr	r3, [pc, #456]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b9a:	4a71      	ldr	r2, [pc, #452]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ba4:	4b6e      	ldr	r3, [pc, #440]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007baa:	4a6d      	ldr	r2, [pc, #436]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d019      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bca:	f7fa ff6f 	bl	8002aac <HAL_GetTick>
 8007bce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bd2:	e00d      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd4:	f7fa ff6a 	bl	8002aac <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d903      	bls.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007bee:	e006      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0ea      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007bfe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007c06:	4b56      	ldr	r3, [pc, #344]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c18:	4a51      	ldr	r2, [pc, #324]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c20:	e008      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c26:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8007c2a:	e003      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c34:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d107      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c3c:	4b48      	ldr	r3, [pc, #288]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c42:	4a47      	ldr	r2, [pc, #284]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007c44:	f023 0304 	bic.w	r3, r3, #4
 8007c48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c5e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007c62:	460b      	mov	r3, r1
 8007c64:	4313      	orrs	r3, r2
 8007c66:	d042      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007c68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c70:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c74:	d022      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007c76:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c7a:	d81b      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c80:	d011      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c86:	d815      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d019      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8007c8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c90:	d110      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c96:	3308      	adds	r3, #8
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 ff9b 	bl	8009bd4 <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ca4:	e00d      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007caa:	4a2d      	ldr	r2, [pc, #180]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cb0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007cb2:	e006      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007cba:	e002      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007cbc:	bf00      	nop
 8007cbe:	e000      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007cc0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007cc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10d      	bne.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007cca:	4b25      	ldr	r3, [pc, #148]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cd0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cdc:	4a20      	ldr	r2, [pc, #128]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ce4:	e003      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007cea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d04:	460b      	mov	r3, r1
 8007d06:	4313      	orrs	r3, r2
 8007d08:	d032      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d16:	d00b      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d1c:	d804      	bhi.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d26:	d007      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d2e:	e004      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007d30:	bf00      	nop
 8007d32:	e002      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007d38:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007d3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d112      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007d42:	4b07      	ldr	r3, [pc, #28]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d54:	4a02      	ldr	r2, [pc, #8]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d56:	430b      	orrs	r3, r1
 8007d58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007d5c:	e008      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8007d5e:	bf00      	nop
 8007d60:	46020c00 	.word	0x46020c00
 8007d64:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d6c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007d70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d7e:	2300      	movs	r3, #0
 8007d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007d86:	460b      	mov	r3, r1
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	d00c      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007d8c:	4b98      	ldr	r3, [pc, #608]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d92:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d9e:	4a94      	ldr	r2, [pc, #592]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007da0:	430b      	orrs	r3, r1
 8007da2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007db4:	2300      	movs	r3, #0
 8007db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	d019      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dce:	d105      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007dd0:	4b87      	ldr	r3, [pc, #540]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd4:	4a86      	ldr	r2, [pc, #536]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dda:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007ddc:	4b84      	ldr	r3, [pc, #528]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007dde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007de2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dee:	4a80      	ldr	r2, [pc, #512]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007df0:	430b      	orrs	r3, r1
 8007df2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007e02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e04:	2300      	movs	r3, #0
 8007e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e08:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	d00c      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007e12:	4b77      	ldr	r3, [pc, #476]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e24:	4972      	ldr	r1, [pc, #456]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007e38:	623b      	str	r3, [r7, #32]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e42:	460b      	mov	r3, r1
 8007e44:	4313      	orrs	r3, r2
 8007e46:	d00c      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007e48:	4b69      	ldr	r3, [pc, #420]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e5a:	4965      	ldr	r1, [pc, #404]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007e6e:	61bb      	str	r3, [r7, #24]
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
 8007e74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	d00c      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e84:	f023 0218 	bic.w	r2, r3, #24
 8007e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e90:	4957      	ldr	r1, [pc, #348]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	d032      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ebc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ec0:	d105      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ecc:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ed6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eda:	d108      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 fe76 	bl	8009bd4 <RCCEx_PLL2_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8007eee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10d      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007ef8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007efc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f08:	4939      	ldr	r1, [pc, #228]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007f10:	e003      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f16:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f30:	460b      	mov	r3, r1
 8007f32:	4313      	orrs	r3, r2
 8007f34:	d03a      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f42:	d00e      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007f44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f48:	d815      	bhi.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d017      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007f4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f52:	d110      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f54:	4b26      	ldr	r3, [pc, #152]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	4a25      	ldr	r2, [pc, #148]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f5e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007f60:	e00e      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f66:	3308      	adds	r3, #8
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f001 fe33 	bl	8009bd4 <RCCEx_PLL2_Config>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8007f7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007f80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10d      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007f88:	4b19      	ldr	r3, [pc, #100]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f9a:	4915      	ldr	r1, [pc, #84]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007fa8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007fac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007fb8:	603b      	str	r3, [r7, #0]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]
 8007fbe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	d00c      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007fc8:	4b09      	ldr	r3, [pc, #36]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fda:	4905      	ldr	r1, [pc, #20]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007fe2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	37e8      	adds	r7, #232	@ 0xe8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ff0:	46020c00 	.word	0x46020c00

08007ff4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b089      	sub	sp, #36	@ 0x24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007ffc:	4ba6      	ldr	r3, [pc, #664]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008004:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008006:	4ba4      	ldr	r3, [pc, #656]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008010:	4ba1      	ldr	r3, [pc, #644]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	3301      	adds	r3, #1
 800801c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800801e:	4b9e      	ldr	r3, [pc, #632]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	091b      	lsrs	r3, r3, #4
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800802a:	4b9b      	ldr	r3, [pc, #620]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800802c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d062      	beq.n	8008112 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b03      	cmp	r3, #3
 8008050:	f200 8081 	bhi.w	8008156 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d024      	beq.n	80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d17a      	bne.n	8008156 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800806e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008072:	4b89      	ldr	r3, [pc, #548]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008082:	ed97 6a02 	vldr	s12, [r7, #8]
 8008086:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80082a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800808a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800808e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008096:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800809a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080a2:	e08f      	b.n	80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80080a4:	4b7c      	ldr	r3, [pc, #496]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80080b0:	4b79      	ldr	r3, [pc, #484]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	0f1b      	lsrs	r3, r3, #28
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	e006      	b.n	80080ca <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80080bc:	4b76      	ldr	r3, [pc, #472]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080c2:	041b      	lsls	r3, r3, #16
 80080c4:	0f1b      	lsrs	r3, r3, #28
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	4a76      	ldr	r2, [pc, #472]	@ (80082a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80080cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	ee07 3a90 	vmov	s15, r3
 80080ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80080f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80082a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80080f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008104:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008110:	e058      	b.n	80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008124:	4b5c      	ldr	r3, [pc, #368]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008134:	ed97 6a02 	vldr	s12, [r7, #8]
 8008138:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80082a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800813c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008140:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008144:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008148:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800814c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008150:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008154:	e036      	b.n	80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008156:	4b50      	ldr	r3, [pc, #320]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008162:	4b4d      	ldr	r3, [pc, #308]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	0f1b      	lsrs	r3, r3, #28
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	e006      	b.n	800817c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800816e:	4b4a      	ldr	r3, [pc, #296]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008174:	041b      	lsls	r3, r3, #16
 8008176:	0f1b      	lsrs	r3, r3, #28
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	4a49      	ldr	r2, [pc, #292]	@ (80082a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800817e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	ee07 3a90 	vmov	s15, r3
 8008190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80082a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80081aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80081ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80081c4:	4b34      	ldr	r3, [pc, #208]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d017      	beq.n	8008200 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80081d0:	4b31      	ldr	r3, [pc, #196]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d4:	0a5b      	lsrs	r3, r3, #9
 80081d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80081e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80081ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f6:	ee17 2a90 	vmov	r2, s15
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e002      	b.n	8008206 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008206:	4b24      	ldr	r3, [pc, #144]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d017      	beq.n	8008242 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008212:	4b21      	ldr	r3, [pc, #132]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008216:	0c1b      	lsrs	r3, r3, #16
 8008218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800821c:	ee07 3a90 	vmov	s15, r3
 8008220:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008228:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800822c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008238:	ee17 2a90 	vmov	r2, s15
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	605a      	str	r2, [r3, #4]
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008248:	4b13      	ldr	r3, [pc, #76]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d017      	beq.n	8008284 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008254:	4b10      	ldr	r3, [pc, #64]	@ (8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008258:	0e1b      	lsrs	r3, r3, #24
 800825a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800826a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800826e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827a:	ee17 2a90 	vmov	r2, s15
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008282:	e002      	b.n	800828a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	609a      	str	r2, [r3, #8]
}
 800828a:	bf00      	nop
 800828c:	3724      	adds	r7, #36	@ 0x24
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	46020c00 	.word	0x46020c00
 800829c:	4b742400 	.word	0x4b742400
 80082a0:	46000000 	.word	0x46000000
 80082a4:	0800cb0c 	.word	0x0800cb0c

080082a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b089      	sub	sp, #36	@ 0x24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80082b0:	4ba6      	ldr	r3, [pc, #664]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80082ba:	4ba4      	ldr	r3, [pc, #656]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80082c4:	4ba1      	ldr	r3, [pc, #644]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	0a1b      	lsrs	r3, r3, #8
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	3301      	adds	r3, #1
 80082d0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80082d2:	4b9e      	ldr	r3, [pc, #632]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d6:	091b      	lsrs	r3, r3, #4
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80082de:	4b9b      	ldr	r3, [pc, #620]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e2:	08db      	lsrs	r3, r3, #3
 80082e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d062      	beq.n	80083c6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b03      	cmp	r3, #3
 8008304:	f200 8081 	bhi.w	800840a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d024      	beq.n	8008358 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d17a      	bne.n	800840a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008326:	4b89      	ldr	r3, [pc, #548]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008336:	ed97 6a02 	vldr	s12, [r7, #8]
 800833a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800833e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008342:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800834a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800834e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008352:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008356:	e08f      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008358:	4b7c      	ldr	r3, [pc, #496]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008364:	4b79      	ldr	r3, [pc, #484]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	0f1b      	lsrs	r3, r3, #28
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	e006      	b.n	800837e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008370:	4b76      	ldr	r3, [pc, #472]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008376:	041b      	lsls	r3, r3, #16
 8008378:	0f1b      	lsrs	r3, r3, #28
 800837a:	f003 030f 	and.w	r3, r3, #15
 800837e:	4a76      	ldr	r2, [pc, #472]	@ (8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80083a8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80083ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80083bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c4:	e058      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80083d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d8:	4b5c      	ldr	r3, [pc, #368]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80083e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80083f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80083f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80083f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008408:	e036      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800840a:	4b50      	ldr	r3, [pc, #320]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008416:	4b4d      	ldr	r3, [pc, #308]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	0f1b      	lsrs	r3, r3, #28
 800841c:	f003 030f 	and.w	r3, r3, #15
 8008420:	e006      	b.n	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008422:	4b4a      	ldr	r3, [pc, #296]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008428:	041b      	lsls	r3, r3, #16
 800842a:	0f1b      	lsrs	r3, r3, #28
 800842c:	f003 030f 	and.w	r3, r3, #15
 8008430:	4a49      	ldr	r2, [pc, #292]	@ (8008558 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	ee07 3a90 	vmov	s15, r3
 8008444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	ed97 6a02 	vldr	s12, [r7, #8]
 800845a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008554 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008476:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008478:	4b34      	ldr	r3, [pc, #208]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800847a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d017      	beq.n	80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008484:	4b31      	ldr	r3, [pc, #196]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008488:	0a5b      	lsrs	r3, r3, #9
 800848a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800849a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800849e:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084aa:	ee17 2a90 	vmov	r2, s15
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	e002      	b.n	80084ba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80084ba:	4b24      	ldr	r3, [pc, #144]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d017      	beq.n	80084f6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80084c6:	4b21      	ldr	r3, [pc, #132]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80084d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084dc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80084e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ec:	ee17 2a90 	vmov	r2, s15
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	e002      	b.n	80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80084fc:	4b13      	ldr	r3, [pc, #76]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d017      	beq.n	8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008508:	4b10      	ldr	r3, [pc, #64]	@ (800854c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800850a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800851a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800851e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008522:	edd7 6a07 	vldr	s13, [r7, #28]
 8008526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800852a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800852e:	ee17 2a90 	vmov	r2, s15
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008536:	e002      	b.n	800853e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	609a      	str	r2, [r3, #8]
}
 800853e:	bf00      	nop
 8008540:	3724      	adds	r7, #36	@ 0x24
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	46020c00 	.word	0x46020c00
 8008550:	4b742400 	.word	0x4b742400
 8008554:	46000000 	.word	0x46000000
 8008558:	0800cb0c 	.word	0x0800cb0c

0800855c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800855c:	b480      	push	{r7}
 800855e:	b089      	sub	sp, #36	@ 0x24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008564:	4ba6      	ldr	r3, [pc, #664]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800856e:	4ba4      	ldr	r3, [pc, #656]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008578:	4ba1      	ldr	r3, [pc, #644]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800857a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800857c:	0a1b      	lsrs	r3, r3, #8
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	3301      	adds	r3, #1
 8008584:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008586:	4b9e      	ldr	r3, [pc, #632]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858a:	091b      	lsrs	r3, r3, #4
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008592:	4b9b      	ldr	r3, [pc, #620]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008596:	08db      	lsrs	r3, r3, #3
 8008598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	fb02 f303 	mul.w	r3, r2, r3
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d062      	beq.n	800867a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	f200 8081 	bhi.w	80086be <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d024      	beq.n	800860c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d17a      	bne.n	80086be <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b89      	ldr	r3, [pc, #548]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80085ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800860a:	e08f      	b.n	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800860c:	4b7c      	ldr	r3, [pc, #496]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008618:	4b79      	ldr	r3, [pc, #484]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	0f1b      	lsrs	r3, r3, #28
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	e006      	b.n	8008632 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008624:	4b76      	ldr	r3, [pc, #472]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	0f1b      	lsrs	r3, r3, #28
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	4a76      	ldr	r2, [pc, #472]	@ (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008638:	ee07 3a90 	vmov	s15, r3
 800863c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	ee07 3a90 	vmov	s15, r3
 8008654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008658:	ed97 6a02 	vldr	s12, [r7, #8]
 800865c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800866c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008678:	e058      	b.n	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	ee07 3a90 	vmov	s15, r3
 8008680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008684:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868c:	4b5c      	ldr	r3, [pc, #368]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800868e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800869c:	ed97 6a02 	vldr	s12, [r7, #8]
 80086a0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80086a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80086a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80086ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80086b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086bc:	e036      	b.n	800872c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80086be:	4b50      	ldr	r3, [pc, #320]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80086ca:	4b4d      	ldr	r3, [pc, #308]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	0f1b      	lsrs	r3, r3, #28
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	e006      	b.n	80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80086d6:	4b4a      	ldr	r3, [pc, #296]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086dc:	041b      	lsls	r3, r3, #16
 80086de:	0f1b      	lsrs	r3, r3, #28
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	4a49      	ldr	r2, [pc, #292]	@ (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80086e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a02 	vldr	s12, [r7, #8]
 800870e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008808 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800872a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800872c:	4b34      	ldr	r3, [pc, #208]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800872e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d017      	beq.n	8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008738:	4b31      	ldr	r3, [pc, #196]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800873a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873c:	0a5b      	lsrs	r3, r3, #9
 800873e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800874a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800874e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008752:	edd7 6a07 	vldr	s13, [r7, #28]
 8008756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800875a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800875e:	ee17 2a90 	vmov	r2, s15
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e002      	b.n	800876e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800876e:	4b24      	ldr	r3, [pc, #144]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d017      	beq.n	80087aa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800877a:	4b21      	ldr	r3, [pc, #132]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800877c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800878c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008790:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008794:	edd7 6a07 	vldr	s13, [r7, #28]
 8008798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800879c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a0:	ee17 2a90 	vmov	r2, s15
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	605a      	str	r2, [r3, #4]
 80087a8:	e002      	b.n	80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80087b0:	4b13      	ldr	r3, [pc, #76]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d017      	beq.n	80087ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80087bc:	4b10      	ldr	r3, [pc, #64]	@ (8008800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80087ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087d2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80087d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e2:	ee17 2a90 	vmov	r2, s15
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087ea:	e002      	b.n	80087f2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	609a      	str	r2, [r3, #8]
}
 80087f2:	bf00      	nop
 80087f4:	3724      	adds	r7, #36	@ 0x24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	46020c00 	.word	0x46020c00
 8008804:	4b742400 	.word	0x4b742400
 8008808:	46000000 	.word	0x46000000
 800880c:	0800cb0c 	.word	0x0800cb0c

08008810 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08e      	sub	sp, #56	@ 0x38
 8008814:	af00      	add	r7, sp, #0
 8008816:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800881a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008822:	430b      	orrs	r3, r1
 8008824:	d145      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008826:	4ba7      	ldr	r3, [pc, #668]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800882c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008830:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008832:	4ba4      	ldr	r3, [pc, #656]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b02      	cmp	r3, #2
 800883e:	d108      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008846:	d104      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800884c:	637b      	str	r3, [r7, #52]	@ 0x34
 800884e:	f001 b9b3 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008852:	4b9c      	ldr	r3, [pc, #624]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800885c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008860:	d114      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008868:	d110      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800886a:	4b96      	ldr	r3, [pc, #600]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800886c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008878:	d103      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800887a:	23fa      	movs	r3, #250	@ 0xfa
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800887e:	f001 b99b 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008882:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008886:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008888:	f001 b996 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800888c:	4b8d      	ldr	r3, [pc, #564]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008898:	d107      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088a0:	d103      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80088a2:	4b89      	ldr	r3, [pc, #548]	@ (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a6:	f001 b987 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ae:	f001 b983 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80088ba:	430b      	orrs	r3, r1
 80088bc:	d151      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80088be:	4b81      	ldr	r3, [pc, #516]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80088c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088c4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80088c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	2b80      	cmp	r3, #128	@ 0x80
 80088ce:	d035      	beq.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	2b80      	cmp	r3, #128	@ 0x80
 80088d4:	d841      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b60      	cmp	r3, #96	@ 0x60
 80088da:	d02a      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	2b60      	cmp	r3, #96	@ 0x60
 80088e0:	d83b      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	2b40      	cmp	r3, #64	@ 0x40
 80088e6:	d009      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	2b40      	cmp	r3, #64	@ 0x40
 80088ec:	d835      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00c      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d012      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80088fa:	e02e      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fb77 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800890a:	f001 b955 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890e:	f107 0318 	add.w	r3, r7, #24
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fcc8 	bl	80082a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800891c:	f001 b94c 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008920:	f107 030c 	add.w	r3, r7, #12
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff fe19 	bl	800855c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800892e:	f001 b943 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008932:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008938:	f001 b93e 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800893c:	4b61      	ldr	r3, [pc, #388]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008948:	d103      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800894a:	4b60      	ldr	r3, [pc, #384]	@ (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800894c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800894e:	f001 b933 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008956:	f001 b92f 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800895e:	f001 b92b 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008966:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800896a:	430b      	orrs	r3, r1
 800896c:	d158      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800896e:	4b55      	ldr	r3, [pc, #340]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008974:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008978:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008980:	d03b      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008988:	d846      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008990:	d02e      	beq.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008998:	d83e      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a0:	d00b      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a8:	d836      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00d      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b6:	d012      	beq.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80089b8:	e02e      	b.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff fb18 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089c8:	f001 b8f6 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089cc:	f107 0318 	add.w	r3, r7, #24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7ff fc69 	bl	80082a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089da:	f001 b8ed 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089de:	f107 030c 	add.w	r3, r7, #12
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff fdba 	bl	800855c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ec:	f001 b8e4 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80089f0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80089f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089f6:	f001 b8df 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089fa:	4b32      	ldr	r3, [pc, #200]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a06:	d103      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008a08:	4b30      	ldr	r3, [pc, #192]	@ (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a0c:	f001 b8d4 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a14:	f001 b8d0 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a1c:	f001 b8cc 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a24:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	d126      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008a2c:	4b25      	ldr	r3, [pc, #148]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008a38:	4b22      	ldr	r3, [pc, #136]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a44:	d106      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a50:	f001 b8b2 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008a54:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a60:	d107      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a68:	d103      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008a6a:	4b19      	ldr	r3, [pc, #100]	@ (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6e:	f001 b8a3 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a76:	f001 b89f 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008a82:	430b      	orrs	r3, r1
 8008a84:	d16e      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008a86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a8c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008a90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008a98:	d03d      	beq.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008aa0:	d85c      	bhi.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aa8:	d014      	beq.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ab0:	d854      	bhi.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d01f      	beq.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008abe:	d012      	beq.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008ac0:	e04c      	b.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008ac2:	bf00      	nop
 8008ac4:	46020c00 	.word	0x46020c00
 8008ac8:	0007a120 	.word	0x0007a120
 8008acc:	00f42400 	.word	0x00f42400
 8008ad0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff fa8b 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ae2:	f001 b869 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae6:	f107 0318 	add.w	r3, r7, #24
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fbdc 	bl	80082a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008af4:	f001 b860 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008af8:	4ba7      	ldr	r3, [pc, #668]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b04:	d103      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008b06:	4ba5      	ldr	r3, [pc, #660]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b0a:	f001 b855 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b12:	f001 b851 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b16:	4ba0      	ldr	r3, [pc, #640]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d118      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b22:	4b9d      	ldr	r3, [pc, #628]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d005      	beq.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008b2e:	4b9a      	ldr	r3, [pc, #616]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	0e1b      	lsrs	r3, r3, #24
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	e006      	b.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008b3a:	4b97      	ldr	r3, [pc, #604]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	0e1b      	lsrs	r3, r3, #24
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	4a95      	ldr	r2, [pc, #596]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b50:	f001 b832 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b58:	f001 b82e 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b60:	f001 b82a 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b68:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	d17f      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b70:	4b89      	ldr	r3, [pc, #548]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b7a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d165      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008b82:	4b85      	ldr	r3, [pc, #532]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b88:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008b8c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008b94:	d034      	beq.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008b9c:	d853      	bhi.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba4:	d00b      	beq.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bac:	d84b      	bhi.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d016      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bba:	d009      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008bbc:	e043      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff fa16 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008bcc:	f000 bff4 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd0:	f107 0318 	add.w	r3, r7, #24
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff fb67 	bl	80082a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008bde:	f000 bfeb 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008be2:	4b6d      	ldr	r3, [pc, #436]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bee:	d103      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bf2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008bf4:	f000 bfe0 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008bfc:	f000 bfdc 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008c00:	4b65      	ldr	r3, [pc, #404]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d118      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c0c:	4b62      	ldr	r3, [pc, #392]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008c18:	4b5f      	ldr	r3, [pc, #380]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	0e1b      	lsrs	r3, r3, #24
 8008c1e:	f003 030f 	and.w	r3, r3, #15
 8008c22:	e006      	b.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008c24:	4b5c      	ldr	r3, [pc, #368]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c2a:	041b      	lsls	r3, r3, #16
 8008c2c:	0e1b      	lsrs	r3, r3, #24
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	4a5b      	ldr	r2, [pc, #364]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c38:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008c3a:	f000 bfbd 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008c42:	f000 bfb9 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008c4a:	f000 bfb5 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c54:	d108      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff f9ca 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c64:	f000 bfa8 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6c:	f000 bfa4 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c74:	1e51      	subs	r1, r2, #1
 8008c76:	430b      	orrs	r3, r1
 8008c78:	d136      	bne.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008c7a:	4b47      	ldr	r3, [pc, #284]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008c8c:	f7fe fb44 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 8008c90:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c92:	f000 bf91 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d104      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c9c:	f7fe fa0c 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8008ca0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ca2:	f000 bf89 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cb2:	d106      	bne.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d103      	bne.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008cba:	4b3a      	ldr	r3, [pc, #232]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbe:	f000 bf7b 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008cc2:	4b35      	ldr	r3, [pc, #212]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cc8:	f003 0302 	and.w	r3, r3, #2
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d107      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d104      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cdc:	f000 bf6c 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce4:	f000 bf68 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cec:	1e91      	subs	r1, r2, #2
 8008cee:	430b      	orrs	r3, r1
 8008cf0:	d136      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008cf2:	4b29      	ldr	r3, [pc, #164]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cf8:	f003 030c 	and.w	r3, r3, #12
 8008cfc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d104      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008d04:	f7fe faf4 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8008d08:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d0a:	f000 bf55 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d104      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d14:	f7fe f9d0 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8008d18:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d1a:	f000 bf4d 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d2a:	d106      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d103      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008d32:	4b1c      	ldr	r3, [pc, #112]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d36:	f000 bf3f 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008d3a:	4b17      	ldr	r3, [pc, #92]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d107      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4a:	2b0c      	cmp	r3, #12
 8008d4c:	d104      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d54:	f000 bf30 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5c:	f000 bf2c 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d64:	1f11      	subs	r1, r2, #4
 8008d66:	430b      	orrs	r3, r1
 8008d68:	d13f      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008d7c:	f7fe fab8 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8008d80:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d82:	f000 bf19 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d10d      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d8c:	f7fe f994 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8008d90:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d92:	f000 bf11 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008d96:	bf00      	nop
 8008d98:	46020c00 	.word	0x46020c00
 8008d9c:	02dc6c00 	.word	0x02dc6c00
 8008da0:	0800cb0c 	.word	0x0800cb0c
 8008da4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008da8:	4ba6      	ldr	r3, [pc, #664]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db4:	d106      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	d103      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008dbc:	4ba2      	ldr	r3, [pc, #648]	@ (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc0:	f000 befa 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008dc4:	4b9f      	ldr	r3, [pc, #636]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d107      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	2b30      	cmp	r3, #48	@ 0x30
 8008dd6:	d104      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dde:	f000 beeb 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de6:	f000 bee7 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dee:	f1a2 0108 	sub.w	r1, r2, #8
 8008df2:	430b      	orrs	r3, r1
 8008df4:	d136      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008df6:	4b93      	ldr	r3, [pc, #588]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dfc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e00:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e08:	f7fe fa72 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8008e0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e0e:	f000 bed3 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	2b40      	cmp	r3, #64	@ 0x40
 8008e16:	d104      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e18:	f7fe f94e 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8008e1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e1e:	f000 becb 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008e22:	4b88      	ldr	r3, [pc, #544]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e2e:	d106      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	2b80      	cmp	r3, #128	@ 0x80
 8008e34:	d103      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008e36:	4b84      	ldr	r3, [pc, #528]	@ (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e3a:	f000 bebd 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008e3e:	4b81      	ldr	r3, [pc, #516]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d107      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e50:	d104      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e58:	f000 beae 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e60:	f000 beaa 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e68:	f1a2 0110 	sub.w	r1, r2, #16
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	d139      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008e70:	4b74      	ldr	r3, [pc, #464]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e82:	f7fe fa35 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8008e86:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e88:	f000 be96 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e92:	d104      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e94:	f7fe f910 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8008e98:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e9a:	f000 be8d 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008e9e:	4b69      	ldr	r3, [pc, #420]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eb2:	d103      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008eb4:	4b64      	ldr	r3, [pc, #400]	@ (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eb8:	f000 be7e 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008ebc:	4b61      	ldr	r3, [pc, #388]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d108      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ed0:	d104      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed8:	f000 be6e 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee0:	f000 be6a 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee8:	f1a2 0120 	sub.w	r1, r2, #32
 8008eec:	430b      	orrs	r3, r1
 8008eee:	d158      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ef0:	4b54      	ldr	r3, [pc, #336]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008f02:	f7fe fa1d 	bl	8007340 <HAL_RCC_GetPCLK3Freq>
 8008f06:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f08:	f000 be56 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d104      	bne.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f12:	f7fe f8d1 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8008f16:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f18:	f000 be4e 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008f1c:	4b49      	ldr	r3, [pc, #292]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f28:	d106      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d103      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8008f30:	4b45      	ldr	r3, [pc, #276]	@ (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f34:	f000 be40 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008f38:	4b42      	ldr	r3, [pc, #264]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d107      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d104      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8008f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f52:	f000 be31 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008f56:	4b3b      	ldr	r3, [pc, #236]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d11b      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d118      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f68:	4b36      	ldr	r3, [pc, #216]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008f74:	4b33      	ldr	r3, [pc, #204]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	0e1b      	lsrs	r3, r3, #24
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	e006      	b.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8008f80:	4b30      	ldr	r3, [pc, #192]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f86:	041b      	lsls	r3, r3, #16
 8008f88:	0e1b      	lsrs	r3, r3, #24
 8008f8a:	f003 030f 	and.w	r3, r3, #15
 8008f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f96:	f000 be0f 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f9e:	f000 be0b 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008faa:	430b      	orrs	r3, r1
 8008fac:	d172      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008fae:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008fb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fc0:	d104      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008fc2:	f7fe f879 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8008fc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8008fc8:	f000 bdf6 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd2:	d108      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd4:	f107 0318 	add.w	r3, r7, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff f965 	bl	80082a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe2:	f000 bde9 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008fec:	f7fe f966 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 8008ff0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ff2:	f000 bde1 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008ffc:	d128      	bne.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008ffe:	4b11      	ldr	r3, [pc, #68]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b20      	cmp	r3, #32
 8009008:	d118      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800900a:	4b0e      	ldr	r3, [pc, #56]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8009016:	4b0b      	ldr	r3, [pc, #44]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	0e1b      	lsrs	r3, r3, #24
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	e006      	b.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8009022:	4b08      	ldr	r3, [pc, #32]	@ (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009028:	041b      	lsls	r3, r3, #16
 800902a:	0e1b      	lsrs	r3, r3, #24
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	4a06      	ldr	r2, [pc, #24]	@ (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34
 8009038:	f000 bdbe 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009040:	f000 bdba 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009044:	46020c00 	.word	0x46020c00
 8009048:	00f42400 	.word	0x00f42400
 800904c:	0800cb0c 	.word	0x0800cb0c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009050:	4baf      	ldr	r3, [pc, #700]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800905c:	d107      	bne.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009064:	d103      	bne.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8009066:	4bab      	ldr	r3, [pc, #684]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34
 800906a:	f000 bda5 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800906e:	4ba8      	ldr	r3, [pc, #672]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800907a:	d107      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800907c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009082:	d103      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8009084:	4ba3      	ldr	r3, [pc, #652]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009086:	637b      	str	r3, [r7, #52]	@ 0x34
 8009088:	f000 bd96 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009090:	f000 bd92 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009098:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800909c:	430b      	orrs	r3, r1
 800909e:	d158      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80090a0:	4b9b      	ldr	r3, [pc, #620]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80090a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d84b      	bhi.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80090b2:	a201      	add	r2, pc, #4	@ (adr r2, 80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090f1 	.word	0x080090f1
 80090bc:	080090cd 	.word	0x080090cd
 80090c0:	080090df 	.word	0x080090df
 80090c4:	080090fb 	.word	0x080090fb
 80090c8:	08009105 	.word	0x08009105
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe ff8f 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090da:	f000 bd6d 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090de:	f107 030c 	add.w	r3, r7, #12
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff fa3a 	bl	800855c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ec:	f000 bd64 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80090f0:	f7fe f8e4 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 80090f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80090f6:	f000 bd5f 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80090fa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80090fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009100:	f000 bd5a 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009104:	4b82      	ldr	r3, [pc, #520]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0320 	and.w	r3, r3, #32
 800910c:	2b20      	cmp	r3, #32
 800910e:	d118      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009110:	4b7f      	ldr	r3, [pc, #508]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d005      	beq.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800911c:	4b7c      	ldr	r3, [pc, #496]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	0e1b      	lsrs	r3, r3, #24
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	e006      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009128:	4b79      	ldr	r3, [pc, #484]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800912a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	0e1b      	lsrs	r3, r3, #24
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	4a78      	ldr	r2, [pc, #480]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800913e:	f000 bd3b 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009146:	f000 bd37 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800914e:	f000 bd33 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009156:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800915a:	430b      	orrs	r3, r1
 800915c:	d167      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800915e:	4b6c      	ldr	r3, [pc, #432]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009164:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009168:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009170:	d036      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009178:	d855      	bhi.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009180:	d029      	beq.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009188:	d84d      	bhi.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009190:	d013      	beq.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009198:	d845      	bhi.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	2b00      	cmp	r3, #0
 800919e:	d015      	beq.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091a6:	d13e      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe ff21 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091b6:	f000 bcff 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff f9cc 	bl	800855c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091c8:	f000 bcf6 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80091cc:	f7fe f876 	bl	80072bc <HAL_RCC_GetHCLKFreq>
 80091d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80091d2:	f000 bcf1 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80091d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80091da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091dc:	f000 bcec 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80091e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d118      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091ec:	4b48      	ldr	r3, [pc, #288]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80091f8:	4b45      	ldr	r3, [pc, #276]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	0e1b      	lsrs	r3, r3, #24
 80091fe:	f003 030f 	and.w	r3, r3, #15
 8009202:	e006      	b.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009204:	4b42      	ldr	r3, [pc, #264]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	4a41      	ldr	r2, [pc, #260]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009218:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800921a:	f000 bccd 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009222:	f000 bcc9 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800922a:	f000 bcc5 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800922e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009232:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009236:	430b      	orrs	r3, r1
 8009238:	d14c      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800923a:	4b35      	ldr	r3, [pc, #212]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800923c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009240:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009244:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800924c:	f7fe f850 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8009250:	6378      	str	r0, [r7, #52]	@ 0x34
 8009252:	f000 bcb1 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800925c:	d104      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800925e:	f7fd ff2b 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8009262:	6378      	str	r0, [r7, #52]	@ 0x34
 8009264:	f000 bca8 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009268:	4b29      	ldr	r3, [pc, #164]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009274:	d107      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800927c:	d103      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800927e:	4b25      	ldr	r3, [pc, #148]	@ (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
 8009282:	f000 bc99 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009286:	4b22      	ldr	r3, [pc, #136]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b20      	cmp	r3, #32
 8009290:	d11c      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8009292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009298:	d118      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800929a:	4b1d      	ldr	r3, [pc, #116]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80092a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	0e1b      	lsrs	r3, r3, #24
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	e006      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80092b2:	4b17      	ldr	r3, [pc, #92]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092b8:	041b      	lsls	r3, r3, #16
 80092ba:	0e1b      	lsrs	r3, r3, #24
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	4a15      	ldr	r2, [pc, #84]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80092c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c8:	f000 bc76 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d0:	f000 bc72 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80092d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80092dc:	430b      	orrs	r3, r1
 80092de:	d153      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80092e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80092ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d104      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80092f2:	f7fd fffd 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 80092f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80092f8:	f000 bc5e 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009302:	d10b      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009304:	f7fd fed8 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8009308:	6378      	str	r0, [r7, #52]	@ 0x34
 800930a:	f000 bc55 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800930e:	bf00      	nop
 8009310:	46020c00 	.word	0x46020c00
 8009314:	00f42400 	.word	0x00f42400
 8009318:	0800cb0c 	.word	0x0800cb0c
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800931c:	4ba1      	ldr	r3, [pc, #644]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009328:	d107      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009330:	d103      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8009332:	4b9d      	ldr	r3, [pc, #628]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
 8009336:	f000 bc3f 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800933a:	4b9a      	ldr	r3, [pc, #616]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b20      	cmp	r3, #32
 8009344:	d11c      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800934c:	d118      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800934e:	4b95      	ldr	r3, [pc, #596]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d005      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800935a:	4b92      	ldr	r3, [pc, #584]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	0e1b      	lsrs	r3, r3, #24
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	e006      	b.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009366:	4b8f      	ldr	r3, [pc, #572]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800936c:	041b      	lsls	r3, r3, #16
 800936e:	0e1b      	lsrs	r3, r3, #24
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	4a8d      	ldr	r2, [pc, #564]	@ (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800937a:	637b      	str	r3, [r7, #52]	@ 0x34
 800937c:	f000 bc1c 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	637b      	str	r3, [r7, #52]	@ 0x34
 8009384:	f000 bc18 	b.w	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009390:	430b      	orrs	r3, r1
 8009392:	d151      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009394:	4b83      	ldr	r3, [pc, #524]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800939a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800939e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80093a4:	d024      	beq.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80093aa:	d842      	bhi.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	2b80      	cmp	r3, #128	@ 0x80
 80093b0:	d00d      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	2b80      	cmp	r3, #128	@ 0x80
 80093b6:	d83c      	bhi.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	2b40      	cmp	r3, #64	@ 0x40
 80093c2:	d011      	beq.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80093c4:	e035      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80093c6:	f7fd ffbb 	bl	8007340 <HAL_RCC_GetPCLK3Freq>
 80093ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80093cc:	e3f4      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093ce:	4b75      	ldr	r3, [pc, #468]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093da:	d102      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80093dc:	4b72      	ldr	r3, [pc, #456]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80093e0:	e3ea      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093e6:	e3e7      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80093e8:	f7fd fe66 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80093ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80093ee:	e3e3      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80093f0:	4b6c      	ldr	r3, [pc, #432]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b20      	cmp	r3, #32
 80093fa:	d117      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80093fc:	4b69      	ldr	r3, [pc, #420]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8009408:	4b66      	ldr	r3, [pc, #408]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	0e1b      	lsrs	r3, r3, #24
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	e006      	b.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8009414:	4b63      	ldr	r3, [pc, #396]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800941a:	041b      	lsls	r3, r3, #16
 800941c:	0e1b      	lsrs	r3, r3, #24
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	4a62      	ldr	r2, [pc, #392]	@ (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009428:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800942a:	e3c5      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800942c:	2300      	movs	r3, #0
 800942e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009430:	e3c2      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009436:	e3bf      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009440:	430b      	orrs	r3, r1
 8009442:	d147      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009444:	4b57      	ldr	r3, [pc, #348]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800944a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800944e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	2b00      	cmp	r3, #0
 8009454:	d103      	bne.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009456:	f7fd ff4b 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 800945a:	6378      	str	r0, [r7, #52]	@ 0x34
 800945c:	e3ac      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009464:	d103      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009466:	f7fd fe27 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 800946a:	6378      	str	r0, [r7, #52]	@ 0x34
 800946c:	e3a4      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800946e:	4b4d      	ldr	r3, [pc, #308]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800947a:	d106      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800947c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009482:	d102      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8009484:	4b48      	ldr	r3, [pc, #288]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
 8009488:	e396      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800948a:	4b46      	ldr	r3, [pc, #280]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0320 	and.w	r3, r3, #32
 8009492:	2b20      	cmp	r3, #32
 8009494:	d11b      	bne.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8009496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009498:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800949c:	d117      	bne.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800949e:	4b41      	ldr	r3, [pc, #260]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80094aa:	4b3e      	ldr	r3, [pc, #248]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	0e1b      	lsrs	r3, r3, #24
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	e006      	b.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80094b6:	4b3b      	ldr	r3, [pc, #236]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094bc:	041b      	lsls	r3, r3, #16
 80094be:	0e1b      	lsrs	r3, r3, #24
 80094c0:	f003 030f 	and.w	r3, r3, #15
 80094c4:	4a39      	ldr	r2, [pc, #228]	@ (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80094c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80094cc:	e374      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d2:	e371      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80094d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80094dc:	430b      	orrs	r3, r1
 80094de:	d16a      	bne.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80094e0:	4b30      	ldr	r3, [pc, #192]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d120      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80094f2:	4b2c      	ldr	r3, [pc, #176]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d117      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094fe:	4b29      	ldr	r3, [pc, #164]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800950a:	4b26      	ldr	r3, [pc, #152]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	0e1b      	lsrs	r3, r3, #24
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	e006      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009516:	4b23      	ldr	r3, [pc, #140]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800951c:	041b      	lsls	r3, r3, #16
 800951e:	0e1b      	lsrs	r3, r3, #24
 8009520:	f003 030f 	and.w	r3, r3, #15
 8009524:	4a21      	ldr	r2, [pc, #132]	@ (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952a:	637b      	str	r3, [r7, #52]	@ 0x34
 800952c:	e344      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	637b      	str	r3, [r7, #52]	@ 0x34
 8009532:	e341      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009534:	4b1b      	ldr	r3, [pc, #108]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800953a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800953e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009542:	d112      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800954a:	d10e      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800954c:	4b15      	ldr	r3, [pc, #84]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800954e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800955a:	d102      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800955c:	23fa      	movs	r3, #250	@ 0xfa
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009560:	e32a      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009562:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009566:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009568:	e326      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800956a:	4b0e      	ldr	r3, [pc, #56]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009576:	d106      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800957e:	d102      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009580:	4b09      	ldr	r3, [pc, #36]	@ (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009582:	637b      	str	r3, [r7, #52]	@ 0x34
 8009584:	e318      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009586:	4b07      	ldr	r3, [pc, #28]	@ (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b02      	cmp	r3, #2
 8009592:	d10d      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800959a:	d109      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800959c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a2:	e309      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80095a4:	46020c00 	.word	0x46020c00
 80095a8:	00f42400 	.word	0x00f42400
 80095ac:	0800cb0c 	.word	0x0800cb0c
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b4:	e300      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80095b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ba:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80095be:	430b      	orrs	r3, r1
 80095c0:	d164      	bne.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80095c2:	4ba2      	ldr	r3, [pc, #648]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80095cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d120      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80095d4:	4b9d      	ldr	r3, [pc, #628]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d117      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095e0:	4b9a      	ldr	r3, [pc, #616]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80095ec:	4b97      	ldr	r3, [pc, #604]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	0e1b      	lsrs	r3, r3, #24
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	e006      	b.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80095f8:	4b94      	ldr	r3, [pc, #592]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80095fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095fe:	041b      	lsls	r3, r3, #16
 8009600:	0e1b      	lsrs	r3, r3, #24
 8009602:	f003 030f 	and.w	r3, r3, #15
 8009606:	4a92      	ldr	r2, [pc, #584]	@ (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800960c:	637b      	str	r3, [r7, #52]	@ 0x34
 800960e:	e2d3      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	637b      	str	r3, [r7, #52]	@ 0x34
 8009614:	e2d0      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009616:	4b8d      	ldr	r3, [pc, #564]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800961c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009620:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009624:	d112      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800962c:	d10e      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800962e:	4b87      	ldr	r3, [pc, #540]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800963c:	d102      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800963e:	23fa      	movs	r3, #250	@ 0xfa
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009642:	e2b9      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009644:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009648:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800964a:	e2b5      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800964c:	4b7f      	ldr	r3, [pc, #508]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009658:	d106      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800965a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009660:	d102      	bne.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8009662:	4b7c      	ldr	r3, [pc, #496]	@ (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
 8009666:	e2a7      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009668:	4b78      	ldr	r3, [pc, #480]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800966a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b02      	cmp	r3, #2
 8009674:	d107      	bne.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8009676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800967c:	d103      	bne.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800967e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009682:	637b      	str	r3, [r7, #52]	@ 0x34
 8009684:	e298      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	637b      	str	r3, [r7, #52]	@ 0x34
 800968a:	e295      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800968c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009690:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009694:	430b      	orrs	r3, r1
 8009696:	d147      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009698:	4b6c      	ldr	r3, [pc, #432]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800969a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800969e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80096a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80096aa:	f7fd fe21 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 80096ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80096b0:	e282      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80096b2:	4b66      	ldr	r3, [pc, #408]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80096b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096c0:	d112      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096c8:	d10e      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096ca:	4b60      	ldr	r3, [pc, #384]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80096cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096d8:	d102      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80096da:	23fa      	movs	r3, #250	@ 0xfa
 80096dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096de:	e26b      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80096e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096e6:	e267      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80096e8:	4b58      	ldr	r3, [pc, #352]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096f4:	d106      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80096fc:	d102      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80096fe:	4b55      	ldr	r3, [pc, #340]	@ (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
 8009702:	e259      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009704:	4b51      	ldr	r3, [pc, #324]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b02      	cmp	r3, #2
 8009710:	d107      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009718:	d103      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800971a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800971e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009720:	e24a      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	637b      	str	r3, [r7, #52]	@ 0x34
 8009726:	e247      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800972c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009730:	430b      	orrs	r3, r1
 8009732:	d12d      	bne.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009734:	4b45      	ldr	r3, [pc, #276]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800973a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800973e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009740:	4b42      	ldr	r3, [pc, #264]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800974c:	d105      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	2b00      	cmp	r3, #0
 8009752:	d102      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8009754:	4b3f      	ldr	r3, [pc, #252]	@ (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009756:	637b      	str	r3, [r7, #52]	@ 0x34
 8009758:	e22e      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800975a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009760:	d107      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fc44 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800976c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009770:	e222      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009774:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009778:	d107      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800977a:	f107 0318 	add.w	r3, r7, #24
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe fd92 	bl	80082a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	637b      	str	r3, [r7, #52]	@ 0x34
 8009788:	e216      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	637b      	str	r3, [r7, #52]	@ 0x34
 800978e:	e213      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009794:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009798:	430b      	orrs	r3, r1
 800979a:	d15d      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800979c:	4b2b      	ldr	r3, [pc, #172]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800979e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80097a2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80097a6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80097a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097ae:	d028      	beq.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80097b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097b6:	d845      	bhi.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097be:	d013      	beq.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097c6:	d83d      	bhi.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80097c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d004      	beq.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80097ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097d4:	d004      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80097d6:	e035      	b.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80097d8:	f7fd fd9e 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 80097dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097de:	e1eb      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80097e0:	f7fd fc6a 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80097e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097e6:	e1e7      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097e8:	4b18      	ldr	r3, [pc, #96]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097f4:	d102      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80097f6:	4b17      	ldr	r3, [pc, #92]	@ (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80097fa:	e1dd      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009800:	e1da      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009802:	4b12      	ldr	r3, [pc, #72]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0320 	and.w	r3, r3, #32
 800980a:	2b20      	cmp	r3, #32
 800980c:	d117      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800980e:	4b0f      	ldr	r3, [pc, #60]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800981a:	4b0c      	ldr	r3, [pc, #48]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	0e1b      	lsrs	r3, r3, #24
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	e006      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8009826:	4b09      	ldr	r3, [pc, #36]	@ (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	0e1b      	lsrs	r3, r3, #24
 8009830:	f003 030f 	and.w	r3, r3, #15
 8009834:	4a06      	ldr	r2, [pc, #24]	@ (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800983a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800983c:	e1bc      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009842:	e1b9      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009848:	e1b6      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800984a:	bf00      	nop
 800984c:	46020c00 	.word	0x46020c00
 8009850:	0800cb0c 	.word	0x0800cb0c
 8009854:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800985c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009860:	430b      	orrs	r3, r1
 8009862:	d156      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009864:	4ba5      	ldr	r3, [pc, #660]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800986a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800986e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009872:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009876:	d028      	beq.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800987e:	d845      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009886:	d013      	beq.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800988e:	d83d      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009892:	2b00      	cmp	r3, #0
 8009894:	d004      	beq.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800989c:	d004      	beq.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800989e:	e035      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80098a0:	f7fd fd26 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 80098a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098a6:	e187      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80098a8:	f7fd fc06 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80098ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098ae:	e183      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098b0:	4b92      	ldr	r3, [pc, #584]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098bc:	d102      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80098be:	4b90      	ldr	r3, [pc, #576]	@ (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80098c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80098c2:	e179      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098c8:	e176      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098ca:	4b8c      	ldr	r3, [pc, #560]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0320 	and.w	r3, r3, #32
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	d117      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098d6:	4b89      	ldr	r3, [pc, #548]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d005      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80098e2:	4b86      	ldr	r3, [pc, #536]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	0e1b      	lsrs	r3, r3, #24
 80098e8:	f003 030f 	and.w	r3, r3, #15
 80098ec:	e006      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80098ee:	4b83      	ldr	r3, [pc, #524]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80098f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	0e1b      	lsrs	r3, r3, #24
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	4a81      	ldr	r2, [pc, #516]	@ (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80098fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009904:	e158      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800990a:	e155      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009910:	e152      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009916:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800991a:	430b      	orrs	r3, r1
 800991c:	d177      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800991e:	4b77      	ldr	r3, [pc, #476]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009924:	f003 0318 	and.w	r3, r3, #24
 8009928:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	2b18      	cmp	r3, #24
 800992e:	d86b      	bhi.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8009930:	a201      	add	r2, pc, #4	@ (adr r2, 8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	0800999d 	.word	0x0800999d
 800993c:	08009a09 	.word	0x08009a09
 8009940:	08009a09 	.word	0x08009a09
 8009944:	08009a09 	.word	0x08009a09
 8009948:	08009a09 	.word	0x08009a09
 800994c:	08009a09 	.word	0x08009a09
 8009950:	08009a09 	.word	0x08009a09
 8009954:	08009a09 	.word	0x08009a09
 8009958:	080099a5 	.word	0x080099a5
 800995c:	08009a09 	.word	0x08009a09
 8009960:	08009a09 	.word	0x08009a09
 8009964:	08009a09 	.word	0x08009a09
 8009968:	08009a09 	.word	0x08009a09
 800996c:	08009a09 	.word	0x08009a09
 8009970:	08009a09 	.word	0x08009a09
 8009974:	08009a09 	.word	0x08009a09
 8009978:	080099ad 	.word	0x080099ad
 800997c:	08009a09 	.word	0x08009a09
 8009980:	08009a09 	.word	0x08009a09
 8009984:	08009a09 	.word	0x08009a09
 8009988:	08009a09 	.word	0x08009a09
 800998c:	08009a09 	.word	0x08009a09
 8009990:	08009a09 	.word	0x08009a09
 8009994:	08009a09 	.word	0x08009a09
 8009998:	080099c7 	.word	0x080099c7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800999c:	f7fd fcd0 	bl	8007340 <HAL_RCC_GetPCLK3Freq>
 80099a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099a2:	e109      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80099a4:	f7fd fb88 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 80099a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099aa:	e105      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099ac:	4b53      	ldr	r3, [pc, #332]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099b8:	d102      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80099ba:	4b51      	ldr	r3, [pc, #324]	@ (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099be:	e0fb      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099c4:	e0f8      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099c6:	4b4d      	ldr	r3, [pc, #308]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0320 	and.w	r3, r3, #32
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d117      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099d2:	4b4a      	ldr	r3, [pc, #296]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80099de:	4b47      	ldr	r3, [pc, #284]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	0e1b      	lsrs	r3, r3, #24
 80099e4:	f003 030f 	and.w	r3, r3, #15
 80099e8:	e006      	b.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80099ea:	4b44      	ldr	r3, [pc, #272]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80099ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099f0:	041b      	lsls	r3, r3, #16
 80099f2:	0e1b      	lsrs	r3, r3, #24
 80099f4:	f003 030f 	and.w	r3, r3, #15
 80099f8:	4a42      	ldr	r2, [pc, #264]	@ (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80099fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a00:	e0da      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a06:	e0d7      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a0c:	e0d4      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a12:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009a16:	430b      	orrs	r3, r1
 8009a18:	d155      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009a1a:	4b38      	ldr	r3, [pc, #224]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009a24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a2c:	d013      	beq.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a34:	d844      	bhi.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a3c:	d013      	beq.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a44:	d83c      	bhi.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d014      	beq.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a52:	d014      	beq.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009a54:	e034      	b.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a56:	f107 0318 	add.w	r3, r7, #24
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fc24 	bl	80082a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a64:	e0a8      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fac2 	bl	8007ff4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a74:	e0a0      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a76:	f7fd fb1f 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8009a7a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a7c:	e09c      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d117      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8009a96:	4b19      	ldr	r3, [pc, #100]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	0e1b      	lsrs	r3, r3, #24
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	e006      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009aa2:	4b16      	ldr	r3, [pc, #88]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009aa8:	041b      	lsls	r3, r3, #16
 8009aaa:	0e1b      	lsrs	r3, r3, #24
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	4a14      	ldr	r2, [pc, #80]	@ (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ab8:	e07e      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009abe:	e07b      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ac4:	e078      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aca:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009ace:	430b      	orrs	r3, r1
 8009ad0:	d138      	bne.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009adc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009ade:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d10d      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8009af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af8:	e05e      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009afa:	bf00      	nop
 8009afc:	46020c00 	.word	0x46020c00
 8009b00:	00f42400 	.word	0x00f42400
 8009b04:	0800cb0c 	.word	0x0800cb0c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009b08:	4b2e      	ldr	r3, [pc, #184]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b16:	d112      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8009b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b1e:	d10e      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b20:	4b28      	ldr	r3, [pc, #160]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b2e:	d102      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8009b30:	23fa      	movs	r3, #250	@ 0xfa
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b34:	e040      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009b36:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b3a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b3c:	e03c      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b42:	e039      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b48:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	d131      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009b50:	4b1c      	ldr	r3, [pc, #112]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009b52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b56:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009b5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009b5c:	4b19      	ldr	r3, [pc, #100]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b68:	d105      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8009b70:	4b15      	ldr	r3, [pc, #84]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b74:	e020      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009b76:	4b13      	ldr	r3, [pc, #76]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b82:	d106      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b8a:	d102      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b90:	e012      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009b92:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b9e:	d106      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba6:	d102      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8009ba8:	4b09      	ldr	r3, [pc, #36]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8009baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bac:	e004      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb2:	e001      	b.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3738      	adds	r7, #56	@ 0x38
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	46020c00 	.word	0x46020c00
 8009bc8:	02dc6c00 	.word	0x02dc6c00
 8009bcc:	016e3600 	.word	0x016e3600
 8009bd0:	00f42400 	.word	0x00f42400

08009bd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009bdc:	4b47      	ldr	r3, [pc, #284]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a46      	ldr	r2, [pc, #280]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009be2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009be6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009be8:	f7f8 ff60 	bl	8002aac <HAL_GetTick>
 8009bec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bee:	e008      	b.n	8009c02 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bf0:	f7f8 ff5c 	bl	8002aac <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e077      	b.n	8009cf2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c02:	4b3e      	ldr	r3, [pc, #248]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c16:	f023 0303 	bic.w	r3, r3, #3
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6811      	ldr	r1, [r2, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6852      	ldr	r2, [r2, #4]
 8009c22:	3a01      	subs	r2, #1
 8009c24:	0212      	lsls	r2, r2, #8
 8009c26:	430a      	orrs	r2, r1
 8009c28:	4934      	ldr	r1, [pc, #208]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009c2e:	4b33      	ldr	r3, [pc, #204]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c32:	4b33      	ldr	r3, [pc, #204]	@ (8009d00 <RCCEx_PLL2_Config+0x12c>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	6892      	ldr	r2, [r2, #8]
 8009c3a:	3a01      	subs	r2, #1
 8009c3c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	68d2      	ldr	r2, [r2, #12]
 8009c44:	3a01      	subs	r2, #1
 8009c46:	0252      	lsls	r2, r2, #9
 8009c48:	b292      	uxth	r2, r2
 8009c4a:	4311      	orrs	r1, r2
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6912      	ldr	r2, [r2, #16]
 8009c50:	3a01      	subs	r2, #1
 8009c52:	0412      	lsls	r2, r2, #16
 8009c54:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009c58:	4311      	orrs	r1, r2
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	6952      	ldr	r2, [r2, #20]
 8009c5e:	3a01      	subs	r2, #1
 8009c60:	0612      	lsls	r2, r2, #24
 8009c62:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009c66:	430a      	orrs	r2, r1
 8009c68:	4924      	ldr	r1, [pc, #144]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009c6e:	4b23      	ldr	r3, [pc, #140]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c72:	f023 020c 	bic.w	r2, r3, #12
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	4920      	ldr	r1, [pc, #128]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009c80:	4b1e      	ldr	r3, [pc, #120]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	491c      	ldr	r1, [pc, #112]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c92:	4a1a      	ldr	r2, [pc, #104]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c94:	f023 0310 	bic.w	r3, r3, #16
 8009c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c9a:	4b18      	ldr	r3, [pc, #96]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ca2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	69d2      	ldr	r2, [r2, #28]
 8009caa:	00d2      	lsls	r2, r2, #3
 8009cac:	4913      	ldr	r1, [pc, #76]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009cb2:	4b12      	ldr	r3, [pc, #72]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb6:	4a11      	ldr	r2, [pc, #68]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009cb8:	f043 0310 	orr.w	r3, r3, #16
 8009cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009cc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009cc8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009cca:	f7f8 feef 	bl	8002aac <HAL_GetTick>
 8009cce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cd0:	e008      	b.n	8009ce4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cd2:	f7f8 feeb 	bl	8002aac <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d901      	bls.n	8009ce4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e006      	b.n	8009cf2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ce4:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <RCCEx_PLL2_Config+0x128>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0f0      	beq.n	8009cd2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0

}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	46020c00 	.word	0x46020c00
 8009d00:	80800000 	.word	0x80800000

08009d04 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009d0c:	4b47      	ldr	r3, [pc, #284]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a46      	ldr	r2, [pc, #280]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d18:	f7f8 fec8 	bl	8002aac <HAL_GetTick>
 8009d1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d1e:	e008      	b.n	8009d32 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d20:	f7f8 fec4 	bl	8002aac <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d901      	bls.n	8009d32 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e077      	b.n	8009e22 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d32:	4b3e      	ldr	r3, [pc, #248]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1f0      	bne.n	8009d20 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	6811      	ldr	r1, [r2, #0]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6852      	ldr	r2, [r2, #4]
 8009d52:	3a01      	subs	r2, #1
 8009d54:	0212      	lsls	r2, r2, #8
 8009d56:	430a      	orrs	r2, r1
 8009d58:	4934      	ldr	r1, [pc, #208]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	630b      	str	r3, [r1, #48]	@ 0x30
 8009d5e:	4b33      	ldr	r3, [pc, #204]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d62:	4b33      	ldr	r3, [pc, #204]	@ (8009e30 <RCCEx_PLL3_Config+0x12c>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	6892      	ldr	r2, [r2, #8]
 8009d6a:	3a01      	subs	r2, #1
 8009d6c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	68d2      	ldr	r2, [r2, #12]
 8009d74:	3a01      	subs	r2, #1
 8009d76:	0252      	lsls	r2, r2, #9
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	4311      	orrs	r1, r2
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6912      	ldr	r2, [r2, #16]
 8009d80:	3a01      	subs	r2, #1
 8009d82:	0412      	lsls	r2, r2, #16
 8009d84:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009d88:	4311      	orrs	r1, r2
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6952      	ldr	r2, [r2, #20]
 8009d8e:	3a01      	subs	r2, #1
 8009d90:	0612      	lsls	r2, r2, #24
 8009d92:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009d96:	430a      	orrs	r2, r1
 8009d98:	4924      	ldr	r1, [pc, #144]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009d9e:	4b23      	ldr	r3, [pc, #140]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da2:	f023 020c 	bic.w	r2, r3, #12
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	4920      	ldr	r1, [pc, #128]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009db0:	4b1e      	ldr	r3, [pc, #120]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	491c      	ldr	r1, [pc, #112]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009dc4:	f023 0310 	bic.w	r3, r3, #16
 8009dc8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009dca:	4b18      	ldr	r3, [pc, #96]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009dd2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	69d2      	ldr	r2, [r2, #28]
 8009dda:	00d2      	lsls	r2, r2, #3
 8009ddc:	4913      	ldr	r1, [pc, #76]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de6:	4a11      	ldr	r2, [pc, #68]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009de8:	f043 0310 	orr.w	r3, r3, #16
 8009dec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009dee:	4b0f      	ldr	r3, [pc, #60]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a0e      	ldr	r2, [pc, #56]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009df8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009dfa:	f7f8 fe57 	bl	8002aac <HAL_GetTick>
 8009dfe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e00:	e008      	b.n	8009e14 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e02:	f7f8 fe53 	bl	8002aac <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e006      	b.n	8009e22 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e14:	4b05      	ldr	r3, [pc, #20]	@ (8009e2c <RCCEx_PLL3_Config+0x128>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0f0      	beq.n	8009e02 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	46020c00 	.word	0x46020c00
 8009e30:	80800000 	.word	0x80800000

08009e34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e0fb      	b.n	800a03e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a7f      	ldr	r2, [pc, #508]	@ (800a048 <HAL_SPI_Init+0x214>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d004      	beq.n	8009e5a <HAL_SPI_Init+0x26>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a7d      	ldr	r2, [pc, #500]	@ (800a04c <HAL_SPI_Init+0x218>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	e000      	b.n	8009e5c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009e5a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a78      	ldr	r2, [pc, #480]	@ (800a048 <HAL_SPI_Init+0x214>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d004      	beq.n	8009e76 <HAL_SPI_Init+0x42>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a76      	ldr	r2, [pc, #472]	@ (800a04c <HAL_SPI_Init+0x218>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d105      	bne.n	8009e82 <HAL_SPI_Init+0x4e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	2b0f      	cmp	r3, #15
 8009e7c:	d901      	bls.n	8009e82 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e0dd      	b.n	800a03e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 f8fa 	bl	800b07c <SPI_GetPacketSize>
 8009e88:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a6e      	ldr	r2, [pc, #440]	@ (800a048 <HAL_SPI_Init+0x214>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d004      	beq.n	8009e9e <HAL_SPI_Init+0x6a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a6c      	ldr	r2, [pc, #432]	@ (800a04c <HAL_SPI_Init+0x218>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d102      	bne.n	8009ea4 <HAL_SPI_Init+0x70>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d816      	bhi.n	8009ed2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ea8:	4a69      	ldr	r2, [pc, #420]	@ (800a050 <HAL_SPI_Init+0x21c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00e      	beq.n	8009ecc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a68      	ldr	r2, [pc, #416]	@ (800a054 <HAL_SPI_Init+0x220>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d009      	beq.n	8009ecc <HAL_SPI_Init+0x98>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a66      	ldr	r2, [pc, #408]	@ (800a058 <HAL_SPI_Init+0x224>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d004      	beq.n	8009ecc <HAL_SPI_Init+0x98>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a65      	ldr	r2, [pc, #404]	@ (800a05c <HAL_SPI_Init+0x228>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d104      	bne.n	8009ed6 <HAL_SPI_Init+0xa2>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d901      	bls.n	8009ed6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e0b3      	b.n	800a03e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7f7 ff42 	bl	8001d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 0201 	bic.w	r2, r2, #1
 8009f06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009f12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f1c:	d119      	bne.n	8009f52 <HAL_SPI_Init+0x11e>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f26:	d103      	bne.n	8009f30 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d008      	beq.n	8009f42 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10c      	bne.n	8009f52 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f40:	d107      	bne.n	8009f52 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00f      	beq.n	8009f7e <HAL_SPI_Init+0x14a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b06      	cmp	r3, #6
 8009f64:	d90b      	bls.n	8009f7e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e007      	b.n	8009f8e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69da      	ldr	r2, [r3, #28]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f96:	431a      	orrs	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa0:	ea42 0103 	orr.w	r1, r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	431a      	orrs	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ffa:	ea42 0103 	orr.w	r1, r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	430a      	orrs	r2, r1
 800a02a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	46002000 	.word	0x46002000
 800a04c:	56002000 	.word	0x56002000
 800a050:	40013000 	.word	0x40013000
 800a054:	50013000 	.word	0x50013000
 800a058:	40003800 	.word	0x40003800
 800a05c:	50003800 	.word	0x50003800

0800a060 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e01b      	b.n	800a0aa <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2202      	movs	r2, #2
 800a076:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 0201 	bic.w	r2, r2, #1
 800a088:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7f8 f996 	bl	80023bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State = HAL_SPI_STATE_RESET;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3320      	adds	r3, #32
 800a0ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a90      	ldr	r2, [pc, #576]	@ (800a314 <HAL_SPI_Transmit+0x260>)
 800a0d2:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0d4:	f7f8 fcea 	bl	8002aac <HAL_GetTick>
 800a0d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d001      	beq.n	800a0ea <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e1f4      	b.n	800a4d4 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_SPI_Transmit+0x42>
 800a0f0:	88fb      	ldrh	r3, [r7, #6]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e1ec      	b.n	800a4d4 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_SPI_Transmit+0x54>
 800a104:	2302      	movs	r3, #2
 800a106:	e1e5      	b.n	800a4d4 <HAL_SPI_Transmit+0x420>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2203      	movs	r2, #3
 800a114:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	88fa      	ldrh	r2, [r7, #6]
 800a12a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	88fa      	ldrh	r2, [r7, #6]
 800a132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a160:	d108      	bne.n	800a174 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	e009      	b.n	800a188 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a186:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	0c1b      	lsrs	r3, r3, #16
 800a190:	041b      	lsls	r3, r3, #16
 800a192:	88f9      	ldrh	r1, [r7, #6]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	6812      	ldr	r2, [r2, #0]
 800a198:	430b      	orrs	r3, r1
 800a19a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f042 0201 	orr.w	r2, r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10c      	bne.n	800a1d4 <HAL_SPI_Transmit+0x120>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1c2:	d107      	bne.n	800a1d4 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b0f      	cmp	r3, #15
 800a1da:	d95b      	bls.n	800a294 <HAL_SPI_Transmit+0x1e0>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a4d      	ldr	r2, [pc, #308]	@ (800a318 <HAL_SPI_Transmit+0x264>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d04f      	beq.n	800a286 <HAL_SPI_Transmit+0x1d2>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a4c      	ldr	r2, [pc, #304]	@ (800a31c <HAL_SPI_Transmit+0x268>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d04a      	beq.n	800a286 <HAL_SPI_Transmit+0x1d2>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a4a      	ldr	r2, [pc, #296]	@ (800a320 <HAL_SPI_Transmit+0x26c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d045      	beq.n	800a286 <HAL_SPI_Transmit+0x1d2>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a49      	ldr	r2, [pc, #292]	@ (800a324 <HAL_SPI_Transmit+0x270>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d147      	bne.n	800a294 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a204:	e03f      	b.n	800a286 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	f003 0302 	and.w	r3, r3, #2
 800a210:	2b02      	cmp	r3, #2
 800a212:	d114      	bne.n	800a23e <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6812      	ldr	r2, [r2, #0]
 800a21e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a224:	1d1a      	adds	r2, r3, #4
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a230:	b29b      	uxth	r3, r3
 800a232:	3b01      	subs	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a23c:	e023      	b.n	800a286 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a23e:	f7f8 fc35 	bl	8002aac <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d803      	bhi.n	800a256 <HAL_SPI_Transmit+0x1a2>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a254:	d102      	bne.n	800a25c <HAL_SPI_Transmit+0x1a8>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d114      	bne.n	800a286 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 fe3f 	bl	800aee0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a268:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e126      	b.n	800a4d4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1b9      	bne.n	800a206 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a292:	e0f9      	b.n	800a488 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	2b07      	cmp	r3, #7
 800a29a:	f240 80ee 	bls.w	800a47a <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a29e:	e067      	b.n	800a370 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	f003 0302 	and.w	r3, r3, #2
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d13c      	bne.n	800a328 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d918      	bls.n	800a2ec <HAL_SPI_Transmit+0x238>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d014      	beq.n	800a2ec <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3b02      	subs	r3, #2
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2ea:	e041      	b.n	800a370 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f0:	881a      	ldrh	r2, [r3, #0]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2fa:	1c9a      	adds	r2, r3, #2
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a306:	b29b      	uxth	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a312:	e02d      	b.n	800a370 <HAL_SPI_Transmit+0x2bc>
 800a314:	46002000 	.word	0x46002000
 800a318:	40013000 	.word	0x40013000
 800a31c:	50013000 	.word	0x50013000
 800a320:	40003800 	.word	0x40003800
 800a324:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a328:	f7f8 fbc0 	bl	8002aac <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d803      	bhi.n	800a340 <HAL_SPI_Transmit+0x28c>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d102      	bne.n	800a346 <HAL_SPI_Transmit+0x292>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d114      	bne.n	800a370 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fdca 	bl	800aee0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a352:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e0b1      	b.n	800a4d4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a376:	b29b      	uxth	r3, r3
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d191      	bne.n	800a2a0 <HAL_SPI_Transmit+0x1ec>
 800a37c:	e084      	b.n	800a488 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	695b      	ldr	r3, [r3, #20]
 800a384:	f003 0302 	and.w	r3, r3, #2
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d152      	bne.n	800a432 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a392:	b29b      	uxth	r3, r3
 800a394:	2b03      	cmp	r3, #3
 800a396:	d918      	bls.n	800a3ca <HAL_SPI_Transmit+0x316>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a39c:	2b40      	cmp	r3, #64	@ 0x40
 800a39e:	d914      	bls.n	800a3ca <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b0:	1d1a      	adds	r2, r3, #4
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	3b04      	subs	r3, #4
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a3c8:	e057      	b.n	800a47a <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d917      	bls.n	800a406 <HAL_SPI_Transmit+0x352>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d013      	beq.n	800a406 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3e2:	881a      	ldrh	r2, [r3, #0]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ec:	1c9a      	adds	r2, r3, #2
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	3b02      	subs	r3, #2
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a404:	e039      	b.n	800a47a <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3320      	adds	r3, #32
 800a410:	7812      	ldrb	r2, [r2, #0]
 800a412:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a424:	b29b      	uxth	r3, r3
 800a426:	3b01      	subs	r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a430:	e023      	b.n	800a47a <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a432:	f7f8 fb3b 	bl	8002aac <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d803      	bhi.n	800a44a <HAL_SPI_Transmit+0x396>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d102      	bne.n	800a450 <HAL_SPI_Transmit+0x39c>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d114      	bne.n	800a47a <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fd45 	bl	800aee0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a45c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e02c      	b.n	800a4d4 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a480:	b29b      	uxth	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	f47f af7b 	bne.w	800a37e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2200      	movs	r2, #0
 800a490:	2108      	movs	r1, #8
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 fdc4 	bl	800b020 <SPI_WaitOnFlagUntilTimeout>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d007      	beq.n	800a4ae <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4a4:	f043 0220 	orr.w	r2, r3, #32
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 fd16 	bl	800aee0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
  }
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4f0:	095b      	lsrs	r3, r3, #5
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3330      	adds	r3, #48	@ 0x30
 800a4fe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a94      	ldr	r2, [pc, #592]	@ (800a758 <HAL_SPI_Receive+0x27c>)
 800a506:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a508:	f7f8 fad0 	bl	8002aac <HAL_GetTick>
 800a50c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b01      	cmp	r3, #1
 800a518:	d001      	beq.n	800a51e <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 800a51a:	2302      	movs	r3, #2
 800a51c:	e2bc      	b.n	800aa98 <HAL_SPI_Receive+0x5bc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <HAL_SPI_Receive+0x4e>
 800a524:	88fb      	ldrh	r3, [r7, #6]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e2b4      	b.n	800aa98 <HAL_SPI_Receive+0x5bc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a534:	2b01      	cmp	r3, #1
 800a536:	d101      	bne.n	800a53c <HAL_SPI_Receive+0x60>
 800a538:	2302      	movs	r3, #2
 800a53a:	e2ad      	b.n	800aa98 <HAL_SPI_Receive+0x5bc>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2204      	movs	r2, #4
 800a548:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	88fa      	ldrh	r2, [r7, #6]
 800a55e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a594:	d108      	bne.n	800a5a8 <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e009      	b.n	800a5bc <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a5ba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	0c1b      	lsrs	r3, r3, #16
 800a5c4:	041b      	lsls	r3, r3, #16
 800a5c6:	88f9      	ldrh	r1, [r7, #6]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	6812      	ldr	r2, [r2, #0]
 800a5cc:	430b      	orrs	r3, r1
 800a5ce:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0201 	orr.w	r2, r2, #1
 800a5de:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10c      	bne.n	800a608 <HAL_SPI_Receive+0x12c>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5f6:	d107      	bne.n	800a608 <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a606:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	2b0f      	cmp	r3, #15
 800a60e:	f240 809c 	bls.w	800a74a <HAL_SPI_Receive+0x26e>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a51      	ldr	r2, [pc, #324]	@ (800a75c <HAL_SPI_Receive+0x280>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	f000 808e 	beq.w	800a73a <HAL_SPI_Receive+0x25e>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a4f      	ldr	r2, [pc, #316]	@ (800a760 <HAL_SPI_Receive+0x284>)
 800a624:	4293      	cmp	r3, r2
 800a626:	f000 8088 	beq.w	800a73a <HAL_SPI_Receive+0x25e>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a4d      	ldr	r2, [pc, #308]	@ (800a764 <HAL_SPI_Receive+0x288>)
 800a630:	4293      	cmp	r3, r2
 800a632:	f000 8082 	beq.w	800a73a <HAL_SPI_Receive+0x25e>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a4b      	ldr	r2, [pc, #300]	@ (800a768 <HAL_SPI_Receive+0x28c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	f040 8084 	bne.w	800a74a <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a642:	e07a      	b.n	800a73a <HAL_SPI_Receive+0x25e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b01      	cmp	r3, #1
 800a658:	d114      	bne.n	800a684 <HAL_SPI_Receive+0x1a8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a662:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a664:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a676:	b29b      	uxth	r3, r3
 800a678:	3b01      	subs	r3, #1
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a682:	e05a      	b.n	800a73a <HAL_SPI_Receive+0x25e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	8bfa      	ldrh	r2, [r7, #30]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d919      	bls.n	800a6c6 <HAL_SPI_Receive+0x1ea>
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d014      	beq.n	800a6c6 <HAL_SPI_Receive+0x1ea>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a6a6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a6c4:	e039      	b.n	800a73a <HAL_SPI_Receive+0x25e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d010      	beq.n	800a6f2 <HAL_SPI_Receive+0x216>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6de:	d12c      	bne.n	800a73a <HAL_SPI_Receive+0x25e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	699a      	ldr	r2, [r3, #24]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6ee:	619a      	str	r2, [r3, #24]
 800a6f0:	e023      	b.n	800a73a <HAL_SPI_Receive+0x25e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6f2:	f7f8 f9db 	bl	8002aac <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d803      	bhi.n	800a70a <HAL_SPI_Receive+0x22e>
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a708:	d102      	bne.n	800a710 <HAL_SPI_Receive+0x234>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d114      	bne.n	800a73a <HAL_SPI_Receive+0x25e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 fbe5 	bl	800aee0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a71c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e1ae      	b.n	800aa98 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a740:	b29b      	uxth	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	f47f af7e 	bne.w	800a644 <HAL_SPI_Receive+0x168>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a748:	e193      	b.n	800aa72 <HAL_SPI_Receive+0x596>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	2b07      	cmp	r3, #7
 800a750:	f240 8188 	bls.w	800aa64 <HAL_SPI_Receive+0x588>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a754:	e0b0      	b.n	800a8b8 <HAL_SPI_Receive+0x3dc>
 800a756:	bf00      	nop
 800a758:	46002000 	.word	0x46002000
 800a75c:	40013000 	.word	0x40013000
 800a760:	50013000 	.word	0x50013000
 800a764:	40003800 	.word	0x40003800
 800a768:	50003800 	.word	0x50003800
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d114      	bne.n	800a7ac <HAL_SPI_Receive+0x2d0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	8812      	ldrh	r2, [r2, #0]
 800a78a:	b292      	uxth	r2, r2
 800a78c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a792:	1c9a      	adds	r2, r3, #2
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a7aa:	e085      	b.n	800a8b8 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	8bfa      	ldrh	r2, [r7, #30]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d924      	bls.n	800a804 <HAL_SPI_Receive+0x328>
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01f      	beq.n	800a804 <HAL_SPI_Receive+0x328>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	8812      	ldrh	r2, [r2, #0]
 800a7cc:	b292      	uxth	r2, r2
 800a7ce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7d4:	1c9a      	adds	r2, r3, #2
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	8812      	ldrh	r2, [r2, #0]
 800a7e2:	b292      	uxth	r2, r2
 800a7e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ea:	1c9a      	adds	r2, r3, #2
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b02      	subs	r3, #2
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a802:	e059      	b.n	800a8b8 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d119      	bne.n	800a844 <HAL_SPI_Receive+0x368>
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d014      	beq.n	800a844 <HAL_SPI_Receive+0x368>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	8812      	ldrh	r2, [r2, #0]
 800a822:	b292      	uxth	r2, r2
 800a824:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a82a:	1c9a      	adds	r2, r3, #2
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a836:	b29b      	uxth	r3, r3
 800a838:	3b01      	subs	r3, #1
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a842:	e039      	b.n	800a8b8 <HAL_SPI_Receive+0x3dc>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d010      	beq.n	800a870 <HAL_SPI_Receive+0x394>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a85c:	d12c      	bne.n	800a8b8 <HAL_SPI_Receive+0x3dc>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	699a      	ldr	r2, [r3, #24]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a86c:	619a      	str	r2, [r3, #24]
 800a86e:	e023      	b.n	800a8b8 <HAL_SPI_Receive+0x3dc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a870:	f7f8 f91c 	bl	8002aac <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d803      	bhi.n	800a888 <HAL_SPI_Receive+0x3ac>
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a886:	d102      	bne.n	800a88e <HAL_SPI_Receive+0x3b2>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d114      	bne.n	800a8b8 <HAL_SPI_Receive+0x3dc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f000 fb26 	bl	800aee0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a89a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e0ef      	b.n	800aa98 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f47f af53 	bne.w	800a76c <HAL_SPI_Receive+0x290>
 800a8c6:	e0d4      	b.n	800aa72 <HAL_SPI_Receive+0x596>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d117      	bne.n	800a90e <HAL_SPI_Receive+0x432>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8ea:	7812      	ldrb	r2, [r2, #0]
 800a8ec:	b2d2      	uxtb	r2, r2
 800a8ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a900:	b29b      	uxth	r3, r3
 800a902:	3b01      	subs	r3, #1
 800a904:	b29a      	uxth	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a90c:	e0aa      	b.n	800aa64 <HAL_SPI_Receive+0x588>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a914:	b29b      	uxth	r3, r3
 800a916:	8bfa      	ldrh	r2, [r7, #30]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d946      	bls.n	800a9aa <HAL_SPI_Receive+0x4ce>
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d041      	beq.n	800a9aa <HAL_SPI_Receive+0x4ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a932:	7812      	ldrb	r2, [r2, #0]
 800a934:	b2d2      	uxtb	r2, r2
 800a936:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	b2d2      	uxtb	r2, r2
 800a952:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a958:	1c5a      	adds	r2, r3, #1
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a96a:	7812      	ldrb	r2, [r2, #0]
 800a96c:	b2d2      	uxtb	r2, r2
 800a96e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a986:	7812      	ldrb	r2, [r2, #0]
 800a988:	b2d2      	uxtb	r2, r2
 800a98a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3b04      	subs	r3, #4
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a9a8:	e05c      	b.n	800aa64 <HAL_SPI_Receive+0x588>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d81c      	bhi.n	800a9f0 <HAL_SPI_Receive+0x514>
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d017      	beq.n	800a9f0 <HAL_SPI_Receive+0x514>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9cc:	7812      	ldrb	r2, [r2, #0]
 800a9ce:	b2d2      	uxtb	r2, r2
 800a9d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800a9ee:	e039      	b.n	800aa64 <HAL_SPI_Receive+0x588>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d010      	beq.n	800aa1c <HAL_SPI_Receive+0x540>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa08:	d12c      	bne.n	800aa64 <HAL_SPI_Receive+0x588>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	699a      	ldr	r2, [r3, #24]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa18:	619a      	str	r2, [r3, #24]
 800aa1a:	e023      	b.n	800aa64 <HAL_SPI_Receive+0x588>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa1c:	f7f8 f846 	bl	8002aac <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d803      	bhi.n	800aa34 <HAL_SPI_Receive+0x558>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa32:	d102      	bne.n	800aa3a <HAL_SPI_Receive+0x55e>
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d114      	bne.n	800aa64 <HAL_SPI_Receive+0x588>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 fa50 	bl	800aee0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e019      	b.n	800aa98 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f47f af2b 	bne.w	800a8c8 <HAL_SPI_Receive+0x3ec>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 fa34 	bl	800aee0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <HAL_SPI_Receive+0x5ba>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e000      	b.n	800aa98 <HAL_SPI_Receive+0x5bc>
  }
  else
  {
    return HAL_OK;
 800aa96:	2300      	movs	r3, #0
  }
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3720      	adds	r7, #32
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	@ 0x28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800aab8:	6a3a      	ldr	r2, [r7, #32]
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	4013      	ands	r3, r2
 800aabe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aad2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3330      	adds	r3, #48	@ 0x30
 800aada:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d010      	beq.n	800ab08 <HAL_SPI_IRQHandler+0x68>
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	f003 0308 	and.w	r3, r3, #8
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aafe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f9c9 	bl	800ae98 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ab06:	e19a      	b.n	800ae3e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d113      	bne.n	800ab3a <HAL_SPI_IRQHandler+0x9a>
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10e      	bne.n	800ab3a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d009      	beq.n	800ab3a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	4798      	blx	r3
    handled = 1UL;
 800ab36:	2301      	movs	r3, #1
 800ab38:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10f      	bne.n	800ab64 <HAL_SPI_IRQHandler+0xc4>
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d105      	bne.n	800ab64 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	4798      	blx	r3
    handled = 1UL;
 800ab60:	2301      	movs	r3, #1
 800ab62:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10f      	bne.n	800ab8e <HAL_SPI_IRQHandler+0xee>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00a      	beq.n	800ab8e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d105      	bne.n	800ab8e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3
    handled = 1UL;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f040 814f 	bne.w	800ae34 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	f003 0308 	and.w	r3, r3, #8
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 808b 	beq.w	800acb8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	699a      	ldr	r2, [r3, #24]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f042 0208 	orr.w	r2, r2, #8
 800abb0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	699a      	ldr	r2, [r3, #24]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f042 0210 	orr.w	r2, r2, #16
 800abc0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abd0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	691a      	ldr	r2, [r3, #16]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0208 	bic.w	r2, r2, #8
 800abe0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d13d      	bne.n	800ac6c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800abf0:	e036      	b.n	800ac60 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	2b0f      	cmp	r3, #15
 800abf8:	d90b      	bls.n	800ac12 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ac04:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0a:	1d1a      	adds	r2, r3, #4
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ac10:	e01d      	b.n	800ac4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	2b07      	cmp	r3, #7
 800ac18:	d90b      	bls.n	800ac32 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	8812      	ldrh	r2, [r2, #0]
 800ac22:	b292      	uxth	r2, r2
 800ac24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac2a:	1c9a      	adds	r2, r3, #2
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ac30:	e00d      	b.n	800ac4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac3e:	7812      	ldrb	r2, [r2, #0]
 800ac40:	b2d2      	uxtb	r2, r2
 800ac42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	3b01      	subs	r3, #1
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1c2      	bne.n	800abf2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f937 	bl	800aee0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f8fd 	bl	800ae84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac8a:	e0d8      	b.n	800ae3e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ac8c:	7cfb      	ldrb	r3, [r7, #19]
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d103      	bne.n	800ac9a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f8ec 	bl	800ae70 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ac98:	e0ce      	b.n	800ae38 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ac9a:	7cfb      	ldrb	r3, [r7, #19]
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d103      	bne.n	800aca8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f8db 	bl	800ae5c <HAL_SPI_RxCpltCallback>
    return;
 800aca6:	e0c7      	b.n	800ae38 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800aca8:	7cfb      	ldrb	r3, [r7, #19]
 800acaa:	2b03      	cmp	r3, #3
 800acac:	f040 80c4 	bne.w	800ae38 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f8c9 	bl	800ae48 <HAL_SPI_TxCpltCallback>
    return;
 800acb6:	e0bf      	b.n	800ae38 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 80bd 	beq.w	800ae3e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00f      	beq.n	800acee <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acd4:	f043 0204 	orr.w	r2, r3, #4
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	699a      	ldr	r2, [r3, #24]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00f      	beq.n	800ad18 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acfe:	f043 0201 	orr.w	r2, r3, #1
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad16:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00f      	beq.n	800ad42 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad28:	f043 0208 	orr.w	r2, r3, #8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	699a      	ldr	r2, [r3, #24]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	f003 0320 	and.w	r3, r3, #32
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00f      	beq.n	800ad6c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f042 0220 	orr.w	r2, r2, #32
 800ad6a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d062      	beq.n	800ae3c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f022 0201 	bic.w	r2, r2, #1
 800ad84:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	6812      	ldr	r2, [r2, #0]
 800ad90:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800ad94:	f023 0303 	bic.w	r3, r3, #3
 800ad98:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ada0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ada4:	d13e      	bne.n	800ae24 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800adb4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d015      	beq.n	800adec <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adc6:	4a1f      	ldr	r2, [pc, #124]	@ (800ae44 <HAL_SPI_IRQHandler+0x3a4>)
 800adc8:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800add0:	4618      	mov	r0, r3
 800add2:	f7f8 fa7d 	bl	80032d0 <HAL_DMA_Abort_IT>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d007      	beq.n	800adec <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ade2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d022      	beq.n	800ae3c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adfc:	4a11      	ldr	r2, [pc, #68]	@ (800ae44 <HAL_SPI_IRQHandler+0x3a4>)
 800adfe:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7f8 fa62 	bl	80032d0 <HAL_DMA_Abort_IT>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d014      	beq.n	800ae3c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ae22:	e00b      	b.n	800ae3c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f829 	bl	800ae84 <HAL_SPI_ErrorCallback>
    return;
 800ae32:	e003      	b.n	800ae3c <HAL_SPI_IRQHandler+0x39c>
    return;
 800ae34:	bf00      	nop
 800ae36:	e002      	b.n	800ae3e <HAL_SPI_IRQHandler+0x39e>
    return;
 800ae38:	bf00      	nop
 800ae3a:	e000      	b.n	800ae3e <HAL_SPI_IRQHandler+0x39e>
    return;
 800ae3c:	bf00      	nop
  }
}
 800ae3e:	3728      	adds	r7, #40	@ 0x28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	0800aead 	.word	0x0800aead

0800ae48 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff ffd6 	bl	800ae84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	699a      	ldr	r2, [r3, #24]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0208 	orr.w	r2, r2, #8
 800aefe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699a      	ldr	r2, [r3, #24]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f042 0210 	orr.w	r2, r2, #16
 800af0e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f022 0201 	bic.w	r2, r2, #1
 800af1e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	6812      	ldr	r2, [r2, #0]
 800af2a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800af2e:	f023 0303 	bic.w	r3, r3, #3
 800af32:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800af42:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d014      	beq.n	800af7a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f003 0320 	and.w	r3, r3, #32
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00f      	beq.n	800af7a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	699a      	ldr	r2, [r3, #24]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f042 0220 	orr.w	r2, r2, #32
 800af78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b03      	cmp	r3, #3
 800af84:	d014      	beq.n	800afb0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00f      	beq.n	800afb0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af96:	f043 0204 	orr.w	r2, r3, #4
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699a      	ldr	r2, [r3, #24]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00f      	beq.n	800afda <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afc0:	f043 0201 	orr.w	r2, r3, #1
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	699a      	ldr	r2, [r3, #24]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afd8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00f      	beq.n	800b004 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afea:	f043 0208 	orr.w	r2, r3, #8
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	699a      	ldr	r2, [r3, #24]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b002:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800b014:	bf00      	nop
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	4613      	mov	r3, r2
 800b02e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b030:	e010      	b.n	800b054 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b032:	f7f7 fd3b 	bl	8002aac <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d803      	bhi.n	800b04a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b048:	d102      	bne.n	800b050 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e00f      	b.n	800b074 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	695a      	ldr	r2, [r3, #20]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	4013      	ands	r3, r2
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	429a      	cmp	r2, r3
 800b062:	bf0c      	ite	eq
 800b064:	2301      	moveq	r3, #1
 800b066:	2300      	movne	r3, #0
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	461a      	mov	r2, r3
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d0df      	beq.n	800b032 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b088:	095b      	lsrs	r3, r3, #5
 800b08a:	3301      	adds	r3, #1
 800b08c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	3301      	adds	r3, #1
 800b094:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3307      	adds	r3, #7
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d12e      	bne.n	800b126 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e028      	b.n	800b128 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f022 0201 	bic.w	r2, r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800b102:	ea42 0103 	orr.w	r1, r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	689a      	ldr	r2, [r3, #8]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	430a      	orrs	r2, r1
 800b110:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	e000      	b.n	800b128 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
  }
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e042      	b.n	800b1cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d106      	bne.n	800b15e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7f7 f99b 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2224      	movs	r2, #36	@ 0x24
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0201 	bic.w	r2, r2, #1
 800b174:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fa68 	bl	800b654 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f8c3 	bl	800b310 <UART_SetConfig>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e01b      	b.n	800b1cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b1a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689a      	ldr	r2, [r3, #8]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0201 	orr.w	r2, r2, #1
 800b1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fae7 	bl	800b798 <UART_CheckIdleState>
 800b1ca:	4603      	mov	r3, r0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08a      	sub	sp, #40	@ 0x28
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	603b      	str	r3, [r7, #0]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	f040 808b 	bne.w	800b306 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <HAL_UART_Transmit+0x28>
 800b1f6:	88fb      	ldrh	r3, [r7, #6]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e083      	b.n	800b308 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b20a:	2b80      	cmp	r3, #128	@ 0x80
 800b20c:	d107      	bne.n	800b21e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b21c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2221      	movs	r2, #33	@ 0x21
 800b22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b22e:	f7f7 fc3d 	bl	8002aac <HAL_GetTick>
 800b232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	88fa      	ldrh	r2, [r7, #6]
 800b238:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b24c:	d108      	bne.n	800b260 <HAL_UART_Transmit+0x8c>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d104      	bne.n	800b260 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	e003      	b.n	800b268 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b264:	2300      	movs	r3, #0
 800b266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b268:	e030      	b.n	800b2cc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2200      	movs	r2, #0
 800b272:	2180      	movs	r1, #128	@ 0x80
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 fb39 	bl	800b8ec <UART_WaitOnFlagUntilTimeout>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d005      	beq.n	800b28c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2220      	movs	r2, #32
 800b284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e03d      	b.n	800b308 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	61bb      	str	r3, [r7, #24]
 800b2a8:	e007      	b.n	800b2ba <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1c8      	bne.n	800b26a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2140      	movs	r1, #64	@ 0x40
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fb02 	bl	800b8ec <UART_WaitOnFlagUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2220      	movs	r2, #32
 800b2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e006      	b.n	800b308 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	e000      	b.n	800b308 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b306:	2302      	movs	r3, #2
  }
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3720      	adds	r7, #32
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b314:	b094      	sub	sp, #80	@ 0x50
 800b316:	af00      	add	r7, sp, #0
 800b318:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	4b7e      	ldr	r3, [pc, #504]	@ (800b520 <UART_SetConfig+0x210>)
 800b326:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	431a      	orrs	r2, r3
 800b332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	431a      	orrs	r2, r3
 800b338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4977      	ldr	r1, [pc, #476]	@ (800b524 <UART_SetConfig+0x214>)
 800b348:	4019      	ands	r1, r3
 800b34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b350:	430b      	orrs	r3, r1
 800b352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b360:	68d9      	ldr	r1, [r3, #12]
 800b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	ea40 0301 	orr.w	r3, r0, r1
 800b36a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	4b6a      	ldr	r3, [pc, #424]	@ (800b520 <UART_SetConfig+0x210>)
 800b378:	429a      	cmp	r2, r3
 800b37a:	d009      	beq.n	800b390 <UART_SetConfig+0x80>
 800b37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	4b69      	ldr	r3, [pc, #420]	@ (800b528 <UART_SetConfig+0x218>)
 800b382:	429a      	cmp	r2, r3
 800b384:	d004      	beq.n	800b390 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b388:	6a1a      	ldr	r2, [r3, #32]
 800b38a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b38c:	4313      	orrs	r3, r2
 800b38e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b39a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ae:	f023 000f 	bic.w	r0, r3, #15
 800b3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	ea40 0301 	orr.w	r3, r0, r1
 800b3be:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	4b59      	ldr	r3, [pc, #356]	@ (800b52c <UART_SetConfig+0x21c>)
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d102      	bne.n	800b3d0 <UART_SetConfig+0xc0>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ce:	e029      	b.n	800b424 <UART_SetConfig+0x114>
 800b3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	4b56      	ldr	r3, [pc, #344]	@ (800b530 <UART_SetConfig+0x220>)
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d102      	bne.n	800b3e0 <UART_SetConfig+0xd0>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3de:	e021      	b.n	800b424 <UART_SetConfig+0x114>
 800b3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	4b53      	ldr	r3, [pc, #332]	@ (800b534 <UART_SetConfig+0x224>)
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d102      	bne.n	800b3f0 <UART_SetConfig+0xe0>
 800b3ea:	2304      	movs	r3, #4
 800b3ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ee:	e019      	b.n	800b424 <UART_SetConfig+0x114>
 800b3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	4b50      	ldr	r3, [pc, #320]	@ (800b538 <UART_SetConfig+0x228>)
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d102      	bne.n	800b400 <UART_SetConfig+0xf0>
 800b3fa:	2308      	movs	r3, #8
 800b3fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3fe:	e011      	b.n	800b424 <UART_SetConfig+0x114>
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	4b4d      	ldr	r3, [pc, #308]	@ (800b53c <UART_SetConfig+0x22c>)
 800b406:	429a      	cmp	r2, r3
 800b408:	d102      	bne.n	800b410 <UART_SetConfig+0x100>
 800b40a:	2310      	movs	r3, #16
 800b40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b40e:	e009      	b.n	800b424 <UART_SetConfig+0x114>
 800b410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	4b42      	ldr	r3, [pc, #264]	@ (800b520 <UART_SetConfig+0x210>)
 800b416:	429a      	cmp	r2, r3
 800b418:	d102      	bne.n	800b420 <UART_SetConfig+0x110>
 800b41a:	2320      	movs	r3, #32
 800b41c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b41e:	e001      	b.n	800b424 <UART_SetConfig+0x114>
 800b420:	2300      	movs	r3, #0
 800b422:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	4b3d      	ldr	r3, [pc, #244]	@ (800b520 <UART_SetConfig+0x210>)
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d005      	beq.n	800b43a <UART_SetConfig+0x12a>
 800b42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	4b3d      	ldr	r3, [pc, #244]	@ (800b528 <UART_SetConfig+0x218>)
 800b434:	429a      	cmp	r2, r3
 800b436:	f040 8085 	bne.w	800b544 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b43a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b43c:	2200      	movs	r2, #0
 800b43e:	623b      	str	r3, [r7, #32]
 800b440:	627a      	str	r2, [r7, #36]	@ 0x24
 800b442:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b446:	f7fd f9e3 	bl	8008810 <HAL_RCCEx_GetPeriphCLKFreq>
 800b44a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b44c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f000 80e8 	beq.w	800b624 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b458:	4a39      	ldr	r2, [pc, #228]	@ (800b540 <UART_SetConfig+0x230>)
 800b45a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b45e:	461a      	mov	r2, r3
 800b460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b462:	fbb3 f3f2 	udiv	r3, r3, r2
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	4613      	mov	r3, r2
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	4413      	add	r3, r2
 800b472:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b474:	429a      	cmp	r2, r3
 800b476:	d305      	bcc.n	800b484 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b47e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b480:	429a      	cmp	r2, r3
 800b482:	d903      	bls.n	800b48c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b48a:	e048      	b.n	800b51e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b48e:	2200      	movs	r2, #0
 800b490:	61bb      	str	r3, [r7, #24]
 800b492:	61fa      	str	r2, [r7, #28]
 800b494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b498:	4a29      	ldr	r2, [pc, #164]	@ (800b540 <UART_SetConfig+0x230>)
 800b49a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	613b      	str	r3, [r7, #16]
 800b4a4:	617a      	str	r2, [r7, #20]
 800b4a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b4aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b4ae:	f7f4 feeb 	bl	8000288 <__aeabi_uldivmod>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	f04f 0200 	mov.w	r2, #0
 800b4be:	f04f 0300 	mov.w	r3, #0
 800b4c2:	020b      	lsls	r3, r1, #8
 800b4c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b4c8:	0202      	lsls	r2, r0, #8
 800b4ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4cc:	6849      	ldr	r1, [r1, #4]
 800b4ce:	0849      	lsrs	r1, r1, #1
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	eb12 0804 	adds.w	r8, r2, r4
 800b4da:	eb43 0905 	adc.w	r9, r3, r5
 800b4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	60bb      	str	r3, [r7, #8]
 800b4e6:	60fa      	str	r2, [r7, #12]
 800b4e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4ec:	4640      	mov	r0, r8
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	f7f4 feca 	bl	8000288 <__aeabi_uldivmod>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b502:	d308      	bcc.n	800b516 <UART_SetConfig+0x206>
 800b504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b50a:	d204      	bcs.n	800b516 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b512:	60da      	str	r2, [r3, #12]
 800b514:	e003      	b.n	800b51e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b51c:	e082      	b.n	800b624 <UART_SetConfig+0x314>
 800b51e:	e081      	b.n	800b624 <UART_SetConfig+0x314>
 800b520:	46002400 	.word	0x46002400
 800b524:	cfff69f3 	.word	0xcfff69f3
 800b528:	56002400 	.word	0x56002400
 800b52c:	40013800 	.word	0x40013800
 800b530:	40004400 	.word	0x40004400
 800b534:	40004800 	.word	0x40004800
 800b538:	40004c00 	.word	0x40004c00
 800b53c:	40005000 	.word	0x40005000
 800b540:	0800cbcc 	.word	0x0800cbcc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b546:	69db      	ldr	r3, [r3, #28]
 800b548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b54c:	d13c      	bne.n	800b5c8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b54e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b550:	2200      	movs	r2, #0
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	607a      	str	r2, [r7, #4]
 800b556:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b55a:	f7fd f959 	bl	8008810 <HAL_RCCEx_GetPeriphCLKFreq>
 800b55e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b562:	2b00      	cmp	r3, #0
 800b564:	d05e      	beq.n	800b624 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b56a:	4a39      	ldr	r2, [pc, #228]	@ (800b650 <UART_SetConfig+0x340>)
 800b56c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b570:	461a      	mov	r2, r3
 800b572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b574:	fbb3 f3f2 	udiv	r3, r3, r2
 800b578:	005a      	lsls	r2, r3, #1
 800b57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	085b      	lsrs	r3, r3, #1
 800b580:	441a      	add	r2, r3
 800b582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	fbb2 f3f3 	udiv	r3, r2, r3
 800b58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58e:	2b0f      	cmp	r3, #15
 800b590:	d916      	bls.n	800b5c0 <UART_SetConfig+0x2b0>
 800b592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b598:	d212      	bcs.n	800b5c0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	f023 030f 	bic.w	r3, r3, #15
 800b5a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a6:	085b      	lsrs	r3, r3, #1
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	f003 0307 	and.w	r3, r3, #7
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b5bc:	60da      	str	r2, [r3, #12]
 800b5be:	e031      	b.n	800b624 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b5c6:	e02d      	b.n	800b624 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b5c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	469a      	mov	sl, r3
 800b5ce:	4693      	mov	fp, r2
 800b5d0:	4650      	mov	r0, sl
 800b5d2:	4659      	mov	r1, fp
 800b5d4:	f7fd f91c 	bl	8008810 <HAL_RCCEx_GetPeriphCLKFreq>
 800b5d8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d021      	beq.n	800b624 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e4:	4a1a      	ldr	r2, [pc, #104]	@ (800b650 <UART_SetConfig+0x340>)
 800b5e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	085b      	lsrs	r3, r3, #1
 800b5f8:	441a      	add	r2, r3
 800b5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b606:	2b0f      	cmp	r3, #15
 800b608:	d909      	bls.n	800b61e <UART_SetConfig+0x30e>
 800b60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b610:	d205      	bcs.n	800b61e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b614:	b29a      	uxth	r2, r3
 800b616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60da      	str	r2, [r3, #12]
 800b61c:	e002      	b.n	800b624 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b626:	2201      	movs	r2, #1
 800b628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62e:	2201      	movs	r2, #1
 800b630:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b636:	2200      	movs	r2, #0
 800b638:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63c:	2200      	movs	r2, #0
 800b63e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b640:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b644:	4618      	mov	r0, r3
 800b646:	3750      	adds	r7, #80	@ 0x50
 800b648:	46bd      	mov	sp, r7
 800b64a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b64e:	bf00      	nop
 800b650:	0800cbcc 	.word	0x0800cbcc

0800b654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00a      	beq.n	800b67e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	430a      	orrs	r2, r1
 800b67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	430a      	orrs	r2, r1
 800b69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a4:	f003 0302 	and.w	r3, r3, #2
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c6:	f003 0304 	and.w	r3, r3, #4
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e8:	f003 0310 	and.w	r3, r3, #16
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00a      	beq.n	800b706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70a:	f003 0320 	and.w	r3, r3, #32
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01a      	beq.n	800b76a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	430a      	orrs	r2, r1
 800b748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b74e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b752:	d10a      	bne.n	800b76a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	430a      	orrs	r2, r1
 800b78a:	605a      	str	r2, [r3, #4]
  }
}
 800b78c:	bf00      	nop
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b098      	sub	sp, #96	@ 0x60
 800b79c:	af02      	add	r7, sp, #8
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7a8:	f7f7 f980 	bl	8002aac <HAL_GetTick>
 800b7ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0308 	and.w	r3, r3, #8
 800b7b8:	2b08      	cmp	r3, #8
 800b7ba:	d12f      	bne.n	800b81c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f88e 	bl	800b8ec <UART_WaitOnFlagUntilTimeout>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d022      	beq.n	800b81c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e6      	bne.n	800b7d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b818:	2303      	movs	r3, #3
 800b81a:	e063      	b.n	800b8e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0304 	and.w	r3, r3, #4
 800b826:	2b04      	cmp	r3, #4
 800b828:	d149      	bne.n	800b8be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b82a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b832:	2200      	movs	r2, #0
 800b834:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f857 	bl	800b8ec <UART_WaitOnFlagUntilTimeout>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d03c      	beq.n	800b8be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	623b      	str	r3, [r7, #32]
   return(result);
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b862:	633b      	str	r3, [r7, #48]	@ 0x30
 800b864:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e6      	bne.n	800b844 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3308      	adds	r3, #8
 800b87c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	60fb      	str	r3, [r7, #12]
   return(result);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f023 0301 	bic.w	r3, r3, #1
 800b88c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b896:	61fa      	str	r2, [r7, #28]
 800b898:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	69b9      	ldr	r1, [r7, #24]
 800b89c:	69fa      	ldr	r2, [r7, #28]
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e5      	bne.n	800b876 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2220      	movs	r2, #32
 800b8ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e012      	b.n	800b8e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2220      	movs	r2, #32
 800b8ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3758      	adds	r7, #88	@ 0x58
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	603b      	str	r3, [r7, #0]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8fc:	e04f      	b.n	800b99e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b904:	d04b      	beq.n	800b99e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b906:	f7f7 f8d1 	bl	8002aac <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	429a      	cmp	r2, r3
 800b914:	d302      	bcc.n	800b91c <UART_WaitOnFlagUntilTimeout+0x30>
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e04e      	b.n	800b9be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 0304 	and.w	r3, r3, #4
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d037      	beq.n	800b99e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	2b80      	cmp	r3, #128	@ 0x80
 800b932:	d034      	beq.n	800b99e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b40      	cmp	r3, #64	@ 0x40
 800b938:	d031      	beq.n	800b99e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	f003 0308 	and.w	r3, r3, #8
 800b944:	2b08      	cmp	r3, #8
 800b946:	d110      	bne.n	800b96a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2208      	movs	r2, #8
 800b94e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 f838 	bl	800b9c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2208      	movs	r2, #8
 800b95a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e029      	b.n	800b9be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	69db      	ldr	r3, [r3, #28]
 800b970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b978:	d111      	bne.n	800b99e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b982:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f81e 	bl	800b9c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e00f      	b.n	800b9be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	69da      	ldr	r2, [r3, #28]
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	bf0c      	ite	eq
 800b9ae:	2301      	moveq	r3, #1
 800b9b0:	2300      	movne	r3, #0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	79fb      	ldrb	r3, [r7, #7]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d0a0      	beq.n	800b8fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b095      	sub	sp, #84	@ 0x54
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d6:	e853 3f00 	ldrex	r3, [r3]
 800b9da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9f4:	e841 2300 	strex	r3, r2, [r1]
 800b9f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1e6      	bne.n	800b9ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3308      	adds	r3, #8
 800ba06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba16:	f023 0301 	bic.w	r3, r3, #1
 800ba1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3308      	adds	r3, #8
 800ba22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2c:	e841 2300 	strex	r3, r2, [r1]
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1e3      	bne.n	800ba00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d118      	bne.n	800ba72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	e853 3f00 	ldrex	r3, [r3]
 800ba4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	f023 0310 	bic.w	r3, r3, #16
 800ba54:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba5e:	61bb      	str	r3, [r7, #24]
 800ba60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6979      	ldr	r1, [r7, #20]
 800ba64:	69ba      	ldr	r2, [r7, #24]
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e6      	bne.n	800ba40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba86:	bf00      	nop
 800ba88:	3754      	adds	r7, #84	@ 0x54
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b085      	sub	sp, #20
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d101      	bne.n	800baa8 <HAL_UARTEx_DisableFifoMode+0x16>
 800baa4:	2302      	movs	r3, #2
 800baa6:	e027      	b.n	800baf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2224      	movs	r2, #36	@ 0x24
 800bab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f022 0201 	bic.w	r2, r2, #1
 800bace:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bad6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d101      	bne.n	800bb1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e02d      	b.n	800bb78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2224      	movs	r2, #36	@ 0x24
 800bb28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f022 0201 	bic.w	r2, r2, #1
 800bb42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f84f 	bl	800bbfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d101      	bne.n	800bb98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb94:	2302      	movs	r3, #2
 800bb96:	e02d      	b.n	800bbf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2224      	movs	r2, #36	@ 0x24
 800bba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f022 0201 	bic.w	r2, r2, #1
 800bbbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f811 	bl	800bbfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2220      	movs	r2, #32
 800bbe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d108      	bne.n	800bc1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc1c:	e031      	b.n	800bc82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc1e:	2308      	movs	r3, #8
 800bc20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc22:	2308      	movs	r3, #8
 800bc24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	0e5b      	lsrs	r3, r3, #25
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	f003 0307 	and.w	r3, r3, #7
 800bc34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	0f5b      	lsrs	r3, r3, #29
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	f003 0307 	and.w	r3, r3, #7
 800bc44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	7b3a      	ldrb	r2, [r7, #12]
 800bc4a:	4911      	ldr	r1, [pc, #68]	@ (800bc90 <UARTEx_SetNbDataToProcess+0x94>)
 800bc4c:	5c8a      	ldrb	r2, [r1, r2]
 800bc4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc52:	7b3a      	ldrb	r2, [r7, #12]
 800bc54:	490f      	ldr	r1, [pc, #60]	@ (800bc94 <UARTEx_SetNbDataToProcess+0x98>)
 800bc56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc58:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	7b7a      	ldrb	r2, [r7, #13]
 800bc68:	4909      	ldr	r1, [pc, #36]	@ (800bc90 <UARTEx_SetNbDataToProcess+0x94>)
 800bc6a:	5c8a      	ldrb	r2, [r1, r2]
 800bc6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc70:	7b7a      	ldrb	r2, [r7, #13]
 800bc72:	4908      	ldr	r1, [pc, #32]	@ (800bc94 <UARTEx_SetNbDataToProcess+0x98>)
 800bc74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc76:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc82:	bf00      	nop
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	0800cbe4 	.word	0x0800cbe4
 800bc94:	0800cbec 	.word	0x0800cbec

0800bc98 <sniprintf>:
 800bc98:	b40c      	push	{r2, r3}
 800bc9a:	4b19      	ldr	r3, [pc, #100]	@ (800bd00 <sniprintf+0x68>)
 800bc9c:	b530      	push	{r4, r5, lr}
 800bc9e:	1e0c      	subs	r4, r1, #0
 800bca0:	b09d      	sub	sp, #116	@ 0x74
 800bca2:	681d      	ldr	r5, [r3, #0]
 800bca4:	da08      	bge.n	800bcb8 <sniprintf+0x20>
 800bca6:	238b      	movs	r3, #139	@ 0x8b
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	b01d      	add	sp, #116	@ 0x74
 800bcb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcb4:	b002      	add	sp, #8
 800bcb6:	4770      	bx	lr
 800bcb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bcbc:	9002      	str	r0, [sp, #8]
 800bcbe:	9006      	str	r0, [sp, #24]
 800bcc0:	a902      	add	r1, sp, #8
 800bcc2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bcc6:	f04f 0300 	mov.w	r3, #0
 800bcca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bccc:	4628      	mov	r0, r5
 800bcce:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bcd0:	bf14      	ite	ne
 800bcd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bcd6:	4623      	moveq	r3, r4
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	9307      	str	r3, [sp, #28]
 800bcdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bce0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bce4:	ab21      	add	r3, sp, #132	@ 0x84
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	f000 f994 	bl	800c014 <_svfiprintf_r>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	bfbc      	itt	lt
 800bcf0:	238b      	movlt	r3, #139	@ 0x8b
 800bcf2:	602b      	strlt	r3, [r5, #0]
 800bcf4:	2c00      	cmp	r4, #0
 800bcf6:	d0da      	beq.n	800bcae <sniprintf+0x16>
 800bcf8:	9b02      	ldr	r3, [sp, #8]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e7d6      	b.n	800bcae <sniprintf+0x16>
 800bd00:	20000028 	.word	0x20000028

0800bd04 <memset>:
 800bd04:	4402      	add	r2, r0
 800bd06:	4603      	mov	r3, r0
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d100      	bne.n	800bd0e <memset+0xa>
 800bd0c:	4770      	bx	lr
 800bd0e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd12:	e7f9      	b.n	800bd08 <memset+0x4>

0800bd14 <__errno>:
 800bd14:	4b01      	ldr	r3, [pc, #4]	@ (800bd1c <__errno+0x8>)
 800bd16:	6818      	ldr	r0, [r3, #0]
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	20000028 	.word	0x20000028

0800bd20 <__libc_init_array>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	4d0d      	ldr	r5, [pc, #52]	@ (800bd58 <__libc_init_array+0x38>)
 800bd24:	2600      	movs	r6, #0
 800bd26:	4c0d      	ldr	r4, [pc, #52]	@ (800bd5c <__libc_init_array+0x3c>)
 800bd28:	1b64      	subs	r4, r4, r5
 800bd2a:	10a4      	asrs	r4, r4, #2
 800bd2c:	42a6      	cmp	r6, r4
 800bd2e:	d109      	bne.n	800bd44 <__libc_init_array+0x24>
 800bd30:	4d0b      	ldr	r5, [pc, #44]	@ (800bd60 <__libc_init_array+0x40>)
 800bd32:	2600      	movs	r6, #0
 800bd34:	4c0b      	ldr	r4, [pc, #44]	@ (800bd64 <__libc_init_array+0x44>)
 800bd36:	f000 fe3f 	bl	800c9b8 <_init>
 800bd3a:	1b64      	subs	r4, r4, r5
 800bd3c:	10a4      	asrs	r4, r4, #2
 800bd3e:	42a6      	cmp	r6, r4
 800bd40:	d105      	bne.n	800bd4e <__libc_init_array+0x2e>
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd48:	3601      	adds	r6, #1
 800bd4a:	4798      	blx	r3
 800bd4c:	e7ee      	b.n	800bd2c <__libc_init_array+0xc>
 800bd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd52:	3601      	adds	r6, #1
 800bd54:	4798      	blx	r3
 800bd56:	e7f2      	b.n	800bd3e <__libc_init_array+0x1e>
 800bd58:	0800cc68 	.word	0x0800cc68
 800bd5c:	0800cc68 	.word	0x0800cc68
 800bd60:	0800cc68 	.word	0x0800cc68
 800bd64:	0800cc6c 	.word	0x0800cc6c

0800bd68 <__retarget_lock_acquire_recursive>:
 800bd68:	4770      	bx	lr

0800bd6a <__retarget_lock_release_recursive>:
 800bd6a:	4770      	bx	lr

0800bd6c <_free_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4605      	mov	r5, r0
 800bd70:	2900      	cmp	r1, #0
 800bd72:	d041      	beq.n	800bdf8 <_free_r+0x8c>
 800bd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd78:	1f0c      	subs	r4, r1, #4
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	bfb8      	it	lt
 800bd7e:	18e4      	addlt	r4, r4, r3
 800bd80:	f000 f8e0 	bl	800bf44 <__malloc_lock>
 800bd84:	4a1d      	ldr	r2, [pc, #116]	@ (800bdfc <_free_r+0x90>)
 800bd86:	6813      	ldr	r3, [r2, #0]
 800bd88:	b933      	cbnz	r3, 800bd98 <_free_r+0x2c>
 800bd8a:	6063      	str	r3, [r4, #4]
 800bd8c:	6014      	str	r4, [r2, #0]
 800bd8e:	4628      	mov	r0, r5
 800bd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd94:	f000 b8dc 	b.w	800bf50 <__malloc_unlock>
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	d908      	bls.n	800bdae <_free_r+0x42>
 800bd9c:	6820      	ldr	r0, [r4, #0]
 800bd9e:	1821      	adds	r1, r4, r0
 800bda0:	428b      	cmp	r3, r1
 800bda2:	bf01      	itttt	eq
 800bda4:	6819      	ldreq	r1, [r3, #0]
 800bda6:	685b      	ldreq	r3, [r3, #4]
 800bda8:	1809      	addeq	r1, r1, r0
 800bdaa:	6021      	streq	r1, [r4, #0]
 800bdac:	e7ed      	b.n	800bd8a <_free_r+0x1e>
 800bdae:	461a      	mov	r2, r3
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	b10b      	cbz	r3, 800bdb8 <_free_r+0x4c>
 800bdb4:	42a3      	cmp	r3, r4
 800bdb6:	d9fa      	bls.n	800bdae <_free_r+0x42>
 800bdb8:	6811      	ldr	r1, [r2, #0]
 800bdba:	1850      	adds	r0, r2, r1
 800bdbc:	42a0      	cmp	r0, r4
 800bdbe:	d10b      	bne.n	800bdd8 <_free_r+0x6c>
 800bdc0:	6820      	ldr	r0, [r4, #0]
 800bdc2:	4401      	add	r1, r0
 800bdc4:	1850      	adds	r0, r2, r1
 800bdc6:	6011      	str	r1, [r2, #0]
 800bdc8:	4283      	cmp	r3, r0
 800bdca:	d1e0      	bne.n	800bd8e <_free_r+0x22>
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	4408      	add	r0, r1
 800bdd2:	6053      	str	r3, [r2, #4]
 800bdd4:	6010      	str	r0, [r2, #0]
 800bdd6:	e7da      	b.n	800bd8e <_free_r+0x22>
 800bdd8:	d902      	bls.n	800bde0 <_free_r+0x74>
 800bdda:	230c      	movs	r3, #12
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	e7d6      	b.n	800bd8e <_free_r+0x22>
 800bde0:	6820      	ldr	r0, [r4, #0]
 800bde2:	1821      	adds	r1, r4, r0
 800bde4:	428b      	cmp	r3, r1
 800bde6:	bf02      	ittt	eq
 800bde8:	6819      	ldreq	r1, [r3, #0]
 800bdea:	685b      	ldreq	r3, [r3, #4]
 800bdec:	1809      	addeq	r1, r1, r0
 800bdee:	6063      	str	r3, [r4, #4]
 800bdf0:	bf08      	it	eq
 800bdf2:	6021      	streq	r1, [r4, #0]
 800bdf4:	6054      	str	r4, [r2, #4]
 800bdf6:	e7ca      	b.n	800bd8e <_free_r+0x22>
 800bdf8:	bd38      	pop	{r3, r4, r5, pc}
 800bdfa:	bf00      	nop
 800bdfc:	200006a0 	.word	0x200006a0

0800be00 <sbrk_aligned>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	4e0f      	ldr	r6, [pc, #60]	@ (800be40 <sbrk_aligned+0x40>)
 800be04:	460c      	mov	r4, r1
 800be06:	4605      	mov	r5, r0
 800be08:	6831      	ldr	r1, [r6, #0]
 800be0a:	b911      	cbnz	r1, 800be12 <sbrk_aligned+0x12>
 800be0c:	f000 fba8 	bl	800c560 <_sbrk_r>
 800be10:	6030      	str	r0, [r6, #0]
 800be12:	4621      	mov	r1, r4
 800be14:	4628      	mov	r0, r5
 800be16:	f000 fba3 	bl	800c560 <_sbrk_r>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d103      	bne.n	800be26 <sbrk_aligned+0x26>
 800be1e:	f04f 34ff 	mov.w	r4, #4294967295
 800be22:	4620      	mov	r0, r4
 800be24:	bd70      	pop	{r4, r5, r6, pc}
 800be26:	1cc4      	adds	r4, r0, #3
 800be28:	f024 0403 	bic.w	r4, r4, #3
 800be2c:	42a0      	cmp	r0, r4
 800be2e:	d0f8      	beq.n	800be22 <sbrk_aligned+0x22>
 800be30:	1a21      	subs	r1, r4, r0
 800be32:	4628      	mov	r0, r5
 800be34:	f000 fb94 	bl	800c560 <_sbrk_r>
 800be38:	3001      	adds	r0, #1
 800be3a:	d1f2      	bne.n	800be22 <sbrk_aligned+0x22>
 800be3c:	e7ef      	b.n	800be1e <sbrk_aligned+0x1e>
 800be3e:	bf00      	nop
 800be40:	2000069c 	.word	0x2000069c

0800be44 <_malloc_r>:
 800be44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be48:	1ccd      	adds	r5, r1, #3
 800be4a:	4606      	mov	r6, r0
 800be4c:	f025 0503 	bic.w	r5, r5, #3
 800be50:	3508      	adds	r5, #8
 800be52:	2d0c      	cmp	r5, #12
 800be54:	bf38      	it	cc
 800be56:	250c      	movcc	r5, #12
 800be58:	2d00      	cmp	r5, #0
 800be5a:	db01      	blt.n	800be60 <_malloc_r+0x1c>
 800be5c:	42a9      	cmp	r1, r5
 800be5e:	d904      	bls.n	800be6a <_malloc_r+0x26>
 800be60:	230c      	movs	r3, #12
 800be62:	6033      	str	r3, [r6, #0]
 800be64:	2000      	movs	r0, #0
 800be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf40 <_malloc_r+0xfc>
 800be6e:	f000 f869 	bl	800bf44 <__malloc_lock>
 800be72:	f8d8 3000 	ldr.w	r3, [r8]
 800be76:	461c      	mov	r4, r3
 800be78:	bb44      	cbnz	r4, 800becc <_malloc_r+0x88>
 800be7a:	4629      	mov	r1, r5
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7ff ffbf 	bl	800be00 <sbrk_aligned>
 800be82:	1c43      	adds	r3, r0, #1
 800be84:	4604      	mov	r4, r0
 800be86:	d158      	bne.n	800bf3a <_malloc_r+0xf6>
 800be88:	f8d8 4000 	ldr.w	r4, [r8]
 800be8c:	4627      	mov	r7, r4
 800be8e:	2f00      	cmp	r7, #0
 800be90:	d143      	bne.n	800bf1a <_malloc_r+0xd6>
 800be92:	2c00      	cmp	r4, #0
 800be94:	d04b      	beq.n	800bf2e <_malloc_r+0xea>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	4639      	mov	r1, r7
 800be9a:	4630      	mov	r0, r6
 800be9c:	eb04 0903 	add.w	r9, r4, r3
 800bea0:	f000 fb5e 	bl	800c560 <_sbrk_r>
 800bea4:	4581      	cmp	r9, r0
 800bea6:	d142      	bne.n	800bf2e <_malloc_r+0xea>
 800bea8:	6821      	ldr	r1, [r4, #0]
 800beaa:	4630      	mov	r0, r6
 800beac:	1a6d      	subs	r5, r5, r1
 800beae:	4629      	mov	r1, r5
 800beb0:	f7ff ffa6 	bl	800be00 <sbrk_aligned>
 800beb4:	3001      	adds	r0, #1
 800beb6:	d03a      	beq.n	800bf2e <_malloc_r+0xea>
 800beb8:	6823      	ldr	r3, [r4, #0]
 800beba:	442b      	add	r3, r5
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	f8d8 3000 	ldr.w	r3, [r8]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	bb62      	cbnz	r2, 800bf20 <_malloc_r+0xdc>
 800bec6:	f8c8 7000 	str.w	r7, [r8]
 800beca:	e00f      	b.n	800beec <_malloc_r+0xa8>
 800becc:	6822      	ldr	r2, [r4, #0]
 800bece:	1b52      	subs	r2, r2, r5
 800bed0:	d420      	bmi.n	800bf14 <_malloc_r+0xd0>
 800bed2:	2a0b      	cmp	r2, #11
 800bed4:	d917      	bls.n	800bf06 <_malloc_r+0xc2>
 800bed6:	1961      	adds	r1, r4, r5
 800bed8:	42a3      	cmp	r3, r4
 800beda:	6025      	str	r5, [r4, #0]
 800bedc:	bf18      	it	ne
 800bede:	6059      	strne	r1, [r3, #4]
 800bee0:	6863      	ldr	r3, [r4, #4]
 800bee2:	bf08      	it	eq
 800bee4:	f8c8 1000 	streq.w	r1, [r8]
 800bee8:	5162      	str	r2, [r4, r5]
 800beea:	604b      	str	r3, [r1, #4]
 800beec:	4630      	mov	r0, r6
 800beee:	f000 f82f 	bl	800bf50 <__malloc_unlock>
 800bef2:	f104 000b 	add.w	r0, r4, #11
 800bef6:	1d23      	adds	r3, r4, #4
 800bef8:	f020 0007 	bic.w	r0, r0, #7
 800befc:	1ac2      	subs	r2, r0, r3
 800befe:	bf1c      	itt	ne
 800bf00:	1a1b      	subne	r3, r3, r0
 800bf02:	50a3      	strne	r3, [r4, r2]
 800bf04:	e7af      	b.n	800be66 <_malloc_r+0x22>
 800bf06:	6862      	ldr	r2, [r4, #4]
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	bf0c      	ite	eq
 800bf0c:	f8c8 2000 	streq.w	r2, [r8]
 800bf10:	605a      	strne	r2, [r3, #4]
 800bf12:	e7eb      	b.n	800beec <_malloc_r+0xa8>
 800bf14:	4623      	mov	r3, r4
 800bf16:	6864      	ldr	r4, [r4, #4]
 800bf18:	e7ae      	b.n	800be78 <_malloc_r+0x34>
 800bf1a:	463c      	mov	r4, r7
 800bf1c:	687f      	ldr	r7, [r7, #4]
 800bf1e:	e7b6      	b.n	800be8e <_malloc_r+0x4a>
 800bf20:	461a      	mov	r2, r3
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d1fb      	bne.n	800bf20 <_malloc_r+0xdc>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	6053      	str	r3, [r2, #4]
 800bf2c:	e7de      	b.n	800beec <_malloc_r+0xa8>
 800bf2e:	230c      	movs	r3, #12
 800bf30:	4630      	mov	r0, r6
 800bf32:	6033      	str	r3, [r6, #0]
 800bf34:	f000 f80c 	bl	800bf50 <__malloc_unlock>
 800bf38:	e794      	b.n	800be64 <_malloc_r+0x20>
 800bf3a:	6005      	str	r5, [r0, #0]
 800bf3c:	e7d6      	b.n	800beec <_malloc_r+0xa8>
 800bf3e:	bf00      	nop
 800bf40:	200006a0 	.word	0x200006a0

0800bf44 <__malloc_lock>:
 800bf44:	4801      	ldr	r0, [pc, #4]	@ (800bf4c <__malloc_lock+0x8>)
 800bf46:	f7ff bf0f 	b.w	800bd68 <__retarget_lock_acquire_recursive>
 800bf4a:	bf00      	nop
 800bf4c:	20000698 	.word	0x20000698

0800bf50 <__malloc_unlock>:
 800bf50:	4801      	ldr	r0, [pc, #4]	@ (800bf58 <__malloc_unlock+0x8>)
 800bf52:	f7ff bf0a 	b.w	800bd6a <__retarget_lock_release_recursive>
 800bf56:	bf00      	nop
 800bf58:	20000698 	.word	0x20000698

0800bf5c <__ssputs_r>:
 800bf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf60:	461f      	mov	r7, r3
 800bf62:	688e      	ldr	r6, [r1, #8]
 800bf64:	4682      	mov	sl, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	42be      	cmp	r6, r7
 800bf6a:	4690      	mov	r8, r2
 800bf6c:	680b      	ldr	r3, [r1, #0]
 800bf6e:	d82d      	bhi.n	800bfcc <__ssputs_r+0x70>
 800bf70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf78:	d026      	beq.n	800bfc8 <__ssputs_r+0x6c>
 800bf7a:	6965      	ldr	r5, [r4, #20]
 800bf7c:	6909      	ldr	r1, [r1, #16]
 800bf7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf82:	eba3 0901 	sub.w	r9, r3, r1
 800bf86:	1c7b      	adds	r3, r7, #1
 800bf88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf8c:	444b      	add	r3, r9
 800bf8e:	106d      	asrs	r5, r5, #1
 800bf90:	429d      	cmp	r5, r3
 800bf92:	bf38      	it	cc
 800bf94:	461d      	movcc	r5, r3
 800bf96:	0553      	lsls	r3, r2, #21
 800bf98:	d527      	bpl.n	800bfea <__ssputs_r+0x8e>
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	f7ff ff52 	bl	800be44 <_malloc_r>
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	b360      	cbz	r0, 800bffe <__ssputs_r+0xa2>
 800bfa4:	464a      	mov	r2, r9
 800bfa6:	6921      	ldr	r1, [r4, #16]
 800bfa8:	f000 faf8 	bl	800c59c <memcpy>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	6126      	str	r6, [r4, #16]
 800bfba:	444e      	add	r6, r9
 800bfbc:	6165      	str	r5, [r4, #20]
 800bfbe:	eba5 0509 	sub.w	r5, r5, r9
 800bfc2:	6026      	str	r6, [r4, #0]
 800bfc4:	463e      	mov	r6, r7
 800bfc6:	60a5      	str	r5, [r4, #8]
 800bfc8:	42be      	cmp	r6, r7
 800bfca:	d900      	bls.n	800bfce <__ssputs_r+0x72>
 800bfcc:	463e      	mov	r6, r7
 800bfce:	4632      	mov	r2, r6
 800bfd0:	4641      	mov	r1, r8
 800bfd2:	6820      	ldr	r0, [r4, #0]
 800bfd4:	f000 faaa 	bl	800c52c <memmove>
 800bfd8:	68a3      	ldr	r3, [r4, #8]
 800bfda:	2000      	movs	r0, #0
 800bfdc:	1b9b      	subs	r3, r3, r6
 800bfde:	60a3      	str	r3, [r4, #8]
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	4433      	add	r3, r6
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfea:	462a      	mov	r2, r5
 800bfec:	f000 fae3 	bl	800c5b6 <_realloc_r>
 800bff0:	4606      	mov	r6, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d1e0      	bne.n	800bfb8 <__ssputs_r+0x5c>
 800bff6:	6921      	ldr	r1, [r4, #16]
 800bff8:	4650      	mov	r0, sl
 800bffa:	f7ff feb7 	bl	800bd6c <_free_r>
 800bffe:	230c      	movs	r3, #12
 800c000:	f04f 30ff 	mov.w	r0, #4294967295
 800c004:	f8ca 3000 	str.w	r3, [sl]
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c00e:	81a3      	strh	r3, [r4, #12]
 800c010:	e7e9      	b.n	800bfe6 <__ssputs_r+0x8a>
	...

0800c014 <_svfiprintf_r>:
 800c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	4698      	mov	r8, r3
 800c01a:	898b      	ldrh	r3, [r1, #12]
 800c01c:	b09d      	sub	sp, #116	@ 0x74
 800c01e:	4607      	mov	r7, r0
 800c020:	061b      	lsls	r3, r3, #24
 800c022:	460d      	mov	r5, r1
 800c024:	4614      	mov	r4, r2
 800c026:	d510      	bpl.n	800c04a <_svfiprintf_r+0x36>
 800c028:	690b      	ldr	r3, [r1, #16]
 800c02a:	b973      	cbnz	r3, 800c04a <_svfiprintf_r+0x36>
 800c02c:	2140      	movs	r1, #64	@ 0x40
 800c02e:	f7ff ff09 	bl	800be44 <_malloc_r>
 800c032:	6028      	str	r0, [r5, #0]
 800c034:	6128      	str	r0, [r5, #16]
 800c036:	b930      	cbnz	r0, 800c046 <_svfiprintf_r+0x32>
 800c038:	230c      	movs	r3, #12
 800c03a:	603b      	str	r3, [r7, #0]
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	b01d      	add	sp, #116	@ 0x74
 800c042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c046:	2340      	movs	r3, #64	@ 0x40
 800c048:	616b      	str	r3, [r5, #20]
 800c04a:	2300      	movs	r3, #0
 800c04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c050:	f04f 0901 	mov.w	r9, #1
 800c054:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800c1f8 <_svfiprintf_r+0x1e4>
 800c058:	9309      	str	r3, [sp, #36]	@ 0x24
 800c05a:	2320      	movs	r3, #32
 800c05c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c060:	2330      	movs	r3, #48	@ 0x30
 800c062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c066:	4623      	mov	r3, r4
 800c068:	469a      	mov	sl, r3
 800c06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c06e:	b10a      	cbz	r2, 800c074 <_svfiprintf_r+0x60>
 800c070:	2a25      	cmp	r2, #37	@ 0x25
 800c072:	d1f9      	bne.n	800c068 <_svfiprintf_r+0x54>
 800c074:	ebba 0b04 	subs.w	fp, sl, r4
 800c078:	d00b      	beq.n	800c092 <_svfiprintf_r+0x7e>
 800c07a:	465b      	mov	r3, fp
 800c07c:	4622      	mov	r2, r4
 800c07e:	4629      	mov	r1, r5
 800c080:	4638      	mov	r0, r7
 800c082:	f7ff ff6b 	bl	800bf5c <__ssputs_r>
 800c086:	3001      	adds	r0, #1
 800c088:	f000 80a7 	beq.w	800c1da <_svfiprintf_r+0x1c6>
 800c08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c08e:	445a      	add	r2, fp
 800c090:	9209      	str	r2, [sp, #36]	@ 0x24
 800c092:	f89a 3000 	ldrb.w	r3, [sl]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 809f 	beq.w	800c1da <_svfiprintf_r+0x1c6>
 800c09c:	2300      	movs	r3, #0
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a2:	f10a 0a01 	add.w	sl, sl, #1
 800c0a6:	9304      	str	r3, [sp, #16]
 800c0a8:	9307      	str	r3, [sp, #28]
 800c0aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b4:	4654      	mov	r4, sl
 800c0b6:	2205      	movs	r2, #5
 800c0b8:	484f      	ldr	r0, [pc, #316]	@ (800c1f8 <_svfiprintf_r+0x1e4>)
 800c0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0be:	f000 fa5f 	bl	800c580 <memchr>
 800c0c2:	9a04      	ldr	r2, [sp, #16]
 800c0c4:	b9d8      	cbnz	r0, 800c0fe <_svfiprintf_r+0xea>
 800c0c6:	06d0      	lsls	r0, r2, #27
 800c0c8:	bf44      	itt	mi
 800c0ca:	2320      	movmi	r3, #32
 800c0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0d0:	0711      	lsls	r1, r2, #28
 800c0d2:	bf44      	itt	mi
 800c0d4:	232b      	movmi	r3, #43	@ 0x2b
 800c0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0da:	f89a 3000 	ldrb.w	r3, [sl]
 800c0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0e0:	d015      	beq.n	800c10e <_svfiprintf_r+0xfa>
 800c0e2:	9a07      	ldr	r2, [sp, #28]
 800c0e4:	4654      	mov	r4, sl
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	f04f 0c0a 	mov.w	ip, #10
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0f2:	3b30      	subs	r3, #48	@ 0x30
 800c0f4:	2b09      	cmp	r3, #9
 800c0f6:	d94b      	bls.n	800c190 <_svfiprintf_r+0x17c>
 800c0f8:	b1b0      	cbz	r0, 800c128 <_svfiprintf_r+0x114>
 800c0fa:	9207      	str	r2, [sp, #28]
 800c0fc:	e014      	b.n	800c128 <_svfiprintf_r+0x114>
 800c0fe:	eba0 0308 	sub.w	r3, r0, r8
 800c102:	46a2      	mov	sl, r4
 800c104:	fa09 f303 	lsl.w	r3, r9, r3
 800c108:	4313      	orrs	r3, r2
 800c10a:	9304      	str	r3, [sp, #16]
 800c10c:	e7d2      	b.n	800c0b4 <_svfiprintf_r+0xa0>
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	1d19      	adds	r1, r3, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	9103      	str	r1, [sp, #12]
 800c118:	bfbb      	ittet	lt
 800c11a:	425b      	neglt	r3, r3
 800c11c:	f042 0202 	orrlt.w	r2, r2, #2
 800c120:	9307      	strge	r3, [sp, #28]
 800c122:	9307      	strlt	r3, [sp, #28]
 800c124:	bfb8      	it	lt
 800c126:	9204      	strlt	r2, [sp, #16]
 800c128:	7823      	ldrb	r3, [r4, #0]
 800c12a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c12c:	d10a      	bne.n	800c144 <_svfiprintf_r+0x130>
 800c12e:	7863      	ldrb	r3, [r4, #1]
 800c130:	2b2a      	cmp	r3, #42	@ 0x2a
 800c132:	d132      	bne.n	800c19a <_svfiprintf_r+0x186>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	3402      	adds	r4, #2
 800c138:	1d1a      	adds	r2, r3, #4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c140:	9203      	str	r2, [sp, #12]
 800c142:	9305      	str	r3, [sp, #20]
 800c144:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c208 <_svfiprintf_r+0x1f4>
 800c148:	2203      	movs	r2, #3
 800c14a:	7821      	ldrb	r1, [r4, #0]
 800c14c:	4650      	mov	r0, sl
 800c14e:	f000 fa17 	bl	800c580 <memchr>
 800c152:	b138      	cbz	r0, 800c164 <_svfiprintf_r+0x150>
 800c154:	eba0 000a 	sub.w	r0, r0, sl
 800c158:	2240      	movs	r2, #64	@ 0x40
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	3401      	adds	r4, #1
 800c15e:	4082      	lsls	r2, r0
 800c160:	4313      	orrs	r3, r2
 800c162:	9304      	str	r3, [sp, #16]
 800c164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c168:	2206      	movs	r2, #6
 800c16a:	4824      	ldr	r0, [pc, #144]	@ (800c1fc <_svfiprintf_r+0x1e8>)
 800c16c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c170:	f000 fa06 	bl	800c580 <memchr>
 800c174:	2800      	cmp	r0, #0
 800c176:	d036      	beq.n	800c1e6 <_svfiprintf_r+0x1d2>
 800c178:	4b21      	ldr	r3, [pc, #132]	@ (800c200 <_svfiprintf_r+0x1ec>)
 800c17a:	bb1b      	cbnz	r3, 800c1c4 <_svfiprintf_r+0x1b0>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	3307      	adds	r3, #7
 800c180:	f023 0307 	bic.w	r3, r3, #7
 800c184:	3308      	adds	r3, #8
 800c186:	9303      	str	r3, [sp, #12]
 800c188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c18a:	4433      	add	r3, r6
 800c18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c18e:	e76a      	b.n	800c066 <_svfiprintf_r+0x52>
 800c190:	fb0c 3202 	mla	r2, ip, r2, r3
 800c194:	460c      	mov	r4, r1
 800c196:	2001      	movs	r0, #1
 800c198:	e7a8      	b.n	800c0ec <_svfiprintf_r+0xd8>
 800c19a:	2300      	movs	r3, #0
 800c19c:	3401      	adds	r4, #1
 800c19e:	f04f 0c0a 	mov.w	ip, #10
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	9305      	str	r3, [sp, #20]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ac:	3a30      	subs	r2, #48	@ 0x30
 800c1ae:	2a09      	cmp	r2, #9
 800c1b0:	d903      	bls.n	800c1ba <_svfiprintf_r+0x1a6>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0c6      	beq.n	800c144 <_svfiprintf_r+0x130>
 800c1b6:	9105      	str	r1, [sp, #20]
 800c1b8:	e7c4      	b.n	800c144 <_svfiprintf_r+0x130>
 800c1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1be:	4604      	mov	r4, r0
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e7f0      	b.n	800c1a6 <_svfiprintf_r+0x192>
 800c1c4:	ab03      	add	r3, sp, #12
 800c1c6:	462a      	mov	r2, r5
 800c1c8:	a904      	add	r1, sp, #16
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c204 <_svfiprintf_r+0x1f0>)
 800c1d0:	f3af 8000 	nop.w
 800c1d4:	1c42      	adds	r2, r0, #1
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	d1d6      	bne.n	800c188 <_svfiprintf_r+0x174>
 800c1da:	89ab      	ldrh	r3, [r5, #12]
 800c1dc:	065b      	lsls	r3, r3, #25
 800c1de:	f53f af2d 	bmi.w	800c03c <_svfiprintf_r+0x28>
 800c1e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1e4:	e72c      	b.n	800c040 <_svfiprintf_r+0x2c>
 800c1e6:	ab03      	add	r3, sp, #12
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	a904      	add	r1, sp, #16
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4b04      	ldr	r3, [pc, #16]	@ (800c204 <_svfiprintf_r+0x1f0>)
 800c1f2:	f000 f87d 	bl	800c2f0 <_printf_i>
 800c1f6:	e7ed      	b.n	800c1d4 <_svfiprintf_r+0x1c0>
 800c1f8:	0800cbf4 	.word	0x0800cbf4
 800c1fc:	0800cbfe 	.word	0x0800cbfe
 800c200:	00000000 	.word	0x00000000
 800c204:	0800bf5d 	.word	0x0800bf5d
 800c208:	0800cbfa 	.word	0x0800cbfa

0800c20c <_printf_common>:
 800c20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c210:	4616      	mov	r6, r2
 800c212:	4698      	mov	r8, r3
 800c214:	688a      	ldr	r2, [r1, #8]
 800c216:	4607      	mov	r7, r0
 800c218:	690b      	ldr	r3, [r1, #16]
 800c21a:	460c      	mov	r4, r1
 800c21c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c220:	4293      	cmp	r3, r2
 800c222:	bfb8      	it	lt
 800c224:	4613      	movlt	r3, r2
 800c226:	6033      	str	r3, [r6, #0]
 800c228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c22c:	b10a      	cbz	r2, 800c232 <_printf_common+0x26>
 800c22e:	3301      	adds	r3, #1
 800c230:	6033      	str	r3, [r6, #0]
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	0699      	lsls	r1, r3, #26
 800c236:	bf42      	ittt	mi
 800c238:	6833      	ldrmi	r3, [r6, #0]
 800c23a:	3302      	addmi	r3, #2
 800c23c:	6033      	strmi	r3, [r6, #0]
 800c23e:	6825      	ldr	r5, [r4, #0]
 800c240:	f015 0506 	ands.w	r5, r5, #6
 800c244:	d106      	bne.n	800c254 <_printf_common+0x48>
 800c246:	f104 0a19 	add.w	sl, r4, #25
 800c24a:	68e3      	ldr	r3, [r4, #12]
 800c24c:	6832      	ldr	r2, [r6, #0]
 800c24e:	1a9b      	subs	r3, r3, r2
 800c250:	42ab      	cmp	r3, r5
 800c252:	dc2b      	bgt.n	800c2ac <_printf_common+0xa0>
 800c254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c258:	6822      	ldr	r2, [r4, #0]
 800c25a:	3b00      	subs	r3, #0
 800c25c:	bf18      	it	ne
 800c25e:	2301      	movne	r3, #1
 800c260:	0692      	lsls	r2, r2, #26
 800c262:	d430      	bmi.n	800c2c6 <_printf_common+0xba>
 800c264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c268:	4641      	mov	r1, r8
 800c26a:	4638      	mov	r0, r7
 800c26c:	47c8      	blx	r9
 800c26e:	3001      	adds	r0, #1
 800c270:	d023      	beq.n	800c2ba <_printf_common+0xae>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	341a      	adds	r4, #26
 800c276:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c27a:	f003 0306 	and.w	r3, r3, #6
 800c27e:	2b04      	cmp	r3, #4
 800c280:	bf0a      	itet	eq
 800c282:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c286:	2500      	movne	r5, #0
 800c288:	6833      	ldreq	r3, [r6, #0]
 800c28a:	f04f 0600 	mov.w	r6, #0
 800c28e:	bf08      	it	eq
 800c290:	1aed      	subeq	r5, r5, r3
 800c292:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c296:	bf08      	it	eq
 800c298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c29c:	4293      	cmp	r3, r2
 800c29e:	bfc4      	itt	gt
 800c2a0:	1a9b      	subgt	r3, r3, r2
 800c2a2:	18ed      	addgt	r5, r5, r3
 800c2a4:	42b5      	cmp	r5, r6
 800c2a6:	d11a      	bne.n	800c2de <_printf_common+0xd2>
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	e008      	b.n	800c2be <_printf_common+0xb2>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	4652      	mov	r2, sl
 800c2b0:	4641      	mov	r1, r8
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	47c8      	blx	r9
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d103      	bne.n	800c2c2 <_printf_common+0xb6>
 800c2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c2:	3501      	adds	r5, #1
 800c2c4:	e7c1      	b.n	800c24a <_printf_common+0x3e>
 800c2c6:	18e1      	adds	r1, r4, r3
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	2030      	movs	r0, #48	@ 0x30
 800c2cc:	3302      	adds	r3, #2
 800c2ce:	4422      	add	r2, r4
 800c2d0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c2d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c2dc:	e7c2      	b.n	800c264 <_printf_common+0x58>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	4641      	mov	r1, r8
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	47c8      	blx	r9
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d0e6      	beq.n	800c2ba <_printf_common+0xae>
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	e7d9      	b.n	800c2a4 <_printf_common+0x98>

0800c2f0 <_printf_i>:
 800c2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f4:	7e0f      	ldrb	r7, [r1, #24]
 800c2f6:	4691      	mov	r9, r2
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	2f78      	cmp	r7, #120	@ 0x78
 800c2fe:	469a      	mov	sl, r3
 800c300:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c306:	d807      	bhi.n	800c318 <_printf_i+0x28>
 800c308:	2f62      	cmp	r7, #98	@ 0x62
 800c30a:	d80a      	bhi.n	800c322 <_printf_i+0x32>
 800c30c:	2f00      	cmp	r7, #0
 800c30e:	f000 80d1 	beq.w	800c4b4 <_printf_i+0x1c4>
 800c312:	2f58      	cmp	r7, #88	@ 0x58
 800c314:	f000 80b8 	beq.w	800c488 <_printf_i+0x198>
 800c318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c31c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c320:	e03a      	b.n	800c398 <_printf_i+0xa8>
 800c322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c326:	2b15      	cmp	r3, #21
 800c328:	d8f6      	bhi.n	800c318 <_printf_i+0x28>
 800c32a:	a101      	add	r1, pc, #4	@ (adr r1, 800c330 <_printf_i+0x40>)
 800c32c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c330:	0800c389 	.word	0x0800c389
 800c334:	0800c39d 	.word	0x0800c39d
 800c338:	0800c319 	.word	0x0800c319
 800c33c:	0800c319 	.word	0x0800c319
 800c340:	0800c319 	.word	0x0800c319
 800c344:	0800c319 	.word	0x0800c319
 800c348:	0800c39d 	.word	0x0800c39d
 800c34c:	0800c319 	.word	0x0800c319
 800c350:	0800c319 	.word	0x0800c319
 800c354:	0800c319 	.word	0x0800c319
 800c358:	0800c319 	.word	0x0800c319
 800c35c:	0800c49b 	.word	0x0800c49b
 800c360:	0800c3c7 	.word	0x0800c3c7
 800c364:	0800c455 	.word	0x0800c455
 800c368:	0800c319 	.word	0x0800c319
 800c36c:	0800c319 	.word	0x0800c319
 800c370:	0800c4bd 	.word	0x0800c4bd
 800c374:	0800c319 	.word	0x0800c319
 800c378:	0800c3c7 	.word	0x0800c3c7
 800c37c:	0800c319 	.word	0x0800c319
 800c380:	0800c319 	.word	0x0800c319
 800c384:	0800c45d 	.word	0x0800c45d
 800c388:	6833      	ldr	r3, [r6, #0]
 800c38a:	1d1a      	adds	r2, r3, #4
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6032      	str	r2, [r6, #0]
 800c390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c398:	2301      	movs	r3, #1
 800c39a:	e09c      	b.n	800c4d6 <_printf_i+0x1e6>
 800c39c:	6833      	ldr	r3, [r6, #0]
 800c39e:	6820      	ldr	r0, [r4, #0]
 800c3a0:	1d19      	adds	r1, r3, #4
 800c3a2:	6031      	str	r1, [r6, #0]
 800c3a4:	0606      	lsls	r6, r0, #24
 800c3a6:	d501      	bpl.n	800c3ac <_printf_i+0xbc>
 800c3a8:	681d      	ldr	r5, [r3, #0]
 800c3aa:	e003      	b.n	800c3b4 <_printf_i+0xc4>
 800c3ac:	0645      	lsls	r5, r0, #25
 800c3ae:	d5fb      	bpl.n	800c3a8 <_printf_i+0xb8>
 800c3b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c3b4:	2d00      	cmp	r5, #0
 800c3b6:	da03      	bge.n	800c3c0 <_printf_i+0xd0>
 800c3b8:	232d      	movs	r3, #45	@ 0x2d
 800c3ba:	426d      	negs	r5, r5
 800c3bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3c0:	4858      	ldr	r0, [pc, #352]	@ (800c524 <_printf_i+0x234>)
 800c3c2:	230a      	movs	r3, #10
 800c3c4:	e011      	b.n	800c3ea <_printf_i+0xfa>
 800c3c6:	6821      	ldr	r1, [r4, #0]
 800c3c8:	6833      	ldr	r3, [r6, #0]
 800c3ca:	0608      	lsls	r0, r1, #24
 800c3cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c3d0:	d402      	bmi.n	800c3d8 <_printf_i+0xe8>
 800c3d2:	0649      	lsls	r1, r1, #25
 800c3d4:	bf48      	it	mi
 800c3d6:	b2ad      	uxthmi	r5, r5
 800c3d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c3da:	6033      	str	r3, [r6, #0]
 800c3dc:	4851      	ldr	r0, [pc, #324]	@ (800c524 <_printf_i+0x234>)
 800c3de:	bf14      	ite	ne
 800c3e0:	230a      	movne	r3, #10
 800c3e2:	2308      	moveq	r3, #8
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c3ea:	6866      	ldr	r6, [r4, #4]
 800c3ec:	2e00      	cmp	r6, #0
 800c3ee:	60a6      	str	r6, [r4, #8]
 800c3f0:	db05      	blt.n	800c3fe <_printf_i+0x10e>
 800c3f2:	6821      	ldr	r1, [r4, #0]
 800c3f4:	432e      	orrs	r6, r5
 800c3f6:	f021 0104 	bic.w	r1, r1, #4
 800c3fa:	6021      	str	r1, [r4, #0]
 800c3fc:	d04b      	beq.n	800c496 <_printf_i+0x1a6>
 800c3fe:	4616      	mov	r6, r2
 800c400:	fbb5 f1f3 	udiv	r1, r5, r3
 800c404:	fb03 5711 	mls	r7, r3, r1, r5
 800c408:	5dc7      	ldrb	r7, [r0, r7]
 800c40a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c40e:	462f      	mov	r7, r5
 800c410:	460d      	mov	r5, r1
 800c412:	42bb      	cmp	r3, r7
 800c414:	d9f4      	bls.n	800c400 <_printf_i+0x110>
 800c416:	2b08      	cmp	r3, #8
 800c418:	d10b      	bne.n	800c432 <_printf_i+0x142>
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	07df      	lsls	r7, r3, #31
 800c41e:	d508      	bpl.n	800c432 <_printf_i+0x142>
 800c420:	6923      	ldr	r3, [r4, #16]
 800c422:	6861      	ldr	r1, [r4, #4]
 800c424:	4299      	cmp	r1, r3
 800c426:	bfde      	ittt	le
 800c428:	2330      	movle	r3, #48	@ 0x30
 800c42a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c42e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c432:	1b92      	subs	r2, r2, r6
 800c434:	6122      	str	r2, [r4, #16]
 800c436:	464b      	mov	r3, r9
 800c438:	aa03      	add	r2, sp, #12
 800c43a:	4621      	mov	r1, r4
 800c43c:	4640      	mov	r0, r8
 800c43e:	f8cd a000 	str.w	sl, [sp]
 800c442:	f7ff fee3 	bl	800c20c <_printf_common>
 800c446:	3001      	adds	r0, #1
 800c448:	d14a      	bne.n	800c4e0 <_printf_i+0x1f0>
 800c44a:	f04f 30ff 	mov.w	r0, #4294967295
 800c44e:	b004      	add	sp, #16
 800c450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	f043 0320 	orr.w	r3, r3, #32
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	2778      	movs	r7, #120	@ 0x78
 800c45e:	4832      	ldr	r0, [pc, #200]	@ (800c528 <_printf_i+0x238>)
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c466:	061f      	lsls	r7, r3, #24
 800c468:	6831      	ldr	r1, [r6, #0]
 800c46a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c46e:	d402      	bmi.n	800c476 <_printf_i+0x186>
 800c470:	065f      	lsls	r7, r3, #25
 800c472:	bf48      	it	mi
 800c474:	b2ad      	uxthmi	r5, r5
 800c476:	6031      	str	r1, [r6, #0]
 800c478:	07d9      	lsls	r1, r3, #31
 800c47a:	bf44      	itt	mi
 800c47c:	f043 0320 	orrmi.w	r3, r3, #32
 800c480:	6023      	strmi	r3, [r4, #0]
 800c482:	b11d      	cbz	r5, 800c48c <_printf_i+0x19c>
 800c484:	2310      	movs	r3, #16
 800c486:	e7ad      	b.n	800c3e4 <_printf_i+0xf4>
 800c488:	4826      	ldr	r0, [pc, #152]	@ (800c524 <_printf_i+0x234>)
 800c48a:	e7e9      	b.n	800c460 <_printf_i+0x170>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	f023 0320 	bic.w	r3, r3, #32
 800c492:	6023      	str	r3, [r4, #0]
 800c494:	e7f6      	b.n	800c484 <_printf_i+0x194>
 800c496:	4616      	mov	r6, r2
 800c498:	e7bd      	b.n	800c416 <_printf_i+0x126>
 800c49a:	6833      	ldr	r3, [r6, #0]
 800c49c:	6825      	ldr	r5, [r4, #0]
 800c49e:	1d18      	adds	r0, r3, #4
 800c4a0:	6961      	ldr	r1, [r4, #20]
 800c4a2:	6030      	str	r0, [r6, #0]
 800c4a4:	062e      	lsls	r6, r5, #24
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	d501      	bpl.n	800c4ae <_printf_i+0x1be>
 800c4aa:	6019      	str	r1, [r3, #0]
 800c4ac:	e002      	b.n	800c4b4 <_printf_i+0x1c4>
 800c4ae:	0668      	lsls	r0, r5, #25
 800c4b0:	d5fb      	bpl.n	800c4aa <_printf_i+0x1ba>
 800c4b2:	8019      	strh	r1, [r3, #0]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4616      	mov	r6, r2
 800c4b8:	6123      	str	r3, [r4, #16]
 800c4ba:	e7bc      	b.n	800c436 <_printf_i+0x146>
 800c4bc:	6833      	ldr	r3, [r6, #0]
 800c4be:	2100      	movs	r1, #0
 800c4c0:	1d1a      	adds	r2, r3, #4
 800c4c2:	6032      	str	r2, [r6, #0]
 800c4c4:	681e      	ldr	r6, [r3, #0]
 800c4c6:	6862      	ldr	r2, [r4, #4]
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f000 f859 	bl	800c580 <memchr>
 800c4ce:	b108      	cbz	r0, 800c4d4 <_printf_i+0x1e4>
 800c4d0:	1b80      	subs	r0, r0, r6
 800c4d2:	6060      	str	r0, [r4, #4]
 800c4d4:	6863      	ldr	r3, [r4, #4]
 800c4d6:	6123      	str	r3, [r4, #16]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4de:	e7aa      	b.n	800c436 <_printf_i+0x146>
 800c4e0:	6923      	ldr	r3, [r4, #16]
 800c4e2:	4632      	mov	r2, r6
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	47d0      	blx	sl
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	d0ad      	beq.n	800c44a <_printf_i+0x15a>
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	079b      	lsls	r3, r3, #30
 800c4f2:	d413      	bmi.n	800c51c <_printf_i+0x22c>
 800c4f4:	68e0      	ldr	r0, [r4, #12]
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	4298      	cmp	r0, r3
 800c4fa:	bfb8      	it	lt
 800c4fc:	4618      	movlt	r0, r3
 800c4fe:	e7a6      	b.n	800c44e <_printf_i+0x15e>
 800c500:	2301      	movs	r3, #1
 800c502:	4632      	mov	r2, r6
 800c504:	4649      	mov	r1, r9
 800c506:	4640      	mov	r0, r8
 800c508:	47d0      	blx	sl
 800c50a:	3001      	adds	r0, #1
 800c50c:	d09d      	beq.n	800c44a <_printf_i+0x15a>
 800c50e:	3501      	adds	r5, #1
 800c510:	68e3      	ldr	r3, [r4, #12]
 800c512:	9903      	ldr	r1, [sp, #12]
 800c514:	1a5b      	subs	r3, r3, r1
 800c516:	42ab      	cmp	r3, r5
 800c518:	dcf2      	bgt.n	800c500 <_printf_i+0x210>
 800c51a:	e7eb      	b.n	800c4f4 <_printf_i+0x204>
 800c51c:	2500      	movs	r5, #0
 800c51e:	f104 0619 	add.w	r6, r4, #25
 800c522:	e7f5      	b.n	800c510 <_printf_i+0x220>
 800c524:	0800cc05 	.word	0x0800cc05
 800c528:	0800cc16 	.word	0x0800cc16

0800c52c <memmove>:
 800c52c:	4288      	cmp	r0, r1
 800c52e:	b510      	push	{r4, lr}
 800c530:	eb01 0402 	add.w	r4, r1, r2
 800c534:	d902      	bls.n	800c53c <memmove+0x10>
 800c536:	4284      	cmp	r4, r0
 800c538:	4623      	mov	r3, r4
 800c53a:	d807      	bhi.n	800c54c <memmove+0x20>
 800c53c:	1e43      	subs	r3, r0, #1
 800c53e:	42a1      	cmp	r1, r4
 800c540:	d008      	beq.n	800c554 <memmove+0x28>
 800c542:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c54a:	e7f8      	b.n	800c53e <memmove+0x12>
 800c54c:	4402      	add	r2, r0
 800c54e:	4601      	mov	r1, r0
 800c550:	428a      	cmp	r2, r1
 800c552:	d100      	bne.n	800c556 <memmove+0x2a>
 800c554:	bd10      	pop	{r4, pc}
 800c556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c55a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c55e:	e7f7      	b.n	800c550 <memmove+0x24>

0800c560 <_sbrk_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	2300      	movs	r3, #0
 800c564:	4d05      	ldr	r5, [pc, #20]	@ (800c57c <_sbrk_r+0x1c>)
 800c566:	4604      	mov	r4, r0
 800c568:	4608      	mov	r0, r1
 800c56a:	602b      	str	r3, [r5, #0]
 800c56c:	f7f6 f94c 	bl	8002808 <_sbrk>
 800c570:	1c43      	adds	r3, r0, #1
 800c572:	d102      	bne.n	800c57a <_sbrk_r+0x1a>
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	b103      	cbz	r3, 800c57a <_sbrk_r+0x1a>
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
 800c57c:	20000694 	.word	0x20000694

0800c580 <memchr>:
 800c580:	b2c9      	uxtb	r1, r1
 800c582:	4603      	mov	r3, r0
 800c584:	4402      	add	r2, r0
 800c586:	b510      	push	{r4, lr}
 800c588:	4293      	cmp	r3, r2
 800c58a:	4618      	mov	r0, r3
 800c58c:	d101      	bne.n	800c592 <memchr+0x12>
 800c58e:	2000      	movs	r0, #0
 800c590:	e003      	b.n	800c59a <memchr+0x1a>
 800c592:	7804      	ldrb	r4, [r0, #0]
 800c594:	3301      	adds	r3, #1
 800c596:	428c      	cmp	r4, r1
 800c598:	d1f6      	bne.n	800c588 <memchr+0x8>
 800c59a:	bd10      	pop	{r4, pc}

0800c59c <memcpy>:
 800c59c:	440a      	add	r2, r1
 800c59e:	1e43      	subs	r3, r0, #1
 800c5a0:	4291      	cmp	r1, r2
 800c5a2:	d100      	bne.n	800c5a6 <memcpy+0xa>
 800c5a4:	4770      	bx	lr
 800c5a6:	b510      	push	{r4, lr}
 800c5a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ac:	4291      	cmp	r1, r2
 800c5ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5b2:	d1f9      	bne.n	800c5a8 <memcpy+0xc>
 800c5b4:	bd10      	pop	{r4, pc}

0800c5b6 <_realloc_r>:
 800c5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ba:	4607      	mov	r7, r0
 800c5bc:	4614      	mov	r4, r2
 800c5be:	460d      	mov	r5, r1
 800c5c0:	b921      	cbnz	r1, 800c5cc <_realloc_r+0x16>
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c8:	f7ff bc3c 	b.w	800be44 <_malloc_r>
 800c5cc:	b92a      	cbnz	r2, 800c5da <_realloc_r+0x24>
 800c5ce:	4625      	mov	r5, r4
 800c5d0:	f7ff fbcc 	bl	800bd6c <_free_r>
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5da:	f000 f81a 	bl	800c612 <_malloc_usable_size_r>
 800c5de:	4284      	cmp	r4, r0
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	d802      	bhi.n	800c5ea <_realloc_r+0x34>
 800c5e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5e8:	d8f4      	bhi.n	800c5d4 <_realloc_r+0x1e>
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7ff fc29 	bl	800be44 <_malloc_r>
 800c5f2:	4680      	mov	r8, r0
 800c5f4:	b908      	cbnz	r0, 800c5fa <_realloc_r+0x44>
 800c5f6:	4645      	mov	r5, r8
 800c5f8:	e7ec      	b.n	800c5d4 <_realloc_r+0x1e>
 800c5fa:	42b4      	cmp	r4, r6
 800c5fc:	4622      	mov	r2, r4
 800c5fe:	4629      	mov	r1, r5
 800c600:	bf28      	it	cs
 800c602:	4632      	movcs	r2, r6
 800c604:	f7ff ffca 	bl	800c59c <memcpy>
 800c608:	4629      	mov	r1, r5
 800c60a:	4638      	mov	r0, r7
 800c60c:	f7ff fbae 	bl	800bd6c <_free_r>
 800c610:	e7f1      	b.n	800c5f6 <_realloc_r+0x40>

0800c612 <_malloc_usable_size_r>:
 800c612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c616:	1f18      	subs	r0, r3, #4
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bfbc      	itt	lt
 800c61c:	580b      	ldrlt	r3, [r1, r0]
 800c61e:	18c0      	addlt	r0, r0, r3
 800c620:	4770      	bx	lr

0800c622 <atan2f>:
 800c622:	f000 b84f 	b.w	800c6c4 <__ieee754_atan2f>
	...

0800c628 <sqrtf>:
 800c628:	b508      	push	{r3, lr}
 800c62a:	ed2d 8b02 	vpush	{d8}
 800c62e:	eeb0 8a40 	vmov.f32	s16, s0
 800c632:	f000 f843 	bl	800c6bc <__ieee754_sqrtf>
 800c636:	eeb4 8a48 	vcmp.f32	s16, s16
 800c63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63e:	d60c      	bvs.n	800c65a <sqrtf+0x32>
 800c640:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c660 <sqrtf+0x38>
 800c644:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64c:	d505      	bpl.n	800c65a <sqrtf+0x32>
 800c64e:	f7ff fb61 	bl	800bd14 <__errno>
 800c652:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c656:	2321      	movs	r3, #33	@ 0x21
 800c658:	6003      	str	r3, [r0, #0]
 800c65a:	ecbd 8b02 	vpop	{d8}
 800c65e:	bd08      	pop	{r3, pc}
 800c660:	00000000 	.word	0x00000000

0800c664 <lroundf>:
 800c664:	ee10 1a10 	vmov	r1, s0
 800c668:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800c66c:	2900      	cmp	r1, #0
 800c66e:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 800c672:	bfac      	ite	ge
 800c674:	2001      	movge	r0, #1
 800c676:	f04f 30ff 	movlt.w	r0, #4294967295
 800c67a:	2a1e      	cmp	r2, #30
 800c67c:	dc19      	bgt.n	800c6b2 <lroundf+0x4e>
 800c67e:	2a00      	cmp	r2, #0
 800c680:	da03      	bge.n	800c68a <lroundf+0x26>
 800c682:	3201      	adds	r2, #1
 800c684:	bf18      	it	ne
 800c686:	2000      	movne	r0, #0
 800c688:	4770      	bx	lr
 800c68a:	2a16      	cmp	r2, #22
 800c68c:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800c690:	bfd8      	it	le
 800c692:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 800c696:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800c69a:	bfcd      	iteet	gt
 800c69c:	3b96      	subgt	r3, #150	@ 0x96
 800c69e:	4113      	asrle	r3, r2
 800c6a0:	f1c2 0217 	rsble	r2, r2, #23
 800c6a4:	fa01 f303 	lslgt.w	r3, r1, r3
 800c6a8:	bfdc      	itt	le
 800c6aa:	185b      	addle	r3, r3, r1
 800c6ac:	40d3      	lsrle	r3, r2
 800c6ae:	4358      	muls	r0, r3
 800c6b0:	4770      	bx	lr
 800c6b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c6b6:	ee17 0a90 	vmov	r0, s15
 800c6ba:	4770      	bx	lr

0800c6bc <__ieee754_sqrtf>:
 800c6bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c6c0:	4770      	bx	lr
	...

0800c6c4 <__ieee754_atan2f>:
 800c6c4:	ee10 2a90 	vmov	r2, s1
 800c6c8:	eef0 7a40 	vmov.f32	s15, s0
 800c6cc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c6d0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c6d4:	b510      	push	{r4, lr}
 800c6d6:	d806      	bhi.n	800c6e6 <__ieee754_atan2f+0x22>
 800c6d8:	ee10 0a10 	vmov	r0, s0
 800c6dc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c6e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c6e4:	d904      	bls.n	800c6f0 <__ieee754_atan2f+0x2c>
 800c6e6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c6ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c6ee:	bd10      	pop	{r4, pc}
 800c6f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c6f4:	d103      	bne.n	800c6fe <__ieee754_atan2f+0x3a>
 800c6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6fa:	f000 b881 	b.w	800c800 <atanf>
 800c6fe:	1794      	asrs	r4, r2, #30
 800c700:	f004 0402 	and.w	r4, r4, #2
 800c704:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c708:	b93b      	cbnz	r3, 800c71a <__ieee754_atan2f+0x56>
 800c70a:	2c02      	cmp	r4, #2
 800c70c:	d05c      	beq.n	800c7c8 <__ieee754_atan2f+0x104>
 800c70e:	2c03      	cmp	r4, #3
 800c710:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c7dc <__ieee754_atan2f+0x118>
 800c714:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c718:	e7e7      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c71a:	b939      	cbnz	r1, 800c72c <__ieee754_atan2f+0x68>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800c7e0 <__ieee754_atan2f+0x11c>
 800c722:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c7e4 <__ieee754_atan2f+0x120>
 800c726:	fe67 7a27 	vselge.f32	s15, s14, s15
 800c72a:	e7de      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c72c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c730:	d110      	bne.n	800c754 <__ieee754_atan2f+0x90>
 800c732:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c736:	f104 34ff 	add.w	r4, r4, #4294967295
 800c73a:	d107      	bne.n	800c74c <__ieee754_atan2f+0x88>
 800c73c:	2c02      	cmp	r4, #2
 800c73e:	d846      	bhi.n	800c7ce <__ieee754_atan2f+0x10a>
 800c740:	4b29      	ldr	r3, [pc, #164]	@ (800c7e8 <__ieee754_atan2f+0x124>)
 800c742:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c746:	edd3 7a00 	vldr	s15, [r3]
 800c74a:	e7ce      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c74c:	2c02      	cmp	r4, #2
 800c74e:	d841      	bhi.n	800c7d4 <__ieee754_atan2f+0x110>
 800c750:	4b26      	ldr	r3, [pc, #152]	@ (800c7ec <__ieee754_atan2f+0x128>)
 800c752:	e7f6      	b.n	800c742 <__ieee754_atan2f+0x7e>
 800c754:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c758:	d0e0      	beq.n	800c71c <__ieee754_atan2f+0x58>
 800c75a:	1a5b      	subs	r3, r3, r1
 800c75c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c760:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c764:	da1a      	bge.n	800c79c <__ieee754_atan2f+0xd8>
 800c766:	2a00      	cmp	r2, #0
 800c768:	da01      	bge.n	800c76e <__ieee754_atan2f+0xaa>
 800c76a:	313c      	adds	r1, #60	@ 0x3c
 800c76c:	db19      	blt.n	800c7a2 <__ieee754_atan2f+0xde>
 800c76e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c772:	f000 f919 	bl	800c9a8 <fabsf>
 800c776:	f000 f843 	bl	800c800 <atanf>
 800c77a:	eef0 7a40 	vmov.f32	s15, s0
 800c77e:	2c01      	cmp	r4, #1
 800c780:	d012      	beq.n	800c7a8 <__ieee754_atan2f+0xe4>
 800c782:	2c02      	cmp	r4, #2
 800c784:	d017      	beq.n	800c7b6 <__ieee754_atan2f+0xf2>
 800c786:	2c00      	cmp	r4, #0
 800c788:	d0af      	beq.n	800c6ea <__ieee754_atan2f+0x26>
 800c78a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c7f0 <__ieee754_atan2f+0x12c>
 800c78e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c792:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c7f4 <__ieee754_atan2f+0x130>
 800c796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c79a:	e7a6      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c79c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c7e4 <__ieee754_atan2f+0x120>
 800c7a0:	e7ed      	b.n	800c77e <__ieee754_atan2f+0xba>
 800c7a2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c7f8 <__ieee754_atan2f+0x134>
 800c7a6:	e7ea      	b.n	800c77e <__ieee754_atan2f+0xba>
 800c7a8:	ee17 3a90 	vmov	r3, s15
 800c7ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c7b0:	ee07 3a90 	vmov	s15, r3
 800c7b4:	e799      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c7b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c7f0 <__ieee754_atan2f+0x12c>
 800c7ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7be:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c7f4 <__ieee754_atan2f+0x130>
 800c7c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7c6:	e790      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c7c8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c7f4 <__ieee754_atan2f+0x130>
 800c7cc:	e78d      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c7ce:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c7fc <__ieee754_atan2f+0x138>
 800c7d2:	e78a      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c7d4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c7f8 <__ieee754_atan2f+0x134>
 800c7d8:	e787      	b.n	800c6ea <__ieee754_atan2f+0x26>
 800c7da:	bf00      	nop
 800c7dc:	c0490fdb 	.word	0xc0490fdb
 800c7e0:	bfc90fdb 	.word	0xbfc90fdb
 800c7e4:	3fc90fdb 	.word	0x3fc90fdb
 800c7e8:	0800cc34 	.word	0x0800cc34
 800c7ec:	0800cc28 	.word	0x0800cc28
 800c7f0:	33bbbd2e 	.word	0x33bbbd2e
 800c7f4:	40490fdb 	.word	0x40490fdb
 800c7f8:	00000000 	.word	0x00000000
 800c7fc:	3f490fdb 	.word	0x3f490fdb

0800c800 <atanf>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	ee10 5a10 	vmov	r5, s0
 800c806:	eef0 7a40 	vmov.f32	s15, s0
 800c80a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c80e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c812:	d30f      	bcc.n	800c834 <atanf+0x34>
 800c814:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c818:	d904      	bls.n	800c824 <atanf+0x24>
 800c81a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c81e:	eeb0 0a67 	vmov.f32	s0, s15
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	2d00      	cmp	r5, #0
 800c826:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c95c <atanf+0x15c>
 800c82a:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c960 <atanf+0x160>
 800c82e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800c832:	e7f4      	b.n	800c81e <atanf+0x1e>
 800c834:	4b4b      	ldr	r3, [pc, #300]	@ (800c964 <atanf+0x164>)
 800c836:	429c      	cmp	r4, r3
 800c838:	d810      	bhi.n	800c85c <atanf+0x5c>
 800c83a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c83e:	d20a      	bcs.n	800c856 <atanf+0x56>
 800c840:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c968 <atanf+0x168>
 800c844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c848:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c84c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c854:	dce3      	bgt.n	800c81e <atanf+0x1e>
 800c856:	f04f 33ff 	mov.w	r3, #4294967295
 800c85a:	e013      	b.n	800c884 <atanf+0x84>
 800c85c:	f000 f8a4 	bl	800c9a8 <fabsf>
 800c860:	4b42      	ldr	r3, [pc, #264]	@ (800c96c <atanf+0x16c>)
 800c862:	429c      	cmp	r4, r3
 800c864:	d84f      	bhi.n	800c906 <atanf+0x106>
 800c866:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c86a:	429c      	cmp	r4, r3
 800c86c:	d841      	bhi.n	800c8f2 <atanf+0xf2>
 800c86e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c872:	2300      	movs	r3, #0
 800c874:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c878:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c87c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c880:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c884:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c970 <atanf+0x170>
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c974 <atanf+0x174>
 800c88e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c978 <atanf+0x178>
 800c892:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c896:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c89a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c89e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800c97c <atanf+0x17c>
 800c8a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c8a6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800c980 <atanf+0x180>
 800c8aa:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c8ae:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800c984 <atanf+0x184>
 800c8b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c8b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c988 <atanf+0x188>
 800c8ba:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c8be:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c98c <atanf+0x18c>
 800c8c2:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c8c6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c990 <atanf+0x190>
 800c8ca:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c8ce:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800c994 <atanf+0x194>
 800c8d2:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c8d6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c998 <atanf+0x198>
 800c8da:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c8de:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c8e2:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c8e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c8ea:	d121      	bne.n	800c930 <atanf+0x130>
 800c8ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8f0:	e795      	b.n	800c81e <atanf+0x1e>
 800c8f2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c8fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c900:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c904:	e7be      	b.n	800c884 <atanf+0x84>
 800c906:	4b25      	ldr	r3, [pc, #148]	@ (800c99c <atanf+0x19c>)
 800c908:	429c      	cmp	r4, r3
 800c90a:	d80b      	bhi.n	800c924 <atanf+0x124>
 800c90c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c910:	2302      	movs	r3, #2
 800c912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c916:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c91a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c91e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c922:	e7af      	b.n	800c884 <atanf+0x84>
 800c924:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c928:	2303      	movs	r3, #3
 800c92a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c92e:	e7a9      	b.n	800c884 <atanf+0x84>
 800c930:	4a1b      	ldr	r2, [pc, #108]	@ (800c9a0 <atanf+0x1a0>)
 800c932:	2d00      	cmp	r5, #0
 800c934:	491b      	ldr	r1, [pc, #108]	@ (800c9a4 <atanf+0x1a4>)
 800c936:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c93a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c93e:	edd3 6a00 	vldr	s13, [r3]
 800c942:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c94a:	edd2 7a00 	vldr	s15, [r2]
 800c94e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c952:	bfb8      	it	lt
 800c954:	eef1 7a67 	vneglt.f32	s15, s15
 800c958:	e761      	b.n	800c81e <atanf+0x1e>
 800c95a:	bf00      	nop
 800c95c:	bfc90fdb 	.word	0xbfc90fdb
 800c960:	3fc90fdb 	.word	0x3fc90fdb
 800c964:	3edfffff 	.word	0x3edfffff
 800c968:	7149f2ca 	.word	0x7149f2ca
 800c96c:	3f97ffff 	.word	0x3f97ffff
 800c970:	3c8569d7 	.word	0x3c8569d7
 800c974:	3d4bda59 	.word	0x3d4bda59
 800c978:	bd6ef16b 	.word	0xbd6ef16b
 800c97c:	3d886b35 	.word	0x3d886b35
 800c980:	3dba2e6e 	.word	0x3dba2e6e
 800c984:	3e124925 	.word	0x3e124925
 800c988:	3eaaaaab 	.word	0x3eaaaaab
 800c98c:	bd15a221 	.word	0xbd15a221
 800c990:	bd9d8795 	.word	0xbd9d8795
 800c994:	bde38e38 	.word	0xbde38e38
 800c998:	be4ccccd 	.word	0xbe4ccccd
 800c99c:	401bffff 	.word	0x401bffff
 800c9a0:	0800cc50 	.word	0x0800cc50
 800c9a4:	0800cc40 	.word	0x0800cc40

0800c9a8 <fabsf>:
 800c9a8:	ee10 3a10 	vmov	r3, s0
 800c9ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9b0:	ee00 3a10 	vmov	s0, r3
 800c9b4:	4770      	bx	lr
	...

0800c9b8 <_init>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	bf00      	nop
 800c9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9be:	bc08      	pop	{r3}
 800c9c0:	469e      	mov	lr, r3
 800c9c2:	4770      	bx	lr

0800c9c4 <_fini>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	bf00      	nop
 800c9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ca:	bc08      	pop	{r3}
 800c9cc:	469e      	mov	lr, r3
 800c9ce:	4770      	bx	lr
